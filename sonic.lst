00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000 =FFFFF5D8                  Super_Sonic_palette =        $FFFFF5D8
00000000 =FFFFF5DC                  Palette_frame =        $FFFFF5DC
00000000 =FFFFF5DE                  Palette_timer =        $FFFFF5DE
00000000 =FFFFF5CD                  Palette_Frame_Count =        $FFFFF5CD
00000000 =FFFFF670                  Super_Sonic_frame_count =    $FFFFF670
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                                include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 6100 0000                  		bsr.w	PalCycle_SuperSonic	
00001D22 7400                       		moveq	#0,d2
00001D24 7000                       		moveq	#0,d0
00001D26 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D2A D040                       		add.w	d0,d0
00001D2C 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D30 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D34                            ; End of function PaletteCycle
00001D34                            
00001D34                            ; ===========================================================================
00001D34                            ; ---------------------------------------------------------------------------
00001D34                            ; Palette cycling routines
00001D34                            ; ---------------------------------------------------------------------------
00001D34 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D36 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D38 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D3C 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3E 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D40 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D42                            
00001D42                            
00001D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D42                            
00001D42                            
00001D42                            PCycle_Title:
00001D42 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D48 6000                       		bra.s	PCycGHZ_Go
00001D4A                            ; ===========================================================================
00001D4A                            
00001D4A                            PCycle_GHZ:
00001D4A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D50                            
00001D50                            PCycGHZ_Go:
00001D50 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D54 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D56                            
00001D56 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D5C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D60 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D64 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D68 E748                       		lsl.w	#3,d0
00001D6A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D72 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D76                            
00001D76                            PCycGHZ_Skip:
00001D76 4E75                       		rts	
00001D78                            ; End of function PCycle_GHZ
00001D78                            
00001D78                            
00001D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D78                            
00001D78                            
00001D78                            PCycle_LZ:
00001D78                            ; Waterfalls
00001D78 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D7C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7E                            
00001D7E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D84 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D88 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D8C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D90 E748                       		lsl.w	#3,d0
00001D92 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D98 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9E 6600                       		bne.s	PCycLZ_NotSBZ3
00001DA0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA6                            
00001DA6                            	PCycLZ_NotSBZ3:
00001DA6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DB2 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DBA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            PCycLZ_Skip1:
00001DBE                            ; Conveyor belts
00001DBE                            		;move.w	(v_framecount).w,d0
00001DBE                            		;andi.w	#7,d0
00001DBE                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBE                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBE                            		;moveq	#1,d1
00001DBE                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBE                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBE                            		;neg.w	d1
00001DBE                            
00001DBE                            	;PCycLZ_NoRev:
00001DBE                            		;move.w	(v_pal_buffer).w,d0
00001DBE                            		;andi.w	#3,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;cmpi.w	#3,d0
00001DBE                            		;bcs.s	loc_1A0A
00001DBE                            		;move.w	d0,d1
00001DBE                            		;moveq	#0,d0
00001DBE                            		;tst.w	d1
00001DBE                            		;bpl.s	loc_1A0A
00001DBE                            		;moveq	#2,d0
00001DBE                            
00001DBE                            ;loc_1A0A:
00001DBE                            		;move.w	d0,(v_pal_buffer).w
00001DBE                            		;add.w	d0,d0
00001DBE                            		;move.w	d0,d1
00001DBE                            		;add.w	d0,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;lea	(Pal_LZCyc2).l,a0
00001DBE                            		;lea	(v_pal_dry+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            		;lea	(Pal_LZCyc3).l,a0
00001DBE                            		;lea	(v_pal_water+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            ;PCycLZ_Skip2:
00001DBE 4E75                       		rts	
00001DC0                            ; End of function PCycle_LZ
00001DC0                            
00001DC0                            ; ===========================================================================
00001DC0 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC8                            ; ===========================================================================
00001DC8                            
00001DC8                            PCycle_MZ:
00001DC8 4E75                       		rts	
00001DCA                            
00001DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DCA                            
00001DCA                            
00001DCA                            PalCycle_SLZ:
00001DCA 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCE 6A00                       		bpl.s	locret_1A80
00001DD0 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD6 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DDA 5240                       		addq.w	#1,d0
00001DDC 0C40 0006                  		cmpi.w	#6,d0
00001DE0 6500                       		bcs.s	loc_1A60
00001DE2 7000                       		moveq	#0,d0
00001DE4                            
00001DE4                            loc_1A60:
00001DE4 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE8 3200                       		move.w	d0,d1
00001DEA D241                       		add.w	d1,d1
00001DEC D041                       		add.w	d1,d0
00001DEE D040                       		add.w	d0,d0
00001DF0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DFA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E04                            
00001E04                            locret_1A80:
00001E04 4E75                       		rts	
00001E06                            ; End of function PalCycle_SLZ
00001E06                            
00001E06                            
00001E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E06                            
00001E06                            
00001E06                            PalCycle_SYZ:
00001E06 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E0A 6A00                       		bpl.s	locret_1AC6
00001E0C 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E12 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E16 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E1A 0240 0003                  		andi.w	#3,d0
00001E1E E548                       		lsl.w	#2,d0
00001E20 3200                       		move.w	d0,d1
00001E22 D040                       		add.w	d0,d0
00001E24 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E2A 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E32 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E36 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E3C 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E40 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E44 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E4A                            
00001E4A                            locret_1AC6:
00001E4A 4E75                       		rts	
00001E4C                            ; End of function PalCycle_SYZ
00001E4C                            
00001E4C                            
00001E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E4C                            
00001E4C                            
00001E4C                            PalCycle_SBZ:
00001E4C 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E52 4A38 FE11                  		tst.b	(v_act).w
00001E56 6700                       		beq.s	loc_1ADA
00001E58 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5E                            
00001E5E                            loc_1ADA:
00001E5E 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E62 321A                       		move.w	(a2)+,d1
00001E64                            
00001E64                            loc_1AE0:
00001E64 5311                       		subq.b	#1,(a1)
00001E66 6B00                       		bmi.s	loc_1AEA
00001E68 5489                       		addq.l	#2,a1
00001E6A 5C8A                       		addq.l	#6,a2
00001E6C 6000                       		bra.s	loc_1B06
00001E6E                            ; ===========================================================================
00001E6E                            
00001E6E                            loc_1AEA:
00001E6E 12DA                       		move.b	(a2)+,(a1)+
00001E70 1011                       		move.b	(a1),d0
00001E72 5200                       		addq.b	#1,d0
00001E74 B01A                       		cmp.b	(a2)+,d0
00001E76 6500                       		bcs.s	loc_1AF6
00001E78 7000                       		moveq	#0,d0
00001E7A                            
00001E7A                            loc_1AF6:
00001E7A 12C0                       		move.b	d0,(a1)+
00001E7C 0240 000F                  		andi.w	#$F,d0
00001E80 D040                       		add.w	d0,d0
00001E82 305A                       		movea.w	(a2)+,a0
00001E84 365A                       		movea.w	(a2)+,a3
00001E86 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E8A                            
00001E8A                            loc_1B06:
00001E8A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E92 6A00                       		bpl.s	locret_1B64
00001E94 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E9A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001EA0 4A38 FE11                  		tst.b	(v_act).w
00001EA4 6700                       		beq.s	loc_1B2E
00001EA6 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EAC 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EB2                            
00001EB2                            loc_1B2E:
00001EB2 72FF                       		moveq	#-1,d1
00001EB4 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB8 6700                       		beq.s	loc_1B38
00001EBA 4441                       		neg.w	d1
00001EBC                            
00001EBC                            loc_1B38:
00001EBC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EC0 0240 0003                  		andi.w	#3,d0
00001EC4 D041                       		add.w	d1,d0
00001EC6 0C40 0003                  		cmpi.w	#3,d0
00001ECA 6500                       		bcs.s	loc_1B52
00001ECC 3200                       		move.w	d0,d1
00001ECE 7000                       		moveq	#0,d0
00001ED0 4A41                       		tst.w	d1
00001ED2 6A00                       		bpl.s	loc_1B52
00001ED4 7002                       		moveq	#2,d0
00001ED6                            
00001ED6                            loc_1B52:
00001ED6 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001EDA D040                       		add.w	d0,d0
00001EDC 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EE0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE8                            
00001EE8                            locret_1B64:
00001EE8 4E75                       		rts	
00001EEA                            ; End of function PalCycle_SBZ
00001EEA                            
00001EEA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001EEA                            
00001EEA                            ; sub_213E:
00001EEA                            PalCycle_SuperSonic:
00001EEA 7000                       		moveq	#0,d0
00001EEC 1038 F5D8                  		move.b	(Super_Sonic_palette).w,d0
00001EF0 6700                       		beq.s	PalCycle_SuperSonic_return	; rts	; return, if Sonic isn't super
00001EF2 6B00 0000                  		bmi.w	PalCycle_SuperSonic_normal	; branch, if fade-in is done
00001EF6 5300                       		subq.b	#1,d0
00001EF8 6600                       		bne.s	PalCycle_SuperSonic_revert	; branch for values greater than 1
00001EFA                            
00001EFA                            		; fade from Sonic's to Super Sonic's palette
00001EFA                            		; run frame timer
00001EFA 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001EFE 6A00                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F00 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F06                            
00001F06                            		; increment palette frame and update Sonic's palette
00001F06 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F0C 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F10 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; 1 palette entry = 1 word, Sonic uses 4 shades of blue
00001F14 0C78 0030 F5DC             		cmpi.w	#$30,(Palette_frame).w	; has palette cycle reached the 6th frame?
00001F1A 6500                       		blo.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F1C 11FC 00FF F5D8             		move.b	#-1,(Super_Sonic_palette).w	; mark fade-in as done
00001F22 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w ; unfreeze Sonic	
00001F28 6000                       		bra.s		PalCycle_SuperSonic_palettes
00001F2A                            
00001F2A                            PalCycle_SuperSonic_return:
00001F2A 4E75                       		rts
00001F2C                            ; ===========================================================================
00001F2C                            ; loc_2188:
00001F2C                            PalCycle_SuperSonic_revert:	; runs the fade in transition backwards
00001F2C                            		; run frame timer
00001F2C 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F30 6AF8                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F32 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F38                            
00001F38                            		; decrement palette frame and update Sonic's palette
00001F38 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F3E 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F42 5178 F5DC                  		subq.w	#8,(Palette_frame).w	; previous frame
00001F46 6400                       		bcc.s	PalCycle_SuperSonic_palettes			; branch, if it isn't the first frame
00001F48 31FC 0000 F5DC             		move.w	#0,(Palette_frame).w
00001F4E 11FC 0000 F5D8             		move.b	#0,(Super_Sonic_palette).w	; stop palette cycle
00001F54                            
00001F54                            PalCycle_SuperSonic_palettes:
00001F54 43F8 FB04                  		lea	(v_pal_dry+4).w,a1
00001F58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001F5C 22B0 0004                  		move.l	4(a0,d0.w),(a1)	
00001F60 4E75                       		rts
00001F62                            ; ===========================================================================
00001F62                            ; loc_21E6:
00001F62                            PalCycle_SuperSonic_normal:
00001F62                            		; run frame timer
00001F62 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F66 6AC2                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F68 11FC 0007 F5DE             		move.b	#7,(Palette_timer).w
00001F6E                            
00001F6E                            		; increment palette frame and update Sonic's palette
00001F6E 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F74 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F78 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; next frame
00001F7C 0C78 0078 F5DC             		cmpi.w	#$78,(Palette_frame).w	; is it the last frame?
00001F82 63D0                       		bls.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F84 31FC 0030 F5DC             		move.w	#$30,(Palette_frame).w	; reset frame counter (Super Sonic's normal palette cycle starts at $30. Everything before that is for the palette fade)
00001F8A 60C8                       		bra.s	PalCycle_SuperSonic_palettes
00001F8C 4E75                       		rts
00001F8E                            ; End of function PalCycle_SuperSonic
00001F8E                            
00001F8E                            
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
0000200E                            
0000200E                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
0000202E                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
0000204E                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
0000206E                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00002080                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00002092                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
000020FA                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
0000211E                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
0000213E                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
0000214E                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
0000216E                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
0000217E                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
0000219E                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
000021AE                            
000021AE                            		include	"_inc\SBZ Palette Scripts.asm"
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            ; Scrap Brain Zone palette cycling script
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            
000021AE                            mSBZp:	macro duration,colors,paladdress,ramaddress
000021AE                            	dc.b duration, colors
000021AE                            	dc.w paladdress, ramaddress
000021AE                            	endm
000021AE                            
000021AE                            ; duration in frames, number of colors, palette address, RAM address
000021AE                            
000021AE                            Pal_SBZCycList1:
000021AE 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
000021B0 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021B6 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021BC 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
000021C2 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
000021C8 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000021CE 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
000021D4 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000021DA 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000021E0 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000021E6                            end_SBZCycList1:
000021E6                            	even
000021E6                            
000021E6                            Pal_SBZCycList2:
000021E6 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
000021E8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021EE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021F4 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
000021FA 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002200 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002206 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000220C 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002212                            end_SBZCycList2:
00002212                            	even
00002212                            	even
00002212                            
00002212                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00002222                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00002232                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00002242                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
0000224E                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
0000225E                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
0000226E                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
0000228E                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002298                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000022A8                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            ; Subroutine to	fade in from black
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            
000022B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B4                            
000022B4                            
000022B4                            PaletteFadeIn:
000022B4 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000022BA                            
000022BA                            PalFadeIn_Alt:				; start position and size are already set
000022BA 7000                       		moveq	#0,d0
000022BC 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000022C4 D0C0                       		adda.w	d0,a0
000022C6 7200                       		moveq	#cBlack,d1
000022C8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022CC                            
000022CC                            	@fill:
000022CC 30C1                       		move.w	d1,(a0)+
000022CE 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000022D2                            
000022D2 383C 0015                  		move.w	#$15,d4
000022D6                            
000022D6                            	@mainloop:
000022D6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022DC 6100 0000                  		bsr.w	WaitForVBla
000022E0 6100                       		bsr.s	FadeIn_FromBlack
000022E2 6100 F4C2                  		bsr.w	RunPLC
000022E6 51CC FFEE                  		dbf	d4,@mainloop
000022EA 4E75                       		rts	
000022EC                            ; End of function PaletteFadeIn
000022EC                            
000022EC                            
000022EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EC                            
000022EC                            
000022EC                            FadeIn_FromBlack:
000022EC 7000                       		moveq	#0,d0
000022EE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022F2 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000022F6 1038 F626                  		move.b	(v_pfade_start).w,d0
000022FA D0C0                       		adda.w	d0,a0
000022FC D2C0                       		adda.w	d0,a1
000022FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002302                            
00002302                            	@addcolour:
00002302 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002304 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002308                            
00002308 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000230E 6600                       		bne.s	@exit		; if not, branch
00002310                            
00002310 7000                       		moveq	#0,d0
00002312 41F8 FA80                  		lea	(v_pal_water).w,a0
00002316 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000231A 1038 F626                  		move.b	(v_pfade_start).w,d0
0000231E D0C0                       		adda.w	d0,a0
00002320 D2C0                       		adda.w	d0,a1
00002322 1038 F627                  		move.b	(v_pfade_size).w,d0
00002326                            
00002326                            	@addcolour2:
00002326 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002328 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
0000232C                            
0000232C                            @exit:
0000232C 4E75                       		rts	
0000232E                            ; End of function FadeIn_FromBlack
0000232E                            
0000232E                            
0000232E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232E                            
0000232E                            
0000232E                            FadeIn_AddColour:
0000232E                            @addblue:
0000232E 3419                       		move.w	(a1)+,d2
00002330 3610                       		move.w	(a0),d3
00002332 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002334 6700                       		beq.s	@next		; if yes, branch
00002336 3203                       		move.w	d3,d1
00002338 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000233C B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000233E 6200                       		bhi.s	@addgreen	; if yes, branch
00002340 30C1                       		move.w	d1,(a0)+	; update palette
00002342 4E75                       		rts	
00002344                            ; ===========================================================================
00002344                            
00002344                            @addgreen:
00002344 3203                       		move.w	d3,d1
00002346 0641 0020                  		addi.w	#$20,d1		; increase green value
0000234A B242                       		cmp.w	d2,d1
0000234C 6200                       		bhi.s	@addred
0000234E 30C1                       		move.w	d1,(a0)+	; update palette
00002350 4E75                       		rts	
00002352                            ; ===========================================================================
00002352                            
00002352                            @addred:
00002352 5458                       		addq.w	#2,(a0)+	; increase red value
00002354 4E75                       		rts	
00002356                            ; ===========================================================================
00002356                            
00002356                            @next:
00002356 5448                       		addq.w	#2,a0		; next colour
00002358 4E75                       		rts	
0000235A                            ; End of function FadeIn_AddColour
0000235A                            
0000235A                            
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            ; Subroutine to fade out to black
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            
0000235A                            
0000235A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000235A                            
0000235A                            
0000235A                            PaletteFadeOut:
0000235A 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002360 383C 0015                  		move.w	#$15,d4
00002364                            
00002364                            	@mainloop:
00002364 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000236A 6100 0000                  		bsr.w	WaitForVBla
0000236E 6100                       		bsr.s	FadeOut_ToBlack
00002370 6100 F434                  		bsr.w	RunPLC
00002374 51CC FFEE                  		dbf	d4,@mainloop
00002378 4E75                       		rts	
0000237A                            ; End of function PaletteFadeOut
0000237A                            
0000237A                            
0000237A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000237A                            
0000237A                            
0000237A                            FadeOut_ToBlack:
0000237A 7000                       		moveq	#0,d0
0000237C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002380 1038 F626                  		move.b	(v_pfade_start).w,d0
00002384 D0C0                       		adda.w	d0,a0
00002386 1038 F627                  		move.b	(v_pfade_size).w,d0
0000238A                            
0000238A                            	@decolour:
0000238A 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
0000238C 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002390                            
00002390 7000                       		moveq	#0,d0
00002392 41F8 FA80                  		lea	(v_pal_water).w,a0
00002396 1038 F626                  		move.b	(v_pfade_start).w,d0
0000239A D0C0                       		adda.w	d0,a0
0000239C 1038 F627                  		move.b	(v_pfade_size).w,d0
000023A0                            
000023A0                            	@decolour2:
000023A0 6100                       		bsr.s	FadeOut_DecColour
000023A2 51C8 FFFC                  		dbf	d0,@decolour2
000023A6 4E75                       		rts	
000023A8                            ; End of function FadeOut_ToBlack
000023A8                            
000023A8                            
000023A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023A8                            
000023A8                            
000023A8                            FadeOut_DecColour:
000023A8                            @dered:
000023A8 3410                       		move.w	(a0),d2
000023AA 6700                       		beq.s	@next
000023AC 3202                       		move.w	d2,d1
000023AE 0241 000E                  		andi.w	#$E,d1
000023B2 6700                       		beq.s	@degreen
000023B4 5558                       		subq.w	#2,(a0)+	; decrease red value
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            @degreen:
000023B8 3202                       		move.w	d2,d1
000023BA 0241 00E0                  		andi.w	#$E0,d1
000023BE 6700                       		beq.s	@deblue
000023C0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000023C4 4E75                       		rts	
000023C6                            ; ===========================================================================
000023C6                            
000023C6                            @deblue:
000023C6 3202                       		move.w	d2,d1
000023C8 0241 0E00                  		andi.w	#$E00,d1
000023CC 6700                       		beq.s	@next
000023CE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000023D2 4E75                       		rts	
000023D4                            ; ===========================================================================
000023D4                            
000023D4                            @next:
000023D4 5448                       		addq.w	#2,a0
000023D6 4E75                       		rts	
000023D8                            ; End of function FadeOut_DecColour
000023D8                            
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            ; Subroutine to	fade in from white (Special Stage)
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            
000023D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023D8                            
000023D8                            
000023D8                            PaletteWhiteIn:
000023D8 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000023DE 7000                       		moveq	#0,d0
000023E0 41F8 FB00                  		lea	(v_pal_dry).w,a0
000023E4 1038 F626                  		move.b	(v_pfade_start).w,d0
000023E8 D0C0                       		adda.w	d0,a0
000023EA 323C 0EEE                  		move.w	#cWhite,d1
000023EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000023F2                            
000023F2                            	@fill:
000023F2 30C1                       		move.w	d1,(a0)+
000023F4 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
000023F8                            
000023F8 383C 0015                  		move.w	#$15,d4
000023FC                            
000023FC                            	@mainloop:
000023FC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002402 6100 0000                  		bsr.w	WaitForVBla
00002406 6100                       		bsr.s	WhiteIn_FromWhite
00002408 6100 F39C                  		bsr.w	RunPLC
0000240C 51CC FFEE                  		dbf	d4,@mainloop
00002410 4E75                       		rts	
00002412                            ; End of function PaletteWhiteIn
00002412                            
00002412                            
00002412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002412                            
00002412                            
00002412                            WhiteIn_FromWhite:
00002412 7000                       		moveq	#0,d0
00002414 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002418 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000241C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002420 D0C0                       		adda.w	d0,a0
00002422 D2C0                       		adda.w	d0,a1
00002424 1038 F627                  		move.b	(v_pfade_size).w,d0
00002428                            
00002428                            	@decolour:
00002428 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
0000242A 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000242E                            
0000242E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002434 6600                       		bne.s	@exit		; if not, branch
00002436 7000                       		moveq	#0,d0
00002438 41F8 FA80                  		lea	(v_pal_water).w,a0
0000243C 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002440 1038 F626                  		move.b	(v_pfade_start).w,d0
00002444 D0C0                       		adda.w	d0,a0
00002446 D2C0                       		adda.w	d0,a1
00002448 1038 F627                  		move.b	(v_pfade_size).w,d0
0000244C                            
0000244C                            	@decolour2:
0000244C 6100                       		bsr.s	WhiteIn_DecColour
0000244E 51C8 FFFC                  		dbf	d0,@decolour2
00002452                            
00002452                            	@exit:
00002452 4E75                       		rts	
00002454                            ; End of function WhiteIn_FromWhite
00002454                            
00002454                            
00002454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002454                            
00002454                            
00002454                            WhiteIn_DecColour:
00002454                            @deblue:
00002454 3419                       		move.w	(a1)+,d2
00002456 3610                       		move.w	(a0),d3
00002458 B642                       		cmp.w	d2,d3
0000245A 6700                       		beq.s	@next
0000245C 3203                       		move.w	d3,d1
0000245E 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002462 6500                       		blo.s	@degreen
00002464 B242                       		cmp.w	d2,d1
00002466 6500                       		blo.s	@degreen
00002468 30C1                       		move.w	d1,(a0)+
0000246A 4E75                       		rts	
0000246C                            ; ===========================================================================
0000246C                            
0000246C                            @degreen:
0000246C 3203                       		move.w	d3,d1
0000246E 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002472 6500                       		blo.s	@dered
00002474 B242                       		cmp.w	d2,d1
00002476 6500                       		blo.s	@dered
00002478 30C1                       		move.w	d1,(a0)+
0000247A 4E75                       		rts	
0000247C                            ; ===========================================================================
0000247C                            
0000247C                            @dered:
0000247C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000247E 4E75                       		rts	
00002480                            ; ===========================================================================
00002480                            
00002480                            @next:
00002480 5448                       		addq.w	#2,a0
00002482 4E75                       		rts	
00002484                            ; End of function WhiteIn_DecColour
00002484                            
00002484                            ; ---------------------------------------------------------------------------
00002484                            ; Subroutine to fade to white (Special Stage)
00002484                            ; ---------------------------------------------------------------------------
00002484                            
00002484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002484                            
00002484                            
00002484                            PaletteWhiteOut:
00002484 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000248A 383C 0015                  		move.w	#$15,d4
0000248E                            
0000248E                            	@mainloop:
0000248E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002494 6100 0000                  		bsr.w	WaitForVBla
00002498 6100                       		bsr.s	WhiteOut_ToWhite
0000249A 6100 F30A                  		bsr.w	RunPLC
0000249E 51CC FFEE                  		dbf	d4,@mainloop
000024A2 4E75                       		rts	
000024A4                            ; End of function PaletteWhiteOut
000024A4                            
000024A4                            
000024A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024A4                            
000024A4                            
000024A4                            WhiteOut_ToWhite:
000024A4 7000                       		moveq	#0,d0
000024A6 41F8 FB00                  		lea	(v_pal_dry).w,a0
000024AA 1038 F626                  		move.b	(v_pfade_start).w,d0
000024AE D0C0                       		adda.w	d0,a0
000024B0 1038 F627                  		move.b	(v_pfade_size).w,d0
000024B4                            
000024B4                            	@addcolour:
000024B4 6100                       		bsr.s	WhiteOut_AddColour
000024B6 51C8 FFFC                  		dbf	d0,@addcolour
000024BA                            
000024BA 7000                       		moveq	#0,d0
000024BC 41F8 FA80                  		lea	(v_pal_water).w,a0
000024C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000024C4 D0C0                       		adda.w	d0,a0
000024C6 1038 F627                  		move.b	(v_pfade_size).w,d0
000024CA                            
000024CA                            	@addcolour2:
000024CA 6100                       		bsr.s	WhiteOut_AddColour
000024CC 51C8 FFFC                  		dbf	d0,@addcolour2
000024D0 4E75                       		rts	
000024D2                            ; End of function WhiteOut_ToWhite
000024D2                            
000024D2                            
000024D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024D2                            
000024D2                            
000024D2                            WhiteOut_AddColour:
000024D2                            @addred:
000024D2 3410                       		move.w	(a0),d2
000024D4 0C42 0EEE                  		cmpi.w	#cWhite,d2
000024D8 6700                       		beq.s	@next
000024DA 3202                       		move.w	d2,d1
000024DC 0241 000E                  		andi.w	#$E,d1
000024E0 0C41 000E                  		cmpi.w	#cRed,d1
000024E4 6700                       		beq.s	@addgreen
000024E6 5458                       		addq.w	#2,(a0)+	; increase red value
000024E8 4E75                       		rts	
000024EA                            ; ===========================================================================
000024EA                            
000024EA                            @addgreen:
000024EA 3202                       		move.w	d2,d1
000024EC 0241 00E0                  		andi.w	#$E0,d1
000024F0 0C41 00E0                  		cmpi.w	#cGreen,d1
000024F4 6700                       		beq.s	@addblue
000024F6 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000024FA 4E75                       		rts	
000024FC                            ; ===========================================================================
000024FC                            
000024FC                            @addblue:
000024FC 3202                       		move.w	d2,d1
000024FE 0241 0E00                  		andi.w	#$E00,d1
00002502 0C41 0E00                  		cmpi.w	#cBlue,d1
00002506 6700                       		beq.s	@next
00002508 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000250C 4E75                       		rts	
0000250E                            ; ===========================================================================
0000250E                            
0000250E                            @next:
0000250E 5448                       		addq.w	#2,a0
00002510 4E75                       		rts	
00002512                            ; End of function WhiteOut_AddColour
00002512                            
00002512                            ; ---------------------------------------------------------------------------
00002512                            ; Palette cycling routine - Sega logo
00002512                            ; ---------------------------------------------------------------------------
00002512                            
00002512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002512                            
00002512                            
00002512                            PalCycle_Sega:
00002512 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002516 6600                       		bne.s	loc_206A
00002518 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000251C 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002522 7205                       		moveq	#5,d1
00002524 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002528                            
00002528                            loc_2020:
00002528 6A00                       		bpl.s	loc_202A
0000252A 5448                       		addq.w	#2,a0
0000252C 5341                       		subq.w	#1,d1
0000252E 5440                       		addq.w	#2,d0
00002530 60F6                       		bra.s	loc_2020
00002532                            ; ===========================================================================
00002532                            
00002532                            loc_202A:
00002532 3400                       		move.w	d0,d2
00002534 0242 001E                  		andi.w	#$1E,d2
00002538 6600                       		bne.s	loc_2034
0000253A 5440                       		addq.w	#2,d0
0000253C                            
0000253C                            loc_2034:
0000253C 0C40 0060                  		cmpi.w	#$60,d0
00002540 6400                       		bhs.s	loc_203E
00002542 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002546                            
00002546                            loc_203E:
00002546 5440                       		addq.w	#2,d0
00002548 51C9 FFE8                  		dbf	d1,loc_202A
0000254C                            
0000254C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002550 5440                       		addq.w	#2,d0
00002552 3400                       		move.w	d0,d2
00002554 0242 001E                  		andi.w	#$1E,d2
00002558 6600                       		bne.s	loc_2054
0000255A 5440                       		addq.w	#2,d0
0000255C                            
0000255C                            loc_2054:
0000255C 0C40 0064                  		cmpi.w	#$64,d0
00002560 6D00                       		blt.s	loc_2062
00002562 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002568 70F4                       		moveq	#-$C,d0
0000256A                            
0000256A                            loc_2062:
0000256A 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000256E 7001                       		moveq	#1,d0
00002570 4E75                       		rts	
00002572                            ; ===========================================================================
00002572                            
00002572                            loc_206A:
00002572 5338 F634                  		subq.b	#1,(v_pcyc_time).w
00002576 6A00                       		bpl.s	loc_20BC
00002578 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
0000257E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002582 0640 000C                  		addi.w	#$C,d0
00002586 0C40 0030                  		cmpi.w	#$30,d0
0000258A 6500                       		blo.s	loc_2088
0000258C 7000                       		moveq	#0,d0
0000258E 4E75                       		rts	
00002590                            ; ===========================================================================
00002590                            
00002590                            loc_2088:
00002590 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002594 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000259A 41F0 0000                  		lea	(a0,d0.w),a0
0000259E 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000025A2 22D8                       		move.l	(a0)+,(a1)+
000025A4 22D8                       		move.l	(a0)+,(a1)+
000025A6 3298                       		move.w	(a0)+,(a1)
000025A8 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000025AC 7000                       		moveq	#0,d0
000025AE 722C                       		moveq	#$2C,d1
000025B0                            
000025B0                            loc_20A8:
000025B0 3400                       		move.w	d0,d2
000025B2 0242 001E                  		andi.w	#$1E,d2
000025B6 6600                       		bne.s	loc_20B2
000025B8 5440                       		addq.w	#2,d0
000025BA                            
000025BA                            loc_20B2:
000025BA 3390 0000                  		move.w	(a0),(a1,d0.w)
000025BE 5440                       		addq.w	#2,d0
000025C0 51C9 FFEE                  		dbf	d1,loc_20A8
000025C4                            
000025C4                            loc_20BC:
000025C4 7001                       		moveq	#1,d0
000025C6 4E75                       		rts	
000025C8                            ; End of function PalCycle_Sega
000025C8                            
000025C8                            ; ===========================================================================
000025C8                            
000025C8                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000025D4                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load palettes
00002604                            
00002604                            ; input:
00002604                            ;	d0 = index number for palette
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load pallets
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            PalLoad1:
00002604 1238 FE11                  		move.b ($FFFFFE11),d1
00002608 43F9 0000 0000             		lea (PalPointers).l,a1
0000260E 0C01 0000                  		cmp.b #0,d1
00002612 6700 0000                  		beq.w PalLoad1_Continue
00002616 43F9 0000 0000             		lea (PalPointers2).l,a1
0000261C 0C01 0001                  		cmp.b #1,d1
00002620 6700 0000                  		beq.w PalLoad1_Continue
00002624 43F9 0000 0000             		lea (PalPointers3).l,a1
0000262A                            
0000262A                            PalLoad1_Continue:
0000262A E748                       		lsl.w #3,d0
0000262C D2C0                       		adda.w d0,a1
0000262E 2459                       		movea.l (a1)+,a2
00002630 3659                       		movea.w (a1)+,a3
00002632 D6FC 0080                  		adda.w #$80,a3
00002636 3E19                       		move.w (a1)+,d7
00002638                            
00002638                            loc_2110:
00002638 26DA                       		move.l (a2)+,(a3)+
0000263A 51CF FFFC                  		dbf d7,loc_2110
0000263E 4E75                       		rts
00002640                             ; End of function PalLoad1
00002640                            
00002640                            
00002640                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002640                            
00002640                            PalLoad2:
00002640 1238 FE11                  		move.b ($FFFFFE11),d1
00002644 43F9 0000 0000             		lea (PalPointers).l,a1
0000264A 0C01 0000                  		cmp.b #0,d1
0000264E 6700 0000                  		beq.w PalLoad2_Continue
00002652 43F9 0000 0000             		lea (PalPointers2).l,a1
00002658 0C01 0001                  		cmp.b #1,d1
0000265C 6700 0000                  		beq.w PalLoad2_Continue
00002660 43F9 0000 0000             		lea (PalPointers3).l,a1
00002666                            
00002666                            
00002666                            PalLoad2_Continue:
00002666 E748                       		lsl.w #3,d0
00002668 D2C0                       		adda.w d0,a1
0000266A 2459                       		movea.l (a1)+,a2
0000266C 3659                       		movea.w (a1)+,a3
0000266E 3E19                       		move.w (a1)+,d7
00002670                            
00002670                            loc_2128:
00002670 26DA                       		move.l (a2)+,(a3)+
00002672 51CF FFFC                  		dbf d7,loc_2128
00002676 4E75                       		rts
00002678                            ; End of function PalLoad2
00002678                            
00002678                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002678                            
00002678                            
00002678                            PalLoad_Loop: ;Quick load - TIS
00002678                                    
00002678 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
0000267A 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
0000267E 4E75                               rts
00002680                            
00002680                            ; ---------------------------------------------------------------------------
00002680                            ; Underwater pallet loading subroutine
00002680                            ; ---------------------------------------------------------------------------
00002680                            
00002680                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002680                            
00002680                            PalLoad3_Water:
00002680 1238 FE11                  		move.b ($FFFFFE11),d1
00002684 43F9 0000 0000             		lea (PalPointers).l,a1
0000268A 0C01 0000                  		cmp.b #0,d1
0000268E 6700 0000                  		beq.w PalLoad3_Continue
00002692 43F9 0000 0000             		lea (PalPointers2).l,a1
00002698 0C01 0001                  		cmp.b #1,d1
0000269C 6700 0000                  		beq.w PalLoad3_Continue
000026A0 43F9 0000 0000             		lea (PalPointers3).l,a1
000026A6                            
000026A6                            PalLoad3_Continue:
000026A6 E748                       		lsl.w #3,d0
000026A8 D2C0                       		adda.w d0,a1
000026AA 2459                       		movea.l (a1)+,a2
000026AC 3659                       		movea.w (a1)+,a3
000026AE 96FC 0080                  		suba.w #$80,a3
000026B2 3E19                       		move.w (a1)+,d7
000026B4                            
000026B4                            loc_2144:
000026B4 26DA                       		move.l (a2)+,(a3)+
000026B6 51CF FFFC                  		dbf d7,loc_2144
000026BA 4E75                       		rts
000026BC                            ; End of function PalLoad3_Water
000026BC                            
000026BC                            
000026BC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026BC                            
000026BC                            
000026BC                            PalLoad4_Water:
000026BC 1238 FE11                  		move.b ($FFFFFE11),d1
000026C0 43F9 0000 0000             		lea (PalPointers).l,a1
000026C6 0C01 0000                  		cmp.b #0,d1
000026CA 6700 0000                  		beq.w PalLoad4_Continue
000026CE 43F9 0000 0000             		lea (PalPointers2).l,a1
000026D4 0C01 0001                  		cmp.b #1,d1
000026D8 6700 0000                  		beq.w PalLoad4_Continue
000026DC 43F9 0000 0000             		lea (PalPointers3).l,a1
000026E2                            
000026E2                            PalLoad4_Continue:
000026E2 E748                       		lsl.w #3,d0
000026E4 D2C0                       		adda.w d0,a1
000026E6 2459                       		movea.l (a1)+,a2
000026E8 3659                       		movea.w (a1)+,a3
000026EA 96FC 0100                  		suba.w #$100,a3
000026EE 3E19                       		move.w (a1)+,d7
000026F0                            loc_2160:
000026F0 26DA                       		move.l (a2)+,(a3)+
000026F2 51CF FFFC                  		dbf d7,loc_2160
000026F6 4E75                       		rts
000026F8                             ; End of function PalLoad4_Water
000026F8                            
000026F8                            ; ===========================================================================
000026F8                            
000026F8                            		include	"_inc\Palette Pointers.asm"
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            ; Palette pointers
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            
000026F8                            palp:	macro paladdress,ramaddress,colors
000026F8                            	dc.l paladdress
000026F8                            	dc.w ramaddress, (colors>>1)-1
000026F8                            	endm
000026F8                            
000026F8                            PalPointers:
000026F8                            
000026F8                            ; palette address, RAM address, colors
000026F8                            
000026F8 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002700 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002708 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002710 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002718                            Pal_Levels:
00002718 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002720 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002728 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002730 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002738 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002740 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002748 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002750 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002758 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002760 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002768 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002770 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002778 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002780 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002788 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002790 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002798 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A0 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000027B0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000027B8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
000027E0 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
000027E8 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000027F0 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000027F8 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002800 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002808 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002828 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002830 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002838 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002840 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002848 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002850 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002858 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002870 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002878 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002880 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002888 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002890 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002898                            			even
00002898                            
00002898                            PalPointers2:
00002898                            
00002898                            ; palette address, RAM address, colors
00002898                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002898 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028A0 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000028A8 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000028B0 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000028B8                            Pal_Levels_2:
000028B8 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000028C0 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000028C8 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000028D0 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000028D8 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000028E0 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000028E8 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000028F0 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
000028F8 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002900 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002908 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002910 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002918 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002920 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002928 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002930 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002938 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002940 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002948 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002950 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002958 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002960 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002968 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002970 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002978 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002980 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002988 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002990 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002998 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029A0 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000029A8 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000029B0 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000029B8 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000029C0 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000029C8 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000029D0 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000029D8 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000029E0 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000029E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000029F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000029F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A00 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A08 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A10 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A18 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A20 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A28 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A30 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A38                            			even
00002A38                            			
00002A38                            PalPointers3:
00002A38                            			
00002A38                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002A38 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002A40 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002A48 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002A50 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002A58                            Pal_Levels_3:
00002A58 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002A60 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002A68 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002A70 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002A78 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002A80 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002A88 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002A90 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002A98 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002AA0 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002AA8 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002AB0 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002AB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002AC0 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002AC8 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002AD0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002AD8 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE0 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002AF0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002AF8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002B00 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002B08 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002B10 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002B18 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002B20 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002B28 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002B30 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002B38 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002B40 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002B48 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002B50 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002B58 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002B60 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002B68 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002B70 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002B78 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002B80 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002B88 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002B90 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002B98 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002BA0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002BA8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002BB0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002BB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002BC0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002BC8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002BD0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002BD8                            			even
00002BD8                            
00002BD8                            
00002BD8 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002BD8 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002BD8 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002BD8 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002BD8 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002BD8 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002BD8 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002BD8 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002BD8 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002BD8 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002BD8 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002BD8 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002BD8 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002BD8 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002BD8 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002BD8 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002BD8 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002BD8 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002BD8 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002BD8 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002BD8 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002BD8 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002BD8 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002BD8 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002BD8 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002BD8 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002BD8 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002BD8 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002BD8 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002BD8 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002BD8 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002BD8 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002BD8 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002BD8 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002BD8 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002BD8 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002BD8 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002BD8 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002BD8 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002BD8 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002BD8 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002BD8 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002BD8 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002BD8 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002BD8 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002BD8 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002BD8 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers2.asm"
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers3.asm"
00002BD8                            		
00002BD8                            
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            ; Palette data
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002C58                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002CD8                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002D58                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002D78                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002DD8                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002E38                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002E98                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002EF8                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002F58                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002FB8                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00003038                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
000030B8                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003138                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003198                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
000031F8                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003258                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
000032B8                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003318                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003378                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000033D8                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003438                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003498                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000034F8                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003558                            Pal_Special:	incbin	"palette\Special Stage.bin"
000035D8                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003638                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000036B8                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000036D8                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000036F8                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003718                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003798                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000037D8                            Pal_Ending:	incbin	"palette\Ending.bin"
00003858                            Pal_Options:	incbin	"palette\Options.bin"
000038D8                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000038F8                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003918                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003938                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003958                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003978                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003998                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000039B8                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000039D8                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000039F8                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003A18                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003A38                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003A58                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003A78                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003A98                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003AB8                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003AD8                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003AF8                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003B18                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003B38                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003B58                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003B78                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003B98                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003BB8                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003BD8                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003BF8                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003C18                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003C38                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003C58                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003C78                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            ; Subroutine to	wait for VBlank routines to complete
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            
00003C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C98                            
00003C98                            
00003C98                            WaitForVBla:
00003C98 46FC 2300                  		enable_ints
00003C9C                            
00003C9C                            	@wait:
00003C9C 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003CA0 66FA                       		bne.s	@wait		; if not, branch
00003CA2 4E75                       		rts	
00003CA4                            ; End of function WaitForVBla
00003CA4                            
00003CA4                            		include	"_incObj\sub RandomNumber.asm"
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            ; Subroutine to	generate a pseudo-random number	in d0
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            
00003CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CA4                            
00003CA4                            
00003CA4                            RandomNumber:
00003CA4 2238 F636                  		move.l	(v_random).w,d1
00003CA8 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003CAA 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003CB0                            
00003CB0                            	@scramble:
00003CB0 2001                       		move.l	d1,d0
00003CB2 E581                       		asl.l	#2,d1
00003CB4 D280                       		add.l	d0,d1
00003CB6 E781                       		asl.l	#3,d1
00003CB8 D280                       		add.l	d0,d1
00003CBA 3001                       		move.w	d1,d0
00003CBC 4841                       		swap	d1
00003CBE D041                       		add.w	d1,d0
00003CC0 3200                       		move.w	d0,d1
00003CC2 4841                       		swap	d1
00003CC4 21C1 F636                  		move.l	d1,(v_random).w
00003CC8 4E75                       		rts	
00003CC8 4E75                       		rts	
00003CCA                            		include	"_incObj\sub CalcSine.asm"
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            ; Subroutine calculate a sine
00003CCA                            
00003CCA                            ; input:
00003CCA                            ;	d0 = angle
00003CCA                            
00003CCA                            ; output:
00003CCA                            ;	d0 = sine
00003CCA                            ;	d1 = cosine
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            
00003CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CCA                            
00003CCA                            
00003CCA                            CalcSine:
00003CCA 0240 00FF                          andi.w  #$FF,d0
00003CCE 5040                               addq.w  #8,d0
00003CD0 D040                               add.w   d0,d0
00003CD2 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003CD6 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003CDA 4E75                               rts
00003CDC                            ; End of function CalcSine
00003CDC                            
00003CDC                            ; ===========================================================================
00003CDC                            
00003CDC                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003F5C                            
00003F5C                            ; ===========================================================================
00003F5C                            ; ===========================================================================
00003F5C                            		include	"_incObj\sub CalcAngle.asm"
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            ; Subroutine calculate an angle
00003F5C                            
00003F5C                            ; input:
00003F5C                            ;	d1 = x-axis distance
00003F5C                            ;	d2 = y-axis distance
00003F5C                            
00003F5C                            ; output:
00003F5C                            ;	d0 = angle
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            
00003F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F5C                            
00003F5C                            
00003F5C                            CalcAngle:
00003F5C 48E7 1800                  		movem.l	d3-d4,-(sp)
00003F60 7600                       		moveq	#0,d3
00003F62 7800                       		moveq	#0,d4
00003F64 3601                       		move.w	d1,d3
00003F66 3802                       		move.w	d2,d4
00003F68 8843                       		or.w	d3,d4
00003F6A 6700                       		beq.s	loc_2D04
00003F6C 3802                       		move.w	d2,d4
00003F6E 4A43                       		tst.w	d3
00003F70 6A00 0000                  		bpl.w	loc_2CC2
00003F74 4443                       		neg.w	d3
00003F76                            
00003F76                            loc_2CC2:
00003F76 4A44                       		tst.w	d4
00003F78 6A00 0000                  		bpl.w	loc_2CCA
00003F7C 4444                       		neg.w	d4
00003F7E                            
00003F7E                            loc_2CCA:
00003F7E B843                       		cmp.w	d3,d4
00003F80 6400 0000                  		bcc.w	loc_2CDC
00003F84 E18C                       		lsl.l	#8,d4
00003F86 88C3                       		divu.w	d3,d4
00003F88 7000                       		moveq	#0,d0
00003F8A 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003F8E 6000                       		bra.s	loc_2CE6
00003F90                            ; ===========================================================================
00003F90                            
00003F90                            loc_2CDC:
00003F90 E18B                       		lsl.l	#8,d3
00003F92 86C4                       		divu.w	d4,d3
00003F94 7040                       		moveq	#$40,d0
00003F96 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003F9A                            
00003F9A                            loc_2CE6:
00003F9A 4A41                       		tst.w	d1
00003F9C 6A00 0000                  		bpl.w	loc_2CF2
00003FA0 4440                       		neg.w	d0
00003FA2 0640 0080                  		addi.w	#$80,d0
00003FA6                            
00003FA6                            loc_2CF2:
00003FA6 4A42                       		tst.w	d2
00003FA8 6A00 0000                  		bpl.w	loc_2CFE
00003FAC 4440                       		neg.w	d0
00003FAE 0640 0100                  		addi.w	#$100,d0
00003FB2                            
00003FB2                            loc_2CFE:
00003FB2 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FB6 4E75                       		rts	
00003FB8                            ; ===========================================================================
00003FB8                            
00003FB8                            loc_2D04:
00003FB8 303C 0040                  		move.w	#$40,d0
00003FBC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FC0 4E75                       		rts	
00003FC2                            ; End of function CalcAngle
00003FC2                            
00003FC2                            ; ===========================================================================
00003FC2                            
00003FC2                            Angle_Data:	incbin	"misc\angles.bin"
000040C4                            
000040C4                            ; ===========================================================================
000040C4                            ; ===========================================================================
000040C4                            
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            ; Sega screen
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            
000040C4                            GM_Sega:
000040CC 6100 D6CA                  		bsr.w	ClearPLC
000040D0 6100 E288                  		bsr.w	PaletteFadeOut
000040D4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000040DA 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000040DE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000040E2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000040E6 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
000040EA 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
000040EE 4238 F64E                  		clr.b	(f_wtr_state).w
000040F2 46FC 2700                  		disable_ints
000040F6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000040FA 0200 00BF                  		andi.b	#$BF,d0
000040FE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004104 6100 D0CA                  		bsr.w	ClearScreen
00004112 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004118 6100 D234                  		bsr.w	NemDec
0000411C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004122 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004128 303C 0000                  		move.w	#0,d0
0000412C 6100 D7AA                  		bsr.w	EniDec
00004130                            
00004130 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00004144 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00004158                            
00004158 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
0000415C 6B00                       			bmi.s   @loadpal
0000415E 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00004172                            
00004172                            	@loadpal:
00004172 7000                       		moveq	#palid_SegaBG,d0
00004174 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00004178 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
0000417E 7E3F                               moveq    #$3F,d7
00004180                             
00004180                                .loop:
00004180 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00004184 51CF FFFA                          dbf        d7,.loop
00004188 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
0000418C 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00004192 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004198 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
0000419E 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
000041A4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041A8 0000 0040                  		ori.b	#$40,d0
000041AC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041B2                            
000041B2                            Sega_WaitPal:
000041B2 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041B8 6100 FADE                  		bsr.w	WaitForVBla
000041BC 6100 E354                  		bsr.w	PalCycle_Sega
000041C0 66F0                       		bne.s	Sega_WaitPal
000041C2                            
000041CA 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
000041D0 6100 FAC6                  		bsr.w	WaitForVBla
000041D4 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000041DA                            
000041DA                            Sega_WaitEnd:
000041DA 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041E0 6100 FAB6                  		bsr.w	WaitForVBla
000041E4 4A78 F614                  		tst.w	(v_demolength).w
000041E8 6700                       		beq.s	Sega_GotoTitle
000041EA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000041F0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000041F2                            
000041F2                            Sega_GotoTitle:
000041F2 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            ; Title	screen
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            
000041FA                            GM_Title:
00004202 6100 D594                  		bsr.w	ClearPLC
00004206 6100 E152                  		bsr.w	PaletteFadeOut
0000420A 46FC 2700                  		disable_ints
0000420E 6100 D046                  		bsr.w	SoundDriverLoad
00004212 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004218 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000421C 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004220 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004224 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004228 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000422C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004230 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00004234 4238 F64E                  		clr.b	(f_wtr_state).w
00004238 6100 CF96                  		bsr.w	ClearScreen
0000423C                            		;jsr		SHC2022 
0000423C                            
0000423C 43F8 D000                  		lea	(v_objspace).w,a1
00004240 7000                       		moveq	#0,d0
00004242 323C 07FF                  		move.w	#$7FF,d1
00004246                            
00004246                            	Tit_ClrObj1:
00004246 22C0                       		move.l	d0,(a1)+
00004248 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
0000424C                            
0000424C 6100 E066                  		bsr.w	PaletteFadeIn
00004250 46FC 2700                  		disable_ints
0000425E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004264 6100 D0E8                  		bsr.w	NemDec
00004272 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004278 6100 D0D4                  		bsr.w	NemDec
00004286 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
0000428C 6100 D0C0                  		bsr.w 	NemDec
00004290 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000429E 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
000042A4 323C 028F                  		move.w	#$28F,d1
000042A8                            
000042A8                            	Tit_LoadText:
000042A8 3C9D                       		move.w	(a5)+,(a6)
000042AA 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000042AE                            
000042AE 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000042B4 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000042BA 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000042C0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000042C6 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000042CC 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000042D2 6100 0000                  		bsr.w	LevelSizeLoad
000042D6 6100 0000                  		bsr.w	DeformLayers
000042DA 43F8 B000                  		lea	(v_16x16).w,a1
000042DE 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000042E4 303C 0000                  		move.w	#0,d0
000042E8 6100 D5EE                  		bsr.w	EniDec
000042EC 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000042F2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000042F8 6100 D75C                  		bsr.w	KosDec
000042FC 6100 0000                  		bsr.w	LevelLayoutLoad
00004300 6100 E058                  		bsr.w	PaletteFadeOut
00004304 46FC 2700                  		disable_ints
00004308 6100 CEC6                  		bsr.w	ClearScreen
0000430C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004312 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004318 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000431C 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00004320 343C 6000                  		move.w	#$6000,d2
00004324 6100 0000                  		bsr.w	DrawChunks
00004328 43F9 00FF 0000             		lea	($FF0000).l,a1
0000432E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004334 303C 0000                  		move.w	#0,d0
00004338 6100 D59E                  		bsr.w	EniDec
0000433C                            
0000433C 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004350                            
0000435A 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004360 6100 CFEC                  		bsr.w	NemDec
00004364 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004366 6100 E29C                  		bsr.w	PalLoad1
00004372 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004378 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
0000437E 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004382 7000                       		moveq	#0,d0
00004384 323C 0007                  		move.w	#7,d1
00004388                            
00004388                            	Tit_ClrObj2:
00004388 22C0                       		move.l	d0,(a1)+
0000438A 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000438E                            
0000438E 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004394 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
0000439A 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000439E                            
0000439E 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000043A2 6A00                       			bpl.s   @isjap		; if yes, branch
000043A4                            
000043A4 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
000043AA 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000043B0                            	@isjap:
000043B0 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000043B6 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000043BC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000043C2 6100 0000                  		bsr.w	DeformLayers
000043C6 4EB9 0000 0000             		jsr	(BuildSprites).l
000043CC 7000                       		moveq	#plcid_Main,d0
000043CE 6100 D39C                  		bsr.w	NewPLC
000043D2 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000043D8 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000043DE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000043E2 0000 0040                  		ori.b	#$40,d0
000043E6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000043EC 6100 DEC6                  		bsr.w	PaletteFadeIn
000043F0                            
000043F0                            Tit_MainLoop:
000043F0 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000043F6 6100 F8A0                  		bsr.w	WaitForVBla
000043FA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004400 6100 0000                  		bsr.w	DeformLayers
00004404 4EB9 0000 0000             		jsr	(BuildSprites).l
0000440A 6100 D936                  		bsr.w	PCycle_Title
0000440E 6100 D396                  		bsr.w	RunPLC
00004412 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004416 5440                       		addq.w	#2,d0
00004418 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000441C 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00004420 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004422                            
00004422 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004428 4E75                       		rts	
0000442A                            ; ===========================================================================
0000442A                            
0000442A                            Tit_ChkRegion:
0000442A 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000442E 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004430                            
00004430 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004436 6000                       		bra.s	Tit_EnterCheat
00004438                            
00004438                            	Tit_RegionJap:
00004438 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000443E                            
0000443E                            Tit_EnterCheat:
0000443E 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004442 D0C0                       		adda.w	d0,a0
00004444 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004448 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
0000444C B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000444E 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004450 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004454 4A00                       		tst.b	d0
00004456 6600                       		bne.s	Tit_CountC
00004458 41F8 FFE0                  		lea	(f_levselcheat).w,a0
0000445C 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004460 E249                       		lsr.w	#1,d1
00004462 0241 0003                  		andi.w	#3,d1
00004466 6700                       		beq.s	Tit_PlayRing
00004468 4A38 FFF8                  		tst.b	(v_megadrive).w
0000446C 6A00                       		bpl.s	Tit_PlayRing
0000446E 7201                       		moveq	#1,d1
00004470 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004474                            
00004474                            	Tit_PlayRing:
00004474 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004482 6000                       		bra.s	Tit_CountC
00004484                            ; ===========================================================================
00004484                            
00004484                            Tit_ResetCheat:
00004484 4A00                       		tst.b	d0
00004486 6700                       		beq.s	Tit_CountC
00004488 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000448E 6700                       		beq.s	Tit_CountC
00004490 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004496                            
00004496                            Tit_CountC:
00004496 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000449A 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000449E 6700                       		beq.s	loc_3230	; if not, branch
000044A0 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
000044A4                            		
000044A4                            loc_3230:
000044A4 4A78 F614                  		tst.w	(v_demolength).w
000044A8 6700 0000                  		beq.w	GotoDemo
000044AC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000044B2 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000044B6                            
000044B6                            Tit_ChkLevSel:
000044B6 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000044BA 6700 0000                  		beq.w	@cont	; if not, play level
000044BE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000044C4 6700 0000                  		beq.w	@cont	; if not, play level
000044C8 6000 0000                  		bra.w	Tit_LevelSelect
000044CC                            
000044CC                            	@cont:		
000044CC 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
000044D2 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
000044D6 7400                       		moveq	#0,d2
000044D8 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
000044DC D442                       		add.w	d2,d2            ; multiply by 2
000044DE 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
000044E2 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000044E6                            
000044E6                            ; ===========================================================================
000044E6                            Tit_Menu_Choice:
000044E6 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000044E8 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000044EA                            ; ===========================================================================
000044EA                            
000044EA                            Menu_Options:
000044EA 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
000044F0 4E75                       		rts
000044F2                            
000044F2                            Tit_LevelSelect:	
000044F2 7002                       		moveq	#palid_LevelSel,d0
000044F4 6100 E14A                  		bsr.w	PalLoad2	; load level select palette
000044F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000044FC 7000                       		moveq	#0,d0
000044FE 323C 00DF                  		move.w	#$DF,d1
00004502                            
00004502                            	Tit_ClrScroll1:
00004502 22C0                       		move.l	d0,(a1)+
00004504 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004508                            
00004508 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
0000450C 46FC 2700                  		disable_ints
00004510 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004520 323C 03FF                  		move.w	#$3FF,d1
00004524                            
00004524                            	Tit_ClrScroll2:
00004524 2C80                       		move.l	d0,(a6)
00004526 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000452A                            
0000452A 6100 0000                  		bsr.w	LevSelTextLoad
0000452E                            
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            ; Level	Select
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            
0000452E                            LevelSelect:
0000452E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004534 6100 F762                  		bsr.w	WaitForVBla
00004538 6100 0000                  		bsr.w	LevSelControls
0000453C 6100 D268                  		bsr.w	RunPLC
00004540 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004544 66E8                       		bne.s	LevelSelect
00004546 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000454C 67E0                       		beq.s	LevelSelect	; if not, branch
0000454E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004552 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004556 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004558 3038 FF84                  		move.w	(v_levselsound).w,d0
0000455C 0640 0080                  		addi.w	#$80,d0
00004560                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00004560                            		;beq.s	LevSel_Ending	; if yes, branch
00004560                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00004560                            		;beq.s	LevSel_Credits	; if yes, branch
00004560                            
00004560                            LevSel_PlaySnd:
00004560 6100 CD3E                  		bsr.w	PlaySound_Special
00004564 60C8                       		bra.s	LevelSelect
00004566                            ; ===========================================================================
00004566                            
00004566                            LevSel_Ending:
00004566 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
0000456C 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
00004572 4E75                       		rts	
00004574                            ; ===========================================================================
00004574                            
00004574                            LevSel_Credits:
00004574 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
00004582 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004588 4E75                       		rts	
0000458A                            ; ===========================================================================
0000458A                            
0000458A                            LevSel_Level_SS:
0000458A D040                       		add.w	d0,d0
0000458C 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004590 6B00 FF9C                  		bmi.w	LevelSelect
00004594 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004598 6600                       		bne.s	LevSel_Level	; if not, branch
0000459A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045A0 4278 FE10                  		clr.w	(v_zone).w	; clear	level
000045A4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045AA 7000                       		moveq	#0,d0
000045AC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045B0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045B4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045B8 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000045C0 4E75                       		rts	
000045C2                            ; ===========================================================================
000045C2                            
000045C2                            LevSel_Level:
000045C2 0240 3FFF                  		andi.w	#$3FFF,d0
000045C6 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000045CA                            
000045CA                            PlayLevel:
000045CA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000045D0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045D6 7000                       		moveq	#0,d0
000045D8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045DC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045E0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045E4 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000045E8 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000045EC 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000045F0 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000045F4 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000045FA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000460A 4E75                       		rts	
0000460C                            ; ===========================================================================
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            ; Level	select - level pointers
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            		; correct level order
0000460C 0000                       		dc.b id_GHZ, 0
0000460E 0001                       		dc.b id_GHZ, 1
00004610 0002                       		dc.b id_GHZ, 2
00004612 0200                       		dc.b id_MZ, 0
00004614 0201                       		dc.b id_MZ, 1
00004616 0202                       		dc.b id_MZ, 2
00004618 0400                       		dc.b id_SYZ, 0
0000461A 0401                       		dc.b id_SYZ, 1
0000461C 0402                       		dc.b id_SYZ, 2
0000461E 0100                       		dc.b id_LZ, 0
00004620 0101                       		dc.b id_LZ, 1
00004622 0102                       		dc.b id_LZ, 2
00004624 0300                       		dc.b id_SLZ, 0
00004626 0301                       		dc.b id_SLZ, 1
00004628 0302                       		dc.b id_SLZ, 2
0000462A 0500                       		dc.b id_SBZ, 0
0000462C 0501                       		dc.b id_SBZ, 1
0000462E 0103                       		dc.b id_LZ, 3
00004630 0502                       		dc.b id_SBZ, 2
00004632 0700                       		dc.b id_SS, 0		; Special Stage
00004634 8000                       		dc.w $8000		; Sound Test
00004636                            		even
00004636                            ; ---------------------------------------------------------------------------
00004636                            ; Level	select codes
00004636                            ; ---------------------------------------------------------------------------
00004636 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
0000463E                            		even
0000463E                            
0000463E 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004644                            		even
00004644                            ; ===========================================================================
00004644                            
00004644                            ; ---------------------------------------------------------------------------
00004644                            ; Demo mode
00004644                            ; ---------------------------------------------------------------------------
00004644                            
00004644                            GotoDemo:
00004644 31FC 001E F614             		move.w	#$1E,(v_demolength).w
0000464A                            
0000464A                            loc_33B6:
0000464A 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004650 6100 F646                  		bsr.w	WaitForVBla
00004654 6100 0000                  		bsr.w	DeformLayers
00004658 6100 D6C4                  		bsr.w	PaletteCycle
0000465C 6100 D148                  		bsr.w	RunPLC
00004660 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004664 5440                       		addq.w	#2,d0
00004666 31C0 D008                  		move.w	d0,(v_objspace+obX).w
0000466A 0C40 1C00                  		cmpi.w	#$1C00,d0
0000466E 6500                       		blo.s	loc_33E4
00004670 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004676 4E75                       		rts	
00004678                            ; ===========================================================================
00004678                            
00004678                            loc_33E4:
00004678 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000467E 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
00004682 4A78 F614                  		tst.w	(v_demolength).w
00004686 6600 FFC2                  		bne.w	loc_33B6
00004692 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004696 0240 0007                  		andi.w	#7,d0
0000469A D040                       		add.w	d0,d0
0000469C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000046A0 31C0 FE10                  		move.w	d0,(v_zone).w
000046A4 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
000046A8 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000046AE 6500                       		blo.s	loc_3422	; if yes, branch
000046B0 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000046B6                            
000046B6                            loc_3422:
000046B6 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000046BC 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000046C2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000046C6 6600                       		bne.s	Demo_Level	; if not, branch
000046C8 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000046CE 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000046D2 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000046D6                            
000046D6                            Demo_Level:
000046D6 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000046DC 7000                       		moveq	#0,d0
000046DE 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000046E2 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000046E6 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000046EA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000046F2 4E75                       		rts	
000046F4                            ; ===========================================================================
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            ; Levels used in demos
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000046FC                            		even
000046FC                            
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            ; Subroutine to	change what you're selecting in the level select
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            
000046FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046FC                            
000046FC                            
000046FC                            LevSelControls:
000046FC 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004700 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004704 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004706 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000470A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000470C                            
0000470C                            LevSel_UpDown:
0000470C 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004712 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004716 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000471A 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000471C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004720 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004724 6700                       		beq.s	LevSel_Down	; if not, branch
00004726 5340                       		subq.w	#1,d0		; move up 1 selection
00004728 6400                       		bhs.s	LevSel_Down
0000472A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000472C                            
0000472C                            LevSel_Down:
0000472C 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004730 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004732 5240                       		addq.w	#1,d0		; move down 1 selection
00004734 0C40 0015                  		cmpi.w	#$15,d0
00004738 6500                       		blo.s	LevSel_Refresh
0000473A 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000473C                            
0000473C                            LevSel_Refresh:
0000473C 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004740 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004744 4E75                       		rts	
00004746                            ; ===========================================================================
00004746                            
00004746                            LevSel_SndTest:
00004746 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
0000474C 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000474E 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004752 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004756 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004758 3038 FF84                  		move.w	(v_levselsound).w,d0
0000475C 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004760 6700                       		beq.s	LevSel_Right	; if not, branch
00004762 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004764 6400                       		bhs.s	LevSel_Right
00004766 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
00004768                            
00004768                            LevSel_Right:
00004768 0801 0003                  		btst	#bitR,d1	; is right pressed?
0000476C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000476E 5240                       		addq.w	#1,d0		; add 1	to sound test
00004770 0C40 0056                  		cmpi.w	#$56,d0
00004774 6500                       		blo.s	LevSel_Refresh2
00004776 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
00004778                            
00004778                            LevSel_Refresh2:
00004778 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
0000477C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004780                            
00004780                            LevSel_NoMove:
00004780 4E75                       		rts	
00004782                            ; End of function LevSelControls
00004782                            
00004782                            ; ---------------------------------------------------------------------------
00004782                            ; Subroutine to load level select text
00004782                            ; ---------------------------------------------------------------------------
00004782                            
00004782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004782                            
00004782                            
00004782                            LevSelTextLoad:
00004782                            
00004782 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
00004782                            					; $E210 is a VRAM address
00004782                            
00004782 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004788 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000478E 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
00004794 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004798 7214                       		moveq	#$14,d1		; number of lines of text
0000479A                            
0000479A                            	LevSel_DrawAll:
0000479A 2D44 0004                  		move.l	d4,4(a6)
0000479E 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
000047A2 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
000047A8 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000047AC                            
000047AC 7000                       		moveq	#0,d0
000047AE 3038 FF82                  		move.w	(v_levselitem).w,d0
000047B2 3200                       		move.w	d0,d1
000047B4 283C 6210 0003             		move.l	#textpos,d4
000047BA EF48                       		lsl.w	#7,d0
000047BC 4840                       		swap	d0
000047BE D880                       		add.l	d0,d4
000047C0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000047C6 E749                       		lsl.w	#3,d1
000047C8 3001                       		move.w	d1,d0
000047CA D241                       		add.w	d1,d1
000047CC D240                       		add.w	d0,d1
000047CE D2C1                       		adda.w	d1,a1
000047D0 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000047D4 2D44 0004                  		move.l	d4,4(a6)
000047D8 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000047DC 363C E680                  		move.w	#$E680,d3
000047E0 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000047E6 6600                       		bne.s	LevSel_DrawSnd
000047E8 363C C680                  		move.w	#$C680,d3
000047EC                            
000047EC                            LevSel_DrawSnd:
000047F6 3038 FF84                  		move.w	(v_levselsound).w,d0
000047FA 0640 0080                  		addi.w	#$80,d0
000047FE 1400                       		move.b	d0,d2
00004800 E808                       		lsr.b	#4,d0
00004802 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004806 1002                       		move.b	d2,d0
00004808 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000480C 4E75                       		rts	
0000480E                            ; End of function LevSelTextLoad
0000480E                            
0000480E                            
0000480E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000480E                            
0000480E                            
0000480E                            LevSel_ChgSnd:
0000480E 0240 000F                  		andi.w	#$F,d0
00004812 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004816 6500                       		blo.s	LevSel_Numb	; if not, branch
00004818 5E00                       		addi.b	#7,d0		; use alpha characters
0000481A                            
0000481A                            	LevSel_Numb:
0000481A D043                       		add.w	d3,d0
0000481C 3C80                       		move.w	d0,(a6)
0000481E 4E75                       		rts	
00004820                            ; End of function LevSel_ChgSnd
00004820                            
00004820                            
00004820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004820                            
00004820                            
00004820                            LevSel_ChgLine:
00004820 7417                       		moveq	#$17,d2		; number of characters per line
00004822                            
00004822                            	LevSel_LineLoop:
00004822 7000                       		moveq	#0,d0
00004824 1019                       		move.b	(a1)+,d0	; get character
00004826 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004828 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000482C 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004830 4E75                       		rts	
00004832                            
00004832                            
00004832                            	LevSel_CharOk:
00004832 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004834 3C80                       		move.w	d0,(a6)		; send to VRAM
00004836 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000483A 4E75                       		rts	
0000483C                            ; End of function LevSel_ChgLine
0000483C                            
0000483C                            ; ===========================================================================
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            ; Level	select menu text
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            		incbin	"misc\Level Select Text (JP1).bin"
00004A34                            		even
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            ; Music	playlist
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            MusicList:
00004A34 00                         			dc.b bgm_GHZ    ; GHZ1
00004A35 00                                 	dc.b bgm_LZ    ; GHZ2
00004A36 00                                 	dc.b bgm_Seaside   ; GHZ3
00004A37 00                                 	dc.b bgm_LZ    ; GHZ4
00004A38 00                                 	dc.b bgm_Stop    ; LZ1
00004A39 00                                 	dc.b bgm_Stop   ; LZ2
00004A3A 00                                 	dc.b bgm_Stop    ; LZ3
00004A3B 00                                 	dc.b bgm_SBZ3    ; LZ4
00004A3C 00                                 	dc.b bgm_MZ    ; MZ1
00004A3D 00                                 	dc.b bgm_SBZ    ; MZ2
00004A3E 00                                 	dc.b bgm_RRZ2   ; MZ3
00004A3F 00                                 	dc.b bgm_SBZ    ; MZ4
00004A40 00                                 	dc.b bgm_LZ    ; SLZ1
00004A41 00                                 	dc.b bgm_LZ    ; SLZ2
00004A42 00                                 	dc.b bgm_LZ    ; SLZ3
00004A43 00                                 	dc.b bgm_LZ    ; SLZ4
00004A44 00                                 	dc.b bgm_SYZ    ; SYZ1
00004A45 00                                 	dc.b bgm_SLZ    ; SYZ2
00004A46 00                                 	dc.b bgm_SLZ    ; SYZ3
00004A47 00                                 	dc.b bgm_SLZ    ; SYZ4
00004A48 00                                 	dc.b bgm_SBZ    ; SBZ1
00004A49 00                                 	dc.b bgm_SBZ    ; SBZ2
00004A4A 00                                 	dc.b bgm_FZ		; SBZ3
00004A4B 00                                 	dc.b bgm_SBZ    ; SBZ4
00004A4C 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4D 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4E 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4F 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A50                                    	even
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            ; Level
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            
00004A50                            GM_Level:
00004A50 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
00004A56                            
00004A56 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004A5C 4A78 FFF0                  		tst.w	(f_demo).w
00004A60 6B00                       		bmi.s	Level_NoMusicFade
00004A6A                            
00004A6A                            	Level_NoMusicFade:
00004A6A 6100 CD2C                  		bsr.w	ClearPLC
00004A6E 6100 D8EA                  		bsr.w	PaletteFadeOut
00004A72 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004A76 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004A78 46FC 2700                  		disable_ints
00004A86 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004A8C 6100 C8C0                  		bsr.w	NemDec
00004A90 46FC 2300                  		enable_ints
00004A94 7000                       		moveq	#0,d0
00004A96 1038 FE10                  		move.b	(v_zone).w,d0
00004A9A E948                       		lsl.w	#4,d0
00004A9C 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004AA2 45F2 0000                  		lea	(a2,d0.w),a2
00004AA6 7000                       		moveq	#0,d0
00004AA8 1012                       		move.b	(a2),d0
00004AAA 6700                       		beq.s	loc_37FC
00004AAC 6100 CC8C                  		bsr.w	AddPLC		; load level patterns
00004AB0                            
00004AB0                            loc_37FC:
00004AB0 7000                       		moveq	#plcid_Main2,d0
00004AB2 6100 CC86                  		bsr.w	AddPLC		; load standard	patterns
00004AB6 4EB9 0000 0000             		jsr		LoadLifeIcon
00004ABC                            		
00004ABC                            Level_ClrRam:
00004ABC 43F8 D000                  		lea	(v_objspace).w,a1
00004AC0 7000                       		moveq	#0,d0
00004AC2 323C 07FF                  		move.w	#$7FF,d1
00004AC6                            
00004AC6                            	Level_ClrObjRam:
00004AC6 22C0                       		move.l	d0,(a1)+
00004AC8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004ACC                            
00004ACC 43F8 F628                  		lea	($FFFFF628).w,a1
00004AD0 7000                       		moveq	#0,d0
00004AD2 323C 0015                  		move.w	#$15,d1
00004AD6                            
00004AD6                            	Level_ClrVars1:
00004AD6 22C0                       		move.l	d0,(a1)+
00004AD8 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004ADC                            
00004ADC 43F8 F700                  		lea	(v_screenposx).w,a1
00004AE0 7000                       		moveq	#0,d0
00004AE2 323C 003F                  		move.w	#$3F,d1
00004AE6                            
00004AE6                            	Level_ClrVars2:
00004AE6 22C0                       		move.l	d0,(a1)+
00004AE8 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004AEC                            
00004AEC 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004AF0 7000                       		moveq	#0,d0
00004AF2 323C 0047                  		move.w	#$47,d1
00004AF6                            
00004AF6                            	Level_ClrVars3:
00004AF6 22C0                       		move.l	d0,(a1)+
00004AF8 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004AFC                            
00004AFC 46FC 2700                  		disable_ints
00004B00 6100 C6CE                  		bsr.w	ClearScreen
00004B04 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004B0A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004B0E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004B12 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004B16 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004B1A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004B1E 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004B22 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004B26 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004B2C 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004B30 31FC C800 C8FC             		ResetDMAQueue	
00004B36 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B3C 6600                       		bne.s	Level_LoadPal	; if not, branch
00004B3E                            
00004B3E 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004B42 7000                       		moveq	#0,d0
00004B44 1038 FE11                  		move.b	(v_act).w,d0
00004B48 D040                       		add.w	d0,d0
00004B4A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004B50 3031 0000                  		move.w	(a1,d0.w),d0
00004B54 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004B58 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004B5C 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004B60 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004B64 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004B68 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004B6E                            
00004B6E                            Level_LoadPal:
00004B6E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004B74 46FC 2300                  		move	#$2300,sr
00004B78 4EB9 0000 0000             		jsr		LoadPlayerPal
00004B7E 6100 DAC0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004B82 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004B88 6600                       		bne.s	Level_GetBgm	; if not, branch
00004B8A 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004B90 6100 DAEE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004B94 4A38 FE30                  		tst.b	($FFFFFE30).w
00004B98 6700                       		beq.s	Level_GetBgm
00004B9A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004BA0                            
00004BA0                            	Level_GetBgm:
00004BA0 4A78 FFF0                  		tst.w	(f_demo).w
00004BA4 6B00                               	bmi.s	Level_SkipTtlCard
00004BA6 7000                               	moveq	#0,d0
00004BA8 3038 FE10                  		move.w	(v_zone).w,d0
00004BAC E418                       		ror.b	#2,d0
00004BAE EC48                       		lsr.w   #6,d0
00004BB0 43F9 0000 4A34                     	lea	(MusicList).l,a1 ; load    music playlist
00004BB6 1031 0000                          	move.b	(a1,d0.w),d0
00004BBA 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004BBE 6100 C6DA                          	bsr.w	PlaySound    ; play music
00004BC2 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004BC8                            
00004BC8                            
00004BC8                            Level_TtlCardLoop:
00004BC8 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004BCE 6100 F0C8                  		bsr.w	WaitForVBla
00004BD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BDE 6100 CBC6                  		bsr.w	RunPLC
00004BE2 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004BE6 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004BEA 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004BEC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004BF0 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004BF2 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004BF8                            
00004BF8                            	Level_SkipTtlCard:
00004BF8 4EB9 0000 0000             		jsr		LoadPlayerPal
00004BFE 6100 DA04                  		bsr.w	PalLoad1	; load Sonic's palette
00004C02 6100 0000                  		bsr.w	LevelSizeLoad
00004C06 6100 0000                  		bsr.w	DeformLayers
00004C0A 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004C10 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004C14 6100 0000                  		bsr.w	LoadTilesFromStart
00004C18 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004C1E 6100 0000                  		bsr.w	ColIndexLoad
00004C22 6100 0000                  		bsr.w	LZWaterFeatures
00004C26 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004C2C 4A78 FFF0                  		tst.w	(f_demo).w
00004C30 6B00                       		bmi.s	Level_ChkDebug
00004C32 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004C38                            
00004C38                            Level_ChkDebug:
00004C38 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004C3C 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C3E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004C44 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C46 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004C4C                            
00004C4C                            Level_ChkWater:
00004C4C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004C52 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004C58 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004C5E 6600                       		bne.s	Level_LoadObj	; if not, branch
00004C60 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004C66 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004C6C 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004C72 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004C78                            
00004C78                            Level_LoadObj:
00004C78 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C7E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C84 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C8A 7000                       		moveq	#0,d0
00004C8C 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004C90 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004C92 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004C96 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004C9A 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004C9E                            
00004C9E                            	Level_SkipClr:
00004C9E 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004CA2 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004CA6 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004CAA 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004CAE 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004CB2 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004CB6 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004CBA 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004CBE 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004CC2 31C0 FE02                  		move.w	d0,(f_restart).w
00004CC6 31C0 FE04                  		move.w	d0,(v_framecount).w
00004CCA 6100 0000                  		bsr.w	OscillateNumInit
00004CCE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004CD4 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004CDA 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004CE0 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004CE6 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004CEC 7000                       		moveq	#0,d0
00004CEE 1038 FE10                  		move.b	(v_zone).w,d0
00004CF2 E548                       		lsl.w	#2,d0
00004CF4 2271 0000                  		movea.l	(a1,d0.w),a1
00004CF8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004CFC 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004CFE 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004D04 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004D08 5340                       		subq.w	#1,d0
00004D0A E548                       		lsl.w	#2,d0
00004D0C 2271 0000                  		movea.l	(a1,d0.w),a1
00004D10                            
00004D10                            Level_Demo:
00004D10 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004D16 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004D1A 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004D20 4A78 FFF0                  		tst.w	(f_demo).w
00004D24 6A00                       		bpl.s	Level_ChkWaterPal
00004D26 31FC 021C F614             		move.w	#540,(v_demolength).w
00004D2C 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004D32 6600                       		bne.s	Level_ChkWaterPal
00004D34 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004D3A                            
00004D3A                            Level_ChkWaterPal:
00004D3A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004D40 6600                       		bne.s	Level_Delay	; if not, branch
00004D42 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004D4A 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004D4C 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004D4E                            
00004D4E                            	Level_WtrNotSbz:
00004D4E 6100 D96C                  		bsr.w	PalLoad4_Water
00004D52                            
00004D52                            Level_Delay:
00004D52 323C 0003                  		move.w	#3,d1
00004D56                            
00004D56                            	Level_DelayLoop:
00004D56 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D5C 6100 EF3A                  		bsr.w	WaitForVBla
00004D60 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004D64                            
00004D64 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004D6A 6100 D54E                  		bsr.w	PalFadeIn_Alt
00004D6E 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004D72 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004D74 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004D78 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004D7C 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004D80 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004D84 6000                       		bra.s	Level_StartGame
00004D86                            ; ===========================================================================
00004D86                            
00004D86                            Level_ClrCardArt:
00004D86 7000                       		moveq	#plcid_Explode,d0
00004D88 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004D8E 7000                       		moveq	#0,d0
00004D90 1038 FE10                  		move.b	(v_zone).w,d0
00004D94 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004D98 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004D9E                            
00004D9E                            Level_StartGame:
00004D9E 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004DA4                            
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            ; Main level loop (when	all title card and loading sequences are finished)
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            
00004DA4                            Level_MainLoop:
00004DA4 6100 C506                  		bsr.w	PauseGame
00004DA8 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004DAE 6100 EEE8                  		bsr.w	WaitForVBla
00004DB2 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004DB6 6100 0000                  		bsr.w	MoveSonicInDemo
00004DBA 6100 0000                  		bsr.w	LZWaterFeatures
00004DBE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004DC4 4A78 FE02                  			tst.w   (f_restart).w
00004DC8 6600 FC86                  			bne     GM_Level
00004DCC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004DD0 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004DD2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004DD8 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004DDA                            
00004DDA                            	Level_DoScroll:
00004DDA 6100 0000                  		bsr.w	DeformLayers
00004DDE                            
00004DDE                            	Level_SkipScroll:
00004DDE 4EB9 0000 0000             		jsr	(BuildSprites).l
00004DE4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004DEA 6100 CF32                  		bsr.w	PaletteCycle
00004DEE 6100 C9B6                  		bsr.w	RunPLC
00004DF2 6100 0000                  		bsr.w	OscillateNumDo
00004DF6 6100 0000                  		bsr.w	SynchroAnimate
00004DFA 6100 0000                  		bsr.w	SignpostArtLoad
00004DFE                            
00004DFE 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E04 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004E06 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004E0C 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004E10 4E75                       		rts	
00004E12                            ; ===========================================================================
00004E12                            
00004E12                            Level_ChkDemo:
00004E12 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004E16 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004E18 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004E1C 6700                       		beq.s	Level_EndDemo	; if not, branch
00004E1E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E24 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004E28 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E2E 4E75                       		rts	
00004E30                            ; ===========================================================================
00004E30                            
00004E30                            Level_EndDemo:
00004E30 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E36 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004E38 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E3E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004E42 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004E44 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004E4A                            
00004E4A                            Level_FadeDemo:
00004E4A 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004E50 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004E56 4278 F794                  		clr.w	(v_palchgspeed).w
00004E5A                            
00004E5A                            	Level_FDLoop:
00004E5A 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004E60 6100 EE36                  		bsr.w	WaitForVBla
00004E64 6100 0000                  		bsr.w	MoveSonicInDemo
00004E68 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004E6E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004E74 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004E7A 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004E7E 6A00                       		bpl.s	loc_3BC8
00004E80 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004E86 6100 D4F2                  		bsr.w	FadeOut_ToBlack
00004E8A                            
00004E8A                            loc_3BC8:
00004E8A 4A78 F614                  		tst.w	(v_demolength).w
00004E8E 66CA                       		bne.s	Level_FDLoop
00004E90 4E75                       		rts	
00004E92                            ; ===========================================================================
00004E92                            
00004E92                            		include	"_inc\LZWaterFeatures.asm"
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            ; Subroutine to	do special water effects in Labyrinth Zone
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            
00004E92                            LZWaterFeatures:
00004E92 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004E98 6600                       		bne.s	@notlabyrinth	; if not, branch
00004E9A 4A38 F744                  			tst.b   (f_nobgscroll).w
00004E9E 6600                       			bne.s	@setheight
00004EA0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004EA6 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004EA8                            
00004EA8 6100 0000                  		bsr.w	LZWindTunnels
00004EAC 6100 0000                  		bsr.w	LZWaterSlides
00004EB0 6100 0000                  		bsr.w	LZDynamicWater
00004EB4                            
00004EB4                            @setheight:
00004EB4 4238 F64E                  		clr.b	(f_wtr_state).w
00004EB8 7000                       		moveq	#0,d0
00004EBA 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004EBE E248                       		lsr.w	#1,d0
00004EC0 D078 F648                  		add.w	(v_waterpos2).w,d0
00004EC4 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004EC8 3038 F646                  		move.w	(v_waterpos1).w,d0
00004ECC 9078 F704                  		sub.w	(v_screenposy).w,d0
00004ED0 6400                       		bcc.s	@isbelow
00004ED2 4A40                       		tst.w	d0
00004ED4 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004ED6                            
00004ED6 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004EDC 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004EE2                            
00004EE2                            	@isbelow:
00004EE2 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004EE6 6500                       		bcs.s	@isvisible	; if yes, branch
00004EE8 303C 00DF                  		move.w	#223,d0
00004EEC                            
00004EEC                            	@isvisible:
00004EEC 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004EF0                            
00004EF0                            @notlabyrinth:
00004EF0 4E75                       		rts	
00004EF2                            ; ===========================================================================
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2                            ; Initial water heights
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004EF4 0328                       		dc.w $328	; Labyrinth 2
00004EF6 0900                       		dc.w $900	; Labyrinth 3
00004EF8 0228                       		dc.w $228	; Scrap Brain 3
00004EFA                            		even
00004EFA                            ; ===========================================================================
00004EFA                            
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            ; Labyrinth dynamic water routines
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            
00004EFA                            LZDynamicWater:
00004EFA 7000                       		moveq	#0,d0
00004EFC 1038 FE11                  		move.b	(v_act).w,d0
00004F00 D040                       		add.w	d0,d0
00004F02 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004F06 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004F0A 7200                       		moveq	#0,d1
00004F0C 1238 F64C                  		move.b	(f_water).w,d1
00004F10 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004F14 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004F18 6700                       		beq.s	@exit		; if water level is correct, branch
00004F1A 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004F1C 4441                       		neg.w	d1		; set water to move up instead
00004F1E                            
00004F1E                            	@movewater:
00004F1E D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004F22                            
00004F22                            	@exit:
00004F22 4E75                       		rts	
00004F24                            ; ===========================================================================
00004F24 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004F26 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004F28 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004F2A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004F2C                            ; ===========================================================================
00004F2C                            
00004F2C                            DynWater_LZ1:
00004F2C 4E75                       		rts	
00004F2E                            ; ===========================================================================
00004F2E                            
00004F2E                            DynWater_LZ2:
00004F2E 3038 F700                  		move.w	(v_screenposx).w,d0
00004F32 323C 0328                  		move.w	#$328,d1
00004F36 0C40 0500                  		cmpi.w	#$500,d0
00004F3A 6500                       		bcs.s	@setwater
00004F3C 323C 03C8                  		move.w	#$3C8,d1
00004F40 0C40 0B00                  		cmpi.w	#$B00,d0
00004F44 6500                       		bcs.s	@setwater
00004F46 323C 0428                  		move.w	#$428,d1
00004F4A                            
00004F4A                            	@setwater:
00004F4A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F4E 4E75                       		rts	
00004F50                            ; ===========================================================================
00004F50                            
00004F50                            DynWater_LZ3:
00004F50 3038 F700                  		move.w	(v_screenposx).w,d0
00004F54 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004F58 6600                       		bne.s	@routine2
00004F5A                            
00004F5A 323C 0900                  		move.w	#$900,d1
00004F5E 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004F62 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004F64 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004F6A 6500                       		bcs.s	@setwaterlz3
00004F6C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004F72 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004F74                            
00004F74 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004F78 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004F7E 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004F8C                            
00004F8C                            	@setwaterlz3:
00004F8C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F90 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004F94 4E75                       		rts	
00004F96                            ; ===========================================================================
00004F96                            
00004F96                            @routine2:
00004F96 5302                       		subq.b	#1,d2
00004F98 6600                       		bne.s	@routine3
00004F9A 323C 04C8                  		move.w	#$4C8,d1
00004F9E 0C40 0770                  		cmpi.w	#$770,d0
00004FA2 6500                       		bcs.s	@setwater2
00004FA4 323C 0308                  		move.w	#$308,d1
00004FA8 0C40 1400                  		cmpi.w	#$1400,d0
00004FAC 6500                       		bcs.s	@setwater2
00004FAE 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004FB4 6700                       		beq.s	@sonicislow
00004FB6 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004FBC 6400                       		bcc.s	@sonicislow	; if yes, branch
00004FBE 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004FC4 6400                       		bcc.s	@setwater2
00004FC6                            
00004FC6                            @sonicislow:
00004FC6 323C 0508                  		move.w	#$508,d1
00004FCA 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004FCE 0C40 1770                  		cmpi.w	#$1770,d0
00004FD2 6500                       		bcs.s	@setwater2
00004FD4 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004FDA                            
00004FDA                            	@setwater2:
00004FDA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004FDE 4E75                       		rts	
00004FE0                            ; ===========================================================================
00004FE0                            
00004FE0                            @routine3:
00004FE0 5302                       		subq.b	#1,d2
00004FE2 6600                       		bne.s	@routine4
00004FE4 323C 0508                  		move.w	#$508,d1
00004FE8 0C40 1860                  		cmpi.w	#$1860,d0
00004FEC 6500                       		bcs.s	@setwater3
00004FEE 323C 0188                  		move.w	#$188,d1
00004FF2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004FF6 6400                       		bcc.s	@loc_3DC6
00004FF8 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004FFC 6600                       		bne.s	@setwater3
00004FFE                            
00004FFE                            	@loc_3DC6:
00004FFE 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00005004                            
00005004                            	@setwater3:
00005004 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005008 4E75                       		rts	
0000500A                            ; ===========================================================================
0000500A                            
0000500A                            @routine4:
0000500A 5302                       		subq.b	#1,d2
0000500C 6600                       		bne.s	@routine5
0000500E 323C 0188                  		move.w	#$188,d1
00005012 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005016 6500                       		bcs.s	@setwater4
00005018 323C 0900                  		move.w	#$900,d1
0000501C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00005020 6500                       		bcs.s	@setwater4
00005022 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00005028 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
0000502E 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00005034 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
0000503A 4E75                       		rts	
0000503C                            ; ===========================================================================
0000503C                            
0000503C                            @setwater4:
0000503C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005040 31C1 F648                  		move.w	d1,(v_waterpos2).w
00005044 4E75                       		rts	
00005046                            ; ===========================================================================
00005046                            
00005046                            @routine5:
00005046 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
0000504A 6500                       		bcs.s	@dontset	; if not, branch
0000504C 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00005052                            
00005052                            	@dontset:
00005052 4E75                       		rts	
00005054                            ; ===========================================================================
00005054                            
00005054                            DynWater_SBZ3:
00005054                            	;	move.w	#$228,d1
00005054                            	;	cmpi.w	#$F00,(v_screenposx).w
00005054                            	;	bcs.s	@setwater
00005054                            	;	move.w	#$4C8,d1
00005054                            
00005054                            	;@setwater:
00005054                            		;move.w	d1,(v_waterpos3).w
00005054 4E75                       		rts
00005056                            
00005056                            ; ---------------------------------------------------------------------------
00005056                            ; Labyrinth Zone "wind tunnels"	subroutine
00005056                            ; ---------------------------------------------------------------------------
00005056                            
00005056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005056                            
00005056                            
00005056                            LZWindTunnels:
00005056 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000505A 6600 0000                  		bne.w	@quit	; if yes, branch
0000505E 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00005064 7000                       		moveq	#0,d0
00005066 1038 FE11                  		move.b	(v_act).w,d0	; get act number
0000506A E748                       		lsl.w	#3,d0		; multiply by 8
0000506C D4C0                       		adda.w	d0,a2		; add to address for data
0000506E 7200                       		moveq	#0,d1
00005070 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00005074 6600                       		bne.s	@notact1	; if not, branch
00005076 7201                       		moveq	#1,d1
00005078 514A                       		subq.w	#8,a2		; use different data for act 1
0000507A                            
0000507A                            	@notact1:
0000507A 43F8 D000                  		lea	(v_player).w,a1
0000507E                            
0000507E                            @chksonic:
0000507E 3029 0008                  		move.w	obX(a1),d0
00005082 B052                       		cmp.w	(a2),d0
00005084 6500 0000                  		bcs.w	@chknext
00005088 B06A 0004                  		cmp.w	4(a2),d0
0000508C 6400 0000                  		bcc.w	@chknext
00005090 3429 000C                  		move.w	obY(a1),d2
00005094 B46A 0002                  		cmp.w	2(a2),d2
00005098 6500                       		bcs.s	@chknext
0000509A B46A 0006                  		cmp.w	6(a2),d2
0000509E 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
000050A0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000050A4 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
000050A8 6600                       		bne.s	@skipsound	; if not, branch
000050B4                            
000050B4                            	@skipsound:
000050B4 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
000050B8 6600 0000                  		bne.w	@quit	; if yes, branch
000050BC 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
000050C2 6400                       		bcc.s	@clrquit	; if yes, branch
000050C4 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
000050CA 0440 0080                  		subi.w	#$80,d0
000050CE B052                       		cmp.w	(a2),d0
000050D0 6400                       		bcc.s	@movesonic
000050D2 7002                       		moveq	#2,d0
000050D4 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
000050DA 6600                       		bne.s	@notact2	; if not, branch
000050DC 4440                       		neg.w	d0
000050DE                            
000050DE                            	@notact2:
000050DE D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
000050E2                            
000050E2                            @movesonic:
000050E2 5869 0008                  		addq.w	#4,obX(a1)
000050E6 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
000050EC 337C 0000 0012             		move.w	#0,obVelY(a1)
000050F2 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
000050F8 08E9 0001 0022             		bset	#1,obStatus(a1)
000050FE 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00005104 6700                       		beq.s	@down		; if not, branch
00005106 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
0000510A                            
0000510A                            	@down:
0000510A 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00005110 6700                       		beq.s	@end		; if not, branch
00005112 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00005116                            
00005116                            	@end:
00005116 4E75                       		rts	
00005118                            ; ===========================================================================
00005118                            
00005118                            @chknext:
00005118 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
0000511A 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
0000511E 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005122 6700                       		beq.s	@quit		; if yes, branch
00005124 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000512A                            
0000512A                            @clrquit:
0000512A 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
0000512E                            
0000512E                            @quit:
0000512E 4E75                       		rts	
00005130                            ; End of function LZWindTunnels
00005130                            
00005130                            ; ===========================================================================
00005130                            
00005130                            		;    left, top,  right, bottom boundaries
00005130 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00005138 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00005140 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00005148 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00005150 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
00005158                            		even
00005158                            
00005158                            ; ---------------------------------------------------------------------------
00005158                            ; Labyrinth Zone water slide subroutine
00005158                            ; ---------------------------------------------------------------------------
00005158                            
00005158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005158                            
00005158                            
00005158                            LZWaterSlides:
00005158 43F8 D000                  		lea	(v_player).w,a1
0000515C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00005162 6600                       		bne.s	loc_3F6A	; if not, branch
00005164 3029 000C                  		move.w	obY(a1),d0
00005168 E248                       		lsr.w	#1,d0
0000516A 0240 0380                  		andi.w	#$380,d0
0000516E 1229 0008                  		move.b	obX(a1),d1
00005172 0241 007F                  		andi.w	#$7F,d1
00005176 D041                       		add.w	d1,d0
00005178 45F8 A400                  		lea	(v_lvllayout).w,a2
0000517C 1032 0000                  		move.b	(a2,d0.w),d0
00005180 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00005184 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00005186                            
00005186                            loc_3F62:
00005186 B022                       		cmp.b	-(a2),d0
00005188 57C9 FFFC                  		dbeq	d1,loc_3F62
0000518C 6700                       		beq.s	LZSlide_Move
0000518E                            
0000518E                            loc_3F6A:
0000518E 4A38 F7CA                  		tst.b	(f_jumponly).w
00005192 6700                       		beq.s	locret_3F7A
00005194 337C 0005 003E             		move.w	#5,$3E(a1)
0000519A 4238 F7CA                  		clr.b	(f_jumponly).w
0000519E                            
0000519E                            locret_3F7A:
0000519E 4E75                       		rts	
000051A0                            ; ===========================================================================
000051A0                            
000051A0                            LZSlide_Move:
000051A0 0C41 0003                  		cmpi.w	#3,d1
000051A4 6400                       		bcc.s	loc_3F84
000051A6 4E71                       		nop	
000051A8                            
000051A8                            loc_3F84:
000051A8 08A9 0000 0022             		bclr	#0,obStatus(a1)
000051AE 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
000051B2 1340 0020                  		move.b	d0,obInertia(a1)
000051B6 6A00                       		bpl.s	loc_3F9A
000051B8 08E9 0000 0022             		bset	#0,obStatus(a1)
000051BE                            
000051BE                            loc_3F9A:
000051BE 4229 0021                  		clr.b	obInertia+1(a1)
000051C2 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
000051C8 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
000051CE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000051D2 0200 001F                  		andi.b	#$1F,d0
000051D6 6600                       		bne.s	locret_3FBE
000051E2                            
000051E2                            locret_3FBE:
000051E2 4E75                       		rts	
000051E4                            ; End of function LZWaterSlides
000051E4                            
000051E4                            ; ===========================================================================
000051E4                            ; byte_3FC0:
000051E4                            Slide_Speeds:
000051E4 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
000051EC 00                         		even
000051EC                            
000051EC                            Slide_Chunks:
000051EC 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
000051ED                            ; byte_3FCF
000051ED                            Slide_Chunks_End
000051EE 00                         		even
000051EE 00                         		even
000051EE                            		include	"_inc\MoveSonicInDemo.asm"
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            ; Subroutine to	move Sonic in demo mode
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            
000051EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051EE                            
000051EE                            
000051EE                            MoveSonicInDemo:
000051EE 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000051F2 6600                       		bne.s	MDemo_On	; if yes, branch
000051F4 4E75                       		rts	
000051F6                            ; ===========================================================================
000051F6                            
000051F6                            ; This is an unused subroutine for recording a demo
000051F6                            
000051F6                            DemoRecorder:
000051F6 43F9 0008 0000             		lea	($80000).l,a1
000051FC 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005200 D2C0                       		adda.w	d0,a1
00005202 1038 F604                  		move.b	(v_jpadhold1).w,d0
00005206 B011                       		cmp.b	(a1),d0
00005208 6600                       		bne.s	@next
0000520A 5229 0001                  		addq.b	#1,1(a1)
0000520E 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005214 6700                       		beq.s	@next
00005216 4E75                       		rts	
00005218                            
00005218                            	@next:
00005218 1340 0002                  		move.b	d0,2(a1)
0000521C 137C 0000 0003             		move.b	#0,3(a1)
00005222 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005226 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000522C 4E75                       		rts	
0000522E                            ; ===========================================================================
0000522E                            
0000522E                            MDemo_On:
0000522E 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005232 6A00                       		bpl.s	@dontquit	; if not, branch
00005234 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005238 6B00                       		bmi.s	@dontquit	; if yes, branch
0000523A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005240                            
00005240                            	@dontquit:
00005240 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005246 7000                       		moveq	#0,d0
00005248 1038 FE10                  		move.b	(v_zone).w,d0
0000524C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005252 6600                       		bne.s	@notspecial	; if not, branch
00005254 7006                       		moveq	#6,d0		; use demo #6
00005256                            
00005256                            	@notspecial:
00005256 E548                       		lsl.w	#2,d0
00005258 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000525C 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005260 6A00                       		bpl.s	@notcredits	; if not, branch
00005262 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005268 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000526C 5340                       		subq.w	#1,d0
0000526E E548                       		lsl.w	#2,d0
00005270 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005274                            
00005274                            	@notcredits:
00005274 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005278 D2C0                       		adda.w	d0,a1
0000527A 1011                       		move.b	(a1),d0
0000527C 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005280 1200                       		move.b	d0,d1
00005282 7400                       			moveq	#0,d2
00005284 B500                       		eor.b	d2,d0
00005286 10C1                       		move.b	d1,(a0)+
00005288 C001                       		and.b	d1,d0
0000528A 10C0                       		move.b	d0,(a0)+
0000528C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005290 6400                       		bcc.s	@end
00005292 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005298 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000529C                            
0000529C                            	@end:
0000529C 4E75                       		rts	
0000529E                            ; End of function MoveSonicInDemo
0000529E                            
0000529E                            ; ===========================================================================
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Demo sequence	pointers
0000529E                            ; ---------------------------------------------------------------------------
0000529E 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
000052A2 0000 0000                  		dc.l Demo_GHZ
000052A6 0000 0000                  		dc.l Demo_MZ
000052AA 0000 0000                  		dc.l Demo_MZ
000052AE 0000 0000                  		dc.l Demo_SYZ
000052B2 0000 0000                  		dc.l Demo_SYZ
000052B6 0000 0000                  		dc.l Demo_SS
000052BA 0000 0000                  		dc.l Demo_SS
000052BE                            
000052BE 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000052C2 0000 0000                  		dc.l Demo_EndMZ
000052C6 0000 0000                  		dc.l Demo_EndSYZ
000052CA 0000 0000                  		dc.l Demo_EndLZ
000052CE 0000 0000                  		dc.l Demo_EndSLZ
000052D2 0000 0000                  		dc.l Demo_EndSBZ1
000052D6 0000 0000                  		dc.l Demo_EndSBZ2
000052DA 0000 0000                  		dc.l Demo_EndGHZ2
000052DE                            
000052DE 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000052EE 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000052FE 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000530E                            		even
0000530E                            		even
0000530E                            
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            ; Collision index pointer loading subroutine
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            
0000530E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000530E                            
0000530E                            
0000530E                            ColIndexLoad:
0000530E 7000                       		moveq	#0,d0
00005310 1038 FE10                  		move.b	(v_zone).w,d0
00005314 E548                       		lsl.w	#2,d0
00005316 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000531C 4E75                       		rts	
0000531E                            ; End of function ColIndexLoad
0000531E                            
0000531E                            ; ===========================================================================
0000531E                            ; ---------------------------------------------------------------------------
0000531E                            ; Collision index pointers
0000531E                            ; ---------------------------------------------------------------------------
0000531E 0000 0000                  ColPointers:	dc.l Col_GHZ
00005322 0000 0000                  		dc.l Col_LZ
00005326 0000 0000                  		dc.l Col_MZ
0000532A 0000 0000                  		dc.l Col_SLZ
0000532E 0000 0000                  		dc.l Col_SYZ
00005332 0000 0000                  		dc.l Col_SBZ
00005336                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005336                            
00005336                            		include	"_inc\Oscillatory Routines.asm"
00005336                            ; ---------------------------------------------------------------------------
00005336                            ; Oscillating number subroutines
00005336                            ; ---------------------------------------------------------------------------
00005336                            
00005336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005336                            
00005336                            ; Initialise the values
00005336                            
00005336                            OscillateNumInit:
00005336 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000533A 45F9 0000 0000             		lea	(@baselines).l,a2
00005340 7220                       		moveq	#$20,d1
00005342                            
00005342                            	@loop:
00005342 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005344 51C9 FFFC                  		dbf	d1,@loop
00005348 4E75                       		rts	
0000534A                            
0000534A                            
0000534A                            ; ===========================================================================
0000534A 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000534C 0080 0000                  		dc.w $80, 0
00005350 0080 0000                  		dc.w $80, 0
00005354 0080 0000                  		dc.w $80, 0
00005358 0080 0000                  		dc.w $80, 0
0000535C 0080 0000                  		dc.w $80, 0
00005360 0080 0000                  		dc.w $80, 0
00005364 0080 0000                  		dc.w $80, 0
00005368 0080 0000                  		dc.w $80, 0
0000536C 0080 0000                  		dc.w $80, 0
00005370 50F0 011E                  		dc.w $50F0, $11E
00005374 2080 00B4                  		dc.w $2080, $B4
00005378 3080 010E                  		dc.w $3080, $10E
0000537C 5080 01C2                  		dc.w $5080, $1C2
00005380 7080 0276                  		dc.w $7080, $276
00005384 0080 0000                  		dc.w $80, 0
00005388 0080 0000                  		dc.w $80, 0
0000538C                            		even
0000538C                            
0000538C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000538C                            
0000538C                            ; Oscillate values
0000538C                            
0000538C                            OscillateNumDo:
0000538C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005392 6400                       		bcc.s	@end		; if yes, branch
00005394 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005398 45F9 0000 0000             		lea	(@settings).l,a2
0000539E 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
000053A0 720F                       		moveq	#$F,d1
000053A2                            
000053A2                            @loop:
000053A2 341A                       		move.w	(a2)+,d2	; get frequency
000053A4 381A                       		move.w	(a2)+,d4	; get amplitude
000053A6 0303                       		btst	d1,d3		; check oscillation direction
000053A8 6600                       		bne.s	@down		; branch if 1
000053AA                            
000053AA                            	@up:
000053AA 3029 0002                  		move.w	2(a1),d0	; get current rate
000053AE D042                       		add.w	d2,d0		; add frequency
000053B0 3340 0002                  		move.w	d0,2(a1)
000053B4 D151                       		add.w	d0,0(a1)	; add rate to value
000053B6 B811                       		cmp.b	0(a1),d4
000053B8 6200                       		bhi.s	@next
000053BA 03C3                       		bset	d1,d3
000053BC 6000                       		bra.s	@next
000053BE                            
000053BE                            	@down:
000053BE 3029 0002                  		move.w	2(a1),d0
000053C2 9042                       		sub.w	d2,d0
000053C4 3340 0002                  		move.w	d0,2(a1)
000053C8 D151                       		add.w	d0,0(a1)
000053CA B811                       		cmp.b	0(a1),d4
000053CC 6300                       		bls.s	@next
000053CE 0383                       		bclr	d1,d3
000053D0                            
000053D0                            	@next:
000053D0 5849                       		addq.w	#4,a1
000053D2 51C9 FFCE                  		dbf	d1,@loop
000053D6 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000053DA                            
000053DA                            @end:
000053DA 4E75                       		rts	
000053DC                            ; End of function OscillateNumDo
000053DC                            
000053DC                            ; ===========================================================================
000053DC 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000053E0 0002 0018                  		dc.w 2,	$18
000053E4 0002 0020                  		dc.w 2,	$20
000053E8 0002 0030                  		dc.w 2,	$30
000053EC 0004 0020                  		dc.w 4,	$20
000053F0 0008 0008                  		dc.w 8,	8
000053F4 0008 0040                  		dc.w 8,	$40
000053F8 0004 0040                  		dc.w 4,	$40
000053FC 0002 0050                  		dc.w 2,	$50
00005400 0002 0050                  		dc.w 2,	$50
00005404 0002 0020                  		dc.w 2,	$20
00005408 0003 0030                  		dc.w 3,	$30
0000540C 0005 0050                  		dc.w 5,	$50
00005410 0007 0070                  		dc.w 7,	$70
00005414 0002 0010                  		dc.w 2,	$10
00005418 0002 0010                  		dc.w 2,	$10
0000541C                            		even
0000541C                            		even
0000541C                            
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            
0000541C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000541C                            
0000541C                            
0000541C                            SynchroAnimate:
0000541C                            
0000541C                            ; Used for GHZ spiked log
0000541C                            Sync1:
0000541C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005420 6A00                       		bpl.s	Sync2		; if not, branch
00005422 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005428 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000542C 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005432                            
00005432                            ; Used for rings and giant rings
00005432                            Sync2:
00005432 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005436 6A00                       		bpl.s	Sync3
00005438 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000543E 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005442 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005448                            
00005448                            ; Used for nothing
00005448                            Sync3:
00005448 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000544C 6A00                       		bpl.s	Sync4
0000544E 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005454 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005458 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000545E 6500                       		blo.s	Sync4
00005460 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005466                            
00005466                            ; Used for bouncing rings
00005466                            Sync4:
00005466 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000546A 6700                       		beq.s	SyncEnd
0000546C 7000                       		moveq	#0,d0
0000546E 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005472 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005476 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000547A EF58                       		rol.w	#7,d0
0000547C 0240 0003                  		andi.w	#3,d0
00005480 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005484 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005488                            
00005488                            SyncEnd:
00005488 4E75                       		rts	
0000548A                            ; End of function SynchroAnimate
0000548A                            
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            ; End-of-act signpost pattern loading subroutine
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            
0000548A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000548A                            
0000548A                            
0000548A                            SignpostArtLoad:
0000548A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000548E 6600 0000                  		bne.w	@exit		; if yes, branch
00005492 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005498 6700                       		beq.s	@exit		; if yes, branch
0000549A                            
0000549A 3038 F700                  		move.w	(v_screenposx).w,d0
0000549E 3238 F72A                  		move.w	(v_limitright2).w,d1
000054A2 0441 0100                  		subi.w	#$100,d1
000054A6 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000054A8 6D00                       		blt.s	@exit		; if not, branch
000054AA 4A38 FE1E                  		tst.b	(f_timecount).w
000054AE 6700                       		beq.s	@exit
000054B0 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000054B4 6700                       		beq.s	@exit
000054B6 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000054BA 7000                       		moveq	#plcid_Signpost,d0
000054BC 6000 C2AE                  		bra.w	NewPLC		; load signpost	patterns
000054C0                            
000054C0                            	@exit:
000054C0 4E75                       		rts	
000054C2                            ; End of function SignpostArtLoad
000054C2                            
000054C2                            ; ===========================================================================
000054C2                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005542                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005672                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000056F2                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000057F2                            ; ===========================================================================
000057F2                            
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            ; Special Stage
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            
000057F2                            GM_Special:
000057FA 6100 CC88                  		bsr.w	PaletteWhiteOut
000057FE 46FC 2700                  		disable_ints
00005802 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005808 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000580C 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005810 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005816 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000581A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000581E 0200 00BF                  		andi.b	#$BF,d0
00005822 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005828 6100 B9A6                  		bsr.w	ClearScreen
0000582C 46FC 2300                  		enable_ints
00005830 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005852                            
00005852                            	SS_WaitForDMA:
00005852 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005854 0801 0001                  		btst	#1,d1		; is DMA running?
00005858 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000585A 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000585E 6100 0000                  		bsr.w	SS_BGLoad
00005862 7000                       		moveq	#plcid_SpecialStage,d0
00005864 6100 C040                  		bsr.w	QuickPLC	; load special stage patterns
00005868                            
00005868 43F8 D000                  		lea	(v_objspace).w,a1
0000586C 7000                       		moveq	#0,d0
0000586E 323C 07FF                  		move.w	#$7FF,d1
00005872                            	SS_ClrObjRam:
00005872 22C0                       		move.l	d0,(a1)+
00005874 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005878                            
00005878 43F8 F700                  		lea	(v_screenposx).w,a1
0000587C 7000                       		moveq	#0,d0
0000587E 323C 003F                  		move.w	#$3F,d1
00005882                            	SS_ClrRam1:
00005882 22C0                       		move.l	d0,(a1)+
00005884 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005888                            
00005888 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000588C 7000                       		moveq	#0,d0
0000588E 323C 0027                  		move.w	#$27,d1
00005892                            	SS_ClrRam2:
00005892 22C0                       		move.l	d0,(a1)+
00005894 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005898                            
00005898 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000589C 7000                       		moveq	#0,d0
0000589E 323C 007F                  		move.w	#$7F,d1
000058A2                            	SS_ClrNemRam:
000058A2 22C0                       		move.l	d0,(a1)+
000058A4 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000058A8                            
000058A8 4238 F64E                  		clr.b	(f_wtr_state).w
000058AC 4278 FE02                  		clr.w	(f_restart).w
000058B0 700A                       		moveq	#palid_Special,d0
000058B2 6100 CD50                  		bsr.w	PalLoad1	; load special stage palette
000058B6 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000058BC 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000058C4 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000058CC 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000058D2 6100 0000                  		bsr.w	PalCycle_SS
000058D6 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000058DA 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000058E8 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000058EE 43F9 0000 529E             		lea	(DemoDataPtr).l,a1
000058F4 7006                       		moveq	#6,d0
000058F6 E548                       		lsl.w	#2,d0
000058F8 2271 0000                  		movea.l	(a1,d0.w),a1
000058FC 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005902 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005906 4278 FE20                  		clr.w	(v_rings).w
0000590A 4238 FE1B                  		clr.b	(v_lifecount).w
0000590E 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005914 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000591A 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000591E 6700                       		beq.s	SS_NoDebug	; if not, branch
00005920 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005926 6700                       		beq.s	SS_NoDebug	; if not, branch
00005928 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000592E                            
0000592E                            	SS_NoDebug:
0000592E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005932 0000 0040                  		ori.b	#$40,d0
00005936 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000593C 6100 CA9A                  		bsr.w	PaletteWhiteIn
00005940                            
00005940                            ; ---------------------------------------------------------------------------
00005940                            ; Main Special Stage loop
00005940                            ; ---------------------------------------------------------------------------
00005940                            
00005940                            SS_MainLoop:
00005940 6100 B96A                  		bsr.w	PauseGame
00005944 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000594A 6100 E34C                  		bsr.w	WaitForVBla
0000594E 6100 F89E                  		bsr.w	MoveSonicInDemo
00005952 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005958 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000595E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005964 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000596A 6100 0000                  		bsr.w	SS_BGAnimate
0000596E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005972 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005974 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005978 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000597C                            
0000597C                            	SS_ChkEnd:
0000597C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005982 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005986                            
00005986 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000598A 6600 0000                  		bne.w	SS_ToLevel
0000598E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005994 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000599A 6500                       		blo.s	SS_Finish	; if not, branch
0000599C 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
000059A0                            
000059A0                            SS_Finish:
000059A0 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000059A6 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000059AC 4278 F794                  		clr.w	(v_palchgspeed).w
000059B0                            
000059B0                            	SS_FinLoop:
000059B0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000059B6 6100 E2E0                  		bsr.w	WaitForVBla
000059BA 6100 F832                  		bsr.w	MoveSonicInDemo
000059BE 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000059C4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059CA 4EB9 0000 0000             		jsr	(BuildSprites).l
000059D0 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000059D6 6100 0000                  		bsr.w	SS_BGAnimate
000059DA 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000059DE 6A00                       		bpl.s	loc_47D4
000059E0 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000059E6 6100 CABC                  		bsr.w	WhiteOut_ToWhite
000059EA                            
000059EA                            loc_47D4:
000059EA 4A78 F614                  		tst.w	(v_demolength).w
000059EE 66C0                       		bne.s	SS_FinLoop
000059F0                            
000059F0 46FC 2700                  		disable_ints
000059F4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000059FA 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000059FE 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005A02 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005A06 6100 B7C8                  		bsr.w	ClearScreen
00005A14 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A1A 6100 B932                  		bsr.w	NemDec
00005A1E 4EB9 0000 0000             		jsr	(Hud_Base).l
00005A24 31FC C800 C8FC             		ResetDMAQueue	
00005A2A 46FC 2300                  		enable_ints
00005A2E 7011                       		moveq	#palid_SSResult,d0
00005A30 6100 CC0E                  		bsr.w	PalLoad2	; load results screen palette
00005A34 7000                       		moveq	#plcid_Main,d0
00005A36 6100 BD34                  		bsr.w	NewPLC
00005A3A 7000                       		moveq	#plcid_SSResult,d0
00005A3C 6100 BCFC                  		bsr.w	AddPLC		; load results screen patterns
00005A40 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005A46 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005A4C 3038 FE20                  		move.w	(v_rings).w,d0
00005A50 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005A54 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005A62                            
00005A62 43F8 D000                  		lea	(v_objspace).w,a1
00005A66 7000                       		moveq	#0,d0
00005A68 323C 07FF                  		move.w	#$7FF,d1
00005A6C                            	SS_EndClrObjRam:
00005A6C 22C0                       		move.l	d0,(a1)+
00005A6E 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005A72                            
00005A72 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005A78                            
00005A78                            SS_NormalExit:
00005A78 6100 B832                  		bsr.w	PauseGame
00005A7C 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005A82 6100 E214                  		bsr.w	WaitForVBla
00005A86 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005A8C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005A92 6100 BD12                  		bsr.w	RunPLC
00005A96 4A78 FE02                  		tst.w	(f_restart).w
00005A9A 67DC                       		beq.s	SS_NormalExit
00005A9C 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005AA0 66D6                       		bne.s	SS_NormalExit
00005AAA 6100 C9D8                  		bsr.w	PaletteWhiteOut
00005AAE 4E75                       		rts	
00005AB0                            ; ===========================================================================
00005AB0                            
00005AB0                            SS_ToSegaScreen:
00005AB0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005AB6 4E75                       		rts
00005AB8                            
00005AB8 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005ABE 67F0                       		beq.s	SS_ToSegaScreen
00005AC0 4E75                       		rts
00005AC2                            
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            ; Special stage	background loading subroutine
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            
00005AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AC2                            
00005AC2                            
00005AC2                            SS_BGLoad:
00005AC2 43F9 00FF 0000             		lea	($FF0000).l,a1
00005AC8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005ACE 303C 4051                  		move.w	#$4051,d0
00005AD2 6100 BE04                  		bsr.w	EniDec
00005AD6 263C 5000 0001             		move.l	#$50000001,d3
00005ADC 45F9 00FF 0080             		lea	($FF0080).l,a2
00005AE2 7E06                       		moveq	#6,d7
00005AE4                            
00005AE4                            loc_48BE:
00005AE4 2003                       		move.l	d3,d0
00005AE6 7C03                       		moveq	#3,d6
00005AE8 7800                       		moveq	#0,d4
00005AEA 0C47 0003                  		cmpi.w	#3,d7
00005AEE 6400                       		bhs.s	loc_48CC
00005AF0 7801                       		moveq	#1,d4
00005AF2                            
00005AF2                            loc_48CC:
00005AF2 7A07                       		moveq	#7,d5
00005AF4                            
00005AF4                            loc_48CE:
00005AF4 224A                       		movea.l	a2,a1
00005AF6 0A04 0001                  		eori.b	#1,d4
00005AFA 6600                       		bne.s	loc_48E2
00005AFC 0C47 0006                  		cmpi.w	#6,d7
00005B00 6600                       		bne.s	loc_48F2
00005B02 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B08                            
00005B08                            loc_48E2:
00005B08 48E7 F800                  		movem.l	d0-d4,-(sp)
00005B0C 7207                       		moveq	#7,d1
00005B0E 7407                       		moveq	#7,d2
00005B10 6100 B812                  		bsr.w	TilemapToVRAM
00005B14 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005B18                            
00005B18                            loc_48F2:
00005B18 0680 0010 0000             		addi.l	#$100000,d0
00005B1E 51CD FFD4                  		dbf	d5,loc_48CE
00005B22 0680 0380 0000             		addi.l	#$3800000,d0
00005B28 0A04 0001                  		eori.b	#1,d4
00005B2C 51CE FFC4                  		dbf	d6,loc_48CC
00005B30 0683 1000 0000             		addi.l	#$10000000,d3
00005B36 6A00                       		bpl.s	loc_491C
00005B38 4843                       		swap	d3
00005B3A 0683 0000 C000             		addi.l	#$C000,d3
00005B40 4843                       		swap	d3
00005B42                            
00005B42                            loc_491C:
00005B42 D4FC 0080                  		adda.w	#$80,a2
00005B46 51CF FF9C                  		dbf	d7,loc_48BE
00005B4A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B50 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005B56 303C 4000                  		move.w	#$4000,d0
00005B5A 6100 BD7C                  		bsr.w	EniDec
00005B5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B64 203C 4000 0003             		move.l	#$40000003,d0
00005B6A 723F                       		moveq	#$3F,d1
00005B6C 741F                       		moveq	#$1F,d2
00005B6E 6100 B7B4                  		bsr.w	TilemapToVRAM
00005B72 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B78 203C 5000 0003             		move.l	#$50000003,d0
00005B7E 723F                       		moveq	#$3F,d1
00005B80 743F                       		moveq	#$3F,d2
00005B82 6100 B7A0                  		bsr.w	TilemapToVRAM
00005B86 4E75                       		rts	
00005B88                            ; End of function SS_BGLoad
00005B88                            
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            ; Palette cycling routine - special stage
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            
00005B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B88                            
00005B88                            
00005B88                            PalCycle_SS:
00005B88 4A78 F63A                  		tst.w	(f_pause).w
00005B8C 6600                       		bne.s	locret_49E6
00005B8E 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005B92 6A00                       		bpl.s	locret_49E6
00005B94 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005B9A 3038 F79A                  		move.w	(v_palss_num).w,d0
00005B9E 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005BA2 0240 001F                  		andi.w	#$1F,d0
00005BA6 E548                       		lsl.w	#2,d0
00005BA8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005BAE D0C0                       		adda.w	d0,a0
00005BB0 1018                       		move.b	(a0)+,d0
00005BB2 6A00                       		bpl.s	loc_4992
00005BB4 303C 01FF                  		move.w	#$1FF,d0
00005BB8                            
00005BB8                            loc_4992:
00005BB8 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005BBC 7000                       		moveq	#0,d0
00005BBE 1018                       		move.b	(a0)+,d0
00005BC0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005BC4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005BCA 43F1 0000                  		lea	(a1,d0.w),a1
00005BCE 303C 8200                  		move.w	#-$7E00,d0
00005BD2 1019                       		move.b	(a1)+,d0
00005BD4 3C80                       		move.w	d0,(a6)
00005BD6 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005BDA 303C 8400                  		move.w	#-$7C00,d0
00005BDE 1018                       		move.b	(a0)+,d0
00005BE0 3C80                       		move.w	d0,(a6)
00005BE2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005BEC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005BF4 7000                       		moveq	#0,d0
00005BF6 1018                       		move.b	(a0)+,d0
00005BF8 6B00                       		bmi.s	loc_49E8
00005BFA 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005C00 D2C0                       		adda.w	d0,a1
00005C02 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005C06 24D9                       		move.l	(a1)+,(a2)+
00005C08 24D9                       		move.l	(a1)+,(a2)+
00005C0A 24D9                       		move.l	(a1)+,(a2)+
00005C0C                            
00005C0C                            locret_49E6:
00005C0C 4E75                       		rts	
00005C0E                            ; ===========================================================================
00005C0E                            
00005C0E                            loc_49E8:
00005C0E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005C12 0C40 008A                  		cmpi.w	#$8A,d0
00005C16 6500                       		blo.s	loc_49F4
00005C18 5241                       		addq.w	#1,d1
00005C1A                            
00005C1A                            loc_49F4:
00005C1A C2FC 002A                  		mulu.w	#$2A,d1
00005C1E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005C24 D2C1                       		adda.w	d1,a1
00005C26 0240 007F                  		andi.w	#$7F,d0
00005C2A 0880 0000                  		bclr	#0,d0
00005C2E 6700                       		beq.s	loc_4A18
00005C30 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005C34 24D1                       		move.l	(a1),(a2)+
00005C36 24E9 0004                  		move.l	4(a1),(a2)+
00005C3A 24E9 0008                  		move.l	8(a1),(a2)+
00005C3E                            
00005C3E                            loc_4A18:
00005C3E D2FC 000C                  		adda.w	#$C,a1
00005C42 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005C46 0C40 000A                  		cmpi.w	#$A,d0
00005C4A 6500                       		blo.s	loc_4A2E
00005C4C 0440 000A                  		subi.w	#$A,d0
00005C50 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005C54                            
00005C54                            loc_4A2E:
00005C54 3200                       		move.w	d0,d1
00005C56 D040                       		add.w	d0,d0
00005C58 D041                       		add.w	d1,d0
00005C5A D2C0                       		adda.w	d0,a1
00005C5C 24D9                       		move.l	(a1)+,(a2)+
00005C5E 34D9                       		move.w	(a1)+,(a2)+
00005C60 4E75                       		rts	
00005C62                            ; End of function PalCycle_SS
00005C62                            
00005C62                            ; ===========================================================================
00005C62 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005C72                            
00005C72 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005C82 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005C92 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005CA2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005CB2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005CC2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005CD2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005CE2                            		even
00005CE2 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005CF0                            		even
00005CF0                            
00005CF0                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005D38                            		even
00005D38                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005E0A                            		even
00005E0A                            
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            ; Subroutine to	make the special stage background animated
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            
00005E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E0A                            
00005E0A                            
00005E0A                            SS_BGAnimate:
00005E0A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005E0E 6600                       		bne.s	loc_4BF6
00005E10 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005E16 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E1C                            
00005E1C                            loc_4BF6:
00005E1C 0C40 0008                  		cmpi.w	#8,d0
00005E20 6400                       		bhs.s	loc_4C4E
00005E22 0C40 0006                  		cmpi.w	#6,d0
00005E26 6600                       		bne.s	loc_4C10
00005E28 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005E2C 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005E30 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E36                            
00005E36                            loc_4C10:
00005E36 7000                       		moveq	#0,d0
00005E38 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005E3C 4440                       		neg.w	d0
00005E3E 4840                       		swap	d0
00005E40 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005E46 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E4A 7609                       		moveq	#9,d3
00005E4C                            
00005E4C                            loc_4C26:
00005E4C 302B 0002                  		move.w	2(a3),d0
00005E50 6100 DE78                  		bsr.w	CalcSine
00005E54 7400                       		moveq	#0,d2
00005E56 1419                       		move.b	(a1)+,d2
00005E58 C1C2                       		muls.w	d2,d0
00005E5A E080                       		asr.l	#8,d0
00005E5C 36C0                       		move.w	d0,(a3)+
00005E5E 1419                       		move.b	(a1)+,d2
00005E60 4882                       		ext.w	d2
00005E62 D55B                       		add.w	d2,(a3)+
00005E64 51CB FFE6                  		dbf	d3,loc_4C26
00005E68 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E6C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005E72 6000                       		bra.s	loc_4C7E
00005E74                            ; ===========================================================================
00005E74                            
00005E74                            loc_4C4E:
00005E74 0C40 000C                  		cmpi.w	#$C,d0
00005E78 6600                       		bne.s	loc_4C74
00005E7A 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005E7E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E82 243C 0001 8000             		move.l	#$18000,d2
00005E88 7206                       		moveq	#6,d1
00005E8A                            
00005E8A                            loc_4C64:
00005E8A 2013                       		move.l	(a3),d0
00005E8C 9082                       		sub.l	d2,d0
00005E8E 26C0                       		move.l	d0,(a3)+
00005E90 0482 0000 2000             		subi.l	#$2000,d2
00005E96 51C9 FFF2                  		dbf	d1,loc_4C64
00005E9A                            
00005E9A                            loc_4C74:
00005E9A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E9E 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005EA4                            
00005EA4                            loc_4C7E:
00005EA4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005EA8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005EAC 4440                       		neg.w	d0
00005EAE 4840                       		swap	d0
00005EB0 7600                       		moveq	#0,d3
00005EB2 161A                       		move.b	(a2)+,d3
00005EB4 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005EB8 4442                       		neg.w	d2
00005EBA 0242 00FF                  		andi.w	#$FF,d2
00005EBE E54A                       		lsl.w	#2,d2
00005EC0                            
00005EC0                            loc_4C9A:
00005EC0 301B                       		move.w	(a3)+,d0
00005EC2 544B                       		addq.w	#2,a3
00005EC4 7200                       		moveq	#0,d1
00005EC6 121A                       		move.b	(a2)+,d1
00005EC8 5341                       		subq.w	#1,d1
00005ECA                            
00005ECA                            loc_4CA4:
00005ECA 2380 2000                  		move.l	d0,(a1,d2.w)
00005ECE 5842                       		addq.w	#4,d2
00005ED0 0242 03FC                  		andi.w	#$3FC,d2
00005ED4 51C9 FFF4                  		dbf	d1,loc_4CA4
00005ED8 51CB FFE6                  		dbf	d3,loc_4C9A
00005EDC 4E75                       		rts	
00005EDE                            ; End of function SS_BGAnimate
00005EDE                            
00005EDE                            ; ===========================================================================
00005EDE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005EEA                            		even
00005EEA 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005EF2                            		even
00005EF2 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005F06                            		even
00005F06                            
00005F06                            ; ===========================================================================
00005F06                            
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            ; Continue screen
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            
00005F06                            GM_Continue:
00005F06 6100 C452                  		bsr.w	PaletteFadeOut
00005F0A 46FC 2700                  		disable_ints
00005F0E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005F12 0200 00BF                  		andi.b	#$BF,d0
00005F16 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005F1C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005F22 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005F26 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005F2A 6100 B2A4                  		bsr.w	ClearScreen
00005F2E 31FC C800 C8FC             		ResetDMAQueue
00005F34 43F8 D000                  		lea	(v_objspace).w,a1
00005F38 7000                       		moveq	#0,d0
00005F3A 323C 07FF                  		move.w	#$7FF,d1
00005F3E                            	Cont_ClrObjRam:
00005F3E 22C0                       		move.l	d0,(a1)+
00005F40 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005F44                            
00005F4E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005F54 6100 B3F8                  		bsr.w	NemDec
00005F62 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005F68 6100 B3E4                  		bsr.w	NemDec
00005F76 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005F7C 6100 B3D0                  		bsr.w	NemDec
00005F80 720A                       		moveq	#10,d1
00005F82 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005F88 7012                       		moveq	#palid_Continue,d0
00005F8A 6100 C678                  		bsr.w	PalLoad1	; load continue	screen palette
00005F96 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005F9C 42B8 F700                  		clr.l	(v_screenposx).w
00005FA0 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005FA8 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005FAE 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005FB4 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005FBA 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005FC0 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005FC6 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005FCC 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005FD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005FD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00005FDE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005FE2 0000 0040                  		ori.b	#$40,d0
00005FE6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005FEC 6100 C2C6                  		bsr.w	PaletteFadeIn
00005FF0                            
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            ; Continue screen main loop
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            
00005FF0                            Cont_MainLoop:
00005FF0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005FF6 6100 DCA0                  		bsr.w	WaitForVBla
00005FFA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006000 6400                       		bhs.s	loc_4DF2
00006002 46FC 2700                  		disable_ints
00006006 3238 F614                  		move.w	(v_demolength).w,d1
0000600A 82FC 003C                  		divu.w	#$3C,d1
0000600E 0281 0000 000F             		andi.l	#$F,d1
00006014 4EB9 0000 0000             		jsr	(ContScrCounter).l
0000601A 46FC 2300                  		enable_ints
0000601E                            
0000601E                            loc_4DF2:
0000601E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006024 4EB9 0000 0000             		jsr	(BuildSprites).l
0000602A 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00006030 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00006032 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006038 64B6                       		bhs.s	Cont_MainLoop
0000603A 4A78 F614                  		tst.w	(v_demolength).w
0000603E 6600 FFB0                  		bne.w	Cont_MainLoop
00006042 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00006048 4E75                       		rts	
0000604A                            ; ===========================================================================
0000604A                            
0000604A                            Cont_GotoLevel:
0000604A 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00006050 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00006056 7000                       		moveq	#0,d0
00006058 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000605C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00006060 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00006064 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00006068 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
0000606C 4E75                       		rts	
0000606E                            ; ===========================================================================
0000606E                            
0000606E                            		include	"_incObj\80 Continue Screen Elements.asm"
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            ; Object 80 - Continue screen elements
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            
0000606E                            ContScrItem:
0000606E 7000                       		moveq	#0,d0
00006070 1028 0024                  		move.b	$24(a0),d0
00006074 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00006078 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
0000607C                            ; ===========================================================================
0000607C 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
0000607E 0000                       		dc.w CSI_Display-CSI_Index
00006080 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00006082 0000                       		dc.w CSI_ChkDel-CSI_Index
00006084                            ; ===========================================================================
00006084                            
00006084                            CSI_Main:	; Routine 0
00006084 5428 0024                  		addq.b	#2,obRoutine(a0)
00006088 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006090 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00006096 117C 0000 0001             		move.b	#0,obRender(a0)
0000609C 117C 003C 0014             		move.b	#$3C,obActWid(a0)
000060A2 317C 0120 0008             		move.w	#$120,obX(a0)
000060A8 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
000060AE 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
000060B4                            
000060B4                            CSI_Display:	; Routine 2
000060B4 4EF9 0000 0000             		jmp	(DisplaySprite).l
000060BA                            ; ===========================================================================
000060BA                            
000060BA                            	CSI_MiniSonicPos:
000060BA 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000060CC 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000060D8                            
000060D8                            CSI_MakeMiniSonic:
000060D8                            		; Routine 4
000060D8 2248                       		movea.l	a0,a1
000060DA 45F9 0000 60BA             		lea	(CSI_MiniSonicPos).l,a2
000060E0 7200                       		moveq	#0,d1
000060E2 1238 FE18                  		move.b	(v_continues).w,d1
000060E6 5501                       		subq.b	#2,d1
000060E8 6400                       		bcc.s	CSI_MoreThan1
000060EA 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
000060F0                            
000060F0                            	CSI_MoreThan1:
000060F0 7601                       		moveq	#1,d3
000060F2 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
000060F6 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
000060F8                            
000060F8 7600                       		moveq	#0,d3
000060FA 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
000060FC                            
000060FC                            	CSI_FewerThan16:
000060FC 1401                       		move.b	d1,d2
000060FE 0202 0001                  		andi.b	#1,d2
00006102                            
00006102                            CSI_MiniSonicLoop:
00006102 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00006106 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
0000610A 4A02                       		tst.b	d2		; do you have an even number of continues?
0000610C 6700                       		beq.s	CSI_Even	; if yes, branch
0000610E 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006114                            
00006114                            	CSI_Even:
00006114 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
0000611A 137C 0006 001A             		move.b	#6,obFrame(a1)
00006120 137C 0006 0024             		move.b	#6,obRoutine(a1)
00006126 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
0000612E 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006134 137C 0000 0001             		move.b	#0,obRender(a1)
0000613A 43E9 0040                  		lea	$40(a1),a1
0000613E 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00006142                            
00006142 43E9 FFC0                  		lea	-$40(a1),a1
00006146 1343 0028                  		move.b	d3,obSubtype(a1)
0000614A                            
0000614A                            CSI_ChkDel:	; Routine 6
0000614A 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
0000614E 6700                       		beq.s	CSI_Animate	; if yes, branch
00006150 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00006156 6500                       		bcs.s	CSI_Animate	; if not, branch
00006158 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000615C 0200 0001                  		andi.b	#1,d0
00006160 6600                       		bne.s	CSI_Animate
00006162 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00006166 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00006168 4E75                       		rts	
0000616A                            
0000616A                            CSI_Animate:
0000616A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000616E 0200 000F                  		andi.b	#$F,d0
00006172 6600                       		bne.s	CSI_Display2
00006174 0868 0000 001A             		bchg	#0,obFrame(a0)
0000617A                            
0000617A                            	CSI_Display2:
0000617A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006180                            ; ===========================================================================
00006180                            
00006180                            CSI_Delete:
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006186                            		include	"_incObj\81 Continue Screen Sonic.asm"
00006186                            ; ---------------------------------------------------------------------------
00006186                            ; Object 81 - Sonic on the continue screen
00006186                            ; ---------------------------------------------------------------------------
00006186                            
00006186                            ContSonic:
00006186 7000                       		moveq	#0,d0
00006188 1028 0024                  		move.b	obRoutine(a0),d0
0000618C 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00006190 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00006194 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000619A                            ; ===========================================================================
0000619A 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
0000619C 0000                       		dc.w CSon_ChkLand-CSon_Index
0000619E 0000                       		dc.w CSon_Animate-CSon_Index
000061A0 0000                       		dc.w CSon_Run-CSon_Index
000061A2                            ; ===========================================================================
000061A2                            
000061A2                            CSon_Main:	; Routine 0
000061A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000061A6 317C 00A0 0008             		move.w	#$A0,obX(a0)
000061AC 317C 00C0 000C             		move.w	#$C0,obY(a0)
000061B2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000061BA 317C 0780 0002             		move.w	#$780,obGfx(a0)
000061C0 117C 0004 0001             		move.b	#4,obRender(a0)
000061C6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000061CC 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
000061D2 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
000061D8                            
000061D8                            CSon_ChkLand:	; Routine 2
000061D8 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
000061DE 6600                       		bne.s	CSon_ShowFall	; if not, branch
000061E0                            
000061E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000061E4 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
000061E8 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000061F0 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000061F6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000061FC 6000                       		bra.s	CSon_Animate
000061FE                            
000061FE                            CSon_ShowFall:
000061FE 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006204 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000620A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006210                            ; ===========================================================================
00006210                            
00006210                            CSon_Animate:	; Routine 4
00006210 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006214 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006216 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000621C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006222                            
00006222                            CSon_GetUp:
00006222 5428 0024                  		addq.b	#2,obRoutine(a0)
00006226 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000622E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006234 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000623A 4268 0020                  		clr.w	obInertia(a0)
0000623E 5168 000C                  		subq.w	#8,obY(a0)
0000624A                            
0000624A                            CSon_Run:	; Routine 6
0000624A 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006250 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006252 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006258 6000                       		bra.s	CSon_ShowRun
0000625A                            
0000625A                            CSon_AddInertia:
0000625A 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006260                            
00006260                            CSon_ShowRun:
00006260 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006266 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006272                            		include	"_anim\Continue Screen Sonic.asm"
00006272                            ; ---------------------------------------------------------------------------
00006272                            ; Animation script - Sonic on the continue screen
00006272                            ; ---------------------------------------------------------------------------
00006272 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006274 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
0000627E                            		even
0000627E                            		even
0000627E                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            
0000627E                            SME_phED7:	
0000627E 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00006282 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00006286 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
0000628A 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
0000628E 0B                         SME_phED7_10:	dc.b $B	
0000628F F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00006294 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006299 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
0000629E F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
000062A3 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
000062A8 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
000062AD F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000062B2 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000062B7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
000062BC 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
000062C1 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
000062C6 03                         SME_phED7_48:	dc.b 3	
000062C7 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000062CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062D1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062D6 03                         SME_phED7_58:	dc.b 3	
000062D7 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000062DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062E1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062E6 03                         SME_phED7_68:	dc.b 3	
000062E7 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000062EC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062F1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062F6 02                         SME_phED7_78:	dc.b 2	
000062F7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000062FC 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006301 01                         SME_phED7_83:	dc.b 1	
00006302 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006307 01                         SME_phED7_89:	dc.b 1	
00006308 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000630D 01                         SME_phED7_8F:	dc.b 1	
0000630E 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006314 00                         		even
00006314 00                         		even
00006314                            
00006314                            ; ===========================================================================
00006314                            ; ---------------------------------------------------------------------------
00006314                            ; Ending sequence in Green Hill	Zone
00006314                            ; ---------------------------------------------------------------------------
00006314                            
00006314                            GM_Ending:
0000631C 6100 C03C                  		bsr.w	PaletteFadeOut
00006320                            
00006320 43F8 D000                  		lea	(v_objspace).w,a1
00006324 7000                       		moveq	#0,d0
00006326 323C 07FF                  		move.w	#$7FF,d1
0000632A                            	End_ClrObjRam:
0000632A 22C0                       		move.l	d0,(a1)+
0000632C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006330                            
00006330 43F8 F628                  		lea	($FFFFF628).w,a1
00006334 7000                       		moveq	#0,d0
00006336 323C 0015                  		move.w	#$15,d1
0000633A                            	End_ClrRam1:
0000633A 22C0                       		move.l	d0,(a1)+
0000633C 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006340                            
00006340 43F8 F700                  		lea	(v_screenposx).w,a1
00006344 7000                       		moveq	#0,d0
00006346 323C 003F                  		move.w	#$3F,d1
0000634A                            	End_ClrRam2:
0000634A 22C0                       		move.l	d0,(a1)+
0000634C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006350                            
00006350 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006354 7000                       		moveq	#0,d0
00006356 323C 0047                  		move.w	#$47,d1
0000635A                            	End_ClrRam3:
0000635A 22C0                       		move.l	d0,(a1)+
0000635C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006360                            
00006360 46FC 2700                  		disable_ints
00006364 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006368 0200 00BF                  		andi.b	#$BF,d0
0000636C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006372 6100 AE5C                  		bsr.w	ClearScreen
00006376 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000637C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006380 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006384 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006388 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000638C 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006390 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006394 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006398 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000639E 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000063A2 31FC 001E FE14             		move.w	#30,(v_air).w
000063A8 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000063AE 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000063B4 6700                       		beq.s	End_LoadData	; if yes, branch
000063B6 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000063BC                            
000063BC                            End_LoadData:
000063BC 7000                       		moveq	#plcid_Ending,d0
000063BE 6100 B4E6                  		bsr.w	QuickPLC	; load ending sequence patterns
000063C2 4EB9 0000 0000             		jsr	(Hud_Base).l
000063C8 6100 0000                  		bsr.w	LevelSizeLoad
000063CC 6100 0000                  		bsr.w	DeformLayers
000063D0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000063D6 6100 0000                  		bsr.w	LevelDataLoad
000063DA 6100 0000                  		bsr.w	LoadTilesFromStart
000063DE 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000063E6 46FC 2300                  		enable_ints
000063EA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000063F0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000063F4 6100 B660                  		bsr.w	KosDec
000063F8 4EB9 0000 0000             		jsr		LoadPlayerPal
000063FE 6100 C204                  		bsr.w	PalLoad1	; load Sonic's palette
0000640A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006410 6700                       		beq.s	End_LoadSonic	; if not, branch
00006412 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006418                            
00006418                            End_LoadSonic:
00006418 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0000641E 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006424 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000642A 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006430 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
00006436 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000643C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006442 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006448 4EB9 0000 0000             		jsr	(BuildSprites).l
0000644E 7000                       		moveq	#0,d0
00006450 31C0 FE20                  		move.w	d0,(v_rings).w
00006454 21C0 FE22                  		move.l	d0,(v_time).w
00006458 11C0 FE1B                  		move.b	d0,(v_lifecount).w
0000645C 11C0 FE2C                  		move.b	d0,(v_shield).w
00006460 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006464 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006468 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000646C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006470 31C0 FE02                  		move.w	d0,(f_restart).w
00006474 31C0 FE04                  		move.w	d0,(v_framecount).w
00006478 6100 EEBC                  		bsr.w	OscillateNumInit
0000647C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006482 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006488 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
0000648E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006494 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000649A 6100 D7FC                  		bsr.w	WaitForVBla
0000649E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000064A2 0000 0040                  		ori.b	#$40,d0
000064A6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000064AC 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000064B2 6100 BE00                  		bsr.w	PaletteFadeIn
000064B6                            
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            ; Main ending sequence loop
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            
000064B6                            End_MainLoop:
000064B6 6100 ADF4                  		bsr.w	PauseGame
000064BA 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000064C0 6100 D7D6                  		bsr.w	WaitForVBla
000064C4 5278 FE04                  		addq.w	#1,(v_framecount).w
000064C8 6100 0000                  		bsr.w	End_MoveSonic
000064CC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000064D2 6100 0000                  		bsr.w	DeformLayers
000064D6 4EB9 0000 0000             		jsr	(BuildSprites).l
000064DC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000064E2 6100 B83A                  		bsr.w	PaletteCycle
000064E6 6100 EEA4                  		bsr.w	OscillateNumDo
000064EA 6100 EF30                  		bsr.w	SynchroAnimate
000064EE 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000064F4 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000064F6                            
000064F6 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000064FC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006502 4E75                       		rts	
00006504                            ; ===========================================================================
00006504                            
00006504                            End_ChkEmerald:
00006504 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006508 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
0000650C                            
0000650C 4278 FE02                  		clr.w	(f_restart).w
00006510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006516 4278 F794                  		clr.w	(v_palchgspeed).w
0000651A                            
0000651A                            	End_AllEmlds:
0000651A 6100 AD90                  		bsr.w	PauseGame
0000651E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006524 6100 D772                  		bsr.w	WaitForVBla
00006528 5278 FE04                  		addq.w	#1,(v_framecount).w
0000652C 6100 0000                  		bsr.w	End_MoveSonic
00006530 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006536 6100 0000                  		bsr.w	DeformLayers
0000653A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006540 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006546 6100 EE44                  		bsr.w	OscillateNumDo
0000654A 6100 EED0                  		bsr.w	SynchroAnimate
0000654E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006552 6A00                       		bpl.s	End_SlowFade
00006554 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000655A 6100 BF48                  		bsr.w	WhiteOut_ToWhite
0000655E                            
0000655E                            	End_SlowFade:
0000655E 4A78 FE02                  		tst.w	(f_restart).w
00006562 6700 FFB6                  		beq.w	End_AllEmlds
00006566 4278 FE02                  		clr.w	(f_restart).w
0000656A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006570 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006576 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000657C 47F8 F700                  		lea	(v_screenposx).w,a3
00006580 49F8 A400                  		lea	(v_lvllayout).w,a4
00006584 343C 4000                  		move.w	#$4000,d2
00006588 6100 0000                  		bsr.w	DrawChunks
0000658C 7015                       		moveq	#palid_Ending,d0
0000658E 6100 C074                  		bsr.w	PalLoad1	; load ending palette
00006592 6100 BE44                  		bsr.w	PaletteWhiteIn
00006596 6000 FF1E                  		bra.w	End_MainLoop
0000659A                            
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            ; Subroutine controlling Sonic on the ending sequence
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            
0000659A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000659A                            
0000659A                            
0000659A                            End_MoveSonic:
0000659A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000659E 6600                       		bne.s	End_MoveSon2
000065A0 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000065A6 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000065A8                            
000065A8 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065AC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000065B2 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000065B8 4E75                       		rts	
000065BA                            ; ===========================================================================
000065BA                            
000065BA                            End_MoveSon2:
000065BA 5500                       		subq.b	#2,d0
000065BC 6600                       		bne.s	End_MoveSon3
000065BE 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000065C4 6500                       		blo.s	End_MoveSonExit	; if not, branch
000065C6                            
000065C6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065CA 7000                       		moveq	#0,d0
000065CC 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000065D0 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000065D4 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000065D8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000065DE 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000065E4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000065EA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000065F0 4E75                       		rts	
000065F2                            ; ===========================================================================
000065F2                            
000065F2                            End_MoveSon3:
000065F2 5500                       		subq.b	#2,d0
000065F4 6600                       		bne.s	End_MoveSonExit
000065F6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065FA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006600 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006606 4278 D024                  		clr.w	(v_player+obRoutine).w
0000660A                            
0000660A                            End_MoveSonExit:
0000660A 4E75                       		rts	
0000660C                            ; End of function End_MoveSonic
0000660C                            
0000660C                            ; ===========================================================================
0000660C                            
0000660C                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            ; Object 87 - Sonic on ending sequence
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            
0000660C                            EndSonic:
0000660C 7000                       		moveq	#0,d0
0000660E 1028 0025                  		move.b	ob2ndRout(a0),d0
00006612 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006616 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000661A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006620                            ; ===========================================================================
00006620 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006624 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006628 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000662C 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006630 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006634                            
00006634 =00000030                  eson_time:	equ $30	; time to wait between events
00006634                            ; ===========================================================================
00006634                            
00006634                            ESon_Main:	; Routine 0
00006634 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000663A 6700                       		beq.s	ESon_Main2	; if yes, branch
0000663C 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006642 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006648 4E75                       		rts	
0000664A                            ; ===========================================================================
0000664A                            
0000664A                            ESon_Main2:
0000664A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000664E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006656 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000665C 117C 0004 0001             		move.b	#4,obRender(a0)
00006662 4228 0022                  		clr.b	obStatus(a0)
00006666 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000666C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006672 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006678                            
00006678                            ESon_MakeEmeralds:
00006678                            		; Routine 2
00006678 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000667C 6600                       		bne.s	ESon_Wait
0000667E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006682 317C 0001 001C             		move.w	#1,obAnim(a0)
00006688 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000668E                            
0000668E                            	ESon_Wait:
0000668E 4E75                       		rts	
00006690                            ; ===========================================================================
00006690                            
00006690                            Obj87_LookUp:	; Routine 6
00006690 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006698 6600                       		bne.s	locret_5480
0000669A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
000066A0 317C 005A 0030             		move.w	#90,eson_time(a0)
000066A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066AA                            
000066AA                            locret_5480:
000066AA 4E75                       		rts	
000066AC                            ; ===========================================================================
000066AC                            
000066AC                            Obj87_ClrObjRam:
000066AC                            		; Routine 8
000066AC 5368 0030                  		subq.w	#1,eson_time(a0)
000066B0 6600                       		bne.s	ESon_Wait2
000066B2 43F8 D400                  		lea	(v_objspace+$400).w,a1
000066B6 323C 00FF                  		move.w	#$FF,d1
000066BA                            
000066BA                            Obj87_ClrLoop:
000066BA 4299                       		clr.l	(a1)+
000066BC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000066C0 31FC 0001 FE02             		move.w	#1,(f_restart).w
000066C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066CA 117C 0001 001C             		move.b	#1,obAnim(a0)
000066D0 317C 003C 0030             		move.w	#60,eson_time(a0)
000066D6                            
000066D6                            ESon_Wait2:
000066D6 4E75                       		rts	
000066D8                            ; ===========================================================================
000066D8                            
000066D8                            Obj87_MakeLogo:	; Routine $C
000066D8 5368 0030                  		subq.w	#1,eson_time(a0)
000066DC 6600                       		bne.s	ESon_Wait3
000066DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066E2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000066E8 117C 0002 001C             		move.b	#2,obAnim(a0)
000066EE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000066F4                            
000066F4                            ESon_Wait3:
000066F4 4E75                       		rts	
000066F6                            ; ===========================================================================
000066F6                            
000066F6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000066F6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000066FC 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006702                            ; ===========================================================================
00006702                            
00006702                            Obj87_Leap:	; Routine $10
00006702 5368 0030                  		subq.w	#1,eson_time(a0)
00006706 6600                       		bne.s	ESon_Wait4
00006708 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000670C 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006714 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000671A 117C 0004 0001             		move.b	#4,obRender(a0)
00006720 4228 0022                  		clr.b	obStatus(a0)
00006724 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000672A 117C 0005 001A             		move.b	#5,obFrame(a0)
00006730 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006736 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000673C 60B8                       		bra.s	Obj87_Animate
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            ESon_Wait4:
0000673E 4E75                       		rts	
0000673E 4E75                       		rts	
00006740                            		include "_anim\Ending Sequence Sonic.asm"
00006740                            ; ---------------------------------------------------------------------------
00006740                            ; Animation script - Sonic on the ending sequence
00006740                            ; ---------------------------------------------------------------------------
00006740 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006742 0000                       		dc.w byte_552A-AniScript_ESon
00006744 0000                       		dc.w byte_5534-AniScript_ESon
00006746 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006754 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000675E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006766                            		even
00006766                            		even
00006766                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006766                            ; ---------------------------------------------------------------------------
00006766                            ; Object 88 - chaos emeralds on	the ending sequence
00006766                            ; ---------------------------------------------------------------------------
00006766                            
00006766                            EndChaos:
00006766 7000                       		moveq	#0,d0
00006768 1028 0024                  		move.b	obRoutine(a0),d0
0000676C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006770 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006774 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000677A                            ; ===========================================================================
0000677A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000677C 0000                       		dc.w ECha_Move-ECha_Index
0000677E                            
0000677E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000677E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000677E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000677E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000677E                            ; ===========================================================================
0000677E                            
0000677E                            ECha_Main:	; Routine 0
0000677E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006784 6700                       		beq.s	ECha_CreateEms
00006786 588F                       		addq.l	#4,sp
00006788 4E75                       		rts	
0000678A                            ; ===========================================================================
0000678A                            
0000678A                            ECha_CreateEms:
0000678A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006790 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006796 2248                       		movea.l	a0,a1
00006798 7600                       		moveq	#0,d3
0000679A 7401                       		moveq	#1,d2
0000679C 7205                       		moveq	#5,d1
0000679E                            
0000679E                            	ECha_LoadLoop:
0000679E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000067A2 5429 0024                  		addq.b	#2,obRoutine(a1)
000067A6 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
000067AE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000067B4 137C 0004 0001             		move.b	#4,obRender(a1)
000067BA 337C 0080 0018             		move.w	#$80,obPriority(a1)
000067C0 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000067C6 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000067CC 1342 001C                  		move.b	d2,obAnim(a1)
000067D0 1342 001A                  		move.b	d2,obFrame(a1)
000067D4 5202                       		addq.b	#1,d2
000067D6 1343 0026                  		move.b	d3,obAngle(a1)
000067DA 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000067DE 43E9 0040                  		lea	$40(a1),a1
000067E2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000067E6                            
000067E6                            ECha_Move:	; Routine 2
000067E6 3028 003E                  		move.w	echa_angle(a0),d0
000067EA D168 0026                  		add.w	d0,obAngle(a0)
000067EE 1028 0026                  		move.b	obAngle(a0),d0
000067F2 4EB9 0000 3CCA             		jsr	(CalcSine).l
000067F8 7800                       		moveq	#0,d4
000067FA 1828 003C                  		move.b	echa_radius(a0),d4
000067FE C3C4                       		muls.w	d4,d1
00006800 E081                       		asr.l	#8,d1
00006802 C1C4                       		muls.w	d4,d0
00006804 E080                       		asr.l	#8,d0
00006806 D268 0038                  		add.w	echa_origX(a0),d1
0000680A D068 003A                  		add.w	echa_origY(a0),d0
0000680E 3141 0008                  		move.w	d1,obX(a0)
00006812 3140 000C                  		move.w	d0,obY(a0)
00006816                            
00006816                            	ECha_Expand:
00006816 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000681C 6700                       		beq.s	ECha_Rotate
0000681E 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006824                            
00006824                            	ECha_Rotate:
00006824 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000682A 6700                       		beq.s	ECha_Rise
0000682C 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006832                            
00006832                            	ECha_Rise:
00006832 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006838 6700                       		beq.s	ECha_End
0000683A 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000683E                            
0000683E                            ECha_End:
0000683E 4E75                       		rts	
0000683E 4E75                       		rts	
00006840                            		include	"_incObj\89 Ending Sequence STH.asm"
00006840                            ; ---------------------------------------------------------------------------
00006840                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006840                            ; ---------------------------------------------------------------------------
00006840                            
00006840                            EndSTH:
00006840 7000                       		moveq	#0,d0
00006842 1028 0024                  		move.b	$24(a0),d0
00006846 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000684A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000684E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006854                            ; ===========================================================================
00006854 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006856 0000                       		dc.w ESth_Move-ESth_Index
00006858 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000685A                            
0000685A =00000030                  esth_time:	equ $30		; time until exit
0000685A                            ; ===========================================================================
0000685A                            
0000685A                            ESth_Main:	; Routine 0
0000685A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000685E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006864 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000686A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006872 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006878 117C 0000 0001             		move.b	#0,obRender(a0)
0000687E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006884                            
00006884                            ESth_Move:	; Routine 2
00006884 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000688A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000688C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006892 4E75                       		rts
00006894                            
00006894                            ESth_Delay:
00006894 5428 0024                  		addq.b	#2,obRoutine(a0)
00006898 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000689E                            
0000689E                            ESth_GotoCredits:
0000689E                            		; Routine 4
0000689E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000068A2 6A00                       		bpl.s	ESth_Wait
000068A4 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000068AA                            
000068AA                            	ESth_Wait:
000068AA 4E75                       		rts
000068AC                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            
000068AC                            SME_6jV7R:	
000068AC 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
000068B0 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
000068B4 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
000068B8 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
000068BC 02                         SME_6jV7R_10:	dc.b 2	
000068BD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068C2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068C7 03                         SME_6jV7R_1B:	dc.b 3	
000068C8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
000068CD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068D2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068D7 02                         SME_6jV7R_2B:	dc.b 2	
000068D8 EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
000068DD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
000068E2 04                         SME_6jV7R_36:	dc.b 4	
000068E3 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068E8 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000068ED E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000068F2 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000068F7 04                         SME_6jV7R_4B:	dc.b 4	
000068F8 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068FD EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006902 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
00006907 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
0000690C 03                         SME_6jV7R_60:	dc.b 3	
0000690D EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
00006912 EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
00006917 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
0000691C 07                         SME_6jV7R_70:	dc.b 7	
0000691D B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
00006922 BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
00006927 BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
0000692C CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
00006931 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
00006936 E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
0000693B EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
00006940 18                         SME_6jV7R_94:	dc.b $18	
00006941 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
00006946 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
0000694B 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
00006950 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
00006955 A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
0000695A 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
0000695F 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
00006964 A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
00006969 B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
0000696E B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
00006973 A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
00006978 C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
0000697D C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
00006982 B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
00006987 B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
0000698C D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
00006991 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
00006996 D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
0000699B E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
000069A0 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
000069A5 D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
000069AA E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
000069AF F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
000069B4 F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
000069BA 00                         		even
000069BA 00                         		even
000069BA                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            
000069BA                            SME_0ZTmS:	
000069BA 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000069BE 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000069C2 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000069C6 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000069C8 01                         SME_0ZTmS_E:	dc.b 1	
000069C9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000069CE 01                         SME_0ZTmS_14:	dc.b 1	
000069CF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000069D4 01                         SME_0ZTmS_1A:	dc.b 1	
000069D5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000069DA 01                         SME_0ZTmS_20:	dc.b 1	
000069DB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000069E0 01                         SME_0ZTmS_26:	dc.b 1	
000069E1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000069E6 01                         SME_0ZTmS_2C:	dc.b 1	
000069E7 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000069EC 01                         SME_0ZTmS_32:	dc.b 1	
000069ED F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000069F2                            		even
000069F2                            		even
000069F2                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            
000069F2                            SME_WuUDZ:	
000069F2 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
000069F4 03                         SME_WuUDZ_2:	dc.b 3	
000069F5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
000069FA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
000069FF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
00006A04                            		even
00006A04                            		even
00006A04                            
00006A04                            ; ===========================================================================
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            ; Credits ending sequence
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            
00006A04                            GM_Credits:
00006A04                            		
00006A04 6100 AD92                  		bsr.w	ClearPLC
00006A08 6100 B950                  		bsr.w	PaletteFadeOut
00006A0C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006A12 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006A16 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006A1A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006A1E 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006A22 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006A26 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006A2A 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006A2E 4238 F64E                  		clr.b	(f_wtr_state).w
00006A32 6100 A79C                  		bsr.w	ClearScreen
00006A36                            
00006A36 43F8 D000                  		lea	(v_objspace).w,a1
00006A3A 7000                       		moveq	#0,d0
00006A3C 323C 07FF                  		move.w	#$7FF,d1
00006A40                            	TryAg_ClrObjRam:
00006A40 22C0                       		move.l	d0,(a1)+
00006A42 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006A46                            
00006A46 7000                       		moveq	#plcid_TryAgain,d0
00006A48 6100 AE5C                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006A4C                            
00006A4C 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006A50 7000                       		moveq	#0,d0
00006A52 323C 001F                  		move.w	#$1F,d1
00006A56                            	TryAg_ClrPal:
00006A56 22C0                       		move.l	d0,(a1)+
00006A58 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006A5C                            
00006A5C 7015                       		moveq	#palid_Ending,d0
00006A5E 6100 BBA4                  		bsr.w	PalLoad1	; load ending palette
00006A62 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006A66 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006A6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A72 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A78 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006A7E 6100 B834                  		bsr.w	PaletteFadeIn
00006A82                            
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            ; "TRY AGAIN" and "END"	screen main loop
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            TryAg_MainLoop:
00006A82 6100 A828                  		bsr.w	PauseGame
00006A86 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006A8C 6100 D20A                  		bsr.w	WaitForVBla
00006A90 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A96 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A9C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006AA2 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006AA4 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006AA8 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006AAA 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006AB0 67D0                       		beq.s	TryAg_MainLoop
00006AB2                            
00006AB2                            TryAg_Exit:
00006AB2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006AB8 4E75                       		rts	
00006ABA                            
00006ABA                            ; ===========================================================================
00006ABA                            
00006ABA                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            
00006ABA                            EndEggman:
00006ABA 7000                       		moveq	#0,d0
00006ABC 1028 0024                  		move.b	obRoutine(a0),d0
00006AC0 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006AC4 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006AC8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006ACE                            ; ===========================================================================
00006ACE 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006AD0 0000                       		dc.w EEgg_Animate-EEgg_Index
00006AD2 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006AD4 0000                       		dc.w EEgg_Wait-EEgg_Index
00006AD6                            
00006AD6 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006AD6                            ; ===========================================================================
00006AD6                            
00006AD6                            EEgg_Main:	; Routine 0
00006AD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00006ADA 317C 0120 0008             		move.w	#$120,obX(a0)
00006AE0 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006AE6 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006AEE 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006AF4 117C 0000 0001             		move.b	#0,obRender(a0)
00006AFA 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006B00 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006B06 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006B0C 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006B0E                            
00006B0E 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006B14 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006B1A 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006B20 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006B26                            
00006B26                            EEgg_Animate:	; Routine 2
00006B26 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006B2C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006B32                            ; ===========================================================================
00006B32                            
00006B32                            EEgg_Juggle:	; Routine 4
00006B32 5428 0024                  		addq.b	#2,obRoutine(a0)
00006B36 7002                       		moveq	#2,d0
00006B38 0828 0000 001C             		btst	#0,obAnim(a0)
00006B3E 6700                       		beq.s	@noflip
00006B40 4440                       		neg.w	d0
00006B42                            
00006B42                            	@noflip:
00006B42 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006B46 7205                       		moveq	#5,d1
00006B48                            
00006B48                            @emeraldloop:
00006B48 1340 003E                  		move.b	d0,$3E(a1)
00006B4C 3400                       		move.w	d0,d2
00006B4E E742                       		asl.w	#3,d2
00006B50 D529 0026                  		add.b	d2,obAngle(a1)
00006B54 43E9 0040                  		lea	$40(a1),a1
00006B58 51C9 FFEE                  		dbf	d1,@emeraldloop
00006B5C 5228 001A                  		addq.b	#1,obFrame(a0)
00006B60 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006B66                            
00006B66                            EEgg_Wait:	; Routine 6
00006B66 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006B6A 6A00                       		bpl.s	@nochg		; branch if time remains
00006B6C 0868 0000 001C             		bchg	#0,obAnim(a0)
00006B72 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006B78                            
00006B78                            	@nochg:
00006B78 4E75                       		rts	
00006B78 4E75                       		rts	
00006B7A                            		include "_anim\Try Again & End Eggman.asm"
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006B7C 0000                       		dc.w @tryagain2-Ani_EEgg
00006B7E 0000                       		dc.w @end-Ani_EEgg
00006B80 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006B84 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006B88 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006B9A                            		even
00006B9A                            		even
00006B9A                            		include	"_incObj\8C Try Again Emeralds.asm"
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            
00006B9A                            TryChaos:
00006B9A 7000                       		moveq	#0,d0
00006B9C 1028 0024                  		move.b	obRoutine(a0),d0
00006BA0 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006BA4 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006BA8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006BAE                            ; ===========================================================================
00006BAE 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006BB0 0000                       		dc.w TCha_Move-TCha_Index
00006BB2                            ; ===========================================================================
00006BB2                            
00006BB2                            TCha_Main:	; Routine 0
00006BB2 2248                       		movea.l	a0,a1
00006BB4 7400                       		moveq	#0,d2
00006BB6 7600                       		moveq	#0,d3
00006BB8 7205                       		moveq	#5,d1
00006BBA 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006BBE                            
00006BBE                            @makeemerald:
00006BBE 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006BC2 5429 0024                  		addq.b	#2,obRoutine(a1)
00006BC6 237C 0000 69BA 0004        		move.l	#Map_ECha,obMap(a1)
00006BCE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006BD4 137C 0000 0001             		move.b	#0,obRender(a1)
00006BDA 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006BE0 337C 0104 0008             		move.w	#$104,obX(a1)
00006BE6 337C 0120 0038             		move.w	#$120,$38(a1)
00006BEC 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006BF2 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006BF8 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006BFE 47F8 FE58                  		lea	(v_emldlist).w,a3
00006C02                            
00006C02                            	@chkemerald:
00006C02 7000                       		moveq	#0,d0
00006C04 1038 FE57                  		move.b	(v_emeralds).w,d0
00006C08 5340                       		subq.w	#1,d0
00006C0A 6500                       		bcs.s	@loc_5B42
00006C0C                            
00006C0C                            	@chkloop:
00006C0C B433 0000                  		cmp.b	(a3,d0.w),d2
00006C10 6600                       		bne.s	@notgot
00006C12 5202                       		addq.b	#1,d2
00006C14 60EC                       		bra.s	@chkemerald
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            	@notgot:
00006C16 51C8 FFF4                  		dbf	d0,@chkloop
00006C1A                            
00006C1A                            @loc_5B42:
00006C1A 1342 001A                  		move.b	d2,obFrame(a1)
00006C1E 5229 001A                  		addq.b	#1,obFrame(a1)
00006C22 5202                       		addq.b	#1,d2
00006C24 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006C2A 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006C2E 1343 001F                  		move.b	d3,obDelayAni(a1)
00006C32 0643 000A                  		addi.w	#10,d3
00006C36 43E9 0040                  		lea	$40(a1),a1
00006C3A 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006C3E                            
00006C3E                            TCha_Move:	; Routine 2
00006C3E 4A68 003E                  		tst.w	$3E(a0)
00006C42 6700                       		beq.s	locret_5BBA
00006C44 4A28 001E                  		tst.b	obTimeFrame(a0)
00006C48 6700                       		beq.s	loc_5B78
00006C4A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006C4E 6600                       		bne.s	loc_5B80
00006C50                            
00006C50                            loc_5B78:
00006C50 3028 003E                  		move.w	$3E(a0),d0
00006C54 D168 0026                  		add.w	d0,obAngle(a0)
00006C58                            
00006C58                            loc_5B80:
00006C58 1028 0026                  		move.b	obAngle(a0),d0
00006C5C 6700                       		beq.s	loc_5B8C
00006C5E 0C00 0080                  		cmpi.b	#$80,d0
00006C62 6600                       		bne.s	loc_5B96
00006C64                            
00006C64                            loc_5B8C:
00006C64 4268 003E                  		clr.w	$3E(a0)
00006C68 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006C6E                            
00006C6E                            loc_5B96:
00006C6E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00006C74 7800                       		moveq	#0,d4
00006C76 1828 003C                  		move.b	$3C(a0),d4
00006C7A C3C4                       		muls.w	d4,d1
00006C7C E081                       		asr.l	#8,d1
00006C7E C1C4                       		muls.w	d4,d0
00006C80 E080                       		asr.l	#8,d0
00006C82 D268 0038                  		add.w	$38(a0),d1
00006C86 D068 003A                  		add.w	$3A(a0),d0
00006C8A 3141 0008                  		move.w	d1,obX(a0)
00006C8E 3140 000A                  		move.w	d0,obScreenY(a0)
00006C92                            
00006C92                            locret_5BBA:
00006C92 4E75                       		rts	
00006C92 4E75                       		rts	
00006C94                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            Map_EEgg_internal:
00006C94 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006C96 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006C98 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006C9A 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006C9C 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006C9E 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006CA0 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006CA2 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006CA4 08                         M_EEgg_Try1:	dc.b 8
00006CA5 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006CAA F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006CAF E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006CB4 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006CB9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006CBE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006CC3 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CC8 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CCD 08                         M_EEgg_Try2:	dc.b 8
00006CCE E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006CD3 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006CD8 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006CDD F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006CE2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006CE7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006CEC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CF1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CF6 08                         M_EEgg_Try3:	dc.b 8
00006CF7 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006CFC F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006D01 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006D06 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006D0B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D10 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D15 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D1A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D1F 08                         M_EEgg_Try4:	dc.b 8
00006D20 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006D25 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006D2A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006D2F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006D34 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006D39 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006D3E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D43 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D48 0C                         M_EEgg_End1:	dc.b $C
00006D49 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006D4E F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006D53 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006D58 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006D5D ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006D62 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006D67 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006D6C 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006D71 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006D76 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006D7B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006D80 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D85 0A                         M_EEgg_End2:	dc.b $A
00006D86 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006D8B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006D90 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006D95 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006D9A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006D9F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006DA4 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DA9 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DAE 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006DB3 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006DB8 0A                         M_EEgg_End3:	dc.b $A
00006DB9 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006DBE E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006DC3 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006DC8 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006DCD E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006DD2 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006DD7 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DDC 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DE1 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006DE6 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006DEB 0C                         M_EEgg_End4:	dc.b $C
00006DEC F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006DF1 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006DF6 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006DFB 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006E00 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006E05 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006E0A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006E0F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006E14 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006E19 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006E1E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006E23 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006E28                            		even
00006E28                            		even
00006E28                            
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            ; Ending sequence demos
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006E56                            		even
00006E56                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006E96                            		even
00006E96                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006EC6                            		even
00006EC6                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006EF6                            		even
00006EF6                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006F16                            		even
00006F16                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006F36                            		even
00006F36                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006F66                            		even
00006F66                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006F96                            		even
00006F96                            
00006F96                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            ; Subroutine to	load level boundaries and start	locations
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            
00006F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F96                            
00006F96                            
00006F96                            LevelSizeLoad:
00006F96 7000                       		moveq	#0,d0
00006F98 11C0 F740                  		move.b	d0,($FFFFF740).w
00006F9C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006FA0 11C0 F746                  		move.b	d0,($FFFFF746).w
00006FA4 11C0 F748                  		move.b	d0,($FFFFF748).w
00006FA8 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006FAC 3038 FE10                  		move.w	(v_zone).w,d0
00006FB0 ED08                       		lsl.b	#6,d0
00006FB2 E848                       		lsr.w	#4,d0
00006FB4 3200                       		move.w	d0,d1
00006FB6 D040                       		add.w	d0,d0
00006FB8 D041                       		add.w	d1,d0
00006FBA 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006FBE 3018                       		move.w	(a0)+,d0
00006FC0 31C0 F730                  		move.w	d0,($FFFFF730).w
00006FC4 2018                       		move.l	(a0)+,d0
00006FC6 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006FCA 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006FCE 2018                       		move.l	(a0)+,d0
00006FD0 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006FD4 21C0 F724                  		move.l	d0,(v_limittop1).w
00006FD8 3038 F728                  		move.w	(v_limitleft2).w,d0
00006FDC 0640 0240                  		addi.w	#$240,d0
00006FE0 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006FE4 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006FEA 3018                       		move.w	(a0)+,d0
00006FEC 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006FF0 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006FF6 6000 0000                  		bra.w	LevSz_ChkLamp
00006FFA                            
00006FFA                            ; ===========================================================================
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            ; Level size array
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            LevelSizeArray:
00006FFA                            		; GHZ
00006FFA 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00007006 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00007012 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
0000701E 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
0000702A                            		; LZ
0000702A 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00007036 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00007042 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
0000704E 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
0000705A                            		; MZ
0000705A 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00007066 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
00007072 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
0000707E 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
0000708A                            		; SLZ
0000708A 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00007096 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
000070A2 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
000070AE 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
000070BA                            		; SYZ
000070BA 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
000070C6 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
000070D2 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
000070DE 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
000070EA                            		; SBZ
000070EA 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
000070F6 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00007102 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
0000710E 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000711A                            		; Ending
0000711A 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00007126 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00007132 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000713E 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000714A                            
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            EndingStLocArray:
0000714A                            		include	"_inc\Start Location Array - Ending.asm"
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            
0000714A                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
0000714E                            		incbin	"startpos\mz2 (Credits demo).bin"
00007152                            		incbin	"startpos\syz3 (Credits demo).bin"
00007156                            		incbin	"startpos\lz3 (Credits demo).bin"
0000715A                            		incbin	"startpos\slz3 (Credits demo).bin"
0000715E                            		incbin	"startpos\sbz1 (Credits demo).bin"
00007162                            		incbin	"startpos\sbz2 (Credits demo).bin"
00007166                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
0000716A                            		even
0000716A                            		even
0000716A                            
0000716A                            ; ===========================================================================
0000716A                            
0000716A                            LevSz_ChkLamp:
0000716A 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
0000716E 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007170                            
00007170 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00007176 3238 D008                  		move.w	(v_player+obX).w,d1
0000717A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000717E 6000                       		bra.s	LevSz_SkipStartPos
00007180                            ; ===========================================================================
00007180                            
00007180                            LevSz_StartLoc:
00007180 3038 FE10                  		move.w	(v_zone).w,d0
00007184 ED08                       		lsl.b	#6,d0
00007186 E848                       		lsr.w	#4,d0
00007188 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000718C 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00007190 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007192                            
00007192 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00007196 5340                       		subq.w	#1,d0
00007198 E548                       		lsl.w	#2,d0
0000719A 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000719E                            
0000719E                            LevSz_SonicPos:
0000719E 7200                       		moveq	#0,d1
000071A0 3219                       		move.w	(a1)+,d1
000071A2 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
000071A6 7000                       		moveq	#0,d0
000071A8 3011                       		move.w	(a1),d0
000071AA 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
000071AE                            
000071AE                            SetScreen:
000071AE                            	LevSz_SkipStartPos:
000071AE 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
000071B2 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
000071B6 743F                       		moveq #63,d2 ; begin a 64-step loop 
000071B8                            @looppoint: 
000071B8 34C1                       		move.w d1,(a2)+ ; fill in X 
000071BA 34C0                       		move.w d0,(a2)+ ; fill in Y 
000071BC 51CA FFFA                  		dbf d2,@looppoint ; loop	
000071C0 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
000071C4 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
000071C6 7200                       		moveq	#0,d1
000071C8                            
000071C8                            	SetScr_WithinLeft:
000071C8 3438 F72A                  		move.w	(v_limitright2).w,d2
000071CC B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000071CE 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000071D0 3202                       		move.w	d2,d1
000071D2                            
000071D2                            	SetScr_WithinRight:
000071D2 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
000071D6                            
000071D6 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
000071DA 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
000071DC 7000                       		moveq	#0,d0
000071DE                            
000071DE                            	SetScr_WithinTop:
000071DE B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
000071E2 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
000071E4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000071E8                            
000071E8                            	SetScr_WithinBottom:
000071E8 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
000071EC 6100 0000                  		bsr.w	BgScrollSpeed
000071F0 7000                       		moveq	#0,d0
000071F2 1038 FE10                  		move.b	(v_zone).w,d0
000071F6 E508                       		lsl.b	#2,d0
000071F8 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
000071FE 4E75                       		rts
00007200                            ; ===========================================================================
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            
00007200                            		incbin	"startpos\ghz1.bin"
00007204                            		incbin	"startpos\ghz2.bin"
00007208                            		incbin	"startpos\ghz3.bin"
0000720C 0080 00A8                  		dc.w	$80,$A8
00007210                            
00007210                            		incbin	"startpos\lz1.bin"
00007214                            		incbin	"startpos\lz2.bin"
00007218                            		incbin	"startpos\lz3.bin"
0000721C                            		incbin	"startpos\sbz3.bin"
00007220                            
00007220                            		incbin	"startpos\mz1.bin"
00007224                            		incbin	"startpos\mz2.bin"
00007228                            		incbin	"startpos\mz3.bin"
0000722C 0080 00A8                  		dc.w	$80,$A8
00007230                            
00007230                            		incbin	"startpos\slz1.bin"
00007234                            		incbin	"startpos\slz2.bin"
00007238                            		incbin	"startpos\slz3.bin"
0000723C 0080 00A8                  		dc.w	$80,$A8
00007240                            
00007240                            		incbin	"startpos\syz1.bin"
00007244                            		incbin	"startpos\syz2.bin"
00007248                            		incbin	"startpos\syz3.bin"
0000724C 0080 00A8                  		dc.w	$80,$A8
00007250                            
00007250                            		incbin	"startpos\sbz1.bin"
00007254                            		incbin	"startpos\sbz2.bin"
00007258                            		incbin	"startpos\fz.bin"
0000725C 0080 00A8                  		dc.w	$80,$A8
00007260                            
00007260                            
00007260                            		incbin	"startpos\end1.bin"
00007264                            		incbin	"startpos\end2.bin"
00007268 0080 00A8                  		dc.w	$80,$A8
0000726C 0080 00A8                  		dc.w	$80,$A8
00007270                            
00007270                            		even
00007270                            		even
00007270                            
00007270                            ; ---------------------------------------------------------------------------
00007270                            ; Which	256x256	tiles contain loops or roll-tunnels
00007270                            ; ---------------------------------------------------------------------------
00007270                            
00007270                            LoopTileNums:
00007270                            
00007270                            ; 		loop	loop	tunnel	tunnel
00007270                            
00007270 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007274 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007278 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
0000727C AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007280 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007284 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007288 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
0000728C                            
0000728C                            		even
0000728C                            
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            ; Subroutine to	set scroll speed of some backgrounds
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            
0000728C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728C                            
0000728C                            
0000728C                            BgScrollSpeed:
0000728C 4A38 FE30                  		tst.b	(v_lastlamp).w
00007290 6600                       		bne.s	loc_6206
00007292 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007296 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000729A 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000729E 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000072A2 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000072A6                            
000072A6                            loc_6206:
000072A6 7400                       		moveq	#0,d2
000072A8 1438 FE10                  		move.b	(v_zone).w,d2
000072AC D442                       		add.w	d2,d2
000072AE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000072B2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000072B6                            ; End of function BgScrollSpeed
000072B6                            
000072B6                            ; ===========================================================================
000072B6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000072BA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000072BE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000072C2 0000                       		dc.w BgScroll_End-BgScroll_Index
000072C4                            ; ===========================================================================
000072C4                            
000072C4                            BgScroll_GHZ:
000072C4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072C8 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000072CC 42B8 F714                  		clr.l	(v_bg2screenposy).w
000072D0 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000072D4 45F8 A800                  		lea	($FFFFA800).w,a2
000072D8 429A                       		clr.l	(a2)+
000072DA 429A                       		clr.l	(a2)+
000072DC 429A                       		clr.l	(a2)+
000072DE 4E75                       		rts
000072E0                            ; ===========================================================================
000072E0                            
000072E0                            BgScroll_LZ:
000072E0 E280                       		asr.l	#1,d0
000072E2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072E6 4E75                       		rts	
000072E8                            ; ===========================================================================
000072E8                            
000072E8                            BgScroll_MZ:
000072E8 4E75                       		rts	
000072EA                            ; ===========================================================================
000072EA                            
000072EA                            BgScroll_SLZ:
000072EA E280                       		asr.l	#1,d0
000072EC 0640 00C0                  		addi.w	#$C0,d0
000072F0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072F4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072F8 4E75                       		rts	
000072FA                            ; ===========================================================================
000072FA                            
000072FA                            BgScroll_SYZ:
000072FA E980                       		asl.l	#4,d0
000072FC 2400                       		move.l	d0,d2
000072FE E380                       		asl.l	#1,d0
00007300 D082                       		add.l	d2,d0
00007302 E080                       		asr.l	#8,d0
00007304 5240                       		addq.w	#1,d0
00007306 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000730A 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000730E 4E75                       		rts	
00007310                            ; ===========================================================================
00007310                            
00007310                            BgScroll_SBZ:
00007310 0240 07F8                  		andi.w	#$7F8,d0
00007314 E640                       		asr.w	#3,d0
00007316 5240                       		addq.w	#1,d0
00007318 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000731C 4E75                       		rts	
0000731E                            ; ===========================================================================
0000731E                            
0000731E                            BgScroll_End:
0000731E 3038 F700                  		move.w	(v_screenposx).w,d0
00007322 E240                       		asr.w	#1,d0
00007324 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007328 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
0000732C E440                       		asr.w	#2,d0
0000732E 3200                       		move.w	d0,d1
00007330 D040                       		add.w	d0,d0
00007332 D041                       		add.w	d1,d0
00007334 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007338 42B8 F70C                  		clr.l	(v_bgscreenposy).w
0000733C 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007340 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007344 45F8 A800                  		lea	($FFFFA800).w,a2
00007348 429A                       		clr.l	(a2)+
0000734A 429A                       		clr.l	(a2)+
0000734C 429A                       		clr.l	(a2)+
0000734E 4E75                       		rts
0000734E 4E75                       		rts
00007350                            		include	"_inc\DeformLayers (JP1).asm"
00007350                            ; ---------------------------------------------------------------------------
00007350                            ; Background layer deformation subroutines
00007350                            ; ---------------------------------------------------------------------------
00007350                            
00007350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007350                            
00007350                            
00007350                            DeformLayers:
00007350 4A38 F744                  		tst.b	(f_nobgscroll).w
00007354 6700                       		beq.s	@bgscroll
00007356 4E75                       		rts	
00007358                            ; ===========================================================================
00007358                            
00007358                            	@bgscroll:
00007358 4278 F754                  		clr.w	(v_fg_scroll_flags).w
0000735C 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007360 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007364 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007368 6100 0000                  		bsr.w	ScrollHoriz
0000736C 6100 0000                  		bsr.w	ScrollVertical
00007370 6100 0000                  		bsr.w	DynamicLevelEvents
00007374 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
0000737A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007380 7000                       		moveq	#0,d0
00007382 1038 FE10                  		move.b	(v_zone).w,d0
00007386 D040                       		add.w	d0,d0
00007388 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000738C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007390                            ; End of function DeformLayers
00007390                            
00007390                            ; ===========================================================================
00007390                            ; ---------------------------------------------------------------------------
00007390                            ; Offset index for background layer deformation	code
00007390                            ; ---------------------------------------------------------------------------
00007390 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007394 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007398 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000739C 0000                       		dc.w Deform_GHZ-Deform_Index
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            ; Green	Hill Zone background layer deformation code
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            
0000739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000739E                            
0000739E                            
0000739E                            Deform_GHZ:
0000739E                            	;cmpi.b    #id_Title,(v_gamemode).w
0000739E                            	;beq.w    Deform_Title
0000739E                            
0000739E                            ;Deform_GHZ_Stage:
0000739E                            	; block 3 - distant mountains
0000739E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073A2 48C4                       		ext.l	d4
000073A4 EB84                       		asl.l	#5,d4
000073A6 2204                       		move.l	d4,d1
000073A8 E384                       		asl.l	#1,d4
000073AA D881                       		add.l	d1,d4
000073AC 7C00                       		moveq	#0,d6
000073AE 6100 0000                  		bsr.w	BGScroll_Block3
000073B2                            	; block 2 - hills & waterfalls
000073B2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073B6 48C4                       		ext.l	d4
000073B8 EF84                       		asl.l	#7,d4
000073BA 7C00                       		moveq	#0,d6
000073BC 6100 0000                  		bsr.w	BGScroll_Block2
000073C0                            	; calculate Y position
000073C0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000073C4 3038 F704                  		move.w	(v_screenposy).w,d0
000073C8 0240 07FF                  		andi.w	#$7FF,d0
000073CC EA48                       		lsr.w	#5,d0
000073CE 4440                       		neg.w	d0
000073D0 0640 0020                  		addi.w	#$20,d0
000073D4 6A00                       		bpl.s	@limitY
000073D6 7000                       		moveq	#0,d0
000073D8                            	@limitY:
000073D8 3800                       		move.w	d0,d4
000073DA 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000073DE 3038 F700                  		move.w	(v_screenposx).w,d0
000073E2 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000073E8 6600                       		bne.s	@notTitle
000073EA 7000                       		moveq	#0,d0	; reset foreground position in title screen
000073EC                            	@notTitle:
000073EC 4440                       		neg.w	d0
000073EE 4840                       		swap	d0
000073F0                            	; auto-scroll clouds
000073F0 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000073F4 069A 0001 0000             		addi.l	#$10000,(a2)+
000073FA 069A 0000 C000             		addi.l	#$C000,(a2)+
00007400 069A 0000 8000             		addi.l	#$8000,(a2)+
00007406                            	; calculate background scroll	
00007406 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
0000740A D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000740E 4440                       		neg.w	d0
00007410 323C 001F                  		move.w	#$1F,d1
00007414 9244                       		sub.w	d4,d1
00007416 6500                       		bcs.s	@gotoCloud2
00007418                            	@cloudLoop1:		; upper cloud (32px)
00007418 22C0                       		move.l	d0,(a1)+
0000741A 51C9 FFFC                  		dbf	d1,@cloudLoop1
0000741E                            
0000741E                            	@gotoCloud2:
0000741E 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007422 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007426 4440                       		neg.w	d0
00007428 323C 000F                  		move.w	#$F,d1
0000742C                            	@cloudLoop2:		; middle cloud (16px)
0000742C 22C0                       		move.l	d0,(a1)+
0000742E 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007432                            
00007432 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007436 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000743A 4440                       		neg.w	d0
0000743C 323C 000F                  		move.w	#$F,d1
00007440                            	@cloudLoop3:		; lower cloud (16px)
00007440 22C0                       		move.l	d0,(a1)+
00007442 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007446                            
00007446 323C 002F                  		move.w	#$2F,d1
0000744A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000744E 4440                       		neg.w	d0
00007450                            	@mountainLoop:		; distant mountains (48px)
00007450 22C0                       		move.l	d0,(a1)+
00007452 51C9 FFFC                  		dbf	d1,@mountainLoop
00007456                            
00007456 323C 0027                  		move.w	#$27,d1
0000745A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000745E 4440                       		neg.w	d0
00007460                            	@hillLoop:			; hills & waterfalls (40px)
00007460 22C0                       		move.l	d0,(a1)+
00007462 51C9 FFFC                  		dbf	d1,@hillLoop
00007466                            
00007466 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000746A 3438 F700                  		move.w	(v_screenposx).w,d2
0000746E 9440                       		sub.w	d0,d2
00007470 48C2                       		ext.l	d2
00007472 E182                       		asl.l	#8,d2
00007474 85FC 0068                  		divs.w	#$68,d2
00007478 48C2                       		ext.l	d2
0000747A E182                       		asl.l	#8,d2
0000747C 7600                       		moveq	#0,d3
0000747E 3600                       		move.w	d0,d3
00007480 323C 0047                  		move.w	#$47,d1
00007484 D244                       		add.w	d4,d1
00007486                            	@waterLoop:			; water deformation
00007486 3003                       		move.w	d3,d0
00007488 4440                       		neg.w	d0
0000748A 22C0                       		move.l	d0,(a1)+
0000748C 4843                       		swap	d3
0000748E D682                       		add.l	d2,d3
00007490 4843                       		swap	d3
00007492 51C9 FFF2                  		dbf	d1,@waterLoop
00007496 4E75                       		rts
00007498                            ; End of function Deform_GHZ
00007498                            
00007498                            Deform_Title:
00007498 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000749C 48C4                       		ext.l	d4
0000749E EB84                       		asl.l	#5,d4
000074A0 2204                       		move.l	d4,d1
000074A2 E384                       		asl.l	#1,d4
000074A4 D881                       		add.l	d1,d4
000074A6 7A00                       		moveq	#0,d5
000074A8 6100 0000                  		bsr.w	BGScroll_Block1
000074AC 6100 0000                  		bsr.w	BGScroll_Block3
000074B0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000074B4 3038 F704                  		move.w	(v_screenposy).w,d0
000074B8 0240 07FF                  		andi.w	#$7FF,d0
000074BC EA48                       		lsr.w	#5,d0
000074BE 4440                       		neg.w	d0
000074C0 0640 0026                  		addi.w	#$26,d0
000074C4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000074C8 3800                       		move.w	d0,d4
000074CA 6100 0000                  		bsr.w	BGScroll_Block3
000074CE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000074D4 323C 006F                  		move.w	#$6F,d1
000074D8 9244                       		sub.w	d4,d1
000074DA 3038 F700                  		move.w	(v_screenposx).w,d0
000074DE 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000074E4 6600                       		bne.s	loc_633C
000074E6 7000                       		moveq	#0,d0
000074E8                            
000074E8                            loc_633C:
000074E8 4440                       		neg.w	d0
000074EA 4840                       		swap	d0
000074EC 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000074F0 4440                       		neg.w	d0
000074F2                            
000074F2                            loc_6346:
000074F2 22C0                       		move.l	d0,(a1)+
000074F4 51C9 FFFC                  		dbf	d1,loc_6346
000074F8 323C 0027                  		move.w	#$27,d1
000074FC 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007500 4440                       		neg.w	d0
00007502                            
00007502                            loc_6356:
00007502 22C0                       		move.l	d0,(a1)+
00007504 51C9 FFFC                  		dbf	d1,loc_6356
00007508 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000750C 0640 0000                  		addi.w	#0,d0
00007510 3438 F700                  		move.w	(v_screenposx).w,d2
00007514 0642 FE00                  		addi.w	#-$200,d2
00007518 9440                       		sub.w	d0,d2
0000751A 48C2                       		ext.l	d2
0000751C E182                       		asl.l	#8,d2
0000751E 85FC 0068                  		divs.w	#$68,d2
00007522 48C2                       		ext.l	d2
00007524 E182                       		asl.l	#8,d2
00007526 7600                       		moveq	#0,d3
00007528 3600                       		move.w	d0,d3
0000752A 323C 0047                  		move.w	#$47,d1
0000752E D244                       		add.w	d4,d1
00007530                            
00007530                            loc_6384:
00007530 3003                       		move.w	d3,d0
00007532 4440                       		neg.w	d0
00007534 22C0                       		move.l	d0,(a1)+
00007536 4843                       		swap	d3
00007538 D682                       		add.l	d2,d3
0000753A 4843                       		swap	d3
0000753C 51C9 FFF2                  		dbf	d1,loc_6384
00007540 4E75                       		rts	
00007542                            
00007542                            ; ===========================================================================
00007542                            ; ---------------------------------------------------------------------------
00007542                            ; Labyrinth Zone background layer deformation code
00007542                            ; ---------------------------------------------------------------------------
00007542                            
00007542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007542                            
00007542                            
00007542                            Deform_LZ:
00007542                            	; plain background scroll
00007542 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007546 48C4                       		ext.l	d4
00007548 EF84                       		asl.l	#7,d4
0000754A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000754E 48C5                       		ext.l	d5
00007550 EF85                       		asl.l	#7,d5
00007552 6100 0000                  		bsr.w	BGScroll_XY
00007556                            
00007556 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000755C 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
00007562 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
00007568 1438 F7D8                  		move.b	(v_lz_deform).w,d2
0000756C 1602                       		move.b	d2,d3
0000756E 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
00007574                            
00007574 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007578 0242 00FF                  		andi.w	#$FF,d2
0000757C D678 F704                  		add.w	(v_screenposy).w,d3
00007580 0243 00FF                  		andi.w	#$FF,d3
00007584 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007588 323C 00DF                  		move.w	#$DF,d1
0000758C 3038 F700                  		move.w	(v_screenposx).w,d0
00007590 4440                       		neg.w	d0
00007592 3C00                       		move.w	d0,d6
00007594 4840                       		swap	d0
00007596 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000759A 4440                       		neg.w	d0
0000759C 3838 F646                  		move.w	(v_waterpos1).w,d4
000075A0 3A38 F704                  		move.w	(v_screenposy).w,d5
000075A4                            	; write normal scroll before meeting water position
000075A4                            	@normalLoop:		
000075A4 BA44                       		cmp.w	d4,d5	; is current y >= water y?
000075A6 6C00                       		bge.s	@underwaterLoop	; if yes, branch
000075A8 22C0                       		move.l	d0,(a1)+
000075AA 5245                       		addq.w	#1,d5
000075AC 5202                       		addq.b	#1,d2
000075AE 5203                       		addq.b	#1,d3
000075B0 51C9 FFF2                  		dbf	d1,@normalLoop
000075B4 4E75                       		rts
000075B6                            	; apply water deformation when underwater
000075B6                            	@underwaterLoop:
000075B6 1833 3000                  		move.b	(a3,d3),d4
000075BA 4884                       		ext.w	d4
000075BC D846                       		add.w	d6,d4
000075BE 32C4                       		move.w	d4,(a1)+
000075C0 1832 2000                  		move.b	(a2,d2),d4
000075C4 4884                       		ext.w	d4
000075C6 D840                       		add.w	d0,d4
000075C8 32C4                       		move.w	d4,(a1)+
000075CA 5202                       		addq.b	#1,d2
000075CC 5203                       		addq.b	#1,d3
000075CE 51C9 FFE6                  		dbf	d1,@underwaterLoop
000075D2 4E75                       		rts
000075D4                            
000075D4                            Lz_Scroll_Data:
000075D4 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000075E4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075F4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007604 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007614 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007624 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007634 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007644 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007654 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
00007664 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007674 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00007684 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007694 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076A4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076B4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076C4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076D4                            ; End of function Deform_LZ
000076D4                            
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            ; Marble Zone background layer deformation code
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            
000076D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D4                            
000076D4                            
000076D4                            Deform_MZ:
000076D4                            	; block 1 - dungeon interior
000076D4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076D8 48C4                       		ext.l	d4
000076DA ED84                       		asl.l	#6,d4
000076DC 2204                       		move.l	d4,d1
000076DE E384                       		asl.l	#1,d4
000076E0 D881                       		add.l	d1,d4
000076E2 7C02                       		moveq	#2,d6
000076E4 6100 0000                  		bsr.w	BGScroll_Block1
000076E8                            	; block 3 - mountains
000076E8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076EC 48C4                       		ext.l	d4
000076EE ED84                       		asl.l	#6,d4
000076F0 7C06                       		moveq	#6,d6
000076F2 6100 0000                  		bsr.w	BGScroll_Block3
000076F6                            	; block 2 - bushes & antique buildings
000076F6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076FA 48C4                       		ext.l	d4
000076FC EF84                       		asl.l	#7,d4
000076FE 7C04                       		moveq	#4,d6
00007700 6100 0000                  		bsr.w	BGScroll_Block2
00007704                            	; calculate y-position of background
00007704 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007708 3238 F704                  		move.w	(v_screenposy).w,d1
0000770C 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007710 6500                       		bcs.s	@noYscroll
00007712 3401                       		move.w	d1,d2
00007714 D241                       		add.w	d1,d1
00007716 D242                       		add.w	d2,d1
00007718 E441                       		asr.w	#2,d1
0000771A D041                       		add.w	d1,d0
0000771C                            	@noYscroll:
0000771C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007720 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007724 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007728 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000772E                            	; do something with redraw flags
0000772E 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007732 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007736 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
0000773A 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
0000773E 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007742                            	; calculate background scroll buffer
00007742 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007746 3438 F700                  		move.w	(v_screenposx).w,d2
0000774A 4442                       		neg.w	d2
0000774C 3002                       		move.w	d2,d0
0000774E E440                       		asr.w	#2,d0
00007750 9042                       		sub.w	d2,d0
00007752 48C0                       		ext.l	d0
00007754 E780                       		asl.l	#3,d0
00007756 81FC 0005                  		divs.w	#5,d0
0000775A 48C0                       		ext.l	d0
0000775C E980                       		asl.l	#4,d0
0000775E E180                       		asl.l	#8,d0
00007760 7600                       		moveq	#0,d3
00007762 3602                       		move.w	d2,d3
00007764 E243                       		asr.w	#1,d3
00007766 323C 0004                  		move.w	#4,d1
0000776A                            	@cloudLoop:		
0000776A 32C3                       		move.w	d3,(a1)+
0000776C 4843                       		swap	d3
0000776E D680                       		add.l	d0,d3
00007770 4843                       		swap	d3
00007772 51C9 FFF6                  		dbf	d1,@cloudLoop
00007776                            
00007776 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000777A 4440                       		neg.w	d0
0000777C 323C 0001                  		move.w	#1,d1
00007780                            	@mountainLoop:		
00007780 32C0                       		move.w	d0,(a1)+
00007782 51C9 FFFC                  		dbf	d1,@mountainLoop
00007786                            
00007786 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000778A 4440                       		neg.w	d0
0000778C 323C 0008                  		move.w	#8,d1
00007790                            	@bushLoop:		
00007790 32C0                       		move.w	d0,(a1)+
00007792 51C9 FFFC                  		dbf	d1,@bushLoop
00007796                            
00007796 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000779A 4440                       		neg.w	d0
0000779C 323C 000F                  		move.w	#$F,d1
000077A0                            	@interiorLoop:		
000077A0 32C0                       		move.w	d0,(a1)+
000077A2 51C9 FFFC                  		dbf	d1,@interiorLoop
000077A6                            
000077A6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000077AA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000077AE 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
000077B2 3400                       		move.w	d0,d2
000077B4 0C40 0100                  		cmpi.w	#$100,d0
000077B8 6500                       		bcs.s	@limitY
000077BA 303C 0100                  		move.w	#$100,d0
000077BE                            	@limitY:
000077BE 0240 01F0                  		andi.w	#$1F0,d0
000077C2 E648                       		lsr.w	#3,d0
000077C4 45F2 0000                  		lea	(a2,d0),a2
000077C8 6000 0000                  		bra.w	Bg_Scroll_X
000077CC                            ; End of function Deform_MZ
000077CC                            
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            ; Star Light Zone background layer deformation code
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            
000077CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CC                            
000077CC                            
000077CC                            Deform_SLZ:
000077CC                            	; vertical scrolling
000077CC 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000077D0 48C5                       		ext.l	d5
000077D2 EF85                       		asl.l	#7,d5
000077D4 6100 0000                  		bsr.w	Bg_Scroll_Y
000077D8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000077DE                            	; calculate background scroll buffer
000077DE 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000077E2 3438 F700                  		move.w	(v_screenposx).w,d2
000077E6 4442                       		neg.w	d2
000077E8 3002                       		move.w	d2,d0
000077EA E640                       		asr.w	#3,d0
000077EC 9042                       		sub.w	d2,d0
000077EE 48C0                       		ext.l	d0
000077F0 E980                       		asl.l	#4,d0
000077F2 81FC 001C                  		divs.w	#$1C,d0
000077F6 48C0                       		ext.l	d0
000077F8 E980                       		asl.l	#4,d0
000077FA E180                       		asl.l	#8,d0
000077FC 7600                       		moveq	#0,d3
000077FE 3602                       		move.w	d2,d3
00007800 323C 001B                  		move.w	#$1B,d1
00007804                            	@starLoop:		
00007804 32C3                       		move.w	d3,(a1)+
00007806 4843                       		swap	d3
00007808 D680                       		add.l	d0,d3
0000780A 4843                       		swap	d3
0000780C 51C9 FFF6                  		dbf	d1,@starLoop
00007810                            
00007810 3002                       		move.w	d2,d0
00007812 E640                       		asr.w	#3,d0
00007814 3200                       		move.w	d0,d1
00007816 E241                       		asr.w	#1,d1
00007818 D041                       		add.w	d1,d0
0000781A 323C 0004                  		move.w	#4,d1
0000781E                            	@buildingLoop1:		; distant black buildings
0000781E 32C0                       		move.w	d0,(a1)+
00007820 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007824                            
00007824 3002                       		move.w	d2,d0
00007826 E440                       		asr.w	#2,d0
00007828 323C 0004                  		move.w	#4,d1
0000782C                            	@buildingLoop2:		; closer buildings
0000782C 32C0                       		move.w	d0,(a1)+
0000782E 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007832                            
00007832 3002                       		move.w	d2,d0
00007834 E240                       		asr.w	#1,d0
00007836 323C 001D                  		move.w	#$1D,d1
0000783A                            	@bottomLoop:		; bottom part of background
0000783A 32C0                       		move.w	d0,(a1)+
0000783C 51C9 FFFC                  		dbf	d1,@bottomLoop
00007840                            
00007840 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007844 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007848 3400                       		move.w	d0,d2
0000784A 0440 00C0                  		subi.w	#$C0,d0
0000784E 0240 03F0                  		andi.w	#$3F0,d0
00007852 E648                       		lsr.w	#3,d0
00007854 45F2 0000                  		lea	(a2,d0),a2
00007858                            ;-------------------------------------------------------------------------------
00007858                            ;-------------------------------------------------------------------------------
00007858                            Bg_Scroll_X:
00007858 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000785C 323C 000E                  		move.w	#$E,d1
00007860 3038 F700                  		move.w	(v_screenposx).w,d0
00007864 4440                       		neg.w	d0
00007866 4840                       		swap	d0
00007868 0242 000F                  		andi.w	#$F,d2
0000786C D442                       		add.w	d2,d2
0000786E 301A                       		move.w	(a2)+,d0
00007870 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007874                            	@blockLoop:
00007874 301A                       		move.w	(a2)+,d0
00007876                            	@pixelJump:		
00007876 22C0                       		move.l	d0,(a1)+
00007878 22C0                       		move.l	d0,(a1)+
0000787A 22C0                       		move.l	d0,(a1)+
0000787C 22C0                       		move.l	d0,(a1)+
0000787E 22C0                       		move.l	d0,(a1)+
00007880 22C0                       		move.l	d0,(a1)+
00007882 22C0                       		move.l	d0,(a1)+
00007884 22C0                       		move.l	d0,(a1)+
00007886 22C0                       		move.l	d0,(a1)+
00007888 22C0                       		move.l	d0,(a1)+
0000788A 22C0                       		move.l	d0,(a1)+
0000788C 22C0                       		move.l	d0,(a1)+
0000788E 22C0                       		move.l	d0,(a1)+
00007890 22C0                       		move.l	d0,(a1)+
00007892 22C0                       		move.l	d0,(a1)+
00007894 22C0                       		move.l	d0,(a1)+
00007896 51C9 FFDC                  		dbf	d1,@blockLoop
0000789A 4E75                       		rts
0000789C                            
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            ; Spring Yard Zone background layer deformation	code
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            
0000789C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789C                            
0000789C                            
0000789C                            Deform_SYZ:
0000789C                            	; vertical scrolling
0000789C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000078A0 48C5                       		ext.l	d5
000078A2 E985                       		asl.l	#4,d5
000078A4 2205                       		move.l	d5,d1
000078A6 E385                       		asl.l	#1,d5
000078A8 DA81                       		add.l	d1,d5
000078AA 6100 0000                  		bsr.w	Bg_Scroll_Y
000078AE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000078B4                            	; calculate background scroll buffer
000078B4 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000078B8 3438 F700                  		move.w	(v_screenposx).w,d2
000078BC 4442                       		neg.w	d2
000078BE 3002                       		move.w	d2,d0
000078C0 E640                       		asr.w	#3,d0
000078C2 9042                       		sub.w	d2,d0
000078C4 48C0                       		ext.l	d0
000078C6 E780                       		asl.l	#3,d0
000078C8 81FC 0008                  		divs.w	#8,d0
000078CC 48C0                       		ext.l	d0
000078CE E980                       		asl.l	#4,d0
000078D0 E180                       		asl.l	#8,d0
000078D2 7600                       		moveq	#0,d3
000078D4 3602                       		move.w	d2,d3
000078D6 E243                       		asr.w	#1,d3
000078D8 323C 0007                  		move.w	#7,d1
000078DC                            	@cloudLoop:		
000078DC 32C3                       		move.w	d3,(a1)+
000078DE 4843                       		swap	d3
000078E0 D680                       		add.l	d0,d3
000078E2 4843                       		swap	d3
000078E4 51C9 FFF6                  		dbf	d1,@cloudLoop
000078E8                            
000078E8 3002                       		move.w	d2,d0
000078EA E640                       		asr.w	#3,d0
000078EC 323C 0004                  		move.w	#4,d1
000078F0                            	@mountainLoop:		
000078F0 32C0                       		move.w	d0,(a1)+
000078F2 51C9 FFFC                  		dbf	d1,@mountainLoop
000078F6                            
000078F6 3002                       		move.w	d2,d0
000078F8 E440                       		asr.w	#2,d0
000078FA 323C 0005                  		move.w	#5,d1
000078FE                            	@buildingLoop:		
000078FE 32C0                       		move.w	d0,(a1)+
00007900 51C9 FFFC                  		dbf	d1,@buildingLoop
00007904                            
00007904 3002                       		move.w	d2,d0
00007906 3202                       		move.w	d2,d1
00007908 E241                       		asr.w	#1,d1
0000790A 9041                       		sub.w	d1,d0
0000790C 48C0                       		ext.l	d0
0000790E E980                       		asl.l	#4,d0
00007910 81FC 000E                  		divs.w	#$E,d0
00007914 48C0                       		ext.l	d0
00007916 E980                       		asl.l	#4,d0
00007918 E180                       		asl.l	#8,d0
0000791A 7600                       		moveq	#0,d3
0000791C 3602                       		move.w	d2,d3
0000791E E243                       		asr.w	#1,d3
00007920 323C 000D                  		move.w	#$D,d1
00007924                            	@bushLoop:		
00007924 32C3                       		move.w	d3,(a1)+
00007926 4843                       		swap	d3
00007928 D680                       		add.l	d0,d3
0000792A 4843                       		swap	d3
0000792C 51C9 FFF6                  		dbf	d1,@bushLoop
00007930                            
00007930 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007934 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007938 3400                       		move.w	d0,d2
0000793A 0240 01F0                  		andi.w	#$1F0,d0
0000793E E648                       		lsr.w	#3,d0
00007940 45F2 0000                  		lea	(a2,d0),a2
00007944 6000 FF12                  		bra.w	Bg_Scroll_X
00007948                            ; End of function Deform_SYZ
00007948                            
00007948                            ; ---------------------------------------------------------------------------
00007948                            ; Scrap	Brain Zone background layer deformation	code
00007948                            ; ---------------------------------------------------------------------------
00007948                            
00007948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007948                            
00007948                            
00007948                            Deform_SBZ:
00007948 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000794C 48C4                       		ext.l	d4
0000794E ED84                       		asl.l	#6,d4
00007950 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007954 48C5                       		ext.l	d5
00007956 E985                       		asl.l	#4,d5
00007958 E385                       		asl.l	#1,d5
0000795A 6100 0000                  		bsr.w	BGScroll_XY
0000795E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007964 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007968 323C 00DF                  		move.w	#223,d1
0000796C 3038 F700                  		move.w	(v_screenposx).w,d0
00007970 4440                       		neg.w	d0
00007972 4840                       		swap	d0
00007974 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007978 4440                       		neg.w	d0
0000797A                            
0000797A                            loc_6576:
0000797A 22C0                       		move.l	d0,(a1)+
0000797C 51C9 FFFC                  		dbf	d1,loc_6576
00007980 4E75                       		rts	
00007982                            ;-------------------------------------------------------------------------------
00007982                            Deform_SBZ2:;loc_68A2:
00007982 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007986 48C4                       		ext.l	d4
00007988 ED84                       		asl.l	#6,d4
0000798A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000798E 48C5                       		ext.l	d5
00007990 E985                       		asl.l	#4,d5
00007992 E385                       		asl.l	#1,d5
00007994 6100 0000                  		bsr.w	BGScroll_XY
00007998 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000799E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000079A2 323C 00DF                  		move.w	#223,d1
000079A6 3038 F700                  		move.w	(v_screenposx).w,d0
000079AA 4440                       		neg.w	d0
000079AC 4840                       		swap	d0
000079AE 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000079B2 4440                       		neg.w	d0
000079B4                            
000079B4                            loc_6577:
000079B4 22C0                       		move.l	d0,(a1)+
000079B6 51C9 FFFC                  		dbf	d1,loc_6577
000079BA 4E75                       		rts	
000079BC                            
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            ; Subroutine to	scroll the level horizontally as Sonic moves
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            
000079BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079BC                            
000079BC                            
000079BC                            ScrollHoriz:
000079BC 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
000079C0 6100                       		bsr.s	MoveScreenHoriz
000079C2 3038 F700                  		move.w	(v_screenposx).w,d0
000079C6 0240 0010                  		andi.w	#$10,d0
000079CA 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000079CE B300                       		eor.b	d1,d0
000079D0 6600                       		bne.s	@return
000079D2 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
000079D8 3038 F700                  		move.w	(v_screenposx).w,d0
000079DC 9044                       		sub.w	d4,d0		; compare new with old screen position
000079DE 6A00                       		bpl.s	@scrollRight
000079E0                            
000079E0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
000079E6 4E75                       		rts	
000079E8                            
000079E8                            	@scrollRight:
000079E8 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
000079EE                            
000079EE                            	@return:
000079EE 4E75                       		rts	
000079F0                            ; End of function ScrollHoriz
000079F0                            
000079F0                            
000079F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F0                            
000079F0                            MoveScreenHoriz:
000079F0 4A38 FF8B                  		tst.b	($FFFFFF8B).w
000079F4 6700 0000                  		beq.w	@cont		
000079F8 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
000079FE                            		
000079FE                            	@cont:		
000079FE 3238 C904                  		move.w	($FFFFC904).w,d1
00007A02 6700                       		beq.s	@cont1
00007A04 0441 0100                  		sub.w	#$100,d1
00007A08 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A0C 7200                       		moveq	#0,d1
00007A0E 1238 C904                  		move.b	($FFFFC904).w,d1
00007A12 E509                       		lsl.b	#2,d1
00007A14 5801                       		addq.b	#4,d1
00007A16 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007A1A 9001                       		sub.b	d1,d0
00007A1C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007A20 3031 0000                  		move.w	(a1,d0.w),d0
00007A24 0240 3FFF                  		and.w	#$3FFF,d0
00007A28 6000                       		bra.s	@cont2
00007A2A                            		
00007A2A                            @cont1:
00007A2A 3038 D008                  		move.w	($FFFFD008).w,d0
00007A2E                            		
00007A2E                            @cont2:
00007A2E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007A32 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007A36 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007A38 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007A3C 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007A3E 4278 F73A                          clr.w    (v_scrshiftx).w
00007A42 4E75                               rts 
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            SH_AheadOfMid:
00007A44 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007A48 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007A4A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007A4E                            
00007A4E                                SH_Ahead16:
00007A4E D078 F700                          add.w    (v_screenposx).w,d0
00007A52 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007A56 6D00                               blt.s    SH_SetScreen
00007A58 3038 F72A                          move.w    (v_limitright2).w,d0
00007A5C                            
00007A5C                            SH_SetScreen:
00007A5C 3200                               move.w    d0,d1
00007A5E 9278 F700                          sub.w    (v_screenposx).w,d1
00007A62 E141                               asl.w    #8,d1
00007A64 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007A68 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007A6C 4E75                               rts 
00007A6E                            ; ===========================================================================
00007A6E                            
00007A6E                            SH_BehindMid:
00007A6E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A72 6400                       		bcc.s	@cont
00007A74 303C FFF0                  		move.w	#-$10,d0	
00007A78                            
00007A78                            @cont:
00007A78 D078 F700                  		add.w	(v_screenposx).w,d0
00007A7C B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007A80 6EDA                       		bgt.s	SH_SetScreen
00007A82 3038 F728                  		move.w	(v_limitleft2).w,d0
00007A86 60D4                       		bra.s	SH_SetScreen
00007A88                            ; End of function MoveScreenHoriz
00007A88                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007A88                            
00007A88                            MoveScreenHorizEXT:
00007A88 3238 C904                  		move.w	($FFFFC904).w,d1
00007A8C 6700                       		beq.s	@cont1
00007A8E 0441 0100                  		sub.w	#$100,d1
00007A92 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A96 7200                       		moveq	#0,d1
00007A98 1238 C904                  		move.b	($FFFFC904).w,d1
00007A9C E509                       		lsl.b	#2,d1
00007A9E 5801                       		addq.b	#4,d1
00007AA0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007AA4 9001                       		sub.b	d1,d0
00007AA6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007AAA 3031 0000                  		move.w	(a1,d0.w),d0
00007AAE 0240 3FFF                  		and.w	#$3FFF,d0
00007AB2 6000                       		bra.s	@cont2
00007AB4                            		
00007AB4                            @cont1:
00007AB4 3038 D008                  		move.w	($FFFFD008).w,d0
00007AB8                            		
00007AB8                            @cont2:
00007AB8 9078 F700                  		sub.w	($FFFFF700).w,d0
00007ABC 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007AC0 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007AC2 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007AC4 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            SHEXT_ProperlyFramed:
00007AC6 4278 F73A                          clr.w    (v_scrshiftx).w
00007ACA 4E75                               rts 
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            SHEXT_AheadOfMid:
00007ACC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007AD0 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007AD2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007AD6                            
00007AD6                            SHEXT_Ahead16:
00007AD6 D078 F700                          add.w    (v_screenposx).w,d0
00007ADA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ADE 6D00                               blt.s    SHEXT_SetScreen
00007AE0 3038 F72A                          move.w    (v_limitright2).w,d0
00007AE4                            
00007AE4                            SHEXT_SetScreen:
00007AE4 3200                               move.w    d0,d1
00007AE6 9278 F700                          sub.w    (v_screenposx).w,d1
00007AEA E141                               asl.w    #8,d1
00007AEC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007AF0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007AF4 4E75                               rts
00007AF6                            
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            SHEXT_BehindMid:
00007AF6 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007AFA 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007AFC 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007B00                            
00007B00                            SHEXT_Behind16:
00007B00 D078 F700                          add.w    (v_screenposx).w,d0
00007B04 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007B08 6EDA                               bgt.s    SHEXT_SetScreen
00007B0A 3038 F728                          move.w    (v_limitleft2).w,d0
00007B0E 60D4                               bra.s    SHEXT_SetScreen
00007B10                                  
00007B10                            ; End of function MoveScreenHoriz
00007B10                            
00007B10                            
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            ; Subroutine to	scroll the level vertically as Sonic moves
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            
00007B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B10                            
00007B10                            
00007B10                            ScrollVertical:
00007B10 7200                       		moveq	#0,d1
00007B12 3038 D00C                  		move.w	(v_player+obY).w,d0
00007B16 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007B1A 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007B20 6700                       		beq.s	SV_NotRolling	; if not, branch
00007B22 5B40                       		subq.w	#5,d0
00007B24                            
00007B24                            	SV_NotRolling:
00007B24 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007B2A 6700                       		beq.s	loc_664A	; if not, branch
00007B2C                            
00007B2C 0640 0020                  		addi.w	#32,d0
00007B30 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B34 6500                       		bcs.s	loc_6696
00007B36 0440 0040                  		subi.w	#64,d0
00007B3A 6400                       		bcc.s	loc_6696
00007B3C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B40 6600                       		bne.s	loc_66A8
00007B42 6000                       		bra.s	loc_6656
00007B44                            ; ===========================================================================
00007B44                            
00007B44                            loc_664A:
00007B44 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B48 6600                       		bne.s	loc_665C
00007B4A 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B4E 6600                       		bne.s	loc_66A8
00007B50                            
00007B50                            loc_6656:
00007B50 4278 F73C                  		clr.w	(v_scrshifty).w
00007B54 4E75                       		rts	
00007B56                            ; ===========================================================================
00007B56                            
00007B56                            loc_665C:
00007B56 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007B5C 6600                       		bne.s	loc_6684
00007B5E 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007B62 6A00                       		bpl.s	loc_666C
00007B64 4441                       		neg.w	d1
00007B66                            
00007B66                            loc_666C:
00007B66 0C41 0800                  		cmpi.w	#$800,d1
00007B6A 6400                       		bcc.s	loc_6696
00007B6C 323C 0600                  		move.w	#$600,d1
00007B70 0C40 0006                  		cmpi.w	#6,d0
00007B74 6E00                       		bgt.s	loc_66F6
00007B76 0C40 FFFA                  		cmpi.w	#-6,d0
00007B7A 6D00                       		blt.s	loc_66C0
00007B7C 6000                       		bra.s	loc_66AE
00007B7E                            ; ===========================================================================
00007B7E                            
00007B7E                            loc_6684:
00007B7E 323C 0200                  		move.w	#$200,d1
00007B82 0C40 0002                  		cmpi.w	#2,d0
00007B86 6E00                       		bgt.s	loc_66F6
00007B88 0C40 FFFE                  		cmpi.w	#-2,d0
00007B8C 6D00                       		blt.s	loc_66C0
00007B8E 6000                       		bra.s	loc_66AE
00007B90                            ; ===========================================================================
00007B90                            
00007B90                            loc_6696:
00007B90 323C 1000                  		move.w	#$1000,d1
00007B94 0C40 0010                  		cmpi.w	#$10,d0
00007B98 6E00                       		bgt.s	loc_66F6
00007B9A 0C40 FFF0                  		cmpi.w	#-$10,d0
00007B9E 6D00                       		blt.s	loc_66C0
00007BA0 6000                       		bra.s	loc_66AE
00007BA2                            ; ===========================================================================
00007BA2                            
00007BA2                            loc_66A8:
00007BA2 7000                       		moveq	#0,d0
00007BA4 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007BA8                            
00007BA8                            loc_66AE:
00007BA8 7200                       		moveq	#0,d1
00007BAA 3200                       		move.w	d0,d1
00007BAC D278 F704                  		add.w	(v_screenposy).w,d1
00007BB0 4A40                       		tst.w	d0
00007BB2 6A00 0000                  		bpl.w	loc_6700
00007BB6 6000 0000                  		bra.w	loc_66CC
00007BBA                            ; ===========================================================================
00007BBA                            
00007BBA                            loc_66C0:
00007BBA 4441                       		neg.w	d1
00007BBC 48C1                       		ext.l	d1
00007BBE E181                       		asl.l	#8,d1
00007BC0 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BC4 4841                       		swap	d1
00007BC6                            
00007BC6                            loc_66CC:
00007BC6 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007BCA 6E00                       		bgt.s	loc_6724
00007BCC 0C41 FF00                  		cmpi.w	#-$100,d1
00007BD0 6E00                       		bgt.s	loc_66F0
00007BD2 0241 07FF                  		andi.w	#$7FF,d1
00007BD6 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007BDC 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007BE2 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007BE8 6000                       		bra.s	loc_6724
00007BEA                            ; ===========================================================================
00007BEA                            
00007BEA                            loc_66F0:
00007BEA 3238 F72C                  		move.w	(v_limittop2).w,d1
00007BEE 6000                       		bra.s	loc_6724
00007BF0                            ; ===========================================================================
00007BF0                            
00007BF0                            loc_66F6:
00007BF0 48C1                       		ext.l	d1
00007BF2 E181                       		asl.l	#8,d1
00007BF4 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BF8 4841                       		swap	d1
00007BFA                            
00007BFA                            loc_6700:
00007BFA B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007BFE 6D00                       		blt.s	loc_6724
00007C00 0441 0800                  		subi.w	#$800,d1
00007C04 6500                       		bcs.s	loc_6720
00007C06 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C0C 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007C12 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007C18 6000                       		bra.s	loc_6724
00007C1A                            ; ===========================================================================
00007C1A                            
00007C1A                            loc_6720:
00007C1A 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007C1E                            
00007C1E                            loc_6724:
00007C1E 3838 F704                  		move.w	(v_screenposy).w,d4
00007C22 4841                       		swap	d1
00007C24 2601                       		move.l	d1,d3
00007C26 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007C2A E09B                       		ror.l	#8,d3
00007C2C 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007C30 21C1 F704                  		move.l	d1,(v_screenposy).w
00007C34 3038 F704                  		move.w	(v_screenposy).w,d0
00007C38 0240 0010                  		andi.w	#$10,d0
00007C3C 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007C40 B300                       		eor.b	d1,d0
00007C42 6600                       		bne.s	@return
00007C44 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007C4A 3038 F704                  		move.w	(v_screenposy).w,d0
00007C4E 9044                       		sub.w	d4,d0
00007C50 6A00                       		bpl.s	@scrollBottom
00007C52 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007C58 4E75                       		rts	
00007C5A                            ; ===========================================================================
00007C5A                            
00007C5A                            	@scrollBottom:
00007C5A 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007C60                            
00007C60                            	@return:
00007C60 4E75                       		rts	
00007C62                            ; End of function ScrollVertical
00007C62                            
00007C62                            
00007C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C62                            ; Scrolls background and sets redraw flags.
00007C62                            ; d4 - background x offset * $10000
00007C62                            ; d5 - background y offset * $10000
00007C62                            
00007C62                            BGScroll_XY:
00007C62 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C66 2002                       		move.l	d2,d0
00007C68 D084                       		add.l	d4,d0
00007C6A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C6E 2200                       		move.l	d0,d1
00007C70 4841                       		swap	d1
00007C72 0241 0010                  		andi.w	#$10,d1
00007C76 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C7A B701                       		eor.b	d3,d1
00007C7C 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007C7E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007C84 9082                       		sub.l	d2,d0	; new - old
00007C86 6A00                       		bpl.s	@scrollRight
00007C88 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007C8E 6000                       		bra.s	BGScroll_YRelative
00007C90                            	@scrollRight:
00007C90 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007C96                            BGScroll_YRelative:
00007C96 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007C9A 2003                       		move.l	d3,d0
00007C9C D085                       		add.l	d5,d0
00007C9E 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CA2 2200                       		move.l	d0,d1
00007CA4 4841                       		swap	d1
00007CA6 0241 0010                  		andi.w	#$10,d1
00007CAA 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CAE B501                       		eor.b	d2,d1
00007CB0 6600                       		bne.s	@return
00007CB2 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CB8 9083                       		sub.l	d3,d0
00007CBA 6A00                       		bpl.s	@scrollBottom
00007CBC 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007CC2 4E75                       		rts
00007CC4                            	@scrollBottom:
00007CC4 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007CCA                            	@return:
00007CCA 4E75                       		rts
00007CCC                            ; End of function BGScroll_XY
00007CCC                            
00007CCC                            Bg_Scroll_Y:
00007CCC 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007CD0 2003                       		move.l	d3,d0
00007CD2 D085                       		add.l	d5,d0
00007CD4 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CD8 2200                       		move.l	d0,d1
00007CDA 4841                       		swap	d1
00007CDC 0241 0010                  		andi.w	#$10,d1
00007CE0 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CE4 B501                       		eor.b	d2,d1
00007CE6 6600                       		bne.s	@return
00007CE8 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CEE 9083                       		sub.l	d3,d0
00007CF0 6A00                       		bpl.s	@scrollBottom
00007CF2 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007CF8 4E75                       		rts
00007CFA                            	@scrollBottom:
00007CFA 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007D00                            	@return:
00007D00 4E75                       		rts
00007D02                            
00007D02                            
00007D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D02                            
00007D02                            
00007D02                            BGScroll_YAbsolute:
00007D02 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007D06 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007D0A 3200                       		move.w	d0,d1
00007D0C 0241 0010                  		andi.w	#$10,d1
00007D10 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D14 B501                       		eor.b	d2,d1
00007D16 6600                       		bne.s	@return
00007D18 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D1E 9043                       		sub.w	d3,d0
00007D20 6A00                       		bpl.s	@scrollBottom
00007D22 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007D28 4E75                       		rts
00007D2A                            	@scrollBottom:
00007D2A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007D30                            	@return:
00007D30 4E75                       		rts
00007D32                            ; End of function BGScroll_YAbsolute
00007D32                            
00007D32                            
00007D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D32                            ; d6 - bit to set for redraw
00007D32                            
00007D32                            BGScroll_Block1:
00007D32 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007D36 2002                       		move.l	d2,d0
00007D38 D084                       		add.l	d4,d0
00007D3A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007D3E 2200                       		move.l	d0,d1
00007D40 4841                       		swap	d1
00007D42 0241 0010                  		andi.w	#$10,d1
00007D46 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007D4A B701                       		eor.b	d3,d1
00007D4C 6600                       		bne.s	@return
00007D4E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007D54 9082                       		sub.l	d2,d0
00007D56 6A00                       		bpl.s	@scrollRight
00007D58 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D5C 6000                       		bra.s	@return
00007D5E                            	@scrollRight:
00007D5E 5206                       		addq.b	#1,d6
00007D60 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D64                            	@return:
00007D64 4E75                       		rts
00007D66                            ; End of function BGScroll_Block1
00007D66                            
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            BGScroll_Block2:
00007D66 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007D6A 2002                       		move.l	d2,d0
00007D6C D084                       		add.l	d4,d0
00007D6E 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007D72 2200                       		move.l	d0,d1
00007D74 4841                       		swap	d1
00007D76 0241 0010                  		andi.w	#$10,d1
00007D7A 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007D7E B701                       		eor.b	d3,d1
00007D80 6600                       		bne.s	@return
00007D82 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007D88 9082                       		sub.l	d2,d0
00007D8A 6A00                       		bpl.s	@scrollRight
00007D8C 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D90 6000                       		bra.s	@return
00007D92                            	@scrollRight:
00007D92 5206                       		addq.b	#1,d6
00007D94 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D98                            	@return:
00007D98 4E75                       		rts
00007D9A                            ;-------------------------------------------------------------------------------
00007D9A                            BGScroll_Block3:
00007D9A 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007D9E 2002                       		move.l	d2,d0
00007DA0 D084                       		add.l	d4,d0
00007DA2 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007DA6 2200                       		move.l	d0,d1
00007DA8 4841                       		swap	d1
00007DAA 0241 0010                  		andi.w	#$10,d1
00007DAE 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007DB2 B701                       		eor.b	d3,d1
00007DB4 6600                       		bne.s	@return
00007DB6 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007DBC 9082                       		sub.l	d2,d0
00007DBE 6A00                       		bpl.s	@scrollRight
00007DC0 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DC4 6000                       		bra.s	@return
00007DC6                            	@scrollRight:
00007DC6 5206                       		addq.b	#1,d6
00007DC8 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DCC                            	@return:
00007DCC 4E75                       		rts
00007DCC 4E75                       		rts
00007DCE                            
00007DCE                            
00007DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCE                            
00007DCE                            ; sub_6886:
00007DCE                            LoadTilesAsYouMove_BGOnly:
00007DCE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007DD4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007DDA 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007DDE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007DE2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007DE6 343C 6000                  		move.w	#$6000,d2
00007DEA 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007DEE 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007DF2 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007DF6 6000 0000                  		bra.w	DrawBGScrollBlock2
00007DFA                            ; End of function sub_6886
00007DFA                            
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            ; Subroutine to	display	correct	tiles as you move
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            
00007DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFA                            
00007DFA                            
00007DFA                            LoadTilesAsYouMove:
00007DFA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E00 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E06                            		; First, update the background
00007E06 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007E0A 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007E0E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E12 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007E16 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007E1A 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007E1E 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007E22 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007E26                            		; REV01 added a third scroll block, though, technically,
00007E26                            		; the RAM for it was already there in REV00
00007E26 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007E2A 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007E2E 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007E32                            		; Then, update the foreground
00007E32 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007E36 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007E3A 49F8 A400                  		lea	(v_lvllayout).w,a4
00007E3E 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007E42                            		; The FG's update function is inlined here
00007E42 4A12                       		tst.b	(a2)
00007E44 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007E46 0892 0000                  		bclr	#0,(a2)
00007E4A 6700                       		beq.s	loc_6908
00007E4C                            		; Draw new tiles at the top
00007E4C 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007E4E 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E50 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E54 78F0                       		moveq	#-16,d4 ; Y coordinate
00007E56 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E58 6100 0000                  		bsr.w	DrawBlocks_LR
00007E5C                            
00007E5C                            loc_6908:
00007E5C 0892 0001                  		bclr	#1,(a2)
00007E60 6700                       		beq.s	loc_6922
00007E62                            		; Draw new tiles at the bottom
00007E62 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007E66 7AF0                       		moveq	#-16,d5
00007E68 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E6C 383C 00E0                  		move.w	#224,d4
00007E70 7AF0                       		moveq	#-16,d5
00007E72 6100 0000                  		bsr.w	DrawBlocks_LR
00007E76                            
00007E76                            loc_6922:
00007E76 0892 0002                  		bclr	#2,(a2)
00007E7A 6700                       		beq.s	loc_6938
00007E7C                            		; Draw new tiles on the left
00007E7C 78F0                       		moveq	#-16,d4
00007E7E 7AF0                       		moveq	#-16,d5
00007E80 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E84 78F0                       		moveq	#-16,d4
00007E86 7AF0                       		moveq	#-16,d5
00007E88 6100 0000                  		bsr.w	DrawBlocks_TB
00007E8C                            
00007E8C                            loc_6938:
00007E8C 0892 0003                  		bclr	#3,(a2)
00007E90 6700                       		beq.s	locret_6952
00007E92                            		; Draw new tiles on the right
00007E92 78F0                       		moveq	#-16,d4
00007E94 3A3C 0140                  		move.w	#320,d5
00007E98 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E9C 78F0                       		moveq	#-16,d4
00007E9E 3A3C 0140                  		move.w	#320,d5
00007EA2 6100 0000                  		bsr.w	DrawBlocks_TB
00007EA6                            
00007EA6                            locret_6952:
00007EA6 4E75                       		rts	
00007EA8                            ; End of function LoadTilesAsYouMove
00007EA8                            
00007EA8                            
00007EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA8                            
00007EA8                            ; sub_6954:
00007EA8                            DrawBGScrollBlock1:
00007EA8 4A12                       		tst.b	(a2)
00007EAA 6700 0000                  		beq.w	locret_69F2
00007EAE 0892 0000                  		bclr	#0,(a2)
00007EB2 6700                       		beq.s	loc_6972
00007EB4                            		; Draw new tiles at the top
00007EB4 78F0                       		moveq	#-16,d4
00007EB6 7AF0                       		moveq	#-16,d5
00007EB8 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EBC 78F0                       		moveq	#-16,d4
00007EBE 7AF0                       		moveq	#-16,d5
00007EC0 6100 0000                  			bsr.w	DrawBlocks_LR
00007EC4                            
00007EC4                            loc_6972:
00007EC4 0892 0001                  		bclr	#1,(a2)
00007EC8 6700                       		beq.s	loc_698E
00007ECA                            		; Draw new tiles at the top
00007ECA 383C 00E0                  		move.w	#224,d4
00007ECE 7AF0                       		moveq	#-16,d5
00007ED0 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007ED4 383C 00E0                  		move.w	#224,d4
00007ED8 7AF0                       		moveq	#-16,d5
00007EDA 6100 0000                  			bsr.w	DrawBlocks_LR
00007EDE                            
00007EDE                            loc_698E:
00007EDE 0892 0002                  		bclr	#2,(a2)
00007EE2                            
00007EE2                            
00007EE2 6700                       			beq.s	locj_6D56
00007EE4                            			; Draw new tiles on the left
00007EE4 78F0                       			moveq	#-16,d4
00007EE6 7AF0                       			moveq	#-16,d5
00007EE8 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007EEC 78F0                       			moveq	#-16,d4
00007EEE 7AF0                       			moveq	#-16,d5
00007EF0 6100 0000                  			bsr.w	DrawBlocks_TB
00007EF4                            	locj_6D56:
00007EF4                            
00007EF4 0892 0003                  			bclr	#3,(a2)
00007EF8 6700                       			beq.s	locj_6D70
00007EFA                            			; Draw new tiles on the right
00007EFA 78F0                       			moveq	#-16,d4
00007EFC 3A3C 0140                  			move.w	#320,d5
00007F00 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F04 78F0                       			moveq	#-16,d4
00007F06 3A3C 0140                  			move.w	#320,d5
00007F0A 6100 0000                  			bsr.w	DrawBlocks_TB
00007F0E                            	locj_6D70:
00007F0E                            
00007F0E 0892 0004                  			bclr	#4,(a2)
00007F12 6700                       			beq.s	locj_6D88
00007F14                            			; Draw entire row at the top
00007F14 78F0                       			moveq	#-16,d4
00007F16 7A00                       			moveq	#0,d5
00007F18 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F1C 78F0                       			moveq	#-16,d4
00007F1E 7A00                       			moveq	#0,d5
00007F20 7C1F                       			moveq	#(512/16)-1,d6
00007F22 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F26                            	locj_6D88:
00007F26                            
00007F26 0892 0005                  			bclr	#5,(a2)
00007F2A 6700                       			beq.s	locret_69F2
00007F2C                            			; Draw entire row at the bottom
00007F2C 383C 00E0                  			move.w	#224,d4
00007F30 7A00                       			moveq	#0,d5
00007F32 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F36 383C 00E0                  			move.w	#224,d4
00007F3A 7A00                       			moveq	#0,d5
00007F3C 7C1F                       			moveq	#(512/16)-1,d6
00007F3E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F42                            
00007F42                            locret_69F2:
00007F42 4E75                       		rts	
00007F44                            ; End of function DrawBGScrollBlock1
00007F44                            
00007F44                            
00007F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F44                            
00007F44                            ; Essentially, this draws everything that isn't scroll block 1
00007F44                            ; sub_69F4:
00007F44                            DrawBGScrollBlock2:
00007F44                            
00007F44 4A12                       			tst.b	(a2)
00007F46 6700 0000                  			beq.w	locj_6DF2
00007F4A 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007F50 6700 0000                  			beq.w	Draw_SBz
00007F54 0892 0000                  			bclr	#0,(a2)
00007F58 6700                       			beq.s	locj_6DD2
00007F5A                            			; Draw new tiles on the left
00007F5A 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007F5E 7AF0                       			moveq	#-16,d5
00007F60 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F64 383C 0070                  			move.w	#224/2,d4
00007F68 7AF0                       			moveq	#-16,d5
00007F6A 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007F6C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F70                            	locj_6DD2:
00007F70 0892 0001                  			bclr	#1,(a2)
00007F74 6700                       			beq.s	locj_6DF2
00007F76                            			; Draw new tiles on the right
00007F76 383C 0070                  			move.w	#224/2,d4
00007F7A 3A3C 0140                  			move.w	#320,d5
00007F7E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F82 383C 0070                  			move.w	#224/2,d4
00007F86 3A3C 0140                  			move.w	#320,d5
00007F8A 7C02                       			moveq	#3-1,d6
00007F8C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F90                            	locj_6DF2:
00007F90 4E75                       			rts
00007F92                            ;===============================================================================
00007F92                            	locj_6DF4:
00007F92 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007FA2 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FB2 0200                       			dc.b $02,$00						
00007FB4                            ;===============================================================================
00007FB4                            	Draw_SBz:
00007FB4 78F0                       			moveq	#-16,d4
00007FB6 0892 0000                  			bclr	#0,(a2)
00007FBA 6600                       			bne.s	locj_6E28
00007FBC 0892 0001                  			bclr	#1,(a2)
00007FC0 6700                       			beq.s	locj_6E72
00007FC2 383C 00E0                  			move.w	#224,d4
00007FC6                            	locj_6E28:
00007FC6 41F9 0000 7F93             			lea	(locj_6DF4+1).l,a0
00007FCC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007FD0 D044                       			add.w	d4,d0
00007FD2 0240 01F0                  			andi.w	#$1F0,d0
00007FD6 E848                       			lsr.w	#4,d0
00007FD8 1030 0000                  			move.b	(a0,d0.w),d0
00007FDC 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007FE2 3673 0000                  			movea.w	(a3,d0.w),a3
00007FE6 6700                       			beq.s	locj_6E5E
00007FE8 7AF0                       			moveq	#-16,d5
00007FEA 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007FEE 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FF2 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007FF6 6100 0000                  			bsr.w	DrawBlocks_LR
00007FFA 6000                       			bra.s	locj_6E72
00007FFC                            ;===============================================================================
00007FFC                            	locj_6E5E:
00007FFC 7A00                       			moveq	#0,d5
00007FFE 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008002 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008006 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000800A 7C1F                       			moveq	#(512/16)-1,d6
0000800C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008010                            	locj_6E72:
00008010 4A12                       			tst.b	(a2)
00008012 6600                       			bne.s	locj_6E78
00008014 4E75                       			rts
00008016                            ;===============================================================================			
00008016                            	locj_6E78:
00008016 78F0                       			moveq	#-16,d4
00008018 7AF0                       			moveq	#-16,d5
0000801A 1012                       			move.b	(a2),d0
0000801C 0200 00A8                  			andi.b	#$A8,d0
00008020 6700                       			beq.s	locj_6E8C
00008022 E208                       			lsr.b	#1,d0
00008024 1480                       			move.b	d0,(a2)
00008026 3A3C 0140                  			move.w	#320,d5
0000802A                            	locj_6E8C:
0000802A 41F9 0000 7F92             			lea	(locj_6DF4).l,a0
00008030 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008034 0240 01F0                  			andi.w	#$1F0,d0
00008038 E848                       			lsr.w	#4,d0
0000803A 41F0 0000                  			lea	(a0,d0.w),a0
0000803E 6000 0000                  			bra.w	locj_6FEC						
00008042                            ;===============================================================================
00008042                            
00008042                            
00008042                            	; locj_6EA4:
00008042                            	DrawBGScrollBlock3:
00008042 4A12                       			tst.b	(a2)
00008044 6700 0000                  			beq.w	locj_6EF0
00008048 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000804E 6700 0000                  			beq.w	Draw_Mz
00008052 0892 0000                  			bclr	#0,(a2)
00008056 6700                       			beq.s	locj_6ED0
00008058                            			; Draw new tiles on the left
00008058 383C 0040                  			move.w	#$40,d4
0000805C 7AF0                       			moveq	#-16,d5
0000805E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008062 383C 0040                  			move.w	#$40,d4
00008066 7AF0                       			moveq	#-16,d5
00008068 7C02                       			moveq	#3-1,d6
0000806A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000806E                            	locj_6ED0:
0000806E 0892 0001                  			bclr	#1,(a2)
00008072 6700                       			beq.s	locj_6EF0
00008074                            			; Draw new tiles on the right
00008074 383C 0040                  			move.w	#$40,d4
00008078 3A3C 0140                  			move.w	#320,d5
0000807C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008080 383C 0040                  			move.w	#$40,d4
00008084 3A3C 0140                  			move.w	#320,d5
00008088 7C02                       			moveq	#3-1,d6
0000808A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000808E                            	locj_6EF0:
0000808E 4E75                       			rts
00008090                            	locj_6EF2:
00008090 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000080A0 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080B0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080C0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080D0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080E0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080F0 0200                       			dc.b $02,$00
000080F2                            ;===============================================================================
000080F2                            	Draw_Mz:
000080F2 78F0                       			moveq	#-16,d4
000080F4 0892 0000                  			bclr	#0,(a2)
000080F8 6600                       			bne.s	locj_6F66
000080FA 0892 0001                  			bclr	#1,(a2)
000080FE 6700                       			beq.s	locj_6FAE
00008100 383C 00E0                  			move.w	#224,d4
00008104                            	locj_6F66:
00008104 41F9 0000 8091             			lea	(locj_6EF2+1).l,a0
0000810A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000810E 0440 0200                  			subi.w	#$200,d0
00008112 D044                       			add.w	d4,d0
00008114 0240 07F0                  			andi.w	#$7F0,d0
00008118 E848                       			lsr.w	#4,d0
0000811A 1030 0000                  			move.b	(a0,d0.w),d0
0000811E 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008122 6700                       			beq.s	locj_6F9A
00008124 7AF0                       			moveq	#-16,d5
00008126 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000812A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000812E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008132 6100 0000                  			bsr.w	DrawBlocks_LR
00008136 6000                       			bra.s	locj_6FAE
00008138                            ;===============================================================================
00008138                            	locj_6F9A:
00008138 7A00                       			moveq	#0,d5
0000813A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000813E 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008142 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008146 7C1F                       			moveq	#(512/16)-1,d6
00008148 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000814C                            	locj_6FAE:
0000814C 4A12                       			tst.b	(a2)
0000814E 6600                       			bne.s	locj_6FB4
00008150 4E75                       			rts
00008152                            ;===============================================================================			
00008152                            	locj_6FB4:
00008152 78F0                       			moveq	#-16,d4
00008154 7AF0                       			moveq	#-16,d5
00008156 1012                       			move.b	(a2),d0
00008158 0200 00A8                  			andi.b	#$A8,d0
0000815C 6700                       			beq.s	locj_6FC8
0000815E E208                       			lsr.b	#1,d0
00008160 1480                       			move.b	d0,(a2)
00008162 3A3C 0140                  			move.w	#320,d5
00008166                            	locj_6FC8:
00008166 41F9 0000 8090             			lea	(locj_6EF2).l,a0
0000816C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008170 0440 0200                  			subi.w	#$200,d0
00008174 0240 07F0                  			andi.w	#$7F0,d0
00008178 E848                       			lsr.w	#4,d0
0000817A 41F0 0000                  			lea	(a0,d0.w),a0
0000817E 6000 0000                  			bra.w	locj_6FEC
00008182                            ;===============================================================================			
00008182                            	locj_6FE4:
00008182 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
0000818A                            	locj_6FEC:
0000818A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000818C 2E3C 0080 0000             			move.l	#$800000,d7
00008192                            	locj_6FF4:			
00008192 7000                       			moveq	#0,d0
00008194 1018                       			move.b	(a0)+,d0
00008196 0112                       			btst	d0,(a2)
00008198 6700                       			beq.s	locj_701C
0000819A 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
0000819E 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000081A2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000081A6 6100 0000                  			bsr.w	GetBlockData
000081AA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000081AE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081B2 6100 0000                  			bsr.w	DrawBlock
000081B6 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000081BA                            	locj_701C:
000081BA 0644 0010                  			addi.w	#16,d4
000081BE 51CE FFD2                  			dbf	d6,locj_6FF4
000081C2 4212                       			clr.b	(a2)
000081C4 4E75                       			rts			
000081C6                            
000081C6                            
000081C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081C6                            
000081C6                            ; Don't be fooled by the name: this function's for drawing from left to right
000081C6                            ; when the camera's moving up or down
000081C6                            ; DrawTiles_LR:
000081C6                            DrawBlocks_LR:
000081C6 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000081C8                            ; DrawTiles_LR_2:
000081C8                            DrawBlocks_LR_2:
000081C8 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000081CE 2200                       		move.l	d0,d1
000081D0                            
000081D0                            	@loop:
000081D0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081D4 6100 0000                  		bsr.w	GetBlockData
000081D8 2001                       		move.l	d1,d0
000081DA 6100 0000                  		bsr.w	DrawBlock
000081DE 5801                       		addq.b	#4,d1		; Two tiles ahead
000081E0 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000081E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000081E8 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000081EC 51CE FFE2                  		dbf	d6,@loop
000081F0 4E75                       		rts
000081F2                            ; End of function DrawBlocks_LR
000081F2                            
000081F2                            ; DrawTiles_LR_3:
000081F2                            DrawBlocks_LR_3:
000081F2 2E3C 0080 0000             		move.l	#$800000,d7
000081F8 2200                       		move.l	d0,d1
000081FA                            
000081FA                            	@loop:
000081FA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081FE 6100 0000                  		bsr.w	GetBlockData_2
00008202 2001                       		move.l	d1,d0
00008204 6100 0000                  		bsr.w	DrawBlock
00008208 5801                       		addq.b	#4,d1
0000820A 0201 007F                  		andi.b	#$7F,d1
0000820E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008212 0645 0010                  		addi.w	#16,d5
00008216 51CE FFE2                  		dbf	d6,@loop
0000821A 4E75                       		rts	
0000821C                            ; End of function DrawBlocks_LR_3
0000821C                            
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            
0000821C                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000821C                            ; when the camera's moving left or right
0000821C                            ; DrawTiles_TB:
0000821C                            DrawBlocks_TB:
0000821C 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000821E                            ; DrawTiles_TB_2:
0000821E                            DrawBlocks_TB_2:
0000821E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008224 2200                       		move.l	d0,d1
00008226                            
00008226                            	@loop:
00008226 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000822A 6100 0000                  		bsr.w	GetBlockData
0000822E 2001                       		move.l	d1,d0
00008230 6100 0000                  		bsr.w	DrawBlock
00008234 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008238 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000823C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008240 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008244 51CE FFE0                  		dbf	d6,@loop
00008248 4E75                       		rts	
0000824A                            ; End of function DrawBlocks_TB_2
0000824A                            
0000824A                            
0000824A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824A                            
0000824A                            ; Draws a block's worth of tiles
0000824A                            ; Parameters:
0000824A                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000824A                            ; a1 = Pointer to block
0000824A                            ; a5 = Pointer to VDP command port
0000824A                            ; a6 = Pointer to VDP data port
0000824A                            ; d0 = VRAM command to access plane
0000824A                            ; d2 = VRAM plane A/B specifier
0000824A                            ; d7 = Plane row delta
0000824A                            ; DrawTiles:
0000824A                            DrawBlock:
0000824A 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000824C 4840                       		swap	d0
0000824E 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008252 6600                       		bne.s	DrawFlipY
00008254 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008258 6600                       		bne.s	DrawFlipX
0000825A 2A80                       		move.l	d0,(a5)
0000825C 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
0000825E D087                       		add.l	d7,d0		; Next row
00008260 2A80                       		move.l	d0,(a5)
00008262 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008264 4E75                       		rts	
00008266                            ; ===========================================================================
00008266                            
00008266                            DrawFlipX:
00008266 2A80                       		move.l	d0,(a5)
00008268 2819                       		move.l	(a1)+,d4
0000826A 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008270 4844                       		swap	d4		; Swap the tiles around
00008272 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008274 D087                       		add.l	d7,d0		; Next row
00008276 2A80                       		move.l	d0,(a5)
00008278 2819                       		move.l	(a1)+,d4
0000827A 0A84 0800 0800             		eori.l	#$8000800,d4
00008280 4844                       		swap	d4
00008282 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008284 4E75                       		rts	
00008286                            ; ===========================================================================
00008286                            
00008286                            DrawFlipY:
00008286 0810 0003                  		btst	#3,(a0)
0000828A 6600                       		bne.s	DrawFlipXY
0000828C 2A80                       		move.l	d0,(a5)
0000828E 2A19                       		move.l	(a1)+,d5
00008290 2819                       		move.l	(a1)+,d4
00008292 0A84 1000 1000             		eori.l	#$10001000,d4
00008298 2C84                       		move.l	d4,(a6)
0000829A D087                       		add.l	d7,d0
0000829C 2A80                       		move.l	d0,(a5)
0000829E 0A85 1000 1000             		eori.l	#$10001000,d5
000082A4 2C85                       		move.l	d5,(a6)
000082A6 4E75                       		rts	
000082A8                            ; ===========================================================================
000082A8                            
000082A8                            DrawFlipXY:
000082A8 2A80                       		move.l	d0,(a5)
000082AA 2A19                       		move.l	(a1)+,d5
000082AC 2819                       		move.l	(a1)+,d4
000082AE 0A84 1800 1800             		eori.l	#$18001800,d4
000082B4 4844                       		swap	d4
000082B6 2C84                       		move.l	d4,(a6)
000082B8 D087                       		add.l	d7,d0
000082BA 2A80                       		move.l	d0,(a5)
000082BC 0A85 1800 1800             		eori.l	#$18001800,d5
000082C2 4845                       		swap	d5
000082C4 2C85                       		move.l	d5,(a6)
000082C6 4E75                       		rts	
000082C8                            ; End of function DrawBlocks
000082C8                            
000082C8                            ; ===========================================================================
000082C8                            ; unused garbage
000082C8                            
000082C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C8                            
000082C8                            ; Gets address of block at a certain coordinate
000082C8                            ; Parameters:
000082C8                            ; a4 = Pointer to level layout
000082C8                            ; d4 = Relative Y coordinate
000082C8                            ; d5 = Relative X coordinate
000082C8                            ; Returns:
000082C8                            ; a0 = Address of block metadata
000082C8                            ; a1 = Address of block
000082C8                            ; DrawBlocks:
000082C8                            GetBlockData:
000082C8 DA53                       			add.w	(a3),d5
000082CA                            	GetBlockData_2:
000082CA D86B 0004                  			add.w	4(a3),d4
000082CE 43F8 B000                  			lea	(v_16x16).w,a1
000082D2                            		; Turn Y coordinate into index into level layout
000082D2 3604                       		move.w	d4,d3
000082D4 E24B                       		lsr.w	#1,d3
000082D6 0243 0380                  		andi.w	#$380,d3
000082DA                            		; Turn X coordinate into index into level layout
000082DA E64D                       		lsr.w	#3,d5
000082DC 3005                       		move.w	d5,d0
000082DE EA48                       		lsr.w	#5,d0
000082E0 0240 007F                  		andi.w	#$7F,d0
000082E4                            		; Get chunk from level layout
000082E4 D043                       		add.w	d3,d0
000082E6 76FF                       		moveq	#-1,d3
000082E8 1634 0000                  		move.b	(a4,d0.w),d3
000082EC 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000082EE                            		; Turn chunk ID into index into chunk table
000082EE 5303                       		subq.b	#1,d3
000082F0 0243 007F                  		andi.w	#$7F,d3
000082F4 EE5B                       		ror.w	#7,d3
000082F6                            		; Turn Y coordinate into index into chunk
000082F6 D844                       		add.w	d4,d4
000082F8 0244 01E0                  		andi.w	#$1E0,d4
000082FC                            		; Turn X coordinate into index into chunk
000082FC 0245 001E                  		andi.w	#$1E,d5
00008300                            		; Get block metadata from chunk
00008300 D644                       		add.w	d4,d3
00008302 D645                       		add.w	d5,d3
00008304 2043                       		movea.l	d3,a0
00008306 3610                       		move.w	(a0),d3
00008308                            		; Turn block ID into address
00008308 0243 03FF                  		andi.w	#$3FF,d3
0000830C E74B                       		lsl.w	#3,d3
0000830E D2C3                       		adda.w	d3,a1
00008310                            
00008310                            locret_6C1E:
00008310 4E75                       		rts	
00008312                            ; End of function GetBlockData
00008312                            
00008312                            
00008312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008312                            
00008312                            ; Produces a VRAM plane access command from coordinates
00008312                            ; Parameters:
00008312                            ; d4 = Relative Y coordinate
00008312                            ; d5 = Relative X coordinate
00008312                            ; Returns VDP command in d0
00008312                            Calc_VRAM_Pos:
00008312 DA53                       			add.w	(a3),d5
00008314                            	Calc_VRAM_Pos_2:
00008314 D86B 0004                  			add.w	4(a3),d4
00008318                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008318                            		; Also note that this wraps the value to the size of the plane:
00008318                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008318 0244 00F0                  		andi.w	#$F0,d4
0000831C 0245 01F0                  		andi.w	#$1F0,d5
00008320                            		; Transform the adjusted coordinates into a VDP command
00008320 E94C                       		lsl.w	#4,d4
00008322 E44D                       		lsr.w	#2,d5
00008324 D845                       		add.w	d5,d4
00008326 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008328 4840                       		swap	d0
0000832A 3004                       		move.w	d4,d0
0000832C 4E75                       		rts	
0000832E                            ; End of function Calc_VRAM_Pos
0000832E                            
0000832E                            
0000832E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832E                            ; not used
0000832E                            
0000832E                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000832E                            ; VRAM layout: the only difference is the high bits of the
0000832E                            ; plane's VRAM address, which are 10 instead of 11.
0000832E                            ; Both the foreground and background are at $C000 and $E000
0000832E                            ; respectively, so this one starting at $8000 makes no sense.
0000832E                            ; sub_6C3C:
0000832E                            Calc_VRAM_Pos_Unknown:
0000832E D86B 0004                  		add.w	4(a3),d4
00008332 DA53                       		add.w	(a3),d5
00008334 0244 00F0                  		andi.w	#$F0,d4
00008338 0245 01F0                  		andi.w	#$1F0,d5
0000833C E94C                       		lsl.w	#4,d4
0000833E E44D                       		lsr.w	#2,d5
00008340 D845                       		add.w	d5,d4
00008342 7002                       		moveq	#2,d0
00008344 4840                       		swap	d0
00008346 3004                       		move.w	d4,d0
00008348 4E75                       		rts	
0000834A                            ; End of function Calc_VRAM_Pos_Unknown
0000834A                            
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            ; Subroutine to	load tiles as soon as the level	appears
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            
0000834A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000834A                            
0000834A                            
0000834A                            LoadTilesFromStart:
0000834A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008350 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008356 47F8 F700                  		lea	(v_screenposx).w,a3
0000835A 49F8 A400                  		lea	(v_lvllayout).w,a4
0000835E 343C 4000                  		move.w	#$4000,d2
00008362 6100                       		bsr.s	DrawChunks
00008364 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008368 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000836C 343C 6000                  		move.w	#$6000,d2
00008370 4A38 FE10                  			tst.b	(v_zone).w
00008374 6700 0000                  			beq.w	Draw_GHz_Bg
00008378 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000837E 6700 0000                  			beq.w	Draw_Mz_Bg
00008382 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008388 6700 0000                  			beq.w	Draw_SBz_Bg
0000838C 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008392 6700 0000                  			beq.w	Draw_GHz_Bg
00008396                            ; End of function LoadTilesFromStart
00008396                            
00008396                            
00008396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008396                            
00008396                            
00008396                            DrawChunks:
00008396 78F0                       		moveq	#-16,d4
00008398 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000839A                            
0000839A                            	@loop:
0000839A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000839E 7A00                       		moveq	#0,d5
000083A0 3204                       		move.w	d4,d1
000083A2 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000083A6 3801                       		move.w	d1,d4
000083A8 7A00                       		moveq	#0,d5
000083AA 7C1F                       		moveq	#(512/16)-1,d6
000083AC 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000083B0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000083B4 0644 0010                  		addi.w	#16,d4
000083B8 51CE FFE0                  		dbf	d6,@loop
000083BC 4E75                       		rts	
000083BE                            ; End of function DrawChunks
000083BE                            
000083BE                            	Draw_GHz_Bg:
000083BE 7800                       			moveq	#0,d4
000083C0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083C2                            	locj_7224:			
000083C2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000083C6 41F9 0000 0000             			lea	(locj_724a),a0
000083CC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000083D0 D044                       			add.w	d4,d0
000083D2 0240 00F0                  			andi.w	#$F0,d0
000083D6 6100 0000                  			bsr.w	locj_72Ba
000083DA 4CDF 0070                  			movem.l	(sp)+,d4-d6
000083DE 0644 0010                  			addi.w	#16,d4
000083E2 51CE FFDE                  			dbf	d6,locj_7224
000083E6 4E75                       			rts
000083E8                            	locj_724a:
000083E8 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000083F8                            ;-------------------------------------------------------------------------------
000083F8                            	Draw_Mz_Bg:;locj_725a:
000083F8 78F0                       			moveq	#-16,d4
000083FA 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083FC                            	locj_725E:			
000083FC 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008400 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008404 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008408 0440 0200                  			subi.w	#$200,d0
0000840C D044                       			add.w	d4,d0
0000840E 0240 07F0                  			andi.w	#$7F0,d0
00008412 6100 0000                  			bsr.w	locj_72Ba
00008416 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000841A 0644 0010                  			addi.w	#16,d4
0000841E 51CE FFDC                  			dbf	d6,locj_725E
00008422 4E75                       			rts
00008424                            ;-------------------------------------------------------------------------------
00008424                            	Draw_SBz_Bg:;locj_7288:
00008424 78F0                       			moveq	#-16,d4
00008426 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008428                            	locj_728C:			
00008428 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000842C 41F8 7F93                  			lea	(locj_6DF4+1),a0
00008430 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008434 D044                       			add.w	d4,d0
00008436 0240 01F0                  			andi.w	#$1F0,d0
0000843A 6100 0000                  			bsr.w	locj_72Ba
0000843E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008442 0644 0010                  			addi.w	#16,d4
00008446 51CE FFE0                  			dbf	d6,locj_728C
0000844A 4E75                       			rts
0000844C                            ;-------------------------------------------------------------------------------
0000844C                            	locj_72B2:
0000844C F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008454                            	locj_72Ba:
00008454 E848                       			lsr.w	#4,d0
00008456 1030 0000                  			move.b	(a0,d0.w),d0
0000845A 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
0000845E 6700                       			beq.s	locj_72da
00008460 7AF0                       			moveq	#-16,d5
00008462 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008466 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
0000846A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000846E 6100 FD56                  			bsr.w	DrawBlocks_LR
00008472 6000                       			bra.s	locj_72EE
00008474                            	locj_72da:
00008474 7A00                       			moveq	#0,d5
00008476 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000847A 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
0000847E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008482 7C1F                       			moveq	#(512/16)-1,d6
00008484 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008488                            	locj_72EE:
00008488 4E75                       			rts
0000848A                            
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            ; Subroutine to load basic level data
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            
0000848A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000848A                            
0000848A                            
0000848A                            LevelDataLoad:
0000848A 7000                       		moveq	#0,d0
0000848C 1038 FE10                  		move.b	(v_zone).w,d0
00008490 E948                       		lsl.w	#4,d0
00008492 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008498 45F2 0000                  		lea	(a2,d0.w),a2
0000849C 2F0A                       		move.l	a2,-(sp)
0000849E 588A                       		addq.l	#4,a2
000084A0 205A                       		movea.l	(a2)+,a0
000084A2 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000084A6 303C 0000                  		move.w	#0,d0
000084AA 6100 942C                  		bsr.w	EniDec
000084AE 205A                       		movea.l	(a2)+,a0
000084B0 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000084B6 6100 959E                  		bsr.w	KosDec
000084BA 6100 0000                  		bsr.w	LevelLayoutLoad
000084BE 301A                       		move.w	(a2)+,d0
000084C0 3012                       		move.w	(a2),d0
000084C2 0240 00FF                  		andi.w	#$FF,d0
000084C6 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000084CC 6600                       		bne.s	@notSBZ3	; if not, branch
000084CE 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000084D0                            
000084D0                            	@notSBZ3:
000084D0 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000084D6 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000084D8 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000084DE 6600                       		bne.s	@normalpal	; if not, branch
000084E0                            
000084E0                            	@isSBZorFZ:
000084E0 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000084E2                            
000084E2                            	@normalpal:
000084E2 6100 A120                  		bsr.w	PalLoad1	; load palette (based on d0)
000084E6 245F                       		movea.l	(sp)+,a2
000084E8 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000084EA 7000                       		moveq	#0,d0
000084EC 1012                       		move.b	(a2),d0
000084EE 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000084F0 6100 9248                  		bsr.w	AddPLC		; load pattern load cues
000084F4                            
000084F4                            	@skipPLC:
000084F4 4E75                       		rts	
000084F6                            ; End of function LevelDataLoad
000084F6                            
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            ; Level	layout loading subroutine
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            
000084F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084F6                            
000084F6                            
000084F6                            LevelLayoutLoad:
000084F6 47F8 A400                  		lea	(v_lvllayout).w,a3
000084FA 323C 01FF                  		move.w	#$1FF,d1
000084FE 7000                       		moveq	#0,d0
00008500                            
00008500                            LevLoad_ClrRam:
00008500 26C0                       		move.l	d0,(a3)+
00008502 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008506                            
00008506 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000850A 7200                       		moveq	#0,d1
0000850C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008510 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008514 7202                       		moveq	#2,d1
00008516                            ; End of function LevelLayoutLoad
00008516                            
00008516                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008516                            
00008516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008516                            
00008516                            
00008516                            LevelLayoutLoad2:
00008516 3038 FE10                  		move.w	(v_zone).w,d0
0000851A ED08                       		lsl.b	#6,d0
0000851C EA48                       		lsr.w	#5,d0
0000851E 3400                       		move.w	d0,d2
00008520 D040                       		add.w	d0,d0
00008522 D042                       		add.w	d2,d0
00008524 D041                       		add.w	d1,d0
00008526 43F9 0000 0000             		lea	(Level_Index).l,a1
0000852C 3031 0000                  		move.w	(a1,d0.w),d0
00008530 43F1 0000                  		lea	(a1,d0.w),a1
00008534 7200                       		moveq	#0,d1
00008536 3401                       		move.w	d1,d2
00008538 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000853A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000853C                            
0000853C                            LevLoad_NumRows:
0000853C 3001                       		move.w	d1,d0
0000853E 204B                       		movea.l	a3,a0
00008540                            
00008540                            LevLoad_Row:
00008540 10D9                       		move.b	(a1)+,(a0)+
00008542 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008546 47EB 0080                  		lea	$80(a3),a3	; do next row
0000854A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000854E 4E75                       		rts	
00008550                            ; End of function LevelLayoutLoad2
00008550                            
00008550                            		include	"_inc\DynamicLevelEvents.asm"
00008550                            ; ---------------------------------------------------------------------------
00008550                            ; Dynamic level events
00008550                            ; ---------------------------------------------------------------------------
00008550                            
00008550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008550                            
00008550                            
00008550                            DynamicLevelEvents:
00008550 7000                       		moveq	#0,d0
00008552 1038 FE10                  		move.b	(v_zone).w,d0
00008556 D040                       		add.w	d0,d0
00008558 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
0000855C 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008560 7202                       		moveq	#2,d1
00008562 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008566 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
0000856A 6700                       		beq.s	DLE_NoChg	; if not, branch
0000856C 6400                       		bcc.s	loc_6DAC
0000856E                            
0000856E 4441                       		neg.w	d1
00008570 3038 F704                  		move.w	(v_screenposy).w,d0
00008574 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008578 6300                       		bls.s	loc_6DA0
0000857A 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
0000857E 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008584                            
00008584                            loc_6DA0:
00008584 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008588 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000858E                            
0000858E                            DLE_NoChg:
0000858E 4E75                       		rts	
00008590                            ; ===========================================================================
00008590                            
00008590                            loc_6DAC:
00008590 3038 F704                  		move.w	(v_screenposy).w,d0
00008594 5040                       		addq.w	#8,d0
00008596 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
0000859A 6500                       		bcs.s	loc_6DC4
0000859C 0838 0001 D022             		btst	#1,(v_player+obStatus).w
000085A2 6700                       		beq.s	loc_6DC4
000085A4 D241                       		add.w	d1,d1
000085A6 D241                       		add.w	d1,d1
000085A8                            
000085A8                            loc_6DC4:
000085A8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000085AC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000085B2 4E75                       		rts	
000085B4                            ; End of function DynamicLevelEvents
000085B4                            
000085B4                            ; ===========================================================================
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            ; Offset index for dynamic level events
000085B4                            ; ---------------------------------------------------------------------------
000085B4 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
000085B8 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
000085BC 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
000085C0 0000                       		dc.w DLE_Ending-DLE_Index
000085C2                            ; ===========================================================================
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            ; Green	Hill Zone dynamic level events
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            
000085C2                            DLE_GHZ:
000085C2 7000                       		moveq	#0,d0
000085C4 1038 FE11                  		move.b	(v_act).w,d0
000085C8 D040                       		add.w	d0,d0
000085CA 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
000085CE 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
000085D2                            ; ===========================================================================
000085D2 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
000085D4 0000                       		dc.w DLE_GHZ2-DLE_GHZx
000085D6 0000                       		dc.w DLE_GHZ3-DLE_GHZx
000085D8                            ; ===========================================================================
000085D8                            
000085D8                            DLE_GHZ1:
000085D8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000085DE 6600                       		bne.s	gohere
000085E0 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085E6 4E75                       		rts
000085E8                            gohere:
000085E8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085EE 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
000085F4 6500                       		bcs.s	locret_6E08	; if not, branch
000085F6 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
000085FC                            
000085FC                            locret_6E08:
000085FC 4E75                       		rts	
000085FE                            ; ===========================================================================
000085FE                            
000085FE                            DLE_GHZ2:
000085FE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008604 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000860A 6500                       		bcs.s	locret_6E3A
0000860C 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008612 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008618 6500                       		bcs.s	locret_6E3A
0000861A 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008620 6500                       		bcs.s	loc_6E9A
00008622 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008628 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
0000862E 6400                       		bcc.s	loc_6E8F
00008630 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008636 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000863C                            
0000863C                            loc_6E8F:
0000863C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008642 6400                       		bcc.s	loc_6E9A
00008644                            
00008644                            locret_6E3A:
00008644 4E75                       		rts	
00008646                            ; ===========================================================================
00008646                            
00008646                            loc_6E9A:
00008646 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000864C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008650 4E75                       		rts		
00008652                            ; ===========================================================================
00008652                            
00008652                            DLE_GHZ3:
00008652 7000                       		moveq	#0,d0
00008654 1038 F742                  		move.b	(v_dle_routine).w,d0
00008658 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000865C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008660                            ; ===========================================================================
00008660 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008662 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008664 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008666                            ; ===========================================================================
00008666                            
00008666                            DLE_GHZ3main:
00008666 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000866C 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008672 6500                       		bcs.s	locret_6E96
00008674 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
0000867A 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008680 6500                       		bcs.s	locret_6E96
00008682 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008688 6500                       		bcs.s	loc_6E98
0000868A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008690 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008696 6400                       		bcc.s	loc_6E8E
00008698 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000869E 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000086A4                            
000086A4                            loc_6E8E:
000086A4 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
000086AA 6400                       		bcc.s	loc_6E98
000086AC                            
000086AC                            locret_6E96:
000086AC 4E75                       		rts	
000086AE                            ; ===========================================================================
000086AE                            
000086AE                            loc_6E98:
000086AE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086B4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086B8 4E75                       		rts	
000086BA                            ; ===========================================================================
000086BA                            
000086BA                            DLE_GHZ3boss:
000086BA 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000086C0 6400                       		bcc.s	loc_6EB0
000086C2 5538 F742                  		subq.b	#2,(v_dle_routine).w
000086C6                            
000086C6                            loc_6EB0:
000086C6 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
000086CC 6500                       		bcs.s	locret_6EE8
000086CE 6100 0000                  		bsr.w	FindFreeObj
000086D2 6600                       		bne.s	loc_6ED0
000086D4 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
000086D8 337C 2A60 0008             		move.w	#$2A60,obX(a1)
000086DE 337C 0280 000C             		move.w	#$280,obY(a1)
000086E4                            
000086E4                            loc_6ED0:
000086EC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000086F2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086F6 7000                       		moveq	#plcid_Boss,d0
000086F8 6000 9040                  		bra.w	AddPLC		; load boss patterns
000086FC                            ; ===========================================================================
000086FC                            
000086FC                            locret_6EE8:
000086FC 4E75                       		rts	
000086FE                            ; ===========================================================================
000086FE                            
000086FE                            DLE_GHZ3end:
000086FE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008704 4E75                       		rts	
00008706                            ; ===========================================================================
00008706                            ; ---------------------------------------------------------------------------
00008706                            ; Labyrinth Zone dynamic level events
00008706                            ; ---------------------------------------------------------------------------
00008706                            
00008706                            DLE_LZ:
00008706 7000                       		moveq	#0,d0
00008708 1038 FE11                  		move.b	(v_act).w,d0
0000870C D040                       		add.w	d0,d0
0000870E 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008712 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008716                            ; ===========================================================================
00008716 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008718 0000                       		dc.w DLE_LZ12-DLE_LZx
0000871A 0000                       		dc.w DLE_LZ3-DLE_LZx
0000871C 0000                       		dc.w DLE_SBZ3-DLE_LZx
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            DLE_LZ12:
0000871E 4E75                       		rts	
00008720                            ; ===========================================================================
00008720                            
00008720                            DLE_LZ3:
00008720 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008724 6700                       		beq.s	loc_6F28	; if not, branch
00008726 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
0000872A 0C11 0007                  		cmpi.b	#7,(a1)
0000872E 6700                       		beq.s	loc_6F28
00008730 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000873C                            
0000873C                            loc_6F28:
0000873C 4A38 F742                  		tst.b	(v_dle_routine).w
00008740 6600                       		bne.s	locret_6F64
00008742 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008748 6500                       		bcs.s	locret_6F62
0000874A 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008750 6400                       		bcc.s	locret_6F62
00008752 6100 0000                  		bsr.w	FindFreeObj
00008756 6600                       		bne.s	loc_6F4A
00008758 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
0000875C                            
0000875C                            loc_6F4A:
00008764 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000876A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000876E 7000                       		moveq	#plcid_Boss,d0
00008770 6000 8FC8                  		bra.w	AddPLC		; load boss patterns
00008774                            ; ===========================================================================
00008774                            
00008774                            locret_6F62:
00008774 4E75                       		rts	
00008776                            ; ===========================================================================
00008776                            
00008776                            locret_6F64:
00008776 4E75                       		rts	
00008778                            ; ===========================================================================
00008778                            
00008778                            DLE_SBZ3:
00008778 4A38 F742                          tst.b	(v_dle_routine).w
0000877C 6600                               bne.s   loc_6C28
0000877E 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
00008782 6700                       		beq.s	loc_6C28	; if not, branch
0000878C 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
00008792                            loc_6C28:
00008792 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008798 6500                       		bcs.s	locret_6F8C
0000879A 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000087A0 6400                       		bcc.s	locret_6F8C	; if not, branch
000087A2 4238 FE30                  		clr.b	(v_lastlamp).w
000087A6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
000087AC 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
000087B2 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
000087B8                            
000087B8                            locret_6F8C:
000087B8 4E75                       		rts	
000087BA                            ; ===========================================================================
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            ; Marble Zone dynamic level events
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            
000087BA                            DLE_MZ:
000087BA 7000                       		moveq	#0,d0
000087BC 1038 FE11                  		move.b	(v_act).w,d0
000087C0 D040                       		add.w	d0,d0
000087C2 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
000087C6 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
000087CA                            ; ===========================================================================
000087CA 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
000087CC 0000                       		dc.w DLE_MZ2-DLE_MZx
000087CE 0000                       		dc.w DLE_MZ3-DLE_MZx
000087D0                            ; ===========================================================================
000087D0                            
000087D0                            DLE_MZ1:
000087D0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087D6 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
000087DC 6500                       		bcs.s	locret_6FE8
000087DE 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
000087E4                            
000087E4                            locret_6FE8:
000087E4 4E75                       		rts	
000087E6                            
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            DLE_MZ2:
000087E6 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087EC 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
000087F2 6500                       		bcs.s	locret_6FE9
000087F4 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
000087FA                            		
000087FA                            locret_6FE9:
000087FA 4E75                       		rts	
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            DLE_MZ3:
000087FC 7000                       		moveq	#0,d0
000087FE 1038 F742                  		move.b	(v_dle_routine).w,d0
00008802 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008806 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000880A                            ; ===========================================================================
0000880A 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
0000880C 0000                       		dc.w DLE_MZ3cutscene-off_7098
0000880E 0000                       		dc.w DLE_MZ3boss2-off_7098
00008810 0000                       		dc.w DLE_MZ3end-off_7098
00008812                            ; ===========================================================================
00008812                            
00008812                            DLE_MZ3boss:
00008812 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008818 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
0000881E 6500                       		bcs.s	locret_70E8
00008820 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008826 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
0000882C 6500                       		bcs.s	locret_70E8
0000882E 6100 0000                  		bsr.w	FindFreeObj
00008832 6600                       		bne.s	loc_70D0
00008834 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008838 337C 19F0 0008             		move.w	#$19F0,obX(a1)
0000883E 337C 022C 000C             		move.w	#$22C,obY(a1)
00008844                            
00008844                            loc_70D0:
0000884C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008852 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008856 7000                       		moveq	#plcid_Boss,d0
00008858 6000 8EE0                  		bra.w	AddPLC		; load boss patterns
0000885C                            ; ===========================================================================
0000885C                            
0000885C                            locret_70E8:
0000885C 4E75                       		rts	
0000885E                            		
0000885E                            DLE_MZ3cutscene:
0000885E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008864 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
0000886A 6500                       		bcs.s	locret_8298
0000886C 6100 0000                  		bsr.w	FindFreeObj
00008870 6600                       		bne.s	locret_8298
00008872 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008876 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000887A 7000                       		moveq	#plcid_EggmanSBZ2,d0
0000887C 6000 8EBC                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008880                            ; ===========================================================================
00008880                            
00008880                            locret_8298:
00008880 4E75                       		rts	
00008882                            ; ===========================================================================
00008882                            
00008882                            DLE_MZ3boss2:
00008882 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008888 6500                       		bcs.s	loc_72C6
0000888A 6100 0000                  		bsr.w	FindFreeObj
0000888E 6600                       		bne.s	loc_72C0
00008890 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008894 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088A0                            
000088A0                            loc_72C0:
000088A0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088A6                            
000088A6                            loc_72C6:
000088A6 6000                       		bra.s	loc_72D2
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            DLE_MZ3end:
000088A8 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
000088AE 6500                       		bcs.s	loc_72D2
000088B0 4E75                       		rts	
000088B2                            ; ===========================================================================
000088B2                            
000088B2                            loc_72D2:
000088B2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088B8 4E75                       		rts
000088BA                            
000088BA                            
000088BA                            ; ===========================================================================
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            ; Star Light Zone dynamic level events
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            
000088BA                            DLE_SLZ:
000088BA 7000                       		moveq	#0,d0
000088BC 1038 FE11                  		move.b	(v_act).w,d0
000088C0 D040                       		add.w	d0,d0
000088C2 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
000088C6 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
000088CA                            ; ===========================================================================
000088CA 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
000088CC 0000                       		dc.w DLE_SLZ12-DLE_SLZx
000088CE 0000                       		dc.w DLE_SLZ3-DLE_SLZx
000088D0                            ; ===========================================================================
000088D0                            
000088D0                            DLE_SLZ12:
000088D0 4E75                       		rts	
000088D2                            ; ===========================================================================
000088D2                            
000088D2                            DLE_SLZ3:
000088D2 7000                       		moveq	#0,d0
000088D4 1038 F742                  		move.b	(v_dle_routine).w,d0
000088D8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000088DC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000088E0                            ; ===========================================================================
000088E0 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000088E2 0000                       		dc.w DLE_SLZ3boss-off_7118
000088E4 0000                       		dc.w DLE_SLZ3end-off_7118
000088E6                            ; ===========================================================================
000088E6                            
000088E6                            DLE_SLZ3main:
000088E6 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000088EC 6500                       		bcs.s	locret_7130
000088EE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000088F4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088F8                            
000088F8                            locret_7130:
000088F8 4E75                       		rts	
000088FA                            ; ===========================================================================
000088FA                            
000088FA                            DLE_SLZ3boss:
000088FA 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008900 6500                       		bcs.s	locret_715C
00008902 6100 0000                  		bsr.w	FindFreeObj
00008906 6600                       		bne.s	loc_7144
00008908 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
0000890C                            
0000890C                            loc_7144:
00008914 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000891A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000891E 7000                       		moveq	#plcid_Boss,d0
00008920 6000 8E18                  		bra.w	AddPLC		; load boss patterns
00008924                            ; ===========================================================================
00008924                            
00008924                            locret_715C:
00008924 4E75                       		rts	
00008926                            ; ===========================================================================
00008926                            
00008926                            DLE_SLZ3end:
00008926 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000892C 4E75                       		rts
0000892E 4E75                       		rts
00008930                            ; ===========================================================================
00008930                            ; ---------------------------------------------------------------------------
00008930                            ; Spring Yard Zone dynamic level events
00008930                            ; ---------------------------------------------------------------------------
00008930                            
00008930                            DLE_SYZ:
00008930 7000                       		moveq	#0,d0
00008932 1038 FE11                  		move.b	(v_act).w,d0
00008936 D040                       		add.w	d0,d0
00008938 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
0000893C 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008940                            ; ===========================================================================
00008940 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008942 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008944 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008946                            ; ===========================================================================
00008946                            
00008946                            DLE_SYZ1:
00008946 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000894C 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
00008952 6500                       		bcs.s	locret_71A2
00008954 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
0000895A 4E75                       		rts	
0000895C                            ; ===========================================================================
0000895C                            
0000895C                            DLE_SYZ2:
0000895C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008962 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008968 6500                       		bcs.s	locret_71A2
0000896A 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008970 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008976 6500                       		bcs.s	locret_71A2
00008978 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000897E                            
0000897E                            locret_71A2:
0000897E 4E75                       		rts	
00008980                            ; ===========================================================================
00008980                            
00008980                            DLE_SYZ3:
00008980 7000                       		moveq	#0,d0
00008982 1038 F742                  		move.b	(v_dle_routine).w,d0
00008986 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000898A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000898E                            ; ===========================================================================
0000898E 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008990 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008992 0000                       		dc.w DLE_SYZ3end-off_71B2
00008994                            ; ===========================================================================
00008994                            
00008994                            DLE_SYZ3main:
00008994 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
0000899A 6500                       		bcs.s	locret_71CE
0000899C 6100 0000                  		bsr.w	FindFreeObj
000089A0 6600                       		bne.s	locret_71CE
000089A2 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
000089A6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089AA                            
000089AA                            locret_71CE:
000089AA 4E75                       		rts	
000089AC                            ; ===========================================================================
000089AC                            
000089AC                            DLE_SYZ3boss:
000089AC 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
000089B2 6500                       		bcs.s	locret_7200
000089B4 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
000089BA 6100 0000                  		bsr.w	FindFreeObj
000089BE 6600                       		bne.s	loc_71EC
000089C0 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
000089C4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089C8                            
000089C8                            loc_71EC:
000089D0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089D6 7000                       		moveq	#plcid_Boss,d0
000089D8 6000 8D60                  		bra.w	AddPLC		; load boss patterns
000089DC                            ; ===========================================================================
000089DC                            
000089DC                            locret_7200:
000089DC 4E75                       		rts	
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            DLE_SYZ3end:
000089DE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Scrap	Brain Zone dynamic level events
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            DLE_SBZ:
000089E6 7000                       		moveq	#0,d0
000089E8 1038 FE11                  		move.b	(v_act).w,d0
000089EC D040                       		add.w	d0,d0
000089EE 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000089F2 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000089F6                            ; ===========================================================================
000089F6 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000089F8 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000089FA 0000                       		dc.w DLE_FZ-DLE_SBZx
000089FC                            ; ===========================================================================
000089FC                            
000089FC                            DLE_SBZ1:
000089FC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008A02 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008A08 6500                       		bcs.s	locret_7242
00008A0A 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008A10 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008A16 6500                       		bcs.s	locret_7242
00008A18 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008A1E                            
00008A1E                            locret_7242:
00008A1E 4E75                       		rts	
00008A20                            ; ===========================================================================
00008A20                            
00008A20                            DLE_SBZ2:
00008A20 7000                       		moveq	#0,d0
00008A22 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A26 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008A2A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008A2E                            ; ===========================================================================
00008A2E 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008A30 0000                       		dc.w DLE_SBZ2boss-off_7252
00008A32 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008A34 0000                       		dc.w DLE_SBZ2end-off_7252
00008A36                            ; ===========================================================================
00008A36                            
00008A36                            DLE_SBZ2main:
00008A36 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008A3C 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008A42 6500                       		bcs.s	locret_727A
00008A44 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008A4A 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008A50 6500                       		bcs.s	locret_727A
00008A52 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A56                            
00008A56                            locret_727A:
00008A56 4E75                       		rts	
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            DLE_SBZ2boss:
00008A58 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008A5E 6500                       		bcs.s	locret_7298
00008A60 6100 0000                  		bsr.w	FindFreeObj
00008A64 6600                       		bne.s	locret_7298
00008A66 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008A6A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A6E 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008A70 6000 8CC8                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            locret_7298:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            DLE_SBZ2boss2:
00008A76 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008A7C 6500                       		bcs.s	loc_72B6
00008A7E 6100 0000                  		bsr.w	FindFreeObj
00008A82 6600                       		bne.s	loc_72B0
00008A84 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008A88 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A8C                            
00008A8C                            loc_72B0:
00008A8C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A92                            
00008A92                            loc_72B6:
00008A92 6000                       		bra.s	loc_72C2
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            DLE_SBZ2end:
00008A94 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008A9A 6500                       		bcs.s	loc_72C2
00008A9C 4E75                       		rts	
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            loc_72C2:
00008A9E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008AA4 4E75                       		rts	
00008AA6                            ; ===========================================================================
00008AA6                            
00008AA6                            DLE_FZ:
00008AA6 7000                       		moveq	#0,d0
00008AA8 1038 F742                  		move.b	(v_dle_routine).w,d0
00008AAC 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008AB0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008AB4                            ; ===========================================================================
00008AB4 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008AB8 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008ABC 0000                       		dc.w DLE_FZend2-off_72D8
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            DLE_FZmain:
00008ABE 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008AC4 6500                       		bcs.s	loc_72F4
00008AC6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ACA 7000                       		moveq	#plcid_FZBoss,d0
00008ACC 6100 8C6C                  		bsr.w	AddPLC		; load FZ boss patterns
00008AD0                            
00008AD0                            loc_72F4:
00008AD0 60CC                       		bra.s	loc_72C2
00008AD2                            ; ===========================================================================
00008AD2                            
00008AD2                            DLE_FZboss:
00008AD2 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008AD8 6500                       		bcs.s	loc_7312
00008ADA 6100 0000                  		bsr.w	FindFreeObj
00008ADE 6600                       		bne.s	loc_7312
00008AE0 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008AE4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AE8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AEE                            
00008AEE                            loc_7312:
00008AEE 60AE                       		bra.s	loc_72C2
00008AF0                            ; ===========================================================================
00008AF0                            
00008AF0                            DLE_FZend:
00008AF0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008AF6 6500                       		bcs.s	loc_7320
00008AF8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AFC                            
00008AFC                            loc_7320:
00008AFC 60A0                       		bra.s	loc_72C2
00008AFE                            ; ===========================================================================
00008AFE                            
00008AFE                            locret_7322:
00008AFE 4E75                       		rts	
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            DLE_FZend2:
00008B00 609C                       		bra.s	loc_72C2
00008B02                            ; ===========================================================================
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            ; Ending sequence dynamic level events (empty)
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            
00008B02                            DLE_Ending:
00008B02 4E75                       		rts	
00008B02 4E75                       		rts	
00008B04                            
00008B04                            		include	"_incObj\11 Bridge (part 1).asm"
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            ; Object 11 - GHZ bridge
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            
00008B04                            Bridge:
00008B04 7000                       		moveq	#0,d0
00008B06 1028 0024                  		move.b	obRoutine(a0),d0
00008B0A 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008B0E 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008B12                            ; ===========================================================================
00008B12 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008B16 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008B1A 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Bri_Main:	; Routine 0
00008B1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B22 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008B2A 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008B30 117C 0004 0001             		move.b	#4,obRender(a0)
00008B36 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008B3C 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008B42 3428 000C                  		move.w	obY(a0),d2
00008B46 3628 0008                  		move.w	obX(a0),d3
00008B4A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008B4C 45E8 0028                  		lea	obSubtype(a0),a2
00008B50 7200                       		moveq	#0,d1
00008B52 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008B54 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008B58 3001                       		move.w	d1,d0
00008B5A E248                       		lsr.w	#1,d0
00008B5C E948                       		lsl.w	#4,d0
00008B5E 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008B60 5501                       		subq.b	#2,d1
00008B62 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008B64                            
00008B64                            @buildloop:
00008B64 6100 0000                  		bsr.w	FindFreeObj
00008B68 6600                       		bne.s	Bri_Action
00008B6A 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B6E B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008B72 6600                       		bne.s	@notleftmost	; if not, branch
00008B74                            
00008B74 0643 0010                  		addi.w	#$10,d3
00008B78 3142 000C                  		move.w	d2,obY(a0)
00008B7C 3142 003C                  		move.w	d2,$3C(a0)
00008B80 3A08                       		move.w	a0,d5
00008B82 0445 D000                  		subi.w	#$D000,d5
00008B86 EC4D                       		lsr.w	#6,d5
00008B88 0245 007F                  		andi.w	#$7F,d5
00008B8C 14C5                       		move.b	d5,(a2)+
00008B8E 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B92                            
00008B92                            	@notleftmost:
00008B92 3A09                       		move.w	a1,d5
00008B94 0445 D000                  		subi.w	#$D000,d5
00008B98 EC4D                       		lsr.w	#6,d5
00008B9A 0245 007F                  		andi.w	#$7F,d5
00008B9E 14C5                       		move.b	d5,(a2)+
00008BA0 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008BA6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008BA8 3342 000C                  		move.w	d2,obY(a1)
00008BAC 3342 003C                  		move.w	d2,$3C(a1)
00008BB0 3343 0008                  		move.w	d3,obX(a1)
00008BB4 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008BBC 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008BC2 137C 0004 0001             		move.b	#4,obRender(a1)
00008BC8 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008BCE 137C 0008 0014             		move.b	#8,obActWid(a1)
00008BD4 0643 0010                  		addi.w	#$10,d3
00008BD8 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008BDC                            
00008BDC                            Bri_Action:	; Routine 2
00008BDC 6100                       		bsr.s	Bri_Solid
00008BDE 4A28 003E                  		tst.b	$3E(a0)
00008BE2 6700                       		beq.s	@display
00008BE4 5928 003E                  		subq.b	#4,$3E(a0)
00008BE8 6100 0000                  		bsr.w	Bri_Bend
00008BEC                            
00008BEC                            	@display:
00008BEC 6100 0000                  		bsr.w	DisplaySprite
00008BF0 6000 0000                  		bra.w	Bri_ChkDel
00008BF4                            
00008BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BF4                            
00008BF4                            
00008BF4                            Bri_Solid:
00008BF4 7200                       		moveq	#0,d1
00008BF6 1228 0028                  		move.b	obSubtype(a0),d1
00008BFA E749                       		lsl.w	#3,d1
00008BFC 3401                       		move.w	d1,d2
00008BFE 5041                       		addq.w	#8,d1
00008C00 D442                       		add.w	d2,d2
00008C02 43F8 D000                  		lea	(v_player).w,a1
00008C06 4A69 0012                  		tst.w	obVelY(a1)
00008C0A 6B00 0000                  		bmi.w	Plat_Exit
00008C0E 3029 0008                  		move.w	obX(a1),d0
00008C12 9068 0008                  		sub.w	obX(a0),d0
00008C16 D041                       		add.w	d1,d0
00008C18 6B00 0000                  		bmi.w	Plat_Exit
00008C1C B042                       		cmp.w	d2,d0
00008C1E 6400 0000                  		bcc.w	Plat_Exit
00008C22 6000                       		bra.s	Plat_NoXCheck
00008C24                            ; End of function Bri_Solid
00008C24                            ; End of function Bri_Solid
00008C24                            
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            ; Platform subroutine
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            
00008C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C24                            
00008C24                            PlatformObject:
00008C24 43F8 D000                  		lea	(v_player).w,a1
00008C28 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008C2C 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008C30                            
00008C30                            ;		perform x-axis range check
00008C30 3029 0008                  		move.w	obX(a1),d0
00008C34 9068 0008                  		sub.w	obX(a0),d0
00008C38 D041                       		add.w	d1,d0
00008C3A 6B00 0000                  		bmi.w	Plat_Exit
00008C3E D241                       		add.w	d1,d1
00008C40 B041                       		cmp.w	d1,d0
00008C42 6400 0000                  		bhs.w	Plat_Exit
00008C46                            
00008C46                            	Plat_NoXCheck:
00008C46 3028 000C                  		move.w	obY(a0),d0
00008C4A 5140                       		subq.w	#8,d0
00008C4C                            
00008C4C                            Platform3:
00008C4C                            ;		perform y-axis range check
00008C4C 3429 000C                  		move.w	obY(a1),d2
00008C50 1229 0016                  		move.b	obHeight(a1),d1
00008C54 4881                       		ext.w	d1
00008C56 D242                       		add.w	d2,d1
00008C58 5841                       		addq.w	#4,d1
00008C5A 9041                       		sub.w	d1,d0
00008C5C 6200 0000                  		bhi.w	Plat_Exit
00008C60 0C40 FFF0                  		cmpi.w	#-$10,d0
00008C64 6500 0000                  		blo.w	Plat_Exit
00008C68                            
00008C68 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008C6C 6B00 0000                  		bmi.w	Plat_Exit
00008C70 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008C76 6400 0000                  		bhs.w	Plat_Exit
00008C7A D440                       		add.w	d0,d2
00008C7C 5642                       		addq.w	#3,d2
00008C7E 3342 000C                  		move.w	d2,obY(a1)
00008C82 5428 0024                  		addq.b	#2,obRoutine(a0)
00008C86                            
00008C86                            loc_74AE:
00008C86 0829 0003 0022             		btst	#3,obStatus(a1)
00008C8C 6700                       		beq.s	loc_74DC
00008C8E 7000                       		moveq	#0,d0
00008C90 1029 003D                  		move.b	$3D(a1),d0
00008C94 ED48                       		lsl.w	#6,d0
00008C96 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008C9C 2440                       		movea.l	d0,a2
00008C9E 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008CA4 422A 0025                  		clr.b	ob2ndRout(a2)
00008CA8 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008CAE 6600                       		bne.s	loc_74DC
00008CB0 552A 0024                  		subq.b	#2,obRoutine(a2)
00008CB4                            
00008CB4                            loc_74DC:
00008CB4 3008                       		move.w	a0,d0
00008CB6 0440 D000                  		subi.w	#-$3000,d0
00008CBA EC48                       		lsr.w	#6,d0
00008CBC 0240 007F                  		andi.w	#$7F,d0
00008CC0 1340 003D                  		move.b	d0,$3D(a1)
00008CC4 137C 0000 0026             		move.b	#0,obAngle(a1)
00008CCA 337C 0000 0012             		move.w	#0,obVelY(a1)
00008CD0 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008CD6 0829 0001 0022             		btst	#1,obStatus(a1)
00008CDC 6700                       		beq.s	loc_7512
00008CDE 2F08                       		move.l	a0,-(sp)
00008CE0 2049                       		movea.l	a1,a0
00008CE2 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008CE8 205F                       		movea.l	(sp)+,a0
00008CEA                            
00008CEA                            loc_7512:
00008CEA 08E9 0003 0022             		bset	#3,obStatus(a1)
00008CF0 08E8 0003 0022             		bset	#3,obStatus(a0)
00008CF6                            
00008CF6                            Plat_Exit:
00008CF6 4E75                       		rts	
00008CF8                            ; End of function PlatformObject
00008CF8                            
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            
00008CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CF8                            
00008CF8                            
00008CF8                            SlopeObject:
00008CF8 43F8 D000                  		lea	(v_player).w,a1
00008CFC 4A69 0012                  		tst.w	obVelY(a1)
00008D00 6B00 FFF4                  		bmi.w	Plat_Exit
00008D04 3029 0008                  		move.w	obX(a1),d0
00008D08 9068 0008                  		sub.w	obX(a0),d0
00008D0C D041                       		add.w	d1,d0
00008D0E 6BE6                       		bmi.s	Plat_Exit
00008D10 D241                       		add.w	d1,d1
00008D12 B041                       		cmp.w	d1,d0
00008D14 64E0                       		bhs.s	Plat_Exit
00008D16 0828 0000 0001             		btst	#0,obRender(a0)
00008D1C 6700                       		beq.s	loc_754A
00008D1E 4640                       		not.w	d0
00008D20 D041                       		add.w	d1,d0
00008D22                            
00008D22                            loc_754A:
00008D22 E248                       		lsr.w	#1,d0
00008D24 7600                       		moveq	#0,d3
00008D26 1632 0000                  		move.b	(a2,d0.w),d3
00008D2A 3028 000C                  		move.w	obY(a0),d0
00008D2E 9043                       		sub.w	d3,d0
00008D30 6000 FF1A                  		bra.w	Platform3
00008D34                            ; End of function SlopeObject
00008D34                            
00008D34                            
00008D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D34                            
00008D34                            
00008D34                            Swing_Solid:
00008D34 43F8 D000                  		lea	(v_player).w,a1
00008D38 4A69 0012                  		tst.w	obVelY(a1)
00008D3C 6B00 FFB8                  		bmi.w	Plat_Exit
00008D40 3029 0008                  		move.w	obX(a1),d0
00008D44 9068 0008                  		sub.w	obX(a0),d0
00008D48 D041                       		add.w	d1,d0
00008D4A 6B00 FFAA                  		bmi.w	Plat_Exit
00008D4E D241                       		add.w	d1,d1
00008D50 B041                       		cmp.w	d1,d0
00008D52 6400 FFA2                  		bhs.w	Plat_Exit
00008D56 3028 000C                  		move.w	obY(a0),d0
00008D5A 9043                       		sub.w	d3,d0
00008D5C 6000 FEEE                  		bra.w	Platform3
00008D60                            ; End of function Obj15_Solid
00008D60                            
00008D60                            ; ===========================================================================
00008D60                            
00008D60                            		include	"_incObj\11 Bridge (part 2).asm"
00008D60                            
00008D60                            Bri_Platform:	; Routine 4
00008D60 6100                       		bsr.s	Bri_WalkOff
00008D62 6100 0000                  		bsr.w	DisplaySprite
00008D66 6000 0000                  		bra.w	Bri_ChkDel
00008D6A                            
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            ; Subroutine allowing Sonic to walk off a bridge
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            
00008D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D6A                            
00008D6A                            
00008D6A                            Bri_WalkOff:
00008D6A 7200                       		moveq	#0,d1
00008D6C 1228 0028                  		move.b	obSubtype(a0),d1
00008D70 E749                       		lsl.w	#3,d1
00008D72 3401                       		move.w	d1,d2
00008D74 5041                       		addq.w	#8,d1
00008D76 6100                       		bsr.s	ExitPlatform2
00008D78 6400                       		bcc.s	locret_75BE
00008D7A E848                       		lsr.w	#4,d0
00008D7C 1140 003F                  		move.b	d0,$3F(a0)
00008D80 1028 003E                  		move.b	$3E(a0),d0
00008D84 0C00 0040                  		cmpi.b	#$40,d0
00008D88 6700                       		beq.s	loc_75B6
00008D8A 5828 003E                  		addq.b	#4,$3E(a0)
00008D8E                            
00008D8E                            loc_75B6:
00008D8E 6100 0000                  		bsr.w	Bri_Bend
00008D92 6100 0000                  		bsr.w	Bri_MoveSonic
00008D96                            
00008D96                            locret_75BE:
00008D96 4E75                       		rts	
00008D98                            ; End of function Bri_WalkOff
00008D98                            ; End of function Bri_WalkOff
00008D98                            
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            
00008D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D98                            
00008D98                            
00008D98                            ExitPlatform:
00008D98 3401                       		move.w	d1,d2
00008D9A                            
00008D9A                            ExitPlatform2:
00008D9A D442                       		add.w	d2,d2
00008D9C 43F8 D000                  		lea	(v_player).w,a1
00008DA0 0829 0001 0022             		btst	#1,obStatus(a1)
00008DA6 6600                       		bne.s	loc_75E0
00008DA8 3029 0008                  		move.w	obX(a1),d0
00008DAC 9068 0008                  		sub.w	obX(a0),d0
00008DB0 D041                       		add.w	d1,d0
00008DB2 6B00                       		bmi.s	loc_75E0
00008DB4 B042                       		cmp.w	d2,d0
00008DB6 6500                       		blo.s	locret_75F2
00008DB8                            
00008DB8                            loc_75E0:
00008DB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008DBE 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008DC4 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008DCA                            
00008DCA                            locret_75F2:
00008DCA 4E75                       		rts	
00008DCC                            ; End of function ExitPlatform
00008DCC                            
00008DCC                            		include	"_incObj\11 Bridge (part 3).asm"
00008DCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DCC                            
00008DCC                            
00008DCC                            Bri_MoveSonic:
00008DCC 7000                       		moveq	#0,d0
00008DCE 1028 003F                  		move.b	$3F(a0),d0
00008DD2 1030 0029                  		move.b	$29(a0,d0.w),d0
00008DD6 ED48                       		lsl.w	#6,d0
00008DD8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008DDE 2440                       		movea.l	d0,a2
00008DE0 43F8 D000                  		lea	(v_player).w,a1
00008DE4 302A 000C                  		move.w	obY(a2),d0
00008DE8 5140                       		subq.w	#8,d0
00008DEA 7200                       		moveq	#0,d1
00008DEC 1229 0016                  		move.b	obHeight(a1),d1
00008DF0 9041                       		sub.w	d1,d0
00008DF2 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008DF6 4E75                       		rts	
00008DF8                            ; End of function Bri_MoveSonic
00008DF8                            
00008DF8                            
00008DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DF8                            
00008DF8                            
00008DF8                            Bri_Bend:
00008DF8 1028 003E                  		move.b	$3E(a0),d0
00008DFC 6100 AECC                  		bsr.w	CalcSine
00008E00 3800                       		move.w	d0,d4
00008E02 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008E08 7000                       		moveq	#0,d0
00008E0A 1028 0028                  		move.b	obSubtype(a0),d0
00008E0E E948                       		lsl.w	#4,d0
00008E10 7600                       		moveq	#0,d3
00008E12 1628 003F                  		move.b	$3F(a0),d3
00008E16 3403                       		move.w	d3,d2
00008E18 D640                       		add.w	d0,d3
00008E1A 7A00                       		moveq	#0,d5
00008E1C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008E22 1A35 3000                  		move.b	(a5,d3.w),d5
00008E26 0243 000F                  		andi.w	#$F,d3
00008E2A E94B                       		lsl.w	#4,d3
00008E2C 47F4 3000                  		lea	(a4,d3.w),a3
00008E30 45E8 0029                  		lea	$29(a0),a2
00008E34                            
00008E34                            loc_765C:
00008E34 7000                       		moveq	#0,d0
00008E36 101A                       		move.b	(a2)+,d0
00008E38 ED48                       		lsl.w	#6,d0
00008E3A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E40 2240                       		movea.l	d0,a1
00008E42 7000                       		moveq	#0,d0
00008E44 101B                       		move.b	(a3)+,d0
00008E46 5240                       		addq.w	#1,d0
00008E48 C0C5                       		mulu.w	d5,d0
00008E4A C0C4                       		mulu.w	d4,d0
00008E4C 4840                       		swap	d0
00008E4E D069 003C                  		add.w	$3C(a1),d0
00008E52 3340 000C                  		move.w	d0,obY(a1)
00008E56 51CA FFDC                  		dbf	d2,loc_765C
00008E5A 7000                       		moveq	#0,d0
00008E5C 1028 0028                  		move.b	obSubtype(a0),d0
00008E60 7600                       		moveq	#0,d3
00008E62 1628 003F                  		move.b	$3F(a0),d3
00008E66 5203                       		addq.b	#1,d3
00008E68 9600                       		sub.b	d0,d3
00008E6A 4403                       		neg.b	d3
00008E6C 6B00                       		bmi.s	locret_76CA
00008E6E 3403                       		move.w	d3,d2
00008E70 E94B                       		lsl.w	#4,d3
00008E72 47F4 3000                  		lea	(a4,d3.w),a3
00008E76 D6C2                       		adda.w	d2,a3
00008E78 5342                       		subq.w	#1,d2
00008E7A 6500                       		bcs.s	locret_76CA
00008E7C                            
00008E7C                            loc_76A4:
00008E7C 7000                       		moveq	#0,d0
00008E7E 101A                       		move.b	(a2)+,d0
00008E80 ED48                       		lsl.w	#6,d0
00008E82 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E88 2240                       		movea.l	d0,a1
00008E8A 7000                       		moveq	#0,d0
00008E8C 1023                       		move.b	-(a3),d0
00008E8E 5240                       		addq.w	#1,d0
00008E90 C0C5                       		mulu.w	d5,d0
00008E92 C0C4                       		mulu.w	d4,d0
00008E94 4840                       		swap	d0
00008E96 D069 003C                  		add.w	$3C(a1),d0
00008E9A 3340 000C                  		move.w	d0,obY(a1)
00008E9E 51CA FFDC                  		dbf	d2,loc_76A4
00008EA2                            
00008EA2                            locret_76CA:
00008EA2 4E75                       		rts	
00008EA4                            ; End of function Bri_Bend
00008EA4                            
00008EA4                            ; ===========================================================================
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            ; GHZ bridge-bending data
00008EA4                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008FB4                            		even
00008FB4                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000090B4                            		even
000090B4                            
000090B4                            ; ===========================================================================
000090B4                            
000090B4                            Bri_ChkDel:
000090D2 4E75                       		rts	
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            @deletebridge:
000090D4 7400                       		moveq	#0,d2
000090D6 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000090DA 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000090DC 5302                       		subq.b	#1,d2		; subtract 1
000090DE 6500                       		bcs.s	@delparent
000090E0                            
000090E0                            	@loop:
000090E0 7000                       		moveq	#0,d0
000090E2 101A                       		move.b	(a2)+,d0
000090E4 ED48                       		lsl.w	#6,d0
000090E6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090EC 2240                       		movea.l	d0,a1
000090EE B048                       		cmp.w	a0,d0
000090F0 6700                       		beq.s	@skipdel
000090F2 6100 0000                  		bsr.w	DeleteChild
000090F6                            
000090F6                            	@skipdel:
000090F6 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000090FA                            
000090FA                            @delparent:
000090FA 6100 0000                  		bsr.w	DeleteObject
000090FE 4E75                       		rts	
00009100                            ; ===========================================================================
00009100                            
00009100                            Bri_Delete:	; Routine 6, 8
00009100 6100 0000                  		bsr.w	DeleteObject
00009104 4E75                       		rts	
00009106                            ; ===========================================================================
00009106                            
00009106                            Bri_Display:	; Routine $A
00009106 6100 0000                  		bsr.w	DisplaySprite
0000910A 4E75                       		rts	
0000910A 4E75                       		rts	
0000910C                            Map_Bri:	include	"_maps\Bridge.asm"
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            ; Sprite mappings - GHZ	bridge
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            Map_Bri_internal:
0000910C 0000                       		dc.w M_Bri_Log-Map_Bri_internal
0000910E 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009110 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009112 01                         M_Bri_Log:	dc.b 1
00009113 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009118 02                         M_Bri_Stump:	dc.b 2
00009119 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
0000911E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009123 01                         M_Bri_Rope:	dc.b 1
00009124 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000912A 00                         		even
0000912A 00                         		even
0000912A                            
0000912A                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000912A                            ;	    - spiked ball on a chain (SBZ)
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            
0000912A                            SwingingPlatform:
0000912A 7000                       		moveq	#0,d0
0000912C 1028 0024                  		move.b	obRoutine(a0),d0
00009130 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009134 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009138                            ; ===========================================================================
00009138 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000913C 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009140 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009144 0000                       		dc.w Swing_Action-Swing_Index
00009146                            
00009146 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009146 =00000038                  swing_origY:	equ $38		; original y-axis position
00009146                            ; ===========================================================================
00009146                            
00009146                            Swing_Main:	; Routine 0
00009146 5428 0024                  		addq.b	#2,obRoutine(a0)
0000914A 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009152 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009158 117C 0004 0001             		move.b	#4,obRender(a0)
0000915E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009164 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000916A 117C 0008 0016             		move.b	#8,obHeight(a0)
00009170 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009176 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000917C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009182 6600                       		bne.s	@notSLZ
00009184                            
00009184 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000918C 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009192 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009198 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000919E 117C 0099 0020             		move.b	#$99,obColType(a0)
000091A4                            
000091A4                            	@notSLZ:
000091A4 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000091AA 6600                       		bne.s	@length
000091AC                            
000091AC 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000091B4 317C 0391 0002             		move.w	#$391,obGfx(a0)
000091BA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000091C0 117C 0018 0016             		move.b	#$18,obHeight(a0)
000091C6 117C 0086 0020             		move.b	#$86,obColType(a0)
000091CC 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000091D2                            
000091D2                            @length:
000091D2 1810                       		move.b	0(a0),d4
000091D4 7200                       		moveq	#0,d1
000091D6 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000091DA 1212                       		move.b	(a2),d1		; move a2 to d1
000091DC 3F01                       		move.w	d1,-(sp)
000091DE 0241 000F                  		andi.w	#$F,d1
000091E2 14FC 0000                  		move.b	#0,(a2)+
000091E6 3601                       		move.w	d1,d3
000091E8 E94B                       		lsl.w	#4,d3
000091EA 5003                       		addq.b	#8,d3
000091EC 1143 003C                  		move.b	d3,$3C(a0)
000091F0 5103                       		subq.b	#8,d3
000091F2 4A28 001A                  		tst.b	obFrame(a0)
000091F6 6700                       		beq.s	@makechain
000091F8 5003                       		addq.b	#8,d3
000091FA 5341                       		subq.w	#1,d1
000091FC                            
000091FC                            @makechain:
000091FC 6100 0000                  		bsr.w	FindFreeObj
00009200 6600                       		bne.s	@fail
00009202 5228 0028                  		addq.b	#1,obSubtype(a0)
00009206 3A09                       		move.w	a1,d5
00009208 0445 D000                  		subi.w	#$D000,d5
0000920C EC4D                       		lsr.w	#6,d5
0000920E 0245 007F                  		andi.w	#$7F,d5
00009212 14C5                       		move.b	d5,(a2)+
00009214 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000921A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000921C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009222 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009228 08A9 0006 0002             		bclr	#6,obGfx(a1)
0000922E 137C 0004 0001             		move.b	#4,obRender(a1)
00009234 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000923A 137C 0008 0014             		move.b	#8,obActWid(a1)
00009240 137C 0001 001A             		move.b	#1,obFrame(a1)
00009246 1343 003C                  		move.b	d3,$3C(a1)
0000924A 0403 0010                  		subi.b	#$10,d3
0000924E 6400                       		bcc.s	@notanchor
00009250 137C 0002 001A             		move.b	#2,obFrame(a1)
00009256 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000925C 08E9 0006 0002             		bset	#6,obGfx(a1)
00009262                            
00009262                            	@notanchor:
00009262 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009266                            
00009266                            	@fail:
00009266 3A08                       		move.w	a0,d5
00009268 0445 D000                  		subi.w	#$D000,d5
0000926C EC4D                       		lsr.w	#6,d5
0000926E 0245 007F                  		andi.w	#$7F,d5
00009272 14C5                       		move.b	d5,(a2)+
00009274 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000927A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009280 321F                       		move.w	(sp)+,d1
00009282 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009286 6700                       		beq.s	@not1X	; if not, branch
00009288 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009290 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009296 117C 0001 001A             		move.b	#1,obFrame(a0)
0000929C 317C 0100 0018             		move.w	#$100,obPriority(a0)
000092A2 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000092A8                            
000092A8                            	@not1X:
000092A8 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000092AE 6700                       		beq.s	Swing_Action	; if yes, branch
000092B0                            
000092B0                            Swing_SetSolid:	; Routine 2
000092B0 7200                       		moveq	#0,d1
000092B2 1228 0014                  		move.b	obActWid(a0),d1
000092B6 7600                       		moveq	#0,d3
000092B8 1628 0016                  		move.b	obHeight(a0),d3
000092BC 6100 FA76                  		bsr.w	Swing_Solid
000092C0                            
000092C0                            Swing_Action:	; Routine $C
000092C0 6100 0000                  		bsr.w	Swing_Move
000092C4 6100 0000                  		bsr.w	DisplaySprite
000092C8 6000 0000                  		bra.w	Swing_ChkDel
000092CC                            ; ===========================================================================
000092CC                            
000092CC                            Swing_Action2:	; Routine 4
000092CC 7200                       		moveq	#0,d1
000092CE 1228 0014                  		move.b	obActWid(a0),d1
000092D2 6100 FAC4                  		bsr.w	ExitPlatform
000092D6 3F28 0008                  		move.w	obX(a0),-(sp)
000092DA 6100 0000                  		bsr.w	Swing_Move
000092DE 341F                       		move.w	(sp)+,d2
000092E0 7600                       		moveq	#0,d3
000092E2 1628 0016                  		move.b	obHeight(a0),d3
000092E6 5203                       		addq.b	#1,d3
000092E8 6100 0000                  		bsr.w	MvSonicOnPtfm
000092EC 6100 0000                  		bsr.w	DisplaySprite
000092F0 6000 0000                  		bra.w	Swing_ChkDel
000092F4                            
000092F4 4E75                       		rts
000092F4 4E75                       		rts
000092F6                            
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Subroutine to	change Sonic's position with a platform
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            
000092F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092F6                            
000092F6                            
000092F6                            MvSonicOnPtfm:
000092F6 43F8 D000                  		lea	(v_player).w,a1
000092FA 3028 000C                  		move.w	obY(a0),d0
000092FE 9043                       		sub.w	d3,d0
00009300 6000                       		bra.s	MvSonic2
00009302                            ; End of function MvSonicOnPtfm
00009302                            
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Subroutine to	change Sonic's position with a platform
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009302                            
00009302                            
00009302                            MvSonicOnPtfm2:
00009302 43F8 D000                  		lea	(v_player).w,a1
00009306 3028 000C                  		move.w	obY(a0),d0
0000930A 0440 0009                  		subi.w	#9,d0
0000930E                            
0000930E                            MvSonic2:
0000930E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009312 6B00                       		bmi.s	locret_7B62
00009314 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000931A 6400                       		bhs.s	locret_7B62
0000931C 4A78 FE08                  		tst.w	(v_debuguse).w
00009320 6600                       		bne.s	locret_7B62
00009322 7200                       		moveq	#0,d1
00009324 1229 0016                  		move.b	obHeight(a1),d1
00009328 9041                       		sub.w	d1,d0
0000932A 3340 000C                  		move.w	d0,obY(a1)
0000932E 9468 0008                  		sub.w	obX(a0),d2
00009332 9569 0008                  		sub.w	d2,obX(a1)
00009336                            
00009336                            locret_7B62:
00009336 4E75                       		rts	
00009338                            ; End of function MvSonicOnPtfm2
00009338                            
00009338                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009338                            
00009338                            
00009338                            Swing_Move:
00009338 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000933C 323C 0080                  		move.w	#$80,d1
00009340 0828 0000 0022             		btst	#0,obStatus(a0)
00009346 6700                       		beq.s	loc_7B78
00009348 4440                       		neg.w	d0
0000934A D041                       		add.w	d1,d0
0000934C                            
0000934C                            loc_7B78:
0000934C 6000                       		bra.s	Swing_Move2
0000934E                            ; End of function Swing_Move
0000934E                            
0000934E                            
0000934E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000934E                            
0000934E                            
0000934E                            Obj48_Move:
0000934E 4A28 003D                  		tst.b	$3D(a0)
00009352 6600                       		bne.s	loc_7B9C
00009354 3028 003E                  		move.w	$3E(a0),d0
00009358 5040                       		addq.w	#8,d0
0000935A 3140 003E                  		move.w	d0,$3E(a0)
0000935E D168 0026                  		add.w	d0,obAngle(a0)
00009362 0C40 0200                  		cmpi.w	#$200,d0
00009366 6600                       		bne.s	loc_7BB6
00009368 117C 0001 003D             		move.b	#1,$3D(a0)
0000936E 6000                       		bra.s	loc_7BB6
00009370                            ; ===========================================================================
00009370                            
00009370                            loc_7B9C:
00009370 3028 003E                  		move.w	$3E(a0),d0
00009374 5140                       		subq.w	#8,d0
00009376 3140 003E                  		move.w	d0,$3E(a0)
0000937A D168 0026                  		add.w	d0,obAngle(a0)
0000937E 0C40 FE00                  		cmpi.w	#-$200,d0
00009382 6600                       		bne.s	loc_7BB6
00009384 117C 0000 003D             		move.b	#0,$3D(a0)
0000938A                            
0000938A                            loc_7BB6:
0000938A 1028 0026                  		move.b	obAngle(a0),d0
0000938E                            ; End of function Obj48_Move
0000938E                            
0000938E                            
0000938E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000938E                            
0000938E                            
0000938E                            Swing_Move2:
0000938E 6100 A93A                  		bsr.w	CalcSine
00009392 3428 0038                  		move.w	$38(a0),d2
00009396 3628 003A                  		move.w	$3A(a0),d3
0000939A 45E8 0028                  		lea	obSubtype(a0),a2
0000939E 7C00                       		moveq	#0,d6
000093A0 1C1A                       		move.b	(a2)+,d6
000093A2                            
000093A2                            loc_7BCE:
000093A2 7800                       		moveq	#0,d4
000093A4 181A                       		move.b	(a2)+,d4
000093A6 ED4C                       		lsl.w	#6,d4
000093A8 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000093AE 2244                       		movea.l	d4,a1
000093B0 7800                       		moveq	#0,d4
000093B2 1829 003C                  		move.b	$3C(a1),d4
000093B6 2A04                       		move.l	d4,d5
000093B8 C9C0                       		muls.w	d0,d4
000093BA E084                       		asr.l	#8,d4
000093BC CBC1                       		muls.w	d1,d5
000093BE E085                       		asr.l	#8,d5
000093C0 D842                       		add.w	d2,d4
000093C2 DA43                       		add.w	d3,d5
000093C4 3344 000C                  		move.w	d4,obY(a1)
000093C8 3345 0008                  		move.w	d5,obX(a1)
000093CC 51CE FFD4                  		dbf	d6,loc_7BCE
000093D0 4E75                       		rts	
000093D2                            ; End of function Swing_Move2
000093D2                            
000093D2                            ; ===========================================================================
000093D2                            
000093D2                            Swing_ChkDel:
000093F0 4E75                       		rts	
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Swing_DelAll:
000093F2 7400                       		moveq	#0,d2
000093F4 45E8 0028                  		lea	obSubtype(a0),a2
000093F8 141A                       		move.b	(a2)+,d2
000093FA                            
000093FA                            Swing_DelLoop:
000093FA 7000                       		moveq	#0,d0
000093FC 101A                       		move.b	(a2)+,d0
000093FE ED48                       		lsl.w	#6,d0
00009400 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009406 2240                       		movea.l	d0,a1
00009408 6100 0000                  		bsr.w	DeleteChild
0000940C 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009410 4E75                       		rts	
00009412                            ; ===========================================================================
00009412                            
00009412                            Swing_Delete:	; Routine 6, 8
00009412 6100 0000                  		bsr.w	DeleteObject
00009416 4E75                       		rts	
00009418                            ; ===========================================================================
00009418                            
00009418                            Swing_Display:	; Routine $A
00009418 6000 0000                  		bra.w	DisplaySprite
00009418 6000 0000                  		bra.w	DisplaySprite
0000941C                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            Map_Swing_GHZ_internal:
0000941C 0000                       		dc.w @block-Map_Swing_GHZ_internal
0000941E 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009420 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009422 02                         @block:		dc.b 2
00009423 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009428 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000942D 01                         @chain:		dc.b 1
0000942E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009433 01                         @anchor:	dc.b 1
00009434 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000943A 00                         		even
0000943A 00                         		even
0000943A                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            ; Sprite mappings - SLZ	swinging platforms
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            Map_Swing_SLZ_internal:
0000943A 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000943C 0000                       		dc.w @chain-Map_Swing_SLZ_internal
0000943E 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009440 08                         @block:		dc.b 8
00009441 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009446 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000944B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009450 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009455 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000945A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000945F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009464 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009469 01                         @chain:		dc.b 1
0000946A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000946F 01                         @anchor:	dc.b 1
00009470 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009476 00                         		even
00009476 00                         		even
00009476                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009476                            ; ---------------------------------------------------------------------------
00009476                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009476                            ; ---------------------------------------------------------------------------
00009476                            
00009476                            Helix:
00009476 7000                       		moveq	#0,d0
00009478 1028 0024                  		move.b	obRoutine(a0),d0
0000947C 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009480 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009484                            ; ===========================================================================
00009484 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009486 0000                       		dc.w Hel_Action-Hel_Index
00009488 0000                       		dc.w Hel_Action-Hel_Index
0000948A 0000                       		dc.w Hel_Delete-Hel_Index
0000948C 0000                       		dc.w Hel_Display-Hel_Index
0000948E                            
0000948E =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
0000948E                            
0000948E                            ;		$29-38 are used for child object addresses
0000948E                            ; ===========================================================================
0000948E                            
0000948E                            Hel_Main:	; Routine 0
0000948E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009492 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000949A 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000094A0 117C 0007 0022             		move.b	#7,obStatus(a0)
000094A6 117C 0004 0001             		move.b	#4,obRender(a0)
000094AC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000094B2 117C 0008 0014             		move.b	#8,obActWid(a0)
000094B8 3428 000C                  		move.w	obY(a0),d2
000094BC 3628 0008                  		move.w	obX(a0),d3
000094C0 1810                       		move.b	0(a0),d4
000094C2 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000094C6 7200                       		moveq	#0,d1
000094C8 1212                       		move.b	(a2),d1		; move helix length to d1
000094CA 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000094CE 3001                       		move.w	d1,d0
000094D0 E248                       		lsr.w	#1,d0
000094D2 E948                       		lsl.w	#4,d0
000094D4 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000094D6 5501                       		subq.b	#2,d1
000094D8 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000094DA 7C00                       		moveq	#0,d6
000094DC                            
000094DC                            Hel_Build:
000094DC 6100 0000                  		bsr.w	FindFreeObj
000094E0 6600                       		bne.s	Hel_Action
000094E2 5228 0028                  		addq.b	#1,obSubtype(a0)
000094E6 3A09                       		move.w	a1,d5
000094E8 0445 D000                  		subi.w	#$D000,d5
000094EC EC4D                       		lsr.w	#6,d5
000094EE 0245 007F                  		andi.w	#$7F,d5
000094F2 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000094F4 137C 0008 0024             		move.b	#8,obRoutine(a1)
000094FA 1284                       		move.b	d4,0(a1)
000094FC 3342 000C                  		move.w	d2,ObY(a1)
00009500 3343 0008                  		move.w	d3,obX(a1)
00009504 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000950A 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009510 137C 0004 0001             		move.b	#4,obRender(a1)
00009516 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000951C 137C 0008 0014             		move.b	#8,obActWid(a1)
00009522 1346 003E                  		move.b	d6,hel_frame(a1)
00009526 5206                       		addq.b	#1,d6
00009528 0206 0007                  		andi.b	#7,d6
0000952C 0643 0010                  		addi.w	#$10,d3
00009530 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009534 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009536                            
00009536 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000953A 5206                       		addq.b	#1,d6
0000953C 0206 0007                  		andi.b	#7,d6
00009540 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009544 5228 0028                  		addq.b	#1,obSubtype(a0)
00009548                            
00009548                            	Hel_NotCentre:
00009548 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000954C                            
0000954C                            Hel_Action:	; Routine 2, 4
0000954C 6100 0000                  		bsr.w	Hel_RotateSpikes
00009550 6100 0000                  		bsr.w	DisplaySprite
00009554 6000 0000                  		bra.w	Hel_ChkDel
00009558                            
00009558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009558                            
00009558                            
00009558                            Hel_RotateSpikes:
00009558 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000955C 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009562 D028 003E                  		add.b	hel_frame(a0),d0
00009566 0200 0007                  		andi.b	#7,d0
0000956A 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000956E 6600                       		bne.s	locret_7DA6
00009570 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009576                            
00009576                            locret_7DA6:
00009576 4E75                       		rts	
00009578                            ; End of function Hel_RotateSpikes
00009578                            
00009578                            ; ===========================================================================
00009578                            
00009578                            Hel_ChkDel:
00009596 4E75                       		rts	
00009598                            ; ===========================================================================
00009598                            
00009598                            Hel_DelAll:
00009598 7400                       		moveq	#0,d2
0000959A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000959E 141A                       		move.b	(a2)+,d2	; move helix length to d2
000095A0 5502                       		subq.b	#2,d2
000095A2 6500                       		bcs.s	Hel_Delete
000095A4                            
000095A4                            	Hel_DelLoop:
000095A4 7000                       		moveq	#0,d0
000095A6 101A                       		move.b	(a2)+,d0
000095A8 ED48                       		lsl.w	#6,d0
000095AA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095B0 2240                       		movea.l	d0,a1		; get child address
000095B2 6100 0000                  		bsr.w	DeleteChild	; delete object
000095B6 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000095BA                            
000095BA                            Hel_Delete:	; Routine 6
000095BA 6100 0000                  		bsr.w	DeleteObject
000095BE 4E75                       		rts	
000095C0                            ; ===========================================================================
000095C0                            
000095C0                            Hel_Display:	; Routine 8
000095C0 6100 FF96                  		bsr.w	Hel_RotateSpikes
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C8                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            Map_Hel_internal:
000095C8 0000                       		dc.w byte_7E08-Map_Hel_internal
000095CA 0000                       		dc.w byte_7E0E-Map_Hel_internal
000095CC 0000                       		dc.w byte_7E14-Map_Hel_internal
000095CE 0000                       		dc.w byte_7E1A-Map_Hel_internal
000095D0 0000                       		dc.w byte_7E20-Map_Hel_internal
000095D2 0000                       		dc.w byte_7E26-Map_Hel_internal
000095D4 0000                       		dc.w byte_7E2E-Map_Hel_internal
000095D6 0000                       		dc.w byte_7E2C-Map_Hel_internal
000095D8 01                         byte_7E08:	dc.b 1
000095D9 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000095DE 01                         byte_7E0E:	dc.b 1
000095DF F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000095E4 01                         byte_7E14:	dc.b 1
000095E5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000095EA 01                         byte_7E1A:	dc.b 1
000095EB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000095F0 01                         byte_7E20:	dc.b 1
000095F1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000095F6 01                         byte_7E26:	dc.b 1
000095F7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000095FC 01                         byte_7E2C:	dc.b 1
000095FD F4                         		dc.b $F4
000095FE                            byte_7E2E:	; reads the 0 below	; not visible
000095FE 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009602                            		even
00009602                            		even
00009602                            		include	"_incObj\18 Platforms.asm"
00009602                            ; ---------------------------------------------------------------------------
00009602                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009602                            ; ---------------------------------------------------------------------------
00009602                            
00009602                            BasicPlatform:
00009602 7000                       		moveq	#0,d0
00009604 1028 0024                  		move.b	obRoutine(a0),d0
00009608 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
0000960C 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009610                            ; ===========================================================================
00009610 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009612 0000                       		dc.w Plat_Solid-Plat_Index
00009614 0000                       		dc.w Plat_Action2-Plat_Index
00009616 0000                       		dc.w Plat_Delete-Plat_Index
00009618 0000                       		dc.w Plat_Action-Plat_Index
0000961A                            ; ===========================================================================
0000961A                            
0000961A                            Plat_Main:	; Routine 0
0000961A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000961E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009624 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
0000962C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009632 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009638 6600                       		bne.s	@notSYZ
0000963A                            
0000963A 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009642 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009648                            
00009648                            	@notSYZ:
00009648 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000964E 6600                       		bne.s	@notSLZ
00009650 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009658 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000965E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009664 117C 0003 0028             		move.b	#3,obSubtype(a0)
0000966A                            
0000966A                            	@notSLZ:
0000966A 117C 0004 0001             		move.b	#4,obRender(a0)
00009670 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009676 3168 000C 002C             		move.w	obY(a0),$2C(a0)
0000967C 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009682 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009688 317C 0080 0026             		move.w	#$80,obAngle(a0)
0000968E 7200                       		moveq	#0,d1
00009690 1028 0028                  		move.b	obSubtype(a0),d0
00009694 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009698 6600                       		bne.s	@setframe	; if not, branch
0000969A 5201                       		addq.b	#1,d1		; use frame #1
0000969C 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
000096A2                            
000096A2                            	@setframe:
000096A2 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
000096A6                            
000096A6                            Plat_Solid:	; Routine 2
000096A6 4A28 0038                  		tst.b	$38(a0)
000096AA 6700                       		beq.s	loc_7EE0
000096AC 5928 0038                  		subq.b	#4,$38(a0)
000096B0                            
000096B0                            	loc_7EE0:
000096B0 7200                       		moveq	#0,d1
000096B2 1228 0014                  		move.b	obActWid(a0),d1
000096B6 6100 F56C                  		bsr.w	PlatformObject
000096BA                            
000096BA                            Plat_Action:	; Routine 8
000096BA 6100 0000                  		bsr.w	Plat_Move
000096BE 6100 0000                  		bsr.w	Plat_Nudge
000096C2 6100 0000                  		bsr.w	DisplaySprite
000096C6 6000 0000                  		bra.w	Plat_ChkDel
000096CA                            ; ===========================================================================
000096CA                            
000096CA                            Plat_Action2:	; Routine 4
000096CA 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000096D0 6700                       		beq.s	loc_7F06
000096D2 5828 0038                  		addq.b	#4,$38(a0)
000096D6                            
000096D6                            	loc_7F06:
000096D6 7200                       		moveq	#0,d1
000096D8 1228 0014                  		move.b	obActWid(a0),d1
000096DC 6100 F6BA                  		bsr.w	ExitPlatform
000096E0 3F28 0008                  		move.w	obX(a0),-(sp)
000096E4 6100 0000                  		bsr.w	Plat_Move
000096E8 6100 0000                  		bsr.w	Plat_Nudge
000096EC 341F                       		move.w	(sp)+,d2
000096EE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000096F2 6100 0000                  		bsr.w	DisplaySprite
000096F6 6000 0000                  		bra.w	Plat_ChkDel
000096FA                            
000096FA 4E75                       		rts
000096FC                            
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            ; Subroutine to	move platform slightly when you	stand on it
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            
000096FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096FC                            
000096FC                            
000096FC                            Plat_Nudge:
000096FC 1028 0038                  		move.b	$38(a0),d0
00009700 6100 A5C8                  		bsr.w	CalcSine
00009704 323C 0400                  		move.w	#$400,d1
00009708 C1C1                       		muls.w	d1,d0
0000970A 4840                       		swap	d0
0000970C D068 002C                  		add.w	$2C(a0),d0
00009710 3140 000C                  		move.w	d0,obY(a0)
00009714 4E75                       		rts	
00009716                            ; End of function Plat_Nudge
00009716                            
00009716                            ; ---------------------------------------------------------------------------
00009716                            ; Subroutine to	move platforms
00009716                            ; ---------------------------------------------------------------------------
00009716                            
00009716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009716                            
00009716                            
00009716                            Plat_Move:
00009716 7000                       		moveq	#0,d0
00009718 1028 0028                  		move.b	obSubtype(a0),d0
0000971C 0240 000F                  		andi.w	#$F,d0
00009720 D040                       		add.w	d0,d0
00009722 323B 0000                  		move.w	@index(pc,d0.w),d1
00009726 4EFB 1000                  		jmp	@index(pc,d1.w)
0000972A                            ; End of function Plat_Move
0000972A                            
0000972A                            ; ===========================================================================
0000972A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0000972E 0000 0000                  		dc.w @type02-@index, @type03-@index
00009732 0000 0000                  		dc.w @type04-@index, @type05-@index
00009736 0000 0000                  		dc.w @type06-@index, @type07-@index
0000973A 0000 0000                  		dc.w @type08-@index, @type00-@index
0000973E 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009742 0000                       		dc.w @type0C-@index
00009744                            ; ===========================================================================
00009744                            
00009744                            @type00:
00009744 4E75                       		rts			; platform 00 doesn't move
00009746                            ; ===========================================================================
00009746                            
00009746                            @type05:
00009746 3028 0032                  		move.w	$32(a0),d0
0000974A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000974E 4401                       		neg.b	d1		; reverse platform-motion
00009750 0601 0040                  		addi.b	#$40,d1
00009754 6000                       		bra.s	@type01_move
00009756                            ; ===========================================================================
00009756                            
00009756                            @type01:
00009756 3028 0032                  		move.w	$32(a0),d0
0000975A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000975E 0401 0040                  		subi.b	#$40,d1
00009762                            
00009762                            	@type01_move:
00009762 4881                       		ext.w	d1
00009764 D041                       		add.w	d1,d0
00009766 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
0000976A 6000 0000                  		bra.w	@chgmotion
0000976E                            ; ===========================================================================
0000976E                            
0000976E                            @type0C:
0000976E 3028 0034                  		move.w	$34(a0),d0
00009772 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009776 4401                       		neg.b	d1		; reverse platform-motion
00009778 0601 0030                  		addi.b	#$30,d1
0000977C 6000                       		bra.s	@type02_move
0000977E                            ; ===========================================================================
0000977E                            
0000977E                            @type0B:
0000977E 3028 0034                  		move.w	$34(a0),d0
00009782 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009786 0401 0030                  		subi.b	#$30,d1
0000978A 6000                       		bra.s	@type02_move
0000978C                            ; ===========================================================================
0000978C                            
0000978C                            @type06:
0000978C 3028 0034                  		move.w	$34(a0),d0
00009790 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009794 4401                       		neg.b	d1		; reverse platform-motion
00009796 0601 0040                  		addi.b	#$40,d1
0000979A 6000                       		bra.s	@type02_move
0000979C                            ; ===========================================================================
0000979C                            
0000979C                            @type02:
0000979C 3028 0034                  		move.w	$34(a0),d0
000097A0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097A4 0401 0040                  		subi.b	#$40,d1
000097A8                            
000097A8                            	@type02_move:
000097A8 4881                       		ext.w	d1
000097AA D041                       		add.w	d1,d0
000097AC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000097B0 6000 0000                  		bra.w	@chgmotion
000097B4                            ; ===========================================================================
000097B4                            
000097B4                            @type03:
000097B4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000097B8 6600                       		bne.s	@type03_wait	; if yes, branch
000097BA 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
000097C0 6700                       		beq.s	@type03_nomove	; if not, branch
000097C2 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000097C8                            
000097C8                            	@type03_nomove:
000097C8 4E75                       		rts	
000097CA                            
000097CA                            	@type03_wait:
000097CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000097CE 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000097D0 317C 0020 003A             		move.w	#32,$3A(a0)
000097D6 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000097DA 4E75                       		rts	
000097DC                            ; ===========================================================================
000097DC                            
000097DC                            @type04:
000097DC 4A68 003A                  		tst.w	$3A(a0)
000097E0 6700                       		beq.s	@loc_8048
000097E2 5368 003A                  		subq.w	#1,$3A(a0)
000097E6 6600                       		bne.s	@loc_8048
000097E8 0828 0003 0022             		btst	#3,obStatus(a0)
000097EE 6700                       		beq.s	@loc_8042
000097F0 08E9 0001 0022             		bset	#1,obStatus(a1)
000097F6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000097FC 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009802 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009808 4228 0025                  		clr.b	$25(a0)
0000980C 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009812                            
00009812                            	@loc_8042:
00009812 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009818                            
00009818                            	@loc_8048:
00009818 2628 002C                  		move.l	$2C(a0),d3
0000981C 3028 0012                  		move.w	obVelY(a0),d0
00009820 48C0                       		ext.l	d0
00009822 E180                       		asl.l	#8,d0
00009824 D680                       		add.l	d0,d3
00009826 2143 002C                  		move.l	d3,$2C(a0)
0000982A 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009830 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009834 0640 00E0                  		addi.w	#$E0,d0
00009838 B068 002C                  		cmp.w	$2C(a0),d0
0000983C 6400                       		bcc.s	@locret_8074
0000983E 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009844                            
00009844                            	@locret_8074:
00009844 4E75                       		rts	
00009846                            ; ===========================================================================
00009846                            
00009846                            @type07:
00009846 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000984A 6600                       		bne.s	@type07_wait	; if yes, branch
0000984C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009850 7000                       		moveq	#0,d0
00009852 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009856 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009858 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000985C 6700                       		beq.s	@type07_nomove	; if not, branch
0000985E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009864                            
00009864                            	@type07_nomove:
00009864 4E75                       		rts	
00009866                            
00009866                            	@type07_wait:
00009866 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000986A 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
0000986C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009870 4E75                       		rts	
00009872                            ; ===========================================================================
00009872                            
00009872                            @type08:
00009872 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009876 3028 0034                  		move.w	$34(a0),d0
0000987A 0440 0200                  		subi.w	#$200,d0
0000987E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009882 6600                       		bne.s	@type08_nostop	; if not, branch
00009884 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009888                            
00009888                            	@type08_nostop:
00009888 4E75                       		rts	
0000988A                            ; ===========================================================================
0000988A                            
0000988A                            @type0A:
0000988A 3028 0034                  		move.w	$34(a0),d0
0000988E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009892 0401 0040                  		subi.b	#$40,d1
00009896 4881                       		ext.w	d1
00009898 E241                       		asr.w	#1,d1
0000989A D041                       		add.w	d1,d0
0000989C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000098A0                            
000098A0                            @chgmotion:
000098A0 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
000098A6 4E75                       		rts	
000098A8                            ; ===========================================================================
000098A8                            
000098A8                            Plat_ChkDel:
000098C4 4E75                       		rts	
000098C6                            ; ===========================================================================
000098C6                            
000098C6                            Plat_Delete:	; Routine 6
000098C6 6000 0000                  		bra.w	DeleteObject
000098C6 6000 0000                  		bra.w	DeleteObject
000098CA                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            ; Sprite mappings - unused
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            Map_Plat_Unused_internal:
000098CA 0000                       		dc.w @small-Map_Plat_Unused_internal
000098CC 0000                       		dc.w @large-Map_Plat_Unused_internal
000098CE 02                         @small:		dc.b 2
000098CF F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000098D4 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000098D9 0A                         @large:		dc.b $A
000098DA F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000098DF 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000098E4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000098E9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000098EE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000098F3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000098F8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000098FD 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009902 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009907 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000990C                            		even
0000990C                            		even
0000990C                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            ; Sprite mappings - GHZ	platforms
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            Map_Plat_GHZ_internal:
0000990C 0000                       		dc.w @small-Map_Plat_GHZ_internal
0000990E 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009910 04                         @small:		dc.b 4
00009911 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009916 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000991B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009920 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009925 0A                         @large:		dc.b $A
00009926 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000992B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009930 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009935 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000993A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000993F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009944 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009949 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000994E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009953 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009958                            		even
00009958                            		even
00009958                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009958                            ; ---------------------------------------------------------------------------
00009958                            ; Sprite mappings - SYZ	platforms
00009958                            ; ---------------------------------------------------------------------------
00009958                            Map_Plat_SYZ_internal:
00009958 0000                       		dc.w @platform-Map_Plat_SYZ_internal
0000995A 03                         @platform:	dc.b 3
0000995B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009960 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009965 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000996A                            		even
0000996A                            		even
0000996A                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            ; Sprite mappings - SLZ	platforms
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            Map_Plat_SLZ_internal:
0000996A 0000                       		dc.w @platform-Map_Plat_SLZ_internal
0000996C 02                         @platform:	dc.b 2
0000996D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009972 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009978 00                         		even
00009978 00                         		even
00009978                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009978                            ; ---------------------------------------------------------------------------
00009978                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009978                            ; ---------------------------------------------------------------------------
00009978                            Map_GBall_internal:
00009978 0000                       		dc.w @shiny-Map_GBall_internal
0000997A 0000                       		dc.w @check1-Map_GBall_internal
0000997C 0000                       		dc.w @check2-Map_GBall_internal
0000997E 0000                       		dc.w @check3-Map_GBall_internal
00009980 06                         @shiny:		dc.b 6
00009981 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009986 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000998B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009990 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009995 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000999A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000999F 04                         @check1:	dc.b 4
000099A0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000099A5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000099AA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000099AF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000099B4 04                         @check2:	dc.b 4
000099B5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000099BA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000099BF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000099C4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000099C9 04                         @check3:	dc.b 4
000099CA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000099CF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000099D4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000099D9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000099DE                            		even
000099DE                            		even
000099DE                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Object 1A - GHZ collapsing ledge
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            
000099DE                            CollapseLedge:
000099DE 7000                       		moveq	#0,d0
000099E0 1028 0024                  		move.b	obRoutine(a0),d0
000099E4 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000099E8 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000099EC                            ; ===========================================================================
000099EC 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000099F0 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000099F4 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000099F8                            
000099F8 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000099F8 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000099F8                            ; ===========================================================================
000099F8                            
000099F8                            Ledge_Main:	; Routine 0
000099F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000099FC 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009A04 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A0A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A10 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A16 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009A1C 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009A22 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009A28 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009A2E 08E8 0004 0001             		bset	#4,obRender(a0)
00009A34                            
00009A34                            Ledge_Touch:	; Routine 2
00009A34 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A38 6700                       		beq.s	@slope		; if not, branch
00009A3A 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009A3E 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009A42 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A46                            
00009A46                            	@slope:
00009A46 323C 0030                  		move.w	#$30,d1
00009A4A 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A50 6100 F2A6                  		bsr.w	SlopeObject
00009A54 6000 0000                  		bra.w	RememberState
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            Ledge_Collapse:	; Routine 4
00009A58 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009A5C 6700 0000                  		beq.w	loc_847A
00009A60 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009A66 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009A6A                            
00009A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6A                            
00009A6A                            
00009A6A                            Ledge_WalkOff:	; Routine $A
00009A6A 323C 0030                  		move.w	#$30,d1
00009A6E 6100 F328                  		bsr.w	ExitPlatform
00009A72 323C 0030                  		move.w	#$30,d1
00009A76 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A7C 3428 0008                  		move.w	obX(a0),d2
00009A80 6100 0000                  		bsr.w	SlopeObject2
00009A84 6000 0000                  		bra.w	RememberState
00009A88                            ; End of function Ledge_WalkOff
00009A88                            
00009A88                            ; ===========================================================================
00009A88                            
00009A88                            Ledge_Display:	; Routine 6
00009A88 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009A8C 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009A8E 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A92 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009A96 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A9A 6000 0000                  		bra.w	DisplaySprite
00009A9E                            ; ===========================================================================
00009A9E                            
00009A9E                            loc_82D0:
00009A9E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009AA2 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009AA6 43F8 D000                  		lea	(v_player).w,a1
00009AAA 0829 0003 0022             		btst	#3,obStatus(a1)
00009AB0 6700                       		beq.s	loc_82FC
00009AB2 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009AB6 6600                       		bne.s	locret_8308
00009AB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009ABE 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009AC4 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009ACA                            
00009ACA                            loc_82FC:
00009ACA 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009AD0 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009AD6                            
00009AD6                            locret_8308:
00009AD6 4E75                       		rts	
00009AD8                            ; ===========================================================================
00009AD8                            
00009AD8                            Ledge_TimeZero:
00009AD8 6100 0000                  		bsr.w	ObjectFall
00009ADC 6100 0000                  		bsr.w	DisplaySprite
00009AE0 4A28 0001                  		tst.b	obRender(a0)
00009AE4 6A00                       		bpl.s	Ledge_Delete
00009AE6 4E75                       		rts	
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            Ledge_Delete:	; Routine 8
00009AE8 6100 0000                  		bsr.w	DeleteObject
00009AEC 4E75                       		rts	
00009AEC 4E75                       		rts	
00009AEE                            		include	"_incObj\53 Collapsing Floors.asm"
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            
00009AEE                            CollapseFloor:
00009AEE 7000                       		moveq	#0,d0
00009AF0 1028 0024                  		move.b	obRoutine(a0),d0
00009AF4 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009AF8 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009AFC                            ; ===========================================================================
00009AFC 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009B00 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009B04 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009B08                            
00009B08 =00000038                  cflo_timedelay:		equ $38
00009B08 =0000003A                  cflo_collapse_flag:	equ $3A
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            CFlo_Main:	; Routine 0
00009B08 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B0C 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009B14 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009B1A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009B20 6600                       		bne.s	@notSLZ
00009B22                            
00009B22 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009B28 5428 001A                  		addq.b	#2,obFrame(a0)
00009B2C                            
00009B2C                            	@notSLZ:
00009B2C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009B32 6600                       		bne.s	@notSBZ
00009B34 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009B3A                            
00009B3A                            	@notSBZ:
00009B3A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009B40 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009B46 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009B4C 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009B52                            
00009B52                            CFlo_Touch:	; Routine 2
00009B52 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009B56 6700                       		beq.s	@solid		; if not, branch
00009B58 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009B5C 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009B60 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009B64                            
00009B64                            	@solid:
00009B64 323C 0020                  		move.w	#$20,d1
00009B68 6100 F0BA                  		bsr.w	PlatformObject
00009B6C 4A28 0028                  		tst.b	obSubtype(a0)
00009B70 6A00                       		bpl.s	@remstate
00009B72 0829 0003 0022             		btst	#3,obStatus(a1)
00009B78 6700                       		beq.s	@remstate
00009B7A 08A8 0000 0001             		bclr	#0,obRender(a0)
00009B80 3029 0008                  		move.w	obX(a1),d0
00009B84 9068 0008                  		sub.w	obX(a0),d0
00009B88 6400                       		bcc.s	@remstate
00009B8A 08E8 0000 0001             		bset	#0,obRender(a0)
00009B90                            
00009B90                            	@remstate:
00009B90 6000 0000                  		bra.w	RememberState
00009B94                            ; ===========================================================================
00009B94                            
00009B94                            CFlo_Collapse:	; Routine 4
00009B94 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009B98 6700 0000                  		beq.w	loc_8458
00009B9C 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009BA2 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BA6                            
00009BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009BA6                            
00009BA6                            
00009BA6                            CFlo_WalkOff:	; Routine $A
00009BA6 323C 0020                  		move.w	#$20,d1
00009BAA 6100 F1EC                  		bsr.w	ExitPlatform
00009BAE 3428 0008                  		move.w	obX(a0),d2
00009BB2 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009BB6 6000 0000                  		bra.w	RememberState
00009BBA                            ; End of function CFlo_WalkOff
00009BBA                            
00009BBA                            ; ===========================================================================
00009BBA                            
00009BBA                            CFlo_Display:	; Routine 6
00009BBA 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009BBE 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009BC0 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009BC4 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009BC8 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009BCC 6000 0000                  		bra.w	DisplaySprite
00009BD0                            ; ===========================================================================
00009BD0                            
00009BD0                            loc_8402:
00009BD0 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BD4 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009BD8 43F8 D000                  		lea	(v_player).w,a1
00009BDC 0829 0003 0022             		btst	#3,obStatus(a1)
00009BE2 6700                       		beq.s	loc_842E
00009BE4 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009BE8 6600                       		bne.s	locret_843A
00009BEA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009BF0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009BF6 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009BFC                            
00009BFC                            loc_842E:
00009BFC 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C02 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009C08                            
00009C08                            locret_843A:
00009C08 4E75                       		rts	
00009C0A                            ; ===========================================================================
00009C0A                            
00009C0A                            CFlo_TimeZero:
00009C0A 6100 0000                  		bsr.w	ObjectFall
00009C0E 6100 0000                  		bsr.w	DisplaySprite
00009C12 4A28 0001                  		tst.b	obRender(a0)
00009C16 6A00                       		bpl.s	CFlo_Delete
00009C18 4E75                       		rts	
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            CFlo_Delete:	; Routine 8
00009C1A 6100 0000                  		bsr.w	DeleteObject
00009C1E 4E75                       		rts	
00009C20                            ; ===========================================================================
00009C20                            
00009C20                            CFlo_Fragment:
00009C20 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C26                            
00009C26                            loc_8458:
00009C26 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009C2C 0828 0000 0028             		btst	#0,obSubtype(a0)
00009C32 6700                       		beq.s	loc_846C
00009C34 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009C3A                            
00009C3A                            loc_846C:
00009C3A 7207                       		moveq	#7,d1
00009C3C 5228 001A                  		addq.b	#1,obFrame(a0)
00009C40 6000                       		bra.s	loc_8486
00009C40 6000                       		bra.s	loc_8486
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            Ledge_Fragment:
00009C42 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009C48                            
00009C48                            loc_847A:
00009C48 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009C4E 7218                       		moveq	#$18,d1
00009C50 5428 001A                  		addq.b	#2,obFrame(a0)
00009C54                            
00009C54                            loc_8486:
00009C54 7000                       		moveq	#0,d0
00009C56 1028 001A                  		move.b	obFrame(a0),d0
00009C5A D040                       		add.w	d0,d0
00009C5C 2668 0004                  		movea.l	obMap(a0),a3
00009C60 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009C64 524B                       		addq.w	#1,a3
00009C66 08E8 0005 0001             		bset	#5,obRender(a0)
00009C6C 1810                       		move.b	0(a0),d4
00009C6E 1A28 0001                  		move.b	obRender(a0),d5
00009C72 2248                       		movea.l	a0,a1
00009C74 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009C7A 1284                       		move.b	d4,0(a1)
00009C7C 234B 0004                  		move.l	a3,obMap(a1)
00009C80 1345 0001                  		move.b	d5,obRender(a1)
00009C84 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009C8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009C90 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009C96 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009C9C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CA2 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CA6 5341                       		subq.w	#1,d1
00009CA8 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009CAC 303C 005F                  		move.w	#$5F,d0
00009CB0                            ; ===========================================================================
00009CB0                            
00009CB0                            loc_84AA:
00009CB0 4A11                       		tst.b	(a1)
00009CB2 6700                       		beq.s	@cont		
00009CB4 43E9 0040                  		lea		$40(a1),a1
00009CB8 51C8 FFF6                  		dbf		d0,loc_84AA	
00009CBC 6600                       		bne.s	loc_84F2	
00009CBE                            	@cont:
00009CBE 5A4B                       		addq.w	#5,a3
00009CC0                            
00009CC0                            loc_84B2:
00009CC0 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009CC6 1284                       		move.b	d4,0(a1)
00009CC8 234B 0004                  		move.l	a3,obMap(a1)
00009CCC 1345 0001                  		move.b	d5,obRender(a1)
00009CD0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009CD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009CDC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009CE2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009CE8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CEE 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CF2 6100 0000                  		bsr.w	DisplaySprite1
00009CF6                            
00009CF6                            loc_84EE:
00009CF6 51C9 FFB8                  		dbf	d1,loc_84AA
00009CFA                            
00009CFA                            loc_84F2:
00009CFA 6100 0000                  		bsr.w	DisplaySprite
00009D08                            ; ===========================================================================
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009D08                            ; ---------------------------------------------------------------------------
00009D08 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009D18 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009D22 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009D2A 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009D32                            
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            
00009D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D32                            
00009D32                            
00009D32                            SlopeObject2:
00009D32 43F8 D000                  		lea	(v_player).w,a1
00009D36 0829 0003 0022             		btst	#3,obStatus(a1)
00009D3C 6700                       		beq.s	locret_856E
00009D3E 3029 0008                  		move.w	obX(a1),d0
00009D42 9068 0008                  		sub.w	obX(a0),d0
00009D46 D041                       		add.w	d1,d0
00009D48 E248                       		lsr.w	#1,d0
00009D4A 0828 0000 0001             		btst	#0,obRender(a0)
00009D50 6700                       		beq.s	loc_854E
00009D52 4640                       		not.w	d0
00009D54 D041                       		add.w	d1,d0
00009D56                            
00009D56                            loc_854E:
00009D56 7200                       		moveq	#0,d1
00009D58 1232 0000                  		move.b	(a2,d0.w),d1
00009D5C 3028 000C                  		move.w	obY(a0),d0
00009D60 9041                       		sub.w	d1,d0
00009D62 7200                       		moveq	#0,d1
00009D64 1229 0016                  		move.b	obHeight(a1),d1
00009D68 9041                       		sub.w	d1,d0
00009D6A 3340 000C                  		move.w	d0,obY(a1)
00009D6E 9468 0008                  		sub.w	obX(a0),d2
00009D72 9569 0008                  		sub.w	d2,obX(a1)
00009D76                            
00009D76                            locret_856E:
00009D76 4E75                       		rts	
00009D78                            ; End of function SlopeObject2
00009D78                            
00009D78                            ; ===========================================================================
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            ; Collision data for GHZ collapsing ledge
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            Ledge_SlopeData:
00009D78                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009DA8                            		even
00009DA8                            
00009DA8                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            ; Sprite mappings - GHZ	collapsing ledge
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            Map_Ledge_internal:
00009DA8 0000                       		dc.w @left-Map_Ledge_internal
00009DAA 0000                       		dc.w @right-Map_Ledge_internal
00009DAC 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009DAE 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009DB0 10                         @left:		dc.b $10
00009DB1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009DB6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009DBB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009DC0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009DC5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DCA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009DCF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009DD4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009DD9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DDE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009DE3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009DE8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009DED 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009DF2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009DF7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009DFC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E01 10                         @right:		dc.b $10
00009E02 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009E07 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E0C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E11 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E16 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E1B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009E20 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009E25 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009E2A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E2F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009E34 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009E39 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E3E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009E43 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E48 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009E4D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E52 19                         @leftsmash:	dc.b $19
00009E53 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009E58 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009E5D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009E62 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009E67 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009E6C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009E71 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009E76 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009E7B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E80 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009E85 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009E8A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009E8F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009E94 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009E99 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E9E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009EA3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009EA8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009EAD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009EB2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009EB7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009EBC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009EC1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009EC6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009ECB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009ED0 19                         @rightsmash:	dc.b $19
00009ED1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009ED6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009EDB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009EE0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009EE5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009EEA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009EEF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009EF4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009EF9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009EFE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009F03 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009F08 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009F0D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009F12 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009F17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009F1C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009F21 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009F26 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009F2B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009F30 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009F35 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009F3A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009F3F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009F44 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009F49 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009F4E                            		even
00009F4E                            		even
00009F4E                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            
00009F4E                            SME_WNa9T:	
00009F4E 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009F52 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009F56 08                         SME_WNa9T_8:	dc.b 8	
00009F57 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F5C 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F61 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F66 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F6B F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F70 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F75 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009F7A 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009F7F 08                         SME_WNa9T_31:	dc.b 8	
00009F80 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F85 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F8A F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F8F 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F94 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F99 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F9E F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009FA3 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009FA8 04                         SME_WNa9T_5A:	dc.b 4	
00009FA9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009FAE 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009FB3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009FB8 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009FBD 08                         SME_WNa9T_6F:	dc.b 8	
00009FBE F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009FC3 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009FC8 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009FCD F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009FD2 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009FD7 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009FDC 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009FE1 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009FE6                            		even
00009FE6                            		even
00009FE6                            
00009FE6                            		include	"_incObj\1C Scenery.asm"
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            
00009FE6                            Scenery:
00009FE6 7000                       		moveq	#0,d0
00009FE8 1028 0024                  		move.b	obRoutine(a0),d0
00009FEC 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009FF0 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009FF4                            ; ===========================================================================
00009FF4 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009FF6 0000                       		dc.w Scen_ChkDel-Scen_Index
00009FF8                            ; ===========================================================================
00009FF8                            
00009FF8                            Scen_Main:	; Routine 0
00009FF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00009FFC 7000                       		moveq	#0,d0
00009FFE 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A002 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A006 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A00A 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A00E 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A012 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A018 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A01C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A020 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A024 3028 0018                  		move.w obPriority(a0),d0 
0000A028 E248                       		lsr.w #1,d0 
0000A02A 0240 0380                  		andi.w #$380,d0 
0000A02E 3140 0018                  		move.w d0,obPriority(a0)		
0000A032 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A036                            
0000A036                            Scen_ChkDel:	; Routine 2
0000A054 6000 0000                  		bra.w	DisplaySprite
0000A058                            ; ===========================================================================
0000A058                            ; ---------------------------------------------------------------------------
0000A058                            ; Variables for	object $1C are stored in an array
0000A058                            ; ---------------------------------------------------------------------------
0000A058 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A05C 44D8                       		dc.w $44D8		; VRAM setting
0000A05E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A062 0000 0000                  		dc.l Map_Scen
0000A066 44D8                       		dc.w $44D8
0000A068 0008 0200                  		dc.b 0,	8, 2, 0
0000A06C 0000 0000                  		dc.l Map_Scen
0000A070 44D8                       		dc.w $44D8
0000A072 0008 0200                  		dc.b 0,	8, 2, 0
0000A076 0000 910C                  		dc.l Map_Bri
0000A07A 438E                       		dc.w $438E
0000A07C 0110 0100                  		dc.b 1,	$10, 1,	0
0000A080                            		even
0000A080                            		even
0000A080                            Map_Scen:	include	"_maps\Scenery.asm"
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            ; Sprite mappings - SLZ	lava thrower
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            Map_Scen_internal:
0000A080 0000                       		dc.w byte_8858-Map_Scen_internal
0000A082 01                         byte_8858:	dc.b 1
0000A083 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A088                            		even
0000A088                            		even
0000A088                            
0000A088                            		include	"_incObj\1D Water Switcher.asm"
0000A088                            ; ----------------------------------------------------------------------------
0000A088                            ; Object 1D - Water Switcher
0000A088                            ; ----------------------------------------------------------------------------
0000A088                            ; Sprite_1FCDC:
0000A088                            WaterSwitcher:
0000A088 7000                       		moveq	#0,d0
0000A08A 1028 0024                  		move.b	obRoutine(a0),d0
0000A08E 323B 0000                  		move.w	PSwapper_Index(pc,d0.w),d1
0000A092 4EFB 1000                  		jmp	PSwapper_Index(pc,d1.w) ;TIS Don't Delete if out of range
0000A096                            	;if DebugPathSwappers
0000A096                            		;tst.w	(f_debugcheat).w
0000A096                            		;bne.w	RememberState
0000A096                            	;endif
0000A096                            		; like RememberState, but doesn't display (Sonic 2's MarkObjGone3)
0000A096                            		;out_of_range	@offscreen
0000A096                            		;rts
0000A096                            
0000A096                            	;@offscreen:
0000A096                            		;lea	(v_objstate).w,a2
0000A096                            		;moveq	#0,d0
0000A096                            		;move.b	obRespawnNo(a0),d0
0000A096                            		;beq.s	@delete
0000A096                            		;bclr	#7,2(a2,d0.w)
0000A096                            
0000A096                            	;@delete:
0000A096                            		;bra.w	DeleteObject
0000A096                            ; ===========================================================================
0000A096                            ; off_1FCF0:
0000A096                            PSwapper_Index:
0000A096 0000                       		dc.w PSwapper_Init-PSwapper_Index	; 0
0000A098 0000                       		dc.w PSwapper_MainX-PSwapper_Index	; 2
0000A09A 0000                       		dc.w PSwapper_MainY-PSwapper_Index	; 4
0000A09C                            ; ===========================================================================
0000A09C                            ; loc_1FCF6:
0000A09C                            PSwapper_Init:
0000A09C 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainX
0000A0A0 217C 0000 0000 0004        		move.l	#Map_WaterSwitcher,obMap(a0)
0000A0A8 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000A0AE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A0B4 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A0BA 117C 0005 0018             		move.b	#5,obPriority(a0)
0000A0C0 1028 0028                  		move.b	obSubtype(a0),d0
0000A0C4 0800 0002                  		btst	#2,d0
0000A0C8 6700                       		beq.s	PSwapper_Init_CheckX
0000A0CA                            ;PSwapper_Init_CheckY:
0000A0CA 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainY
0000A0CE 0240 0007                  		andi.w	#7,d0
0000A0D2 1140 001A                  		move.b	d0,obFrame(a0)
0000A0D6 0240 0003                  		andi.w	#3,d0
0000A0DA D040                       		add.w	d0,d0
0000A0DC 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A0E2 3228 000C                  		move.w	obY(a0),d1
0000A0E6 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A0EA B269 000C                  		cmp.w	obY(a1),d1
0000A0EE 6400 0000                  		bhs.w	PSwapper_MainY
0000A0F2 117C 0001 0034             		move.b	#1,$34(a0)
0000A0F8 6000 0000                  		bra.w	PSwapper_MainY
0000A0FC                            ; ===========================================================================
0000A0FC                            word_1FD68:
0000A0FC 0020                       	dc.w   $20
0000A0FE 0040                       	dc.w   $40	; 1
0000A100 0080                       	dc.w   $80	; 2
0000A102 0100                       	dc.w  $100	; 3
0000A104                            ; ===========================================================================
0000A104                            ; loc_1FD70:
0000A104                            PSwapper_Init_CheckX:
0000A104 0240 0003                  		andi.w	#3,d0
0000A108 1140 001A                  		move.b	d0,obFrame(a0)
0000A10C D040                       		add.w	d0,d0
0000A10E 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A114 3228 0008                  		move.w	obX(a0),d1
0000A118 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A11C B269 0008                  		cmp.w	obX(a1),d1
0000A120 6400                       		bhs.s	@jump
0000A122 117C 0001 0034             		move.b	#1,$34(a0)
0000A128                            @jump:
0000A128                            
0000A128                            ; loc_1FDA4:
0000A128                            PSwapper_MainX:
0000A128 4A78 FE08                  		tst.w	(v_debuguse).w
0000A12C 6600 0000                  		bne.w	@locret
0000A130 3228 0008                  		move.w	obX(a0),d1
0000A134 45E8 0034                  		lea	$34(a0),a2
0000A138 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A13C 4A1A                       		tst.b	(a2)+
0000A13E 6600 0000                  		bne.w	PSwapper_MainX_Alt
0000A142 B269 0008                  		cmp.w	obX(a1),d1
0000A146 6200                       		bhi.s	@locret
0000A148 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A14E 3428 000C                  		move.w	obY(a0),d2
0000A152 3602                       		move.w	d2,d3
0000A154 3828 0032                  		move.w	$32(a0),d4
0000A158 9444                       		sub.w	d4,d2
0000A15A D644                       		add.w	d4,d3
0000A15C 3829 000C                  		move.w	obY(a1),d4
0000A160 B842                       		cmp.w	d2,d4
0000A162 6D00                       		blt.s	@locret
0000A164 B843                       		cmp.w	d3,d4
0000A166 6C00                       		bge.s	@locret
0000A168 1028 0028                  		move.b	obSubtype(a0),d0
0000A16C 6A00                       		bpl.s	@jump
0000A16E 0829 0001 0022             		btst	#1,obStatus(a1)
0000A174 6600                       		bne.s	@locret
0000A176                            @jump:
0000A176 0828 0000 0001             		btst	#0,obRender(a0)
0000A17C 6600                       		bne.s	@jump2
0000A17E                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A17E                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A17E 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A184                            
0000A184 0800 0003                  		btst	#3,d0
0000A188 6700                       		beq.s	@jump2
0000A18A                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A18A                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A18A 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A190                            
0000A190                            @jump2:
0000A190 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A196 0800 0005                  		btst	#5,d0
0000A19A 6700                       		beq.s	@jump3
0000A19C 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A1A2                            @jump3:
0000A1A2                            	;if DebugPathSwappers
0000A1A2                            		;tst.b	(f_debugcheat).w
0000A1A2                            		;beq.s	@locret
0000A1A2                            		;sfx	sfx_Lamppost,1,0,1
0000A1A2                            	;endif
0000A1A2                            @locret:
0000A1A2 4E75                       		rts
0000A1A4                            ; ===========================================================================
0000A1A4                            ; loc_1FE38:
0000A1A4                            PSwapper_MainX_Alt:
0000A1A4 B269 0008                  		cmp.w	obX(a1),d1
0000A1A8 6300                       		bls.s	@locret
0000A1AA 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A1B0 3428 000C                  		move.w	obY(a0),d2
0000A1B4 3602                       		move.w	d2,d3
0000A1B6 3828 0032                  		move.w	$32(a0),d4
0000A1BA 9444                       		sub.w	d4,d2
0000A1BC D644                       		add.w	d4,d3
0000A1BE 3829 000C                  		move.w	obY(a1),d4
0000A1C2 B842                       		cmp.w	d2,d4
0000A1C4 6D00                       		blt.s	@locret
0000A1C6 B843                       		cmp.w	d3,d4
0000A1C8 6C00                       		bge.s	@locret
0000A1CA 1028 0028                  		move.b	obSubtype(a0),d0
0000A1CE 6A00                       		bpl.s	@jump
0000A1D0 0829 0001 0022             		btst	#1,obStatus(a1)
0000A1D6 6600                       		bne.s	@locret
0000A1D8                            @jump:
0000A1D8 0828 0000 0001             		btst	#0,obRender(a0)
0000A1DE 6600                       		bne.s	@jump2
0000A1E0                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A1E0                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A1E0 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A1E6                            
0000A1E6 0800 0004                  		btst	#4,d0
0000A1EA 6700                       		beq.s	@jump2
0000A1EC                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A1EC                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A1EC 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A1F2                            
0000A1F2                            @jump2:
0000A1F2 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A1F8 0800 0006                  		btst	#6,d0
0000A1FC 6700                       		beq.s	@jump3
0000A1FE 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A204                            @jump3:
0000A204                            	;if DebugPathSwappers
0000A204                            		;tst.b	(f_debugcheat).w
0000A204                            		;beq.s	@locret
0000A204                            		;sfx	sfx_Lamppost,1,0,1
0000A204                            	;endif
0000A204                            @locret:
0000A204 4E75                       		rts
0000A206                            ; ===========================================================================
0000A206                            
0000A206                            PSwapper_MainY:
0000A206 4A78 FE08                  		tst.w	(v_debuguse).w
0000A20A 6600 0000                  		bne.w	@locret
0000A20E 3228 000C                  		move.w	obY(a0),d1
0000A212 45E8 0034                  		lea	$34(a0),a2
0000A216 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A21A 4A1A                       		tst.b	(a2)+
0000A21C 6600                       		bne.s	PSwapper_MainY_Alt
0000A21E B269 000C                  		cmp.w	obY(a1),d1
0000A222 6200                       		bhi.s	@locret
0000A224 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A22A 3428 0008                  		move.w	obX(a0),d2
0000A22E 3602                       		move.w	d2,d3
0000A230 3828 0032                  		move.w	$32(a0),d4
0000A234 9444                       		sub.w	d4,d2
0000A236 D644                       		add.w	d4,d3
0000A238 3829 0008                  		move.w	obX(a1),d4
0000A23C B842                       		cmp.w	d2,d4
0000A23E 6D00                       		blt.s	@locret
0000A240 B843                       		cmp.w	d3,d4
0000A242 6C00                       		bge.s	@locret
0000A244 1028 0028                  		move.b	obSubtype(a0),d0
0000A248 6A00                       		bpl.s	@jump
0000A24A 0829 0001 0022             		btst	#1,obStatus(a1)
0000A250 6600                       		bne.s	@locret
0000A252                            @jump:
0000A252 0828 0000 0001             		btst	#0,obRender(a0)
0000A258 6600                       		bne.s	@jump2
0000A25A                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A25A                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A25A 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A260                            
0000A260 0800 0003                  		btst	#3,d0
0000A264 6700                       		beq.s	@jump2
0000A266                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A266                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A266 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A26C                            
0000A26C                            @jump2:
0000A26C 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A272 0800 0005                  		btst	#5,d0
0000A276 6700                       		beq.s	@jump3
0000A278 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A27E                            @jump3:
0000A27E                            	;if DebugPathSwappers
0000A27E                            		;tst.b	(f_debugcheat).w
0000A27E                            		;beq.s	@locret
0000A27E                            		;sfx	sfx_Lamppost,1,0,1
0000A27E                            	;endif
0000A27E                            @locret:
0000A27E 4E75                       		rts
0000A280                            ; ===========================================================================
0000A280                            ; loc_1FF42:
0000A280                            PSwapper_MainY_Alt:
0000A280 B269 000C                  		cmp.w	obY(a1),d1
0000A284 6300                       		bls.s	@locret
0000A286 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A28C 3428 0008                  		move.w	obX(a0),d2
0000A290 3602                       		move.w	d2,d3
0000A292 3828 0032                  		move.w	$32(a0),d4
0000A296 9444                       		sub.w	d4,d2
0000A298 D644                       		add.w	d4,d3
0000A29A 3829 0008                  		move.w	obX(a1),d4
0000A29E B842                       		cmp.w	d2,d4
0000A2A0 6D00                       		blt.s	@locret
0000A2A2 B843                       		cmp.w	d3,d4
0000A2A4 6C00                       		bge.s	@locret
0000A2A6 1028 0028                  		move.b	obSubtype(a0),d0
0000A2AA 6A00                       		bpl.s	@jump
0000A2AC 0829 0001 0022             		btst	#1,obStatus(a1)
0000A2B2 6600                       		bne.s	@locret
0000A2B4                            @jump:
0000A2B4 0828 0000 0001             		btst	#0,obRender(a0)
0000A2BA 6600                       		bne.s	@jump2
0000A2BC                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A2BC                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A2BC 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A2C2                            
0000A2C2 0800 0004                  		btst	#4,d0
0000A2C6 6700                       		beq.s	@jump2
0000A2C8                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A2C8                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A2C8 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A2CE                            
0000A2CE                            @jump2:
0000A2CE 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A2D4 0800 0006                  		btst	#6,d0
0000A2D8 6700                       		beq.s	@jump3
0000A2DA 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A2E0                            @jump3:
0000A2E0                            	;if DebugPathSwappers
0000A2E0                            		;tst.b	(f_debugcheat).w
0000A2E0                            		;beq.s	@locret
0000A2E0                            		;sfx	sfx_Lamppost,1,0,1
0000A2E0                            	;endif
0000A2E0                            @locret:
0000A2E0 4E75                       		rts
0000A2E2                            ; ===========================================================================
0000A2E2                            ; -------------------------------------------------------------------------------
0000A2E2                            ; sprite mappings
0000A2E2                            ; -------------------------------------------------------------------------------
0000A2E2                            Map_WaterSwitcher:	include "_maps\WaterSwitcher.asm"
0000A2E2                            WaterSwitcher_Map:
0000A2E2 0000                       	dc.w	WaterSwitcher_0010-WaterSwitcher
0000A2E4 0000                       	dc.w	WaterSwitcher_0032-WaterSwitcher
0000A2E6 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A2E8 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A2EA 0000                       	dc.w	WaterSwitcher_0076-WaterSwitcher
0000A2EC 0000                       	dc.w	WaterSwitcher_0098-WaterSwitcher
0000A2EE 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A2F0 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A2F2                            
0000A2F2 04                         WaterSwitcher_0010:	dc.b 4
0000A2F3 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A2F8 F005 0000 F8               	dc.b $F0, 5, 0, 0, $F8
0000A2FD 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A302 1005 0000 F8               	dc.b $10, 5, 0, 0, $F8
0000A307                            
0000A307 04                         WaterSwitcher_0032:	dc.b 4
0000A308 C005 0000 F8               	dc.b $C0, 5, 0, 0, $F8
0000A30D E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A312 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A317 3005 0000 F8               	dc.b $30, 5, 0, 0, $F8
0000A31C                            
0000A31C 04                         WaterSwitcher_0054:	dc.b 4
0000A31D 8005 0000 F8               	dc.b $80, 5, 0, 0, $F8
0000A322 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A327 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A32C 7005 0000 F8               	dc.b $70, 5, 0, 0, $F8
0000A331                            
0000A331 04                         WaterSwitcher_0076:	dc.b 4
0000A332 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A337 F805 0000 F0               	dc.b $F8, 5, 0, 0, $F0
0000A33C F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A341 F805 0000 10               	dc.b $F8, 5, 0, 0, $10
0000A346                            
0000A346 04                         WaterSwitcher_0098:	dc.b 4
0000A347 F805 0000 C0               	dc.b $F8, 5, 0, 0, $C0
0000A34C F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A351 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A356 F805 0000 30               	dc.b $F8, 5, 0, 0, $30
0000A35B                            
0000A35B 04                         WaterSwitcher_00BA:	dc.b 4
0000A35C F805 0000 80               	dc.b $F8, 5, 0, 0, $80
0000A361 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A366 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A36B F805 0000 70               	dc.b $F8, 5, 0, 0, $70
0000A370                            
0000A370                            	even
0000A370                            	even
0000A370                            ; ===========================================================================
0000A370                            ; ===========================================================================
0000A370                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A370                            ; ---------------------------------------------------------------------------
0000A370                            ; Sprite mappings - Unused switch thingy
0000A370                            ; ---------------------------------------------------------------------------
0000A370                            Map_Swi_internal:
0000A370 0000                       		dc.w byte_891E-Map_Swi_internal
0000A372 04                         byte_891E:	dc.b 4
0000A373 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A378 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A37D E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A382 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A388 00                         		even
0000A388 00                         		even
0000A388                            
0000A388                            		include	"_incObj\2A SBZ Small Door.asm"
0000A388                            ; ---------------------------------------------------------------------------
0000A388                            ; Object 2A - small vertical door (SBZ)
0000A388                            ; ---------------------------------------------------------------------------
0000A388                            
0000A388                            AutoDoor:
0000A388 7000                       		moveq	#0,d0
0000A38A 1028 0024                  		move.b	obRoutine(a0),d0
0000A38E 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A392 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A396                            ; ===========================================================================
0000A396 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A398 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A39A                            ; ===========================================================================
0000A39A                            
0000A39A                            ADoor_Main:	; Routine 0
0000A39A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A39E 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A3A6 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A3AC 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A3B2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A3B8                            		;move.b	#4,obPriority(a0)
0000A3B8                            
0000A3B8                            ADoor_OpenShut:	; Routine 2
0000A3B8 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A3BC 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A3C0 3038 D008                  		move.w	(v_player+obX).w,d0
0000A3C4 D041                       		add.w	d1,d0
0000A3C6 B068 0008                  		cmp.w	obX(a0),d0
0000A3CA 6500                       		bcs.s	ADoor_Animate
0000A3CC 9041                       		sub.w	d1,d0
0000A3CE 9041                       		sub.w	d1,d0
0000A3D0 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A3D4 6400                       		bcc.s	ADoor_Animate	; close door
0000A3D6 D041                       		add.w	d1,d0
0000A3D8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A3DC 6400                       		bcc.s	loc_899A	; if yes, branch
0000A3DE 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3E4 6600                       		bne.s	ADoor_Animate
0000A3E6 6000                       		bra.s	ADoor_Open
0000A3E8                            ; ===========================================================================
0000A3E8                            
0000A3E8                            loc_899A:
0000A3E8 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3EE 6700                       		beq.s	ADoor_Animate
0000A3F0                            
0000A3F0                            ADoor_Open:
0000A3F0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A3F6                            
0000A3F6                            ADoor_Animate:
0000A3F6 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A3FC 6100 0000                  		bsr.w	AnimateSprite
0000A400 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A404 6600                       		bne.s	@remember	; if yes, branch
0000A406 323C 0011                  		move.w	#$11,d1
0000A40A 343C 0020                  		move.w	#$20,d2
0000A40E 3602                       		move.w	d2,d3
0000A410 5243                       		addq.w	#1,d3
0000A412 3828 0008                  		move.w	obX(a0),d4
0000A416 6100 0000                  		bsr.w	SolidObject
0000A41A                            
0000A41A                            	@remember:
0000A41A 6000 0000                  		bra.w	RememberState
0000A41A 6000 0000                  		bra.w	RememberState
0000A41E                            		include	"_anim\SBZ Small Door.asm"
0000A41E                            ; ---------------------------------------------------------------------------
0000A41E                            ; Animation script - doors (SBZ)
0000A41E                            ; ---------------------------------------------------------------------------
0000A41E 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A420 0000                       		dc.w @open-Ani_ADoor
0000A422 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A42E 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A43A                            		even
0000A43A                            		even
0000A43A                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A43A                            ; --------------------------------------------------------------------------------
0000A43A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A43A                            ; --------------------------------------------------------------------------------
0000A43A                            
0000A43A                            SME_YnmwF:	
0000A43A 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A43E 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A442 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A446 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A44A 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A44C 02                         SME_YnmwF_12:	dc.b 2	
0000A44D E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A452 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A457 02                         SME_YnmwF_1D:	dc.b 2	
0000A458 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A45D 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A462 02                         SME_YnmwF_28:	dc.b 2	
0000A463 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A468 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A46D 02                         SME_YnmwF_33:	dc.b 2	
0000A46E D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A473 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A478 02                         SME_YnmwF_3E:	dc.b 2	
0000A479 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A47E 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A483 02                         SME_YnmwF_49:	dc.b 2	
0000A484 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A489 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A48E 02                         SME_YnmwF_54:	dc.b 2	
0000A48F C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A494 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A499 02                         SME_YnmwF_5F:	dc.b 2	
0000A49A C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A49F 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A4A4 02                         SME_YnmwF_6A:	dc.b 2	
0000A4A5 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A4AA 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A4B0 00                         		even
0000A4B0 00                         		even
0000A4B0                            
0000A4B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4B0                            
0000A4B0                            
0000A4B0                            Obj44_SolidWall:
0000A4B0 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A4B4 6700                       		beq.s	loc_8AA8
0000A4B6 6B00 0000                  		bmi.w	loc_8AC4
0000A4BA 4A40                       		tst.w	d0
0000A4BC 6700 0000                  		beq.w	loc_8A92
0000A4C0 6B00                       		bmi.s	loc_8A7C
0000A4C2 4A69 0010                  		tst.w	obVelX(a1)
0000A4C6 6B00                       		bmi.s	loc_8A92
0000A4C8 6000                       		bra.s	loc_8A82
0000A4CA                            ; ===========================================================================
0000A4CA                            
0000A4CA                            loc_8A7C:
0000A4CA 4A69 0010                  		tst.w	obVelX(a1)
0000A4CE 6A00                       		bpl.s	loc_8A92
0000A4D0                            
0000A4D0                            loc_8A82:
0000A4D0 9169 0008                  		sub.w	d0,obX(a1)
0000A4D4 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A4DA 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A4E0                            
0000A4E0                            loc_8A92:
0000A4E0 0829 0001 0022             		btst	#1,obStatus(a1)
0000A4E6 6600                       		bne.s	loc_8AB6
0000A4E8 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A4EE 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A4F4 4E75                       		rts	
0000A4F6                            ; ===========================================================================
0000A4F6                            
0000A4F6                            loc_8AA8:
0000A4F6 0828 0005 0022             		btst	#5,obStatus(a0)
0000A4FC 6700                       		beq.s	locret_8AC2
0000A4FE 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A504                            
0000A504                            loc_8AB6:
0000A504 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A50A 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A510                            
0000A510                            locret_8AC2:
0000A510 4E75                       		rts	
0000A512                            ; ===========================================================================
0000A512                            
0000A512                            loc_8AC4:
0000A512 4A69 0012                  		tst.w	obVelY(a1)
0000A516 6A00                       		bpl.s	locret_8AD8
0000A518 4A43                       		tst.w	d3
0000A51A 6A00                       		bpl.s	locret_8AD8
0000A51C 9769 000C                  		sub.w	d3,obY(a1)
0000A520 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A526                            
0000A526                            locret_8AD8:
0000A526 4E75                       		rts	
0000A528                            ; End of function Obj44_SolidWall
0000A528                            
0000A528                            
0000A528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A528                            
0000A528                            
0000A528                            Obj44_SolidWall2:
0000A528 43F8 D000                  		lea	(v_player).w,a1
0000A52C 3029 0008                  		move.w	obX(a1),d0
0000A530 9068 0008                  		sub.w	obX(a0),d0
0000A534 D041                       		add.w	d1,d0
0000A536 6B00                       		bmi.s	loc_8B48
0000A538 3601                       		move.w	d1,d3
0000A53A D643                       		add.w	d3,d3
0000A53C B043                       		cmp.w	d3,d0
0000A53E 6200                       		bhi.s	loc_8B48
0000A540 1629 0016                  		move.b	obHeight(a1),d3
0000A544 4883                       		ext.w	d3
0000A546 D443                       		add.w	d3,d2
0000A548 3629 000C                  		move.w	obY(a1),d3
0000A54C 9668 000C                  		sub.w	obY(a0),d3
0000A550 D642                       		add.w	d2,d3
0000A552 6B00                       		bmi.s	loc_8B48
0000A554 3802                       		move.w	d2,d4
0000A556 D844                       		add.w	d4,d4
0000A558 B644                       		cmp.w	d4,d3
0000A55A 6400                       		bhs.s	loc_8B48
0000A55C 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A560 6B00                       		bmi.s	loc_8B48
0000A562 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A568 6400                       		bhs.s	loc_8B48
0000A56A 4A78 FE08                  		tst.w	(v_debuguse).w
0000A56E 6600                       		bne.s	loc_8B48
0000A570 3A00                       		move.w	d0,d5
0000A572 B240                       		cmp.w	d0,d1
0000A574 6400                       		bhs.s	loc_8B30
0000A576 D241                       		add.w	d1,d1
0000A578 9041                       		sub.w	d1,d0
0000A57A 3A00                       		move.w	d0,d5
0000A57C 4445                       		neg.w	d5
0000A57E                            
0000A57E                            loc_8B30:
0000A57E 3203                       		move.w	d3,d1
0000A580 B443                       		cmp.w	d3,d2
0000A582 6400                       		bhs.s	loc_8B3C
0000A584 9644                       		sub.w	d4,d3
0000A586 3203                       		move.w	d3,d1
0000A588 4441                       		neg.w	d1
0000A58A                            
0000A58A                            loc_8B3C:
0000A58A BA41                       		cmp.w	d1,d5
0000A58C 6200                       		bhi.s	loc_8B44
0000A58E 7801                       		moveq	#1,d4
0000A590 4E75                       		rts	
0000A592                            ; ===========================================================================
0000A592                            
0000A592                            loc_8B44:
0000A592 78FF                       		moveq	#-1,d4
0000A594 4E75                       		rts	
0000A596                            ; ===========================================================================
0000A596                            
0000A596                            loc_8B48:
0000A596 7800                       		moveq	#0,d4
0000A598 4E75                       		rts	
0000A59A                            ; End of function Obj44_SolidWall2
0000A59A                            
0000A59A                            ; ===========================================================================
0000A59A                            
0000A59A                            		include	"_incObj\1E Ball Hog.asm"
0000A59A                            ; ---------------------------------------------------------------------------
0000A59A                            ; Object 1E - Ball Hog enemy (SBZ)
0000A59A                            ; ---------------------------------------------------------------------------
0000A59A                            
0000A59A                            BallHog:
0000A59A 7000                       		moveq	#0,d0
0000A59C 1028 0024                  		move.b	obRoutine(a0),d0
0000A5A0 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A5A4 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A5A8                            ; ===========================================================================
0000A5A8 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A5AA 0000                       		dc.w Hog_Action-Hog_Index
0000A5AC                            
0000A5AC =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A5AC                            ; ===========================================================================
0000A5AC                            
0000A5AC                            Hog_Main:	; Routine 0
0000A5AC 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A5B2 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A5B8 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A5C0 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A5C6 117C 0004 0001             		move.b	#4,obRender(a0)
0000A5CC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A5D2 117C 0005 0020             		move.b	#5,obColType(a0)
0000A5D8 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A5DE 6100 0000                  		bsr.w	ObjectFall
0000A5E2 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A5E8 4A41                       		tst.w	d1
0000A5EA 6A00                       		bpl.s	@floornotfound
0000A5EC D368 000C                  		add.w	d1,obY(a0)
0000A5F0 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A5F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5FA                            
0000A5FA                            	@floornotfound:
0000A5FA 4E75                       		rts	
0000A5FC                            ; ===========================================================================
0000A5FC                            
0000A5FC                            Hog_Action:	; Routine 2
0000A5FC 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A602 6100 0000                  		bsr.w	AnimateSprite
0000A606 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A60C 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A60E 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A612 6700                       		beq.s	@makeball	; if yes, branch
0000A614 6000                       		bra.s	@remember
0000A616                            ; ===========================================================================
0000A616                            
0000A616                            @setlaunchflag:
0000A616 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A61A                            
0000A61A                            @remember:
0000A61A 6000 0000                  		bra.w	RememberState
0000A61E                            ; ===========================================================================
0000A61E                            
0000A61E                            @makeball:
0000A61E 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A624 6100 0000                  		bsr.w	FindFreeObj
0000A628 6600                       		bne.s	@fail
0000A62A 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A62E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A634 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A63A 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A640 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A646 70FC                       		moveq	#-4,d0
0000A648 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A64E 6700                       		beq.s	@noflip		; if not, branch
0000A650 4440                       		neg.w	d0
0000A652 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A656                            
0000A656                            	@noflip:
0000A656 D169 0008                  		add.w	d0,obX(a1)
0000A65A 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A660 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A666                            
0000A666                            	@fail:
0000A666 60B2                       		bra.s	@remember
0000A666 60B2                       		bra.s	@remember
0000A668                            		include	"_incObj\20 Cannonball.asm"
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            
0000A668                            Cannonball:
0000A668 7000                       		moveq	#0,d0
0000A66A 1028 0024                  		move.b	obRoutine(a0),d0
0000A66E 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A672 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A676                            ; ===========================================================================
0000A676 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A678 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A67A                            
0000A67A =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A67A                            ; ===========================================================================
0000A67A                            
0000A67A                            Cbal_Main:	; Routine 0
0000A67A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A67E 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A684 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A68C 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A692 117C 0004 0001             		move.b	#4,obRender(a0)
0000A698 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A69E 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A6A4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A6AA 7000                       		moveq	#0,d0
0000A6AC 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A6B0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A6B4 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A6B8 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A6BE                            
0000A6BE                            Cbal_Bounce:	; Routine 2
0000A6BE 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A6C4 4A68 0012                  		tst.w	obVelY(a0)
0000A6C8 6B00                       		bmi.s	Cbal_ChkExplode
0000A6CA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A6D0 4A41                       		tst.w	d1		; has ball hit the floor?
0000A6D2 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A6D4                            
0000A6D4 D368 000C                  		add.w	d1,obY(a0)
0000A6D8 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A6DE 4A03                       		tst.b	d3
0000A6E0 6700                       		beq.s	Cbal_ChkExplode
0000A6E2 6B00                       		bmi.s	loc_8CA4
0000A6E4 4A68 0010                  		tst.w	obVelX(a0)
0000A6E8 6A00                       		bpl.s	Cbal_ChkExplode
0000A6EA 4468 0010                  		neg.w	obVelX(a0)
0000A6EE 6000                       		bra.s	Cbal_ChkExplode
0000A6F0                            ; ===========================================================================
0000A6F0                            
0000A6F0                            loc_8CA4:
0000A6F0 4A68 0010                  		tst.w	obVelX(a0)
0000A6F4 6B00                       		bmi.s	Cbal_ChkExplode
0000A6F6 4468 0010                  		neg.w	obVelX(a0)
0000A6FA                            
0000A6FA                            Cbal_ChkExplode:
0000A6FA 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A6FE 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A700                            
0000A700                            	Cbal_Explode:
0000A700 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A704 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A708 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A70E 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A712                            ; ===========================================================================
0000A712                            
0000A712                            Cbal_Animate:
0000A712 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A716 6A00                       		bpl.s	Cbal_Display
0000A718 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A71E 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A724                            
0000A724                            Cbal_Display:
0000A724 6100 0000                  		bsr.w	DisplaySprite
0000A728 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A72C 0640 00E0                  		addi.w	#$E0,d0
0000A730 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A734 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A738 4E75                       		rts	
0000A738 4E75                       		rts	
0000A73A                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A73A                            ; ---------------------------------------------------------------------------
0000A73A                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A73A                            ; ---------------------------------------------------------------------------
0000A73A                            
0000A73A                            MissileDissolve:
0000A73A 7000                       		moveq	#0,d0
0000A73C 1028 0024                  		move.b	obRoutine(a0),d0
0000A740 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A744 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A748                            ; ===========================================================================
0000A748 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A74A 0000                       		dc.w MDis_Animate-MDis_Index
0000A74C                            ; ===========================================================================
0000A74C                            
0000A74C                            MDis_Main:	; Routine 0
0000A74C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A750 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A758 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A75E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A764 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A76A 117C 0000 0020             		move.b	#0,obColType(a0)
0000A770 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A776 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A77C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A78C                            
0000A78C                            MDis_Animate:	; Routine 2
0000A78C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A790 6A00                       		bpl.s	@display
0000A792 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A798 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A79C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A7A2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7A6                            
0000A7A6                            	@display:
0000A7A6 6000 0000                  		bra.w	DisplaySprite
0000A7AA                            ; ===========================================================================
0000A7AA                            
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            
0000A7AA                            ExplosionItem:
0000A7AA 7000                       		moveq	#0,d0
0000A7AC 1028 0024                  		move.b	obRoutine(a0),d0
0000A7B0 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A7B4 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A7B8                            ; ===========================================================================
0000A7B8 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A7BA 0000                       		dc.w ExItem_Main-ExItem_Index
0000A7BC 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A7BE                            ; ===========================================================================
0000A7BE                            
0000A7BE                            ExItem_Animal:	; Routine 0
0000A7BE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7C2 6100 0000                  		bsr.w	FindFreeObj
0000A7C6 6600                       		bne.s	ExItem_Main
0000A7C8 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A7CC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A7D2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A7D8 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A7DE                            
0000A7DE                            ExItem_Main:	; Routine 2
0000A7DE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7E2 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A7EA 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A7F0 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7F6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A7FC 117C 0000 0020             		move.b	#0,obColType(a0)
0000A802 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A808 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A80E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A81E                            
0000A81E                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A81E 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A822 6A00                       		bpl.s	@display
0000A824 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A82A 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A82E 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A834 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A838                            
0000A838                            	@display:
0000A838 6000 0000                  		bra.w	DisplaySprite
0000A83C                            ; ===========================================================================
0000A83C                            ; ---------------------------------------------------------------------------
0000A83C                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A83C                            ; ---------------------------------------------------------------------------
0000A83C                            
0000A83C                            ExplosionBomb:
0000A83C 7000                       		moveq	#0,d0
0000A83E 1028 0024                  		move.b	obRoutine(a0),d0
0000A842 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A846 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A84A                            ; ===========================================================================
0000A84A 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A84C FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A84E                            ; ===========================================================================
0000A84E                            
0000A84E                            ExBom_Main:	; Routine 0
0000A84E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A852 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A85A 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A860 117C 0004 0001             		move.b	#4,obRender(a0)
0000A866 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A86C 117C 0000 0020             		move.b	#0,obColType(a0)
0000A872 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A878 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A87E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A88E                            		include	"_anim\Ball Hog.asm"
0000A88E                            ; ---------------------------------------------------------------------------
0000A88E                            ; Animation script - doors (SBZ)
0000A88E                            ; ---------------------------------------------------------------------------
0000A88E 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A890 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A8A8 00                         		even
0000A8A8 00                         		even
0000A8A8                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A8A8                            ; --------------------------------------------------------------------------------
0000A8A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A8A8                            ; --------------------------------------------------------------------------------
0000A8A8                            
0000A8A8                            SME_ZER01:	
0000A8A8 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A8AC 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A8B0 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A8B4 02                         SME_ZER01_C:	dc.b 2	
0000A8B5 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8BA FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A8BF 02                         SME_ZER01_17:	dc.b 2	
0000A8C0 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8C5 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A8CA 02                         SME_ZER01_22:	dc.b 2	
0000A8CB F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A8D0 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A8D5 02                         SME_ZER01_2D:	dc.b 2	
0000A8D6 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A8DB F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A8E0 01                         SME_ZER01_38:	dc.b 1	
0000A8E1 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A8E6 01                         SME_ZER01_3E:	dc.b 1	
0000A8E7 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A8EC                            		even
0000A8EC                            		even
0000A8EC                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A8EC                            ; ---------------------------------------------------------------------------
0000A8EC                            ; Sprite mappings - buzz bomber missile vanishing
0000A8EC                            ; ---------------------------------------------------------------------------
0000A8EC                            Map_MisDissolve_internal:
0000A8EC 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A8EE 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A8F0 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A8F2 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A8F4 01                         byte_8EAE:	dc.b 1
0000A8F5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A8FA 01                         byte_8EB4:	dc.b 1
0000A8FB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A900 01                         byte_8EBA:	dc.b 1
0000A901 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A906 01                         byte_8EC0:	dc.b 1
0000A907 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A90C                            		even
0000A90C                            		even
0000A90C                            		include	"_maps\Explosions.asm"
0000A90C                            ; ---------------------------------------------------------------------------
0000A90C                            ; Sprite mappings - explosion from a badnik or monitor
0000A90C                            ; ---------------------------------------------------------------------------
0000A90C 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A910 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A914 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A916 01                         byte_8ED0:	dc.b 1
0000A917 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A91C 01                         byte_8ED6:	dc.b 1
0000A91D F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A922 01                         byte_8EDC:	dc.b 1
0000A923 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A928 04                         byte_8EE2:	dc.b 4
0000A929 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A92E EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A933 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A938 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A93D 04                         byte_8EF7:	dc.b 4
0000A93E EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A943 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A948 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A94D FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A952                            		even
0000A952                            ; ---------------------------------------------------------------------------
0000A952                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A952                            ; ---------------------------------------------------------------------------
0000A952 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A954 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A956 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A958 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A95A FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A95C 01                         byte_8F16:	dc.b 1
0000A95D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A962 01                         byte_8F1C:	dc.b 1
0000A963 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A968                            		even
0000A968                            		even
0000A968                            
0000A968                            		include	"_incObj\28 Animals.asm"
0000A968                            ; ---------------------------------------------------------------------------
0000A968                            ; Object 28 - animals
0000A968                            ; ---------------------------------------------------------------------------
0000A968                            
0000A968                            Animals:
0000A968 7000                       		moveq	#0,d0
0000A96A 1028 0024                  		move.b	obRoutine(a0),d0
0000A96E 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A972 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A976                            ; ===========================================================================
0000A976 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A97A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A97E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A982 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A986 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A98A 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A98E 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A992 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A996 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A99A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A99E 0000                       		dc.w loc_92D6-Anml_Index
0000A9A0                            
0000A9A0 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A9AC                            
0000A9AC FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A9B0 0000 0000                  		dc.l Map_Animal1
0000A9B4 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A9B8 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A9BC FE80 FD00                  		dc.w $FE80, $FD00
0000A9C0 0000 0000                  		dc.l Map_Animal1
0000A9C4 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A9C8 0000 0000                  		dc.l Map_Animal2
0000A9CC FE40 FD00                  		dc.w $FE40, $FD00
0000A9D0 0000 0000                  		dc.l Map_Animal3
0000A9D4 FD00 FC00                  		dc.w $FD00, $FC00
0000A9D8 0000 0000                  		dc.l Map_Animal2
0000A9DC FD80 FC80                  		dc.w $FD80, $FC80
0000A9E0 0000 0000                  		dc.l Map_Animal3
0000A9E4                            
0000A9E4 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A9F4 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AA04 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AA10                            
0000AA10 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AA24 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AA38 0000 0000                  		dc.l Map_Animal3
0000AA3C                            
0000AA3C 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AA4E 0565 05B3                  		dc.w $565, $5B3
0000AA52                            ; ===========================================================================
0000AA52                            
0000AA52                            Anml_Ending:	; Routine 0
0000AA52 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AA56 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AA5A 7000                       		moveq	#0,d0
0000AA5C 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AA60 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AA62 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AA66 0440 0014                  		subi.w	#$14,d0
0000AA6A 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AA70 D040                       		add.w	d0,d0
0000AA72 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AA78 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AA7C 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA82 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AA88 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA8E 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AA94 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AA9A 117C 0004 0001             		move.b	#4,obRender(a0)
0000AAA0 08E8 0000 0001             		bset	#0,obRender(a0)
0000AAA6 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AAAC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AAB2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AAB8 6000 0000                  		bra.w	DisplaySprite
0000AABC                            ; ===========================================================================
0000AABC                            
0000AABC                            Anml_FromEnemy:
0000AABC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AAC0 6100 91E2                  		bsr.w	RandomNumber
0000AAC4 0240 0001                  		andi.w	#1,d0
0000AAC8 7200                       		moveq	#0,d1
0000AACA 1238 FE10                  		move.b	(v_zone).w,d1
0000AACE D241                       		add.w	d1,d1
0000AAD0 D240                       		add.w	d0,d1
0000AAD2 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AAD6 1031 1000                  		move.b	(a1,d1.w),d0
0000AADA 1140 0030                  		move.b	d0,$30(a0)
0000AADE E748                       		lsl.w	#3,d0
0000AAE0 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AAE4 D2C0                       		adda.w	d0,a1
0000AAE6 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AAEA 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AAEE 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AAF2 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AAF8 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AAFE 6700                       		beq.s	loc_90C0	; if yes, branch
0000AB00 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AB06                            
0000AB06                            loc_90C0:
0000AB06 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB0C 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB12 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB18 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AB1E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB24 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB2A 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AB30 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AB36 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AB3A 6600                       		bne.s	loc_911C
0000AB3C 6100 0000                  		bsr.w	FindFreeObj
0000AB40 6600                       		bne.s	Anml_Display
0000AB42 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AB46 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AB4C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AB52 3028 003E                  		move.w	$3E(a0),d0
0000AB56 E248                       		lsr.w	#1,d0
0000AB58 1340 001A                  		move.b	d0,obFrame(a1)
0000AB5C                            
0000AB5C                            Anml_Display:
0000AB5C 6000 0000                  		bra.w	DisplaySprite
0000AB60                            ; ===========================================================================
0000AB60                            
0000AB60                            loc_911C:
0000AB60 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AB66 4268 0010                  		clr.w	obVelX(a0)
0000AB6A 6000 0000                  		bra.w	DisplaySprite
0000AB6E                            ; ===========================================================================
0000AB6E                            
0000AB6E                            loc_912A:
0000AB6E 4A28 0001                  		tst.b	obRender(a0)
0000AB72 6A00 0000                  		bpl.w	DeleteObject
0000AB76 6100 0000                  		bsr.w	ObjectFall
0000AB7A 4A68 0012                  		tst.w	obVelY(a0)
0000AB7E 6B00                       		bmi.s	loc_9180
0000AB80 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB86 4A41                       		tst.w	d1
0000AB88 6A00                       		bpl.s	loc_9180
0000AB8A D368 000C                  		add.w	d1,obY(a0)
0000AB8E 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AB94 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB9A 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABA0 1028 0030                  		move.b	$30(a0),d0
0000ABA4 D000                       		add.b	d0,d0
0000ABA6 5800                       		addq.b	#4,d0
0000ABA8 1140 0024                  		move.b	d0,obRoutine(a0)
0000ABAC 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ABB0 6700                       		beq.s	loc_9180
0000ABB2 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ABB8 6700                       		beq.s	loc_9180
0000ABBA 4468 0010                  		neg.w	obVelX(a0)
0000ABBE 0868 0000 0001             		bchg	#0,obRender(a0)
0000ABC4                            
0000ABC4                            loc_9180:
0000ABC4 6000 0000                  		bra.w	DisplaySprite
0000ABC8                            ; ===========================================================================
0000ABC8                            
0000ABC8                            loc_9184:
0000ABC8 6100 0000                  		bsr.w	ObjectFall
0000ABCC 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABD2 4A68 0012                  		tst.w	obVelY(a0)
0000ABD6 6B00                       		bmi.s	loc_91AE
0000ABD8 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ABDE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABE4 4A41                       		tst.w	d1
0000ABE6 6A00                       		bpl.s	loc_91AE
0000ABE8 D368 000C                  		add.w	d1,obY(a0)
0000ABEC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ABF2                            
0000ABF2                            loc_91AE:
0000ABF2 4A28 0028                  		tst.b	obSubtype(a0)
0000ABF6 6600                       		bne.s	loc_9224
0000ABF8 4A28 0001                  		tst.b	obRender(a0)
0000ABFC 6A00 0000                  		bpl.w	DeleteObject
0000AC00 6000 0000                  		bra.w	DisplaySprite
0000AC04                            ; ===========================================================================
0000AC04                            
0000AC04                            loc_91C0:
0000AC04 6100 0000                  		bsr.w	SpeedToPos
0000AC08 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC0E 4A68 0012                  		tst.w	obVelY(a0)
0000AC12 6B00                       		bmi.s	loc_91FC
0000AC14 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC1A 4A41                       		tst.w	d1
0000AC1C 6A00                       		bpl.s	loc_91FC
0000AC1E D368 000C                  		add.w	d1,obY(a0)
0000AC22 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC28 4A28 0028                  		tst.b	obSubtype(a0)
0000AC2C 6700                       		beq.s	loc_91FC
0000AC2E 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AC34 6700                       		beq.s	loc_91FC
0000AC36 4468 0010                  		neg.w	obVelX(a0)
0000AC3A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AC40                            
0000AC40                            loc_91FC:
0000AC40 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AC44 6A00                       		bpl.s	loc_9212
0000AC46 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AC4C 5228 001A                  		addq.b	#1,obFrame(a0)
0000AC50 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AC56                            
0000AC56                            loc_9212:
0000AC56 4A28 0028                  		tst.b	obSubtype(a0)
0000AC5A 6600                       		bne.s	loc_9224
0000AC5C 4A28 0001                  		tst.b	obRender(a0)
0000AC60 6A00 0000                  		bpl.w	DeleteObject
0000AC64 6000 0000                  		bra.w	DisplaySprite
0000AC68                            ; ===========================================================================
0000AC68                            
0000AC68                            loc_9224:
0000AC68 3028 0008                  		move.w	obX(a0),d0
0000AC6C 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AC70 6500                       		bcs.s	loc_923C
0000AC72 0440 0180                  		subi.w	#$180,d0
0000AC76 6A00                       		bpl.s	loc_923C
0000AC78 4A28 0001                  		tst.b	obRender(a0)
0000AC7C 6A00 0000                  		bpl.w	DeleteObject
0000AC80                            
0000AC80                            loc_923C:
0000AC80 6000 0000                  		bra.w	DisplaySprite
0000AC84                            ; ===========================================================================
0000AC84                            
0000AC84                            loc_9240:
0000AC84 4A28 0001                  		tst.b	obRender(a0)
0000AC88 6A00 0000                  		bpl.w	DeleteObject
0000AC8C 5368 0036                  		subq.w	#1,$36(a0)
0000AC90 6600 0000                  		bne.w	loc_925C
0000AC94 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AC9A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ACA0                            
0000ACA0                            loc_925C:
0000ACA0 6000 0000                  		bra.w	DisplaySprite
0000ACA4                            ; ===========================================================================
0000ACA4                            
0000ACA4                            loc_9260:
0000ACA4 6100 0000                  		bsr.w	sub_9404
0000ACA8 6400                       		bcc.s	loc_927C
0000ACAA 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACB0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACB6 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000ACBC 6000 FF46                  		bra.w	loc_91C0
0000ACC0                            ; ===========================================================================
0000ACC0                            
0000ACC0                            loc_927C:
0000ACC0 6000 FFA6                  		bra.w	loc_9224
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            loc_9280:
0000ACC4 6100 0000                  		bsr.w	sub_9404
0000ACC8 6A00                       		bpl.s	loc_92B6
0000ACCA 4268 0010                  		clr.w	obVelX(a0)
0000ACCE 4268 0032                  		clr.w	$32(a0)
0000ACD2 6100 0000                  		bsr.w	SpeedToPos
0000ACD6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ACDC 6100 0000                  		bsr.w	loc_93C4
0000ACE0 6100 0000                  		bsr.w	loc_93EC
0000ACE4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ACE8 6A00                       		bpl.s	loc_92B6
0000ACEA 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ACF0 5228 001A                  		addq.b	#1,obFrame(a0)
0000ACF4 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACFA                            
0000ACFA                            loc_92B6:
0000ACFA 6000 FF6C                  		bra.w	loc_9224
0000ACFE                            ; ===========================================================================
0000ACFE                            
0000ACFE                            loc_92BA:
0000ACFE 6100 0000                  		bsr.w	sub_9404
0000AD02 6A00                       		bpl.s	loc_9310
0000AD04 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD0A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD10 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AD16 6000 FEB0                  		bra.w	loc_9184
0000AD1A                            ; ===========================================================================
0000AD1A                            
0000AD1A                            loc_92D6:
0000AD1A 6100 0000                  		bsr.w	ObjectFall
0000AD1E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD24 4A68 0012                  		tst.w	obVelY(a0)
0000AD28 6B00                       		bmi.s	loc_9310
0000AD2A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD30 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD36 4A41                       		tst.w	d1
0000AD38 6A00                       		bpl.s	loc_9310
0000AD3A 4628 0029                  		not.b	$29(a0)
0000AD3E 6600                       		bne.s	loc_9306
0000AD40 4468 0010                  		neg.w	obVelX(a0)
0000AD44 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD4A                            
0000AD4A                            loc_9306:
0000AD4A D368 000C                  		add.w	d1,obY(a0)
0000AD4E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD54                            
0000AD54                            loc_9310:
0000AD54 6000 FF12                  		bra.w	loc_9224
0000AD58                            ; ===========================================================================
0000AD58                            
0000AD58                            loc_9314:
0000AD58 6100 0000                  		bsr.w	sub_9404
0000AD5C 6A00                       		bpl.s	loc_932E
0000AD5E 4268 0010                  		clr.w	obVelX(a0)
0000AD62 4268 0032                  		clr.w	$32(a0)
0000AD66 6100 0000                  		bsr.w	ObjectFall
0000AD6A 6100 0000                  		bsr.w	loc_93C4
0000AD6E 6100 0000                  		bsr.w	loc_93EC
0000AD72                            
0000AD72                            loc_932E:
0000AD72 6000 FEF4                  		bra.w	loc_9224
0000AD76                            ; ===========================================================================
0000AD76                            
0000AD76                            loc_9332:
0000AD76 6100 0000                  		bsr.w	sub_9404
0000AD7A 6A00                       		bpl.s	loc_936C
0000AD7C 6100 0000                  		bsr.w	ObjectFall
0000AD80 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD86 4A68 0012                  		tst.w	obVelY(a0)
0000AD8A 6B00                       		bmi.s	loc_936C
0000AD8C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD92 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD98 4A41                       		tst.w	d1
0000AD9A 6A00                       		bpl.s	loc_936C
0000AD9C 4468 0010                  		neg.w	obVelX(a0)
0000ADA0 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADA6 D368 000C                  		add.w	d1,obY(a0)
0000ADAA 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADB0                            
0000ADB0                            loc_936C:
0000ADB0 6000 FEB6                  		bra.w	loc_9224
0000ADB4                            ; ===========================================================================
0000ADB4                            
0000ADB4                            loc_9370:
0000ADB4 6100 0000                  		bsr.w	sub_9404
0000ADB8 6A00                       		bpl.s	loc_93C0
0000ADBA 6100 0000                  		bsr.w	SpeedToPos
0000ADBE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ADC4 4A68 0012                  		tst.w	obVelY(a0)
0000ADC8 6B00                       		bmi.s	loc_93AA
0000ADCA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADD0 4A41                       		tst.w	d1
0000ADD2 6A00                       		bpl.s	loc_93AA
0000ADD4 4628 0029                  		not.b	$29(a0)
0000ADD8 6600                       		bne.s	loc_93A0
0000ADDA 4468 0010                  		neg.w	obVelX(a0)
0000ADDE 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADE4                            
0000ADE4                            loc_93A0:
0000ADE4 D368 000C                  		add.w	d1,obY(a0)
0000ADE8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADEE                            
0000ADEE                            loc_93AA:
0000ADEE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ADF2 6A00                       		bpl.s	loc_93C0
0000ADF4 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ADFA 5228 001A                  		addq.b	#1,obFrame(a0)
0000ADFE 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE04                            
0000AE04                            loc_93C0:
0000AE04 6000 FE62                  		bra.w	loc_9224
0000AE08                            ; ===========================================================================
0000AE08                            
0000AE08                            loc_93C4:
0000AE08 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE0E 4A68 0012                  		tst.w	obVelY(a0)
0000AE12 6B00                       		bmi.s	locret_93EA
0000AE14 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE1A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE20 4A41                       		tst.w	d1
0000AE22 6A00                       		bpl.s	locret_93EA
0000AE24 D368 000C                  		add.w	d1,obY(a0)
0000AE28 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE2E                            
0000AE2E                            locret_93EA:
0000AE2E 4E75                       		rts	
0000AE30                            ; ===========================================================================
0000AE30                            
0000AE30                            loc_93EC:
0000AE30 08E8 0000 0001             		bset	#0,obRender(a0)
0000AE36 3028 0008                  		move.w	obX(a0),d0
0000AE3A 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE3E 6400                       		bcc.s	locret_9402
0000AE40 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AE46                            
0000AE46                            locret_9402:
0000AE46 4E75                       		rts	
0000AE48                            
0000AE48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE48                            
0000AE48                            
0000AE48                            sub_9404:
0000AE48 3038 D008                  		move.w	(v_player+obX).w,d0
0000AE4C 9068 0008                  		sub.w	obX(a0),d0
0000AE50 0440 00B8                  		subi.w	#$B8,d0
0000AE54 4E75                       		rts	
0000AE56                            ; End of function sub_9404
0000AE56                            ; End of function sub_9404
0000AE56                            		include	"_incObj\29 Points.asm"
0000AE56                            ; ---------------------------------------------------------------------------
0000AE56                            ; Object 29 - points that appear when you destroy something
0000AE56                            ; ---------------------------------------------------------------------------
0000AE56                            
0000AE56                            Points:
0000AE56 7000                       		moveq	#0,d0
0000AE58 1028 0024                  		move.b	obRoutine(a0),d0
0000AE5C 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AE60 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AE64 6000 0000                  		bra.w	DisplaySprite
0000AE68                            ; ===========================================================================
0000AE68 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AE6A 0000                       		dc.w Poi_Slower-Poi_Index
0000AE6C                            ; ===========================================================================
0000AE6C                            
0000AE6C                            Poi_Main:	; Routine 0
0000AE6C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AE70 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AE78 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AE7E 117C 0004 0001             		move.b	#4,obRender(a0)
0000AE84 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AE8A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE90 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AE96                            
0000AE96                            Poi_Slower:	; Routine 2
0000AE96 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AE9A 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AE9E 6100 0000                  		bsr.w	SpeedToPos
0000AEA2 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AEA8 4E75                       		rts	
0000AEA8 4E75                       		rts	
0000AEAA                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AEAA                            ; ---------------------------------------------------------------------------
0000AEAA                            ; Sprite mappings - animals
0000AEAA                            ; ---------------------------------------------------------------------------
0000AEAA                            Map_Animal1_internal:
0000AEAA 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AEAC 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AEAE 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AEB0 01                         byte_946C:	dc.b 1
0000AEB1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEB6 01                         byte_9472:	dc.b 1
0000AEB7 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AEBC 01                         byte_9478:	dc.b 1
0000AEBD F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AEC2                            		even
0000AEC2                            		even
0000AEC2                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2                            ; Sprite mappings - animals
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2                            Map_Animal2_internal:
0000AEC2 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AEC4 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AEC6 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AEC8 01                         byte_9484:	dc.b 1
0000AEC9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AECE 01                         byte_948A:	dc.b 1
0000AECF FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AED4 01                         byte_9490:	dc.b 1
0000AED5 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AEDA                            		even
0000AEDA                            		even
0000AEDA                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            ; Sprite mappings - animals
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            Map_Animal3_internal:
0000AEDA 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AEDC 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AEDE 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AEE0 01                         byte_949C:	dc.b 1
0000AEE1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEE6 01                         byte_94A2:	dc.b 1
0000AEE7 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AEEC 01                         byte_94A8:	dc.b 1
0000AEED FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AEF2                            		even
0000AEF2                            		even
0000AEF2                            Map_Poi:	include	"_maps\Points.asm"
0000AEF2                            ; --------------------------------------------------------------------------------
0000AEF2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AEF2                            ; --------------------------------------------------------------------------------
0000AEF2                            
0000AEF2                            SME_qLvsg:	
0000AEF2 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000AEF6 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000AEFA 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000AEFE 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000AF00 01                         SME_qLvsg_E:	dc.b 1	
0000AF01 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000AF06 01                         SME_qLvsg_14:	dc.b 1	
0000AF07 FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000AF0C 01                         SME_qLvsg_1A:	dc.b 1	
0000AF0D FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000AF12 01                         SME_qLvsg_20:	dc.b 1	
0000AF13 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000AF18 01                         SME_qLvsg_26:	dc.b 1	
0000AF19 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000AF1E 02                         SME_qLvsg_2C:	dc.b 2	
0000AF1F FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AF24 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000AF29 02                         SME_qLvsg_37:	dc.b 2	
0000AF2A FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AF2F FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AF34                            		even
0000AF34                            		even
0000AF34                            
0000AF34                            		include	"_incObj\1F Crabmeat.asm"
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34                            
0000AF34                            Crabmeat:
0000AF34 7000                       		moveq	#0,d0
0000AF36 1028 0024                  		move.b	obRoutine(a0),d0
0000AF3A 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AF3E 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AF42                            ; ===========================================================================
0000AF42                            Crab_Index:
0000AF42 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AF44 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AF46 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AF48 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AF4A 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AF4C                            
0000AF4C =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AF4C =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AF4C =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AF4C =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AF4C =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AF4C                            
0000AF4C =00000030                  crab_timedelay:	equ $30
0000AF4C =00000032                  crab_mode:	equ $32
0000AF4C                            ; ===========================================================================
0000AF4C                            
0000AF4C                            Crab_Main:	; Routine 0
0000AF4C 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AF52 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AF58 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AF60 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AF66 117C 0004 0001             		move.b	#4,obRender(a0)
0000AF6C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF72 117C 0006 0020             		move.b	#6,obColType(a0)
0000AF78 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AF7E 6100 0000                  		bsr.w	ObjectFall
0000AF82 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AF88 4A41                       		tst.w	d1
0000AF8A 6A00                       		bpl.s	@floornotfound
0000AF8C D368 000C                  		add.w	d1,obY(a0)
0000AF90 1143 0026                  		move.b	d3,obAngle(a0)
0000AF94 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AF9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AF9E                            
0000AF9E                            	@floornotfound:
0000AF9E 4E75                       		rts	
0000AFA0                            ; ===========================================================================
0000AFA0                            
0000AFA0                            Crab_Action:	; Routine 2
0000AFA0 7000                       		moveq	#0,d0
0000AFA2 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AFA6 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AFAA 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AFAE 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AFB4 6100 0000                  		bsr.w	AnimateSprite
0000AFB8 6000 0000                  		bra.w	RememberState
0000AFBC                            ; ===========================================================================
0000AFBC 0000                       @index:		dc.w @waittofire-@index
0000AFBE 0000                       		dc.w @walkonfloor-@index
0000AFC0                            ; ===========================================================================
0000AFC0                            
0000AFC0                            @waittofire:
0000AFC0 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AFC4 6A00                       		bpl.s	@dontmove
0000AFC6 4A28 0001                  		tst.b	obRender(a0)
0000AFCA 6A00                       		bpl.s	@movecrab
0000AFCC 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AFD2 6600                       		bne.s	@fire
0000AFD4                            
0000AFD4                            	@movecrab:
0000AFD4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AFD8 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AFDE 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AFE4 6100 0000                  		bsr.w	Crab_SetAni
0000AFE8 5600                       		addq.b	#3,d0
0000AFEA 1140 001C                  		move.b	d0,obAnim(a0)
0000AFEE 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AFF4 6600                       		bne.s	@noflip
0000AFF6 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000AFFA                            
0000AFFA                            	@dontmove:
0000AFFA                            	@noflip:
0000AFFA 4E75                       		rts	
0000AFFC                            ; ===========================================================================
0000AFFC                            
0000AFFC                            @fire:
0000AFFC 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B002 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B008 6100 0000                  		bsr.w	FindFreeObj
0000B00C 6600                       		bne.s	@failleft
0000B00E 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B012 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B018 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B01E 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B024 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B02A 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B030                            
0000B030                            	@failleft:
0000B030 6100 0000                  		bsr.w	FindFreeObj
0000B034 6600                       		bne.s	@failright
0000B036 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B03A 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B040 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B046 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B04C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B052 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B058                            
0000B058                            	@failright:
0000B058 4E75                       		rts	
0000B05A                            ; ===========================================================================
0000B05A                            
0000B05A                            @walkonfloor:
0000B05A 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B05E 6B00                       		bmi.s	loc_966E
0000B060 6100 0000                  		bsr.w	SpeedToPos
0000B064 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B06A 6600                       		bne.s	loc_9654
0000B06C 3628 0008                  		move.w	obX(a0),d3
0000B070 0643 0010                  		addi.w	#$10,d3
0000B074 0828 0000 0022             		btst	#0,obStatus(a0)
0000B07A 6700                       		beq.s	loc_9640
0000B07C 0443 0020                  		subi.w	#$20,d3
0000B080                            
0000B080                            loc_9640:
0000B080 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B086 0C41 FFF8                  		cmpi.w	#-8,d1
0000B08A 6D00                       		blt.s	loc_966E
0000B08C 0C41 000C                  		cmpi.w	#$C,d1
0000B090 6C00                       		bge.s	loc_966E
0000B092 4E75                       		rts	
0000B094                            ; ===========================================================================
0000B094                            
0000B094                            loc_9654:
0000B094 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B09A D368 000C                  		add.w	d1,obY(a0)
0000B09E 1143 0026                  		move.b	d3,obAngle(a0)
0000B0A2 6100 0000                  		bsr.w	Crab_SetAni
0000B0A6 5600                       		addq.b	#3,d0
0000B0A8 1140 001C                  		move.b	d0,obAnim(a0)
0000B0AC 4E75                       		rts	
0000B0AE                            ; ===========================================================================
0000B0AE                            
0000B0AE                            loc_966E:
0000B0AE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B0B2 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B0B8 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B0BE 6100 0000                  		bsr.w	Crab_SetAni
0000B0C2 1140 001C                  		move.b	d0,obAnim(a0)
0000B0C6 4E75                       		rts	
0000B0C8                            ; ---------------------------------------------------------------------------
0000B0C8                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B0C8                            ; ---------------------------------------------------------------------------
0000B0C8                            
0000B0C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0C8                            
0000B0C8                            
0000B0C8                            Crab_SetAni:
0000B0C8 7000                       		moveq	#0,d0
0000B0CA 1628 0026                  		move.b	obAngle(a0),d3
0000B0CE 6B00                       		bmi.s	loc_96A4
0000B0D0 0C03 0006                  		cmpi.b	#6,d3
0000B0D4 6500                       		bcs.s	locret_96A2
0000B0D6 7001                       		moveq	#1,d0
0000B0D8 0828 0000 0022             		btst	#0,obStatus(a0)
0000B0DE 6600                       		bne.s	locret_96A2
0000B0E0 7002                       		moveq	#2,d0
0000B0E2                            
0000B0E2                            locret_96A2:
0000B0E2 4E75                       		rts	
0000B0E4                            ; ===========================================================================
0000B0E4                            
0000B0E4                            loc_96A4:
0000B0E4 0C03 00FA                  		cmpi.b	#-6,d3
0000B0E8 6200                       		bhi.s	locret_96B6
0000B0EA 7002                       		moveq	#2,d0
0000B0EC 0828 0000 0022             		btst	#0,obStatus(a0)
0000B0F2 6600                       		bne.s	locret_96B6
0000B0F4 7001                       		moveq	#1,d0
0000B0F6                            
0000B0F6                            locret_96B6:
0000B0F6 4E75                       		rts	
0000B0F8                            ; End of function Crab_SetAni
0000B0F8                            
0000B0F8                            ; ===========================================================================
0000B0F8                            
0000B0F8                            Crab_Delete:	; Routine 4
0000B0F8 6100 0000                  		bsr.w	DeleteObject
0000B0FC 4E75                       		rts	
0000B0FE                            ; ===========================================================================
0000B0FE                            ; ---------------------------------------------------------------------------
0000B0FE                            ; Sub-object - missile that the	Crabmeat throws
0000B0FE                            ; ---------------------------------------------------------------------------
0000B0FE                            
0000B0FE                            Crab_BallMain:	; Routine 6
0000B0FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B102 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B10A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B110 117C 0004 0001             		move.b	#4,obRender(a0)
0000B116 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B11C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B122 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B128 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B12E 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B134                            
0000B134                            Crab_BallMove:	; Routine 8
0000B134 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B13A 6100 0000                  		bsr.w	AnimateSprite
0000B13E 6100 0000                  		bsr.w	ObjectFall
0000B142 6100 0000                  		bsr.w	DisplaySprite
0000B146 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B14A 0640 00E0                  		addi.w	#$E0,d0
0000B14E B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B152 6500                       		bcs.s	@delete		; if yes, branch
0000B154 4E75                       		rts	
0000B156                            
0000B156                            	@delete:
0000B156 6000 0000                  		bra.w	DeleteObject
0000B156 6000 0000                  		bra.w	DeleteObject
0000B15A                            		include	"_anim\Crabmeat.asm"
0000B15A                            ; ---------------------------------------------------------------------------
0000B15A                            ; Animation script - Crabmeat enemy
0000B15A                            ; ---------------------------------------------------------------------------
0000B15A 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B160 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B166 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B16A 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B16E 00                         		even
0000B16E 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B172 00                         		even
0000B172 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B176 00                         		even
0000B176 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B17C 00                         		even
0000B17C 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B182 00                         		even
0000B182 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B188 00                         		even
0000B188 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B18C 00                         		even
0000B18C 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B190                            		even
0000B190                            		even
0000B190                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B190                            ; ---------------------------------------------------------------------------
0000B190                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B190                            ; ---------------------------------------------------------------------------
0000B190                            Map_Crab_internal:
0000B190 0000                       		dc.w @stand-Map_Crab_internal
0000B192 0000                       		dc.w @walk-Map_Crab_internal
0000B194 0000                       		dc.w @slope1-Map_Crab_internal
0000B196 0000                       		dc.w @slope2-Map_Crab_internal
0000B198 0000                       		dc.w @firing-Map_Crab_internal
0000B19A 0000                       		dc.w @ball1-Map_Crab_internal
0000B19C 0000                       		dc.w @ball2-Map_Crab_internal
0000B19E 04                         @stand:		dc.b 4
0000B19F F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B1A4 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B1A9 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B1AE 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B1B3 04                         @walk:		dc.b 4
0000B1B4 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B1B9 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B1BE 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B1C3 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B1C8 04                         @slope1:	dc.b 4
0000B1C9 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B1CE EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B1D3 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B1D8 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B1DD 04                         @slope2:	dc.b 4
0000B1DE EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B1E3 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B1E8 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B1ED FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B1F2 06                         @firing:	dc.b 6
0000B1F3 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B1F8 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B1FD F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B202 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B207 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B20C 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B211 01                         @ball1:		dc.b 1
0000B212 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B217 01                         @ball2:		dc.b 1
0000B218 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B21E 00                         		even
0000B21E 00                         		even
0000B21E                            		include	"_incObj\06 Mozzietron.asm"
0000B21E                            ; ===========================================================================
0000B21E                            ; ---------------------------------------------------------------------------
0000B21E                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B21E                            ; ---------------------------------------------------------------------------
0000B21E                            
0000B21E                            Mozzietron:					; XREF: Obj_Index
0000B21E 7000                       		moveq	#0,d0
0000B220 1028 0024                  		move.b	$24(a0),d0
0000B224 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B228 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B22C                            ; ===========================================================================
0000B22C 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B22E 0000                       		dc.w MozAction-MozIndex
0000B230 0000                       		dc.w MozDelete-MozIndex
0000B232                            ; ===========================================================================
0000B232                            
0000B232                            MozMain:				; XREF: MozIndex
0000B232 5428 0024                  		addq.b	#2,$24(a0)
0000B236 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B23E 317C 0444 0002             		move.w	#$444,2(a0)
0000B244 117C 0004 0001             		move.b	#4,1(a0)
0000B24A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B250 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B256 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B25C                            MozAction:				; XREF: MozIndex
0000B25C 7000                       		moveq	#0,d0
0000B25E 1028 0025                  		move.b	$25(a0),d0
0000B262 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B266 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B26A 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B270 6100 0000                  		bsr.w	AnimateSprite
0000B274 6000 0000                  		bra.w	RememberState
0000B278                            ; ===========================================================================
0000B278 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B27A 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B27C 0000                       		dc.w MozPinned-MozIndex2
0000B27E                            ; ===========================================================================
0000B27E                            
0000B27E                            MozMove:				; XREF: MozIndex2
0000B27E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B282 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B284 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B28A 6600                       		bne.s	MozFire	; if yes, branch
0000B28C 5428 0025                  		addq.b	#2,$25(a0)
0000B290 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B296 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B29C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B2A2 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B2A8 6600                       		bne.s	locret_986C	; if not, branch
0000B2AA 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B2AE                            
0000B2AE                            locret_986C:
0000B2AE 4E75                       		rts	
0000B2B0                            ; ===========================================================================
0000B2B0                            
0000B2B0                            MozFire:				; XREF: MozMove
0000B2B0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B2B6 6100 0000                  		bsr.w	ObjectFall
0000B2BA 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B2C0 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B2C2 6A00                       		bpl.s   @return ; if yes, branch 
0000B2C4 303C 00B6                  		move.w    #$B6,d0
0000B2C8 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B2CE 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B2D4 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B2D8 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B2DC 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B2E0                            		@return:
0000B2E0 4E75                       	    		rts
0000B2E2                            		
0000B2E2                            
0000B2E2                            ; ===========================================================================
0000B2E2                            
0000B2E2                            MozPinned:
0000B2E2 4E75                               rts
0000B2E4                                    
0000B2E4                            ; ===========================================================================
0000B2E4                            
0000B2E4                            MozChkDel:				; XREF: Obj55_DropFly
0000B2E4 4A28 0001                  		tst.b	1(a0)
0000B2E8 6A00 0000                  		bpl.w	DeleteObject
0000B2EC 4E75                       		rts	
0000B2EE                            ; ===========================================================================
0000B2EE                            
0000B2EE                            MozChkNrSonic:			; XREF: MozIndex2
0000B2EE                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2EE 6B00                       		bmi.s	MozChgDir
0000B2F0 6100 0000                  		bsr.w	SpeedToPos
0000B2F4 4A28 0034                  		tst.b	$34(a0)
0000B2F8 6600                       		bne.s	locret_992A
0000B2FA 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2FE 9068 0008                  		sub.w	8(a0),d0
0000B302 6A00                       		bpl.s	MozSetNrSonic
0000B304 4440                       		neg.w	d0
0000B306                            
0000B306                            MozSetNrSonic:
0000B306 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B30A 6400                       		bcc.s	locret_992A	; if not, branch
0000B30C 4A28 0001                  		tst.b	1(a0)
0000B310 6A00                       		bpl.s	locret_992A
0000B312 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B318 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B31E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B324 6000                       		bra.s	MozStop
0000B326                            ; ===========================================================================
0000B326                            
0000B326                            MozChgDir:				; XREF: MozChkNrSonic
0000B326 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B32C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B332 317C 003B 0032             		move.w	#59,$32(a0)
0000B338                            
0000B338                            MozStop:				; XREF: MozSetNrSonic
0000B338 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B33C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B342 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B348                            
0000B348                            locret_992A:
0000B348 4E75                       		rts	
0000B34A                            ; ===========================================================================
0000B34A                            
0000B34A                            MozDelete:				; XREF: MozIndex
0000B34A 6100 0000                  		bsr.w	DeleteObject
0000B34E 4E75                       		rts	
0000B34E 4E75                       		rts	
0000B350                            		include	"_incObj\22 Buzz Bomber.asm"
0000B350                            ; ===========================================================================
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            
0000B350                            BuzzBomber:
0000B350 7000                       		moveq	#0,d0
0000B352 1028 0024                  		move.b	obRoutine(a0),d0
0000B356 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B35A 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B35E                            ; ===========================================================================
0000B35E 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B360 0000                       		dc.w Buzz_Action-Buzz_Index
0000B362 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B364                            
0000B364 =00000032                  buzz_timedelay:	equ $32
0000B364 =00000034                  buzz_buzzstatus:	equ $34
0000B364 =0000003C                  buzz_parent:	equ $3C
0000B364                            ; ===========================================================================
0000B364                            
0000B364                            Buzz_Main:	; Routine 0
0000B364 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B368 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B370 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B376 117C 0004 0001             		move.b	#4,obRender(a0)
0000B37C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B382 117C 0008 0020             		move.b	#8,obColType(a0)
0000B388 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B38E                            
0000B38E                            Buzz_Action:	; Routine 2
0000B38E 7000                       		moveq	#0,d0
0000B390 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B394 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B398 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B39C 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B3A2 6100 0000                  		bsr.w	AnimateSprite
0000B3A6 6000 0000                  		bra.w	RememberState
0000B3AA                            ; ===========================================================================
0000B3AA 0000                       @index:		dc.w @move-@index
0000B3AC 0000                       		dc.w @chknearsonic-@index
0000B3AE                            ; ===========================================================================
0000B3AE                            
0000B3AE                            @move:
0000B3AE 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B3B2 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B3B4 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B3BA 6600                       		bne.s	@fire		; if yes, branch
0000B3BC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B3C0 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B3C6 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B3CC 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B3D2 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B3D8 6600                       		bne.s	@noflip		; if not, branch
0000B3DA 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B3DE                            
0000B3DE                            	@noflip:
0000B3DE 4E75                       		rts	
0000B3E0                            ; ===========================================================================
0000B3E0                            
0000B3E0                            	@fire:
0000B3E0 6100 0000                  		bsr.w	FindFreeObj
0000B3E4 6600                       		bne.s	@fail
0000B3E6 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B3EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B3F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B3F6 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B3FC 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B402 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B408 303C 0018                  		move.w	#$18,d0
0000B40C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B412 6600                       		bne.s	@noflip2	; if not, branch
0000B414 4440                       		neg.w	d0
0000B416 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B41A                            
0000B41A                            	@noflip2:
0000B41A D169 0008                  		add.w	d0,obX(a1)
0000B41E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B424 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B42A 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B42E 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B434 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B43A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B440                            
0000B440                            	@fail:
0000B440 4E75                       		rts	
0000B442                            ; ===========================================================================
0000B442                            
0000B442                            @chknearsonic:
0000B442 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B446 6B00                       		bmi.s	@chgdirection
0000B448 6100 0000                  		bsr.w	SpeedToPos
0000B44C 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B450 6600                       		bne.s	@keepgoing
0000B452 3038 D008                  		move.w	(v_player+obX).w,d0
0000B456 9068 0008                  		sub.w	obX(a0),d0
0000B45A 6A00                       		bpl.s	@isleft
0000B45C 4440                       		neg.w	d0
0000B45E                            
0000B45E                            	@isleft:
0000B45E 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B462 6400                       		bcc.s	@keepgoing	; if not, branch
0000B464 4A28 0001                  		tst.b	obRender(a0)
0000B468 6A00                       		bpl.s	@keepgoing
0000B46A 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B470 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B476 6000                       		bra.s	@stop
0000B478                            ; ===========================================================================
0000B478                            
0000B478                            	@chgdirection:
0000B478 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B47E 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B484 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B48A                            
0000B48A                            	@stop:
0000B48A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B48E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B494 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B49A                            
0000B49A                            @keepgoing:
0000B49A 4E75                       		rts	
0000B49C                            ; ===========================================================================
0000B49C                            
0000B49C                            Buzz_Delete:	; Routine 4
0000B49C 6100 0000                  		bsr.w	DeleteObject
0000B4A0 4E75                       		rts	
0000B4A0 4E75                       		rts	
0000B4A2                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B4A2                            ; ---------------------------------------------------------------------------
0000B4A2                            ; Object 23 - missile that Buzz	Bomber throws
0000B4A2                            ; ---------------------------------------------------------------------------
0000B4A2                            
0000B4A2                            Missile:
0000B4A2 7000                       		moveq	#0,d0
0000B4A4 1028 0024                  		move.b	obRoutine(a0),d0
0000B4A8 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B4AC 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B4B0                            ; ===========================================================================
0000B4B0 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B4B2 0000                       		dc.w Msl_Animate-Msl_Index
0000B4B4 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B4B6 0000                       		dc.w Msl_Delete-Msl_Index
0000B4B8 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B4BA                            
0000B4BA =0000003C                  msl_parent:	equ $3C
0000B4BA                            ; ===========================================================================
0000B4BA                            
0000B4BA                            Msl_Main:	; Routine 0
0000B4BA 5368 0032                  		subq.w	#1,$32(a0)
0000B4BE 6A00                       		bpl.s	Msl_ChkCancel
0000B4C0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B4C4 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B4CC 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B4D2 117C 0004 0001             		move.b	#4,obRender(a0)
0000B4D8 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B4DE 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B4E4 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B4EA 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B4EE 6700                       		beq.s	Msl_Animate	; if not, branch
0000B4F0                            
0000B4F0 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B4F6 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B4FC 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B502 6000                       		bra.s	Msl_Animate2
0000B504                            ; ===========================================================================
0000B504                            
0000B504                            Msl_Animate:	; Routine 2
0000B504 6100                       		bsr.s	Msl_ChkCancel
0000B506 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B50C 6100 0000                  		bsr.w	AnimateSprite
0000B510 6000 0000                  		bra.w	DisplaySprite
0000B514                            
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B514                            ; destroyed, and if it has, then cancel	the missile
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B514                            
0000B514                            
0000B514                            Msl_ChkCancel:
0000B514 2268 003C                  		movea.l	msl_parent(a0),a1
0000B518 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B51C 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B51E 4E75                       		rts	
0000B520                            ; End of function Msl_ChkCancel
0000B520                            
0000B520                            ; ===========================================================================
0000B520                            
0000B520                            Msl_FromBuzz:	; Routine 4
0000B520 0828 0007 0022             		btst	#7,obStatus(a0)
0000B526 6600                       		bne.s	@explode
0000B528 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B52E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B534 6100 0000                  		bsr.w	SpeedToPos
0000B538 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B53E 6100 0000                  		bsr.w	AnimateSprite
0000B542 6100 0000                  		bsr.w	DisplaySprite
0000B546 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B54A 0640 00E0                  		addi.w	#$E0,d0
0000B54E B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B552 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B554 4E75                       		rts	
0000B556                            ; ===========================================================================
0000B556                            
0000B556                            	@explode:
0000B556 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B55A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B560 6000 F1D8                  		bra.w	MissileDissolve
0000B564                            ; ===========================================================================
0000B564                            
0000B564                            Msl_Delete:	; Routine 6
0000B564 6100 0000                  		bsr.w	DeleteObject
0000B568 4E75                       		rts	
0000B56A                            ; ===========================================================================
0000B56A                            
0000B56A                            Msl_FromNewt:	; Routine 8
0000B56A 4A28 0001                  		tst.b	obRender(a0)
0000B56E 6AF4                       		bpl.s	Msl_Delete
0000B570 6100 0000                  		bsr.w	SpeedToPos
0000B574                            
0000B574                            Msl_Animate2:
0000B574 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B57A 6100 0000                  		bsr.w	AnimateSprite
0000B57E 6100 0000                  		bsr.w	DisplaySprite
0000B582 4E75                       		rts	
0000B582 4E75                       		rts	
0000B584                            		include	"_anim\Mozzietron.asm"
0000B584                            ; ---------------------------------------------------------------------------
0000B584                            ; Animation script - Buzz Bomber enemy
0000B584                            ; ---------------------------------------------------------------------------
0000B584 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B586 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B588 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B58A 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B58E 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B592 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B59A 00                         		even
0000B59A 00                         		even
0000B59A                            		include	"_anim\Buzz Bomber.asm"
0000B59A                            ; ---------------------------------------------------------------------------
0000B59A                            ; Animation script - Buzz Bomber enemy
0000B59A                            ; ---------------------------------------------------------------------------
0000B59A 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B59C 0000                       		dc.w @fly2-Ani_Buzz
0000B59E 0000                       		dc.w @fires-Ani_Buzz
0000B5A0 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B5A4 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B5A8 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B5AC                            		even
0000B5AC                            		even
0000B5AC                            		include	"_anim\Buzz Bomber Missile.asm"
0000B5AC                            ; ---------------------------------------------------------------------------
0000B5AC                            ; Animation script - missile that Buzz Bomber throws
0000B5AC                            ; ---------------------------------------------------------------------------
0000B5AC 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B5AE 0000                       		dc.w @missile-Ani_Missile
0000B5B0 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B5B4 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B5B8                            		even
0000B5B8                            		even
0000B5B8                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B5B8                            ; --------------------------------------------------------------------------------
0000B5B8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B5B8                            ; --------------------------------------------------------------------------------
0000B5B8                            
0000B5B8                            SME_qvHIs:	
0000B5B8 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B5BC 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B5C0 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B5C4 02                         SME_qvHIs_C:	dc.b 2	
0000B5C5 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B5CA ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B5CF 01                         SME_qvHIs_17:	dc.b 1	
0000B5D0 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B5D5 02                         SME_qvHIs_1D:	dc.b 2	
0000B5D6 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B5DB F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B5E0 03                         SME_qvHIs_28:	dc.b 3	
0000B5E1 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B5E6 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B5EB FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B5F0 04                         SME_qvHIs_38:	dc.b 4	
0000B5F1 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B5F6 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B5FB F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B600 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B605 04                         SME_qvHIs_4D:	dc.b 4	
0000B606 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B60B F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B610 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B615 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B61A                            		even
0000B61A                            		even
0000B61A                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B61A                            ; --------------------------------------------------------------------------------
0000B61A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B61A                            ; --------------------------------------------------------------------------------
0000B61A                            
0000B61A                            SME_yccqJ:	
0000B61A 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B61E 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B622 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B626 06                         SME_yccqJ_C:	dc.b 6	
0000B627 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B62C F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B631 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B636 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B63B EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B640 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B645 06                         SME_yccqJ_2B:	dc.b 6	
0000B646 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B64B F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B650 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B655 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B65A F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B65F F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B664 06                         SME_yccqJ_4A:	dc.b 6	
0000B665 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B66A F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B66F 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B674 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B679 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B67E EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B683 06                         SME_yccqJ_69:	dc.b 6	
0000B684 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B689 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B68E 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B693 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B698 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B69D F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B6A2 07                         SME_yccqJ_88:	dc.b 7	
0000B6A3 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6A8 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6AD 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6B2 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B6B7 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B6BC 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B6C1 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B6C6 04                         SME_yccqJ_AC:	dc.b 4	
0000B6C7 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6CC 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6D1 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6D6 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B6DC 00                         		even
0000B6DC 00                         		even
0000B6DC                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC                            ; Sprite mappings - missile that Buzz Bomber throws
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC                            Map_Missile_internal:
0000B6DC 0000                       		dc.w @Flare1-Map_Missile_internal
0000B6DE 0000                       		dc.w @Flare2-Map_Missile_internal
0000B6E0 0000                       		dc.w @Ball1-Map_Missile_internal
0000B6E2 0000                       		dc.w @Ball2-Map_Missile_internal
0000B6E4 01                         @Flare1:	dc.b 1
0000B6E5 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B6EA 01                         @Flare2:	dc.b 1
0000B6EB F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B6F0 01                         @Ball1:		dc.b 1
0000B6F1 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B6F6 01                         @Ball2:		dc.b 1
0000B6F7 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B6FC                            		even
0000B6FC                            		even
0000B6FC                            
0000B6FC                            		include	"_incObj\25 & 37 Rings.asm"
0000B6FC                            ; ---------------------------------------------------------------------------
0000B6FC                            ; Object 25 - rings
0000B6FC                            ; ---------------------------------------------------------------------------
0000B6FC                            
0000B6FC                            Rings:
0000B6FC 7000                       		moveq	#0,d0
0000B6FE 1028 0024                  		move.b	obRoutine(a0),d0
0000B702 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B706 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B70A                            ; ===========================================================================
0000B70A                            Ring_Index:
0000B70A 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B70C 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B70E 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B710 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B712 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B714 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B716 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B718 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B71A 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B71C                            
0000B71C =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B71C =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B71C =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B71C =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B71C =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B71C =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B71C =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B71C =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B71C =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B71C                            ; ---------------------------------------------------------------------------
0000B71C                            ; Distances between rings (format: horizontal, vertical)
0000B71C                            ; ---------------------------------------------------------------------------
0000B71C 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B71E 1800                       		dc.b $18, 0		; horizontal normal
0000B720 2000                       		dc.b $20, 0		; horizontal wide
0000B722 0010                       		dc.b 0,	$10		; vertical tight
0000B724 0018                       		dc.b 0,	$18		; vertical normal
0000B726 0020                       		dc.b 0,	$20		; vertical wide
0000B728 1010                       		dc.b $10, $10		; diagonal
0000B72A 1818                       		dc.b $18, $18
0000B72C 2020                       		dc.b $20, $20
0000B72E F010                       		dc.b $F0, $10
0000B730 E818                       		dc.b $E8, $18
0000B732 E020                       		dc.b $E0, $20
0000B734 1008                       		dc.b $10, 8
0000B736 1810                       		dc.b $18, $10
0000B738 F008                       		dc.b $F0, 8
0000B73A E810                       		dc.b $E8, $10
0000B73C                            ; ===========================================================================
0000B73C                            
0000B73C                            Ring_Main:	; Routine 0
0000B73C 45F8 FC00                  		lea	(v_objstate).w,a2
0000B740 7000                       		moveq	#0,d0
0000B742 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B746 45F2 0002                  		lea	2(a2,d0.w),a2
0000B74A 1812                       		move.b	(a2),d4
0000B74C 1228 0028                  		move.b	obSubtype(a0),d1
0000B750 1001                       		move.b	d1,d0
0000B752 0241 0007                  		andi.w	#7,d1
0000B756 0C41 0007                  		cmpi.w	#7,d1
0000B75A 6600                       		bne.s	loc_9B80
0000B75C 7206                       		moveq	#6,d1
0000B75E                            
0000B75E                            	loc_9B80:
0000B75E 4841                       		swap	d1
0000B760 323C 0000                  		move.w	#0,d1
0000B764 E808                       		lsr.b	#4,d0
0000B766 D040                       		add.w	d0,d0
0000B768 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B76C 4885                       		ext.w	d5
0000B76E 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B772 4886                       		ext.w	d6
0000B774 2248                       		movea.l	a0,a1
0000B776 3428 0008                  		move.w	obX(a0),d2
0000B77A 3628 000C                  		move.w	obY(a0),d3
0000B77E E20C                       		lsr.b	#1,d4
0000B780 6500                       		bcs.s	loc_9C02
0000B782 0892 0007                  		bclr	#7,(a2)
0000B786 6000                       		bra.s	loc_9BBA
0000B788                            ; ===========================================================================
0000B788                            
0000B788                            Ring_MakeRings:
0000B788 4841                       		swap	d1
0000B78A E20C                       		lsr.b	#1,d4
0000B78C 6500                       		bcs.s	loc_9C02
0000B78E 0892 0007                  		bclr	#7,(a2)
0000B792 6100 0000                  		bsr.w	FindFreeObj
0000B796 6600                       		bne.s	loc_9C0E
0000B798                            
0000B798                            loc_9BBA:
0000B798 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B79C 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B7A0 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B7A4 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B7AA 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B7AE 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B7B6 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B7BC 137C 0004 0001             		move.b	#4,obRender(a1)
0000B7C2 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B7C8 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B7CE 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B7D4 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B7DA 1341 0034                  		move.b	d1,$34(a1)
0000B7DE                            
0000B7DE                            loc_9C02:
0000B7DE 5241                       		addq.w	#1,d1
0000B7E0 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B7E2 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B7E4 4841                       		swap	d1
0000B7E6 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B7EA                            
0000B7EA                            loc_9C0E:
0000B7EA 0812 0000                  		btst	#0,(a2)
0000B7EE 6600 0000                  		bne.w	DeleteObject
0000B7F2                            
0000B7F2                            Ring_Animate:	; Routine 2
0000B7F2 4A38 FE2C                  		tst.b	(v_shield).w
0000B7F6 6700                       		beq.s	@skip
0000B7F8 4A28 0001                  		tst.b	obRender(a0)
0000B7FC 6A00                       		bpl.s	@skip
0000B7FE                            		
0000B7FE 43F8 D000                  		lea (v_player).w,a1
0000B802                            		
0000B802 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B806 9068 0008                  		sub.w	obX(a0),d0
0000B80A 6A00                       		bpl.s	@a1
0000B80C 4440                       		neg.w	d0
0000B80E                            		
0000B80E                            	@a1:
0000B80E 0C40 0040                  		cmpi.w	#$40,d0
0000B812 6200                       		bhi.s	@skip
0000B814                            		
0000B814 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B818 9068 000C                  		sub.w	obY(a0),d0
0000B81C 6A00                       		bpl.s	@a2
0000B81E 4440                       		neg.w	d0
0000B820                            		
0000B820                            	@a2:
0000B820 0C40 0040                  		cmpi.w	#$40,d0
0000B824 6200                       		bhi.s	@skip
0000B826                            		
0000B826 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B82C 45F8 FC00                  		lea	(v_objstate).w,a2
0000B830 7000                       		moveq	#0,d0
0000B832 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B836 1228 0034                  		move.b	$34(a0),d1
0000B83A 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B83E                            		
0000B83E                            	@skip:
0000B83E 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B844 6100 0000                  		bsr.w	DisplaySprite
0000B864 4E75                       		rts	
0000B866                            ; ===========================================================================
0000B866                            
0000B866                            Ring_Collect:	; Routine 4
0000B866 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B86A 117C 0000 0020             		move.b	#0,obColType(a0)
0000B870 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B876 6100 0000                  		bsr.w	CollectRing
0000B87A 45F8 FC00                  		lea	(v_objstate).w,a2
0000B87E 7000                       		moveq	#0,d0
0000B880 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B884 1228 0034                  		move.b	$34(a0),d1
0000B888 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B88C                            
0000B88C                            Ring_Sparkle:	; Routine 6
0000B88C 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B892 6100 0000                  		bsr.w	AnimateSprite
0000B896 6000 0000                  		bra.w	DisplaySprite
0000B89A                            ; ===========================================================================
0000B89A                            
0000B89A                            Ring_Delete:	; Routine 8
0000B89A 6000 0000                  		bra.w	DeleteObject
0000B89E                            
0000B89E                            Ring_Attract:	; Routine $A
0000B89E 4A38 FE2C                  		tst.b	(v_shield).w
0000B8A2 6600                       		bne.s	@skip
0000B8A4 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B8A8 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B8AE 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B8B4 6000                       		bra.s	@display
0000B8B6                            		
0000B8B6                            	@skip:
0000B8B6 323C 0030                  		move.w	#$30,d1	; horizontal
0000B8BA 3038 D008                  		move.w	(v_player+obX).w,d0
0000B8BE B068 0008                  		cmp.w	obX(a0),d0
0000B8C2 6400                       		bcc.s	@a1
0000B8C4 4441                       		neg.w	d1
0000B8C6 4A68 0010                  		tst.w	obVelX(a0)
0000B8CA 6B00                       		bmi.s	@a2
0000B8CC D241                       		add.w	d1,d1
0000B8CE D241                       		add.w	d1,d1
0000B8D0 6000                       		bra.s	@a2
0000B8D2                            
0000B8D2                            	@a1:
0000B8D2 4A68 0010                  		tst.w	obVelX(a0)
0000B8D6 6A00                       		bpl.s	@a2
0000B8D8 D241                       		add.w	d1,d1
0000B8DA D241                       		add.w	d1,d1
0000B8DC                            
0000B8DC                            	@a2:
0000B8DC D368 0010                  		add.w	d1,obVelX(a0)
0000B8E0 323C 0030                  		move.w	#$30,d1	; vertical
0000B8E4 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B8E8 B068 000C                  		cmp.w	obY(a0),d0
0000B8EC 6400                       		bcc.s	@a3
0000B8EE 4441                       		neg.w	d1
0000B8F0 4A68 0012                  		tst.w	obVelY(a0)
0000B8F4 6B00                       		bmi.s	@a4
0000B8F6 D241                       		add.w	d1,d1
0000B8F8 D241                       		add.w	d1,d1
0000B8FA 6000                       		bra.s	@a4
0000B8FC                            
0000B8FC                            	@a3:
0000B8FC 4A68 0012                  		tst.w	obVelY(a0)
0000B900 6A00                       		bpl.s	@a4
0000B902 D241                       		add.w	d1,d1
0000B904 D241                       		add.w	d1,d1
0000B906                            
0000B906                            	@a4:
0000B906 D368 0012                  		add.w	d1,obVelY(a0)
0000B90A 6100 0000                  		bsr.w	SpeedToPos
0000B90E                            		
0000B90E                            	@display:
0000B90E 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B914 6000 0000                  		bra.w	DisplaySprite
0000B918                            
0000B918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B918                            
0000B918                            
0000B918                            CollectRing:
0000B918 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B91C 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B922 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B926 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B92C 6500                       		bcs.s	@playsnd	; if yes, branch
0000B92E 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B934 6700                       		beq.s	@got100
0000B936 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B93C 6500                       		bcs.s	@playsnd	; if yes, branch
0000B93E 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B944 6600                       		bne.s	@playsnd
0000B946                            
0000B946                            	@got100:
0000B946 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B94A 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B94E 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B952                            		
0000B952                            
0000B952                            	@playsnd:
0000B952 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B958                            ; End of function CollectRing
0000B958                            
0000B958                            ; ===========================================================================
0000B958                            ; ---------------------------------------------------------------------------
0000B958                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B958                            ; ---------------------------------------------------------------------------
0000B958                            
0000B958                            RingLoss:
0000B958 7000                       		moveq	#0,d0
0000B95A 1028 0024                  		move.b	obRoutine(a0),d0
0000B95E 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B962 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B966                            ; ===========================================================================
0000B966 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B968 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B96A 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B96C 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B96E 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B970                            ; ===========================================================================
0000B970                            
0000B970                            RLoss_Count:	; Routine 0
0000B970 2248                       		movea.l	a0,a1
0000B972 7A00                       		moveq	#0,d5
0000B974 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B978 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B97E 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B980 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B984 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B98A 6700                               beq.s   @cont                       ; if not, branch
0000B98C 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B992 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B994                            @cont:
0000B994 BA40                               cmp.w   d0,d5
0000B996 6500                               bcs.s   @belowmax
0000B998 3A00                               move.w  d0,d5
0000B99A                            
0000B99A                            @belowmax:
0000B99A 5345                               subq.w  #1,d5
0000B99C 383C 0288                          move.w  #$288,d4
0000B9A0 6000                       		bra.s	@makerings
0000B9A2                            ; ===========================================================================
0000B9A2                            
0000B9A2                            	@loop:
0000B9A2 6100 0000                  		bsr.w	FindFreeObj
0000B9A6 6600 0000                  		bne.w	@resetcounter
0000B9AA                            
0000B9AA                            @makerings:
0000B9AA 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B9AE 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9B2 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B9B8 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B9BE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B9C4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B9CA 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9D2 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9D8 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9DE 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B9E4 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B9EA 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B9EE 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B9F0 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B9F4 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B9F8 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B9FA E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B9FC E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B9FE                            @skiphalvingvel:
0000B9FE 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BA02 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BA06 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BA0A                            
0000BA0A                            @resetcounter:
0000BA0A 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BA10 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BA16 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BA1C 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BA1E 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BA22 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BA30                            
0000BA30                            RLoss_Bounce:	; Routine 2
0000BA30 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BA36 6100 0000                  		bsr.w	SpeedToPos
0000BA3A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BA40 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BA44 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BA46 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BA4A BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BA4E 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BA50 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BA56                            	@skipbounceslow:
0000BA56 6B00                       		bmi.s	@chkdel
0000BA58 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BA5C D007                       		add.b	d7,d0
0000BA5E 0200 0003                  		andi.b	#3,d0
0000BA62 6600                       		bne.s	@chkdel
0000BA64 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BA6A 4A41                       		tst.w	d1
0000BA6C 6A00                       		bpl.s	@chkdel
0000BA6E D368 000C                  		add.w	d1,obY(a0)
0000BA72 3028 0012                  		move.w	obVelY(a0),d0
0000BA76 E440                       		asr.w	#2,d0
0000BA78 9168 0012                  		sub.w	d0,obVelY(a0)
0000BA7C 4468 0012                  		neg.w	obVelY(a0)
0000BA80                            
0000BA80                            	@chkdel:
0000BA80 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BA84 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BA88 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BA8C 0640 00E0                  		addi.w	#$E0,d0
0000BA90 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BA94 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BA98 4A38 FE2C                  		tst.b	(v_shield).w
0000BA9C 6700                       		beq.s	@skip
0000BA9E 4A28 0001                  		tst.b	obRender(a0)
0000BAA2 6A00                       		bpl.s	@skip
0000BAA4                            		
0000BAA4 43F8 D000                  		lea (v_player).w,a1
0000BAA8                            		
0000BAA8 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BAAC 9068 0008                  		sub.w	obX(a0),d0
0000BAB0 6A00                       		bpl.s	@a1
0000BAB2 4440                       		neg.w	d0
0000BAB4                            		
0000BAB4                            	@a1:
0000BAB4 0C40 00A0                  		cmpi.w	#$A0,d0
0000BAB8 6200                       		bhi.s	@skip
0000BABA                            		
0000BABA 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BABE 9068 000C                  		sub.w	obY(a0),d0
0000BAC2 6A00                       		bpl.s	@a2
0000BAC4 4440                       		neg.w	d0
0000BAC6                            		
0000BAC6                            	@a2:
0000BAC6 0C40 00A0                  		cmpi.w	#$A0,d0
0000BACA 6200                       		bhi.s	@skip
0000BACC                            		
0000BACC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BAD2 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BAD6                            		
0000BAD6                            	@skip:		
0000BAD6 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BADA D2FC 0080                          adda.w  #$80,a1
0000BADE 0C51 007E                          cmpi.w  #$7E,(a1)
0000BAE2 6400                               bcc.s   @cont
0000BAE4 5451                               addq.w  #2,(a1)
0000BAE6 D2D1                               adda.w  (a1),a1
0000BAE8 3288                               move.w  a0,(a1)
0000BAEA                            		
0000BAEA                            	@cont:
0000BAEA 4E75                               rts		
0000BAEC                            ; ===========================================================================
0000BAEC                            
0000BAEC                            RLoss_Collect:	; Routine 4
0000BAEC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BAF0 117C 0000 0020             		move.b	#0,obColType(a0)
0000BAF6 6100 FE20                  		bsr.w	CollectRing
0000BAFA                            
0000BAFA                            RLoss_Sparkle:	; Routine 6
0000BAFA 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BB00 6100 0000                  		bsr.w	AnimateSprite
0000BB04 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BB08 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB0C 6400                               bcc.s   @cont
0000BB0E 5451                               addq.w  #2,(a1)
0000BB10 D2D1                               adda.w  (a1),a1
0000BB12 3288                               move.w  a0,(a1)
0000BB14                            			
0000BB14                            	@cont:
0000BB14 4E75                               rts
0000BB16                            ; ===========================================================================
0000BB16                            
0000BB16                            RLoss_Delete:	; Routine 8
0000BB16 6000 0000                  		bra.w	DeleteObject
0000BB1A                            
0000BB1A                            ; ----------------------------------------------------------------------------------------------
0000BB1A                            ; Ring Spawn Array 
0000BB1A                            ; ----------------------------------------------------------------------------------------------
0000BB1A                            
0000BB1A FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BB2A FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BB3A FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BB4A FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BB5A FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BB6A FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BB7A FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BB8A FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BB9A                                            even
0000BB9A                            ; ===========================================================================
0000BB9A                            ; -------------------------------------------------------------------------------------
0000BB9A                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BB9A                            ; -------------------------------------------------------------------------------------
0000BB9A                            
0000BB9A                            SpillRingData_Water:
0000BB9A FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BBAA FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BBBA FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BBCA FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BBDA FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BBEA FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BBFA FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BC0A FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BC1A                                            even
0000BC1A                            ; ===========================================================================				
0000BC1A                            ; ===========================================================================				
0000BC1A                            		include	"_incObj\4B Giant Ring.asm"
0000BC1A                            ; ---------------------------------------------------------------------------
0000BC1A                            ; Object 4B - giant ring for entry to special stage
0000BC1A                            ; ---------------------------------------------------------------------------
0000BC1A                            
0000BC1A                            GiantRing:
0000BC1A 7000                       		moveq	#0,d0
0000BC1C 1028 0024                  		move.b	obRoutine(a0),d0
0000BC20 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BC24 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BC28                            ; ===========================================================================
0000BC28 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BC2A 0000                       		dc.w GRing_Animate-GRing_Index
0000BC2C 0000                       		dc.w GRing_Collect-GRing_Index
0000BC2E 0000                       		dc.w GRing_Delete-GRing_Index
0000BC30                            ; ===========================================================================
0000BC30                            
0000BC30                            GRing_Main:    ; Routine 0
0000BC30 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BC38 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BC3E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BC44 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BC4A 4A28 0001                  		tst.b	obRender(a0)
0000BC4E 6A00                       		bpl.s	GRing_Animate
0000BC50 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BC56 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BC5A 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BC60 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BC62                            
0000BC62 4E75                       		rts    
0000BC64                            ; ===========================================================================
0000BC64                            
0000BC64                            GRing_Okay:
0000BC64 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC68 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BC6E 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BC74 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BC7A                            
0000BC7A                            GRing_Animate:	; Routine 2
0000BC7A 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BC9E 6000 0000                  		bra.w	DisplaySprite
0000BCA2                            ; ===========================================================================
0000BCA2                            
0000BCA2                            GRing_Collect:	; Routine 4
0000BCA2 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BCA6 117C 0000 0020             		move.b	#0,obColType(a0)
0000BCAC 6100 0000                  		bsr.w	FindFreeObj
0000BCB0 6600 0000                  		bne.w	GRing_PlaySnd
0000BCB4 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BCB8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BCBE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BCC4 2348 003C                  		move.l	a0,$3C(a1)
0000BCC8 3038 D008                  		move.w	(v_player+obX).w,d0
0000BCCC B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BCD0 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BCD2 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BCD8 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BCDE 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BCE4                            		
0000BCE4                            GRing_PlaySnd:
0000BCEE 608A                       		bra.s	GRing_Animate
0000BCF0                            ; ===========================================================================
0000BCF0                            
0000BCF0                            GRing_Delete:	; Routine 6
0000BCF0 6000 0000                  		bra.w	DeleteObject
0000BCF0 6000 0000                  		bra.w	DeleteObject
0000BCF4                            		include	"_incObj\7C Ring Flash.asm"
0000BCF4                            ; ---------------------------------------------------------------------------
0000BCF4                            ; Object 7C - flash effect when	you collect the	giant ring
0000BCF4                            ; ---------------------------------------------------------------------------
0000BCF4                            
0000BCF4                            RingFlash:
0000BCF4 7000                       		moveq	#0,d0
0000BCF6 1028 0024                  		move.b	obRoutine(a0),d0
0000BCFA 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BCFE 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BD02                            ; ===========================================================================
0000BD02 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BD04 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BD06 0000                       		dc.w Flash_Delete-Flash_Index
0000BD08                            ; ===========================================================================
0000BD08                            
0000BD08                            Flash_Main:	; Routine 0
0000BD08 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD0C 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BD14 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BD1A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BD20 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BD26 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BD2C 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BD32                            
0000BD32                            Flash_ChkDel:	; Routine 2
0000BD32 6100                       		bsr.s	Flash_Collect
0000BD52 6000 0000                  		bra.w	DisplaySprite
0000BD56                            
0000BD56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BD56                            
0000BD56                            
0000BD56                            Flash_Collect:
0000BD56 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BD5A 6A00                       		bpl.s	locret_9F76
0000BD5C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BD62 5228 001A                  		addq.b	#1,obFrame(a0)
0000BD66 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BD6C 6400                       		bcc.s	Flash_End	; if yes, branch
0000BD6E 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BD74 6600                       		bne.s	locret_9F76	; if not, branch
0000BD76 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BD7A 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BD80 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BD86 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BD8C 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BD90 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BD94                            
0000BD94                            locret_9F76:
0000BD94 4E75                       		rts	
0000BD96                            ; ===========================================================================
0000BD96                            
0000BD96                            Flash_End:
0000BD96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD9A 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BDA0 588F                       		addq.l	#4,sp
0000BDA2 4E75                       		rts	
0000BDA4                            ; End of function Flash_Collect
0000BDA4                            
0000BDA4                            ; ===========================================================================
0000BDA4                            
0000BDA4                            Flash_Delete:	; Routine 4
0000BDA4 6000 0000                  		bra.w	DeleteObject
0000BDA4 6000 0000                  		bra.w	DeleteObject
0000BDA8                            
0000BDA8                            		include	"_anim\Rings.asm"
0000BDA8                            ; ---------------------------------------------------------------------------
0000BDA8                            ; Animation script - ring
0000BDA8                            ; ---------------------------------------------------------------------------
0000BDA8 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BDAA 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BDB0                            		even
0000BDB0                            		even
0000BDB0                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BDB0                            ; --------------------------------------------------------------------------------
0000BDB0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BDB0                            ; --------------------------------------------------------------------------------
0000BDB0                            
0000BDB0                            SME_aSMQh:	
0000BDB0 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BDB4 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BDB8 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BDBC 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BDC0 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BDC4 01                         SME_aSMQh_14:	dc.b 1	
0000BDC5 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BDCA 01                         SME_aSMQh_1A:	dc.b 1	
0000BDCB F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BDD0 01                         SME_aSMQh_20:	dc.b 1	
0000BDD1 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BDD6 01                         SME_aSMQh_26:	dc.b 1	
0000BDD7 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BDDC 01                         SME_aSMQh_2C:	dc.b 1	
0000BDDD F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BDE2 01                         SME_aSMQh_32:	dc.b 1	
0000BDE3 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BDE8 01                         SME_aSMQh_38:	dc.b 1	
0000BDE9 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BDEE 01                         SME_aSMQh_3E:	dc.b 1	
0000BDEF F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BDF4 01                         SME_aSMQh_44:	dc.b 1	
0000BDF5 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BDFA 01                         SME_aSMQh_4A:	dc.b 1	
0000BDFB F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BE00                            		even
0000BE00                            		even
0000BE00                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BE00                            ; ---------------------------------------------------------------------------
0000BE00                            ; Sprite mappings - giant ring
0000BE00                            ; ---------------------------------------------------------------------------
0000BE00                            Map_GRing_internal:
0000BE00 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BE02 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BE04 0000                       		dc.w byte_A036-Map_GRing_internal
0000BE06 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BE08 0A                         byte_9FDA:	dc.b $A
0000BE09 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BE0E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BE13 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BE18 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BE1D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BE22 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BE27 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BE2C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BE31 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BE36 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BE3B 08                         byte_A00D:	dc.b 8
0000BE3C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BE41 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BE46 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BE4B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BE50 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BE55 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BE5A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BE5F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BE64 04                         byte_A036:	dc.b 4
0000BE65 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BE6A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BE6F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BE74 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BE79 08                         byte_A04B:	dc.b 8
0000BE7A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BE7F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BE84 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BE89 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BE8E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BE93 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BE98 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BE9D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BEA2                            		even
0000BEA2                            		even
0000BEA2                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BEA2                            ; ---------------------------------------------------------------------------
0000BEA2                            ; Sprite mappings - flash effect when you collect the giant ring
0000BEA2                            ; ---------------------------------------------------------------------------
0000BEA2                            Map_Flash_internal:
0000BEA2 0000                       		dc.w byte_A084-Map_Flash_internal
0000BEA4 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BEA6 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BEA8 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BEAA 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BEAC 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BEAE 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BEB0 0000                       		dc.w byte_A103-Map_Flash_internal
0000BEB2 02                         byte_A084:	dc.b 2
0000BEB3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BEB8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BEBD 04                         byte_A08F:	dc.b 4
0000BEBE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BEC3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BEC8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BECD 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BED2 04                         byte_A0A4:	dc.b 4
0000BED3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BED8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BEDD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BEE2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BEE7 04                         byte_A0B9:	dc.b 4
0000BEE8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BEED E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BEF2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BEF7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BEFC 04                         byte_A0CE:	dc.b 4
0000BEFD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BF02 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BF07 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BF0C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BF11 04                         byte_A0E3:	dc.b 4
0000BF12 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BF17 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BF1C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BF21 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BF26 02                         byte_A0F8:	dc.b 2
0000BF27 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BF2C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BF31 04                         byte_A103:	dc.b 4
0000BF32 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BF37 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BF3C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BF41 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BF46                            		even
0000BF46                            		even
0000BF46                            		include	"_incObj\26 Monitor.asm"
0000BF46                            ; ---------------------------------------------------------------------------
0000BF46                            ; Object 26 - monitors
0000BF46                            ; ---------------------------------------------------------------------------
0000BF46                            
0000BF46                            Monitor:
0000BF46 7000                       		moveq	#0,d0
0000BF48 1028 0024                  		move.b	obRoutine(a0),d0
0000BF4C 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BF50 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BF54                            ; ===========================================================================
0000BF54 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BF56 0000                       		dc.w Mon_Solid-Mon_Index
0000BF58 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BF5A 0000                       		dc.w Mon_Animate-Mon_Index
0000BF5C 0000                       		dc.w Mon_Display-Mon_Index
0000BF5E                            ; ===========================================================================
0000BF5E                            
0000BF5E                            Mon_Main:	; Routine 0
0000BF5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF62 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BF68 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BF6E 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BF76 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BF7C 117C 0004 0001             		move.b	#4,obRender(a0)
0000BF82 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BF88 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BF8E 45F8 FC00                  		lea	(v_objstate).w,a2
0000BF92 7000                       		moveq	#0,d0
0000BF94 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BF98 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BF9E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BFA4 6700                       		beq.s	@notbroken	; if not, branch
0000BFA6 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BFAC 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BFB2 4E75                       		rts	
0000BFB4                            ; ===========================================================================
0000BFB4                            
0000BFB4                            	@notbroken:
0000BFB4 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BFBA 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BFC0                            
0000BFC0                            Mon_Solid:	; Routine 2
0000BFC0 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BFC4 6700                       		beq.s	@normal		; if not, branch
0000BFC6 5500                       		subq.b	#2,d0
0000BFC8 6600                       		bne.s	@fall
0000BFCA                            
0000BFCA                            		; 2nd Routine 2
0000BFCA 7200                       		moveq	#0,d1
0000BFCC 1228 0014                  		move.b	obActWid(a0),d1
0000BFD0 0641 000B                  		addi.w	#$B,d1
0000BFD4 6100 CDC2                  		bsr.w	ExitPlatform
0000BFD8 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BFDE 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BFE2 4228 0025                  		clr.b	ob2ndRout(a0)
0000BFE6 6000 0000                  		bra.w	Mon_Animate
0000BFEA                            ; ===========================================================================
0000BFEA                            
0000BFEA                            	@ontop:
0000BFEA 363C 0010                  		move.w	#$10,d3
0000BFEE 3428 0008                  		move.w	obX(a0),d2
0000BFF2 6100 D302                  		bsr.w	MvSonicOnPtfm
0000BFF6 6000 0000                  		bra.w	Mon_Animate
0000BFFA                            ; ===========================================================================
0000BFFA                            
0000BFFA                            @fall:		; 2nd Routine 4
0000BFFA 6100 0000                  		bsr.w	ObjectFall
0000BFFE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C004 4A41                       		tst.w	d1
0000C006 6A00 0000                  		bpl.w	Mon_Animate
0000C00A D368 000C                  		add.w	d1,obY(a0)
0000C00E 4268 0012                  		clr.w	obVelY(a0)
0000C012 4228 0025                  		clr.b	ob2ndRout(a0)
0000C016 6000 0000                  		bra.w	Mon_Animate
0000C01A                            ; ===========================================================================
0000C01A                            
0000C01A                            @normal:	; 2nd Routine 0
0000C01A 323C 001A                  		move.w	#$1A,d1
0000C01E 343C 000F                  		move.w	#$F,d2
0000C022 6100 0000                  		bsr.w	Mon_SolidSides
0000C026 6700 0000                  		beq.w	loc_A25C
0000C02A 4A69 0012                  		tst.w	obVelY(a1)
0000C02E 6B00                       		bmi.s	loc_A20A
0000C030 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C036 6700                       		beq.s	loc_A25C	; if yes, branch
0000C038 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C03E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C040 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C046 6700                       		beq.s	loc_A25C	; if yes, branch
0000C048                            
0000C048                            loc_A20A:
0000C048 4A41                       		tst.w	d1
0000C04A 6A00                       		bpl.s	loc_A220
0000C04C 9769 000C                  		sub.w	d3,obY(a1)
0000C050 6100 CC34                  		bsr.w	loc_74AE
0000C054 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C05A 6000 0000                  		bra.w	Mon_Animate
0000C05E                            ; ===========================================================================
0000C05E                            
0000C05E                            loc_A220:
0000C05E 4A40                       		tst.w	d0
0000C060 6700 0000                  		beq.w	loc_A246
0000C064 6B00                       		bmi.s	loc_A230
0000C066 4A69 0010                  		tst.w	obVelX(a1)
0000C06A 6B00                       		bmi.s	loc_A246
0000C06C 6000                       		bra.s	loc_A236
0000C06E                            ; ===========================================================================
0000C06E                            
0000C06E                            loc_A230:
0000C06E 4A69 0010                  		tst.w	obVelX(a1)
0000C072 6A00                       		bpl.s	loc_A246
0000C074                            
0000C074                            loc_A236:
0000C074 9169 0008                  		sub.w	d0,obX(a1)
0000C078 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C07E 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C084                            
0000C084                            loc_A246:
0000C084 0829 0001 0022             		btst	#1,obStatus(a1)
0000C08A 6600                       		bne.s	loc_A26A
0000C08C 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C092 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C098 6000                       		bra.s	Mon_Animate
0000C09A                            ; ===========================================================================
0000C09A                            
0000C09A                            loc_A25C:
0000C09A 0828 0005 0022             		btst	#5,obStatus(a0)
0000C0A0 6700                       		beq.s	Mon_Animate
0000C0A2 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C0A8 6700                       		beq.s	loc_A26A	; if so, branch
0000C0AA 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C0B0                            
0000C0B0                            loc_A26A:
0000C0B0 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C0B6 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C0BC                            
0000C0BC                            Mon_Animate:	; Routine 6
0000C0BC 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C0C2 6100 0000                  		bsr.w	AnimateSprite
0000C0C6                            
0000C0C6                            Mon_Display:	; Routine 8
0000C0C6 6100 0000                  		bsr.w	DisplaySprite
0000C0E8 4E75                       		rts	
0000C0EA                            ; ===========================================================================
0000C0EA                            
0000C0EA                            Mon_BreakOpen:	; Routine 4
0000C0EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C0EE 117C 0000 0020             		move.b	#0,obColType(a0)
0000C0F4 6100 0000                  		bsr.w	FindFreeObj
0000C0F8 6600                       		bne.s	Mon_Explode
0000C0FA 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C0FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C104 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C10A 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C110                            
0000C110                            Mon_Explode:
0000C110 6100 0000                  		bsr.w	FindFreeObj
0000C114 6600                       		bne.s	@fail
0000C116 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C11A 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C11E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C124 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C12A                            
0000C12A                            	@fail:
0000C12A 45F8 FC00                  		lea	(v_objstate).w,a2
0000C12E 7000                       		moveq	#0,d0
0000C130 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C134 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C13A 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C140 6000 0000                  		bra.w	DisplaySprite
0000C140 6000 0000                  		bra.w	DisplaySprite
0000C144                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C144                            ; ---------------------------------------------------------------------------
0000C144                            ; Object 2E - contents of monitors
0000C144                            ; ---------------------------------------------------------------------------
0000C144                            
0000C144                            PowerUp:
0000C144 7000                       		moveq	#0,d0
0000C146 1028 0024                  		move.b	obRoutine(a0),d0
0000C14A 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C14E 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C152 6000 0000                  		bra.w	DisplaySprite
0000C156                            ; ===========================================================================
0000C156 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C158 0000                       		dc.w Pow_Move-Pow_Index
0000C15A 0000                       		dc.w Pow_Delete-Pow_Index
0000C15C                            ; ===========================================================================
0000C15C                            
0000C15C                            Pow_Main:	; Routine 0
0000C15C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C160 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C166 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C16C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C172 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C178 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C17E 7000                       		moveq	#0,d0
0000C180 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C184 5400                       		addq.b	#2,d0
0000C186 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C18A 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C190 D000                       		add.b	d0,d0
0000C192 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C196 5249                       		addq.w	#1,a1
0000C198 2149 0004                  		move.l	a1,obMap(a0)
0000C19C                            
0000C19C                            Pow_Move:	; Routine 2
0000C19C 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C1A0 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C1A4 6100 0000                  		bsr.w	SpeedToPos
0000C1A8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C1AE 4E75                       		rts	
0000C1B0                            ; ===========================================================================
0000C1B0                            
0000C1B0                            Pow_Checks:
0000C1B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C1B4 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C1BA                            
0000C1BA                            Pow_ChkEggman:
0000C1BA 1028 001C                  		move.b	obAnim(a0),d0
0000C1BE 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C1C2 6600                       		bne.s	Pow_ChkSonic
0000C1C4                            		
0000C1C4 4EF9 0000 0000             		jmp	Spik_Hurt
0000C1CA                            		
0000C1CA 4E75                       		rts
0000C1CC                            ; ===========================================================================
0000C1CC                            
0000C1CC                            Pow_ChkSonic:
0000C1CC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C1D0 6600                       		bne.s	Pow_ChkShoes
0000C1D2                            
0000C1D2                            	ExtraLife:
0000C1D2 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C1D6 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C1E4                            
0000C1E4                            ; ===========================================================================
0000C1E4                            
0000C1E4                            Pow_ChkShoes:
0000C1E4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C1E8 6600                       		bne.s	Pow_ChkShield
0000C1EA 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C1F0 6700 0000                  		beq 	Pow_NoMus
0000C1F4 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C1FA 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C200 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C206 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C20C 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C212 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C216 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C218 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C21E 6300                       			bls.s	Pow_NoMus
0000C22A                            ; ===========================================================================
0000C22A                            
0000C22A                            Pow_NoMus:
0000C22A 4E75                       		rts	
0000C22C                            ; ===========================================================================
0000C22C                            
0000C22C                            Pow_ChkShield:
0000C22C 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000C230 6600                               bne.s    Pow_ChkInvinc
0000C232                            
0000C232 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000C238 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C23E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C244 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C24A 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C250 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C254 303C 0000                          move.w    #sfx_Shield,d0
0000C258 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C25E                            ; ===========================================================================
0000C25E                            
0000C25E                            Pow_ChkInvinc:
0000C25E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C262 6600                       		bne.s	Pow_ChkRings
0000C264 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C26A 6700 0000                  		beq 	Pow_NoMusic
0000C26E 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C274 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C27A 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C280 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C286 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C28C 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C292 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C298 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C29E 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C2A4 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C2AA 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C2AE 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C2B0 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C2B6 6300                       			bls.s	Pow_NoMusic
0000C2C2                            ; ===========================================================================
0000C2C2                            
0000C2C2                            Pow_NoMusic:
0000C2C2 4E75                       		rts	
0000C2C4                            ; ===========================================================================
0000C2C4                            
0000C2C4                            Pow_ChkRings:
0000C2C4 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C2C8 6600                       		bne.s	Pow_ChkS
0000C2CA                            
0000C2CA 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C2D0 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C2D6 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C2DC 6500                       		bcs.s	Pow_RingSound
0000C2DE 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C2E4 6700 FEEC                  		beq.w	ExtraLife
0000C2E8 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C2EE 6500                       		bcs.s	Pow_RingSound
0000C2F0 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C2F6 6700 FEDA                  		beq.w	ExtraLife
0000C2FA                            
0000C2FA                            	Pow_RingSound:
0000C304                            ; ===========================================================================
0000C304                            
0000C304                            Pow_ChkS:
0000C304 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C308 6600                       		bne.s	Pow_ChkSRing
0000C30A                            		
0000C30A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C310 6700                       		beq.s	PowS2	; if yes, branch
0000C312 0404 003B                  		subi.b	#$3B,d4
0000C316 7000                       		moveq	#0,d0
0000C318 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C31E 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C324 6000                       		bra.s	PowSPlay
0000C326                            
0000C326                            PowS2:
0000C326 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C32C 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C332 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C338 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C33E 6500                       		bcs.s	PowSPlay
0000C340 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C346 6700 FE8A                  		beq.w	ExtraLife
0000C34A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C350 6500                       		bcs.s	PowSPlay
0000C352 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C358 6700 FE78                  		beq.w	ExtraLife	
0000C35C                            
0000C35C                            PowSPlay:
0000C366                            
0000C366                            		
0000C366                            
0000C366                            
0000C366                            Pow_ChkSRing:
0000C366 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C36A 6600                       		bne.s	Pow_ChkRShield
0000C36C                            
0000C36C                            		
0000C36C 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C372 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C378 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C37E 6500                       		bcs.s	Pow_ChkSRingSound
0000C380 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C386 6700 FE4A                  		beq.w	ExtraLife
0000C38A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C390 6500                       		bcs.s	Pow_ChkSRingSound
0000C392 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C398 6700 FE38                  		beq.w	ExtraLife	
0000C39C                            
0000C39C                            Pow_ChkSRingSound:
0000C3A6                            
0000C3A6                            
0000C3A6                            Pow_ChkRShield:
0000C3A6 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C3AA 6600                               bne.s    Pow_ChkGShield
0000C3AC                            
0000C3AC 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C3B2 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C3B8 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C3BE 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C3C4 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C3CA 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C3CE 303C 0000                          move.w    #sfx_FireShield,d0
0000C3D2 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C3D8                            
0000C3D8                            Pow_ChkGShield:
0000C3D8 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C3DC 6600                               bne.s    Pow_ChkSpShield
0000C3DE                            
0000C3DE 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C3E4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C3EA 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C3F0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C3F6 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C3FC 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C400 303C 0000                          move.w    #sfx_LightningShield,d0
0000C404 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C40A                            
0000C40A                            Pow_ChkSpShield:
0000C40A 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C40E 66FA                               bne.s    Pow_ChkSpShield
0000C410                            
0000C410 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C416 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C41C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C422 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C428 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C42E 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C432 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C436 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C43C                            
0000C43C                            Pow_ChkEnd:
0000C43C 4E75                       		rts
0000C43E                            ; ===========================================================================
0000C43E                            
0000C43E                            Pow_Delete:	; Routine 4
0000C43E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C442 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C446 4E75                       		rts	
0000C446 4E75                       		rts	
0000C448                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C448                            ; ---------------------------------------------------------------------------
0000C448                            ; Subroutine to	make the sides of a monitor solid
0000C448                            ; ---------------------------------------------------------------------------
0000C448                            
0000C448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C448                            
0000C448                            
0000C448                            Mon_SolidSides:
0000C448 43F8 D000                  		lea	(v_player).w,a1
0000C44C 3029 0008                  		move.w	obX(a1),d0
0000C450 9068 0008                  		sub.w	obX(a0),d0
0000C454 D041                       		add.w	d1,d0
0000C456 6B00                       		bmi.s	loc_A4E6
0000C458 3601                       		move.w	d1,d3
0000C45A D643                       		add.w	d3,d3
0000C45C B043                       		cmp.w	d3,d0
0000C45E 6200                       		bhi.s	loc_A4E6
0000C460 1629 0016                  		move.b	obHeight(a1),d3
0000C464 4883                       		ext.w	d3
0000C466 D443                       		add.w	d3,d2
0000C468 3629 000C                  		move.w	obY(a1),d3
0000C46C 9668 000C                  		sub.w	obY(a0),d3
0000C470 D642                       		add.w	d2,d3
0000C472 6B00                       		bmi.s	loc_A4E6
0000C474 D442                       		add.w	d2,d2
0000C476 B642                       		cmp.w	d2,d3
0000C478 6400                       		bcc.s	loc_A4E6
0000C47A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C47E 6B00                       		bmi.s	loc_A4E6
0000C480 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C486 6400                       		bcc.s	loc_A4E6
0000C488 4A78 FE08                  		tst.w	(v_debuguse).w
0000C48C 6600                       		bne.s	loc_A4E6
0000C48E B240                       		cmp.w	d0,d1
0000C490 6400                       		bcc.s	loc_A4DC
0000C492 D241                       		add.w	d1,d1
0000C494 9041                       		sub.w	d1,d0
0000C496                            
0000C496                            loc_A4DC:
0000C496 0C43 0010                  		cmpi.w	#$10,d3
0000C49A 6500                       		bcs.s	loc_A4EA
0000C49C                            
0000C49C                            loc_A4E2:
0000C49C 7201                       		moveq	#1,d1
0000C49E 4E75                       		rts	
0000C4A0                            ; ===========================================================================
0000C4A0                            
0000C4A0                            loc_A4E6:
0000C4A0 7200                       		moveq	#0,d1
0000C4A2 4E75                       		rts	
0000C4A4                            ; ===========================================================================
0000C4A4                            
0000C4A4                            loc_A4EA:
0000C4A4 7200                       		moveq	#0,d1
0000C4A6 1228 0014                  		move.b	obActWid(a0),d1
0000C4AA 5841                       		addq.w	#4,d1
0000C4AC 3401                       		move.w	d1,d2
0000C4AE D442                       		add.w	d2,d2
0000C4B0 D269 0008                  		add.w	obX(a1),d1
0000C4B4 9268 0008                  		sub.w	obX(a0),d1
0000C4B8 6BE2                       		bmi.s	loc_A4E2
0000C4BA B242                       		cmp.w	d2,d1
0000C4BC 64DE                       		bcc.s	loc_A4E2
0000C4BE 72FF                       		moveq	#-1,d1
0000C4C0 4E75                       		rts	
0000C4C2                            ; End of function Obj26_SolidSides
0000C4C2                            ; End of function Obj26_SolidSides
0000C4C2                            		include	"_anim\Monitor.asm"
0000C4C2                            ; ---------------------------------------------------------------------------
0000C4C2                            ; Animation script - monitors
0000C4C2                            ; ---------------------------------------------------------------------------
0000C4C2 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C4C8 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C4CE 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C4D4 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C4DA 0000                       		dc.w @spshield-Ani_Monitor
0000C4DC                            		
0000C4DC 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C4E2 00                         		even
0000C4E2 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C4EE 00                         		even
0000C4EE 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C4FA 00                         		even
0000C4FA 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C506 00                         		even
0000C506 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C512 00                         		even
0000C512 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C51E 00                         		even
0000C51E 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C52A 00                         		even
0000C52A 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C536 00                         		even
0000C536 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C542 00                         		even
0000C542 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C54A 00                         		even
0000C54A 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C556 00                         		even
0000C556 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C562 00                         		even
0000C562 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C56E 00                         		even
0000C56E 00                         		even
0000C56E                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C56E                            ; --------------------------------------------------------------------------------
0000C56E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C56E                            ; --------------------------------------------------------------------------------
0000C56E                            
0000C56E                            SME_0IgQe:	
0000C56E 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C572 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C576 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C57A 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C57E 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C582 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C586 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C58A 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C58C 01                         SME_0IgQe_1E:	dc.b 1	
0000C58D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C592 02                         SME_0IgQe_24:	dc.b 2	
0000C593 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C598 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C59D 02                         SME_0IgQe_2F:	dc.b 2	
0000C59E F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C5A3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5A8 02                         SME_0IgQe_3A:	dc.b 2	
0000C5A9 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C5AE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5B3 02                         SME_0IgQe_45:	dc.b 2	
0000C5B4 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C5B9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5BE 02                         SME_0IgQe_50:	dc.b 2	
0000C5BF F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C5C4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5C9 02                         SME_0IgQe_5B:	dc.b 2	
0000C5CA F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C5CF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5D4 02                         SME_0IgQe_66:	dc.b 2	
0000C5D5 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C5DA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5DF 02                         SME_0IgQe_71:	dc.b 2	
0000C5E0 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C5E5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5EA 02                         SME_0IgQe_7C:	dc.b 2	
0000C5EB F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C5F0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5F5 02                         SME_0IgQe_87:	dc.b 2	
0000C5F6 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C5FB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C600 05                         SME_0IgQe_92:	dc.b 5	
0000C601 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C606 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C60B 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C610 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C615 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C61A 02                         SME_0IgQe_AC:	dc.b 2	
0000C61B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C620 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C625 02                         SME_0IgQe_B7:	dc.b 2	
0000C626 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C62B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C630 02                         SME_0IgQe_C2:	dc.b 2	
0000C631 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C636 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C63C 00                         		even
0000C63C 00                         		even
0000C63C                            
0000C63C                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C63C                            ; ---------------------------------------------------------------------------
0000C63C                            ; Object 0E - Sonic on the title screen
0000C63C                            ; ---------------------------------------------------------------------------
0000C63C                            
0000C63C                            TitleSonic:
0000C63C 7000                       		moveq	#0,d0
0000C63E 1028 0024                  		move.b	obRoutine(a0),d0
0000C642 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C646 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C64A                            ; ===========================================================================
0000C64A 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C64C 0000                       		dc.w TSon_Delay-TSon_Index
0000C64E 0000                       		dc.w TSon_Move-TSon_Index
0000C650 0000                       		dc.w TSon_Animate-TSon_Index
0000C652                            ; ===========================================================================
0000C652                            
0000C652                            TSon_Main:	; Routine 0
0000C652 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C656 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C65C 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C662 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C66A 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C670 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C676 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C67C 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C682 6100 0000                  		bsr.w	AnimateSprite
0000C686                            
0000C686                            TSon_Delay:	;Routine 2
0000C686 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C68A 6A00                       		bpl.s	@wait		; if time remains, branch
0000C68C 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C690 6000 0000                  		bra.w	DisplaySprite
0000C694                            
0000C694                            	@wait:
0000C694 4E75                       		rts	
0000C696                            ; ===========================================================================
0000C696                            
0000C696                            TSon_Move:	; Routine 4
0000C696 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C69A 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C6A0 6600                       		bne.s	@display	; if not, branch
0000C6A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6A6                            
0000C6A6                            	@display:
0000C6A6 6000 0000                  		bra.w	DisplaySprite
0000C6AA                            
0000C6AA 4E75                       		rts	
0000C6AC                            ; ===========================================================================
0000C6AC                            
0000C6AC                            TSon_Animate:	; Routine 6
0000C6AC 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C6B2 6100 0000                  		bsr.w	AnimateSprite
0000C6B6 6000 0000                  		bra.w	DisplaySprite
0000C6BA                            
0000C6BA 4E75                       		rts	
0000C6BA 4E75                       		rts	
0000C6BC                            		include	"_incObj\0F Press Start and TM.asm"
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC                            
0000C6BC                            PSBTM:
0000C6BC 7000                       		moveq	#0,d0
0000C6BE 1028 0024                  		move.b	obRoutine(a0),d0
0000C6C2 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C6C6 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C6CA 6000 0000                  		bra.w	DisplaySprite
0000C6CE                            ; ===========================================================================
0000C6CE 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C6D0 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C6D2 0000                       		dc.w PSB_Exit-PSB_Index
0000C6D4 0000                       		dc.w PSB_Menu-PSB_Index		
0000C6D6                            ; ===========================================================================
0000C6D6                            
0000C6D6                            PSB_Main:	; Routine 0
0000C6D6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6DA 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C6E0 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C6E6 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C6EE 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C6F4 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C6FA 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C6FC                            
0000C6FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C700 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C706 6600                       		bne.s	PSB_Exit	; if not, branch
0000C708                            
0000C708 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C70E 317C 0170 0008             		move.w	#$170,obX(a0)
0000C714 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C71A                            
0000C71A                            PSB_Exit:	; Routine 4
0000C71A 4E75                       		rts	
0000C71C                            ; ===========================================================================
0000C71C                            
0000C71C                            PSB_PrsStart:	; Routine 2
0000C71C 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C722 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C724 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C728 303C 00A1                  		move.w   #$A1,d0 
0000C72C 4EB8 12A0                  		jsr   PlaySound_Special
0000C730 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C736 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C73E 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C744 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C74A 4E75                       		rts
0000C74C                            
0000C74C                            PSB_PrsStart_Show:
0000C74C 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C752 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C756                            
0000C756                            PSB_Menu:
0000C756 7400                             moveq   #0,d2
0000C758 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C75C 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C760 0800 0000                        btst   #0,d0
0000C764 6700                             beq.s   MAIN2
0000C766 5302                             subq.b   #1,d2
0000C768 6400                             bcc.s   MAIN2
0000C76A 143C 0001                        move.b   #1,d2
0000C76E                            
0000C76E                            MAIN2:
0000C76E 0800 0001                        btst   #1,d0
0000C772 6700                             beq.s   MAIN3
0000C774 5202                             addq.b   #1,d2
0000C776 0C02 0002                        cmpi.b   #2,d2
0000C77A 6500                             blo.s   MAIN3
0000C77C 7400                             moveq   #0,d2
0000C77E                            
0000C77E                            MAIN3:
0000C77E 1142 001A                        move.b   d2,$1A(a0)
0000C782 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C786 0200 0003                        andi.b   #3,d0
0000C78A 6700                             beq.s   MAIN4   
0000C78C 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C790 4EB8 12A0                        jsr   PlaySound_Special
0000C794                            
0000C794                            MAIN4:
0000C794 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C79A 6700                             beq.s   MENURTS   ; if not, branch
0000C79C 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C7A2                            
0000C7A2                            MENURTS:
0000C7A2 4E75                             rts															 
0000C7A4                            ; ===========================================================================
0000C7A4                            
0000C7A4                            
0000C7A4                            Map_TitleMenu:
0000C7A4                            		include "_maps\Title Screen Menu.asm"		
0000C7A4                            ; --------------------------------------------------------------------------------
0000C7A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C7A4                            ; --------------------------------------------------------------------------------
0000C7A4                            
0000C7A4                            SME_g2Qfx:	
0000C7A4 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C7A8 10                         SME_g2Qfx_6:	dc.b $10	
0000C7A9 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C7AE E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C7B3 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C7B8 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C7BD E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C7C2 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C7C7 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C7CC E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C7D1 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C7D6 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C7DB F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C7E0 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C7E5 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C7EA F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C7EF F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C7F4 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C7F9 10                         SME_g2Qfx_6B:	dc.b $10	
0000C7FA E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C7FF E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C804 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C809 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C80E E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C813 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C818 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C81D E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C822 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C827 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C82C F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C831 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C836 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C83B F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C840 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C845 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C84A                            		even
0000C84A                            		even
0000C84A                            		even
0000C84A                            
0000C84A                            		include	"_anim\Title Screen Sonic.asm"
0000C84A                            ; ---------------------------------------------------------------------------
0000C84A                            ; Animation script - Sonic on the title screen
0000C84A                            ; ---------------------------------------------------------------------------
0000C84A 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C84C 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C858 00                         		even
0000C858 00                         		even
0000C858                            		include	"_anim\Press Start and TM.asm"
0000C858                            ; ---------------------------------------------------------------------------
0000C858                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C858                            ; ---------------------------------------------------------------------------
0000C858 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C85A 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C85E                            		even
0000C85E                            		even
0000C85E                            
0000C85E                            		include	"_incObj\sub AnimateSprite.asm"
0000C85E                            ; ---------------------------------------------------------------------------
0000C85E                            ; Subroutine to	animate	a sprite using an animation script
0000C85E                            ; ---------------------------------------------------------------------------
0000C85E                            
0000C85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C85E                            
0000C85E                            
0000C85E                            AnimateSprite:
0000C85E 7000                       		moveq	#0,d0
0000C860 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C864 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C868 6700                       		beq.s	Anim_Run	; if not, branch
0000C86A                            
0000C86A 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C86E 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C874 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C87A                            
0000C87A                            Anim_Run:
0000C87A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C87E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C880 D040                       		add.w	d0,d0
0000C882 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C886 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C88A 7200                       		moveq	#0,d1
0000C88C 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C890 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C894 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C896                            
0000C896                            Anim_Next:
0000C896 1200                       		move.b	d0,d1
0000C898 0200 001F                  		andi.b	#$1F,d0
0000C89C 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C8A0 1028 0022                  		move.b	obStatus(a0),d0
0000C8A4 E719                       		rol.b	#3,d1
0000C8A6 B101                       		eor.b	d0,d1
0000C8A8 0201 0003                  		andi.b	#3,d1
0000C8AC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C8B2 8328 0001                  		or.b	d1,obRender(a0)
0000C8B6 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C8BA                            
0000C8BA                            Anim_Wait:
0000C8BA 4E75                       		rts	
0000C8BC                            ; ===========================================================================
0000C8BC                            
0000C8BC                            Anim_End_FF:
0000C8BC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C8BE 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C8C0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C8C6 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C8CA 60CA                       		bra.s	Anim_Next
0000C8CC                            ; ===========================================================================
0000C8CC                            
0000C8CC                            Anim_End_FE:
0000C8CC 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C8CE 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C8D0 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C8D4 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C8D8 9200                       		sub.b	d0,d1
0000C8DA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C8DE 60B6                       		bra.s	Anim_Next
0000C8E0                            ; ===========================================================================
0000C8E0                            
0000C8E0                            Anim_End_FD:
0000C8E0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C8E2 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C8E4 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C8EA                            
0000C8EA                            Anim_End_FC:
0000C8EA 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C8EC 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C8EE 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C8F2                            
0000C8F2                            Anim_End_FB:
0000C8F2 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C8F4 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C8F6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C8FC 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C900                            
0000C900                            Anim_End_FA:
0000C900 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C902 6600                       		bne.s	Anim_End	; if not, branch
0000C904 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C908                            
0000C908                            Anim_End:
0000C908 4E75                       		rts	
0000C90A                            ; End of function AnimateSprite
0000C90A                            ; End of function AnimateSprite
0000C90A                            
0000C90A                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C90A                            ; ---------------------------------------------------------------------------
0000C90A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C90A                            ; ---------------------------------------------------------------------------
0000C90A                            Map_PSB_internal:
0000C90A 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C90C 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C90E 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C910 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C912 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C913 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C918 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C91D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C922 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C927 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C92C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C931 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C932 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C937 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C93C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C941 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C946 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C94B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C950 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C955 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C95A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C95F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C964 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C969 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C96E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C973 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C978 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C97D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C982 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C987 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C98C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C991 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C996 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C99B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9A0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9A5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9AA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9AF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9B4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9B9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9BE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9C3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9C8 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C9C9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C9CE                            		even
0000C9CE                            		even
0000C9CE                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C9CE                            ; ---------------------------------------------------------------------------
0000C9CE                            ; Sprite mappings - Sonic on the title screen
0000C9CE                            ; ---------------------------------------------------------------------------
0000C9CE                            Map_TSon_internal:
0000C9CE 0000                       		dc.w byte_A898-Map_TSon_internal
0000C9D0 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C9D2 0000                       		dc.w byte_A917-Map_TSon_internal
0000C9D4 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C9D6 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C9D8 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C9DA 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C9DC 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C9DE 0A                         byte_A898:	dc.b $A
0000C9DF 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C9E4 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C9E9 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C9EE 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C9F3 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C9F8 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C9FD 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CA02 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CA07 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CA0C 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CA11 0F                         byte_A8CB:	dc.b $F
0000CA12 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CA17 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CA1C 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CA21 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CA26 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CA2B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA30 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA35 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA3A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA3F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA44 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA49 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CA4E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CA53 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CA58 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA5D 11                         byte_A917:	dc.b $11
0000CA5E 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CA63 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CA68 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CA6D 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CA72 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CA77 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CA7C 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CA81 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA86 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA8B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA90 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA95 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA9A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA9F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CAA4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CAA9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CAAE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CAB3 0D                         byte_A96D:	dc.b $D
0000CAB4 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CAB9 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CABE 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CAC3 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CAC8 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CACD 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CAD2 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CAD7 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CADC 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CAE1 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CAE6 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CAEB 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CAF0 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CAF5 0B                         byte_A9AF:	dc.b $B
0000CAF6 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CAFB 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CB00 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CB05 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CB0A 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CB0F 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CB14 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CB19 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CB1E 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CB23 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CB28 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CB2D 13                         byte_A9E7:	dc.b $13
0000CB2E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB33 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB38 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB3D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CB42 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB47 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB4C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB51 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB56 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB5B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB60 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB65 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB6A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB6F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB74 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB79 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB7E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB83 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB88 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB8D 15                         byte_AA47:	dc.b $15
0000CB8E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB93 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB98 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB9D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CBA2 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CBA7 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CBAC 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBB1 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBB6 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBBB 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBC0 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBC5 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBCA 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CBCF 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CBD4 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CBD9 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CBDE 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CBE3 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CBE8 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CBED 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CBF2 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CBF7 16                         byte_AAB1:	dc.b $16
0000CBF8 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CBFD 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CC02 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CC07 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CC0C 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CC11 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC16 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC1B 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC20 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC25 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC2A 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC2F 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC34 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC39 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC3E 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC43 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC48 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC4D 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC52 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC57 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC5C 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC61 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC66                            		even
0000CC66                            		even
0000CC66                            
0000CC66                            		include	"_incObj\2B Chopper.asm"
0000CC66                            ; ---------------------------------------------------------------------------
0000CC66                            ; Object 2B - Chopper enemy (GHZ)
0000CC66                            ; ---------------------------------------------------------------------------
0000CC66                            
0000CC66                            Chopper:
0000CC66 7000                       		moveq	#0,d0
0000CC68 1028 0024                  		move.b	obRoutine(a0),d0
0000CC6C 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CC70 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CC74 6000 0000                  		bra.w	RememberState
0000CC78                            ; ===========================================================================
0000CC78 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CC7A 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CC7C                            
0000CC7C =00000030                  chop_origY:	equ $30
0000CC7C                            ; ===========================================================================
0000CC7C                            
0000CC7C                            Chop_Main:	; Routine 0
0000CC7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CC80 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CC88 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CC8E 117C 0004 0001             		move.b	#4,obRender(a0)
0000CC94 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CC9A 117C 0009 0020             		move.b	#9,obColType(a0)
0000CCA0 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CCA6 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CCAC 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CCB2                            
0000CCB2                            Chop_ChgSpeed:	; Routine 2
0000CCB2 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CCB8 6100 FBA4                  		bsr.w	AnimateSprite
0000CCBC 6100 0000                  		bsr.w	SpeedToPos
0000CCC0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CCC6 3028 0030                  		move.w	chop_origY(a0),d0
0000CCCA B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CCCE 6400                       		bcc.s	@chganimation	; if not, branch
0000CCD0 3140 000C                  		move.w	d0,obY(a0)
0000CCD4 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CCDA                            
0000CCDA                            	@chganimation:
0000CCDA 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CCE0 0440 00C0                  		subi.w	#$C0,d0
0000CCE4 B068 000C                  		cmp.w	obY(a0),d0
0000CCE8 6400                       		bcc.s	@nochg
0000CCEA 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CCF0 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CCF4 6B00                       		bmi.s	@nochg		; if not, branch
0000CCF6 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CCFC                            
0000CCFC                            	@nochg:
0000CCFC 4E75                       		rts	
0000CCFC 4E75                       		rts	
0000CCFE                            		include	"_anim\Chopper.asm"
0000CCFE                            ; ---------------------------------------------------------------------------
0000CCFE                            ; Animation script - Chopper enemy
0000CCFE                            ; ---------------------------------------------------------------------------
0000CCFE 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CD00 0000                       		dc.w @fast-Ani_Chop
0000CD02 0000                       		dc.w @still-Ani_Chop
0000CD04 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CD08 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CD0C 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CD10 00                         		even
0000CD10 00                         		even
0000CD10                            Map_Chop:	include	"_maps\Chopper.asm"
0000CD10                            ; ---------------------------------------------------------------------------
0000CD10                            ; Sprite mappings - Chopper enemy (GHZ)
0000CD10                            ; ---------------------------------------------------------------------------
0000CD10                            Map_Chop_internal:
0000CD10 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CD12 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CD14 01                         @mouthshut:	dc.b 1
0000CD15 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CD1A 01                         @mouthopen:	dc.b 1
0000CD1B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CD20                            		even
0000CD20                            		even
0000CD20                            		include	"_incObj\2C Jaws.asm"
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20                            ; Object 2C - Jaws enemy (LZ)
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20                            
0000CD20                            Jaws:
0000CD20 7000                       		moveq	#0,d0
0000CD22 1028 0024                  		move.b	obRoutine(a0),d0
0000CD26 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CD2A 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CD2E                            ; ===========================================================================
0000CD2E 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CD30 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CD32                            
0000CD32 =00000030                  jaws_timecount:	equ $30
0000CD32 =00000032                  jaws_timedelay:	equ $32
0000CD32                            ; ===========================================================================
0000CD32                            
0000CD32                            Jaws_Main:	; Routine 0
0000CD32 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD36 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CD3E 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CD44 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CD4A 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CD50 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD56 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD5C 7000                       		moveq	#0,d0
0000CD5E 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CD62 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CD64 5340                       		subq.w	#1,d0
0000CD66 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CD6A 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CD6E 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CD74 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CD7A 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CD7C 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CD80                            
0000CD80                            Jaws_Turn:	; Routine 2
0000CD80 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CD84 6A00                       		bpl.s	@animate	; if time remains, branch
0000CD86 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CD8C 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CD90 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CD96 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CD9C                            
0000CD9C                            	@animate:
0000CD9C 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CDA2 6100 FABA                  		bsr.w	AnimateSprite
0000CDA6 6100 0000                  		bsr.w	SpeedToPos
0000CDAA 6000 0000                  		bra.w	RememberState
0000CDAA 6000 0000                  		bra.w	RememberState
0000CDAE                            		include	"_anim\Jaws.asm"
0000CDAE                            ; ---------------------------------------------------------------------------
0000CDAE                            ; Animation script - Jaws enemy
0000CDAE                            ; ---------------------------------------------------------------------------
0000CDAE 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CDB0 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CDB6                            		even
0000CDB6                            		even
0000CDB6                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CDB6                            ; --------------------------------------------------------------------------------
0000CDB6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CDB6                            ; --------------------------------------------------------------------------------
0000CDB6                            
0000CDB6                            SME_O5C0c:	
0000CDB6 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CDBA 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CDBE 02                         SME_O5C0c_8:	dc.b 2	
0000CDBF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDC4 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CDC9 02                         SME_O5C0c_13:	dc.b 2	
0000CDCA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CDCF F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CDD4 02                         SME_O5C0c_1E:	dc.b 2	
0000CDD5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDDA F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CDDF 02                         SME_O5C0c_29:	dc.b 2	
0000CDE0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CDE5 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CDEA                            		even
0000CDEA                            		even
0000CDEA                            		include	"_incObj\2D Burrobot.asm"
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA                            ; Object 2D - Burrobot enemy (LZ)
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA                            
0000CDEA                            Burrobot:
0000CDEA 7000                       		moveq	#0,d0
0000CDEC 1028 0024                  		move.b	obRoutine(a0),d0
0000CDF0 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CDF4 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CDF8                            ; ===========================================================================
0000CDF8 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CDFA 0000                       		dc.w Burro_Action-Burro_Index
0000CDFC                            
0000CDFC =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CDFC                            ; ===========================================================================
0000CDFC                            
0000CDFC                            Burro_Main:	; Routine 0
0000CDFC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE00 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CE06 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CE0C 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CE14 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CE1A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CE20 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE26 117C 0005 0020             		move.b	#5,obColType(a0)
0000CE2C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CE32 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CE36 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CE3C                            
0000CE3C                            Burro_Action:	; Routine 2
0000CE3C 7000                       		moveq	#0,d0
0000CE3E 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CE42 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CE46 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CE4A 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CE50 6100 FA0C                  		bsr.w	AnimateSprite
0000CE54 6000 0000                  		bra.w	RememberState
0000CE58                            ; ===========================================================================
0000CE58 0000                       @index:		dc.w @changedir-@index
0000CE5A 0000                       		dc.w Burro_Move-@index
0000CE5C 0000                       		dc.w Burro_Jump-@index
0000CE5E 0000                       		dc.w Burro_ChkSonic-@index
0000CE60                            ; ===========================================================================
0000CE60                            
0000CE60                            @changedir:
0000CE60 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE64 6A00                       		bpl.s	@nochg
0000CE66 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE6A 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE70 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CE76 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE7C 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CE82 6700                       		beq.s	@nochg
0000CE84 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CE88                            
0000CE88                            	@nochg:
0000CE88 4E75                       		rts	
0000CE8A                            ; ===========================================================================
0000CE8A                            
0000CE8A                            Burro_Move:
0000CE8A 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE8E 6B00                       		bmi.s	loc_AD84
0000CE90 6100 0000                  		bsr.w	SpeedToPos
0000CE94 0868 0000 0032             		bchg	#0,$32(a0)
0000CE9A 6600                       		bne.s	loc_AD78
0000CE9C 3628 0008                  		move.w	obX(a0),d3
0000CEA0 0643 000C                  		addi.w	#$C,d3
0000CEA4 0828 0000 0022             		btst	#0,obStatus(a0)
0000CEAA 6600                       		bne.s	loc_AD6A
0000CEAC 0443 0018                  		subi.w	#$18,d3
0000CEB0                            
0000CEB0                            loc_AD6A:
0000CEB0 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CEB6 0C41 000C                  		cmpi.w	#$C,d1
0000CEBA 6C00                       		bge.s	loc_AD84
0000CEBC 4E75                       		rts	
0000CEBE                            ; ===========================================================================
0000CEBE                            
0000CEBE                            loc_AD78:
0000CEBE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CEC4 D368 000C                  		add.w	d1,obY(a0)
0000CEC8 4E75                       		rts	
0000CECA                            ; ===========================================================================
0000CECA                            
0000CECA                            loc_AD84:
0000CECA 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CED0 6700                       		beq.s	loc_ADA4
0000CED2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CED6 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CEDC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CEE2 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CEE8 4E75                       		rts	
0000CEEA                            ; ===========================================================================
0000CEEA                            
0000CEEA                            loc_ADA4:
0000CEEA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CEEE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CEF4 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CEFA 4E75                       		rts	
0000CEFC                            ; ===========================================================================
0000CEFC                            
0000CEFC                            Burro_Jump:
0000CEFC 6100 0000                  		bsr.w	SpeedToPos
0000CF00 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CF06 6B00                       		bmi.s	locret_ADF0
0000CF08 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CF0E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF14 4A41                       		tst.w	d1
0000CF16 6A00                       		bpl.s	locret_ADF0
0000CF18 D368 000C                  		add.w	d1,obY(a0)
0000CF1C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CF22 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF28 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CF2E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF32 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF36                            
0000CF36                            locret_ADF0:
0000CF36 4E75                       		rts	
0000CF38                            ; ===========================================================================
0000CF38                            
0000CF38                            Burro_ChkSonic:
0000CF38 343C 0060                  		move.w	#$60,d2
0000CF3C 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF40 6400                       		bcc.s	locret_AE20
0000CF42 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CF46 9068 000C                  		sub.w	obY(a0),d0
0000CF4A 6400                       		bcc.s	locret_AE20
0000CF4C 0C40 FF80                  		cmpi.w	#-$80,d0
0000CF50 6500                       		bcs.s	locret_AE20
0000CF52 4A78 FE08                  		tst.w	(v_debuguse).w
0000CF56 6600                       		bne.s	locret_AE20
0000CF58 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF5C 3141 0010                  		move.w	d1,obVelX(a0)
0000CF60 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF66                            
0000CF66                            locret_AE20:
0000CF66 4E75                       		rts	
0000CF68                            
0000CF68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CF68                            
0000CF68                            
0000CF68                            Burro_ChkSonic2:
0000CF68 323C 0080                  		move.w	#$80,d1
0000CF6C 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CF72 3038 D008                  		move.w	(v_player+obX).w,d0
0000CF76 9068 0008                  		sub.w	obX(a0),d0
0000CF7A 6400                       		bcc.s	loc_AE40
0000CF7C 4440                       		neg.w	d0
0000CF7E 4441                       		neg.w	d1
0000CF80 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CF86                            
0000CF86                            loc_AE40:
0000CF86 B042                       		cmp.w	d2,d0
0000CF88 4E75                       		rts	
0000CF8A                            ; End of function Burro_ChkSonic2
0000CF8A                            ; End of function Burro_ChkSonic2
0000CF8A                            		include	"_anim\Burrobot.asm"
0000CF8A                            ; ---------------------------------------------------------------------------
0000CF8A                            ; Animation script - Burrobot enemy
0000CF8A                            ; ---------------------------------------------------------------------------
0000CF8A 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CF8C 0000                       		dc.w @walk2-Ani_Burro
0000CF8E 0000                       		dc.w @digging-Ani_Burro
0000CF90 0000                       		dc.w @fall-Ani_Burro
0000CF92 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CF96 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CF9A 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CF9E 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CFA2 00                         		even
0000CFA2 00                         		even
0000CFA2                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CFA2                            ; --------------------------------------------------------------------------------
0000CFA2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CFA2                            ; --------------------------------------------------------------------------------
0000CFA2                            
0000CFA2                            SME_Ag_86:	
0000CFA2 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CFA6 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CFAA 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CFAE 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CFB0 02                         SME_Ag_86_E:	dc.b 2	
0000CFB1 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CFB6 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CFBB 02                         SME_Ag_86_19:	dc.b 2	
0000CFBC EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CFC1 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CFC6 02                         SME_Ag_86_24:	dc.b 2	
0000CFC7 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CFCC 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CFD1 02                         SME_Ag_86_2F:	dc.b 2	
0000CFD2 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CFD7 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CFDC 02                         SME_Ag_86_3A:	dc.b 2	
0000CFDD E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CFE2 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CFE7 02                         SME_Ag_86_45:	dc.b 2	
0000CFE8 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CFED F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CFF2 02                         SME_Ag_86_50:	dc.b 2	
0000CFF3 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CFF8 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CFFE 00                         		even
0000CFFE 00                         		even
0000CFFE                            
0000CFFE                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CFFE                            ; ---------------------------------------------------------------------------
0000CFFE                            ; Object 2F - large grass-covered platforms (MZ)
0000CFFE                            ; ---------------------------------------------------------------------------
0000CFFE                            
0000CFFE                            LargeGrass:
0000CFFE 7000                       		moveq	#0,d0
0000D000 1028 0024                  		move.b	obRoutine(a0),d0
0000D004 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D008 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D00C                            ; ===========================================================================
0000D00C 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D00E 0000                       		dc.w LGrass_Action-LGrass_Index
0000D010                            
0000D010 =0000002A                  lgrass_origX:	equ $2A
0000D010 =0000002C                  lgrass_origY:	equ $2C
0000D010                            
0000D010 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D012 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D014 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D016 0140                       		dc.b 1,	$40
0000D018 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D01A 0220                       		dc.b 2,	$20
0000D01C                            ; ===========================================================================
0000D01C                            
0000D01C                            LGrass_Main:	; Routine 0
0000D01C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D020 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D028 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D02E 117C 0004 0001             		move.b	#4,obRender(a0)
0000D034 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D03A 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D040 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D046 7000                       		moveq	#0,d0
0000D048 1028 0028                  		move.b	obSubtype(a0),d0
0000D04C E448                       		lsr.w	#2,d0
0000D04E 0240 001C                  		andi.w	#$1C,d0
0000D052 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D056 3019                       		move.w	(a1)+,d0
0000D058 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D05C 214A 0030                  		move.l	a2,$30(a0)
0000D060 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D064 1151 0014                  		move.b	(a1),obActWid(a0)
0000D068 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D06E 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D074 08E8 0004 0001             		bset	#4,1(a0)
0000D07A                            
0000D07A                            LGrass_Action:	; Routine 2
0000D07A 6100 0000                  		bsr.w	LGrass_Types
0000D07E 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D082 6700                       		beq.s	LGrass_Solid
0000D084 7200                       		moveq	#0,d1
0000D086 1228 0014                  		move.b	obActWid(a0),d1
0000D08A 0641 000B                  		addi.w	#$B,d1
0000D08E 6100 BD08                  		bsr.w	ExitPlatform
0000D092 0829 0003 0022             		btst	#3,obStatus(a1)
0000D098 6600 0000                  		bne.w	LGrass_Slope
0000D09C 4228 0025                  		clr.b	ob2ndRout(a0)
0000D0A0 6000                       		bra.s	LGrass_Display
0000D0A2                            ; ===========================================================================
0000D0A2                            
0000D0A2                            LGrass_Slope:
0000D0A2 7200                       		moveq	#0,d1
0000D0A4 1228 0014                  		move.b	obActWid(a0),d1
0000D0A8 0641 000B                  		addi.w	#$B,d1
0000D0AC 2468 0030                  		movea.l	$30(a0),a2
0000D0B0 3428 0008                  		move.w	obX(a0),d2
0000D0B4 6100 CC7C                  		bsr.w	SlopeObject2
0000D0B8 6000                       		bra.s	LGrass_Display
0000D0BA                            ; ===========================================================================
0000D0BA                            
0000D0BA                            LGrass_Solid:
0000D0BA 7200                       		moveq	#0,d1
0000D0BC 1228 0014                  		move.b	obActWid(a0),d1
0000D0C0 0641 000B                  		addi.w	#$B,d1
0000D0C4 343C 0020                  		move.w	#$20,d2
0000D0C8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D0CE 6600                       		bne.s	loc_AF8E
0000D0D0 343C 0030                  		move.w	#$30,d2
0000D0D4                            
0000D0D4                            loc_AF8E:
0000D0D4 2468 0030                  		movea.l	$30(a0),a2
0000D0D8 6100 0000                  		bsr.w	SolidObject2F
0000D0DC                            
0000D0DC                            LGrass_Display:
0000D0DC 6100 0000                  		bsr.w	DisplaySprite
0000D0E0 6000 0000                  		bra.w	LGrass_ChkDel
0000D0E4                            
0000D0E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D0E4                            
0000D0E4                            
0000D0E4                            LGrass_Types:
0000D0E4 7000                       		moveq	#0,d0
0000D0E6 1028 0028                  		move.b	obSubtype(a0),d0
0000D0EA 0240 0007                  		andi.w	#7,d0
0000D0EE D040                       		add.w	d0,d0
0000D0F0 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D0F4 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D0F8                            ; End of function LGrass_Types
0000D0F8                            
0000D0F8                            ; ===========================================================================
0000D0F8 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D0FA 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D0FC 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D0FE 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D100 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D102 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D104                            ; ===========================================================================
0000D104                            
0000D104                            LGrass_Type00:
0000D104 4E75                       		rts			; type 00 platform doesn't move
0000D106                            ; ===========================================================================
0000D106                            
0000D106                            LGrass_Type01:
0000D106 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D10A 323C 0020                  		move.w	#$20,d1
0000D10E 6000                       		bra.s	LGrass_Move
0000D110                            ; ===========================================================================
0000D110                            
0000D110                            LGrass_Type02:
0000D110 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D114 323C 0030                  		move.w	#$30,d1
0000D118 6000                       		bra.s	LGrass_Move
0000D11A                            ; ===========================================================================
0000D11A                            
0000D11A                            LGrass_Type03:
0000D11A 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D11E 323C 0040                  		move.w	#$40,d1
0000D122 6000                       		bra.s	LGrass_Move
0000D124                            ; ===========================================================================
0000D124                            
0000D124                            LGrass_Type04:
0000D124 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D128 323C 0060                  		move.w	#$60,d1
0000D12C                            
0000D12C                            LGrass_Move:
0000D12C 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D132 6700                       		beq.s	loc_AFF2
0000D134 4440                       		neg.w	d0
0000D136 D041                       		add.w	d1,d0
0000D138                            
0000D138                            loc_AFF2:
0000D138 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D13C 9240                       		sub.w	d0,d1
0000D13E 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D142 4E75                       		rts	
0000D144                            ; ===========================================================================
0000D144                            
0000D144                            LGrass_Type05:
0000D144 1028 0034                  		move.b	$34(a0),d0
0000D148 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D14C 6600                       		bne.s	loc_B010
0000D14E 5500                       		subq.b	#2,d0
0000D150 6400                       		bcc.s	loc_B01C
0000D152 7000                       		moveq	#0,d0
0000D154 6000                       		bra.s	loc_B01C
0000D156                            ; ===========================================================================
0000D156                            
0000D156                            loc_B010:
0000D156 5800                       		addq.b	#4,d0
0000D158 0C00 0040                  		cmpi.b	#$40,d0
0000D15C 6500                       		bcs.s	loc_B01C
0000D15E 103C 0040                  		move.b	#$40,d0
0000D162                            
0000D162                            loc_B01C:
0000D162 1140 0034                  		move.b	d0,$34(a0)
0000D166 4EB9 0000 3CCA             		jsr	(CalcSine).l
0000D16C E848                       		lsr.w	#4,d0
0000D16E 3200                       		move.w	d0,d1
0000D170 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D174 3140 000C                  		move.w	d0,obY(a0)
0000D178 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D17E 6600                       		bne.s	loc_B07A
0000D180 4A28 0035                  		tst.b	$35(a0)
0000D184 6600                       		bne.s	loc_B07A
0000D186 117C 0001 0035             		move.b	#1,$35(a0)
0000D18C 6100 0000                  		bsr.w	FindNextFreeObj
0000D190 6600                       		bne.s	loc_B07A
0000D192 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D196 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D19C 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D1A2 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D1A6 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D1AA 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D1B0 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D1B6 2348 0038                  		move.l	a0,$38(a1)
0000D1BA 2448                       		movea.l	a0,a2
0000D1BC 6100                       		bsr.s	sub_B09C
0000D1BE                            
0000D1BE                            loc_B07A:
0000D1BE 7400                       		moveq	#0,d2
0000D1C0 45E8 0036                  		lea	$36(a0),a2
0000D1C4 141A                       		move.b	(a2)+,d2
0000D1C6 5302                       		subq.b	#1,d2
0000D1C8 6500                       		bcs.s	locret_B09A
0000D1CA                            
0000D1CA                            loc_B086:
0000D1CA 7000                       		moveq	#0,d0
0000D1CC 101A                       		move.b	(a2)+,d0
0000D1CE ED48                       		lsl.w	#6,d0
0000D1D0 0640 D000                  		addi.w	#$D000,d0
0000D1D4 3240                       		movea.w	d0,a1
0000D1D6 3341 003C                  		move.w	d1,$3C(a1)
0000D1DA 51CA FFEE                  		dbf	d2,loc_B086
0000D1DE                            
0000D1DE                            locret_B09A:
0000D1DE 4E75                       		rts	
0000D1E0                            
0000D1E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D1E0                            
0000D1E0                            
0000D1E0                            sub_B09C:
0000D1E0 45EA 0036                  		lea	$36(a2),a2
0000D1E4 7000                       		moveq	#0,d0
0000D1E6 1012                       		move.b	(a2),d0
0000D1E8 5212                       		addq.b	#1,(a2)
0000D1EA 45F2 0001                  		lea	1(a2,d0.w),a2
0000D1EE 3009                       		move.w	a1,d0
0000D1F0 0440 D000                  		subi.w	#$D000,d0
0000D1F4 EC48                       		lsr.w	#6,d0
0000D1F6 0240 007F                  		andi.w	#$7F,d0
0000D1FA 1480                       		move.b	d0,(a2)
0000D1FC 4E75                       		rts	
0000D1FE                            ; End of function sub_B09C
0000D1FE                            
0000D1FE                            ; ===========================================================================
0000D1FE                            
0000D1FE                            LGrass_ChkDel:
0000D1FE 4A28 0035                  		tst.b	$35(a0)
0000D202 6700                       		beq.s	loc_B0C6
0000D204 4A28 0001                  		tst.b	obRender(a0)
0000D208 6A00                       		bpl.s	LGrass_DelFlames
0000D20A                            
0000D20A                            loc_B0C6:
0000D228 4E75                       		rts	
0000D22A                            ; ===========================================================================
0000D22A                            
0000D22A                            LGrass_DelFlames:
0000D22A 7400                       		moveq	#0,d2
0000D22C                            
0000D22C                            loc_B0E8:
0000D22C 45E8 0036                  		lea	$36(a0),a2
0000D230 1412                       		move.b	(a2),d2
0000D232 421A                       		clr.b	(a2)+
0000D234 5302                       		subq.b	#1,d2
0000D236 6500                       		bcs.s	locret_B116
0000D238                            
0000D238                            loc_B0F4:
0000D238 7000                       		moveq	#0,d0
0000D23A 1012                       		move.b	(a2),d0
0000D23C 421A                       		clr.b	(a2)+
0000D23E ED48                       		lsl.w	#6,d0
0000D240 0640 D000                  		addi.w	#$D000,d0
0000D244 3240                       		movea.w	d0,a1
0000D246 6100 0000                  		bsr.w	DeleteChild
0000D24A 51CA FFEC                  		dbf	d2,loc_B0F4
0000D24E 117C 0000 0035             		move.b	#0,$35(a0)
0000D254 117C 0000 0034             		move.b	#0,$34(a0)
0000D25A                            
0000D25A                            locret_B116:
0000D25A 4E75                       		rts	
0000D25C                            ; ===========================================================================
0000D25C                            ; ---------------------------------------------------------------------------
0000D25C                            ; Collision data for large moving platforms (MZ)
0000D25C                            ; ---------------------------------------------------------------------------
0000D25C                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D2A8                            		even
0000D2A8                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D2D4                            		even
0000D2D4                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D320                            		even
0000D320                            		even
0000D320                            		include	"_incObj\35 Burning Grass.asm"
0000D320                            ; ---------------------------------------------------------------------------
0000D320                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D320                            ; (appears when	you walk on sinking platforms)
0000D320                            ; ---------------------------------------------------------------------------
0000D320                            
0000D320                            GrassFire:
0000D320 7000                       		moveq	#0,d0
0000D322 1028 0024                  		move.b	obRoutine(a0),d0
0000D326 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D32A 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D32E                            ; ===========================================================================
0000D32E 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D330 0000                       		dc.w loc_B238-GFire_Index
0000D332 0000                       		dc.w GFire_Move-GFire_Index
0000D334                            
0000D334 =0000002A                  gfire_origX:	equ $2A
0000D334                            ; ===========================================================================
0000D334                            
0000D334                            GFire_Main:	; Routine 0
0000D334 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D338 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D340 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D346 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D34C 117C 0004 0001             		move.b	#4,obRender(a0)
0000D352 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D358 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D35E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D36E 4A28 0028                  		tst.b	obSubtype(a0)
0000D372 6700                       		beq.s	loc_B238
0000D374 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D378 6000 0000                  		bra.w	GFire_Move
0000D37C                            ; ===========================================================================
0000D37C                            
0000D37C                            loc_B238:	; Routine 2
0000D37C 2268 0030                  		movea.l	$30(a0),a1
0000D380 3228 0008                  		move.w	obX(a0),d1
0000D384 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D388 0641 000C                  		addi.w	#$C,d1
0000D38C 3001                       		move.w	d1,d0
0000D38E E248                       		lsr.w	#1,d0
0000D390 1031 0000                  		move.b	(a1,d0.w),d0
0000D394 4440                       		neg.w	d0
0000D396 D068 002C                  		add.w	$2C(a0),d0
0000D39A 3400                       		move.w	d0,d2
0000D39C D068 003C                  		add.w	$3C(a0),d0
0000D3A0 3140 000C                  		move.w	d0,obY(a0)
0000D3A4 0C41 0084                  		cmpi.w	#$84,d1
0000D3A8 6400                       		bcc.s	loc_B2B0
0000D3AA 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D3B2 0C41 0080                  		cmpi.w	#$80,d1
0000D3B6 6400                       		bcc.s	loc_B2B0
0000D3B8 2028 0008                  		move.l	obX(a0),d0
0000D3BC 0680 0008 0000             		addi.l	#$80000,d0
0000D3C2 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D3C8 6600                       		bne.s	loc_B2B0
0000D3CA 6100 0000                  		bsr.w	FindNextFreeObj
0000D3CE 6600                       		bne.s	loc_B2B0
0000D3D0 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D3D4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D3DA 3342 002C                  		move.w	d2,$2C(a1)
0000D3DE 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D3E4 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D3EA 2468 0038                  		movea.l	$38(a0),a2
0000D3EE 6100 FDF0                  		bsr.w	sub_B09C
0000D3F2                            
0000D3F2                            loc_B2B0:
0000D3F2 6000                       		bra.s	GFire_Animate
0000D3F4                            ; ===========================================================================
0000D3F4                            
0000D3F4                            GFire_Move:	; Routine 4
0000D3F4 3028 002C                  		move.w	$2C(a0),d0
0000D3F8 D068 003C                  		add.w	$3C(a0),d0
0000D3FC 3140 000C                  		move.w	d0,obY(a0)
0000D400                            
0000D400                            GFire_Animate:
0000D400 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D406 6100 F456                  		bsr.w	AnimateSprite
0000D40A 6000 0000                  		bra.w	DisplaySprite
0000D40A 6000 0000                  		bra.w	DisplaySprite
0000D40E                            		include	"_anim\Burning Grass.asm"
0000D40E                            ; ---------------------------------------------------------------------------
0000D40E                            ; Animation script - burning grass that sits on the floor (MZ)
0000D40E                            ; ---------------------------------------------------------------------------
0000D40E 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D410 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D416                            		even
0000D416                            		even
0000D416                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D416                            ; ---------------------------------------------------------------------------
0000D416                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D416                            ; ---------------------------------------------------------------------------
0000D416                            Map_LGrass_internal:
0000D416 0000                       		dc.w @wide-Map_LGrass_internal
0000D418 0000                       		dc.w @sloped-Map_LGrass_internal
0000D41A 0000                       		dc.w @narrow-Map_LGrass_internal
0000D41C 0D                         @wide:		dc.b $D
0000D41D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D422 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D427 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D42C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D431 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D436 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D43B D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D440 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D445 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D44A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D44F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D454 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D459 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D45E 0A                         @sloped:	dc.b $A
0000D45F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D464 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D469 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D46E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D473 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D478 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D47D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D482 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D487 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D48C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D491 06                         @narrow:	dc.b 6
0000D492 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D497 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D49C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D4A1 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D4A6 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D4AB 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D4B0                            		even
0000D4B0                            		even
0000D4B0                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D4B0                            ; --------------------------------------------------------------------------------
0000D4B0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D4B0                            ; --------------------------------------------------------------------------------
0000D4B0                            
0000D4B0                            SME_gyvTV:	
0000D4B0 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D4B4 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D4B8 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D4BC 01                         SME_gyvTV_C:	dc.b 1	
0000D4BD E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D4C2 01                         SME_gyvTV_12:	dc.b 1	
0000D4C3 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D4C8 01                         SME_gyvTV_18:	dc.b 1	
0000D4C9 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D4CE 01                         SME_gyvTV_1E:	dc.b 1	
0000D4CF F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D4D4 01                         SME_gyvTV_24:	dc.b 1	
0000D4D5 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D4DA 01                         SME_gyvTV_2A:	dc.b 1	
0000D4DB F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D4E0                            		even
0000D4E0                            		even
0000D4E0                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D4E0                            ; ---------------------------------------------------------------------------
0000D4E0                            ; Object 30 - large green glass blocks (MZ)
0000D4E0                            ; ---------------------------------------------------------------------------
0000D4E0                            
0000D4E0                            GlassBlock:
0000D4E0 7000                       		moveq	#0,d0
0000D4E2 1028 0024                  		move.b	obRoutine(a0),d0
0000D4E6 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D4EA 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D50C 6000 0000                  		bra.w	DisplaySprite
0000D510                            ; ===========================================================================
0000D510                            
0000D510                            Glass_Delete:
0000D510 6000 0000                  		bra.w	DeleteObject
0000D514                            ; ===========================================================================
0000D514 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D516 0000                       		dc.w Glass_Block012-Glass_Index
0000D518 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D51A 0000                       		dc.w Glass_Block34-Glass_Index
0000D51C 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D51E                            
0000D51E =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D51E =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D51E                            
0000D51E 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D521 0400 01                    		dc.b 4,	0, 1
0000D524 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D527 0800 01                    		dc.b 8,	0, 1
0000D52A                            ; ===========================================================================
0000D52A                            
0000D52A                            Glass_Main:	; Routine 0
0000D52A 45F9 0000 D51E             		lea	(Glass_Vars1).l,a2
0000D530 7201                       		moveq	#1,d1
0000D532 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D538 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D53E 6500                       		bcs.s	@IsType012	; if yes, branch
0000D540                            
0000D540 45F9 0000 D524             		lea	(Glass_Vars2).l,a2
0000D546 7201                       		moveq	#1,d1
0000D548 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D54E                            
0000D54E                            	@IsType012:
0000D54E 2248                       		movea.l	a0,a1
0000D550 6000                       		bra.s	@Load		; load main object
0000D552                            ; ===========================================================================
0000D552                            
0000D552                            	@Repeat:
0000D552 6100 0000                  		bsr.w	FindNextFreeObj
0000D556 6600                       		bne.s	@Fail
0000D558                            
0000D558                            @Load:
0000D558 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D55C 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D560 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D566 101A                       		move.b	(a2)+,d0
0000D568 4880                       		ext.w	d0
0000D56A D068 000C                  		add.w	obY(a0),d0
0000D56E 3340 000C                  		move.w	d0,obY(a1)
0000D572 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D57A 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D580 137C 0004 0001             		move.b	#4,obRender(a1)
0000D586 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D58C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D592 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D598 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D59E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D5A2 2348 003C                  		move.l	a0,glass_parent(a1)
0000D5A6 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D5AA                            
0000D5AA 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D5B0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D5B6 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D5BA 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D5C0                            
0000D5C0                            	@Fail:
0000D5C0 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D5C6 08E8 0004 0001             		bset	#4,obRender(a0)
0000D5CC                            
0000D5CC                            Glass_Block012:	; Routine 2
0000D5CC 6100 0000                  		bsr.w	Glass_Types
0000D5D0 323C 002B                  		move.w	#$2B,d1
0000D5D4 343C 0048                  		move.w	#$48,d2
0000D5D8 363C 0049                  		move.w	#$49,d3
0000D5DC 3828 0008                  		move.w	obX(a0),d4
0000D5E0 6000 0000                  		bra.w	SolidObject
0000D5E4                            ; ===========================================================================
0000D5E4                            
0000D5E4                            Glass_Reflect012:
0000D5E4                            		; Routine 4
0000D5E4 2268 003C                  		movea.l	$3C(a0),a1
0000D5E8 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D5EE 6000 0000                  		bra.w	Glass_Types
0000D5F2                            ; ===========================================================================
0000D5F2                            
0000D5F2                            Glass_Block34:	; Routine 6
0000D5F2 6100 0000                  		bsr.w	Glass_Types
0000D5F6 323C 002B                  		move.w	#$2B,d1
0000D5FA 343C 0038                  		move.w	#$38,d2
0000D5FE 363C 0039                  		move.w	#$39,d3
0000D602 3828 0008                  		move.w	obX(a0),d4
0000D606 6000 0000                  		bra.w	SolidObject
0000D60A                            ; ===========================================================================
0000D60A                            
0000D60A                            Glass_Reflect34:
0000D60A                            		; Routine 8
0000D60A 2268 003C                  		movea.l	$3C(a0),a1
0000D60E 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D614 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D61A 6000 0000                  		bra.w	Glass_Types
0000D61E                            
0000D61E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D61E                            
0000D61E                            
0000D61E                            Glass_Types:
0000D61E 7000                       		moveq	#0,d0
0000D620 1028 0028                  		move.b	obSubtype(a0),d0
0000D624 0240 0007                  		andi.w	#7,d0
0000D628 D040                       		add.w	d0,d0
0000D62A 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D62E 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D632                            ; End of function Glass_Types
0000D632                            
0000D632                            ; ===========================================================================
0000D632 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D634 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D636 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D638 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D63A 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D63C                            ; ===========================================================================
0000D63C                            
0000D63C                            Glass_Type00:
0000D63C 4E75                       		rts	
0000D63E                            ; ===========================================================================
0000D63E                            
0000D63E                            Glass_Type01:
0000D63E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D642 323C 0040                  		move.w	#$40,d1
0000D646 6000                       		bra.s	loc_B514
0000D648                            ; ===========================================================================
0000D648                            
0000D648                            Glass_Type02:
0000D648 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D64C 323C 0040                  		move.w	#$40,d1
0000D650 4440                       		neg.w	d0
0000D652 D041                       		add.w	d1,d0
0000D654                            
0000D654                            loc_B514:
0000D654 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D65A 6700                       		beq.s	loc_B526
0000D65C 4440                       		neg.w	d0
0000D65E D041                       		add.w	d1,d0
0000D660 E208                       		lsr.b	#1,d0
0000D662 0640 0020                  		addi.w	#$20,d0
0000D666                            
0000D666                            loc_B526:
0000D666 6000 0000                  		bra.w	loc_B5EE
0000D66A                            ; ===========================================================================
0000D66A                            
0000D66A                            Glass_Type03:
0000D66A 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D670 6700                       		beq.s	loc_B53E
0000D672 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D676 0440 0010                  		subi.w	#$10,d0
0000D67A 6000 0000                  		bra.w	loc_B5EE
0000D67E                            ; ===========================================================================
0000D67E                            
0000D67E                            loc_B53E:
0000D67E 0828 0003 0022             		btst	#3,obStatus(a0)
0000D684 6600                       		bne.s	loc_B54E
0000D686 08A8 0000 0034             		bclr	#0,$34(a0)
0000D68C 6000                       		bra.s	loc_B582
0000D68E                            ; ===========================================================================
0000D68E                            
0000D68E                            loc_B54E:
0000D68E 4A28 0034                  		tst.b	$34(a0)
0000D692 6600                       		bne.s	loc_B582
0000D694 117C 0001 0034             		move.b	#1,$34(a0)
0000D69A 08E8 0000 0035             		bset	#0,$35(a0)
0000D6A0 6700                       		beq.s	loc_B582
0000D6A2 08E8 0007 0034             		bset	#7,$34(a0)
0000D6A8 317C 0010 0036             		move.w	#$10,$36(a0)
0000D6AE 117C 000A 0038             		move.b	#$A,$38(a0)
0000D6B4 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D6BA 6600                       		bne.s	loc_B582
0000D6BC 317C 0040 0036             		move.w	#$40,$36(a0)
0000D6C2                            
0000D6C2                            loc_B582:
0000D6C2 4A28 0034                  		tst.b	$34(a0)
0000D6C6 6A00                       		bpl.s	loc_B5AA
0000D6C8 4A28 0038                  		tst.b	$38(a0)
0000D6CC 6700                       		beq.s	loc_B594
0000D6CE 5328 0038                  		subq.b	#1,$38(a0)
0000D6D2 6600                       		bne.s	loc_B5AA
0000D6D4                            
0000D6D4                            loc_B594:
0000D6D4 4A68 0032                  		tst.w	glass_dist(a0)
0000D6D8 6700                       		beq.s	loc_B5A4
0000D6DA 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D6DE 5368 0036                  		subq.w	#1,$36(a0)
0000D6E2 6600                       		bne.s	loc_B5AA
0000D6E4                            
0000D6E4                            loc_B5A4:
0000D6E4 08A8 0007 0034             		bclr	#7,$34(a0)
0000D6EA                            
0000D6EA                            loc_B5AA:
0000D6EA 3028 0032                  		move.w	glass_dist(a0),d0
0000D6EE 6000                       		bra.s	loc_B5EE
0000D6F0                            ; ===========================================================================
0000D6F0                            
0000D6F0                            Glass_Type04:
0000D6F0 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D6F6 6700                       		beq.s	Glass_ChkSwitch
0000D6F8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6FC 0440 0010                  		subi.w	#$10,d0
0000D700 6000                       		bra.s	loc_B5EE
0000D702                            ; ===========================================================================
0000D702                            
0000D702                            Glass_ChkSwitch:
0000D702 4A28 0034                  		tst.b	$34(a0)
0000D706 6600                       		bne.s	loc_B5E0
0000D708 45F8 F7E0                  		lea	(f_switch).w,a2
0000D70C 7000                       		moveq	#0,d0
0000D70E 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D712 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D714 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D718 6700                       		beq.s	loc_B5EA	; if not, branch
0000D71A 117C 0001 0034             		move.b	#1,$34(a0)
0000D720                            
0000D720                            loc_B5E0:
0000D720 4A68 0032                  		tst.w	glass_dist(a0)
0000D724 6700                       		beq.s	loc_B5EA
0000D726 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D72A                            
0000D72A                            loc_B5EA:
0000D72A 3028 0032                  		move.w	glass_dist(a0),d0
0000D72E                            
0000D72E                            loc_B5EE:
0000D72E 3228 0030                  		move.w	$30(a0),d1
0000D732 9240                       		sub.w	d0,d1
0000D734 3141 000C                  		move.w	d1,obY(a0)
0000D738 4E75                       		rts	
0000D738 4E75                       		rts	
0000D73A                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D73A                            ; --------------------------------------------------------------------------------
0000D73A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D73A                            ; --------------------------------------------------------------------------------
0000D73A                            
0000D73A                            SME_NEyTf:	
0000D73A 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D73E 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D740 0C                         SME_NEyTf_6:	dc.b $C	
0000D741 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D746 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D74B C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D750 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D755 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D75A E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D75F 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D764 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D769 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D76E 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D773 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D778 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D77D 02                         SME_NEyTf_43:	dc.b 2	
0000D77E 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D783 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D788 0A                         SME_NEyTf_4E:	dc.b $A	
0000D789 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D78E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D793 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D798 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D79D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D7A2 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D7A7 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D7AC 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D7B1 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D7B6 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D7BC 00                         		even
0000D7BC 00                         		even
0000D7BC                            		include	"_incObj\31 Chained Stompers.asm"
0000D7BC                            ; ---------------------------------------------------------------------------
0000D7BC                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D7BC                            ; ---------------------------------------------------------------------------
0000D7BC                            
0000D7BC                            ChainStomp:
0000D7BC 7000                       		moveq	#0,d0
0000D7BE 1028 0024                  		move.b	obRoutine(a0),d0
0000D7C2 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D7C6 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D7CA                            ; ===========================================================================
0000D7CA 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D7CC 0000                       		dc.w loc_B798-CStom_Index
0000D7CE 0000                       		dc.w loc_B7FE-CStom_Index
0000D7D0 0000                       		dc.w CStom_Display2-CStom_Index
0000D7D2 0000                       		dc.w loc_B7E2-CStom_Index
0000D7D4                            
0000D7D4 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D7D4                            
0000D7D4 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D7D6 0100                       		dc.b 1,	0
0000D7D8                            
0000D7D8 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D7DB 041C 01                    		dc.b 4,	$1C, 1
0000D7DE 08CC 03                    		dc.b 8,	$CC, 3
0000D7E1 06F0 02                    		dc.b 6,	$F0, 2
0000D7E4                            
0000D7E4 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D7E8 5000 7800                  		dc.w $5000, $7800
0000D7EC 3800 5800                  		dc.w $3800, $5800
0000D7F0 B800                       		dc.w $B800
0000D7F2                            ; ===========================================================================
0000D7F2                            
0000D7F2                            CStom_Main:	; Routine 0
0000D7F2 7000                       		moveq	#0,d0
0000D7F4 1028 0028                  		move.b	obSubtype(a0),d0
0000D7F8 6A00                       		bpl.s	loc_B6CE
0000D7FA 0240 007F                  		andi.w	#$7F,d0
0000D7FE D040                       		add.w	d0,d0
0000D800 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D804 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D808 101A                       		move.b	(a2)+,d0
0000D80A 1140 0028                  		move.b	d0,obSubtype(a0)
0000D80E                            
0000D80E                            loc_B6CE:
0000D80E 0200 000F                  		andi.b	#$F,d0
0000D812 D040                       		add.w	d0,d0
0000D814 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D818 4A40                       		tst.w	d0
0000D81A 6600                       		bne.s	loc_B6E0
0000D81C 3142 0032                  		move.w	d2,$32(a0)
0000D820                            
0000D820                            loc_B6E0:
0000D820 45F9 0000 D7D8             		lea	(CStom_Var).l,a2
0000D826 2248                       		movea.l	a0,a1
0000D828 7203                       		moveq	#3,d1
0000D82A 6000                       		bra.s	CStom_MakeStomper
0000D82C                            ; ===========================================================================
0000D82C                            
0000D82C                            CStom_Loop:
0000D82C 6100 0000                  		bsr.w	FindNextFreeObj
0000D830 6600 0000                  		bne.w	CStom_SetSize
0000D834                            
0000D834                            CStom_MakeStomper:
0000D834 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D838 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D83C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D842 101A                       		move.b	(a2)+,d0
0000D844 4880                       		ext.w	d0
0000D846 D068 000C                  		add.w	obY(a0),d0
0000D84A 3340 000C                  		move.w	d0,obY(a1)
0000D84E 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D856 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D85C 137C 0004 0001             		move.b	#4,obRender(a1)
0000D862 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D868 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D86E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D874 3342 0034                  		move.w	d2,$34(a1)
0000D878 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D87E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D882 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D888 6600                       		bne.s	loc_B76A
0000D88A 5341                       		subq.w	#1,d1
0000D88C 1028 0028                  		move.b	obSubtype(a0),d0
0000D890 0240 00F0                  		andi.w	#$F0,d0
0000D894 0C40 0020                  		cmpi.w	#$20,d0
0000D898 679A                       		beq.s	CStom_MakeStomper
0000D89A 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D8A0 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D8A6 5241                       		addq.w	#1,d1
0000D8A8                            
0000D8A8                            loc_B76A:
0000D8A8 2348 003C                  		move.l	a0,$3C(a1)
0000D8AC 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D8B0                            
0000D8B0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D8B6                            
0000D8B6                            CStom_SetSize:
0000D8B6 7000                       		moveq	#0,d0
0000D8B8 1028 0028                  		move.b	obSubtype(a0),d0
0000D8BC E648                       		lsr.w	#3,d0
0000D8BE 0200 000E                  		andi.b	#$E,d0
0000D8C2 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D8C6 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D8CA 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D8CE 6000                       		bra.s	loc_B798
0000D8D0                            ; ===========================================================================
0000D8D0 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D8D2 3009                       		dc.b $30, 9
0000D8D4 100A                       		dc.b $10, $A
0000D8D6                            ; ===========================================================================
0000D8D6                            
0000D8D6                            loc_B798:	; Routine 2
0000D8D6 6100 0000                  		bsr.w	CStom_Types
0000D8DA 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D8E0 7200                       		moveq	#0,d1
0000D8E2 1228 0014                  		move.b	obActWid(a0),d1
0000D8E6 0641 000B                  		addi.w	#$B,d1
0000D8EA 343C 000C                  		move.w	#$C,d2
0000D8EE 363C 000D                  		move.w	#$D,d3
0000D8F2 3828 0008                  		move.w	obX(a0),d4
0000D8F6 6100 0000                  		bsr.w	SolidObject
0000D8FA 0828 0003 0022             		btst	#3,obStatus(a0)
0000D900 6700                       		beq.s	CStom_Display
0000D902 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D908 6400                       		bcc.s	CStom_Display
0000D90A 2448                       		movea.l	a0,a2
0000D90C 41F8 D000                  		lea	(v_player).w,a0
0000D910 4EB9 0000 0000             		jsr	(KillSonic).l
0000D916 204A                       		movea.l	a2,a0
0000D918                            
0000D918                            CStom_Display:
0000D918 6100 0000                  		bsr.w	DisplaySprite
0000D91C 6000 0000                  		bra.w	CStom_ChkDel
0000D920                            ; ===========================================================================
0000D920                            
0000D920                            loc_B7E2:	; Routine 8
0000D920 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D926 08E8 0004 0001             		bset	#4,obRender(a0)
0000D92C 2268 003C                  		movea.l	$3C(a0),a1
0000D930 1029 0032                  		move.b	$32(a1),d0
0000D934 EA08                       		lsr.b	#5,d0
0000D936 5600                       		addq.b	#3,d0
0000D938 1140 001A                  		move.b	d0,obFrame(a0)
0000D93C                            
0000D93C                            loc_B7FE:	; Routine 4
0000D93C 2268 003C                  		movea.l	$3C(a0),a1
0000D940 7000                       		moveq	#0,d0
0000D942 1029 0032                  		move.b	$32(a1),d0
0000D946 D068 0030                  		add.w	$30(a0),d0
0000D94A 3140 000C                  		move.w	d0,obY(a0)
0000D94E                            
0000D94E                            CStom_Display2:	; Routine 6
0000D94E 6100 0000                  		bsr.w	DisplaySprite
0000D952                            
0000D952                            CStom_ChkDel:
0000D970 4E75                       		rts	
0000D972                            ; ===========================================================================
0000D972                            
0000D972                            CStom_Types:
0000D972 1028 0028                  		move.b	obSubtype(a0),d0
0000D976 0240 000F                  		andi.w	#$F,d0
0000D97A D040                       		add.w	d0,d0
0000D97C 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D980 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D984                            ; ===========================================================================
0000D984 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D986 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D988 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D98A 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D98C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D98E 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D990 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D992                            ; ===========================================================================
0000D992                            
0000D992                            CStom_Type00:
0000D992 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D996 7000                       		moveq	#0,d0
0000D998 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D99C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D9A0 6700                       		beq.s	loc_B8A8	; if not, branch
0000D9A2 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D9A6 6A00                       		bpl.s	loc_B872
0000D9A8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D9AE 6700                       		beq.s	loc_B8A0
0000D9B0                            
0000D9B0                            loc_B872:
0000D9B0 4A68 0032                  		tst.w	$32(a0)
0000D9B4 6700                       		beq.s	loc_B8A0
0000D9B6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D9BA 0200 000F                  		andi.b	#$F,d0
0000D9BE 6600                       		bne.s	loc_B892
0000D9C0 4A28 0001                  		tst.b	1(a0)
0000D9C4 6A00                       		bpl.s	loc_B892
0000D9D0                            
0000D9D0                            loc_B892:
0000D9D0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D9D6 6400                       		bcc.s	CStom_Restart
0000D9D8 317C 0000 0032             		move.w	#0,$32(a0)
0000D9DE                            
0000D9DE                            loc_B8A0:
0000D9DE 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D9E4 6000                       		bra.s	CStom_Restart
0000D9E6                            ; ===========================================================================
0000D9E6                            
0000D9E6                            loc_B8A8:
0000D9E6 3228 0034                  		move.w	$34(a0),d1
0000D9EA B268 0032                  		cmp.w	$32(a0),d1
0000D9EE 6700                       		beq.s	CStom_Restart
0000D9F0 3028 0012                  		move.w	obVelY(a0),d0
0000D9F4 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D9FA D168 0032                  		add.w	d0,$32(a0)
0000D9FE B268 0032                  		cmp.w	$32(a0),d1
0000DA02 6200                       		bhi.s	CStom_Restart
0000DA04 3141 0032                  		move.w	d1,$32(a0)
0000DA08 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA0E 4A28 0001                  		tst.b	obRender(a0)
0000DA12 6A00                       		bpl.s	CStom_Restart
0000DA1E                            
0000DA1E                            CStom_Restart:
0000DA1E 7000                       		moveq	#0,d0
0000DA20 1028 0032                  		move.b	$32(a0),d0
0000DA24 D068 0030                  		add.w	$30(a0),d0
0000DA28 3140 000C                  		move.w	d0,obY(a0)
0000DA2C 4E75                       		rts	
0000DA2E                            ; ===========================================================================
0000DA2E                            
0000DA2E                            CStom_Type01:
0000DA2E 4A68 0036                  		tst.w	$36(a0)
0000DA32 6700                       		beq.s	loc_B938
0000DA34 4A68 0038                  		tst.w	$38(a0)
0000DA38 6700                       		beq.s	loc_B902
0000DA3A 5368 0038                  		subq.w	#1,$38(a0)
0000DA3E 6000                       		bra.s	loc_B97C
0000DA40                            ; ===========================================================================
0000DA40                            
0000DA40                            loc_B902:
0000DA40 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA44 0200 000F                  		andi.b	#$F,d0
0000DA48 6600                       		bne.s	loc_B91C
0000DA4A 4A28 0001                  		tst.b	obRender(a0)
0000DA4E 6A00                       		bpl.s	loc_B91C
0000DA5A                            
0000DA5A                            loc_B91C:
0000DA5A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA60 6400                       		bcc.s	loc_B97C
0000DA62 317C 0000 0032             		move.w	#0,$32(a0)
0000DA68 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA6E 317C 0000 0036             		move.w	#0,$36(a0)
0000DA74 6000                       		bra.s	loc_B97C
0000DA76                            ; ===========================================================================
0000DA76                            
0000DA76                            loc_B938:
0000DA76 3228 0034                  		move.w	$34(a0),d1
0000DA7A B268 0032                  		cmp.w	$32(a0),d1
0000DA7E 6700                       		beq.s	loc_B97C
0000DA80 3028 0012                  		move.w	obVelY(a0),d0
0000DA84 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA8A D168 0032                  		add.w	d0,$32(a0)
0000DA8E B268 0032                  		cmp.w	$32(a0),d1
0000DA92 6200                       		bhi.s	loc_B97C
0000DA94 3141 0032                  		move.w	d1,$32(a0)
0000DA98 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA9E 317C 0001 0036             		move.w	#1,$36(a0)
0000DAA4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DAAA 4A28 0001                  		tst.b	obRender(a0)
0000DAAE 6A00                       		bpl.s	loc_B97C
0000DABA                            
0000DABA                            loc_B97C:
0000DABA 6000 FF62                  		bra.w	CStom_Restart
0000DABE                            ; ===========================================================================
0000DABE                            
0000DABE                            CStom_Type03:
0000DABE 3038 D008                  		move.w	(v_player+obX).w,d0
0000DAC2 9068 0008                  		sub.w	obX(a0),d0
0000DAC6 6400                       		bcc.s	loc_B98C
0000DAC8 4440                       		neg.w	d0
0000DACA                            
0000DACA                            loc_B98C:
0000DACA 0C40 0090                  		cmpi.w	#$90,d0
0000DACE 6400                       		bcc.s	loc_B996
0000DAD0 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DAD4                            
0000DAD4                            loc_B996:
0000DAD4 6000 FF48                  		bra.w	CStom_Restart
0000DAD4 6000 FF48                  		bra.w	CStom_Restart
0000DAD8                            		include	"_incObj\45 Sideways Stomper.asm"
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8                            ; Object 45 - spiked metal block from beta version (MZ)
0000DAD8                            ; ---------------------------------------------------------------------------
0000DAD8                            
0000DAD8                            SideStomp:
0000DAD8 7000                       		moveq	#0,d0
0000DADA 1028 0024                  		move.b	obRoutine(a0),d0
0000DADE 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DAE2 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DAE6                            ; ===========================================================================
0000DAE6 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DAE8 0000                       		dc.w SStom_Solid-SStom_Index
0000DAEA 0000                       		dc.w loc_BA8E-SStom_Index
0000DAEC 0000                       		dc.w SStom_Display-SStom_Index
0000DAEE 0000                       		dc.w SStom_Pole-SStom_Index
0000DAF0                            
0000DAF0                            		;	routine		frame
0000DAF0                            		;		 xpos
0000DAF0 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DAF3 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DAF6 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DAF9 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DAFC                            
0000DAFC                            ;word_B9BE:	; Note that this indicates three subtypes
0000DAFC 3800                       SStom_Len:	dc.w $3800	; short
0000DAFE A000                       		dc.w $A000	; long
0000DB00 5000                       		dc.w $5000	; medium
0000DB02                            ; ===========================================================================
0000DB02                            
0000DB02                            SStom_Main:	; Routine 0
0000DB02 7000                       		moveq	#0,d0
0000DB04 1028 0028                  		move.b	obSubtype(a0),d0
0000DB08 D040                       		add.w	d0,d0
0000DB0A 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DB0E 45F9 0000 DAF0             		lea	(SStom_Var).l,a2
0000DB14 2248                       		movea.l	a0,a1
0000DB16 7203                       		moveq	#3,d1
0000DB18 6000                       		bra.s	@load
0000DB1A                            
0000DB1A                            	@loop:
0000DB1A 6100 0000                  		bsr.w	FindNextFreeObj
0000DB1E 6600                       		bne.s	@fail
0000DB20                            
0000DB20                            	@load:
0000DB20 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DB24 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DB28 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DB2E 101A                       		move.b	(a2)+,d0
0000DB30 4880                       		ext.w	d0
0000DB32 D068 0008                  		add.w	obX(a0),d0
0000DB36 3340 0008                  		move.w	d0,obX(a1)
0000DB3A 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DB42 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DB48 137C 0004 0001             		move.b	#4,obRender(a1)
0000DB4E 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DB54 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DB5A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DB60 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DB66 3342 0034                  		move.w	d2,$34(a1)
0000DB6A 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB70 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DB74 6600                       		bne.s	@notspikes	; if not, branch
0000DB76 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DB7C                            
0000DB7C                            	@notspikes:
0000DB7C 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DB80 2348 003C                  		move.l	a0,$3C(a1)
0000DB84 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DB88                            
0000DB88 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DB8E                            
0000DB8E                            	@fail:
0000DB8E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB94                            
0000DB94                            SStom_Solid:	; Routine 2
0000DB94 3F28 0008                  		move.w	obX(a0),-(sp)
0000DB98 6100 0000                  		bsr.w	SStom_Move
0000DB9C 323C 0017                  		move.w	#$17,d1
0000DBA0 343C 0020                  		move.w	#$20,d2
0000DBA4 363C 0020                  		move.w	#$20,d3
0000DBA8 381F                       		move.w	(sp)+,d4
0000DBAA 6100 0000                  		bsr.w	SolidObject
0000DBAE 6100 0000                  		bsr.w	DisplaySprite
0000DBB2 6000 0000                  		bra.w	SStom_ChkDel
0000DBB6                            ; ===========================================================================
0000DBB6                            
0000DBB6                            SStom_Pole:	; Routine 8
0000DBB6 2268 003C                  		movea.l	$3C(a0),a1
0000DBBA 1029 0032                  		move.b	$32(a1),d0
0000DBBE 0600 0010                  		addi.b	#$10,d0
0000DBC2 EA08                       		lsr.b	#5,d0
0000DBC4 5600                       		addq.b	#3,d0
0000DBC6 1140 001A                  		move.b	d0,obFrame(a0)
0000DBCA                            
0000DBCA                            loc_BA8E:	; Routine 4
0000DBCA 2268 003C                  		movea.l	$3C(a0),a1
0000DBCE 7000                       		moveq	#0,d0
0000DBD0 1029 0032                  		move.b	$32(a1),d0
0000DBD4 4440                       		neg.w	d0
0000DBD6 D068 0030                  		add.w	$30(a0),d0
0000DBDA 3140 0008                  		move.w	d0,obX(a0)
0000DBDE                            
0000DBDE                            SStom_Display:	; Routine 6
0000DBDE 6100 0000                  		bsr.w	DisplaySprite
0000DBE2                            
0000DBE2                            SStom_ChkDel:
0000DC00 4E75                       		rts	
0000DC02                            
0000DC02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC02                            
0000DC02                            
0000DC02                            SStom_Move:
0000DC02 7000                       		moveq	#0,d0
0000DC04 1028 0028                  		move.b	obSubtype(a0),d0
0000DC08 D040                       		add.w	d0,d0
0000DC0A 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DC0E 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DC12                            ; End of function SStom_Move
0000DC12                            
0000DC12                            ; ===========================================================================
0000DC12                            		; This indicates only two subtypes... that do the same thing
0000DC12                            		; Compare to SStom_Len. This breaks subtype 02
0000DC12 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DC14 0000                       		dc.w loc_BADA-off_BAD6
0000DC16                            ; ===========================================================================
0000DC16                            
0000DC16                            loc_BADA:
0000DC16 4A68 0036                  		tst.w	$36(a0)
0000DC1A 6700                       		beq.s	loc_BB08
0000DC1C 4A68 0038                  		tst.w	$38(a0)
0000DC20 6700                       		beq.s	loc_BAEC
0000DC22 5368 0038                  		subq.w	#1,$38(a0)
0000DC26 6000                       		bra.s	loc_BB3C
0000DC28                            ; ===========================================================================
0000DC28                            
0000DC28                            loc_BAEC:
0000DC28 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC2E 6400                       		bcc.s	loc_BB3C
0000DC30 317C 0000 0032             		move.w	#0,$32(a0)
0000DC36 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC3C 317C 0000 0036             		move.w	#0,$36(a0)
0000DC42 6000                       		bra.s	loc_BB3C
0000DC44                            ; ===========================================================================
0000DC44                            
0000DC44                            loc_BB08:
0000DC44 3228 0034                  		move.w	$34(a0),d1
0000DC48 B268 0032                  		cmp.w	$32(a0),d1
0000DC4C 6700                       		beq.s	loc_BB3C
0000DC4E 3028 0010                  		move.w	obVelX(a0),d0
0000DC52 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DC58 D168 0032                  		add.w	d0,$32(a0)
0000DC5C B268 0032                  		cmp.w	$32(a0),d1
0000DC60 6200                       		bhi.s	loc_BB3C
0000DC62 3141 0032                  		move.w	d1,$32(a0)
0000DC66 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC6C 317C 0001 0036             		move.w	#1,$36(a0)
0000DC72 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC78                            
0000DC78                            loc_BB3C:
0000DC78 7000                       		moveq	#0,d0
0000DC7A 1028 0032                  		move.b	$32(a0),d0
0000DC7E 4440                       		neg.w	d0
0000DC80 D068 0030                  		add.w	$30(a0),d0
0000DC84 3140 0008                  		move.w	d0,obX(a0)
0000DC88 4E75                       		rts	
0000DC88 4E75                       		rts	
0000DC8A                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DC8A                            ; ---------------------------------------------------------------------------
0000DC8A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DC8A                            ; ---------------------------------------------------------------------------
0000DC8A                            Map_CStom_internal:
0000DC8A 0000                       		dc.w @wideblock-Map_CStom_internal
0000DC8C 0000                       		dc.w @spikes-Map_CStom_internal
0000DC8E 0000                       		dc.w @ceiling-Map_CStom_internal
0000DC90 0000                       		dc.w @chain1-Map_CStom_internal
0000DC92 0000                       		dc.w @chain2-Map_CStom_internal
0000DC94 0000                       		dc.w @chain3-Map_CStom_internal
0000DC96 0000                       		dc.w @chain4-Map_CStom_internal
0000DC98 0000                       		dc.w @chain5-Map_CStom_internal
0000DC9A 0000                       		dc.w @chain5-Map_CStom_internal
0000DC9C 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DC9E 0000                       		dc.w @smallblock-Map_CStom_internal
0000DCA0 05                         @wideblock:	dc.b 5
0000DCA1 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DCA6 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DCAB EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DCB0 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DCB5 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DCBA 05                         @spikes:	dc.b 5
0000DCBB F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DCC0 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DCC5 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DCCA F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DCCF F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DCD4 01                         @ceiling:	dc.b 1
0000DCD5 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DCDA 02                         @chain1:	dc.b 2
0000DCDB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCE0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCE5 04                         @chain2:	dc.b 4
0000DCE6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCEB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCF0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCF5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCFA 06                         @chain3:	dc.b 6
0000DCFB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD00 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD05 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD0A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD0F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD14 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD19 08                         @chain4:	dc.b 8
0000DD1A A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD1F B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD24 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD29 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD2E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD33 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD38 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD3D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD42 0A                         @chain5:	dc.b $A
0000DD43 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DD48 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DD4D A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD52 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD57 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD5C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD61 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD66 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD6B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD70 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD75 05                         @mediumblock:	dc.b 5
0000DD76 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DD7B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DD80 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DD85 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DD8A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD8F 01                         @smallblock:	dc.b 1
0000DD90 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DD96 00                         		even
0000DD96 00                         		even
0000DD96                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DD96                            ; ---------------------------------------------------------------------------
0000DD96                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DD96                            ; ---------------------------------------------------------------------------
0000DD96                            Map_SStom_internal:
0000DD96 0000                       		dc.w @block-Map_SStom_internal
0000DD98 0000                       		dc.w @spikes-Map_SStom_internal
0000DD9A 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DD9C 0000                       		dc.w @pole1-Map_SStom_internal
0000DD9E 0000                       		dc.w @pole2-Map_SStom_internal
0000DDA0 0000                       		dc.w @pole3-Map_SStom_internal
0000DDA2 0000                       		dc.w @pole4-Map_SStom_internal
0000DDA4 0000                       		dc.w @pole5-Map_SStom_internal
0000DDA6 0000                       		dc.w @pole5-Map_SStom_internal
0000DDA8 03                         @block:		dc.b 3
0000DDA9 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DDAE 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DDB3 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DDB8 03                         @spikes:	dc.b 3
0000DDB9 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DDBE FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DDC3 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DDC8 01                         @wallbracket:	dc.b 1
0000DDC9 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DDCE 02                         @pole1:		dc.b 2
0000DDCF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DDD4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDD9 04                         @pole2:		dc.b 4
0000DDDA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDDF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDE4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDE9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDEE 06                         @pole3:		dc.b 6
0000DDEF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDF4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDF9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDFE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE03 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE08 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE0D 08                         @pole4:		dc.b 8
0000DE0E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE13 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE18 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE1D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE22 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE27 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE2C F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE31 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE36 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DE37 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE3C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE41 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE46 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE4B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE50 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE55 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE5A F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE5F F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DE64 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DE69                            		; @pole6 should be here, but it isn't...
0000DE6A 00                         		even
0000DE6A 00                         		even
0000DE6A                            
0000DE6A                            		include	"_incObj\32 Button.asm"
0000DE6A                            ; ---------------------------------------------------------------------------
0000DE6A                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DE6A                            ; ---------------------------------------------------------------------------
0000DE6A                            
0000DE6A                            Button:
0000DE6A 7000                       		moveq	#0,d0
0000DE6C 1028 0024                  		move.b	obRoutine(a0),d0
0000DE70 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DE74 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DE78                            ; ===========================================================================
0000DE78 0000                       But_Index:	dc.w But_Main-But_Index
0000DE7A 0000                       		dc.w But_Pressed-But_Index
0000DE7C                            ; ===========================================================================
0000DE7C                            
0000DE7C                            But_Main:	; Routine 0
0000DE7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DE80 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DE88 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DE8E 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DE94 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DE96                            
0000DE96 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DE9C                            
0000DE9C                            	But_IsMZ:
0000DE9C 117C 0004 0001             		move.b	#4,obRender(a0)
0000DEA2 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DEA8 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DEAE 5668 000C                  		addq.w	#3,obY(a0)
0000DEB2                            
0000DEB2                            But_Pressed:	; Routine 2
0000DEB2 4A28 0001                  		tst.b	obRender(a0)
0000DEB6 6A00                       		bpl.s	But_Display
0000DEB8 323C 001B                  		move.w	#$1B,d1
0000DEBC 343C 0005                  		move.w	#5,d2
0000DEC0 363C 0005                  		move.w	#5,d3
0000DEC4 3828 0008                  		move.w	obX(a0),d4
0000DEC8 6100 0000                  		bsr.w	SolidObject
0000DECC 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DED2 1028 0028                  		move.b	obSubtype(a0),d0
0000DED6 0240 000F                  		andi.w	#$F,d0
0000DEDA 47F8 F7E0                  		lea	(f_switch).w,a3
0000DEDE 47F3 0000                  		lea	(a3,d0.w),a3
0000DEE2 7600                       		moveq	#0,d3
0000DEE4 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DEEA 6700                       		beq.s	loc_BDB2
0000DEEC 7607                       		moveq	#7,d3
0000DEEE                            
0000DEEE                            loc_BDB2:
0000DEEE 4A28 0028                  		tst.b	obSubtype(a0)
0000DEF2 6A00                       		bpl.s	loc_BDBE
0000DEF4 6100 0000                  		bsr.w	But_MZBlock
0000DEF8 6600                       		bne.s	loc_BDC8
0000DEFA                            
0000DEFA                            loc_BDBE:
0000DEFA 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DEFE 6600                       		bne.s	loc_BDC8
0000DF00 0793                       		bclr	d3,(a3)
0000DF02 6000                       		bra.s	loc_BDDE
0000DF04                            ; ===========================================================================
0000DF04                            
0000DF04                            loc_BDC8:
0000DF04 4A13                       		tst.b	(a3)
0000DF06 6600                       		bne.s	loc_BDD6
0000DF12                            
0000DF12                            loc_BDD6:
0000DF12 07D3                       		bset	d3,(a3)
0000DF14 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DF1A                            
0000DF1A                            loc_BDDE:
0000DF1A 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DF20 6700                       		beq.s	But_Display
0000DF22 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DF26 6A00                       		bpl.s	But_Display
0000DF28 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DF2E 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DF34                            
0000DF34                            But_Display:
0000DF34 6100 0000                  		bsr.w	DisplaySprite
0000DF56 4E75                       		rts	
0000DF58                            ; ===========================================================================
0000DF58                            
0000DF58                            But_Delete:
0000DF58 6100 0000                  		bsr.w	DeleteObject
0000DF5C 4E75                       		rts	
0000DF5E                            
0000DF5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF5E                            
0000DF5E                            
0000DF5E                            But_MZBlock:
0000DF5E 3F03                       		move.w	d3,-(sp)
0000DF60 3428 0008                  		move.w	obX(a0),d2
0000DF64 3628 000C                  		move.w	obY(a0),d3
0000DF68 0442 0010                  		subi.w	#$10,d2
0000DF6C 5143                       		subq.w	#8,d3
0000DF6E 383C 0020                  		move.w	#$20,d4
0000DF72 3A3C 0010                  		move.w	#$10,d5
0000DF76 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DF7A 3C3C 005F                  		move.w	#$5F,d6
0000DF7E                            
0000DF7E                            But_MZLoop:
0000DF7E 4A29 0001                  		tst.b	obRender(a1)
0000DF82 6A00                       		bpl.s	loc_BE4E
0000DF84 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DF88 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DF8A                            
0000DF8A                            loc_BE4E:
0000DF8A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DF8E 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DF92                            
0000DF92 361F                       		move.w	(sp)+,d3
0000DF94 7000                       		moveq	#0,d0
0000DF96                            
0000DF96                            locret_BE5A:
0000DF96 4E75                       		rts	
0000DF98                            ; ===========================================================================
0000DF98 1010                       But_MZData:	dc.b $10, $10
0000DF9A                            ; ===========================================================================
0000DF9A                            
0000DF9A                            loc_BE5E:
0000DF9A 7001                       		moveq	#1,d0
0000DF9C 0240 003F                  		andi.w	#$3F,d0
0000DFA0 D040                       		add.w	d0,d0
0000DFA2 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DFA6 121A                       		move.b	(a2)+,d1
0000DFA8 4881                       		ext.w	d1
0000DFAA 3029 0008                  		move.w	obX(a1),d0
0000DFAE 9041                       		sub.w	d1,d0
0000DFB0 9042                       		sub.w	d2,d0
0000DFB2 6400                       		bcc.s	loc_BE80
0000DFB4 D241                       		add.w	d1,d1
0000DFB6 D041                       		add.w	d1,d0
0000DFB8 6500                       		bcs.s	loc_BE84
0000DFBA 60CE                       		bra.s	loc_BE4E
0000DFBC                            ; ===========================================================================
0000DFBC                            
0000DFBC                            loc_BE80:
0000DFBC B044                       		cmp.w	d4,d0
0000DFBE 62CA                       		bhi.s	loc_BE4E
0000DFC0                            
0000DFC0                            loc_BE84:
0000DFC0 121A                       		move.b	(a2)+,d1
0000DFC2 4881                       		ext.w	d1
0000DFC4 3029 000C                  		move.w	obY(a1),d0
0000DFC8 9041                       		sub.w	d1,d0
0000DFCA 9043                       		sub.w	d3,d0
0000DFCC 6400                       		bcc.s	loc_BE9A
0000DFCE D241                       		add.w	d1,d1
0000DFD0 D041                       		add.w	d1,d0
0000DFD2 6500                       		bcs.s	loc_BE9E
0000DFD4 60B4                       		bra.s	loc_BE4E
0000DFD6                            ; ===========================================================================
0000DFD6                            
0000DFD6                            loc_BE9A:
0000DFD6 B045                       		cmp.w	d5,d0
0000DFD8 62B0                       		bhi.s	loc_BE4E
0000DFDA                            
0000DFDA                            loc_BE9E:
0000DFDA 361F                       		move.w	(sp)+,d3
0000DFDC 7001                       		moveq	#1,d0
0000DFDE 4E75                       		rts	
0000DFE0                            ; End of function But_MZBlock
0000DFE0                            ; End of function But_MZBlock
0000DFE0                            Map_But:	include	"_maps\Button.asm"
0000DFE0                            ; ---------------------------------------------------------------------------
0000DFE0                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DFE0                            ; ---------------------------------------------------------------------------
0000DFE0                            Map_But_internal:
0000DFE0 0000                       		dc.w byte_BEAC-Map_But_internal
0000DFE2 0000                       		dc.w byte_BEB7-Map_But_internal
0000DFE4 0000                       		dc.w byte_BEC2-Map_But_internal
0000DFE6 0000                       		dc.w byte_BEB7-Map_But_internal
0000DFE8 02                         byte_BEAC:	dc.b 2
0000DFE9 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DFEE F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DFF3 02                         byte_BEB7:	dc.b 2
0000DFF4 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DFF9 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DFFE 02                         byte_BEC2:	dc.b 2
0000DFFF F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E004 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E009 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E00E                            		even
0000E00E                            		even
0000E00E                            
0000E00E                            		include	"_incObj\33 Pushable Blocks.asm"
0000E00E                            ; ---------------------------------------------------------------------------
0000E00E                            ; Object 33 - pushable blocks (MZ, LZ)
0000E00E                            ; ---------------------------------------------------------------------------
0000E00E                            
0000E00E                            PushBlock:
0000E00E 7000                       		moveq	#0,d0
0000E010 1028 0024                  		move.b	obRoutine(a0),d0
0000E014 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E018 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E01C                            ; ===========================================================================
0000E01C 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E01E 0000                       		dc.w loc_BF6E-PushB_Index
0000E020 0000                       		dc.w loc_C02C-PushB_Index
0000E022                            
0000E022 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E024 4001                       		dc.b $40, 1
0000E026                            ; ===========================================================================
0000E026                            
0000E026                            PushB_Main:	; Routine 0
0000E026 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E02A 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E030 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E036 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E03E 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E044 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E04A 6600                       		bne.s	@notLZ
0000E04C 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E052                            
0000E052                            	@notLZ:
0000E052 117C 0004 0001             		move.b	#4,obRender(a0)
0000E058 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E05E 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E064 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E06A 7000                       		moveq	#0,d0
0000E06C 1028 0028                  		move.b	obSubtype(a0),d0
0000E070 D040                       		add.w	d0,d0
0000E072 0240 000E                  		andi.w	#$E,d0
0000E076 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E07A 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E07E 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E082 4A28 0028                  		tst.b	obSubtype(a0)
0000E086 6700                       		beq.s	@chkgone
0000E088 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E08E                            
0000E08E                            	@chkgone:
0000E08E 45F8 FC00                  		lea	(v_objstate).w,a2
0000E092 7000                       		moveq	#0,d0
0000E094 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E098 6700                       		beq.s	loc_BF6E
0000E09A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E0A0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E0A6 6600 0000                  		bne.w	DeleteObject
0000E0AA                            
0000E0AA                            loc_BF6E:	; Routine 2
0000E0AA 4A28 0032                  		tst.b	$32(a0)
0000E0AE 6600 0000                  		bne.w	loc_C046
0000E0B2 7200                       		moveq	#0,d1
0000E0B4 1228 0014                  		move.b	obActWid(a0),d1
0000E0B8 0641 000B                  		addi.w	#$B,d1
0000E0BC 343C 0010                  		move.w	#$10,d2
0000E0C0 363C 0011                  		move.w	#$11,d3
0000E0C4 3828 0008                  		move.w	obX(a0),d4
0000E0C8 6100 0000                  		bsr.w	loc_C186
0000E0CC 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E0D2 6600                       		bne.s	loc_BFC6	; if not, branch
0000E0D4 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E0DA 3028 0008                  		move.w	obX(a0),d0
0000E0DE 0C40 0A20                  		cmpi.w	#$A20,d0
0000E0E2 6500                       		bcs.s	loc_BFC6
0000E0E4 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E0E8 6400                       		bcc.s	loc_BFC6
0000E0EA 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E0EE 0440 001C                  		subi.w	#$1C,d0
0000E0F2 3140 000C                  		move.w	d0,obY(a0)
0000E0F6 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E0FC 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E102                            
0000E102                            	loc_BFC6:
0000E11E 6000 0000                  		bra.w	DisplaySprite
0000E122                            ; ===========================================================================
0000E122                            
0000E122                            loc_ppppp:
0000E13E 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E144 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E14A 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E150 6000                       		bra.s	loc_C02C
0000E152                            ; ===========================================================================
0000E152                            
0000E152                            loc_C016:
0000E152 45F8 FC00                  		lea	(v_objstate).w,a2
0000E156 7000                       		moveq	#0,d0
0000E158 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E15C 6700                       		beq.s	loc_C028
0000E15E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E164                            
0000E164                            loc_C028:
0000E164 6000 0000                  		bra.w	DeleteObject
0000E168                            ; ===========================================================================
0000E168                            
0000E168                            loc_C02C:	; Routine 4
0000E168 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E16C 6700                       		beq.s	locret_C044
0000E16E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E174 4228 0032                  		clr.b	$32(a0)
0000E178 4268 0010                  		clr.w	obVelX(a0)
0000E17C 4268 0012                  		clr.w	obVelY(a0)
0000E180                            
0000E180                            locret_C044:
0000E180 4E75                       		rts	
0000E182                            ; ===========================================================================
0000E182                            
0000E182                            loc_C046:
0000E182 3F28 0008                  		move.w	obX(a0),-(sp)
0000E186 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E18C 6400                       		bcc.s	loc_C056
0000E18E 6100 0000                  		bsr.w	SpeedToPos
0000E192                            
0000E192                            loc_C056:
0000E192 0828 0001 0022             		btst	#1,obStatus(a0)
0000E198 6700                       		beq.s	loc_C0A0
0000E19A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E1A0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E1A6 4A41                       		tst.w	d1
0000E1A8 6A00 0000                  		bpl.w	loc_C09E
0000E1AC D368 000C                  		add.w	d1,obY(a0)
0000E1B0 4268 0012                  		clr.w	obVelY(a0)
0000E1B4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E1BA 3011                       		move.w	(a1),d0
0000E1BC 0240 03FF                  		andi.w	#$3FF,d0
0000E1C0 0C40 016A                  		cmpi.w	#$16A,d0
0000E1C4 6500                       		bcs.s	loc_C09E
0000E1C6 3028 0030                  		move.w	$30(a0),d0
0000E1CA E640                       		asr.w	#3,d0
0000E1CC 3140 0010                  		move.w	d0,obVelX(a0)
0000E1D0 117C 0001 0032             		move.b	#1,$32(a0)
0000E1D6 4268 000E                  		clr.w	$E(a0)
0000E1DA                            
0000E1DA                            loc_C09E:
0000E1DA 6000                       		bra.s	loc_C0E6
0000E1DC                            ; ===========================================================================
0000E1DC                            
0000E1DC                            loc_C0A0:
0000E1DC 4A68 0010                  		tst.w	obVelX(a0)
0000E1E0 6700 0000                  		beq.w	loc_C0D6
0000E1E4 6B00                       		bmi.s	loc_C0BC
0000E1E6 7600                       		moveq	#0,d3
0000E1E8 1628 0014                  		move.b	obActWid(a0),d3
0000E1EC 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E1F2 4A41                       		tst.w	d1		; has block touched a wall?
0000E1F4 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E1F6 6000                       		bra.s	loc_C0E6
0000E1F8                            ; ===========================================================================
0000E1F8                            
0000E1F8                            loc_C0BC:
0000E1F8 7600                       		moveq	#0,d3
0000E1FA 1628 0014                  		move.b	obActWid(a0),d3
0000E1FE 4643                       		not.w	d3
0000E200 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E206 4A41                       		tst.w	d1		; has block touched a wall?
0000E208 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E20A 6000                       		bra.s	loc_C0E6
0000E20C                            ; ===========================================================================
0000E20C                            
0000E20C                            PushB_StopPush:
0000E20C 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E210 6000                       		bra.s	loc_C0E6
0000E212                            ; ===========================================================================
0000E212                            
0000E212                            loc_C0D6:
0000E212 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E21A 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E220 6400                       		bcc.s	loc_C104
0000E222                            
0000E222                            loc_C0E6:
0000E222 7200                       		moveq	#0,d1
0000E224 1228 0014                  		move.b	obActWid(a0),d1
0000E228 0641 000B                  		addi.w	#$B,d1
0000E22C 343C 0010                  		move.w	#$10,d2
0000E230 363C 0011                  		move.w	#$11,d3
0000E234 381F                       		move.w	(sp)+,d4
0000E236 6100 0000                  		bsr.w	loc_C186
0000E23A 6100                       		bsr.s	PushB_ChkLava
0000E23C 6000 FEC4                  		bra.w	loc_BFC6
0000E240                            ; ===========================================================================
0000E240                            
0000E240                            loc_C104:
0000E240 381F                       		move.w	(sp)+,d4
0000E242 43F8 D000                  		lea	(v_player).w,a1
0000E246 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E24C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E252 6000 FECE                  		bra.w	loc_ppppp
0000E256                            ; ===========================================================================
0000E256                            
0000E256                            PushB_ChkLava:
0000E256 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E25C 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E25E 343C FFE0                  		move.w	#-$20,d2
0000E262 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E268 6700                       		beq.s	PushB_LoadLava
0000E26A 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E270 6700                       		beq.s	PushB_LoadLava
0000E272 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E278 6700                       		beq.s	PushB_LoadLava
0000E27A 4E75                       		rts	
0000E27C                            ; ===========================================================================
0000E27C                            
0000E27C                            PushB_ChkLava2:
0000E27C 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E282 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E284 343C 0020                  		move.w	#$20,d2
0000E288 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E28E 6700                       		beq.s	PushB_LoadLava
0000E290 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E296 6700                       		beq.s	PushB_LoadLava
0000E298                            
0000E298                            PushB_NoLava:
0000E298 4E75                       		rts	
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            PushB_LoadLava:
0000E29A 6100 0000                  		bsr.w	FindFreeObj
0000E29E 6600                       		bne.s	locret_C184
0000E2A0 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E2A4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E2AA D569 0008                  		add.w	d2,obX(a1)
0000E2AE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E2B4 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E2BA 2348 003C                  		move.l	a0,$3C(a1)
0000E2BE                            
0000E2BE                            locret_C184:
0000E2BE 4E75                       		rts	
0000E2C0                            ; ===========================================================================
0000E2C0                            
0000E2C0                            loc_C186:
0000E2C0 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E2C4 6700 0000                  		beq.w	loc_C218
0000E2C8 5500                       		subq.b	#2,d0
0000E2CA 6600                       		bne.s	loc_C1AA
0000E2CC 6100 AACA                  		bsr.w	ExitPlatform
0000E2D0 0829 0003 0022             		btst	#3,obStatus(a1)
0000E2D6 6600                       		bne.s	loc_C1A4
0000E2D8 4228 0025                  		clr.b	ob2ndRout(a0)
0000E2DC 4E75                       		rts	
0000E2DE                            ; ===========================================================================
0000E2DE                            
0000E2DE                            loc_C1A4:
0000E2DE 3404                       		move.w	d4,d2
0000E2E0 6000 B014                  		bra.w	MvSonicOnPtfm
0000E2E4                            ; ===========================================================================
0000E2E4                            
0000E2E4                            loc_C1AA:
0000E2E4 5500                       		subq.b	#2,d0
0000E2E6 6600                       		bne.s	loc_C1F2
0000E2E8 6100 0000                  		bsr.w	SpeedToPos
0000E2EC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E2F2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E2F8 4A41                       		tst.w	d1
0000E2FA 6A00 0000                  		bpl.w	locret_C1F0
0000E2FE D368 000C                  		add.w	d1,obY(a0)
0000E302 4268 0012                  		clr.w	obVelY(a0)
0000E306 4228 0025                  		clr.b	ob2ndRout(a0)
0000E30A 3011                       		move.w	(a1),d0
0000E30C 0240 03FF                  		andi.w	#$3FF,d0
0000E310 0C40 016A                  		cmpi.w	#$16A,d0
0000E314 6500                       		bcs.s	locret_C1F0
0000E316 3028 0030                  		move.w	$30(a0),d0
0000E31A E640                       		asr.w	#3,d0
0000E31C 3140 0010                  		move.w	d0,obVelX(a0)
0000E320 117C 0001 0032             		move.b	#1,$32(a0)
0000E326 4268 000E                  		clr.w	obY+2(a0)
0000E32A                            
0000E32A                            locret_C1F0:
0000E32A 4E75                       		rts	
0000E32C                            ; ===========================================================================
0000E32C                            
0000E32C                            loc_C1F2:
0000E32C 6100 0000                  		bsr.w	SpeedToPos
0000E330 3028 0008                  		move.w	obX(a0),d0
0000E334 0240 000C                  		andi.w	#$C,d0
0000E338 6600 0000                  		bne.w	locret_C2E4
0000E33C 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E342 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E348 4268 0010                  		clr.w	obVelX(a0)
0000E34C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E350 4E75                       		rts	
0000E352                            ; ===========================================================================
0000E352                            
0000E352                            loc_C218:
0000E352 6100 0000                  		bsr.w	Solid_ChkEnter
0000E356 4A44                       		tst.w	d4
0000E358 6700 0000                  		beq.w	locret_C2E4
0000E35C 6B00 0000                  		bmi.w	locret_C2E4
0000E360 4A28 0032                  		tst.b	$32(a0)
0000E364 6700                       		beq.s	loc_C230
0000E366 6000 0000                  		bra.w	locret_C2E4
0000E36A                            ; ===========================================================================
0000E36A                            
0000E36A                            loc_C230:
0000E36A 4A40                       		tst.w	d0
0000E36C 6700 0000                  		beq.w	locret_C2E4
0000E370 6B00                       		bmi.s	loc_C268
0000E372 0829 0000 0022             		btst	#0,obStatus(a1)
0000E378 6600 0000                  		bne.w	locret_C2E4
0000E37C 3F00                       		move.w	d0,-(sp)
0000E37E 7600                       		moveq	#0,d3
0000E380 1628 0014                  		move.b	obActWid(a0),d3
0000E384 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E38A 301F                       		move.w	(sp)+,d0
0000E38C 4A41                       		tst.w	d1
0000E38E 6B00 0000                  		bmi.w	locret_C2E4
0000E392 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E39A 7001                       		moveq	#1,d0
0000E39C 323C 0040                  		move.w	#$40,d1
0000E3A0 6000                       		bra.s	loc_C294
0000E3A2                            ; ===========================================================================
0000E3A2                            
0000E3A2                            loc_C268:
0000E3A2 0829 0000 0022             		btst	#0,obStatus(a1)
0000E3A8 6700                       		beq.s	locret_C2E4
0000E3AA 3F00                       		move.w	d0,-(sp)
0000E3AC 7600                       		moveq	#0,d3
0000E3AE 1628 0014                  		move.b	obActWid(a0),d3
0000E3B2 4643                       		not.w	d3
0000E3B4 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3BA 301F                       		move.w	(sp)+,d0
0000E3BC 4A41                       		tst.w	d1
0000E3BE 6B00                       		bmi.s	locret_C2E4
0000E3C0 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E3C8 70FF                       		moveq	#-1,d0
0000E3CA 323C FFC0                  		move.w	#-$40,d1
0000E3CE                            
0000E3CE                            loc_C294:
0000E3CE 43F8 D000                  		lea	(v_player).w,a1
0000E3D2 D169 0008                  		add.w	d0,obX(a1)
0000E3D6 3341 0020                  		move.w	d1,obInertia(a1)
0000E3DA 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E3E0 3F00                       		move.w	d0,-(sp)
0000E3EC 301F                       		move.w	(sp)+,d0
0000E3EE 4A28 0028                  		tst.b	obSubtype(a0)
0000E3F2 6B00                       		bmi.s	locret_C2E4
0000E3F4 3F00                       		move.w	d0,-(sp)
0000E3F6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E3FC 301F                       		move.w	(sp)+,d0
0000E3FE 0C41 0004                  		cmpi.w	#4,d1
0000E402 6F00                       		ble.s	loc_C2E0
0000E404 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E40A 4A40                       		tst.w	d0
0000E40C 6A00                       		bpl.s	loc_C2D8
0000E40E 4468 0010                  		neg.w	obVelX(a0)
0000E412                            
0000E412                            loc_C2D8:
0000E412 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E418 6000                       		bra.s	locret_C2E4
0000E41A                            ; ===========================================================================
0000E41A                            
0000E41A                            loc_C2E0:
0000E41A D368 000C                  		add.w	d1,obY(a0)
0000E41E                            
0000E41E                            locret_C2E4:
0000E41E 4E75                       		rts	
0000E41E 4E75                       		rts	
0000E420                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E420                            ; ---------------------------------------------------------------------------
0000E420                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E420                            ; ---------------------------------------------------------------------------
0000E420                            Map_Push_internal:
0000E420 0000                       		dc.w @single-Map_Push_internal
0000E422 0000                       		dc.w @four-Map_Push_internal
0000E424 01                         @single:	dc.b 1
0000E425 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E42A 04                         @four:		dc.b 4
0000E42B F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E430 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E435 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E43A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E440 00                         		even
0000E440 00                         		even
0000E440                            
0000E440                            		include	"_incObj\34 Title Cards.asm"
0000E440                            ; ---------------------------------------------------------------------------
0000E440                            ; Object 34 - zone title cards
0000E440                            ; ---------------------------------------------------------------------------
0000E440                            
0000E440                            TitleCard:
0000E440 7000                       		moveq	#0,d0
0000E442 1028 0024                  		move.b	obRoutine(a0),d0
0000E446 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E44A 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E44E                            ; ===========================================================================
0000E44E 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E450 0000                       		dc.w Card_ChkPos-Card_Index
0000E452 0000                       		dc.w Card_Wait-Card_Index
0000E454 0000                       		dc.w Card_Wait-Card_Index
0000E456                            
0000E456 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E456 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E456                            ; ===========================================================================
0000E456                            
0000E456                            Card_CheckSBZ3:	; Routine 0
0000E456 2248                       		movea.l	a0,a1
0000E458 7000                       		moveq	#0,d0
0000E45A 1038 FE10                  		move.b	(v_zone).w,d0
0000E45E 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E464 6600                       		bne.s	Card_CheckFZ
0000E466 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E468                            
0000E468                            	Card_CheckFZ:
0000E468 3400                       		move.w	d0,d2
0000E46A 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E470 6600                       		bne.s	Card_LoadConfig
0000E472 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E474 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E476                            
0000E476                            	Card_LoadConfig:
0000E476 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E47C E948                       		lsl.w	#4,d0
0000E47E D6C0                       		adda.w	d0,a3
0000E480 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E486 7203                       		moveq	#3,d1
0000E488                            
0000E488                            Card_Loop:
0000E488 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E48C 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E490 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E494 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E498 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E49C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E4A0 101A                       		move.b	(a2)+,d0
0000E4A2 6600                       		bne.s	Card_ActNumber
0000E4A4 1002                       		move.b	d2,d0
0000E4A6                            
0000E4A6                            	Card_ActNumber:
0000E4A6 0C00 0007                  		cmpi.b	#7,d0
0000E4AA 6600                       		bne.s	Card_MakeSprite
0000E4AC D038 FE11                  		add.b	(v_act).w,d0
0000E4B0 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E4B6 6600                       		bne.s	Card_MakeSprite
0000E4B8 5300                       		subq.b	#1,d0
0000E4BA                            
0000E4BA                            	Card_MakeSprite:
0000E4BA 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E4BE 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E4C6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E4CC 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E4D2 137C 0000 0001             		move.b	#0,obRender(a1)
0000E4D8 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E4DE 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E4E4 43E9 0040                  		lea	$40(a1),a1	; next object
0000E4E8 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E4EC                            
0000E4EC                            Card_ChkPos:	; Routine 2
0000E4EC 7210                       		moveq	#$10,d1		; set horizontal speed
0000E4EE 3028 0030                  		move.w	card_mainX(a0),d0
0000E4F2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E4F6 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E4F8 6C00                       		bge.s	Card_Move
0000E4FA 4441                       		neg.w	d1
0000E4FC                            
0000E4FC                            Card_Move:
0000E4FC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E500                            
0000E500                            Card_NoMove:
0000E500 3028 0008                  		move.w	obX(a0),d0
0000E504 6B00                       		bmi.s	locret_C3D8
0000E506 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E50A 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E50C 6000 0000                  		bra.w	DisplaySprite
0000E510                            ; ===========================================================================
0000E510                            
0000E510                            locret_C3D8:
0000E510 4E75                       		rts	
0000E512                            ; ===========================================================================
0000E512                            
0000E512                            Card_Wait:	; Routine 4/6
0000E512 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E516 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E518 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E51C 6000 0000                  		bra.w	DisplaySprite
0000E520                            ; ===========================================================================
0000E520                            
0000E520                            Card_ChkPos2:
0000E520 4A28 0001                  		tst.b	obRender(a0)
0000E524 6A00                       		bpl.s	Card_ChangeArt
0000E526 7220                       		moveq	#$20,d1
0000E528 3028 0032                  		move.w	card_finalX(a0),d0
0000E52C B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E530 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E532 6C00                       		bge.s	Card_Move2
0000E534 4441                       		neg.w	d1
0000E536                            
0000E536                            Card_Move2:
0000E536 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E53A 3028 0008                  		move.w	obX(a0),d0
0000E53E 6B00                       		bmi.s	locret_C412
0000E540 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E544 6400                       		bcc.s	locret_C412	; if yes, branch
0000E546 6000 0000                  		bra.w	DisplaySprite
0000E54A                            ; ===========================================================================
0000E54A                            
0000E54A                            locret_C412:
0000E54A 4E75                       		rts	
0000E54C                            ; ===========================================================================
0000E54C                            
0000E54C                            Card_ChangeArt:
0000E54C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E552 6600                       		bne.s	Card_Delete
0000E554 7000                       		moveq	#plcid_Explode,d0
0000E556 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E55C 7000                       		moveq	#0,d0
0000E55E 1038 FE10                  		move.b	(v_zone).w,d0
0000E562 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E566 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E56C                            
0000E56C                            Card_Delete:
0000E56C 6000 0000                  		bra.w	DeleteObject
0000E570                            ; ===========================================================================
0000E570 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E572 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E574 00E4                       		dc.w $E4
0000E576 0206                       		dc.b 2,	6
0000E578 00EA                       		dc.w $EA
0000E57A 0207                       		dc.b 2,	7
0000E57C 00E0                       		dc.w $E0
0000E57E 020A                       		dc.b 2,	$A
0000E580                            ; ---------------------------------------------------------------------------
0000E580                            ; Title	card configuration data
0000E580                            ; Format:
0000E580                            ; 4 bytes per item (YYYY XXXX)
0000E580                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E580                            ; ---------------------------------------------------------------------------
0000E580 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E590 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E5A0 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E5B0 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E5C0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E5D0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E5E0 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E5F0                            ; ===========================================================================
0000E5F0                            ; ===========================================================================
0000E5F0                            		include	"_incObj\39 Game Over.asm"
0000E5F0                            ; ---------------------------------------------------------------------------
0000E5F0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E5F0                            ; ---------------------------------------------------------------------------
0000E5F0                            
0000E5F0                            GameOverCard:
0000E5F0 7000                       		moveq	#0,d0
0000E5F2 1028 0024                  		move.b	obRoutine(a0),d0
0000E5F6 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E5FA 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E5FE                            ; ===========================================================================
0000E5FE 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E600 0000                       		dc.w Over_Move-Over_Index
0000E602 0000                       		dc.w Over_Wait-Over_Index
0000E604                            ; ===========================================================================
0000E604                            
0000E604                            Over_ChkPLC:	; Routine 0
0000E604 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E608 6700                       		beq.s	Over_Main	; if yes, branch
0000E60A 4E75                       		rts	
0000E60C                            ; ===========================================================================
0000E60C                            
0000E60C                            Over_Main:
0000E60C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E610 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E616 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E61C 6700                       		beq.s	Over_1stWord	; if not, branch
0000E61E 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E624                            
0000E624                            	Over_1stWord:
0000E624 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E62A 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E632 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E638 117C 0000 0001             		move.b	#0,obRender(a0)
0000E63E 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E644                            
0000E644                            Over_Move:	; Routine 2
0000E644 7210                       		moveq	#$10,d1		; set horizontal speed
0000E646 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E64C 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E64E 6500                       		bcs.s	Over_UpdatePos
0000E650 4441                       		neg.w	d1
0000E652                            
0000E652                            	Over_UpdatePos:
0000E652 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E656 6000 0000                  		bra.w	DisplaySprite
0000E65A                            ; ===========================================================================
0000E65A                            
0000E65A                            Over_SetWait:
0000E65A 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E660 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E664 4E75                       		rts	
0000E666                            ; ===========================================================================
0000E666                            
0000E666                            Over_Wait:	; Routine 4
0000E666 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E66A 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E66E 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E670 0828 0000 001A             		btst	#0,obFrame(a0)
0000E676 6600                       		bne.s	Over_Display
0000E678 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E67C 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E67E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E682 6000 0000                  		bra.w	DisplaySprite
0000E686                            ; ===========================================================================
0000E686                            
0000E686                            Over_ChgMode:
0000E686 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E68A 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E68C 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E692 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E696 6600                       		bne.s	Over_Display	; if yes, branch
0000E698 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E69E 6000                       		bra.s	Over_Display
0000E6A0                            ; ===========================================================================
0000E6A0                            
0000E6A0                            Over_ResetLvl:
0000E6A0 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E6A4 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E6AA                            
0000E6AA                            Over_Display:
0000E6AA 6000 0000                  		bra.w	DisplaySprite
0000E6AA 6000 0000                  		bra.w	DisplaySprite
0000E6AE                            		include	"_incObj\3A Got Through Card.asm"
0000E6AE                            ; ---------------------------------------------------------------------------
0000E6AE                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E6AE                            ; ---------------------------------------------------------------------------
0000E6AE                            
0000E6AE                            GotThroughCard:
0000E6AE 7000                       		moveq	#0,d0
0000E6B0 1028 0024                  		move.b	obRoutine(a0),d0
0000E6B4 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E6B8 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E6BC                            ; ===========================================================================
0000E6BC 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E6BE 0000                       		dc.w Got_Move-Got_Index
0000E6C0 0000                       		dc.w Got_Wait-Got_Index
0000E6C2 0000                       		dc.w Got_TimeBonus-Got_Index
0000E6C4 0000                       		dc.w Got_Wait-Got_Index
0000E6C6 0000                       		dc.w Got_NextLevel-Got_Index
0000E6C8 0000                       		dc.w Got_Wait-Got_Index
0000E6CA 0000                       		dc.w Got_Move2-Got_Index
0000E6CC 0000                       		dc.w loc_C766-Got_Index
0000E6CE                            
0000E6CE =00000030                  got_mainX:	equ $30		; position for card to display on
0000E6CE =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E6CE                            ; ===========================================================================
0000E6CE                            
0000E6CE                            Got_ChkPLC:	; Routine 0
0000E6CE 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6D2 6700                       		beq.s	Got_Main	; if yes, branch
0000E6D4 4E75                       		rts	
0000E6D6                            ; ===========================================================================
0000E6D6                            
0000E6D6                            Got_Main:
0000E6D6 2248                       		movea.l	a0,a1
0000E6D8 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E6DE 7206                       		moveq	#6,d1
0000E6E0                            
0000E6E0                            Got_Loop:
0000E6E0 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E6E4 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E6E8 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E6EC 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E6F0 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E6F4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E6F8 101A                       		move.b	(a2)+,d0
0000E6FA 0C00 0006                  		cmpi.b	#6,d0
0000E6FE 6600                       		bne.s	loc_C5CA
0000E700 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E704                            
0000E704                            	loc_C5CA:
0000E704 1340 001A                  		move.b	d0,obFrame(a1)
0000E708 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E710 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E716 137C 0000 0001             		move.b	#0,obRender(a1)
0000E71C 43E9 0040                  		lea	$40(a1),a1
0000E720 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E724                            
0000E724                            Got_Move:	; Routine 2
0000E724 7210                       		moveq	#$10,d1		; set horizontal speed
0000E726 3028 0030                  		move.w	got_mainX(a0),d0
0000E72A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E72E 6700                       		beq.s	loc_C61A	; if yes, branch
0000E730 6C00                       		bge.s	Got_ChgPos
0000E732 4441                       		neg.w	d1
0000E734                            
0000E734                            	Got_ChgPos:
0000E734 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E738                            
0000E738                            	loc_C5FE:
0000E738 3028 0008                  		move.w	obX(a0),d0
0000E73C 6B00                       		bmi.s	locret_C60E
0000E73E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E742 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E744 6000 0000                  		bra.w	DisplaySprite
0000E748                            ; ===========================================================================
0000E748                            
0000E748                            locret_C60E:
0000E748 4E75                       		rts	
0000E74A                            ; ===========================================================================
0000E74A                            
0000E74A                            loc_C610:
0000E74A 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E750 6000 0000                  		bra.w	Got_Move2
0000E754                            ; ===========================================================================
0000E754                            
0000E754                            loc_C61A:
0000E754 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E75A 67EE                       		beq.s	loc_C610
0000E75C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E762 66D4                       		bne.s	loc_C5FE
0000E764 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E768 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E76E                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E76E                            
0000E76E                            Got_Wait:	; Routine 4, 8, $C
0000E76E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E772 6600                       		bne.s	Got_Display
0000E774 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E778                            
0000E778                            Got_Display:
0000E778 6000 0000                  		bra.w	DisplaySprite
0000E77C                            ; ===========================================================================
0000E77C                            
0000E77C                            Got_TimeBonus:	; Routine 6
0000E77C 6100 0000                  		bsr.w	DisplaySprite
0000E780 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E786 7000                       		moveq	#0,d0
0000E788 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E78C 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E78E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E792 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E798                            
0000E798                            Got_RingBonus:
0000E798 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E79C 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E79E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E7A2 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E7A8                            
0000E7A8                            Got_ChkBonus:
0000E7A8 4A40                       		tst.w	d0		; is there any bonus?
0000E7AA 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E7B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7BA 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E7C0 6600                       		bne.s	Got_SetDelay
0000E7C2 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E7C6                            
0000E7C6                            Got_SetDelay:
0000E7C6 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E7CC                            
0000E7CC                            locret_C692:
0000E7CC 4E75                       		rts	
0000E7CE                            ; ===========================================================================
0000E7CE                            
0000E7CE                            Got_AddBonus:
0000E7CE 4EB9 0000 0000             		jsr	(AddPoints).l
0000E7D4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E7D8 0200 0003                  		andi.b	#3,d0
0000E7DC 66EE                       		bne.s	locret_C692
0000E7E8                            ; ===========================================================================
0000E7E8                            
0000E7E8                            Got_NextLevel:	; Routine $A
0000E7E8 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E7EE 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E7F4 1038 FE10                  		move.b	(v_zone).w,d0
0000E7F8 0240 0007                  		andi.w	#7,d0
0000E7FC E748                       		lsl.w	#3,d0
0000E7FE 1238 FE11                  		move.b	(v_act).w,d1
0000E802 0241 0003                  		andi.w	#3,d1
0000E806 D241                       		add.w	d1,d1
0000E808 D041                       		add.w	d1,d0
0000E80A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E80E 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E812 4A40                       		tst.w	d0
0000E814 6600                       		bne.s	Got_ChkSS
0000E816 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E81C 6000                       		bra.s	Got_Display2
0000E81E                            ; ===========================================================================
0000E81E                            
0000E81E                            Got_ChkSS:	
0000E81E 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E822                            		;tst.b	(f_emeraldm).w
0000E822                            		;beq.s	VBla_08A
0000E822                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E822                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E822                            		;bra.s	Got_Display2
0000E822 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E828                            		
0000E828                            ; ===========================================================================
0000E828                            
0000E828                            VBla_08A:
0000E828 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E82E                            
0000E82E                            Got_Display2:
0000E82E 6000 0000                  		bra.w	DisplaySprite
0000E832                            ; ===========================================================================
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            ; Level	order array
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            LevelOrder:
0000E832                            		; Green Hill Zone
0000E832 0001                       		dc.b id_GHZ, 1	; Act 2
0000E834 0002                       		dc.b id_GHZ, 2	; Act 2
0000E836 0400                       		dc.b id_SYZ, 0	; Act 3
0000E838 0000                       		dc.b 0, 0
0000E83A                            
0000E83A                            		; Labyrinth Zone
0000E83A 0101                       		dc.b id_LZ, 1	; Act 1
0000E83C 0102                       		dc.b id_LZ, 2	; Act 2
0000E83E 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E840 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E842                            
0000E842                            		; Marble Zone
0000E842 0201                       		dc.b id_MZ, 1	; Act 1
0000E844 0202                       		dc.b id_MZ, 2	; Act 2
0000E846 0502                       		dc.b id_SBZ, 2	; Act 3
0000E848 0000                       		dc.b 0, 0
0000E84A                            
0000E84A                            		; Star Light Zone
0000E84A 0301                       		dc.b id_SLZ, 1	; Act 1
0000E84C 0302                       		dc.b id_SLZ, 2	; Act 2
0000E84E 0500                       		dc.b id_SBZ, 0	; Act 3
0000E850 0000                       		dc.b 0, 0
0000E852                            
0000E852                            		; Spring Yard Zone
0000E852 0401                       		dc.b id_SYZ, 1	; Act 1
0000E854 0200                       		dc.b id_MZ,  0	; Act 2
0000E856 0200                       		dc.b id_MZ,	 0	; Act 3
0000E858 0000                       		dc.b 0, 0
0000E85A                            
0000E85A                            		; Scrap Brain Zone
0000E85A 0501                       		dc.b id_SBZ, 1	; Act 1
0000E85C 0103                       		dc.b id_LZ, 3	; Act 2
0000E85E 0000                       		dc.b 0, 0	; Final Zone
0000E860 0000                       		dc.b 0, 0
0000E862                            		even
0000E862                            ; ===========================================================================
0000E862                            
0000E862                            Got_Move2:	; Routine $E
0000E862 7220                       		moveq	#$20,d1		; set horizontal speed
0000E864 3028 0032                  		move.w	got_finalX(a0),d0
0000E868 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E86C 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E86E 6C00                       		bge.s	Got_ChgPos2
0000E870 4441                       		neg.w	d1
0000E872                            
0000E872                            	Got_ChgPos2:
0000E872 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E876 3028 0008                  		move.w	obX(a0),d0
0000E87A 6B00                       		bmi.s	locret_C748
0000E87C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E880 6400                       		bcc.s	locret_C748	; if yes, branch
0000E882 6000 0000                  		bra.w	DisplaySprite
0000E886                            ; ===========================================================================
0000E886                            
0000E886                            locret_C748:
0000E886 4E75                       		rts	
0000E888                            ; ===========================================================================
0000E888                            
0000E888                            Got_SBZ2:
0000E888 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E88E 6600 0000                  		bne.w	DeleteObject
0000E892 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E896 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E89A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E8A0                            ; ===========================================================================
0000E8A0                            
0000E8A0                            loc_C766:	; Routine $10
0000E8A0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E8A4 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E8AA 6700 0000                  		beq.w	DeleteObject
0000E8AE 4E75                       		rts	
0000E8B0                            ; ===========================================================================
0000E8B0                            		;    x-start,	x-main,	y-main,
0000E8B0                            		;				routine, frame number
0000E8B0                            
0000E8B0 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E8B6 0200                       		dc.b 				2,	0
0000E8B8                            
0000E8B8 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E8BE 0201                       		dc.b 				2,	1
0000E8C0                            
0000E8C0 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E8C6 0206                       		dc.b 				2,	6
0000E8C8                            
0000E8C8 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E8CE 0202                       		dc.b 				2,	2
0000E8D0                            
0000E8D0 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E8D6 0203                       		dc.b 				2,	3
0000E8D8                            
0000E8D8 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E8DE 0204                       		dc.b 				2,	4
0000E8E0                            
0000E8E0 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E8E6 0205                       		dc.b 				2,	5
0000E8E6 0205                       		dc.b 				2,	5
0000E8E8                            		include	"_incObj\7E Special Stage Results.asm"
0000E8E8                            ; ---------------------------------------------------------------------------
0000E8E8                            ; Object 7E - special stage results screen
0000E8E8                            ; ---------------------------------------------------------------------------
0000E8E8                            
0000E8E8                            SSResult:
0000E8E8 7000                       		moveq	#0,d0
0000E8EA 1028 0024                  		move.b	obRoutine(a0),d0
0000E8EE 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E8F2 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E8F6                            ; ===========================================================================
0000E8F6 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E8F8 0000                       		dc.w SSR_Move-SSR_Index
0000E8FA 0000                       		dc.w SSR_Wait-SSR_Index
0000E8FC 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E8FE 0000                       		dc.w SSR_Wait-SSR_Index
0000E900 0000                       		dc.w SSR_Exit-SSR_Index
0000E902 0000                       		dc.w SSR_Wait-SSR_Index
0000E904 0000                       		dc.w SSR_Continue-SSR_Index
0000E906 0000                       		dc.w SSR_Wait-SSR_Index
0000E908 0000                       		dc.w SSR_Exit-SSR_Index
0000E90A 0000                       		dc.w loc_C91A-SSR_Index
0000E90C                            
0000E90C =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            SSR_ChkPLC:	; Routine 0
0000E90C 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E910 6700                       		beq.s	SSR_Main	; if yes, branch
0000E912 4E75                       		rts	
0000E914                            ; ===========================================================================
0000E914                            
0000E914                            SSR_Main:
0000E914 2248                       		movea.l	a0,a1
0000E916 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E91C 7203                       		moveq	#3,d1
0000E91E 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E924 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E926 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E928                            
0000E928                            	SSR_Loop:
0000E928 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E92C 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E930 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E934 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E938 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E93C 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E940 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E948 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E94E 137C 0000 0001             		move.b	#0,obRender(a1)
0000E954 43E9 0040                  		lea	$40(a1),a1
0000E958 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E95C                            
0000E95C 7007                       		moveq	#7,d0
0000E95E 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E962 6700                       		beq.s	loc_C842
0000E964 7000                       		moveq	#0,d0
0000E966 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E96A 6600                       		bne.s	loc_C842	; if not, branch
0000E96C 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E96E 317C 0018 0008             		move.w	#$18,obX(a0)
0000E974 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E97A                            
0000E97A                            loc_C842:
0000E97A 1140 001A                  		move.b	d0,obFrame(a0)
0000E97E                            
0000E97E                            SSR_Move:	; Routine 2
0000E97E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E980 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E984 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E988 6700                       		beq.s	loc_C86C	; if yes, branch
0000E98A 6C00                       		bge.s	SSR_ChgPos
0000E98C 4441                       		neg.w	d1
0000E98E                            
0000E98E                            SSR_ChgPos:
0000E98E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E992                            
0000E992                            loc_C85A:
0000E992 3028 0008                  		move.w	obX(a0),d0
0000E996 6B00                       		bmi.s	locret_C86A
0000E998 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E99C 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E99E 6000 0000                  		bra.w	DisplaySprite
0000E9A2                            ; ===========================================================================
0000E9A2                            
0000E9A2                            locret_C86A:
0000E9A2 4E75                       		rts	
0000E9A4                            ; ===========================================================================
0000E9A4                            
0000E9A4                            loc_C86C:
0000E9A4 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E9AA 66E6                       		bne.s	loc_C85A
0000E9AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9B0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9B6 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E9BC                            
0000E9BC                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E9BC 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E9C0 6600                       		bne.s	SSR_Display
0000E9C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9C6                            
0000E9C6                            SSR_Display:
0000E9C6 6000 0000                  		bra.w	DisplaySprite
0000E9CA                            ; ===========================================================================
0000E9CA                            
0000E9CA                            SSR_RingBonus:	; Routine 6
0000E9CA 6100 0000                  		bsr.w	DisplaySprite
0000E9CE 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E9D4 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E9D8 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E9DA 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E9E0 700A                       		moveq	#10,d0		; add 10 to score
0000E9E2 4EB9 0000 0000             		jsr	(AddPoints).l
0000E9E8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9EC 0200 0003                  		andi.b	#3,d0
0000E9F0 6600                       		bne.s	locret_C8EA
0000E9FC                            ; ===========================================================================
0000E9FC                            
0000E9FC                            loc_C8C4:
0000EA06 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA0A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA10 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EA16 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EA18 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EA1E 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EA22                            
0000EA22                            locret_C8EA:
0000EA22 4E75                       		rts	
0000EA24                            ; ===========================================================================
0000EA24                            
0000EA24                            SSR_Exit:	; Routine $A, $12
0000EA24 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA2A 6000 0000                  		bra.w	DisplaySprite
0000EA2E                            ; ===========================================================================
0000EA2E                            
0000EA2E                            SSR_Continue:	; Routine $E
0000EA2E 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EA34 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EA44 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA48 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EA4E 6000 0000                  		bra.w	DisplaySprite
0000EA52                            ; ===========================================================================
0000EA52                            
0000EA52                            loc_C91A:	; Routine $14
0000EA52 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA56 0200 000F                  		andi.b	#$F,d0
0000EA5A 6600                       		bne.s	SSR_Display2
0000EA5C 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EA62                            
0000EA62                            SSR_Display2:
0000EA62 6000 0000                  		bra.w	DisplaySprite
0000EA66                            ; ===========================================================================
0000EA66 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EA6C 0200                       		dc.b 2,	0		; rountine number, frame number
0000EA6E 0320 0120 0118             		dc.w $320, $120, $118
0000EA74 0201                       		dc.b 2,	1
0000EA76 0360 0120 0128             		dc.w $360, $120, $128
0000EA7C 0202                       		dc.b 2,	2
0000EA7E 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EA84 0203                       		dc.b 2,	3
0000EA86 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EA8C 0206                       		dc.b 2,	6
0000EA8C 0206                       		dc.b 2,	6
0000EA8E                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EA8E                            ; ---------------------------------------------------------------------------
0000EA8E                            ; Object 7F - chaos emeralds from the special stage results screen
0000EA8E                            ; ---------------------------------------------------------------------------
0000EA8E                            
0000EA8E                            SSRChaos:
0000EA8E 7000                       		moveq	#0,d0
0000EA90 1028 0024                  		move.b	obRoutine(a0),d0
0000EA94 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EA98 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EA9C                            ; ===========================================================================
0000EA9C 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EA9E 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EAA0                            
0000EAA0                            ; ---------------------------------------------------------------------------
0000EAA0                            ; X-axis positions for chaos emeralds
0000EAA0                            ; ---------------------------------------------------------------------------
0000EAA0 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EAAC                            ; ===========================================================================
0000EAAC                            
0000EAAC                            SSRC_Main:	; Routine 0
0000EAAC 2248                       		movea.l	a0,a1
0000EAAE 45F9 0000 EAA0             		lea	(SSRC_PosData).l,a2
0000EAB4 7400                       		moveq	#0,d2
0000EAB6 7200                       		moveq	#0,d1
0000EAB8 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EABC 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EABE 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EAC2                            
0000EAC2                            	SSRC_Loop:
0000EAC2 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EAC6 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EACA 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EAD0 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EAD4 1633 2000                  		move.b	(a3,d2.w),d3
0000EAD8 1343 001A                  		move.b	d3,obFrame(a1)
0000EADC 1343 001C                  		move.b	d3,obAnim(a1)
0000EAE0 5202                       		addq.b	#1,d2
0000EAE2 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EAE6 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EAEE 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EAF4 137C 0000 0001             		move.b	#0,obRender(a1)
0000EAFA 43E9 0040                  		lea	$40(a1),a1	; next object
0000EAFE 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EB02                            
0000EB02                            SSRC_Flash:	; Routine 2
0000EB02 1028 001A                  		move.b	obFrame(a0),d0
0000EB06 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EB0C 0C00 0006                  		cmpi.b	#6,d0
0000EB10 6600                       		bne.s	SSRC_Display
0000EB12 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EB18                            
0000EB18                            	SSRC_Display:
0000EB18 6000 0000                  		bra.w	DisplaySprite
0000EB18 6000 0000                  		bra.w	DisplaySprite
0000EB1C                            
0000EB1C                            ; ---------------------------------------------------------------------------
0000EB1C                            ; Sprite mappings - zone title cards
0000EB1C                            ; ---------------------------------------------------------------------------
0000EB1C 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EB1E 0000                       		dc.w M_Card_LZ-Map_Card
0000EB20 0000                       		dc.w M_Card_MZ-Map_Card
0000EB22 0000                       		dc.w M_Card_SLZ-Map_Card
0000EB24 0000                       		dc.w M_Card_SYZ-Map_Card
0000EB26 0000                       		dc.w M_Card_SBZ-Map_Card
0000EB28 0000                       		dc.w M_Card_Zone-Map_Card
0000EB2A 0000                       		dc.w M_Card_Act1-Map_Card
0000EB2C 0000                       		dc.w M_Card_Act2-Map_Card
0000EB2E 0000                       		dc.w M_Card_Act3-Map_Card
0000EB30 0000                       		dc.w M_Card_Oval-Map_Card
0000EB32 0000                       		dc.w M_Card_FZ-Map_Card
0000EB34 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EB35 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EB3A F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EB3F F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EB44 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EB49 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EB4E F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EB53 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EB58 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EB5D F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EB62                            		even
0000EB62 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000EB63 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000EB68 F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000EB6D F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000EB72 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000EB77 F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000EB7C F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000EB81 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000EB86 F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000EB8B F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000EB90 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000EB95 F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000EB9A F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000EB9F F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000EBA4 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EBA5 F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000EBAA F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000EBAF F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000EBB4 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000EBB9 F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000EBBE F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000EBC3 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000EBC8 F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000EBCD F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000EBD2 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000EBD7 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000EBDC 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EBDD F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EBE2 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EBE7 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EBEC F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EBF1 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EBF6 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EBFB F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EC00 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EC05 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EC0A                            		even
0000EC0A 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000EC0B F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000EC10 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000EC15 F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000EC1A F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000EC1F F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000EC24 F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000EC29 F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000EC2E F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000EC33 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000EC38 F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000EC3D 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EC3E F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EC43 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EC48 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EC4D F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EC52 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EC57 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EC5C F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EC61 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EC66 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EC6B F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EC70                            		even
0000EC70 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EC71 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EC76 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EC7B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EC80 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EC86 00                         		even
0000EC86 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EC87 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC8C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EC91 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EC92 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC97 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EC9C 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EC9D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ECA2 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ECA7 0D                         M_Card_Oval:	dc.b $D			; Oval
0000ECA8 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ECAD E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ECB2 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ECB7 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ECBC 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ECC1 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000ECC6 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000ECCB FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000ECD0 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000ECD5 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000ECDA FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000ECDF 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000ECE4 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000ECEA 00                         		even
0000ECEA 05                         M_Card_FZ:	dc.b 5			; FINAL
0000ECEB F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000ECF0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000ECF5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ECFA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000ECFF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000ED04                            		even
0000ED04                            
0000ED04                            Map_Over:	include	"_maps\Game Over.asm"
0000ED04                            ; ---------------------------------------------------------------------------
0000ED04                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000ED04                            ; ---------------------------------------------------------------------------
0000ED04                            Map_Over_internal:
0000ED04 0000                       		dc.w byte_CBAC-Map_Over_internal
0000ED06 0000                       		dc.w byte_CBB7-Map_Over_internal
0000ED08 0000                       		dc.w byte_CBC2-Map_Over_internal
0000ED0A 0000                       		dc.w byte_CBCD-Map_Over_internal
0000ED0C 02                         byte_CBAC:	dc.b 2			; GAME
0000ED0D F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000ED12 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000ED17 02                         byte_CBB7:	dc.b 2			; OVER
0000ED18 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000ED1D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000ED22 02                         byte_CBC2:	dc.b 2			; TIME
0000ED23 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000ED28 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000ED2D 02                         byte_CBCD:	dc.b 2			; OVER
0000ED2E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000ED33 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000ED38                            		even
0000ED38                            		even
0000ED38                            
0000ED38                            ; ---------------------------------------------------------------------------
0000ED38                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000ED38                            ; ---------------------------------------------------------------------------
0000ED38 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000ED3A 0000                       		dc.w M_Got_Passed-Map_Got
0000ED3C 0000                       		dc.w M_Got_Score-Map_Got
0000ED3E 0000                       		dc.w M_Got_TBonus-Map_Got
0000ED40 0000                       		dc.w M_Got_RBonus-Map_Got
0000ED42 FF6F                       		dc.w M_Card_Oval-Map_Got
0000ED44 FF4E                       		dc.w M_Card_Act1-Map_Got
0000ED46 FF59                       		dc.w M_Card_Act2-Map_Got
0000ED48 FF64                       		dc.w M_Card_Act3-Map_Got
0000ED4A 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ED4B F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ED50 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ED55 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ED5A F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ED5F F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ED64 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ED69 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ED6E F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ED73 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ED74 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ED79 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ED7E F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ED83 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ED88 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED8D F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ED92 06                         M_Got_Score:	dc.b 6			; SCORE
0000ED93 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ED98 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000ED9D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EDA2 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EDA7 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EDAC FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EDB1 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EDB2 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EDB7 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDBC F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDC1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDC6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDCB F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EDD0 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDD5 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EDD6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EDDB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDE0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDE5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDEA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDEF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EDF4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDFA 00                         		even
0000EDFA                            ; ---------------------------------------------------------------------------
0000EDFA                            ; Sprite mappings - special stage results screen
0000EDFA                            ; ---------------------------------------------------------------------------
0000EDFA 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EDFC 0000                       		dc.w M_SSR_Score-Map_SSR
0000EDFE 0000                       		dc.w byte_CD0D-Map_SSR
0000EE00 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EE02 0000                       		dc.w byte_CD31-Map_SSR
0000EE04 0000                       		dc.w byte_CD46-Map_SSR
0000EE06 0000                       		dc.w byte_CD5B-Map_SSR
0000EE08 0000                       		dc.w byte_CD6B-Map_SSR
0000EE0A 0000                       		dc.w byte_CDA8-Map_SSR
0000EE0C 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EE0D F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EE12 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EE17 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EE1C F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EE21 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EE26 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EE2B F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EE30 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE35 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EE3A F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EE3F F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EE44 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EE49 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EE4E 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EE4F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE54 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE59 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE5E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE63 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE68 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE6D 07                         byte_CD0D:	dc.b 7
0000EE6E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE73 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE78 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE7D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE82 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE87 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE8C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE91 04                         byte_CD31:	dc.b 4
0000EE92 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE97 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE9C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEA1 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EEA6 04                         byte_CD46:	dc.b 4
0000EEA7 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EEAC F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEB1 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEB6 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EEBB 03                         byte_CD5B:	dc.b 3
0000EEBC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EEC1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEC6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EECB 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EECC F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EED1 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EED6 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EEDB F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EEE0 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EEE5 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EEEA F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EEEF F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EEF4 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EEF9 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EEFE F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EF03 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EF08 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EF09 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EF0E F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EF13 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EF18 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EF1D F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EF22 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EF27 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EF2C F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EF31 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EF36 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EF3B F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EF40 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EF45 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EF4A F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EF4F F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EF54                            		even
0000EF54                            
0000EF54                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EF54                            ; ---------------------------------------------------------------------------
0000EF54                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EF54                            ; ---------------------------------------------------------------------------
0000EF54                            Map_SSRC_internal:
0000EF54 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EF56 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EF58 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EF5A 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EF5C 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EF5E 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EF60 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EF62 01                         byte_CE02:	dc.b 1
0000EF63 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EF68 01                         byte_CE08:	dc.b 1
0000EF69 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EF6E 01                         byte_CE0E:	dc.b 1
0000EF6F F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EF74 01                         byte_CE14:	dc.b 1
0000EF75 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EF7A 01                         byte_CE1A:	dc.b 1
0000EF7B F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EF80 01                         byte_CE20:	dc.b 1
0000EF81 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EF86 00                         byte_CE26:	dc.b 0			; Blank frame
0000EF88 00                         		even
0000EF88 00                         		even
0000EF88                            
0000EF88                            		include	"_incObj\36 Spikes.asm"
0000EF88                            ; ---------------------------------------------------------------------------
0000EF88                            ; Object 36 - spikes
0000EF88                            ; ---------------------------------------------------------------------------
0000EF88                            
0000EF88                            Spikes:
0000EF88 7000                       		moveq	#0,d0
0000EF8A 1028 0024                  		move.b	obRoutine(a0),d0
0000EF8E 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EF92 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EF96                            ; ===========================================================================
0000EF96 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EF98 0000                       		dc.w Spik_Solid-Spik_Index
0000EF9A                            
0000EF9A =00000030                  spik_origX:	equ $30		; start X position
0000EF9A =00000032                  spik_origY:	equ $32		; start Y position
0000EF9A                            
0000EF9A 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EF9C 0110                       		dc.b 1,	$10
0000EF9E 0204                       		dc.b 2,	4
0000EFA0 031C                       		dc.b 3,	$1C
0000EFA2 0440                       		dc.b 4,	$40
0000EFA4 0510                       		dc.b 5,	$10
0000EFA6                            ; ===========================================================================
0000EFA6                            
0000EFA6                            Spik_Main:	; Routine 0
0000EFA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EFAA 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EFB2 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EFB8 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EFBE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EFC4 1028 0028                  		move.b	obSubtype(a0),d0
0000EFC8 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EFCE 0240 00F0                  		andi.w	#$F0,d0
0000EFD2 43F9 0000 EF9A             		lea	(Spik_Var).l,a1
0000EFD8 E648                       		lsr.w	#3,d0
0000EFDA D2C0                       		adda.w	d0,a1
0000EFDC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EFE0 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EFE4 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EFEA 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EFF0                            
0000EFF0                            Spik_Solid:	; Routine 2
0000EFF0 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EFF4 343C 0004                  		move.w	#4,d2
0000EFF8 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EFFE 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F000 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F006 6600                       		bne.s	Spik_Upright	; if not, branch
0000F008 343C 0014                  		move.w	#$14,d2
0000F00C                            
0000F00C                            ; Spikes types $1x and $5x face	sideways
0000F00C                            
0000F00C                            Spik_SideWays:
0000F00C 323C 001B                  		move.w	#$1B,d1
0000F010 3602                       		move.w	d2,d3
0000F012 5243                       		addq.w	#1,d3
0000F014 3828 0008                  		move.w	obX(a0),d4
0000F018 6100 0000                  		bsr.w	SolidObject
0000F01C 0828 0003 0022             		btst	#3,obStatus(a0)
0000F022 6600                       		bne.s	Spik_Display
0000F024 0C44 0001                  		cmpi.w	#1,d4
0000F028 6700                       		beq.s	Spik_Hurt
0000F02A 6000                       		bra.s	Spik_Display
0000F02C                            ; ===========================================================================
0000F02C                            
0000F02C                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F02C                            
0000F02C                            Spik_Upright:
0000F02C 7200                       		moveq	#0,d1
0000F02E 1228 0014                  		move.b	obActWid(a0),d1
0000F032 0641 000B                  		addi.w	#$B,d1
0000F036 343C 0010                  		move.w	#$10,d2
0000F03A 363C 0011                  		move.w	#$11,d3
0000F03E 3828 0008                  		move.w	obX(a0),d4
0000F042 6100 0000                  		bsr.w	SolidObject
0000F046 0828 0003 0022             		btst	#3,obStatus(a0)
0000F04C 6600                       		bne.s	Spik_Hurt
0000F04E 4A44                       		tst.w	d4
0000F050 6A00                       		bpl.s	Spik_Display
0000F052                            
0000F052                            Spik_Hurt:
0000F052 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F056 6600                       		bne.s	Spik_Display	; if yes, branch
0000F058 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F05C 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F05E 2F08                       		move.l	a0,-(sp)
0000F060 2448                       		movea.l	a0,a2
0000F062 41F8 D000                  		lea	(v_player).w,a0
0000F066 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F06C 6400                       		bcc.s	loc_CF20
0000F06E                            		; This fixes the infamous "spike bug"
0000F06E 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F072 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F074 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F07A                            loc_D5A2:
0000F07A 9680                       		sub.l	d0,d3
0000F07C 2143 000C                  		move.l	d3,obY(a0)
0000F080 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F086                            
0000F086                            loc_CF20:
0000F086 205F                       		movea.l	(sp)+,a0
0000F088                            
0000F088                            Spik_Display:
0000F088 6100 0000                  		bsr.w	DisplaySprite
0000F0AA 4E75                       		rts	
0000F0AC                            ; ===========================================================================
0000F0AC                            
0000F0AC                            Spik_Type0x:
0000F0AC 7000                       		moveq	#0,d0
0000F0AE 1028 0028                  		move.b	obSubtype(a0),d0
0000F0B2 D040                       		add.w	d0,d0
0000F0B4 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F0B8 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F0BC                            ; ===========================================================================
0000F0BC 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F0BE 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F0C0 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F0C2                            ; ===========================================================================
0000F0C2                            
0000F0C2                            Spik_Type00:
0000F0C2 4E75                       		rts			; don't move the object
0000F0C4                            ; ===========================================================================
0000F0C4                            
0000F0C4                            Spik_Type01:
0000F0C4 6100 0000                  		bsr.w	Spik_Wait
0000F0C8 7000                       		moveq	#0,d0
0000F0CA 1028 0034                  		move.b	$34(a0),d0
0000F0CE D068 0032                  		add.w	spik_origY(a0),d0
0000F0D2 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F0D6 4E75                       		rts	
0000F0D8                            ; ===========================================================================
0000F0D8                            
0000F0D8                            Spik_Type02:
0000F0D8 6100 0000                  		bsr.w	Spik_Wait
0000F0DC 7000                       		moveq	#0,d0
0000F0DE 1028 0034                  		move.b	$34(a0),d0
0000F0E2 D068 0030                  		add.w	spik_origX(a0),d0
0000F0E6 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F0EA 4E75                       		rts	
0000F0EC                            ; ===========================================================================
0000F0EC                            
0000F0EC                            Spik_Wait:
0000F0EC 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F0F0 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F0F2 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F0F6 6600                       		bne.s	locret_CFE6
0000F0F8 4A28 0001                  		tst.b	obRender(a0)
0000F0FC 6A00                       		bpl.s	locret_CFE6
0000F108 6000                       		bra.s	locret_CFE6
0000F10A                            ; ===========================================================================
0000F10A                            
0000F10A                            loc_CFA4:
0000F10A 4A68 0036                  		tst.w	$36(a0)
0000F10E 6700                       		beq.s	loc_CFC6
0000F110 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F116 6400                       		bcc.s	locret_CFE6
0000F118 317C 0000 0034             		move.w	#0,$34(a0)
0000F11E 317C 0000 0036             		move.w	#0,$36(a0)
0000F124 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F12A 6000                       		bra.s	locret_CFE6
0000F12C                            ; ===========================================================================
0000F12C                            
0000F12C                            loc_CFC6:
0000F12C 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F132 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F138 6500                       		bcs.s	locret_CFE6
0000F13A 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F140 317C 0001 0036             		move.w	#1,$36(a0)
0000F146 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F14C                            
0000F14C                            locret_CFE6:
0000F14C 4E75                       		rts	
0000F14C 4E75                       		rts	
0000F14E                            Map_Spike:	include	"_maps\Spikes.asm"
0000F14E                            ; --------------------------------------------------------------------------------
0000F14E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F14E                            ; --------------------------------------------------------------------------------
0000F14E                            
0000F14E                            SME_XgeaQ:	
0000F14E 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F152 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F156 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F15A 03                         SME_XgeaQ_C:	dc.b 3	
0000F15B F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F160 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F165 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F16A 03                         SME_XgeaQ_1C:	dc.b 3	
0000F16B EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F170 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F175 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F17A 01                         SME_XgeaQ_2C:	dc.b 1	
0000F17B F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F180 03                         SME_XgeaQ_32:	dc.b 3	
0000F181 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F186 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F18B F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F190 06                         SME_XgeaQ_42:	dc.b 6	
0000F191 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F196 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F19B F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F1A0 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F1A5 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F1AA F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F1AF 01                         SME_XgeaQ_61:	dc.b 1	
0000F1B0 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F1B6 00                         		even
0000F1B6 00                         		even
0000F1B6                            		include	"_incObj\3B Purple Rock.asm"
0000F1B6                            ; ---------------------------------------------------------------------------
0000F1B6                            ; Object 3B - purple rock (GHZ)
0000F1B6                            ; ---------------------------------------------------------------------------
0000F1B6                            
0000F1B6                            PurpleRock:
0000F1B6 7000                       		moveq	#0,d0
0000F1B8 1028 0024                  		move.b	obRoutine(a0),d0
0000F1BC 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F1C0 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F1C4                            ; ===========================================================================
0000F1C4 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F1C6 0000                       		dc.w Rock_Solid-Rock_Index
0000F1C8                            ; ===========================================================================
0000F1C8                            
0000F1C8                            Rock_Main:	; Routine 0
0000F1C8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1CC 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F1D4 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F1DA 117C 0004 0001             		move.b	#4,obRender(a0)
0000F1E0 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F1E6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F1EC                            
0000F1EC                            Rock_Solid:	; Routine 2
0000F1EC 323C 001B                  		move.w	#$1B,d1
0000F1F0 343C 0010                  		move.w	#$10,d2
0000F1F4 363C 0010                  		move.w	#$10,d3
0000F1F8 3828 0008                  		move.w	obX(a0),d4
0000F1FC 6100 0000                  		bsr.w	SolidObject
0000F200 6100 0000                  		bsr.w	DisplaySprite
0000F222 4E75                       		rts	
0000F222 4E75                       		rts	
0000F224                            		include	"_incObj\49 Waterfall Sound.asm"
0000F224                            ; ---------------------------------------------------------------------------
0000F224                            ; Object 49 - waterfall	sound effect (GHZ)
0000F224                            ; ---------------------------------------------------------------------------
0000F224                            
0000F224                            WaterSound:
0000F224 7000                       		moveq	#0,d0
0000F226 1028 0024                  		move.b	obRoutine(a0),d0
0000F22A 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F22E 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F232                            ; ===========================================================================
0000F232 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F234 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F236                            ; ===========================================================================
0000F236                            
0000F236                            WSnd_Main:	; Routine 0
0000F236 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F23A 117C 0004 0001             		move.b	#4,obRender(a0)
0000F240                            
0000F240                            WSnd_PlaySnd:	; Routine 2
0000F240 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F244 0200 003F                  		andi.b	#$3F,d0
0000F248 6600                       		bne.s	WSnd_ChkDel
0000F254                            
0000F254                            	WSnd_ChkDel:
0000F272 4E75                       		rts	
0000F272 4E75                       		rts	
0000F274                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F274                            ; ---------------------------------------------------------------------------
0000F274                            ; Sprite mappings - purple rock	(GHZ)
0000F274                            ; ---------------------------------------------------------------------------
0000F274                            Map_PRock_internal:
0000F274 0000                       		dc.w byte_D110-Map_PRock_internal
0000F276 02                         byte_D110:	dc.b 2
0000F277 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F27C F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F282 00                         		even
0000F282 00                         		even
0000F282                            		include	"_incObj\3C Smashable Wall.asm"
0000F282                            ; ---------------------------------------------------------------------------
0000F282                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F282                            ; ---------------------------------------------------------------------------
0000F282                            
0000F282                            SmashWall:
0000F282 7000                       		moveq	#0,d0
0000F284 1028 0024                  		move.b	obRoutine(a0),d0
0000F288 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F28C 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F290 6000 0000                  		bra.w	RememberState
0000F294                            ; ===========================================================================
0000F294 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F296 0000                       		dc.w Smash_Solid-Smash_Index
0000F298 0000                       		dc.w Smash_FragMove-Smash_Index
0000F29A                            
0000F29A =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F29A                            ; ===========================================================================
0000F29A                            
0000F29A                            Smash_Main:	; Routine 0
0000F29A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F29E 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F2A6 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F2AC 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2B2 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F2B8 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F2BE 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F2C4                            
0000F2C4                            Smash_Solid:	; Routine 2
0000F2C4 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F2CA 323C 001B                  		move.w	#$1B,d1
0000F2CE 343C 0020                  		move.w	#$20,d2
0000F2D2 363C 0020                  		move.w	#$20,d3
0000F2D6 3828 0008                  		move.w	obX(a0),d4
0000F2DA 6100 0000                  		bsr.w	SolidObject	
0000F2DE 4A04                       		tst.b	d4
0000F2E0 6E00 0000                  		bgt.w	@chkroll	
0000F2E4 6700 0000                  		beq.w	@donothing								
0000F2E8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F2EE 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F2F2                            ; ===========================================================================
0000F2F2                            
0000F2F2                            @chkroll:
0000F2F2 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F2F8 6600                       		bne.s	@donothing	; if not, branch	
0000F2FA 3028 0030                  		move.w	smash_speed(a0),d0
0000F2FE 6A00                       		bpl.s	@chkspeed
0000F300 4440                       		neg.w	d0
0000F302                            
0000F302                            	@chkspeed:
0000F302 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F306 6500                       		bcs.s	@donothing	; if not, branch	
0000F308                            		
0000F308                            	@continue:	
0000F308 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F30E 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F314 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F31A 3028 0008                  		move.w	obX(a0),d0
0000F31E B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F322 6500                       		bcs.s	@smash		; if yes, branch
0000F324 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F32A                            
0000F32A                            	@smash:
0000F32A 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F330 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F336 7206                       		moveq	#6,d1		; load 7 fragments
0000F338 343C 0070                  		move.w	#$70,d2
0000F33C 6100                       		bsr.s	SmashObject
0000F33E                            
0000F33E                            @donothing:
0000F33E 4E75                       		rts	
0000F340                            
0000F340                            Smash_FragMove:	; Routine 4
0000F340 588F                       		addq.l	#4,sp
0000F342 6100 0000                  		bsr.w	SpeedToPos
0000F346 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F34C 4A28 0001                  		tst.b	obRender(a0)
0000F350 6A00 0000                  		bpl.w	DeleteObject
0000F354 6000 0000                  		bra.w	DisplaySprite
0000F358                            
0000F358                            
0000F358                            
0000F358                            		include	"_incObj\sub SmashObject.asm"
0000F358                            ; ---------------------------------------------------------------------------
0000F358                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F358                            ; ---------------------------------------------------------------------------
0000F358                            
0000F358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F358                            
0000F358                            
0000F358                            SmashObject:
0000F358 7000                       		moveq	#0,d0
0000F35A 1028 001A                  		move.b	obFrame(a0),d0
0000F35E D040                       		add.w	d0,d0
0000F360 2668 0004                  		movea.l	obMap(a0),a3
0000F364 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F368 524B                       		addq.w	#1,a3
0000F36A 08E8 0005 0001             		bset	#5,obRender(a0)
0000F370 1810                       		move.b	0(a0),d4
0000F372 1A28 0001                  		move.b	obRender(a0),d5
0000F376 2248                       		movea.l	a0,a1
0000F378 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F37E 1284                       		move.b	d4,0(a1)
0000F380 234B 0004                  		move.l	a3,obMap(a1)
0000F384 1345 0001                  		move.b	d5,obRender(a1)
0000F388 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F38E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F394 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F39A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F3A0 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F3A6 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F3AA 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F3AE 5341                       		subq.w #1,d1
0000F3B0 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F3B4 303C 005F                  		move.w #$5F,d0
0000F3B8                            ; ===========================================================================
0000F3B8                            
0000F3B8                            Smash_Loop:
0000F3B8 4A11                       		tst.b	(a1)
0000F3BA 6700                       		beq.s	@cont
0000F3BC 43E9 0040                  		lea		$40(a1),a1
0000F3C0 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F3C4 6600                       		bne.s	Smash_PlaySnd
0000F3C6                            
0000F3C6                            	@cont:
0000F3C6 5A4B                       		addq.w #5,a3
0000F3C8                            
0000F3C8                            Smash_LoadFrag:				; XREF: SmashObject
0000F3C8 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F3CE 1284                       		move.b	d4,0(a1)
0000F3D0 234B 0004                  		move.l	a3,obMap(a1)
0000F3D4 1345 0001                  		move.b	d5,obRender(a1)
0000F3D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F3DE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F3E4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F3EA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F3F0 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F3F6 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F3FA 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F3FE 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F402                            
0000F402                            Smash_PlaySnd:
0000F402 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F406 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F40C                            
0000F40C                            ; End of function SmashObject
0000F40C                            ; End of function SmashObject
0000F40C                            
0000F40C                            ; ===========================================================================
0000F40C                            ; Smashed block	fragment speeds
0000F40C                            ;
0000F40C 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F410 0600 FF00                  		dc.w $600, -$100
0000F414 0600 0100                  		dc.w $600, $100
0000F418 0400 0500                  		dc.w $400, $500
0000F41C 0600 FA00                  		dc.w $600, -$600
0000F420 0800 FE00                  		dc.w $800, -$200
0000F424 0800 0200                  		dc.w $800, $200
0000F428 0600 0600                  		dc.w $600, $600
0000F42C                            
0000F42C FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F430 F800 FE00                  		dc.w -$800, -$200
0000F434 F800 0200                  		dc.w -$800, $200
0000F438 FA00 0600                  		dc.w -$600, $600
0000F43C FC00 FB00                  		dc.w -$400, -$500
0000F440 FA00 FF00                  		dc.w -$600, -$100
0000F444 FA00 0100                  		dc.w -$600, $100
0000F448 FC00 0500                  		dc.w -$400, $500
0000F44C                            
0000F44C                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F44C                            ; ---------------------------------------------------------------------------
0000F44C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F44C                            ; ---------------------------------------------------------------------------
0000F44C                            Map_Smash_internal:
0000F44C 0000                       		dc.w @left-Map_Smash_internal
0000F44E 0000                       		dc.w @middle-Map_Smash_internal
0000F450 0000                       		dc.w @right-Map_Smash_internal
0000F452 08                         @left:		dc.b 8
0000F453 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F458 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F45D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F462 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F467 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F46C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F471 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F476 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F47B 08                         @middle:	dc.b 8
0000F47C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F481 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F486 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F48B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F490 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F495 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F49A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F49F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F4A4 08                         @right:		dc.b 8
0000F4A5 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F4AA F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F4AF 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F4B4 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F4B9 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F4BE F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F4C3 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F4C8 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F4CE 00                         		even
0000F4CE 00                         		even
0000F4CE                            
0000F4CE                            ; ---------------------------------------------------------------------------
0000F4CE                            ; Object code execution subroutine
0000F4CE                            ; ---------------------------------------------------------------------------
0000F4CE                            
0000F4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4CE                            
0000F4CE                            
0000F4CE                            
0000F4CE                            ExecuteObjects: ; XREF: GM_Title; et al
0000F4CE 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F4D2 7E7F                       		moveq #$7F,d7
0000F4D4 7000                       		moveq #0,d0
0000F4D6 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F4DC 6400                       		bcc.s loc_D362
0000F4DE                            
0000F4DE                            loc_D348:
0000F4DE 1010                       		move.b (a0),d0 ; load object number from RAM
0000F4E0 6700                       		beq.s loc_D358
0000F4E2 D040                       		add.w d0,d0
0000F4E4 D040                       		add.w d0,d0
0000F4E6 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F4EA 4E91                       		jsr (a1) ; run the object's code
0000F4EC 7000                       		moveq #0,d0
0000F4EE                            
0000F4EE                            loc_D358:
0000F4EE 41E8 0040                  		lea $40(a0),a0 ; next object
0000F4F2 51CF FFEA                  		dbf d7,loc_D348
0000F4F6 4E75                       		rts
0000F4F8                            ; ===========================================================================
0000F4F8                            
0000F4F8                            loc_D362:
0000F4F8 7E1F                       		moveq #$1F,d7
0000F4FA 61E2                       		bsr.s loc_D348
0000F4FC 7E5F                       		moveq #$5F,d7
0000F4FE                            
0000F4FE                            loc_D368:
0000F4FE 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F500 1010                       		move.b (a0),d0 ; get the object's ID
0000F502 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F504 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F508 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F50A 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F50E 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F514 6700                       		beq.s loc_D378 ; if not, branch
0000F516 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F51A                            
0000F51A                            loc_D378:
0000F51A 6100 0000                  		bsr.w DisplaySprite2
0000F51E                            		
0000F51E                            loc_D37C:
0000F51E 41E8 0040                  		lea $40(a0),a0
0000F522 51CF FFDA                  		dbf d7,loc_D368
0000F526 4E75                       		rts
0000F528                            ; End of function ExecuteObjects
0000F528                            
0000F528                            ; ===========================================================================
0000F528                            ; ---------------------------------------------------------------------------
0000F528                            ; Object pointers
0000F528                            ; ---------------------------------------------------------------------------
0000F528                            Obj_Index:
0000F528                            		include	"_inc\Object Pointers.asm"
0000F528                            ; ---------------------------------------------------------------------------
0000F528                            ; Object pointers
0000F528                            ; ---------------------------------------------------------------------------
0000F528 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F52C 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F530 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F534 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F538 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F53C 0000 B21E                  ptr_Mozzietron:		dc.l Mozzietron
0000F540 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F544 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F548 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F54C 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F550 0000 0000                  ptr_Pole:		dc.l Pole
0000F554 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F558 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F55C 0000 C63C                  ptr_TitleSonic:		dc.l TitleSonic
0000F560 0000 C6BC                  ptr_PSBTM:		dc.l PSBTM
0000F564 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F568 0000 8B04                  ptr_Bridge:		dc.l Bridge
0000F56C 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F570 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F574 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F578 0000 912A                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F57C 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F580 0000 9476                  ptr_Helix:		dc.l Helix
0000F584 0000 9602                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F588 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F58C 0000 99DE                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F590 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F594 0000 9FE6                  ptr_Scenery:		dc.l Scenery
0000F598 0000 A088                  ptr_WaterSwitcher:	dc.l WaterSwitcher
0000F59C 0000 A59A                  ptr_BallHog:		dc.l BallHog
0000F5A0 0000 AF34                  ptr_Crabmeat:		dc.l Crabmeat
0000F5A4 0000 A668                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F5A8 0000 0000                  ptr_HUD:		dc.l HUD
0000F5AC 0000 B350                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F5B0 0000 B4A2                  ptr_Missile:		dc.l Missile
0000F5B4 0000 A73A                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F5B8 0000 B6FC                  ptr_Rings:		dc.l Rings
0000F5BC 0000 BF46                  ptr_Monitor:		dc.l Monitor
0000F5C0 0000 A7AA                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F5C4 0000 A968                  ptr_Animals:		dc.l Animals		; $28
0000F5C8 0000 AE56                  ptr_Points:		dc.l Points
0000F5CC 0000 A388                  ptr_AutoDoor:		dc.l AutoDoor
0000F5D0 0000 CC66                  ptr_Chopper:		dc.l Chopper
0000F5D4 0000 CD20                  ptr_Jaws:		dc.l Jaws
0000F5D8 0000 CDEA                  ptr_Burrobot:		dc.l Burrobot
0000F5DC 0000 C144                  ptr_PowerUp:		dc.l PowerUp
0000F5E0 0000 CFFE                  ptr_LargeGrass:		dc.l LargeGrass
0000F5E4 0000 D4E0                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F5E8 0000 D7BC                  ptr_ChainStomp:		dc.l ChainStomp
0000F5EC 0000 DE6A                  ptr_Button:		dc.l Button
0000F5F0 0000 E00E                  ptr_PushBlock:		dc.l PushBlock
0000F5F4 0000 E440                  ptr_TitleCard:		dc.l TitleCard
0000F5F8 0000 D320                  ptr_GrassFire:		dc.l GrassFire
0000F5FC 0000 EF88                  ptr_Spikes:		dc.l Spikes
0000F600 0000 B958                  ptr_RingLoss:		dc.l RingLoss
0000F604 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F608 0000 E5F0                  ptr_GameOverCard:	dc.l GameOverCard
0000F60C 0000 E6AE                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F610 0000 F1B6                  ptr_PurpleRock:		dc.l PurpleRock
0000F614 0000 F282                  ptr_SmashWall:		dc.l SmashWall
0000F618 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F61C 0000 0000                  ptr_Prison:		dc.l Prison
0000F620 0000 A83C                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F624 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F628 0000 0000                  ptr_Springs:		dc.l Springs
0000F62C 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F630 0000 0000                  ptr_Roller:		dc.l Roller
0000F634 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F638 0000 DAD8                  ptr_SideStomp:		dc.l SideStomp
0000F63C 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F640 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F644 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F648 0000 F224                  ptr_WaterSound:		dc.l WaterSound
0000F64C 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F650 0000 BC1A                  ptr_GiantRing:		dc.l GiantRing
0000F654 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F658 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F65C 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F660 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F664 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F668 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F66C 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F670 0000 9AEE                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F674 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F678 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F67C 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F680 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F684 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F688 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F68C 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F690 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F694 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F698 0000 0000                  ptr_Fan:		dc.l Fan
0000F69C 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F6A0 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F6A4 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F6A8 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F6AC 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F6B0 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F6B4 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F6B8 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F6BC 0000 0000                  ptr_Junction:		dc.l Junction
0000F6C0 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F6C4 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F6C8 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F6CC 0000 0000                  ptr_Saws:		dc.l Saws
0000F6D0 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F6D4 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F6D8 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F6DC 0000 0000                  ptr_Electro:		dc.l Electro
0000F6E0 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F6E4 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F6E8 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F6EC 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F6F0 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F6F4 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F6F8 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F6FC 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F700 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F704 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F708 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F70C 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F710 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F714 0000 BCF4                  ptr_RingFlash:		dc.l RingFlash
0000F718 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F71C 0000 E8E8                  ptr_SSResult:		dc.l SSResult
0000F720 0000 EA8E                  ptr_SSRChaos:		dc.l SSRChaos
0000F724 0000 606E                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F728 0000 6186                  ptr_ContSonic:		dc.l ContSonic
0000F72C 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F730 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F734 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F738 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F73C 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F740 0000 660C                  ptr_EndSonic:		dc.l EndSonic
0000F744 0000 6766                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F748 0000 6840                  ptr_EndSTH:		dc.l EndSTH
0000F74C 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F750 0000 6ABA                  ptr_EndEggman:		dc.l EndEggman
0000F754 0000 6B9A                  ptr_TryChaos:		dc.l TryChaos
0000F758 0000 0000                  ptr_SuperStars:		dc.l SuperStars
0000F75C                            
0000F75C                            NullObject:
0000F75C                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F75C                            
0000F75C =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F75C =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F75C =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F75C =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F75C =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F75C =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F75C =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F75C =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F75C =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F75C =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F75C =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F75C =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F75C =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F75C =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F75C =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F75C =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F75C =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F75C =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F75C =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F75C =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F75C =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F75C =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F75C =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F75C =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F75C =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F75C =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F75C =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F75C =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F75C =0000001D                  id_WaterSwitcher:		equ ((ptr_WaterSwitcher-Obj_Index)/4)+1
0000F75C =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F75C =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F75C =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F75C =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F75C =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F75C =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F75C =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F75C =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F75C =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F75C =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F75C =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F75C =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F75C =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F75C =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F75C =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F75C =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F75C =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F75C =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F75C =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F75C =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F75C =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F75C =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F75C =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F75C =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F75C =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F75C =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F75C =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F75C =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F75C =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F75C =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F75C =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F75C =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F75C =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F75C =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F75C =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F75C =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F75C =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F75C =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F75C =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F75C =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F75C =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F75C =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F75C =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F75C =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F75C =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F75C =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F75C =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F75C =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F75C =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F75C =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F75C =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F75C =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F75C =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F75C =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F75C =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F75C =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F75C =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F75C =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F75C =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F75C =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F75C =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F75C =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F75C =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F75C =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F75C =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F75C =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F75C =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F75C =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F75C =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F75C =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F75C =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F75C =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F75C =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F75C =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F75C =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F75C =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F75C =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F75C =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F75C =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F75C =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F75C =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F75C =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F75C =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F75C =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F75C =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F75C =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F75C =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F75C =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F75C =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F75C =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F75C =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F75C =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F75C =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F75C =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F75C =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F75C =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F75C =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F75C =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F75C =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F75C =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F75C =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F75C =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F75C =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F75C =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F75C =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F75C =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F75C =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F75C =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F75C =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F75C =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F75C =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F75C =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F75C =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F75C                            
0000F75C                            		include	"_incObj\sub ObjectFall.asm"
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            
0000F75C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F75C                            
0000F75C                            
0000F75C                            ObjectFall:
0000F75C 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F762 6700                       		beq.s	@donothing
0000F764 3028 0010                  		move.w	obVelX(a0),d0
0000F768 48C0                       		ext.l	d0
0000F76A E188                       		lsl.l	#8,d0
0000F76C D1A8 0008                  		add.l	d0,obX(a0)
0000F770 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F776 6F00                               ble.s   @skipline       ; if yes, branch
0000F778 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F77E                                @skipline:		
0000F77E 3028 0012                  		move.w	obVelY(a0),d0
0000F782 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F788 48C0                       		ext.l	d0
0000F78A E188                       		lsl.l	#8,d0
0000F78C D1A8 000C                  		add.l	d0,obY(a0)
0000F790 4E75                       		rts	
0000F792                            	
0000F792                            	@donothing:
0000F792 4E75                       		rts
0000F794                            
0000F794                            ; End of function ObjectFall
0000F794                            ; End of function ObjectFall
0000F794                            		include	"_incObj\sub SpeedToPos.asm"
0000F794                            ; ---------------------------------------------------------------------------
0000F794                            ; Subroutine translating object	speed to update	object position
0000F794                            ; ---------------------------------------------------------------------------
0000F794                            
0000F794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F794                            
0000F794                            
0000F794                            SpeedToPos:
0000F794 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F79A E188                       		lsl.l	#8,d0
0000F79C D1A8 0008                  		add.l	d0,obX(a0)
0000F7A0 E18A                       		lsl.l	#8,d2
0000F7A2 D5A8 000C                  		add.l	d2,obY(a0)
0000F7A6 4E75                       		rts
0000F7A8                            ; End of function SpeedToPos
0000F7A8                            ; End of function SpeedToPos
0000F7A8                            		include	"_incObj\sub DisplaySprite.asm"
0000F7A8                            ; ---------------------------------------------------------------------------
0000F7A8                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F7A8                            ; ---------------------------------------------------------------------------
0000F7A8                            
0000F7A8                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F7A8                            
0000F7A8                            
0000F7A8                            DisplaySprite:
0000F7A8 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F7AC D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F7B0 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F7B4 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F7B6 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F7B8 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F7BA 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F7BC                            
0000F7BC                                DSpr_Full:
0000F7BC 4E75                               rts    
0000F7BE                            
0000F7BE                            ; End of function DisplaySprite
0000F7BE                            
0000F7BE                            
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            
0000F7BE                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F7BE                            
0000F7BE                            
0000F7BE                            DisplaySprite1:
0000F7BE 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F7C2 D4E9 0018                          adda.w  obpriority(a1),a2
0000F7C6 0C52 007E                          cmpi.w    #$7E,(a2)
0000F7CA 6400                               bcc.s    DSpr1_Full
0000F7CC 5452                               addq.w    #2,(a2)
0000F7CE D4D2                               adda.w    (a2),a2
0000F7D0 3489                               move.w    a1,(a2)
0000F7D2                            
0000F7D2                                DSpr1_Full:
0000F7D2 4E75                               rts    
0000F7D4                            
0000F7D4                            ; End of function DisplaySprite1
0000F7D4                            
0000F7D4                            ; ---------------------------------------------------------------------------
0000F7D4                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F7D4                            ; and d0 is already (priority/2)&$380
0000F7D4                            ; ---------------------------------------------------------------------------
0000F7D4                            
0000F7D4                            ; loc_16530:
0000F7D4                            DisplaySprite2:
0000F7D4 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F7D8 D2C0                           adda.w    d0,a1
0000F7DA 0C51 007E                      cmpi.w    #$7E,(a1)
0000F7DE 6400                           bhs.s    return_16542
0000F7E0 5451                           addq.w    #2,(a1)
0000F7E2 D2D1                           adda.w    (a1),a1
0000F7E4 3288                           move.w    a0,(a1)
0000F7E6                            
0000F7E6                            return_16542:
0000F7E6 4E75                           rts
0000F7E6 4E75                           rts
0000F7E8                            		include	"_incObj\sub DeleteObject.asm"
0000F7E8                            ; ---------------------------------------------------------------------------
0000F7E8                            ; Subroutine to	delete an object
0000F7E8                            ; ---------------------------------------------------------------------------
0000F7E8                            
0000F7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7E8                            
0000F7E8                            
0000F7E8                            DeleteObject:
0000F7E8 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F7EA                            
0000F7EA                            DeleteChild:				; child objects are already in (a1)
0000F7EA 7200                       		moveq	#0,d1
0000F7EC 700F                       		moveq	#$F,d0
0000F7EE                            
0000F7EE                            	DelObj_Loop:
0000F7EE 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F7F0 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F7F4 4E75                       		rts	
0000F7F6                            
0000F7F6                            ; End of function DeleteObject
0000F7F6                            ; End of function DeleteObject
0000F7F6                            
0000F7F6                            ; ===========================================================================
0000F7F6 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F7FA 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F7FE 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F802 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F806                            ; ---------------------------------------------------------------------------
0000F806                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F806                            ; ---------------------------------------------------------------------------
0000F806                            
0000F806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F806                            BuildSprites:                ; XREF: TitleScreen; et al
0000F806 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F80A 7A00                       		moveq	#0,d5
0000F80C 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F810 7E07                       		moveq	#7,d7
0000F812                            		
0000F812                            loc_D66A:
0000F812 4A54                       		tst.w	(a4)
0000F814 6700 0000                  		beq.w	loc_D72E
0000F818 7C02                       		moveq	#2,d6
0000F81A                            
0000F81A                            loc_D672:
0000F81A 3074 6000                          movea.w    (a4,d6.w),a0
0000F81E 4A10                               tst.b    (a0)
0000F820 6700 0000                          beq.w    loc_D726
0000F824 08A8 0007 0001                     bclr    #7,1(a0)
0000F82A 1028 0001                          move.b    1(a0),d0
0000F82E 1800                               move.b    d0,d4
0000F830 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F834 6700                               beq.s    @skip    ; if it is, branch
0000F836 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F83A 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F83E                               @skip:
0000F83E 0240 000C                  		andi.w	#$C,d0
0000F842 6700                       		beq.s	loc_D6DE
0000F844 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F848 7000                       		moveq	#0,d0
0000F84A 1028 0014                  		move.b	width_pixels(a0),d0
0000F84E 3628 0008                  		move.w	8(a0),d3
0000F852 9651                       		sub.w	(a1),d3
0000F854 3203                       		move.w	d3,d1
0000F856 D240                       		add.w	d0,d1
0000F858 6B00 0000                  		bmi.w	loc_D726
0000F85C 3203                       		move.w	d3,d1
0000F85E 9240                       		sub.w	d0,d1
0000F860 0C41 0140                  		cmpi.w	#$140,d1
0000F864 6C00                       		bge.s	loc_D726
0000F866 0643 0080                  		addi.w	#$80,d3
0000F86A 0804 0004                  		btst	#4,d4
0000F86E 6700                       		beq.s	loc_D6E8
0000F870 7000                       		moveq	#0,d0
0000F872 1028 0016                  		move.b	$16(a0),d0
0000F876 3428 000C                  		move.w	$C(a0),d2
0000F87A 9469 0004                  		sub.w	4(a1),d2
0000F87E 3202                       		move.w	d2,d1
0000F880 D240                       		add.w	d0,d1
0000F882 6B00                       		bmi.s	loc_D726
0000F884 3202                       		move.w	d2,d1
0000F886 9240                       		sub.w	d0,d1
0000F888 0C41 00E0                  		cmpi.w	#$E0,d1
0000F88C 6C00                       		bge.s	loc_D726
0000F88E 0642 0080                  		addi.w	#$80,d2
0000F892 6000                       		bra.s	loc_D700
0000F894                            ; ===========================================================================
0000F894                            
0000F894                            loc_D6DE:
0000F894 3428 000A                  		move.w	$A(a0),d2
0000F898 3628 0008                  		move.w	8(a0),d3
0000F89C 6000                       		bra.s	loc_D700
0000F89E                            ; ===========================================================================
0000F89E                            
0000F89E                            loc_D6E8:
0000F89E 3428 000C                  		move.w	$C(a0),d2
0000F8A2 9469 0004                  		sub.w	4(a1),d2
0000F8A6 0642 0080                  		addi.w	#$80,d2
0000F8AA 0C42 0060                  		cmpi.w	#$60,d2
0000F8AE 6500                       		bcs.s	loc_D726
0000F8B0 0C42 0180                  		cmpi.w	#$180,d2
0000F8B4 6400                       		bcc.s	loc_D726
0000F8B6                            
0000F8B6                            loc_D700:
0000F8B6 2268 0004                  		movea.l	4(a0),a1
0000F8BA 7200                       		moveq	#0,d1
0000F8BC 0804 0005                  		btst	#5,d4
0000F8C0 6600                       		bne.s	loc_D71C
0000F8C2 1228 001A                  		move.b	$1A(a0),d1
0000F8C6 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F8C8 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F8CC 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F8CE 1219                       		move.b	(a1)+,d1
0000F8D0 5301                       		subq.b	#1,d1
0000F8D2 6B00                       		bmi.s	loc_D720
0000F8D4                            
0000F8D4                            loc_D71C:
0000F8D4 4EB9 0000 0000             		jsr	sub_D750
0000F8DA                            
0000F8DA                            loc_D720:
0000F8DA 08E8 0007 0001             		bset	#7,1(a0)
0000F8E0                            
0000F8E0                            loc_D726:
0000F8E0 5446                       		addq.w	#2,d6
0000F8E2 5554                       		subq.w	#2,(a4)
0000F8E4 6600 FF34                  		bne.w	loc_D672
0000F8E8                            
0000F8E8                            loc_D72E:
0000F8E8 49EC 0080                  		lea	$80(a4),a4
0000F8EC 51CF FF24                  		dbf	d7,loc_D66A
0000F8F0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F8F4 0C05 0050                  		cmpi.b	#$50,d5
0000F8F8 6700                       		beq.s	loc_D748
0000F8FA 24BC 0000 0000             		move.l	#0,(a2)
0000F900 4E75                       		rts	
0000F902                            ; ===========================================================================
0000F902                            
0000F902                            loc_D748:
0000F902 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F908 4E75                       		rts	
0000F90A                            ; End of function BuildSprites
0000F90A                            
0000F90A                            BuildSprites_MultiDraw:
0000F90A 2F0C                       	move.l	a4,-(sp)
0000F90C 49F8 F700                  	lea	($FFFFF700).w,a4
0000F910 3668 0002                  	movea.w	art_tile(a0),a3
0000F914 2A68 0004                  	movea.l	mappings(a0),a5
0000F918 7000                       	moveq	#0,d0
0000F91A                            
0000F91A                            	; check if object is within X bounds
0000F91A 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F91E 3628 0008                  	move.w	x_pos(a0),d3
0000F922 9654                       	sub.w	(a4),d3
0000F924 3203                       	move.w	d3,d1                            
0000F926 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F928 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F92C 3203                       	move.w	d3,d1
0000F92E 9240                       	sub.w	d0,d1
0000F930 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F934 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F938 0643 0080                  	addi.w	#128,d3
0000F93C                            
0000F93C                            	; check if object is within Y bounds
0000F93C 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F940 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F942 7000                       	moveq	#0,d0
0000F944 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F948 3428 000C                  	move.w	y_pos(a0),d2
0000F94C 946C 0004                  	sub.w	4(a4),d2
0000F950 3202                       	move.w	d2,d1
0000F952 D240                       	add.w	d0,d1
0000F954 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F958 3202                       	move.w	d2,d1
0000F95A 9240                       	sub.w	d0,d1
0000F95C 0C41 00E0                  	cmpi.w	#224,d1
0000F960 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F964 0642 0080                  	addi.w	#128,d2
0000F968 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F96A                            BuildSpritesMulti_ApproxYCheck:
0000F96A 3428 000C                  	move.w	y_pos(a0),d2
0000F96E 946C 0004                  	sub.w	4(a4),d2
0000F972 0642 0080                  	addi.w	#128,d2
0000F976 0242 07FF                  	andi.w	#$7FF,d2
0000F97A 0C42 0060                  	cmpi.w	#-32+128,d2
0000F97E 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F980 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F984 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F986                            BuildSpritesMulti_DrawSprite:
0000F986 7200                       	moveq	#0,d1
0000F988 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F98C 6700                       	beq.s	.noparenttodraw
0000F98E D241                       	add.w	d1,d1
0000F990 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F992 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F996 7200                       	moveq	#0,d1
0000F998 1219                       	move.b	(a1)+,d1
0000F99A 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F99C 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F99E 3F04                       	move.w	d4,-(sp)
0000F9A0 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F9A6 381F                       	move.w	(sp)+,d4
0000F9A8                            .noparenttodraw:
0000F9A8 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F9AE 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F9B2 7000                       	moveq	#0,d0
0000F9B4 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F9B8 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F9BA 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F9BC                            
0000F9BC                            @drawchildloop:
0000F9BC 4840                       	swap	d0
0000F9BE 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F9C0 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F9C2 0643 0080                  	addi.w	#128,d3
0000F9C6 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F9C8 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F9CC 0642 0080                  	addi.w	#128,d2
0000F9D0 0242 07FF                  	andi.w	#$7FF,d2
0000F9D4 524E                       	addq.w	#1,a6
0000F9D6 7200                       	moveq	#0,d1
0000F9D8 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F9DA D241                       	add.w	d1,d1
0000F9DC 224D                       	movea.l	a5,a1
0000F9DE D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F9E2 7200                       	moveq	#0,d1
0000F9E4 1219                       	move.b	(a1)+,d1
0000F9E6 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F9E8 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000F9EA 3F04                       	move.w	d4,-(sp)
0000F9EC 4EB9 0000 0000             	jsr	ChkDrawSprite
0000F9F2 381F                       	move.w	(sp)+,d4
0000F9F4                            @nochildleft:
0000F9F4 4840                       	swap	d0
0000F9F6 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000F9FA                            ; loc_16804:
0000F9FA                            BuildSprites_MultiDraw_NextObj:
0000F9FA 285F                       	movea.l	(sp)+,a4
0000F9FC 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000FA00                            
0000FA00                            
0000FA00                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000FA00                            
0000FA00                            ; sub_1680A:
0000FA00                            ChkDrawSprite:
0000FA00 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000FA04 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000FA06 4E75                       	rts	; otherwise, return
0000FA08                            
0000FA08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA08                            
0000FA08                            
0000FA08                            sub_D750:				; XREF: BuildSprites
0000FA08 3668 0002                  		movea.w	2(a0),a3
0000FA0C                            loc_1681C:
0000FA0C 0804 0000                  		btst	#0,d4
0000FA10 6600                       		bne.s	loc_D796
0000FA12 0804 0001                  		btst	#1,d4
0000FA16 6600 0000                  		bne.w	loc_D7E4
0000FA1A                            ; End of function sub_D750
0000FA1A                            
0000FA1A                            
0000FA1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA1A                            
0000FA1A                            
0000FA1A                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000FA1A 0C05 0050                  		cmpi.b	#$50,d5
0000FA1E 6700                       		beq.s	locret_D794
0000FA20                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000FA20 1019                       		move.b	(a1)+,d0
0000FA22 4880                       		ext.w	d0
0000FA24 D042                       		add.w	d2,d0
0000FA26 34C0                       		move.w	d0,(a2)+
0000FA28 14D9                       		move.b	(a1)+,(a2)+
0000FA2A 5205                       		addq.b	#1,d5
0000FA2C 14C5                       		move.b	d5,(a2)+
0000FA2E 1019                       		move.b	(a1)+,d0
0000FA30 E148                       		lsl.w	#8,d0
0000FA32 1019                       		move.b	(a1)+,d0
0000FA34 D04B                       		add.w	a3,d0
0000FA36 34C0                       		move.w	d0,(a2)+
0000FA38 1019                       		move.b	(a1)+,d0
0000FA3A 4880                       		ext.w	d0
0000FA3C D043                       		add.w	d3,d0
0000FA3E 0240 01FF                  		andi.w	#$1FF,d0
0000FA42 6600                       		bne.s	loc_D78E
0000FA44 5240                       		addq.w	#1,d0
0000FA46                            
0000FA46                            loc_D78E:
0000FA46 34C0                       		move.w	d0,(a2)+
0000FA48 51C9 FFD0                  		dbf	d1,sub_D762
0000FA4C                            
0000FA4C                            locret_D794:
0000FA4C 4E75                       		rts
0000FA4E                            ; End of function sub_D762
0000FA4E                            
0000FA4E                            ; ===========================================================================
0000FA4E                            
0000FA4E                            loc_D796:
0000FA4E 0804 0001                  		btst	#1,d4
0000FA52 6600 0000                  		bne.w	loc_D82A
0000FA56                            
0000FA56                            loc_D79E:
0000FA56 0C05 0050                  		cmpi.b	#$50,d5
0000FA5A 6700                       		beq.s	locret_D7E2
0000FA5C 1019                       		move.b	(a1)+,d0
0000FA5E 4880                       		ext.w	d0
0000FA60 D042                       		add.w	d2,d0
0000FA62 34C0                       		move.w	d0,(a2)+
0000FA64 1819                       		move.b	(a1)+,d4
0000FA66 14C4                       		move.b	d4,(a2)+
0000FA68 5205                       		addq.b	#1,d5
0000FA6A 14C5                       		move.b	d5,(a2)+
0000FA6C 1019                       		move.b	(a1)+,d0
0000FA6E E148                       		lsl.w	#8,d0
0000FA70 1019                       		move.b	(a1)+,d0
0000FA72 D04B                       		add.w	a3,d0
0000FA74 0A40 0800                  		eori.w	#$800,d0
0000FA78 34C0                       		move.w	d0,(a2)+
0000FA7A 1019                       		move.b	(a1)+,d0
0000FA7C 4880                       		ext.w	d0
0000FA7E 4440                       		neg.w	d0
0000FA80 D804                       		add.b	d4,d4
0000FA82 0244 0018                  		andi.w	#$18,d4
0000FA86 5044                       		addq.w	#8,d4
0000FA88 9044                       		sub.w	d4,d0
0000FA8A D043                       		add.w	d3,d0
0000FA8C 0240 01FF                  		andi.w	#$1FF,d0
0000FA90 6600                       		bne.s	loc_D7DC
0000FA92 5240                       		addq.w	#1,d0
0000FA94                            
0000FA94                            loc_D7DC:
0000FA94 34C0                       		move.w	d0,(a2)+
0000FA96 51C9 FFBE                  		dbf	d1,loc_D79E
0000FA9A                            
0000FA9A                            locret_D7E2:
0000FA9A 4E75                       		rts
0000FA9C                            ; ===========================================================================
0000FA9C                            
0000FA9C                            loc_D7E4:				; XREF: sub_D750
0000FA9C 0C05 0050                  		cmpi.b	#$50,d5
0000FAA0 6700                       		beq.s	locret_D828
0000FAA2 1019                       		move.b	(a1)+,d0
0000FAA4 1811                       		move.b	(a1),d4
0000FAA6 4880                       		ext.w	d0
0000FAA8 4440                       		neg.w	d0
0000FAAA E70C                       		lsl.b	#3,d4
0000FAAC 0244 0018                  		andi.w	#$18,d4
0000FAB0 5044                       		addq.w	#8,d4
0000FAB2 9044                       		sub.w	d4,d0
0000FAB4 D042                       		add.w	d2,d0
0000FAB6 34C0                       		move.w	d0,(a2)+
0000FAB8 14D9                       		move.b	(a1)+,(a2)+
0000FABA 5205                       		addq.b	#1,d5
0000FABC 14C5                       		move.b	d5,(a2)+
0000FABE 1019                       		move.b	(a1)+,d0
0000FAC0 E148                       		lsl.w	#8,d0
0000FAC2 1019                       		move.b	(a1)+,d0
0000FAC4 D04B                       		add.w	a3,d0
0000FAC6 0A40 1000                  		eori.w	#$1000,d0
0000FACA 34C0                       		move.w	d0,(a2)+
0000FACC 1019                       		move.b	(a1)+,d0
0000FACE 4880                       		ext.w	d0
0000FAD0 D043                       		add.w	d3,d0
0000FAD2 0240 01FF                  		andi.w	#$1FF,d0
0000FAD6 6600                       		bne.s	loc_D822
0000FAD8 5240                       		addq.w	#1,d0
0000FADA                            
0000FADA                            loc_D822:
0000FADA 34C0                       		move.w	d0,(a2)+
0000FADC 51C9 FFBE                  		dbf	d1,loc_D7E4
0000FAE0                            
0000FAE0                            locret_D828:
0000FAE0 4E75                       		rts
0000FAE2                            ; ===========================================================================
0000FAE2                            
0000FAE2                            loc_D82A:
0000FAE2 0C05 0050                  		cmpi.b	#$50,d5
0000FAE6 6700                       		beq.s	locret_D87C
0000FAE8 1019                       		move.b	(a1)+,d0
0000FAEA 1811                       		move.b	(a1),d4
0000FAEC 4880                       		ext.w	d0
0000FAEE 4440                       		neg.w	d0
0000FAF0 E70C                       		lsl.b	#3,d4
0000FAF2 0244 0018                  		andi.w	#$18,d4
0000FAF6 5044                       		addq.w	#8,d4
0000FAF8 9044                       		sub.w	d4,d0
0000FAFA D042                       		add.w	d2,d0
0000FAFC 34C0                       		move.w	d0,(a2)+
0000FAFE 1819                       		move.b	(a1)+,d4
0000FB00 14C4                       		move.b	d4,(a2)+
0000FB02 5205                       		addq.b	#1,d5
0000FB04 14C5                       		move.b	d5,(a2)+
0000FB06 1019                       		move.b	(a1)+,d0
0000FB08 E148                       		lsl.w	#8,d0
0000FB0A 1019                       		move.b	(a1)+,d0
0000FB0C D04B                       		add.w	a3,d0
0000FB0E 0A40 1800                  		eori.w	#$1800,d0
0000FB12 34C0                       		move.w	d0,(a2)+
0000FB14 1019                       		move.b	(a1)+,d0
0000FB16 4880                       		ext.w	d0
0000FB18 4440                       		neg.w	d0
0000FB1A D804                       		add.b	d4,d4
0000FB1C 0244 0018                  		andi.w	#$18,d4
0000FB20 5044                       		addq.w	#8,d4
0000FB22 9044                       		sub.w	d4,d0
0000FB24 D043                       		add.w	d3,d0
0000FB26 0240 01FF                  		andi.w	#$1FF,d0
0000FB2A 6600                       		bne.s	loc_D876
0000FB2C 5240                       		addq.w	#1,d0
0000FB2E                            
0000FB2E                            loc_D876:
0000FB2E 34C0                       		move.w	d0,(a2)+
0000FB30 51C9 FFB0                  		dbf	d1,loc_D82A
0000FB34                            
0000FB34                            locret_D87C:
0000FB34 4E75                       		rts
0000FB36                            ; End of function BuildSpr_Normal
0000FB36                            
0000FB36                            ; ===========================================================================
0000FB36                            
0000FB36                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FB36                            ; ---------------------------------------------------------------------------
0000FB36                            ; Subroutine to	check if an object is off screen
0000FB36                            
0000FB36                            ; output:
0000FB36                            ;	d0 = flag set if object is off screen
0000FB36                            ; ---------------------------------------------------------------------------
0000FB36                            
0000FB36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB36                            
0000FB36                            
0000FB36                            ChkObjectVisible:
0000FB36 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB3A 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB3E 6B00                       		bmi.s	@offscreen
0000FB40 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FB44 6C00                       		bge.s	@offscreen	; if not, branch
0000FB46                            
0000FB46 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FB4A 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FB4E 6B00                       		bmi.s	@offscreen
0000FB50 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FB54 6C00                       		bge.s	@offscreen	; if not, branch
0000FB56                            
0000FB56 7000                       		moveq	#0,d0		; set flag to 0
0000FB58 4E75                       		rts	
0000FB5A                            
0000FB5A                            	@offscreen:
0000FB5A 7001                       		moveq	#1,d0		; set flag to 1
0000FB5C 4E75                       		rts	
0000FB5E                            ; End of function ChkObjectVisible
0000FB5E                            
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            ; Subroutine to	check if an object is off screen
0000FB5E                            ; More precise than above subroutine, taking width into account
0000FB5E                            
0000FB5E                            ; output:
0000FB5E                            ;	d0 = flag set if object is off screen
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            
0000FB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB5E                            
0000FB5E                            
0000FB5E                            ChkPartiallyVisible:
0000FB5E 7200                       		moveq	#0,d1
0000FB60 1228 0014                  		move.b	obActWid(a0),d1
0000FB64 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB68 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB6C D041                       		add.w	d1,d0		; add object width
0000FB6E 6B00                       		bmi.s	@offscreen2
0000FB70 D241                       		add.w	d1,d1
0000FB72 9041                       		sub.w	d1,d0
0000FB74 0C40 0140                  		cmpi.w	#320,d0
0000FB78 6C00                       		bge.s	@offscreen2
0000FB7A                            
0000FB7A 3228 000C                  		move.w	obY(a0),d1
0000FB7E 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FB82 6B00                       		bmi.s	@offscreen2
0000FB84 0C41 00E0                  		cmpi.w	#224,d1
0000FB88 6C00                       		bge.s	@offscreen2
0000FB8A                            
0000FB8A 7000                       		moveq	#0,d0
0000FB8C 4E75                       		rts	
0000FB8E                            
0000FB8E                            	@offscreen2:
0000FB8E 7001                       		moveq	#1,d0
0000FB90 4E75                       		rts	
0000FB92                            ; End of function ChkPartiallyVisible
0000FB92                            ; End of function ChkPartiallyVisible
0000FB92                            
0000FB92                            ; ---------------------------------------------------------------------------
0000FB92                            ; Subroutine to	load a level's objects
0000FB92                            ; ---------------------------------------------------------------------------
0000FB92                            
0000FB92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB92                            
0000FB92                            
0000FB92                            ObjPosLoad:
0000FB92 7000                       		moveq	#0,d0
0000FB94 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FB98 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FB9C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FBA0                            ; End of function ObjPosLoad
0000FBA0                            
0000FBA0                            ; ===========================================================================
0000FBA0 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FBA2 0000                       		dc.w OPL_Next-OPL_Index
0000FBA4                            ; ===========================================================================
0000FBA4                            
0000FBA4                            OPL_Main:
0000FBA4 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FBA8 3038 FE10                  		move.w	(v_zone).w,d0
0000FBAC ED08                       		lsl.b	#6,d0
0000FBAE E848                       		lsr.w	#4,d0
0000FBB0 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FBB6 2248                       		movea.l	a0,a1
0000FBB8 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FBBC 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FBC0 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FBC4 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FBC8 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FBCC 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FBD0 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBD4 34FC 0101                  		move.w	#$101,(a2)+
0000FBD8 303C 005E                  		move.w	#$5E,d0
0000FBDC                            
0000FBDC                            OPL_ClrList:
0000FBDC 429A                       		clr.l	(a2)+
0000FBDE 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FBE2                            
0000FBE2 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBE6 7400                       		moveq	#0,d2
0000FBE8 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FBEC 0446 0080                  		subi.w	#$80,d6
0000FBF0 6400                       		bhs.s	loc_D93C
0000FBF2 7C00                       		moveq	#0,d6
0000FBF4                            
0000FBF4                            loc_D93C:
0000FBF4 0246 FF80                  		andi.w	#$FF80,d6
0000FBF8 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FBFC                            
0000FBFC                            loc_D944:
0000FBFC BC50                       		cmp.w	(a0),d6
0000FBFE 6300                       		bls.s	loc_D956
0000FC00 4A28 0004                  		tst.b	4(a0)
0000FC04 6A00                       		bpl.s	loc_D952
0000FC06 1412                       		move.b	(a2),d2
0000FC08 5212                       		addq.b	#1,(a2)
0000FC0A                            
0000FC0A                            loc_D952:
0000FC0A 5C48                       		addq.w	#6,a0
0000FC0C 60EE                       		bra.s	loc_D944
0000FC0E                            ; ===========================================================================
0000FC0E                            
0000FC0E                            loc_D956:
0000FC0E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC12 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC16 0446 0080                  		subi.w	#$80,d6
0000FC1A 6500                       		blo.s	loc_D976
0000FC1C                            
0000FC1C                            loc_D964:
0000FC1C BC50                       		cmp.w	(a0),d6
0000FC1E 6300                       		bls.s	loc_D976
0000FC20 4A28 0004                  		tst.b	4(a0)
0000FC24 6A00                       		bpl.s	loc_D972
0000FC26 522A 0001                  		addq.b	#1,1(a2)
0000FC2A                            
0000FC2A                            loc_D972:
0000FC2A 5C48                       		addq.w	#6,a0
0000FC2C 60EE                       		bra.s	loc_D964
0000FC2E                            ; ===========================================================================
0000FC2E                            
0000FC2E                            loc_D976:
0000FC2E 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC32 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FC38                            
0000FC38                            OPL_Next:
0000FC38 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC3C 7400                       		moveq	#0,d2
0000FC3E 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FC42 0246 FF80                  		andi.w	#$FF80,d6
0000FC46 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FC4A 6700 0000                  		beq.w	locret_DA3A
0000FC4E 6C00                       		bge.s	loc_D9F6
0000FC50 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FC54 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC58 0446 0080                  		subi.w	#$80,d6
0000FC5C 6500                       		blo.s	loc_D9D2
0000FC5E                            
0000FC5E                            loc_D9A6:
0000FC5E BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC62 6C00                       		bge.s	loc_D9D2
0000FC64 5D48                       		subq.w	#6,a0
0000FC66 4A28 0004                  		tst.b	4(a0)
0000FC6A 6A00                       		bpl.s	loc_D9BC
0000FC6C 532A 0001                  		subq.b	#1,1(a2)
0000FC70 142A 0001                  		move.b	1(a2),d2
0000FC74                            
0000FC74                            loc_D9BC:
0000FC74 6100 0000                  		bsr.w	loc_DA3C
0000FC78 6600                       		bne.s	loc_D9C6
0000FC7A 5D48                       		subq.w	#6,a0
0000FC7C 60E0                       		bra.s	loc_D9A6
0000FC7E                            ; ===========================================================================
0000FC7E                            
0000FC7E                            loc_D9C6:
0000FC7E 4A28 0004                  		tst.b	4(a0)
0000FC82 6A00                       		bpl.s	loc_D9D0
0000FC84 522A 0001                  		addq.b	#1,1(a2)
0000FC88                            
0000FC88                            loc_D9D0:
0000FC88 5C48                       		addq.w	#6,a0
0000FC8A                            
0000FC8A                            loc_D9D2:
0000FC8A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC8E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC92 0646 0300                  		addi.w	#$300,d6
0000FC96                            
0000FC96                            loc_D9DE:
0000FC96 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC9A 6E00                       		bgt.s	loc_D9F0
0000FC9C 4A28 FFFE                  		tst.b	-2(a0)
0000FCA0 6A00                       		bpl.s	loc_D9EC
0000FCA2 5312                       		subq.b	#1,(a2)
0000FCA4                            
0000FCA4                            loc_D9EC:
0000FCA4 5D48                       		subq.w	#6,a0
0000FCA6 60EE                       		bra.s	loc_D9DE
0000FCA8                            ; ===========================================================================
0000FCA8                            
0000FCA8                            loc_D9F0:
0000FCA8 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCAC 4E75                       		rts	
0000FCAE                            ; ===========================================================================
0000FCAE                            
0000FCAE                            loc_D9F6:
0000FCAE 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FCB2 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCB6 0646 0280                  		addi.w	#$280,d6
0000FCBA                            
0000FCBA                            loc_DA02:
0000FCBA BC50                       		cmp.w	(a0),d6
0000FCBC 6300                       		bls.s	loc_DA16
0000FCBE 4A28 0004                  		tst.b	4(a0)
0000FCC2 6A00                       		bpl.s	loc_DA10
0000FCC4 1412                       		move.b	(a2),d2
0000FCC6 5212                       		addq.b	#1,(a2)
0000FCC8                            
0000FCC8                            loc_DA10:
0000FCC8 6100 0000                  		bsr.w	loc_DA3C
0000FCCC 67EC                       		beq.s	loc_DA02
0000FCCE                            
0000FCCE                            loc_DA16:
0000FCCE 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCD2 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCD6 0446 0300                  		subi.w	#$300,d6
0000FCDA 6500                       		blo.s	loc_DA36
0000FCDC                            
0000FCDC                            loc_DA24:
0000FCDC BC50                       		cmp.w	(a0),d6
0000FCDE 6300                       		bls.s	loc_DA36
0000FCE0 4A28 0004                  		tst.b	4(a0)
0000FCE4 6A00                       		bpl.s	loc_DA32
0000FCE6 522A 0001                  		addq.b	#1,1(a2)
0000FCEA                            
0000FCEA                            loc_DA32:
0000FCEA 5C48                       		addq.w	#6,a0
0000FCEC 60EE                       		bra.s	loc_DA24
0000FCEE                            ; ===========================================================================
0000FCEE                            
0000FCEE                            loc_DA36:
0000FCEE 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCF2                            
0000FCF2                            locret_DA3A:
0000FCF2 4E75                       		rts	
0000FCF4                            ; ===========================================================================
0000FCF4                            
0000FCF4                            loc_DA3C:
0000FCF4 4A28 0004                  		tst.b	4(a0)
0000FCF8 6A00                       		bpl.s	OPL_MakeItem
0000FCFA 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FD00 6700                       		beq.s	OPL_MakeItem
0000FD02 5C48                       		addq.w	#6,a0
0000FD04 7000                       		moveq	#0,d0
0000FD06 4E75                       		rts	
0000FD08                            ; ===========================================================================
0000FD08                            
0000FD08                            OPL_MakeItem:
0000FD08 6100 0000                  		bsr.w	FindFreeObj
0000FD0C 6600                       		bne.s	locret_DA8A
0000FD0E 3358 0008                  		move.w	(a0)+,obX(a1)
0000FD12 3018                       		move.w	(a0)+,d0
0000FD14 3200                       		move.w	d0,d1
0000FD16 0240 0FFF                  		andi.w	#$FFF,d0
0000FD1A 3340 000C                  		move.w	d0,obY(a1)
0000FD1E E559                       		rol.w	#2,d1
0000FD20 0201 0003                  		andi.b	#3,d1
0000FD24 1341 0001                  		move.b	d1,obRender(a1)
0000FD28 1341 0022                  		move.b	d1,obStatus(a1)
0000FD2C 1018                       		move.b	(a0)+,d0
0000FD2E 6A00                       		bpl.s	loc_DA80
0000FD30 0200 007F                  		andi.b	#$7F,d0
0000FD34 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FD38                            
0000FD38                            loc_DA80:
0000FD38 1280                       		move.b	d0,0(a1)
0000FD3A 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FD3E 7000                       		moveq	#0,d0
0000FD40                            
0000FD40                            locret_DA8A:
0000FD40 4E75                       		rts	
0000FD42                            
0000FD42                            		include	"_incObj\sub FindFreeObj.asm"
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            ; Subroutine to find a free object space
0000FD42                            
0000FD42                            ; output:
0000FD42                            ;	a1 = free position in object RAM
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            
0000FD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD42                            
0000FD42                            
0000FD42                            FindFreeObj:
0000FD42 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FD46 303C 005F                  		move.w	#$5F,d0
0000FD4A                            
0000FD4A                            	FFree_Loop:
0000FD4A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FD4C 6700                       		beq.s	FFree_Found	; if yes, branch
0000FD4E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FD52 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FD56                            
0000FD56                            	FFree_Found:
0000FD56 4E75                       		rts	
0000FD58                            
0000FD58                            ; End of function FindFreeObj
0000FD58                            
0000FD58                            
0000FD58                            ; ---------------------------------------------------------------------------
0000FD58                            ; Subroutine to find a free object space AFTER the current one
0000FD58                            
0000FD58                            ; output:
0000FD58                            ;	a1 = free position in object RAM
0000FD58                            ; ---------------------------------------------------------------------------
0000FD58                            
0000FD58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD58                            
0000FD58                            
0000FD58                            FindNextFreeObj:
0000FD58 2248                       		movea.l	a0,a1
0000FD5A 303C F000                  		move.w	#$F000,d0
0000FD5E 9048                       		sub.w	a0,d0
0000FD60 EC48                       		lsr.w	#6,d0
0000FD62 5340                       		subq.w	#1,d0
0000FD64 6500                       		bcs.s	NFree_Found
0000FD66                            
0000FD66                            	NFree_Loop:
0000FD66 4A11                       		tst.b	(a1)
0000FD68 6700                       		beq.s	NFree_Found
0000FD6A 43E9 0040                  		lea	$40(a1),a1
0000FD6E 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FD72                            
0000FD72                            	NFree_Found:
0000FD72 4E75                       		rts	
0000FD74                            
0000FD74                            ; End of function FindNextFreeObj
0000FD74                            ; End of function FindNextFreeObj
0000FD74                            		include	"_incObj\41 Springs.asm"
0000FD74                            ; ---------------------------------------------------------------------------
0000FD74                            ; Object 41 - springs
0000FD74                            ; ---------------------------------------------------------------------------
0000FD74                            
0000FD74                            Springs:
0000FD74 7000                       		moveq	#0,d0
0000FD76 1028 0024                  		move.b	obRoutine(a0),d0
0000FD7A 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FD7E 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FD82 6100 FA24                  		bsr.w	DisplaySprite
0000FDA4 4E75                       		rts	
0000FDA6                            ; ===========================================================================
0000FDA6 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FDA8 0000                       		dc.w Spring_Up-Spring_Index
0000FDAA 0000                       		dc.w Spring_AniUp-Spring_Index
0000FDAC 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FDAE 0000                       		dc.w Spring_LR-Spring_Index
0000FDB0 0000                       		dc.w Spring_AniLR-Spring_Index
0000FDB2 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FDB4 0000                       		dc.w Spring_Dwn-Spring_Index
0000FDB6 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FDB8 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FDBA                            
0000FDBA =00000030                  spring_pow:	equ $30			; power of current spring
0000FDBA                            
0000FDBA F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FDBC F600                       		dc.w -$A00		; power	of yellow spring
0000FDBE                            ; ===========================================================================
0000FDBE                            
0000FDBE                            Spring_Main:	; Routine 0
0000FDBE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDC2 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FDCA 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FDD0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FDD6 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FDDC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FDE2 1028 0028                  		move.b	obSubtype(a0),d0
0000FDE6 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FDEA 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FDEC                            
0000FDEC 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FDF2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FDF8 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FDFE 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FE04 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FE0A                            
0000FE0A                            	Spring_NotLR:
0000FE0A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FE0E 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FE10                            
0000FE10 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FE16 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FE1C                            
0000FE1C                            	Spring_NotDwn:
0000FE1C 0800 0001                  		btst	#1,d0
0000FE20 6700                       		beq.s	loc_DB72
0000FE22 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FE28                            
0000FE28                            loc_DB72:
0000FE28 0240 000F                  		andi.w	#$F,d0
0000FE2C 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FE32 4E75                       		rts	
0000FE34                            ; ===========================================================================
0000FE34                            
0000FE34                            Spring_Up:	; Routine 2
0000FE34 323C 001B                  		move.w	#$1B,d1
0000FE38 343C 0008                  		move.w	#8,d2
0000FE3C 363C 0010                  		move.w	#$10,d3
0000FE40 3828 0008                  		move.w	obX(a0),d4
0000FE44 6100 0000                  		bsr.w	SolidObject
0000FE48 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FE4C 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FE4E 4E75                       		rts	
0000FE50                            ; ===========================================================================
0000FE50                            
0000FE50                            Spring_BounceUp:
0000FE50 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE54 5069 000C                  		addq.w	#8,obY(a1)
0000FE58 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FE5E 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FE64 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FE6A 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FE70 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FE76 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FE7C 4228 0025                  		clr.b	obSolid(a0)
0000FE8A                            
0000FE8A                            Spring_AniUp:	; Routine 4
0000FE8A 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FE90 6000 C9CC                  		bra.w	AnimateSprite
0000FE94                            ; ===========================================================================
0000FE94                            
0000FE94                            Spring_ResetUp:	; Routine 6
0000FE94 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FE9A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FE9E 4E75                       		rts	
0000FEA0                            ; ===========================================================================
0000FEA0                            
0000FEA0                            Spring_LR:	; Routine 8
0000FEA0 323C 0013                  		move.w	#$13,d1
0000FEA4 343C 000E                  		move.w	#$E,d2
0000FEA8 363C 000F                  		move.w	#$F,d3
0000FEAC 3828 0008                  		move.w	obX(a0),d4
0000FEB0 6100 0000                  		bsr.w	SolidObject
0000FEB4 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FEBA 6600                       		bne.s	loc_DC0C
0000FEBC 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FEC2                            
0000FEC2                            loc_DC0C:
0000FEC2 0828 0005 0022             		btst	#5,obStatus(a0)
0000FEC8 6600                       		bne.s	Spring_BounceLR
0000FECA 4E75                       		rts	
0000FECC                            ; ===========================================================================
0000FECC                            
0000FECC                            Spring_BounceLR:
0000FECC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FED0 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FED6 5069 0008                  		addq.w	#8,obX(a1)
0000FEDA 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FEE0 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FEE2 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FEE8 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FEEC                            
0000FEEC                            	Spring_Flipped:
0000FEEC 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FEF2 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FEF8 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FEFE 0829 0002 0022             		btst	#2,obStatus(a1)
0000FF04 6600                       		bne.s	loc_DC56
0000FF06 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FF0C                            
0000FF0C                            loc_DC56:
0000FF0C 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FF12 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FF22                            
0000FF22                            Spring_AniLR:	; Routine $A
0000FF22 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FF26 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF2C 6000 C930                  		bra.w	AnimateSprite
0000FF30                            ; ===========================================================================
0000FF30                            
0000FF30                            Spring_ResetLR:	; Routine $C
0000FF30 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FF36 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FF3A 4E75                       		rts	
0000FF3C                            ; ===========================================================================
0000FF3C                            
0000FF3C                            Spring_Dwn:	; Routine $E
0000FF3C 323C 001B                  		move.w	#$1B,d1
0000FF40 343C 0008                  		move.w	#8,d2
0000FF44 363C 0010                  		move.w	#$10,d3
0000FF48 3828 0008                  		move.w	obX(a0),d4
0000FF4C 6100 0000                  		bsr.w	SolidObject
0000FF50 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF56 6600                       		bne.s	loc_DCA4
0000FF58 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FF5E                            
0000FF5E                            loc_DCA4:
0000FF5E 4A28 0025                  		tst.b	obSolid(a0)
0000FF62 6600                       		bne.s	locret_DCAE
0000FF64 4A44                       		tst.w	d4
0000FF66 6B00                       		bmi.s	Spring_BounceDwn
0000FF68                            
0000FF68                            locret_DCAE:
0000FF68 4E75                       		rts	
0000FF6A                            ; ===========================================================================
0000FF6A                            
0000FF6A                            Spring_BounceDwn:
0000FF6A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF6E 5169 000C                  		subq.w	#8,obY(a1)
0000FF72 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FF78 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FF7C 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF82 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF88 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF8E 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF94 4228 0025                  		clr.b	obSolid(a0)
0000FFA2                            
0000FFA2                            Spring_AniDwn:	; Routine $10
0000FFA2 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFA8 6000 C8B4                  		bra.w	AnimateSprite
0000FFAC                            ; ===========================================================================
0000FFAC                            
0000FFAC                            Spring_ResetDwn:
0000FFAC                            		; Routine $12
0000FFAC 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FFB2 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FFB6 4E75                       		rts	
0000FFB6 4E75                       		rts	
0000FFB8                            		include	"_anim\Springs.asm"
0000FFB8                            ; ---------------------------------------------------------------------------
0000FFB8                            ; Animation script - springs
0000FFB8                            ; ---------------------------------------------------------------------------
0000FFB8 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FFBA 0000                       		dc.w byte_DD0E-Ani_Spring
0000FFBC 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FFC8 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FFD4                            		even
0000FFD4                            		even
0000FFD4                            Map_Spring:	include	"_maps\Springs.asm"
0000FFD4                            ; ---------------------------------------------------------------------------
0000FFD4                            ; Sprite mappings - springs
0000FFD4                            ; ---------------------------------------------------------------------------
0000FFD4                            Map_Spring_internal:
0000FFD4 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FFD6 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FFD8 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FFDA 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FFDC 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FFDE 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FFE0 02                         M_Spg_Up:	dc.b 2			; facing up
0000FFE1 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FFE6 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FFEB 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FFEC 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FFF1 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FFF2 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FFF7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FFFC 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
00010001 01                         M_Spg_Left:	dc.b 1			; facing left
00010002 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00010007 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
00010008 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0001000D 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0001000E F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00010013 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00010018 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0001001D 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
00010022                            		even
00010022                            		even
00010022                            
00010022                            		include	"_incObj\42 Newtron.asm"
00010022                            ; ---------------------------------------------------------------------------
00010022                            ; Object 42 - Newtron enemy (GHZ)
00010022                            ; ---------------------------------------------------------------------------
00010022                            
00010022                            Newtron:
00010022 7000                       		moveq	#0,d0
00010024 1028 0024                  		move.b	obRoutine(a0),d0
00010028 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0001002C 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
00010030                            ; ===========================================================================
00010030 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
00010032 0000                       		dc.w Newt_Action-Newt_Index
00010034 0000                       		dc.w Newt_Delete-Newt_Index
00010036                            ; ===========================================================================
00010036                            
00010036                            Newt_Main:	; Routine 0
00010036 5428 0024                  		addq.b	#2,obRoutine(a0)
0001003A 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010042 317C 049B 0002             		move.w	#$49B,obGfx(a0)
00010048 117C 0004 0001             		move.b	#4,obRender(a0)
0001004E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010054 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001005A 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010060 117C 0008 0017             		move.b	#8,obWidth(a0)
00010066                            
00010066                            Newt_Action:	; Routine 2
00010066 7000                       		moveq	#0,d0
00010068 1028 0025                  		move.b	ob2ndRout(a0),d0
0001006C 323B 0000                  		move.w	@index(pc,d0.w),d1
00010070 4EBB 1000                  		jsr	@index(pc,d1.w)
00010074 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001007A 6100 C7E2                  		bsr.w	AnimateSprite
0001007E 6000 0000                  		bra.w	RememberState
00010082                            ; ===========================================================================
00010082 0000                       @index:		dc.w @chkdistance-@index
00010084 0000                       		dc.w @type00-@index
00010086 0000                       		dc.w @matchfloor-@index
00010088 0000                       		dc.w @speed-@index
0001008A 0000                       		dc.w @type01-@index
0001008C                            ; ===========================================================================
0001008C                            
0001008C                            @chkdistance:
0001008C 08E8 0000 0022             		bset	#0,obStatus(a0)
00010092 3038 D008                  		move.w	(v_player+obX).w,d0
00010096 9068 0008                  		sub.w	obX(a0),d0
0001009A 6400                       		bcc.s	@sonicisright
0001009C 4440                       		neg.w	d0
0001009E 08A8 0000 0022             		bclr	#0,obStatus(a0)
000100A4                            
000100A4                            	@sonicisright:
000100A4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
000100A8 6400                       		bcc.s	@outofrange	; if not, branch
000100AA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
000100AE 117C 0001 001C             		move.b	#1,obAnim(a0)
000100B4 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
000100B8 6700                       		beq.s	@istype00	; if type is 00, branch
000100BA                            
000100BA 317C 249B 0002             		move.w	#$249B,obGfx(a0)
000100C0 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
000100C6 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
000100CC                            
000100CC                            	@outofrange:
000100CC                            	@istype00:
000100CC 4E75                       		rts	
000100CE                            ; ===========================================================================
000100CE                            
000100CE                            @type00:
000100CE 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
000100D4 6400                       		bcc.s	@fall		; is yes, branch
000100D6 08E8 0000 0022             		bset	#0,obStatus(a0)
000100DC 3038 D008                  		move.w	(v_player+obX).w,d0
000100E0 9068 0008                  		sub.w	obX(a0),d0
000100E4 6400                       		bcc.s	@sonicisright2
000100E6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000100EC                            
000100EC                            	@sonicisright2:
000100EC 4E75                       		rts	
000100EE                            ; ===========================================================================
000100EE                            
000100EE                            	@fall:
000100EE 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000100F4 6600                       		bne.s	@loc_DE42
000100F6 117C 000C 0020             		move.b	#$C,obColType(a0)
000100FC                            
000100FC                            	@loc_DE42:
000100FC 6100 F65E                  		bsr.w	ObjectFall
00010100 4EB9 0000 0000             		jsr		ObjFloorDist
00010106 4A41                       		tst.w	d1		; has newtron hit the floor?
00010108 6A00                       		bpl.s	@keepfalling	; if not, branch
0001010A                            
0001010A D368 000C                  		add.w	d1,obY(a0)
0001010E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
00010114 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010118 117C 0002 001C             		move.b	#2,obAnim(a0)
0001011E 0828 0005 0002             		btst	#5,obGfx(a0)
00010124 6700                       		beq.s	@pppppppp
00010126 5228 001C                  		addq.b	#1,obAnim(a0)
0001012A                            
0001012A                            	@pppppppp:
0001012A 117C 000D 0020             		move.b	#$D,obColType(a0)
00010130 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
00010136 0828 0000 0022             		btst	#0,obStatus(a0)
0001013C 6600                       		bne.s	@keepfalling
0001013E 4468 0010                  		neg.w	obVelX(a0)
00010142                            
00010142                            	@keepfalling:
00010142 4E75                       		rts	
00010144                            ; ===========================================================================
00010144                            
00010144                            @matchfloor:
00010144 6100 F64E                  		bsr.w	SpeedToPos
00010148 4EB9 0000 0000             		jsr		ObjFloorDist
0001014E 0C41 FFF8                  		cmpi.w	#-8,d1
00010152 6D00                       		blt.s	@nextroutine
00010154 0C41 000C                  		cmpi.w	#$C,d1
00010158 6C00                       		bge.s	@nextroutine
0001015A D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0001015E 4E75                       		rts	
00010160                            ; ===========================================================================
00010160                            
00010160                            	@nextroutine:
00010160 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010164 4E75                       		rts	
00010166                            ; ===========================================================================
00010166                            
00010166                            @speed:
00010166 6100 F62C                  		bsr.w	SpeedToPos
0001016A 4E75                       		rts	
0001016C                            ; ===========================================================================
0001016C                            
0001016C                            @type01:
0001016C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010172 6600                       		bne.s	@firemissile
00010174 117C 000C 0020             		move.b	#$C,obColType(a0)
0001017A                            
0001017A                            	@firemissile:
0001017A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010180 6600                       		bne.s	@fail
00010182 4A28 0032                  		tst.b	$32(a0)
00010186 6600                       		bne.s	@fail
00010188 117C 0001 0032             		move.b	#1,$32(a0)
0001018E 6100 FBB2                  		bsr.w	FindFreeObj
00010192 6600                       		bne.s	@fail
00010194 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010198 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001019E 3368 000C 000C             		move.w	obY(a0),obY(a1)
000101A4 5169 000C                  		subq.w	#8,obY(a1)
000101A8 337C 0200 0010             		move.w	#$200,obVelX(a1)
000101AE 303C 0014                  		move.w	#$14,d0
000101B2 0828 0000 0022             		btst	#0,obStatus(a0)
000101B8 6600                       		bne.s	@noflip
000101BA 4440                       		neg.w	d0
000101BC 4469 0010                  		neg.w	obVelX(a1)
000101C0                            
000101C0                            	@noflip:
000101C0 D169 0008                  		add.w	d0,obX(a1)
000101C4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000101CA 137C 0001 0028             		move.b	#1,obSubtype(a1)
000101D0                            
000101D0                            	@fail:
000101D0 4E75                       		rts	
000101D2                            ; ===========================================================================
000101D2                            
000101D2                            Newt_Delete:	; Routine 4
000101D2 6000 F614                  		bra.w	DeleteObject
000101D2 6000 F614                  		bra.w	DeleteObject
000101D6                            		include	"_anim\Newtron.asm"
000101D6                            ; ---------------------------------------------------------------------------
000101D6                            ; Animation script - Newtron enemy
000101D6                            ; ---------------------------------------------------------------------------
000101D6 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
000101D8 0000                       		dc.w A_Newt_Drop-Ani_Newt
000101DA 0000                       		dc.w A_Newt_Fly1-Ani_Newt
000101DC 0000                       		dc.w A_Newt_Fly2-Ani_Newt
000101DE 0000                       		dc.w A_Newt_Fires-Ani_Newt
000101E0 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000101E4 00                         		even
000101E4 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000101EC 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000101F0 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000101F4 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000101FE 00                         		even
000101FE 00                         		even
000101FE                            Map_Newt:	include	"_maps\Newtron.asm"
000101FE                            ; ---------------------------------------------------------------------------
000101FE                            ; Sprite mappings - Newtron enemy (GHZ)
000101FE                            ; ---------------------------------------------------------------------------
000101FE                            Map_Newt_internal:
000101FE 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010200 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
00010202 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
00010204 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
00010206 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
00010208 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0001020A 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0001020C 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0001020E 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010210 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
00010212 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
00010214 03                         M_Newt_Trans:	dc.b 3
00010215 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0001021A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0001021F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010224 03                         M_Newt_Norm:	dc.b 3
00010225 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0001022A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001022F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010234 03                         M_Newt_Fires:	dc.b 3
00010235 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001023A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001023F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010244 04                         M_Newt_Drop1:	dc.b 4
00010245 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001024A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001024F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010254 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010259 03                         M_Newt_Drop2:	dc.b 3
0001025A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001025F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010264 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00010269 02                         M_Newt_Drop3:	dc.b 2
0001026A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001026F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010274 03                         M_Newt_Fly1a:	dc.b 3
00010275 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001027A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001027F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010284 03                         M_Newt_Fly1b:	dc.b 3
00010285 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001028A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001028F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010294 03                         M_Newt_Fly2a:	dc.b 3
00010295 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001029A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001029F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000102A4 03                         M_Newt_Fly2b:	dc.b 3
000102A5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000102AA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102AF FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
000102B4 00                         M_Newt_Blank:	dc.b 0
000102B6 00                         		even
000102B6 00                         		even
000102B6                            		include	"_incObj\43 Roller.asm"
000102B6                            ; ---------------------------------------------------------------------------
000102B6                            ; Object 43 - Roller enemy (SYZ)
000102B6                            ; ---------------------------------------------------------------------------
000102B6                            
000102B6                            Roller:
000102B6 7000                       		moveq	#0,d0
000102B8 1028 0024                  		move.b	obRoutine(a0),d0
000102BC 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
000102C0 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
000102C4                            ; ===========================================================================
000102C4 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
000102C6 0000                       		dc.w Roll_Action-Roll_Index
000102C8                            ; ===========================================================================
000102C8                            
000102C8                            Roll_Main:	; Routine 0
000102C8 117C 000E 0016             		move.b	#$E,obHeight(a0)
000102CE 117C 0008 0017             		move.b	#8,obWidth(a0)
000102D4 6100 F486                  		bsr.w	ObjectFall
000102D8 4EB9 0000 0000             		jsr	ObjFloorDist
000102DE 4A41                       		tst.w	d1
000102E0 6A00                       		bpl.s	locret_E052
000102E2 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000102E6 317C 0000 0012             		move.w	#0,obVelY(a0)
000102EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000102F0 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000102F8 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000102FE 117C 0004 0001             		move.b	#4,obRender(a0)
00010304 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001030A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010310                            
00010310                            	locret_E052:
00010310 4E75                       		rts	
00010312                            ; ===========================================================================
00010312                            
00010312                            Roll_Action:	; Routine 2
00010312 7000                       		moveq	#0,d0
00010314 1028 0025                  		move.b	ob2ndRout(a0),d0
00010318 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0001031C 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
00010320 43F9 0000 0000             		lea	(Ani_Roll).l,a1
00010326 6100 C536                  		bsr.w	AnimateSprite
0001032A 3028 0008                  		move.w	obX(a0),d0
0001032E 0240 FF80                  		andi.w	#$FF80,d0
00010332 3238 F700                  		move.w	(v_screenposx).w,d1
00010336 0441 0080                  		subi.w	#$80,d1
0001033A 0241 FF80                  		andi.w	#$FF80,d1
0001033E 9041                       		sub.w	d1,d0
00010340 0C40 0280                  		cmpi.w	#$280,d0
00010344 6E00 0000                  		bgt.w	Roll_ChkGone
00010348 6000 F45E                  		bra.w	DisplaySprite
0001034C                            ; ===========================================================================
0001034C                            
0001034C                            Roll_ChkGone:
0001034C 45F8 FC00                  		lea	(v_objstate).w,a2
00010350 7000                       		moveq	#0,d0
00010352 1028 0023                  		move.b	obRespawnNo(a0),d0
00010356 6700                       		beq.s	Roll_Delete
00010358 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001035E                            
0001035E                            Roll_Delete:
0001035E 6000 F488                  		bra.w	DeleteObject
00010362                            ; ===========================================================================
00010362 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010364 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010366 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010368 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001036A                            ; ===========================================================================
0001036A                            
0001036A                            Roll_RollChk:
0001036A 3038 D008                  		move.w	(v_player+obX).w,d0
0001036E 0440 0100                  		subi.w	#$100,d0
00010372 6500                       		bcs.s	loc_E0D2
00010374 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010378 6500                       		bcs.s	loc_E0D2
0001037A 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001037E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010384 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001038A 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010390                            
00010390                            loc_E0D2:
00010390 588F                       		addq.l	#4,sp
00010392 4E75                       		rts	
00010394                            ; ===========================================================================
00010394                            
00010394                            Roll_RollNoChk:
00010394 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001039A 6700                       		beq.s	loc_E0F8
0001039C 5368 0030                  		subq.w	#1,$30(a0)
000103A0 6A00                       		bpl.s	locret_E0F6
000103A2 117C 0001 001C             		move.b	#1,obAnim(a0)
000103A8 317C 0700 0010             		move.w	#$700,obVelX(a0)
000103AE 117C 008E 0020             		move.b	#$8E,obColType(a0)
000103B4                            
000103B4                            locret_E0F6:
000103B4 4E75                       		rts	
000103B6                            ; ===========================================================================
000103B6                            
000103B6                            loc_E0F8:
000103B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000103BA 4E75                       		rts	
000103BC                            ; ===========================================================================
000103BC                            
000103BC                            Roll_ChkJump:
000103BC 6100 0000                  		bsr.w	Roll_Stop
000103C0 6100 F3D2                  		bsr.w	SpeedToPos
000103C4 4EB9 0000 0000             		jsr	ObjFloorDist
000103CA 0C41 FFF8                  		cmpi.w	#-8,d1
000103CE 6D00                       		blt.s	Roll_Jump
000103D0 0C41 000C                  		cmpi.w	#$C,d1
000103D4 6C00                       		bge.s	Roll_Jump
000103D6 D368 000C                  		add.w	d1,obY(a0)
000103DA 4E75                       		rts	
000103DC                            ; ===========================================================================
000103DC                            
000103DC                            Roll_Jump:
000103DC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000103E0 08E8 0000 0032             		bset	#0,$32(a0)
000103E6 6700                       		beq.s	locret_E12E
000103E8 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000103EE                            
000103EE                            locret_E12E:
000103EE 4E75                       		rts	
000103F0                            ; ===========================================================================
000103F0                            
000103F0                            Roll_MatchFloor:
000103F0 6100 F36A                  		bsr.w	ObjectFall
000103F4 4A68 0012                  		tst.w	obVelY(a0)
000103F8 6B00                       		bmi.s	locret_E150
000103FA 4EB9 0000 0000             		jsr	ObjFloorDist
00010400 4A41                       		tst.w	d1
00010402 6A00                       		bpl.s	locret_E150
00010404 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
00010408 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001040C 317C 0000 0012             		move.w	#0,obVelY(a0)
00010412                            
00010412                            locret_E150:
00010412 4E75                       		rts	
00010414                            
00010414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010414                            
00010414                            
00010414                            Roll_Stop:
00010414 4A28 0032                  		tst.b	$32(a0)
00010418 6B00                       		bmi.s	locret_E188
0001041A 3038 D008                  		move.w	(v_player+obX).w,d0
0001041E 0440 0030                  		subi.w	#$30,d0
00010422 9068 0008                  		sub.w	obX(a0),d0
00010426 6400                       		bcc.s	locret_E188
00010428 117C 0000 001C             		move.b	#0,obAnim(a0)
0001042E 117C 000E 0020             		move.b	#$E,obColType(a0)
00010434 4268 0010                  		clr.w	obVelX(a0)
00010438 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0001043E 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010444 08E8 0007 0032             		bset	#7,$32(a0)
0001044A                            
0001044A                            locret_E188:
0001044A 4E75                       		rts	
0001044C                            ; End of function Roll_Stop
0001044C                            ; End of function Roll_Stop
0001044C                            		include	"_anim\Roller.asm"
0001044C                            ; ---------------------------------------------------------------------------
0001044C                            ; Animation script - Roller enemy
0001044C                            ; ---------------------------------------------------------------------------
0001044C 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
0001044E 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010450 0000                       		dc.w A_Roll_Roll-Ani_Roll
00010452 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010458 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0001045E 00                         		even
0001045E 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010464 00                         		even
00010464 00                         		even
00010464                            Map_Roll:	include	"_maps\Roller.asm"
00010464                            ; --------------------------------------------------------------------------------
00010464                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010464                            ; --------------------------------------------------------------------------------
00010464                            
00010464                            SME_q3BmU:	
00010464 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010468 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
0001046C 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
0001046E 02                         SME_q3BmU_A:	dc.b 2	
0001046F DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010474 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010479 02                         SME_q3BmU_15:	dc.b 2	
0001047A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001047F FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010484 01                         SME_q3BmU_20:	dc.b 1	
00010485 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
0001048A 01                         SME_q3BmU_26:	dc.b 1	
0001048B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010490 01                         SME_q3BmU_2C:	dc.b 1	
00010491 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010496                            		even
00010496                            		even
00010496                            
00010496                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010496                            ; ---------------------------------------------------------------------------
00010496                            ; Object 44 - edge walls (GHZ)
00010496                            ; ---------------------------------------------------------------------------
00010496                            
00010496                            EdgeWalls:
00010496 7000                       		moveq	#0,d0
00010498 1028 0024                  		move.b	obRoutine(a0),d0
0001049C 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
000104A0 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
000104A4                            ; ===========================================================================
000104A4 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
000104A6 0000                       		dc.w Edge_Solid-Edge_Index
000104A8 0000                       		dc.w Edge_Display-Edge_Index
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Edge_Main:	; Routine 0
000104AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000104AE 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
000104B6 317C 434C 0002             		move.w	#$434C,obGfx(a0)
000104BC 0028 0004 0001             		ori.b	#4,obRender(a0)
000104C2 117C 0008 0014             		move.b	#8,obActWid(a0)
000104C8 317C 0300 0018             		move.w	#$300,obPriority(a0)
000104CE 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
000104D4 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000104DA 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000104DC 5428 0024                  		addq.b	#2,obRoutine(a0)
000104E0 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000104E2                            ; ===========================================================================
000104E2                            
000104E2                            Edge_Solid:	; Routine 2
000104E2 323C 0013                  		move.w	#$13,d1
000104E6 343C 0028                  		move.w	#$28,d2
000104EA 6100 9FC4                  		bsr.w	Obj44_SolidWall
000104EE                            
000104EE                            Edge_Display:	; Routine 4
000104EE 6100 F2B8                  		bsr.w	DisplaySprite
00010510 4E75                       		rts	
00010510 4E75                       		rts	
00010512                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010512                            ; ---------------------------------------------------------------------------
00010512                            ; Sprite mappings - walls (GHZ)
00010512                            ; ---------------------------------------------------------------------------
00010512                            Map_Edge_internal:
00010512 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010514 0000                       		dc.w M_Edge_Light-Map_Edge_internal
00010516 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
00010518 04                         M_Edge_Shadow:	dc.b 4
00010519 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
0001051E F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010523 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010528 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001052D 04                         M_Edge_Light:	dc.b 4
0001052E E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
00010533 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010538 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001053D 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010542 04                         M_Edge_Dark:	dc.b 4
00010543 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010548 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0001054D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00010552 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010558 00                         		even
00010558 00                         		even
00010558                            
00010558                            		include	"_incObj\13 Lava Ball Maker.asm"
00010558                            ; ---------------------------------------------------------------------------
00010558                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010558                            ; ---------------------------------------------------------------------------
00010558                            
00010558                            LavaMaker:
00010558 7000                       		moveq	#0,d0
0001055A 1028 0024                  		move.b	obRoutine(a0),d0
0001055E 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
00010562 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010566 6000 0000                  		bra.w	LBall_ChkDel
0001056A                            ; ===========================================================================
0001056A 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
0001056C 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0001056E                            ; ---------------------------------------------------------------------------
0001056E                            ;
0001056E                            ; Lava ball production rates
0001056E                            ;
0001056E 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010574                            ; ===========================================================================
00010574                            
00010574                            LavaM_Main:	; Routine 0
00010574 5428 0024                  		addq.b	#2,obRoutine(a0)
00010578 1028 0028                  		move.b	obSubtype(a0),d0
0001057C E848                       		lsr.w	#4,d0
0001057E 0240 000F                  		andi.w	#$F,d0
00010582 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010588 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001058E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010594                            
00010594                            LavaM_MakeLava:	; Routine 2
00010594 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010598 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
0001059A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
000105A0 6100 F594                  		bsr.w	ChkObjectVisible
000105A4 6600                       		bne.s	LavaM_Wait
000105A6 6100 F79A                  		bsr.w	FindFreeObj
000105AA 6600                       		bne.s	LavaM_Wait
000105AC 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
000105B0 3368 0008 0008             		move.w	obX(a0),obX(a1)
000105B6 3368 000C 000C             		move.w	obY(a0),obY(a1)
000105BC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000105C2                            
000105C2                            	LavaM_Wait:
000105C2 4E75                       		rts	
000105C2 4E75                       		rts	
000105C4                            		include	"_incObj\14 Lava Ball.asm"
000105C4                            ; ---------------------------------------------------------------------------
000105C4                            ; Object 14 - lava balls (MZ, SLZ)
000105C4                            ; ---------------------------------------------------------------------------
000105C4                            
000105C4                            LavaBall:
000105C4 7000                       		moveq	#0,d0
000105C6 1028 0024                  		move.b	obRoutine(a0),d0
000105CA 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
000105CE 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
000105D2 6000 F1D4                  		bra.w	DisplaySprite
000105D6                            ; ===========================================================================
000105D6 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000105D8 0000                       		dc.w LBall_Action-LBall_Index
000105DA 0000                       		dc.w LBall_Delete-LBall_Index
000105DC                            
000105DC FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000105E6 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000105EE                            ; ===========================================================================
000105EE                            
000105EE                            LBall_Main:	; Routine 0
000105EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000105F2 117C 0008 0016             		move.b	#8,obHeight(a0)
000105F8 117C 0008 0017             		move.b	#8,obWidth(a0)
000105FE 217C 0000 D4B0 0004        		move.l	#Map_Fire,obMap(a0)
00010606 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001060C 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010612 6600                       		bne.s	@notSLZ
00010614 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
0001061A                            
0001061A                            	@notSLZ:
0001061A 117C 0004 0001             		move.b	#4,obRender(a0)
00010620 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010626 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001062C 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010632 4A28 0029                  		tst.b	$29(a0)
00010636 6700                       		beq.s	@speed
00010638 5428 0018                  		addq.b	#2,obPriority(a0)
0001063C                            
0001063C                            	@speed:
0001063C 7000                       		moveq	#0,d0
0001063E 1028 0028                  		move.b	obSubtype(a0),d0
00010642 D040                       		add.w	d0,d0
00010644 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
0001064A 117C 0008 0014             		move.b	#8,obActWid(a0)
00010650 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010656 6500                       		bcs.s	@sound		; if yes, branch
00010658                            
00010658 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001065E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010664 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
0001066A 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010670                            
00010670                            	@sound:
0001067A                            
0001067A                            LBall_Action:	; Routine 2
0001067A 7000                       		moveq	#0,d0
0001067C 1028 0028                  		move.b	obSubtype(a0),d0
00010680 D040                       		add.w	d0,d0
00010682 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010686 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
0001068A 6100 F108                  		bsr.w	SpeedToPos
0001068E 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010694 6100 C1C8                  		bsr.w	AnimateSprite
00010698                            
00010698                            LBall_ChkDel:
000106B6 4E75                       		rts	
000106B8                            ; ===========================================================================
000106B8 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000106BC 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000106C0 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
000106C4 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
000106C8 0000                       		dc.w LBall_Type08-LBall_TypeIndex
000106CA                            ; ===========================================================================
000106CA                            ; lavaball types 00-03 fly up and fall back down
000106CA                            
000106CA                            LBall_Type00:
000106CA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
000106D0 3028 0030                  		move.w	$30(a0),d0
000106D4 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000106D8 6400                       		bcc.s	loc_E41E	; if not, branch
000106DA 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000106DE                            
000106DE                            loc_E41E:
000106DE 08A8 0001 0022             		bclr	#1,obStatus(a0)
000106E4 4A68 0012                  		tst.w	obVelY(a0)
000106E8 6A00                       		bpl.s	locret_E430
000106EA 08E8 0001 0022             		bset	#1,obStatus(a0)
000106F0                            
000106F0                            locret_E430:
000106F0 4E75                       		rts	
000106F2                            ; ===========================================================================
000106F2                            ; lavaball type	04 flies up until it hits the ceiling
000106F2                            
000106F2                            LBall_Type04:
000106F2 08E8 0001 0022             		bset	#1,obStatus(a0)
000106F8 4EB9 0000 0000             		jsr	ObjHitCeiling
000106FE 4A41                       		tst.w	d1
00010700 6A00                       		bpl.s	locret_E452
00010702 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010708 117C 0001 001C             		move.b	#1,obAnim(a0)
0001070E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010714                            
00010714                            locret_E452:
00010714 4E75                       		rts	
00010716                            ; ===========================================================================
00010716                            ; lavaball type	05 falls down until it hits the	floor
00010716                            
00010716                            LBall_Type05:
00010716 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001071C 4EB9 0000 0000             		jsr	ObjFloorDist
00010722 4A41                       		tst.w	d1
00010724 6A00                       		bpl.s	locret_E474
00010726 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001072C 117C 0001 001C             		move.b	#1,obAnim(a0)
00010732 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
00010738                            
00010738                            locret_E474:
00010738 4E75                       		rts	
0001073A                            ; ===========================================================================
0001073A                            ; lavaball types 06-07 move sideways
0001073A                            
0001073A                            LBall_Type06:
0001073A 08E8 0000 0022             		bset	#0,obStatus(a0)
00010740 76F8                       		moveq	#-8,d3
00010742 4EB9 0000 0000             		jsr	ObjHitWallLeft
00010748 4A41                       		tst.w	d1
0001074A 6A00                       		bpl.s	locret_E498
0001074C 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010752 117C 0003 001C             		move.b	#3,obAnim(a0)
00010758 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0001075E                            
0001075E                            locret_E498:
0001075E 4E75                       		rts	
00010760                            ; ===========================================================================
00010760                            
00010760                            LBall_Type07:
00010760 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010766 7608                       		moveq	#8,d3
00010768 4EB9 0000 0000             		jsr	ObjHitWallRight
0001076E 4A41                       		tst.w	d1
00010770 6A00                       		bpl.s	locret_E4BC
00010772 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010778 117C 0003 001C             		move.b	#3,obAnim(a0)
0001077E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010784                            
00010784                            locret_E4BC:
00010784 4E75                       		rts	
00010786                            ; ===========================================================================
00010786                            
00010786                            LBall_Type08:
00010786 4E75                       		rts	
00010788                            ; ===========================================================================
00010788                            
00010788                            LBall_Delete:
00010788 6000 F05E                  		bra.w	DeleteObject
00010788 6000 F05E                  		bra.w	DeleteObject
0001078C                            		include	"_anim\Fireballs.asm"
0001078C                            ; ---------------------------------------------------------------------------
0001078C                            ; Animation script - lava balls
0001078C                            ; ---------------------------------------------------------------------------
0001078C 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
0001078E 0000                       		dc.w @vertcollide-Ani_Fire
00010790 0000                       		dc.w @horizontal-Ani_Fire
00010792 0000                       		dc.w @horicollide-Ani_Fire
00010794 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001079A 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0001079E 00                         		even
0001079E 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000107A4 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
000107A8 00                         		even
000107A8 00                         		even
000107A8                            
000107A8                            		include	"_incObj\6D Flamethrower.asm"
000107A8                            ; ---------------------------------------------------------------------------
000107A8                            ; Object 6D - flame thrower (SBZ)
000107A8                            ; ---------------------------------------------------------------------------
000107A8                            
000107A8                            Flamethrower:
000107A8 7000                       		moveq	#0,d0
000107AA 1028 0024                  		move.b	obRoutine(a0),d0
000107AE 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
000107B2 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
000107B6                            ; ===========================================================================
000107B6 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
000107B8 0000                       		dc.w Flame_Action-Flame_Index
000107BA                            ; ===========================================================================
000107BA                            
000107BA                            Flame_Main:	; Routine 0
000107BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000107BE 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
000107C6 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
000107CC 0028 0004 0001             		ori.b	#4,obRender(a0)
000107D2 317C 0080 0018             		move.w	#$80,obPriority(a0)
000107D8 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
000107DE 117C 000C 0014             		move.b	#$C,obActWid(a0)
000107E4 1028 0028                  		move.b	obSubtype(a0),d0
000107E8 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000107EC D040                       		add.w	d0,d0		; multiply by 2
000107EE 3140 0030                  		move.w	d0,$30(a0)
000107F2 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000107F6 1028 0028                  		move.b	obSubtype(a0),d0
000107FA 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000107FE EB48                       		lsl.w	#5,d0		; multiply by $20
00010800 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010804 117C 000A 0036             		move.b	#$A,$36(a0)
0001080A 0828 0001 0022             		btst	#1,obStatus(a0)
00010810 6700                       		beq.s	Flame_Action
00010812 117C 0002 001C             		move.b	#2,obAnim(a0)
00010818 117C 0015 0036             		move.b	#$15,$36(a0)
0001081E                            
0001081E                            Flame_Action:	; Routine 2
0001081E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010822 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010824 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001082A 0868 0000 001C             		bchg	#0,obAnim(a0)
00010830 6700                       		beq.s	loc_E57A
00010832 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010842                            
00010842                            loc_E57A:
00010842 43F9 0000 0000             		lea	(Ani_Flame).l,a1
00010848 6100 C014                  		bsr.w	AnimateSprite
0001084C 117C 0000 0020             		move.b	#0,obColType(a0)
00010852 1028 0036                  		move.b	$36(a0),d0
00010856 B028 001A                  		cmp.b	obFrame(a0),d0
0001085A 6600                       		bne.s	Flame_ChkDel
0001085C 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010862                            
00010862                            Flame_ChkDel:
00010880 6000 EF26                  		bra.w	DisplaySprite
00010880 6000 EF26                  		bra.w	DisplaySprite
00010884                            		include	"_anim\Flamethrower.asm"
00010884                            ; ---------------------------------------------------------------------------
00010884                            ; Animation script - flamethrower (SBZ)
00010884                            ; ---------------------------------------------------------------------------
00010884 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010886 0000                       		dc.w @pipe2-Ani_Flame
00010888 0000                       		dc.w @valve1-Ani_Flame
0001088A 0000                       		dc.w @valve2-Ani_Flame
0001088C 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001089A 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000108A4 00                         		even
000108A4 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
000108B2 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
000108BC 00                         		even
000108BC 00                         		even
000108BC                            Map_Flame:	include	"_maps\Flamethrower.asm"
000108BC                            ; ---------------------------------------------------------------------------
000108BC                            ; Sprite mappings - flame thrower (SBZ)
000108BC                            ; ---------------------------------------------------------------------------
000108BC                            Map_Flame_internal:
000108BC 0000                       		dc.w @pipe1-Map_Flame_internal
000108BE 0000                       		dc.w @pipe2-Map_Flame_internal
000108C0 0000                       		dc.w @pipe3-Map_Flame_internal
000108C2 0000                       		dc.w @pipe4-Map_Flame_internal
000108C4 0000                       		dc.w @pipe5-Map_Flame_internal
000108C6 0000                       		dc.w @pipe6-Map_Flame_internal
000108C8 0000                       		dc.w @pipe7-Map_Flame_internal
000108CA 0000                       		dc.w @pipe8-Map_Flame_internal
000108CC 0000                       		dc.w @pipe9-Map_Flame_internal
000108CE 0000                       		dc.w @pipe10-Map_Flame_internal
000108D0 0000                       		dc.w @pipe11-Map_Flame_internal
000108D2 0000                       		dc.w @valve1-Map_Flame_internal
000108D4 0000                       		dc.w @valve2-Map_Flame_internal
000108D6 0000                       		dc.w @valve3-Map_Flame_internal
000108D8 0000                       		dc.w @valve4-Map_Flame_internal
000108DA 0000                       		dc.w @valve5-Map_Flame_internal
000108DC 0000                       		dc.w @valve6-Map_Flame_internal
000108DE 0000                       		dc.w @valve7-Map_Flame_internal
000108E0 0000                       		dc.w @valve8-Map_Flame_internal
000108E2 0000                       		dc.w @valve9-Map_Flame_internal
000108E4 0000                       		dc.w @valve10-Map_Flame_internal
000108E6 0000                       		dc.w @valve11-Map_Flame_internal
000108E8 01                         @pipe1:		dc.b 1
000108E9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000108EE 02                         @pipe2:		dc.b 2
000108EF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108F4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108F9 02                         @pipe3:		dc.b 2
000108FA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108FF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010904 03                         @pipe4:		dc.b 3
00010905 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001090A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001090F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010914 03                         @pipe5:		dc.b 3
00010915 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001091A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001091F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010924 04                         @pipe6:		dc.b 4
00010925 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001092A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001092F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010934 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010939 04                         @pipe7:		dc.b 4
0001093A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001093F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010944 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010949 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001094E 05                         @pipe8:		dc.b 5
0001094F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010954 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010959 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001095E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010963 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010968 05                         @pipe9:		dc.b 5
00010969 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001096E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010973 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010978 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001097D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010982 06                         @pipe10:	dc.b 6
00010983 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010988 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001098D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010992 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010997 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001099C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109A1 06                         @pipe11:	dc.b 6
000109A2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000109A7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000109AC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000109B1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109B6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109BB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C0 01                         @valve1:	dc.b 1
000109C1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
000109C6 02                         @valve2:	dc.b 2
000109C7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109CC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109D1 02                         @valve3:	dc.b 2
000109D2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109D7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109DC 03                         @valve4:	dc.b 3
000109DD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109E2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109E7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109EC 03                         @valve5:	dc.b 3
000109ED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109F2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109F7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109FC 04                         @valve6:	dc.b 4
000109FD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A02 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A07 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A0C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A11 04                         @valve7:	dc.b 4
00010A12 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A17 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A1C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A21 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A26 05                         @valve8:	dc.b 5
00010A27 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A2C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A31 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A36 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A3B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A40 05                         @valve9:	dc.b 5
00010A41 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A46 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A4B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A50 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A55 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A5A 06                         @valve10:	dc.b 6
00010A5B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A60 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A65 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A6A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A6F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A74 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A79 06                         @valve11:	dc.b 6
00010A7A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A7F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A84 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A89 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A8E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A93 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A98                            		even
00010A98                            		even
00010A98                            
00010A98                            		include	"_incObj\46 MZ Bricks.asm"
00010A98                            ; ---------------------------------------------------------------------------
00010A98                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010A98                            ; ---------------------------------------------------------------------------
00010A98                            
00010A98                            MarbleBrick:
00010A98 7000                       		moveq	#0,d0
00010A9A 1028 0024                  		move.b	obRoutine(a0),d0
00010A9E 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010AA2 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010AA6                            ; ===========================================================================
00010AA6 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010AA8 0000                       		dc.w Brick_Action-Brick_Index
00010AAA                            
00010AAA =00000030                  brick_origY:	equ $30
00010AAA                            ; ===========================================================================
00010AAA                            
00010AAA                            Brick_Main:	; Routine 0
00010AAA 5428 0024                  		addq.b	#2,obRoutine(a0)
00010AAE 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010AB4 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010ABA 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010AC2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010AC8 117C 0004 0001             		move.b	#4,obRender(a0)
00010ACE 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010AD4 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010ADA 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010AE0 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010AE6                            
00010AE6                            Brick_Action:	; Routine 2
00010AE6 4A28 0001                  		tst.b	obRender(a0)
00010AEA 6A00                       		bpl.s	@chkdel
00010AEC 7000                       		moveq	#0,d0
00010AEE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010AF2 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010AF6 D040                       		add.w	d0,d0
00010AF8 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010AFC 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010B00 323C 001B                  		move.w	#$1B,d1
00010B04 343C 0010                  		move.w	#$10,d2
00010B08 363C 0011                  		move.w	#$11,d3
00010B0C 3828 0008                  		move.w	obX(a0),d4
00010B10 6100 0000                  		bsr.w	SolidObject
00010B14                            
00010B14                            	@chkdel:
00010B32 6000 EC74                  			bra.w	DisplaySprite
00010B36                            ; ===========================================================================
00010B36 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010B38 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010B3A 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010B3C 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010B3E 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010B40                            ; ===========================================================================
00010B40                            
00010B40                            Brick_Type00:
00010B40 4E75                       		rts	
00010B42                            ; ===========================================================================
00010B42                            
00010B42                            Brick_Type02:
00010B42 3038 D008                  		move.w	(v_player+obX).w,d0
00010B46 9068 0008                  		sub.w	obX(a0),d0
00010B4A 6400                       		bcc.s	loc_E888
00010B4C 4440                       		neg.w	d0
00010B4E                            
00010B4E                            loc_E888:
00010B4E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010B52 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010B54 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010B5A                            
00010B5A                            Brick_Type01:
00010B5A 7000                       		moveq	#0,d0
00010B5C 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010B60 0828 0003 0028             		btst	#3,obSubtype(a0)
00010B66 6700                       		beq.s	loc_E8A8
00010B68 4440                       		neg.w	d0
00010B6A 0640 0010                  		addi.w	#$10,d0
00010B6E                            
00010B6E                            loc_E8A8:
00010B6E 3228 0030                  		move.w	brick_origY(a0),d1
00010B72 9240                       		sub.w	d0,d1
00010B74 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010B78 4E75                       		rts	
00010B7A                            ; ===========================================================================
00010B7A                            
00010B7A                            Brick_Type03:
00010B7A 6100 EC18                  		bsr.w	SpeedToPos
00010B7E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010B84 6100 0000                  		bsr.w	ObjFloorDist
00010B88 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010B8A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010B8E D368 000C                  		add.w	d1,obY(a0)
00010B92 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010B96 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B9C 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010BA2 3011                       		move.w	(a1),d0
00010BA4 0240 03FF                  		andi.w	#$3FF,d0
00010BA8 0C40 016A                  			cmpi.w	#$16A,d0
00010BAC 6400                       		bcc.s	locret_E8EE
00010BAE 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010BB4                            
00010BB4                            locret_E8EE:
00010BB4 4E75                       		rts	
00010BB6                            ; ===========================================================================
00010BB6                            
00010BB6                            Brick_Type04:
00010BB6 7000                       		moveq	#0,d0
00010BB8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010BBC E648                       		lsr.w	#3,d0
00010BBE 3228 0030                  		move.w	brick_origY(a0),d1
00010BC2 9240                       		sub.w	d0,d1
00010BC4 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010BC8 4E75                       		rts	
00010BC8 4E75                       		rts	
00010BCA                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010BCA                            ; ---------------------------------------------------------------------------
00010BCA                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010BCA                            ; ---------------------------------------------------------------------------
00010BCA                            Map_Brick_internal:
00010BCA 0000                       		dc.w @brick-Map_Brick_internal
00010BCC 01                         @brick:		dc.b 1
00010BCD F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010BD2                            		even
00010BD2                            		even
00010BD2                            
00010BD2                            		include	"_incObj\12 Light.asm"
00010BD2                            ; ---------------------------------------------------------------------------
00010BD2                            ; Object 12 - lamp (SYZ)
00010BD2                            ; ---------------------------------------------------------------------------
00010BD2                            
00010BD2                            SpinningLight:
00010BD2 7000                       		moveq	#0,d0
00010BD4 1028 0024                  		move.b	obRoutine(a0),d0
00010BD8 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010BDC 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010BE0                            ; ===========================================================================
00010BE0 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010BE2 0000                       		dc.w Light_Animate-Light_Index
00010BE4                            ; ===========================================================================
00010BE4                            
00010BE4                            Light_Main:	; Routine 0
00010BE4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010BE8 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010BF0 317C 0000 0002             		move.w	#0,obGfx(a0)
00010BF6 117C 0004 0001             		move.b	#4,obRender(a0)
00010BFC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010C02 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010C08                            
00010C08                            Light_Animate:	; Routine 2
00010C08 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010C0C 6A00                       		bpl.s	@chkdel
00010C0E 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010C14 5228 001A                  		addq.b	#1,obFrame(a0)
00010C18 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010C1E 6500                       		bcs.s	@chkdel
00010C20 117C 0000 001A             		move.b	#0,obFrame(a0)
00010C26                            
00010C26                            	@chkdel:
00010C44 6000 EB62                  		bra.w	DisplaySprite
00010C44 6000 EB62                  		bra.w	DisplaySprite
00010C48                            Map_Light	include	"_maps\Light.asm"
00010C48                            ; --------------------------------------------------------------------------------
00010C48                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010C48                            ; --------------------------------------------------------------------------------
00010C48                            
00010C48                            SME_FBl1X:	
00010C48 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010C4C 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010C50 05                         SME_FBl1X_8:	dc.b 5	
00010C51 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010C56 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010C5B F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010C60 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010C65 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010C6A 05                         SME_FBl1X_22:	dc.b 5	
00010C6B E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010C70 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010C75 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010C7A F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010C7F F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010C84 06                         SME_FBl1X_3C:	dc.b 6	
00010C85 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010C8A E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010C8F E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010C94 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010C99 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010C9E F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010CA3 05                         SME_FBl1X_5B:	dc.b 5	
00010CA4 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010CA9 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010CAE F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010CB3 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010CB8 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010CBE 00                         		even
00010CBE 00                         		even
00010CBE                            		include	"_incObj\47 Bumper.asm"
00010CBE                            ; ---------------------------------------------------------------------------
00010CBE                            ; Object 47 - pinball bumper (SYZ)
00010CBE                            ; ---------------------------------------------------------------------------
00010CBE                            
00010CBE                            Bumper:
00010CBE 7000                       		moveq	#0,d0
00010CC0 1028 0024                  		move.b	obRoutine(a0),d0
00010CC4 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010CC8 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010CCC                            ; ===========================================================================
00010CCC 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010CCE 0000                       		dc.w Bump_Hit-Bump_Index
00010CD0                            ; ===========================================================================
00010CD0                            
00010CD0                            Bump_Main:	; Routine 0
00010CD0 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CD4 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010CDC 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010CE2 117C 0004 0001             		move.b	#4,obRender(a0)
00010CE8 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CEE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010CF4 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010CFA                            
00010CFA                            Bump_Hit:	; Routine 2
00010CFA 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010CFE 6700 0000                  		beq.w	@display	; if not, branch
00010D02 4228 0021                  		clr.b	obColProp(a0)
00010D06 43F8 D000                  		lea	(v_player).w,a1
00010D0A 3228 0008                  		move.w	obX(a0),d1
00010D0E 3428 000C                  		move.w	obY(a0),d2
00010D12 9269 0008                  		sub.w	obX(a1),d1
00010D16 9469 000C                  		sub.w	obY(a1),d2
00010D1A 4EB9 0000 3F5C             		jsr	(CalcAngle).l
00010D20 4EB9 0000 3CCA             		jsr	(CalcSine).l
00010D26 C3FC F900                  		muls.w	#-$700,d1
00010D2A E081                       		asr.l	#8,d1
00010D2C 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010D30 C1FC F900                  		muls.w	#-$700,d0
00010D34 E080                       		asr.l	#8,d0
00010D36 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010D3A 08E9 0001 0022             		bset	#1,obStatus(a1)
00010D40 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010D46 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010D4C 4229 003C                  		clr.b	$3C(a1)
00010D50 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010D60 45F8 FC00                  		lea	(v_objstate).w,a2
00010D64 7000                       		moveq	#0,d0
00010D66 1028 0023                  		move.b	obRespawnNo(a0),d0
00010D6A 6700                       		beq.s	@addscore
00010D6C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010D72 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010D74 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010D78                            
00010D78                            	@addscore:
00010D78 7001                       		moveq	#1,d0
00010D7A 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010D80 6100 EFC0                  		bsr.w	FindFreeObj
00010D84 6600                       		bne.s	@display
00010D86 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010D8A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010D90 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010D96 137C 0004 001A             		move.b	#4,obFrame(a1)
00010D9C                            
00010D9C                            	@display:
00010D9C 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010DA2 6100 BABA                  		bsr.w	AnimateSprite
00010DC2 6000 E9E4                  		bra.w	DisplaySprite
00010DC6                            ; ===========================================================================
00010DC6                            
00010DC6                            @resetcount:
00010DC6 45F8 FC00                  		lea	(v_objstate).w,a2
00010DCA 7000                       		moveq	#0,d0
00010DCC 1028 0023                  		move.b	obRespawnNo(a0),d0
00010DD0 6700                       		beq.s	@delete
00010DD2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010DD8                            
00010DD8                            	@delete:
00010DD8 6000 EA0E                  		bra.w	DeleteObject
00010DD8 6000 EA0E                  		bra.w	DeleteObject
00010DDC                            		include	"_anim\Bumper.asm"
00010DDC                            ; ---------------------------------------------------------------------------
00010DDC                            ; Animation script - flamethrower (SBZ)
00010DDC                            ; ---------------------------------------------------------------------------
00010DDC 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010DDE 0000                       		dc.w byte_EAF8-Ani_Bump
00010DE0 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010DE4 00                         		even
00010DE4 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010DEC 00                         		even
00010DEC 00                         		even
00010DEC                            Map_Bump:	include	"_maps\Bumper.asm"
00010DEC                            ; ---------------------------------------------------------------------------
00010DEC                            ; Sprite mappings - pinball bumper (SYZ)
00010DEC                            ; ---------------------------------------------------------------------------
00010DEC                            Map_Bump_internal:
00010DEC 0000                       		dc.w @normal-Map_Bump_internal
00010DEE 0000                       		dc.w @bumped1-Map_Bump_internal
00010DF0 0000                       		dc.w @bumped2-Map_Bump_internal
00010DF2 02                         @normal:	dc.b 2
00010DF3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010DF8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010DFD 02                         @bumped1:	dc.b 2
00010DFE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010E03 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010E08 02                         @bumped2:	dc.b 2
00010E09 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010E0E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010E14 00                         		even
00010E14 00                         		even
00010E14                            
00010E14                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010E14                            ; ---------------------------------------------------------------------------
00010E14                            ; Object 0D - signpost at the end of a level
00010E14                            ; ---------------------------------------------------------------------------
00010E14                            
00010E14                            Signpost:
00010E14 7000                       		moveq	#0,d0
00010E16 1028 0024                  		move.b	obRoutine(a0),d0
00010E1A 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010E1E 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010E22 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010E28 6100 BA34                  		bsr.w	AnimateSprite
00010E2C 6100 E97A                  		bsr.w	DisplaySprite
00010E4E 4E75                       		rts	
00010E50                            ; ===========================================================================
00010E50 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010E52 0000                       		dc.w Sign_Touch-Sign_Index
00010E54 0000                       		dc.w Sign_Spin-Sign_Index
00010E56 0000                       		dc.w Sign_SonicRun-Sign_Index
00010E58 0000                       		dc.w Sign_Exit-Sign_Index
00010E5A                            
00010E5A =00000030                  spintime:	equ $30		; time for signpost to spin
00010E5A =00000032                  sparkletime:	equ $32		; time between sparkles
00010E5A =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010E5A                            ; ===========================================================================
00010E5A                            
00010E5A                            Sign_Main:	; Routine 0
00010E5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E5E 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010E66 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010E6C 117C 0004 0001             		move.b	#4,obRender(a0)
00010E72 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010E78 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010E7E                            
00010E7E                            Sign_Touch:	; Routine 2
00010E7E 3038 D008                  		move.w	(v_player+obX).w,d0
00010E82 9068 0008                  		sub.w	obX(a0),d0
00010E86 6500                       		bcs.s	@notouch
00010E88 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010E8C 6400                       		bcc.s	@notouch	; if not, branch
00010E8E 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010E9E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010EA2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010EA8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EAC 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010EB2 6700                       		beq.s	@normal
00010EB4 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010EBA                            
00010EBA                            	@normal:
00010EBA 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010EBE 6700                       		beq.s	@notouch
00010EC0 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010ECE                            
00010ECE                            	@notouch:
00010ECE 4E75                       		rts	
00010ED0                            	
00010ED0                            ; ===========================================================================
00010ED0                            
00010ED0                            Sign_Spin:	; Routine 4
00010ED0 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
00010ED4 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
00010EDA 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00010EE0 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00010EE6 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010EEA 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010EEC 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010EF2 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010EF6 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010EFC 6600                       		bne.s	@chksparkle	; if not, branch
00010EFE 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F02                            
00010F02                            	@chksparkle:
00010F02 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010F06 6A00                       		bpl.s	@fail		; if time remains, branch
00010F08 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F0E 7000                       		moveq	#0,d0
00010F10 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010F14 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010F18 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010F1E 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010F22 6100 EE1E                  		bsr.w	FindFreeObj
00010F26 6600                       		bne.s	@fail
00010F28 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010F2C 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010F32 101A                       		move.b	(a2)+,d0
00010F34 4880                       		ext.w	d0
00010F36 D068 0008                  		add.w	obX(a0),d0
00010F3A 3340 0008                  		move.w	d0,obX(a1)
00010F3E 101A                       		move.b	(a2)+,d0
00010F40 4880                       		ext.w	d0
00010F42 D068 000C                  		add.w	obY(a0),d0
00010F46 3340 000C                  		move.w	d0,obY(a1)
00010F4A 237C 0000 BDB0 0004        		move.l	#Map_Ring,obMap(a1)
00010F52 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010F58 137C 0004 0001             		move.b	#4,obRender(a1)
00010F5E 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010F64 137C 0008 0014             		move.b	#8,obActWid(a1)
00010F6A                            
00010F6A                            	@fail:
00010F6A 4E75                       		rts	
00010F6C                            ; ===========================================================================
00010F6C E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010F6E 0808                       		dc.b	8,   8
00010F70 F000                       		dc.b -$10,   0
00010F72 18F8                       		dc.b  $18,  -8
00010F74 00F8                       		dc.b	0,  -8
00010F76 1000                       		dc.b  $10,   0
00010F78 E808                       		dc.b -$18,   8
00010F7A 1810                       		dc.b  $18, $10
00010F7C                            ; ===========================================================================
00010F7C                            
00010F7C                            Sign_SonicRun:	; Routine 6
00010F7C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010F80 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010F84 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F8A                            		
00010F8A                            
00010F8A                            	loc_EC86:
00010F8A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F8E                            
00010F8E                            ; ---------------------------------------------------------------------------
00010F8E                            ; Subroutine to	set up bonuses at the end of an	act
00010F8E                            ; ---------------------------------------------------------------------------
00010F8E                            
00010F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010F8E                            
00010F8E                            
00010F8E                            GotThroughAct:
00010F8E 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010F92 6600                       		bne.s	locret_ECEE
00010F94 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010F9A 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010F9E 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010FA2 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010FA6 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010FAC 7000                       		moveq	#plcid_TitleCard,d0
00010FAE 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010FB4 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010FBA 7000                       		moveq	#0,d0
00010FBC 1038 FE23                  		move.b	(v_timemin).w,d0
00010FC0 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010FC4 7200                       		moveq	#0,d1
00010FC6 1238 FE24                  		move.b	(v_timesec).w,d1
00010FCA D041                       		add.w	d1,d0		; add up your time
00010FCC 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010FD0 7214                       		moveq	#$14,d1
00010FD2 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010FD4 6500                       		bcs.s	hastimebonus	; if not, branch
00010FD6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010FD8                            
00010FD8                            	hastimebonus:
00010FD8 D040                       		add.w	d0,d0
00010FDA 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010FE0 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010FE4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010FE8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010FF6 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010FFC                            
00010FFC                            locret_ECEE:
00010FFC 4E75                       		rts	
00010FFE                            
00010FFE                            ; End of function GotThroughAct
00010FFE                            
00010FFE                            ; ===========================================================================
00010FFE 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011012 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011028                            ; ===========================================================================
00011028                            
00011028                            Sign_Exit:	; Routine 8
00011028 4E75                       		rts	
0001102A                            
0001102A                            ; ---------------------------------------------------------------------------
0001102A                            ; Subroutine to	set up bonuses at the end of an	zone
0001102A                            ; ---------------------------------------------------------------------------
0001102A                            
0001102A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001102A                            
0001102A                            
0001102A                            GotThroughAct1:
0001102A 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
0001102E 6600                       		bne.s	locret_ECEE1
00011030 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011036 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
0001103A 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
0001103E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011042 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00011048 7000                       		moveq	#plcid_TitleCard,d0
0001104A 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00011050 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011056 7000                       		moveq	#0,d0
00011058 1038 FE23                  		move.b	(v_timemin).w,d0
0001105C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011060 7200                       		moveq	#0,d1
00011062 1238 FE24                  		move.b	(v_timesec).w,d1
00011066 D041                       		add.w	d1,d0		; add up your time
00011068 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001106C 7214                       		moveq	#$14,d1
0001106E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011070 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00011074 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011076                            
00011076                            	hastimebonus2:
00011076 D040                       		add.w	d0,d0
00011078 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
0001107E 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011082 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011086 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011094 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001109A                            
0001109A                            locret_ECEE1:
0001109A 4E75                       		rts	
0001109C                            
0001109C                            ; End of function GotThroughAct		
0001109C                            
0001109C 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000110B0 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110B0 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110C6                            		include	"_anim\Signpost.asm"
000110C6                            ; ---------------------------------------------------------------------------
000110C6                            ; Animation script - signpost
000110C6                            ; ---------------------------------------------------------------------------
000110C6 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
000110C8 0000                       		dc.w @spin1-Ani_Sign
000110CA 0000                       		dc.w @spin2-Ani_Sign
000110CC 0000                       		dc.w @sonic-Ani_Sign
000110CE 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
000110D2 00                         		even
000110D2 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
000110D8 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
000110DE 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
000110E2 00                         		even
000110E2 00                         		even
000110E2                            Map_Sign:	include	"_maps\Signpost.asm"
000110E2                            ; --------------------------------------------------------------------------------
000110E2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000110E2                            ; --------------------------------------------------------------------------------
000110E2                            
000110E2                            SME_KvSue:	
000110E2 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
000110E6 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
000110EA 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
000110EC 04                         SME_KvSue_A:	dc.b 4	
000110ED F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
000110F2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
000110F7 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000110FC 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011101 03                         SME_KvSue_1F:	dc.b 3	
00011102 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011107 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001110C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011111 03                         SME_KvSue_2F:	dc.b 3	
00011112 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011117 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001111C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011121 03                         SME_KvSue_3F:	dc.b 3	
00011122 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00011127 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001112C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011131 04                         SME_KvSue_4F:	dc.b 4	
00011132 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00011137 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
0001113C 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011141 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011146                            		even
00011146                            		even
00011146                            
00011146                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00011146                            ; ---------------------------------------------------------------------------
00011146                            ; Object 4C - lava geyser / lavafall producer (MZ)
00011146                            ; ---------------------------------------------------------------------------
00011146                            
00011146                            GeyserMaker:
00011146 7000                       		moveq	#0,d0
00011148 1028 0024                  		move.b	obRoutine(a0),d0
0001114C 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00011150 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00011154 6000 0000                  		bra.w	Geyser_ChkDel
00011158                            ; ===========================================================================
00011158 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
0001115A 0000                       		dc.w GMake_Wait-GMake_Index
0001115C 0000                       		dc.w GMake_ChkType-GMake_Index
0001115E 0000                       		dc.w GMake_MakeLava-GMake_Index
00011160 0000                       		dc.w GMake_Display-GMake_Index
00011162 0000                       		dc.w GMake_Delete-GMake_Index
00011164                            
00011164 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00011164 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00011164 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00011164                            ; ===========================================================================
00011164                            
00011164                            GMake_Main:	; Routine 0
00011164 5428 0024                  		addq.b	#2,obRoutine(a0)
00011168 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00011170 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00011176 117C 0004 0001             		move.b	#4,obRender(a0)
0001117C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011182 117C 0038 0014             		move.b	#$38,obActWid(a0)
00011188 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0001118E                            
0001118E                            GMake_Wait:	; Routine 2
0001118E 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011192 6A00                       		bpl.s	@cancel		; if time remains, branch
00011194                            
00011194 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
0001119A 3038 D00C                  		move.w	(v_player+obY).w,d0
0001119E 3228 000C                  		move.w	obY(a0),d1
000111A2 B041                       		cmp.w	d1,d0
000111A4 6400                       		bcc.s	@cancel
000111A6 0441 0170                  		subi.w	#$170,d1
000111AA B041                       		cmp.w	d1,d0
000111AC 6500                       		bcs.s	@cancel
000111AE 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
000111B2                            
000111B2                            	@cancel:
000111B2 4E75                       		rts	
000111B4                            ; ===========================================================================
000111B4                            
000111B4                            GMake_MakeLava:	; Routine 6
000111B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000111B8 6100 EB9E                  		bsr.w	FindNextFreeObj
000111BC 6600                       		bne.s	@fail
000111BE 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
000111C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
000111C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000111CE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000111D4 2348 003C                  		move.l	a0,gmake_parent(a1)
000111D8                            
000111D8                            	@fail:
000111D8 117C 0001 001C             		move.b	#1,obAnim(a0)
000111DE 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
000111E2 6700                       		beq.s	@isgeyser	; if yes, branch
000111E4 117C 0004 001C             		move.b	#4,obAnim(a0)
000111EA 6000                       		bra.s	GMake_Display
000111EC                            ; ===========================================================================
000111EC                            
000111EC                            	@isgeyser:
000111EC 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
000111F0 08E9 0001 0022             		bset	#1,obStatus(a1)
000111F6 337C FA80 0012             		move.w	#-$580,obVelY(a1)
000111FC 6000                       		bra.s	GMake_Display
000111FE                            ; ===========================================================================
000111FE                            
000111FE                            GMake_ChkType:	; Routine 4
000111FE 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011202 6700                       		beq.s	GMake_Display	; if yes, branch
00011204 5428 0024                  		addq.b	#2,obRoutine(a0)
00011208 4E75                       		rts	
0001120A                            ; ===========================================================================
0001120A                            
0001120A                            GMake_Display:	; Routine 8
0001120A 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011210 6100 B64C                  		bsr.w	AnimateSprite
00011214 6100 E592                  		bsr.w	DisplaySprite
00011218 4E75                       		rts	
0001121A                            ; ===========================================================================
0001121A                            
0001121A                            GMake_Delete:	; Routine $A
0001121A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011220 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011226 4A28 0028                  		tst.b	obSubtype(a0)
0001122A 6700 E5BC                  		beq.w	DeleteObject
0001122E 4E75                       		rts	
00011230                            
00011230                            
00011230                            ; ---------------------------------------------------------------------------
00011230                            ; Object 4D - lava geyser / lavafall (MZ)
00011230                            ; ---------------------------------------------------------------------------
00011230                            
00011230                            LavaGeyser:
00011230 7000                       		moveq	#0,d0
00011232 1028 0024                  		move.b	obRoutine(a0),d0
00011236 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
0001123A 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001123E 6000 E568                  		bra.w	DisplaySprite
00011242                            ; ===========================================================================
00011242 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011244 0000                       		dc.w Geyser_Action-Geyser_Index
00011246 0000                       		dc.w loc_EFFC-Geyser_Index
00011248 0000                       		dc.w Geyser_Delete-Geyser_Index
0001124A                            
0001124A FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0001124E                            ; ===========================================================================
0001124E                            
0001124E                            Geyser_Main:	; Routine 0
0001124E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011252 3168 000C 0030             		move.w	obY(a0),$30(a0)
00011258 4A28 0028                  		tst.b	obSubtype(a0)
0001125C 6700                       		beq.s	@isgeyser
0001125E 0468 0250 000C             		subi.w	#$250,obY(a0)
00011264                            
00011264                            	@isgeyser:
00011264 7000                       		moveq	#0,d0
00011266 1028 0028                  		move.b	obSubtype(a0),d0
0001126A D040                       		add.w	d0,d0
0001126C 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011272 2248                       		movea.l	a0,a1
00011274 7201                       		moveq	#1,d1
00011276 6100                       		bsr.s	@makelava
00011278 6000                       		bra.s	@activate
0001127A                            ; ===========================================================================
0001127A                            
0001127A                            	@loop:
0001127A 6100 EADC                  		bsr.w	FindNextFreeObj
0001127E 6600                       		bne.s	@fail
00011280                            
00011280                            @makelava:
00011280 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011284 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001128C 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011292 137C 0004 0001             		move.b	#4,obRender(a1)
00011298 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001129E 3368 0008 0008             		move.w	obX(a0),obX(a1)
000112A4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000112AA 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000112B0 337C 0080 0018             		move.w	#$80,obPriority(a1)
000112B6 137C 0005 001C             		move.b	#5,obAnim(a1)
000112BC 4A28 0028                  		tst.b	obSubtype(a0)
000112C0 6700                       		beq.s	@fail
000112C2 137C 0002 001C             		move.b	#2,obAnim(a1)
000112C8                            
000112C8                            	@fail:
000112C8 51C9 FFB0                  		dbf	d1,@loop
000112CC 4E75                       		rts	
000112CE                            ; ===========================================================================
000112CE                            
000112CE                            @activate:
000112CE 0669 0060 000C             		addi.w	#$60,obY(a1)
000112D4 3368 0030 0030             		move.w	$30(a0),$30(a1)
000112DA 0669 0060 0030             		addi.w	#$60,$30(a1)
000112E0 137C 0093 0020             		move.b	#$93,obColType(a1)
000112E6 137C 0080 0016             		move.b	#$80,obHeight(a1)
000112EC 08E9 0004 0001             		bset	#4,obRender(a1)
000112F2 5829 0024                  		addq.b	#4,obRoutine(a1)
000112F6 2348 003C                  		move.l	a0,$3C(a1)
000112FA 4A28 0028                  		tst.b	obSubtype(a0)
000112FE 6700                       		beq.s	@sound
00011300 7200                       		moveq	#0,d1
00011302 6100 FF76                  		bsr.w	@loop
00011306 5429 0024                  		addq.b	#2,obRoutine(a1)
0001130A 08E9 0004 0002             		bset	#4,obGfx(a1)
00011310 0669 0100 000C             		addi.w	#$100,obY(a1)
00011316 337C 0000 0018             		move.w	#0,obPriority(a1)
0001131C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011322 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011328 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001132E                            
0001132E                            	@sound:
00011338                            
00011338                            Geyser_Action:	; Routine 2
00011338 7000                       		moveq	#0,d0
0001133A 1028 0028                  		move.b	obSubtype(a0),d0
0001133E D040                       		add.w	d0,d0
00011340 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011344 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011348 6100 E44A                  		bsr.w	SpeedToPos
0001134C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011352 6100 B50A                  		bsr.w	AnimateSprite
00011356                            
00011356                            Geyser_ChkDel:
00011374 4E75                       		rts	
00011376                            ; ===========================================================================
00011376 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011378 0000                       		dc.w Geyser_Type01-Geyser_Types
0001137A                            ; ===========================================================================
0001137A                            
0001137A                            Geyser_Type00:
0001137A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011380 3028 0030                  		move.w	$30(a0),d0
00011384 B068 000C                  		cmp.w	obY(a0),d0
00011388 6400                       		bcc.s	locret_EFDA
0001138A 5828 0024                  		addq.b	#4,obRoutine(a0)
0001138E 2268 003C                  		movea.l	$3C(a0),a1
00011392 137C 0003 001C             		move.b	#3,obAnim(a1)
00011398                            
00011398                            locret_EFDA:
00011398 4E75                       		rts	
0001139A                            ; ===========================================================================
0001139A                            
0001139A                            Geyser_Type01:
0001139A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000113A0 3028 0030                  		move.w	$30(a0),d0
000113A4 B068 000C                  		cmp.w	obY(a0),d0
000113A8 6400                       		bcc.s	locret_EFFA
000113AA 5828 0024                  		addq.b	#4,obRoutine(a0)
000113AE 2268 003C                  		movea.l	$3C(a0),a1
000113B2 137C 0001 001C             		move.b	#1,obAnim(a1)
000113B8                            
000113B8                            locret_EFFA:
000113B8 4E75                       		rts	
000113BA                            ; ===========================================================================
000113BA                            
000113BA                            loc_EFFC:	; Routine 4
000113BA 2268 003C                  		movea.l	$3C(a0),a1
000113BE 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000113C4 6700 0000                  		beq.w	Geyser_Delete
000113C8 3029 000C                  		move.w	obY(a1),d0
000113CC 0640 0060                  		addi.w	#$60,d0
000113D0 3140 000C                  		move.w	d0,obY(a0)
000113D4 9068 0030                  		sub.w	$30(a0),d0
000113D8 4440                       		neg.w	d0
000113DA 7208                       		moveq	#8,d1
000113DC 0C40 0040                  		cmpi.w	#$40,d0
000113E0 6C00                       		bge.s	loc_F026
000113E2 720B                       		moveq	#$B,d1
000113E4                            
000113E4                            loc_F026:
000113E4 0C40 0080                  		cmpi.w	#$80,d0
000113E8 6F00                       		ble.s	loc_F02E
000113EA 720E                       		moveq	#$E,d1
000113EC                            
000113EC                            loc_F02E:
000113EC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000113F0 6A00                       		bpl.s	loc_F04C
000113F2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000113F8 5228 001B                  		addq.b	#1,obAniFrame(a0)
000113FC 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011402 6500                       		bcs.s	loc_F04C
00011404 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001140A                            
0001140A                            loc_F04C:
0001140A 1028 001B                  		move.b	obAniFrame(a0),d0
0001140E D001                       		add.b	d1,d0
00011410 1140 001A                  		move.b	d0,obFrame(a0)
00011414 6000 FF40                  		bra.w	Geyser_ChkDel
00011418                            ; ===========================================================================
00011418                            
00011418                            Geyser_Delete:	; Routine 6
00011418 6000 E3CE                  		bra.w	DeleteObject
00011418 6000 E3CE                  		bra.w	DeleteObject
0001141C                            		include	"_incObj\54 Lava Tag.asm"
0001141C                            ; ---------------------------------------------------------------------------
0001141C                            ; Object 54 - invisible	lava tag (MZ)
0001141C                            ; ---------------------------------------------------------------------------
0001141C                            
0001141C                            LavaTag:
0001141C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011422 6E00 0000                  		bgt	WaterTag	;TIS
00011426 7000                       		moveq	#0,d0
00011428 1028 0024                  		move.b	obRoutine(a0),d0
0001142C 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011430 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011434                            ; ===========================================================================
00011434 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011436 0000                       		dc.w LTag_ChkDel-LTag_Index
00011438                            
00011438 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
0001143C 00                         		even
0001143C                            ; ===========================================================================
0001143C                            
0001143C                            LTag_Main:	; Routine 0
0001143C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011440 7000                       		moveq	#0,d0
00011442 1028 0028                  		move.b	obSubtype(a0),d0
00011446 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
0001144C 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
00011454 117C 0084 0001             		move.b	#$84,obRender(a0)
0001145A                            
0001145A                            LTag_ChkDel:	; Routine 2
0001145A 3028 0008                  		move.w	obX(a0),d0
0001145E 0240 FF80                  		andi.w	#$FF80,d0
00011462 3238 F700                  		move.w	(v_screenposx).w,d1
00011466 0441 0080                  		subi.w	#$80,d1
0001146A 0241 FF80                  		andi.w	#$FF80,d1
0001146E 9041                       		sub.w	d1,d0
00011470 6B00 E376                  		bmi.w	DeleteObject
00011474 0C40 0280                  		cmpi.w	#$280,d0
00011478 6200 E36E                  		bhi.w	DeleteObject
0001147C 4E75                       		rts
0001147E                            
0001147E                            
0001147E                            ; ---------------------------------------------------------------------------
0001147E                            ; Object 54a - invisible	water tag (MZ) - TIS
0001147E                            ; ---------------------------------------------------------------------------
0001147E                            
0001147E                            WaterTag:	
0001147E 7000                       		moveq	#0,d0
00011480 1028 0024                  		move.b	obRoutine(a0),d0
00011484 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011488 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001148C                            ; ===========================================================================
0001148C 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001148E 0000                       		dc.w WTag_ChkDel-WTag_Index
00011490                            
00011490 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011494 00                         		even
00011494                            ; ===========================================================================
00011494                            
00011494                            
00011494                            WTag_Main:	; Routine 0
00011494 5428 0024                  		addq.b	#2,obRoutine(a0)
00011498 7000                       		moveq	#0,d0
0001149A                            		;move.b	obSubtype(a0),d0
0001149A                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001149A 0400 00F0                  		sub.b	#$F0,d0
0001149E 1178 0096 0020             		move.b	$96,obColType(a0)							
000114A4                            		;move.l	#Map_LTag,obMap(a0)
000114A4                            		;move.b	#$84,obRender(a0)
000114A4                            
000114A4                            WTag_ChkDel:	; Routine 2
000114A4 3028 0008                  		move.w	obX(a0),d0
000114A8 0240 FF80                  		andi.w	#$FF80,d0
000114AC 3238 F700                  		move.w	(v_screenposx).w,d1
000114B0 0441 0080                  		subi.w	#$80,d1
000114B4 0241 FF80                  		andi.w	#$FF80,d1
000114B8 9041                       		sub.w	d1,d0
000114BA 6B00 E32C                  		bmi.w	DeleteObject
000114BE 0C40 0280                  		cmpi.w	#$280,d0
000114C2 6200 E324                  		bhi.w	DeleteObject
000114C6 4E75                       		rts
000114C8                            
000114C8                            
000114C8                            Map_LTag:	include	"_maps\Lava Tag.asm"
000114C8                            ; ---------------------------------------------------------------------------
000114C8                            ; Sprite mappings - invisible lava tag (MZ)
000114C8                            ; ---------------------------------------------------------------------------
000114C8                            Map_LTag_internal:
000114C8 0000                       		dc.w @0-Map_LTag_internal
000114CA 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
000114CC 00                         		even
000114CC 00                         		even
000114CC                            		include	"_anim\Lava Geyser.asm"
000114CC                            ; ---------------------------------------------------------------------------
000114CC                            ; Animation script - geyser of lava (MZ)
000114CC                            ; ---------------------------------------------------------------------------
000114CC 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
000114CE 0000                       		dc.w @bubble2-Ani_Geyser
000114D0 0000                       		dc.w @end-Ani_Geyser
000114D2 0000                       		dc.w @bubble3-Ani_Geyser
000114D4 0000                       		dc.w @blank-Ani_Geyser
000114D6 0000                       		dc.w @bubble4-Ani_Geyser
000114D8 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
000114E2 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
000114E6 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
000114EA 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
000114F2 0F13 FF                    @blank:		dc.b $F, $13, afEnd
000114F6 00                         		even
000114F6 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
000114FA                            		even
000114FA                            		even
000114FA                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
000114FA                            ; ---------------------------------------------------------------------------
000114FA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000114FA                            ; ---------------------------------------------------------------------------
000114FA                            Map_Geyser_internal:
000114FA 0000                       		dc.w @bubble1-Map_Geyser_internal
000114FC 0000                       		dc.w @bubble2-Map_Geyser_internal
000114FE 0000                       		dc.w @bubble3-Map_Geyser_internal
00011500 0000                       		dc.w @bubble4-Map_Geyser_internal
00011502 0000                       		dc.w @bubble5-Map_Geyser_internal
00011504 0000                       		dc.w @bubble6-Map_Geyser_internal
00011506 0000                       		dc.w @end1-Map_Geyser_internal
00011508 0000                       		dc.w @end2-Map_Geyser_internal
0001150A 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001150C 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001150E 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011510 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011512 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011514 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011516 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011518 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001151A 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001151C 0000                       		dc.w @bubble7-Map_Geyser_internal
0001151E 0000                       		dc.w @bubble8-Map_Geyser_internal
00011520 0000                       		dc.w @blank-Map_Geyser_internal
00011522 02                         @bubble1:	dc.b 2
00011523 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011528 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001152D 02                         @bubble2:	dc.b 2
0001152E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011533 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011538 04                         @bubble3:	dc.b 4
00011539 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001153E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011543 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011548 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001154D 04                         @bubble4:	dc.b 4
0001154E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011553 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011558 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001155D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011562 06                         @bubble5:	dc.b 6
00011563 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011568 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001156D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011572 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011577 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001157C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011581 06                         @bubble6:	dc.b 6
00011582 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011587 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001158C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011591 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011596 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001159B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000115A0 02                         @end1:		dc.b 2
000115A1 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000115A6 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000115AB 02                         @end2:		dc.b 2
000115AC E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000115B1 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000115B6 0A                         @medcolumn1:	dc.b $A
000115B7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000115BC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000115C1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000115C6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000115CB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000115D0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000115D5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000115DA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000115DF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000115E4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000115E9 0A                         @medcolumn2:	dc.b $A
000115EA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000115EF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000115F4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000115F9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000115FE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011603 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011608 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001160D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011612 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011617 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001161C 0A                         @medcolumn3:	dc.b $A
0001161D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011622 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011627 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001162C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011631 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011636 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001163B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011640 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011645 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001164A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001164F 06                         @shortcolumn1:	dc.b 6
00011650 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011655 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001165A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001165F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011664 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011669 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001166E 06                         @shortcolumn2:	dc.b 6
0001166F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011674 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011679 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001167E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011683 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011688 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001168D 06                         @shortcolumn3:	dc.b 6
0001168E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011693 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011698 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001169D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116A2 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116A7 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116AC 10                         @longcolumn1:	dc.b $10
000116AD 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116B2 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116B7 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116BC B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116C1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116C6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116CB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000116D0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000116D5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000116DA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000116DF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000116E4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000116E9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000116EE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000116F3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000116F8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000116FD 10                         @longcolumn2:	dc.b $10
000116FE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011703 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011708 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001170D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011712 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011717 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001171C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011721 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011726 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001172B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011730 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011735 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001173A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001173F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011744 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011749 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001174E 10                         @longcolumn3:	dc.b $10
0001174F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011754 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011759 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001175E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011763 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011768 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001176D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011772 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011777 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001177C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011781 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011786 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001178B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011790 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011795 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001179A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001179F 06                         @bubble7:	dc.b 6
000117A0 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000117A5 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000117AA E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000117AF E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000117B4 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000117B9 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000117BE 06                         @bubble8:	dc.b 6
000117BF E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000117C4 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000117C9 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000117CE E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000117D3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000117D8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000117DD 00                         @blank:	dc.b 0
000117DE                            		even
000117DE                            		even
000117DE                            
000117DE                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
000117DE                            ; ---------------------------------------------------------------------------
000117DE                            ; Object 40 - Moto Bug enemy (GHZ)
000117DE                            ; ---------------------------------------------------------------------------
000117DE                            
000117DE                            MotoBug:
000117DE 7000                       		moveq	#0,d0
000117E0 1028 0024                  		move.b	obRoutine(a0),d0
000117E4 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
000117E8 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
000117EC                            ; ===========================================================================
000117EC 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
000117EE 0000                       		dc.w Moto_Action-Moto_Index
000117F0 0000                       		dc.w Moto_Animate-Moto_Index
000117F2 0000                       		dc.w Moto_Delete-Moto_Index
000117F4                            ; ===========================================================================
000117F4                            
000117F4                            Moto_Main:	; Routine 0
000117F4 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
000117FC 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011802 117C 0004 0001             		move.b	#4,obRender(a0)
00011808 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001180E 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011814 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011818 6600                       		bne.s	@smoke		; if yes, branch
0001181A 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011820 117C 0008 0017             		move.b	#8,obWidth(a0)
00011826 117C 000C 0020             		move.b	#$C,obColType(a0)
0001182C 6100 DF2E                  		bsr.w	ObjectFall
00011830 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011836 4A41                       		tst.w	d1
00011838 6A00                       		bpl.s	@notonfloor
0001183A D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001183E 317C 0000 0012             		move.w	#0,obVelY(a0)
00011844 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
00011848 0868 0000 0022             		bchg	#0,obStatus(a0)
0001184E                            
0001184E                            	@notonfloor:
0001184E 4E75                       		rts	
00011850                            ; ===========================================================================
00011850                            
00011850                            @smoke:
00011850 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
00011854 6000 0000                  		bra.w	Moto_Animate
00011858                            ; ===========================================================================
00011858                            
00011858                            Moto_Action:	; Routine 2
00011858 7000                       		moveq	#0,d0
0001185A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001185E 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011862 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
00011866 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001186C 6100 AFF0                  		bsr.w	AnimateSprite
00011870                            
00011870                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011870                            ; ---------------------------------------------------------------------------
00011870                            ; Subroutine to remember whether an object is destroyed/collected
00011870                            ; ---------------------------------------------------------------------------
00011870                            
00011870                            RememberState:
0001188E 6000 DF18                  		bra.w	DisplaySprite
00011892                            
00011892                            	@offscreen:
00011892 45F8 FC00                  		lea	(v_objstate).w,a2
00011896 7000                       		moveq	#0,d0
00011898 1028 0023                  		move.b	obRespawnNo(a0),d0
0001189C 6700                       		beq.s	@delete
0001189E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000118A4                            
000118A4                            	@delete:
000118A4 6000 DF42                  		bra.w	DeleteObject
000118A4 6000 DF42                  		bra.w	DeleteObject
000118A8                            
000118A8                            ; ===========================================================================
000118A8 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
000118AA 0000                       		dc.w @findfloor-Moto_ActIndex
000118AC                            
000118AC =00000030                  @time:		equ $30
000118AC =00000033                  @smokedelay:	equ $33
000118AC                            ; ===========================================================================
000118AC                            
000118AC                            @move:
000118AC 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
000118B0 6A00                       		bpl.s	@wait		; if time remains, branch
000118B2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000118B6 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
000118BC 117C 0001 001C             		move.b	#1,obAnim(a0)
000118C2 0868 0000 0022             		bchg	#0,obStatus(a0)
000118C8 6600                       		bne.s	@wait
000118CA 4468 0010                  		neg.w	obVelX(a0)	; change direction
000118CE                            
000118CE                            	@wait:
000118CE 4E75                       		rts	
000118D0                            ; ===========================================================================
000118D0                            
000118D0                            @findfloor:
000118D0 6100 DEC2                  		bsr.w	SpeedToPos
000118D4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118DA 0C41 FFF8                  		cmpi.w	#-8,d1
000118DE 6D00                       		blt.s	@pause
000118E0 0C41 000C                  		cmpi.w	#$C,d1
000118E4 6C00                       		bge.s	@pause
000118E6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118EA 5328 0033                  		subq.b	#1,@smokedelay(a0)
000118EE 6A00                       		bpl.s	@nosmoke
000118F0 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
000118F6 6100 E44A                  		bsr.w	FindFreeObj
000118FA 6600                       		bne.s	@nosmoke
000118FC 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011900 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011906 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001190C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011912 137C 0002 001C             		move.b	#2,obAnim(a1)
00011918                            
00011918                            	@nosmoke:
00011918 4E75                       		rts	
0001191A                            
0001191A                            @pause:
0001191A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001191E 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011924 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0001192A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011930 4E75                       		rts	
00011932                            ; ===========================================================================
00011932                            
00011932                            Moto_Animate:	; Routine 4
00011932 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011938 6100 AF24                  		bsr.w	AnimateSprite
0001193C 6000 DE6A                  		bra.w	DisplaySprite
00011940                            ; ===========================================================================
00011940                            
00011940                            Moto_Delete:	; Routine 6
00011940 6000 DEA6                  		bra.w	DeleteObject
00011940 6000 DEA6                  		bra.w	DeleteObject
00011944                            		include	"_anim\Moto Bug.asm"
00011944                            ; ---------------------------------------------------------------------------
00011944                            ; Animation script - Motobug enemy
00011944                            ; ---------------------------------------------------------------------------
00011944 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011946 0000                       		dc.w @walk-Ani_Moto
00011948 0000                       		dc.w @smoke-Ani_Moto
0001194A                            
0001194A 0F02 FF                    @stand:		dc.b $F, 2, afEnd
0001194E 00                         		even
0001194E 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011954 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011962 00                         		even
00011962 00                         		even
00011962                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011962                            ; --------------------------------------------------------------------------------
00011962                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011962                            ; --------------------------------------------------------------------------------
00011962                            
00011962                            SME_TTY9T:	
00011962 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011966 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
0001196A 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
0001196E 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011970 04                         SME_TTY9T_E:	dc.b 4	
00011971 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011976 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
0001197B F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011980 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011985 04                         SME_TTY9T_23:	dc.b 4	
00011986 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
0001198B 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011990 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011995 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
0001199A 05                         SME_TTY9T_38:	dc.b 5	
0001199B F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000119A0 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
000119A5 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000119AA 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
000119AF 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
000119B4 01                         SME_TTY9T_52:	dc.b 1	
000119B5 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
000119BA 01                         SME_TTY9T_58:	dc.b 1	
000119BB FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
000119C0 01                         SME_TTY9T_5E:	dc.b 1	
000119C1 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
000119C6 00                         SME_TTY9T_64:	dc.b 0	
000119C8 00                         		even
000119C8 00                         		even
000119C8                            		include	"_incObj\4F.asm"
000119C8                            ; ---------------------------------------------------------------------------
000119C8                            ; Object 4F - Splats
000119C8                            ; ---------------------------------------------------------------------------
000119C8                            
000119C8                            Obj4F:
000119C8 7000                                       moveq   #0,d0
000119CA 1028 0024                                  move.b  $24(a0),d0
000119CE 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
000119D2 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
000119D6                            ; ---------------------------------------------------------------------------
000119D6 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
000119D8 0000                                       dc.w loc_D246-ObjSplats_Index
000119DA 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
000119DC 0000                                       dc.w loc_D2C8-ObjSplats_Index
000119DE                            ; ---------------------------------------------------------------------------
000119DE                            
000119DE                            ObjSplats_Init:
000119DE 5428 0024                                  addq.b  #2,$24(a0)
000119E2 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
000119EA 317C 24E4 0002                             move.w  #$24E4,2(a0)
000119F0 117C 0004 0001                             move.b  #4,1(a0)
000119F6 117C 0004 0014                             move.b  #4,obActWid(a0)
000119FC 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A02 117C 0014 0016                             move.b  #$14,$16(a0)
00011A08 117C 0002 0020                             move.b  #2,$20(a0)
00011A0E 4A28 0028                                  tst.b   $28(a0)
00011A12 6700                                       beq.s   loc_D246
00011A14 343C 0300                                  move.w  #$300,d2
00011A18 6000                                       bra.s   ObjSplats_FaceRight
00011A1A                            ; ---------------------------------------------------------------------------
00011A1A                            
00011A1A                            loc_D246:
00011A1A 343C 00E0                                  move.w  #$E0,d2
00011A1E                            
00011A1E                            ObjSplats_FaceRight:
00011A1E 323C 0100                                  move.w  #$100,d1
00011A22 08E8 0000 0001                             bset    #0,1(a0)
00011A28 3038 D008                                  move.w  ($FFFFD008).w,d0
00011A2C 9068 0008                                  sub.w   8(a0),d0
00011A30 6400                                       bcc.s   ObjSplats_Move
00011A32 4440                                       neg.w   d0
00011A34 4441                                       neg.w   d1
00011A36 08A8 0000 0001                             bclr    #0,1(a0)
00011A3C                            
00011A3C                            ObjSplats_Move:
00011A3C B042                                       cmp.w   d2,d0
00011A3E 6400                                       bcc.s   ObjSplats_Bounce
00011A40 3141 0010                                  move.w  d1,$10(a0)
00011A44 5428 0024                                  addq.b  #2,$24(a0)
00011A48                            
00011A48                            ObjSplats_Bounce:
00011A48 6100 DD12                                  bsr.w   ObjectFall
00011A4C 117C 0001 001A                             move.b  #1,$1A(a0)
00011A52 4A68 0012                                  tst.w   $12(a0)
00011A56 6B00                                       bmi.s   ObjSplats_Turn
00011A58 117C 0000 001A                             move.b  #0,$1A(a0)
00011A5E 6100 0000                                  bsr.w   ObjFloorDist
00011A62 4A41                                       tst.w   d1
00011A64 6A00                                       bpl.s   ObjSplats_Turn
00011A66 3011                                       move.w  (a1),d0
00011A68 0240 03FF                                  andi.w  #$3FF,d0
00011A6C 0C40 02D2                                  cmpi.w  #$2D2,d0
00011A70 6500                                       bcs.s   ObjSplats_Fall
00011A72 5428 0024                                  addq.b  #2,$24(a0)
00011A76 6000                                       bra.s   ObjSplats_Turn
00011A78                            ; ---------------------------------------------------------------------------
00011A78                            
00011A78                            ObjSplats_Fall:
00011A78 D368 000C                                  add.w   d1,$C(a0)
00011A7C 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011A82                            
00011A82                            ObjSplats_Turn:
00011A82 6100 0000                                  bsr.w   Yad_ChkWall
00011A86 6700                                       beq.s   loc_D2C4
00011A88 4468 0010                                  neg.w   $10(a0)
00011A8C 0868 0000 0001                             bchg    #0,1(a0)
00011A92 0868 0000 0022                             bchg    #0,$22(a0)
00011A98                            
00011A98                            loc_D2C4:
00011A98 6000 FDD6                                  bra.w   RememberState
00011A9C                            ; ---------------------------------------------------------------------------
00011A9C                            
00011A9C                            loc_D2C8:
00011A9C 6100 DCBE                                  bsr.w   ObjectFall
00011AA0 6100 DD06                                  bsr.w   DisplaySprite
00011AA4 4A28 0001                                  tst.b   1(a0)
00011AA8 6A00 DD3E                                  bpl.w   DeleteObject
00011AAC 4E75                                       rts
00011AAC 4E75                                       rts
00011AAE                            Map_Splats:	include	"_maps\Splats.asm"
00011AAE 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011AB0 0000                                       dc.w unk_D31B-Map_Splats_internal
00011AB2 02                         unk_D310:       dc.b   2
00011AB3 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011ABD 02                         unk_D31B:       dc.b   2
00011ABE EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011ABE EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011AC8                            
00011AC8                            		include	"_incObj\50 Yadrin.asm"
00011AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011AC8                            
00011AC8                            
00011AC8                            Yad_ChkWall:
00011AC8 3038 FE04                  		move.w	(v_framecount).w,d0
00011ACC D047                       		add.w	d7,d0
00011ACE 0240 0003                  		andi.w	#3,d0
00011AD2 6600                       		bne.s	loc_F836
00011AD4 7600                       		moveq	#0,d3
00011AD6 1628 0014                  		move.b	obActWid(a0),d3
00011ADA 4A68 0010                  		tst.w	obVelX(a0)
00011ADE 6B00                       		bmi.s	loc_F82C
00011AE0 6100 0000                  		bsr.w	ObjHitWallRight
00011AE4 4A41                       		tst.w	d1
00011AE6 6A00                       		bpl.s	loc_F836
00011AE8                            
00011AE8                            loc_F828:
00011AE8 7001                       		moveq	#1,d0
00011AEA 4E75                       		rts	
00011AEC                            ; ===========================================================================
00011AEC                            
00011AEC                            loc_F82C:
00011AEC 4643                       		not.w	d3
00011AEE 6100 0000                  		bsr.w	ObjHitWallLeft
00011AF2 4A41                       		tst.w	d1
00011AF4 6BF2                       		bmi.s	loc_F828
00011AF6                            
00011AF6                            loc_F836:
00011AF6 7000                       		moveq	#0,d0
00011AF8 4E75                       		rts	
00011AFA                            ; End of function Yad_ChkWall
00011AFA                            
00011AFA                            ; ===========================================================================
00011AFA                            ; ---------------------------------------------------------------------------
00011AFA                            ; Object 50 - Yadrin enemy (SYZ)
00011AFA                            ; ---------------------------------------------------------------------------
00011AFA                            
00011AFA                            Yadrin:
00011AFA 7000                       		moveq	#0,d0
00011AFC 1028 0024                  		move.b	obRoutine(a0),d0
00011B00 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B04 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B08                            ; ===========================================================================
00011B08 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B0A 0000                       		dc.w Yad_Action-Yad_Index
00011B0C                            
00011B0C =00000030                  yad_timedelay:	equ $30
00011B0C                            ; ===========================================================================
00011B0C                            
00011B0C                            Yad_Main:	; Routine 0
00011B0C 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011B14 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011B1A 117C 0004 0001             		move.b	#4,obRender(a0)
00011B20 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011B26 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011B2C 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011B32 117C 0008 0017             		move.b	#8,obWidth(a0)
00011B38 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011B3E 6100 DC1C                  		bsr.w	ObjectFall
00011B42 6100 0000                  		bsr.w	ObjFloorDist
00011B46 4A41                       		tst.w	d1
00011B48 6A00                       		bpl.s	locret_F89E
00011B4A D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011B4E 317C 0000 0012             		move.w	#0,obVelY(a0)
00011B54 5428 0024                  		addq.b	#2,obRoutine(a0)
00011B58 0868 0000 0022             		bchg	#0,obStatus(a0)
00011B5E                            
00011B5E                            	locret_F89E:
00011B5E 4E75                       		rts	
00011B60                            ; ===========================================================================
00011B60                            
00011B60                            Yad_Action:	; Routine 2
00011B60 7000                       		moveq	#0,d0
00011B62 1028 0025                  		move.b	ob2ndRout(a0),d0
00011B66 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011B6A 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011B6E 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011B74 6100 ACE8                  		bsr.w	AnimateSprite
00011B78 6000 FCF6                  		bra.w	RememberState
00011B7C                            ; ===========================================================================
00011B7C 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011B7E 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011B80                            ; ===========================================================================
00011B80                            
00011B80                            Yad_Move:
00011B80 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011B84 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011B86 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011B8A 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011B90 117C 0001 001C             		move.b	#1,obAnim(a0)
00011B96 0868 0000 0022             		bchg	#0,obStatus(a0)
00011B9C 6600                       		bne.s	locret_F8E2
00011B9E 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011BA2                            
00011BA2                            	locret_F8E2:
00011BA2 4E75                       		rts	
00011BA4                            ; ===========================================================================
00011BA4                            
00011BA4                            Yad_FixToFloor:
00011BA4 6100 DBEE                  		bsr.w	SpeedToPos
00011BA8 6100 0000                  		bsr.w	ObjFloorDist
00011BAC 0C41 FFF8                  		cmpi.w	#-8,d1
00011BB0 6D00                       		blt.s	Yad_Pause
00011BB2 0C41 000C                  		cmpi.w	#$C,d1
00011BB6 6C00                       		bge.s	Yad_Pause
00011BB8 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011BBC 6100 FF0A                  		bsr.w	Yad_ChkWall
00011BC0 6600                       		bne.s	Yad_Pause
00011BC2 4E75                       		rts	
00011BC4                            ; ===========================================================================
00011BC4                            
00011BC4                            Yad_Pause:
00011BC4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011BC8 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011BCE 317C 0000 0010             		move.w	#0,obVelX(a0)
00011BD4 117C 0000 001C             		move.b	#0,obAnim(a0)
00011BDA 4E75                       		rts	
00011BDA 4E75                       		rts	
00011BDC                            		include	"_anim\Yadrin.asm"
00011BDC                            ; ---------------------------------------------------------------------------
00011BDC                            ; Animation script - Yadrin enemy
00011BDC                            ; ---------------------------------------------------------------------------
00011BDC 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011BDE 0000                       		dc.w @walk-Ani_Yad
00011BE0                            
00011BE0 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011BE4 00                         		even
00011BE4 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011BF2                            		even
00011BF2                            		even
00011BF2                            Map_Yad:	include	"_maps\Yadrin.asm"
00011BF2                            ; --------------------------------------------------------------------------------
00011BF2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011BF2                            ; --------------------------------------------------------------------------------
00011BF2                            
00011BF2                            SME_4WhIu:	
00011BF2 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011BF6 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011BFA 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011BFE 09                         SME_4WhIu_C:	dc.b 9	
00011BFF F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C04 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C09 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C0E FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C13 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C18 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C1D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C22 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C27 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C2C 09                         SME_4WhIu_3A:	dc.b 9	
00011C2D F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011C32 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C37 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C3C FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C41 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C46 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C4B F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011C50 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011C55 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011C5A 0C                         SME_4WhIu_68:	dc.b $C	
00011C5B EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C60 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011C65 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011C6A 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C6F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C74 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C79 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C7E FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011C83 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011C88 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C8D 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011C92 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011C97 0C                         SME_4WhIu_A5:	dc.b $C	
00011C98 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011C9D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CA2 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CA7 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CAC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CB1 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CB6 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CBB EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CC0 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011CC5 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011CCA 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011CCF 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011CD4 05                         SME_4WhIu_E2:	dc.b 5	
00011CD5 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011CDA 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011CDF EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011CE4 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011CE9 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011CEE 05                         SME_4WhIu_FC:	dc.b 5	
00011CEF F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011CF4 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011CF9 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011CFE F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D03 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D08                            		even
00011D08                            		even
00011D08                            
00011D08                            		include	"_incObj\sub SolidObject.asm"
00011D08                            ; ---------------------------------------------------------------------------
00011D08                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D08                            ;
00011D08                            ; input:
00011D08                            ;	d1 = width
00011D08                            ;	d2 = height / 2 (when jumping)
00011D08                            ;	d3 = height / 2 (when walking)
00011D08                            ;	d4 = x-axis position
00011D08                            ; ---------------------------------------------------------------------------
00011D08                            
00011D08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D08                            
00011D08                            
00011D08                            SolidObject:
00011D08 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D0C 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D10 3401                       		move.w	d1,d2
00011D12 D442                       		add.w	d2,d2
00011D14 43F8 D000                  		lea	(v_player).w,a1
00011D18 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D1E 6600                       		bne.s	@leave		; if yes, branch
00011D20 3029 0008                  		move.w	obX(a1),d0
00011D24 9068 0008                  		sub.w	obX(a0),d0
00011D28 D041                       		add.w	d1,d0
00011D2A 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011D2C B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011D2E 6500                       		bcs.s	@stand		; if not, branch
00011D30                            
00011D30                            	@leave:
00011D30 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011D36 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011D3C 4228 0025                  		clr.b	obSolid(a0)
00011D40 7800                       		moveq	#0,d4
00011D42 4E75                       		rts	
00011D44                            
00011D44                            	@stand:
00011D44 3404                       		move.w	d4,d2
00011D46 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011D4C 7800                       		moveq	#0,d4
00011D4E 4E75                       		rts	
00011D50                            ; ===========================================================================
00011D50                            
00011D50                            SolidObject71:
00011D50 4A28 0025                  		tst.b	obSolid(a0)
00011D54 6700 0000                  		beq.w	loc_FAD0
00011D58 3401                       		move.w	d1,d2
00011D5A D442                       		add.w	d2,d2
00011D5C 43F8 D000                  		lea	(v_player).w,a1
00011D60 0829 0001 0022             		btst	#1,obStatus(a1)
00011D66 6600                       		bne.s	@leave
00011D68 3029 0008                  		move.w	obX(a1),d0
00011D6C 9068 0008                  		sub.w	obX(a0),d0
00011D70 D041                       		add.w	d1,d0
00011D72 6B00                       		bmi.s	@leave
00011D74 B042                       		cmp.w	d2,d0
00011D76 6500                       		bcs.s	@stand
00011D78                            
00011D78                            	@leave:
00011D78 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011D7E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011D84 4228 0025                  		clr.b	obSolid(a0)
00011D88 7800                       		moveq	#0,d4
00011D8A 4E75                       		rts	
00011D8C                            
00011D8C                            	@stand:
00011D8C 3404                       		move.w	d4,d2
00011D8E 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011D94 7800                       		moveq	#0,d4
00011D96 4E75                       		rts	
00011D98                            ; ===========================================================================
00011D98                            
00011D98                            SolidObject2F:
00011D98 43F8 D000                  		lea	(v_player).w,a1
00011D9C 4A28 0001                  		tst.b	obRender(a0)
00011DA0 6A00 0000                  		bpl.w	Solid_Ignore
00011DA4 3029 0008                  		move.w	obX(a1),d0
00011DA8 9068 0008                  		sub.w	obX(a0),d0
00011DAC D041                       		add.w	d1,d0
00011DAE 6B00 0000                  		bmi.w	Solid_Ignore
00011DB2 3601                       		move.w	d1,d3
00011DB4 D643                       		add.w	d3,d3
00011DB6 B043                       		cmp.w	d3,d0
00011DB8 6200 0000                  		bhi.w	Solid_Ignore
00011DBC 3A00                       		move.w	d0,d5
00011DBE 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011DC4 6700                       		beq.s	@notflipped	; if not, branch
00011DC6 4645                       		not.w	d5
00011DC8 DA43                       		add.w	d3,d5
00011DCA                            
00011DCA                            	@notflipped:
00011DCA E24D                       		lsr.w	#1,d5
00011DCC 7600                       		moveq	#0,d3
00011DCE 1632 5000                  		move.b	(a2,d5.w),d3
00011DD2 9612                       		sub.b	(a2),d3
00011DD4 3A28 000C                  		move.w	obY(a0),d5
00011DD8 9A43                       		sub.w	d3,d5
00011DDA 1629 0016                  		move.b	obHeight(a1),d3
00011DDE 4883                       		ext.w	d3
00011DE0 D443                       		add.w	d3,d2
00011DE2 3629 000C                  		move.w	obY(a1),d3
00011DE6 9645                       		sub.w	d5,d3
00011DE8 5843                       		addq.w	#4,d3
00011DEA D642                       		add.w	d2,d3
00011DEC 6B00 0000                  		bmi.w	Solid_Ignore
00011DF0 3802                       		move.w	d2,d4
00011DF2 D844                       		add.w	d4,d4
00011DF4 B644                       		cmp.w	d4,d3
00011DF6 6400 0000                  		bcc.w	Solid_Ignore
00011DFA 6000 0000                  		bra.w	loc_FB0E
00011DFE                            ; ===========================================================================
00011DFE                            
00011DFE                            Solid_ChkEnter:
00011DFE 4A28 0001                  		tst.b	obRender(a0)
00011E02 6A00 0000                  		bpl.w	Solid_Ignore
00011E06                            
00011E06                            loc_FAD0:
00011E06 43F8 D000                  		lea	(v_player).w,a1
00011E0A 3029 0008                  		move.w	obX(a1),d0
00011E0E 9068 0008                  		sub.w	obX(a0),d0
00011E12 D041                       		add.w	d1,d0
00011E14 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011E18 3601                       		move.w	d1,d3
00011E1A D643                       		add.w	d3,d3
00011E1C B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011E1E 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011E22 1629 0016                  		move.b	obHeight(a1),d3
00011E26 4883                       		ext.w	d3
00011E28 D443                       		add.w	d3,d2
00011E2A 3629 000C                  		move.w	obY(a1),d3
00011E2E 9668 000C                  		sub.w	obY(a0),d3
00011E32 5843                       		addq.w	#4,d3
00011E34 D642                       		add.w	d2,d3
00011E36 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011E3A 3802                       		move.w	d2,d4
00011E3C D844                       		add.w	d4,d4
00011E3E B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011E40 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011E44                            
00011E44                            loc_FB0E:
00011E44 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011E48 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011E4C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011E52 6400 0000                  			bcc.w	Solid_Debug
00011E56 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011E5A 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011E5E 3A00                       		move.w	d0,d5
00011E60 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011E62 6400                       		bcc.s	@isright	; if yes, branch
00011E64 D241                       		add.w	d1,d1
00011E66 9041                       		sub.w	d1,d0
00011E68 3A00                       		move.w	d0,d5
00011E6A 4445                       		neg.w	d5
00011E6C                            
00011E6C                            	@isright:
00011E6C 3203                       		move.w	d3,d1
00011E6E B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011E70 6400                       		bcc.s	@isbelow	; if yes, branch
00011E72                            
00011E72 5943                       		subq.w	#4,d3
00011E74 9644                       		sub.w	d4,d3
00011E76 3203                       		move.w	d3,d1
00011E78 4441                       		neg.w	d1
00011E7A                            
00011E7A                            	@isbelow:
00011E7A BA41                       		cmp.w	d1,d5
00011E7C 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011E80 0C41 0004                  		cmpi.w	#4,d1
00011E84 6300                       		bls.s	Solid_SideAir
00011E86 4A40                       		tst.w	d0		; where is Sonic?
00011E88 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011E8A 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011E8C 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011E90 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011E92 6000                       		bra.s	Solid_Left
00011E94                            ; ===========================================================================
00011E94                            
00011E94                            Solid_Right:
00011E94 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011E98 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011E9A                            
00011E9A                            Solid_Left:
00011E9A 337C 0000 0020             		move.w	#0,obInertia(a1)
00011EA0 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011EA6                            
00011EA6                            Solid_Centre:
00011EA6 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011EAA 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011EB0 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011EB2 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011EB8 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011EBE 7801                       		moveq	#1,d4		; return side collision
00011EC0 4E75                       		rts	
00011EC2                            ; ===========================================================================
00011EC2                            
00011EC2                            Solid_SideAir:
00011EC2 6100                       		bsr.s	Solid_NotPushing
00011EC4 7801                       		moveq	#1,d4		; return side collision
00011EC6 4E75                       		rts	
00011EC8                            ; ===========================================================================
00011EC8                            
00011EC8                            Solid_Ignore:
00011EC8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011ECE 6700                       		beq.s	Solid_Debug	; if not, branch
00011ED0 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011ED6 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011ED8 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011EDE 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011EE0 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011EE6 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011EE8 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011EEE                            
00011EEE                            
00011EEE                            Solid_NotPushing:
00011EEE 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011EF4 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011EFA                            
00011EFA                            Solid_Debug:
00011EFA 7800                       		moveq	#0,d4		; return no collision
00011EFC 4E75                       		rts	
00011EFE                            ; ===========================================================================
00011EFE                            
00011EFE                            Solid_TopBottom:
00011EFE 4A43                       		tst.w	d3		; is Sonic below the object?
00011F00 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F02 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F06 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F08 60BE                       		bra.s	Solid_Ignore
00011F0A                            ; ===========================================================================
00011F0A                            
00011F0A                            Solid_Below:
00011F0A 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011F0E 6700                       		beq.s	Solid_Squash	; if not, branch
00011F10 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011F12 4A43                       		tst.w	d3		; is Sonic above the object?
00011F14 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011F16 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F1A 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011F20                            
00011F20                            Solid_TopBtmAir:
00011F20 78FF                       		moveq	#-1,d4
00011F22 4E75                       		rts	
00011F24                            ; ===========================================================================
00011F24                            
00011F24                            Solid_Squash:
00011F24 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F2A 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011F2C 2F08                       		move.l	a0,-(sp)
00011F2E 2049                       		movea.l	a1,a0
00011F30 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011F36 205F                       		movea.l	(sp)+,a0
00011F38 78FF                       		moveq	#-1,d4
00011F3A 4E75                       		rts	
00011F3C                            ; ===========================================================================
00011F3C                            
00011F3C                            Solid_Landed:
00011F3C 5943                       		subq.w	#4,d3
00011F3E 7200                       		moveq	#0,d1
00011F40 1228 0014                  		move.b	obActWid(a0),d1
00011F44 3401                       		move.w	d1,d2
00011F46 D442                       		add.w	d2,d2
00011F48 D269 0008                  		add.w	obX(a1),d1
00011F4C 9268 0008                  		sub.w	obX(a0),d1
00011F50 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011F52 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011F54 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011F56 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011F5A 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011F5C 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F60 5369 000C                  		subq.w	#1,obY(a1)
00011F64 6100                       		bsr.s	Solid_ResetFloor
00011F66 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011F6C 08E8 0003 0022             		bset	#3,obStatus(a0)
00011F72 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011F74 4E75                       		rts	
00011F76                            ; ===========================================================================
00011F76                            
00011F76                            Solid_Miss:
00011F76 7800                       		moveq	#0,d4
00011F78 4E75                       		rts	
00011F7A                            ; End of function SolidObject
00011F7A                            
00011F7A                            
00011F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011F7A                            
00011F7A                            
00011F7A                            Solid_ResetFloor:
00011F7A 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011F80 6700                       		beq.s	@notonobj	; if not, branch
00011F82                            
00011F82 7000                       		moveq	#0,d0
00011F84 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011F88 ED48                       		lsl.w	#6,d0
00011F8A 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011F90 2440                       		movea.l	d0,a2
00011F92 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011F98 422A 0025                  		clr.b	obSolid(a2)
00011F9C                            
00011F9C                            	@notonobj:
00011F9C 3008                       		move.w	a0,d0
00011F9E 0440 D000                  		subi.w	#$D000,d0
00011FA2 EC48                       		lsr.w	#6,d0
00011FA4 0240 007F                  		andi.w	#$7F,d0
00011FA8 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011FAC 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011FB2 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011FB8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011FBE 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FC4 6700                       		beq.s	@notinair	; if not, branch
00011FC6 2F08                       		move.l	a0,-(sp)
00011FC8 2049                       		movea.l	a1,a0
00011FCA 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011FD0 205F                       		movea.l	(sp)+,a0
00011FD2                            
00011FD2                            	@notinair:
00011FD2 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011FD8 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011FDE 4E75                       		rts	
00011FE0                            ; End of function Solid_ResetFloor
00011FE0                            ; End of function Solid_ResetFloor
00011FE0                            
00011FE0                            		include	"_incObj\51 Smashable Green Block.asm"
00011FE0                            ; ---------------------------------------------------------------------------
00011FE0                            ; Object 51 - smashable	green block (MZ)
00011FE0                            ; ---------------------------------------------------------------------------
00011FE0                            
00011FE0                            SmashBlock:
00011FE0 7000                       		moveq	#0,d0
00011FE2 1028 0024                  		move.b	obRoutine(a0),d0
00011FE6 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011FEA 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011FEE 6000 F880                  		bra.w	RememberState
00011FF2                            ; ===========================================================================
00011FF2 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011FF4 0000                       		dc.w Smab_Solid-Smab_Index
00011FF6 0000                       		dc.w Smab_Points-Smab_Index
00011FF8                            ; ===========================================================================
00011FF8                            
00011FF8                            Smab_Main:	; Routine 0
00011FF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00011FFC 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012004 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
0001200A 117C 0004 0001             		move.b	#4,obRender(a0)
00012010 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012016 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001201C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00012022                            
00012022                            Smab_Solid:	; Routine 2
00012022                            
00012022 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00012022 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00012022                            
00012022 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00012028 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
0001202E 323C 001B                  		move.w	#$1B,d1
00012032 343C 0010                  		move.w	#$10,d2
00012036 363C 0011                  		move.w	#$11,d3
0001203A 3828 0008                  		move.w	obX(a0),d4
0001203E 6100 FCC8                  		bsr.w	SolidObject
00012042 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00012048 6600                       		bne.s	@smash		; if yes, branch
0001204A                            
0001204A                            	@notspinning:
0001204A 4E75                       		rts	
0001204C                            ; ===========================================================================
0001204C                            
0001204C                            @smash:
0001204C 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00012052 66F6                       		bne.s	@notspinning	; if not, branch
00012054 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
0001205A 08E9 0002 0022             		bset	#2,obStatus(a1)
00012060 137C 000E 0016             		move.b	#$E,obHeight(a1)
00012066 137C 0007 0017             		move.b	#7,obWidth(a1)
0001206C 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00012072 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00012078 08E9 0001 0022             		bset	#1,obStatus(a1)
0001207E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012084 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001208A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00012090 4228 0025                  		clr.b	obSolid(a0)
00012094 117C 0001 001A             		move.b	#1,obFrame(a0)
0001209A 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
000120A0 7203                       		moveq	#3,d1		; set number of	fragments to 4
000120A2 343C 0038                  		move.w	#$38,d2
000120A6 6100 D2B0                  		bsr.w	SmashObject
000120AA 6100 DC96                  		bsr.w	FindFreeObj
000120AE 6600                       		bne.s	Smab_Points
000120B0 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
000120B4 3368 0008 0008             		move.w	obX(a0),obX(a1)
000120BA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000120C0 3438 F7D0                  		move.w	(v_itembonus).w,d2
000120C4 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
000120C8 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
000120CC 6500                       		bcs.s	@bonus		; if yes, branch
000120CE 7406                       		moveq	#6,d2		; set cap for points
000120D0                            
000120D0                            	@bonus:
000120D0 7000                       		moveq	#0,d0
000120D2 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
000120D6 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
000120DC 6500                       		bcs.s	@givepoints	; if not, branch
000120DE 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000120E2 740A                       		moveq	#10,d2
000120E4                            
000120E4                            	@givepoints:
000120E4 4EB9 0000 0000             		jsr	(AddPoints).l
000120EA E24A                       		lsr.w	#1,d2
000120EC 1342 001A                  		move.b	d2,obFrame(a1)
000120F0                            
000120F0                            Smab_Points:	; Routine 4
000120F0 6100 D6A2                  		bsr.w	SpeedToPos
000120F4 0668 0038 0012             		addi.w	#$38,obVelY(a0)
000120FA 6100 D6AC                  		bsr.w	DisplaySprite
000120FE 4A28 0001                  		tst.b	obRender(a0)
00012102 6A00 D6E4                  		bpl.w	DeleteObject
00012106 4E75                       		rts	
00012108                            ; ===========================================================================
00012108 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001210C FF00 FF00                  		dc.w -$100, -$100
00012110 0200 FE00                  		dc.w $200, -$200
00012114 0100 FF00                  		dc.w $100, -$100
00012118                            
00012118 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012118 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012120                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00012120                            ; --------------------------------------------------------------------------------
00012120                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012120                            ; --------------------------------------------------------------------------------
00012120                            
00012120                            SME_wdHTM:	
00012120 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00012124 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00012126 04                         SME_wdHTM_6:	dc.b 4	
00012127 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
0001212C 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00012131 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00012136 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
0001213B 04                         SME_wdHTM_1B:	dc.b 4	
0001213C F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00012141 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00012146 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
0001214B F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00012150 00                         SME_wdHTM_30:	dc.b 0	
00012152 00                         		even
00012152 00                         		even
00012152                            
00012152                            		include	"_incObj\52 Moving Blocks.asm"
00012152                            ; ---------------------------------------------------------------------------
00012152                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00012152                            ; ---------------------------------------------------------------------------
00012152                            
00012152                            MovingBlock:
00012152 7000                       		moveq	#0,d0
00012154 1028 0024                  		move.b	obRoutine(a0),d0
00012158 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
0001215C 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00012160                            ; ===========================================================================
00012160 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00012162 0000                       		dc.w MBlock_Platform-MBlock_Index
00012164 0000                       		dc.w MBlock_StandOn-MBlock_Index
00012166                            
00012166 =00000030                  mblock_origX:	equ $30
00012166 =00000032                  mblock_origY:	equ $32
00012166                            
00012166 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00012168 2001                       		dc.b $20, 1
0001216A 2002                       		dc.b $20, 2
0001216C 4003                       		dc.b $40, 3
0001216E 3004                       		dc.b $30, 4
00012170                            ; ===========================================================================
00012170                            
00012170                            MBlock_Main:	; Routine 0
00012170 5428 0024                  		addq.b	#2,obRoutine(a0)
00012174 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
0001217C 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012182 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012188 6600                       		bne.s	loc_FE44
0001218A 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012192 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00012198 117C 0007 0016             		move.b	#7,obHeight(a0)
0001219E                            
0001219E                            loc_FE44:
0001219E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000121A4 6600                       		bne.s	loc_FE60
000121A6 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
000121AC 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
000121B2 6700                       		beq.s	loc_FE60	; if yes, branch
000121B4 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
000121BA                            
000121BA                            loc_FE60:
000121BA 117C 0004 0001             		move.b	#4,obRender(a0)
000121C0 7000                       		moveq	#0,d0
000121C2 1028 0028                  		move.b	obSubtype(a0),d0
000121C6 E648                       		lsr.w	#3,d0
000121C8 0240 001E                  		andi.w	#$1E,d0
000121CC 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
000121D0 115A 0014                  		move.b	(a2)+,obActWid(a0)
000121D4 115A 001A                  		move.b	(a2)+,obFrame(a0)
000121D8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000121DE 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000121E4 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
000121EA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000121F0                            
000121F0                            MBlock_Platform: ; Routine 2
000121F0 6100 0000                  		bsr.w	MBlock_Move
000121F4 7200                       		moveq	#0,d1
000121F6 1228 0014                  		move.b	obActWid(a0),d1
000121FA 4EB9 0000 8C24             		jsr	(PlatformObject).l
00012200 6000                       		bra.s	MBlock_ChkDel
00012202                            ; ===========================================================================
00012202                            
00012202                            MBlock_StandOn:	; Routine 4
00012202 7200                       		moveq	#0,d1
00012204 1228 0014                  		move.b	obActWid(a0),d1
00012208 4EB9 0000 8D98             		jsr	(ExitPlatform).l
0001220E 3F28 0008                  		move.w	obX(a0),-(sp)
00012212 6100 0000                  		bsr.w	MBlock_Move
00012216 341F                       		move.w	(sp)+,d2
00012218 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
0001221E                            
0001221E                            MBlock_ChkDel:
0001223C 6000 D56A                  		bra.w	DisplaySprite
00012240                            ; ===========================================================================
00012240                            
00012240                            MBlock_Move:
00012240 7000                       		moveq	#0,d0
00012242 1028 0028                  		move.b	obSubtype(a0),d0
00012246 0240 000F                  		andi.w	#$F,d0
0001224A D040                       		add.w	d0,d0
0001224C 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00012250 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00012254                            ; ===========================================================================
00012254 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00012258 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
0001225C 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00012260 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00012264 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00012268 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
0001226A                            ; ===========================================================================
0001226A                            
0001226A                            MBlock_Type00:
0001226A 4E75                       		rts	
0001226C                            ; ===========================================================================
0001226C                            
0001226C                            MBlock_Type01:
0001226C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012270 323C 0060                  		move.w	#$60,d1
00012274 0828 0000 0022             		btst	#0,obStatus(a0)
0001227A 6700                       		beq.s	loc_FF26
0001227C 4440                       		neg.w	d0
0001227E D041                       		add.w	d1,d0
00012280                            
00012280                            loc_FF26:
00012280 3228 0030                  		move.w	mblock_origX(a0),d1
00012284 9240                       		sub.w	d0,d1
00012286 3141 0008                  		move.w	d1,obX(a0)
0001228A 4E75                       		rts	
0001228C                            ; ===========================================================================
0001228C                            
0001228C                            MBlock_Type02:
0001228C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012292 6600                       		bne.s	MBlock_02_Wait
00012294 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012298                            
00012298                            MBlock_02_Wait:
00012298 4E75                       		rts	
0001229A                            ; ===========================================================================
0001229A                            
0001229A                            MBlock_Type03:
0001229A 7600                       		moveq	#0,d3
0001229C 1628 0014                  		move.b	obActWid(a0),d3
000122A0 6100 0000                  		bsr.w	ObjHitWallRight
000122A4 4A41                       		tst.w	d1		; has the platform hit a wall?
000122A6 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
000122A8 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000122AC 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000122B2 4E75                       		rts	
000122B4                            ; ===========================================================================
000122B4                            
000122B4                            MBlock_03_End:
000122B4 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000122B8 4E75                       		rts	
000122BA                            ; ===========================================================================
000122BA                            
000122BA                            MBlock_Type05:
000122BA 7600                       		moveq	#0,d3
000122BC 1628 0014                  		move.b	obActWid(a0),d3
000122C0 6100 0000                  		bsr.w	ObjHitWallRight
000122C4 4A41                       		tst.w	d1		; has the platform hit a wall?
000122C6 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
000122C8 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000122CC 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000122D2 4E75                       		rts	
000122D4                            ; ===========================================================================
000122D4                            
000122D4                            MBlock_05_End:
000122D4 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
000122D8 4E75                       		rts	
000122DA                            ; ===========================================================================
000122DA                            
000122DA                            MBlock_Type06:
000122DA 6100 D4B8                  		bsr.w	SpeedToPos
000122DE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
000122E4 6100 0000                  		bsr.w	ObjFloorDist
000122E8 4A41                       		tst.w	d1		; has platform hit the floor?
000122EA 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000122EE D368 000C                  		add.w	d1,obY(a0)
000122F2 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
000122F6 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
000122FA                            
000122FA                            locret_FFA0:
000122FA 4E75                       		rts	
000122FC                            ; ===========================================================================
000122FC                            
000122FC                            MBlock_Type07:
000122FC 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00012300 6700                       		beq.s	MBlock_07_ChkDel
00012302 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012306                            
00012306                            MBlock_07_ChkDel:
00012306 588F                       		addq.l	#4,sp
00012326 4E75                       		rts	
00012328                            ; ===========================================================================
00012328                            
00012328                            MBlock_Type08:
00012328 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001232C 323C 0080                  		move.w	#$80,d1
00012330 0828 0000 0022             		btst	#0,obStatus(a0)
00012336 6700                       		beq.s	loc_FFE2
00012338 4440                       		neg.w	d0
0001233A D041                       		add.w	d1,d0
0001233C                            
0001233C                            loc_FFE2:
0001233C 3228 0032                  		move.w	mblock_origY(a0),d1
00012340 9240                       		sub.w	d0,d1
00012342 3141 000C                  		move.w	d1,obY(a0)
00012346 4E75                       		rts	
00012348                            ; ===========================================================================
00012348                            
00012348                            MBlock_Type0A:
00012348 7600                       		moveq	#0,d3
0001234A 1628 0014                  		move.b	obActWid(a0),d3
0001234E D643                       		add.w	d3,d3
00012350 7208                       		moveq	#8,d1
00012352 0828 0000 0022             		btst	#0,obStatus(a0)
00012358 6700                       		beq.s	loc_10004
0001235A 4441                       		neg.w	d1
0001235C 4443                       		neg.w	d3
0001235E                            
0001235E                            loc_10004:
0001235E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012362 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00012364 3028 0008                  		move.w	obX(a0),d0
00012368 9068 0030                  		sub.w	mblock_origX(a0),d0
0001236C B043                       		cmp.w	d3,d0
0001236E 6700                       		beq.s	MBlock_0A_Wait
00012370 D368 0008                  		add.w	d1,obX(a0)	; move platform
00012374 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001237A 4E75                       		rts	
0001237C                            ; ===========================================================================
0001237C                            
0001237C                            MBlock_0A_Wait:
0001237C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012380 6600                       		bne.s	locret_1002E	; if time remains, branch
00012382 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00012388                            
00012388                            locret_1002E:
00012388 4E75                       		rts	
0001238A                            ; ===========================================================================
0001238A                            
0001238A                            MBlock_0A_Back:
0001238A 3028 0008                  		move.w	obX(a0),d0
0001238E 9068 0030                  		sub.w	mblock_origX(a0),d0
00012392 6700                       		beq.s	MBlock_0A_Reset
00012394 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00012398 4E75                       		rts	
0001239A                            ; ===========================================================================
0001239A                            
0001239A                            MBlock_0A_Reset:
0001239A 4268 0036                  		clr.w	$36(a0)
0001239E 5328 0028                  		subq.b	#1,obSubtype(a0)
000123A2 4E75                       		rts	
000123A2 4E75                       		rts	
000123A4                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
000123A4                            ; ---------------------------------------------------------------------------
000123A4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000123A4                            ; ---------------------------------------------------------------------------
000123A4                            Map_MBlock_internal:
000123A4 0000                       		dc.w @mz1-Map_MBlock_internal
000123A6 0000                       		dc.w @mz2-Map_MBlock_internal
000123A8 0000                       		dc.w @sbz-Map_MBlock_internal
000123AA 0000                       		dc.w @sbzwide-Map_MBlock_internal
000123AC 0000                       		dc.w @mz3-Map_MBlock_internal
000123AE 01                         @mz1:		dc.b 1
000123AF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000123B4 02                         @mz2:		dc.b 2
000123B5 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000123BA F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000123BF 04                         @sbz:		dc.b 4
000123C0 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000123C5 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000123CA F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000123CF 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000123D4 04                         @sbzwide:	dc.b 4
000123D5 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000123DA F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000123DF F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000123E4 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000123E9 03                         @mz3:		dc.b 3
000123EA F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000123EF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000123F4 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000123FA 00                         		even
000123FA 00                         		even
000123FA                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
000123FA                            ; ---------------------------------------------------------------------------
000123FA                            ; Sprite mappings - moving block (LZ)
000123FA                            ; ---------------------------------------------------------------------------
000123FA                            Map_MBlockLZ_internal:
000123FA 0000                       		dc.w @0-Map_MBlockLZ_internal
000123FC 01                         @0:		dc.b 1
000123FD F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012402                            		even
00012402                            		even
00012402                            
00012402                            		include	"_incObj\55 Basaran.asm"
00012402                            ; ---------------------------------------------------------------------------
00012402                            ; Object 55 - Basaran enemy (MZ)
00012402                            ; ---------------------------------------------------------------------------
00012402                            
00012402                            Basaran:
00012402 7000                       		moveq	#0,d0
00012404 1028 0024                  		move.b	obRoutine(a0),d0
00012408 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001240C 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012410                            ; ===========================================================================
00012410 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012412 0000                       		dc.w Bas_Action-Bas_Index
00012414                            ; ===========================================================================
00012414                            
00012414                            Bas_Main:	; Routine 0
00012414 5428 0024                  		addq.b	#2,obRoutine(a0)
00012418 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012420 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012426 117C 0004 0001             		move.b	#4,obRender(a0)
0001242C 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012432 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012438 117C 000B 0020             		move.b	#$B,obColType(a0)
0001243E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012444                            
00012444                            Bas_Action:	; Routine 2
00012444 7000                       		moveq	#0,d0
00012446 1028 0025                  		move.b	ob2ndRout(a0),d0
0001244A 323B 0000                  		move.w	@index(pc,d0.w),d1
0001244E 4EBB 1000                  		jsr	@index(pc,d1.w)
00012452 43F9 0000 0000             		lea	(Ani_Bas).l,a1
00012458 6100 A404                  		bsr.w	AnimateSprite
0001245C 6000 F412                  		bra.w	RememberState
00012460                            ; ===========================================================================
00012460 0000                       @index:		dc.w @dropcheck-@index
00012462 0000                       		dc.w @dropfly-@index
00012464 0000                       		dc.w @flapsound-@index
00012466 0000                       		dc.w @flyup-@index
00012468                            ; ===========================================================================
00012468                            
00012468                            @dropcheck:
00012468 343C 0080                  		move.w	#$80,d2
0001246C 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
00012470 6400                       		bcc.s	@nodrop		; if not, branch
00012472 3038 D00C                  		move.w	(v_player+obY).w,d0
00012476 3140 0036                  		move.w	d0,$36(a0)
0001247A 9068 000C                  		sub.w	obY(a0),d0
0001247E 6500                       		bcs.s	@nodrop
00012480 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012484 6400                       		bcc.s	@nodrop		; if not, branch
00012486 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0001248A 6600                       		bne.s	@nodrop		; if yes, branch
0001248C                            
0001248C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012490 D007                       		add.b	d7,d0
00012492 0200 0007                  		andi.b	#7,d0
00012496 6600                       		bne.s	@nodrop
00012498 117C 0001 001C             		move.b	#1,obAnim(a0)
0001249E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000124A2                            
000124A2                            	@nodrop:
000124A2 4E75                       		rts	
000124A4                            ; ===========================================================================
000124A4                            
000124A4                            @dropfly:
000124A4 6100 D2EE                  		bsr.w	SpeedToPos
000124A8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000124AE 343C 0080                  		move.w	#$80,d2
000124B2 6100 0000                  		bsr.w	@chkdistance
000124B6 3028 0036                  		move.w	$36(a0),d0
000124BA 9068 000C                  		sub.w	obY(a0),d0
000124BE 6500                       		bcs.s	@chkdel
000124C0 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
000124C4 6400                       		bcc.s	@dropmore	; if not, branch
000124C6 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
000124CA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
000124D0 117C 0002 001C             		move.b	#2,obAnim(a0)
000124D6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000124DA                            
000124DA                            	@dropmore:
000124DA 4E75                       		rts	
000124DC                            
000124DC                            	@chkdel:
000124DC 4A28 0001                  		tst.b	obRender(a0)
000124E0 6A00 D306                  		bpl.w	DeleteObject
000124E4 4E75                       		rts	
000124E6                            ; ===========================================================================
000124E6                            
000124E6                            @flapsound:
000124E6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000124EA 0200 000F                  		andi.b	#$F,d0
000124EE 6600                       		bne.s	@nosound
000124FA                            
000124FA                            	@nosound:
000124FA 6100 D298                  		bsr.w	SpeedToPos
000124FE 3038 D008                  		move.w	(v_player+obX).w,d0
00012502 9068 0008                  		sub.w	obX(a0),d0
00012506 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012508 4440                       		neg.w	d0
0001250A                            
0001250A                            	@isright:
0001250A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001250E 6500                       		bcs.s	@dontflyup	; if yes, branch
00012510 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012514 D007                       		add.b	d7,d0
00012516 0200 0007                  		andi.b	#7,d0
0001251A 6600                       		bne.s	@dontflyup
0001251C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012520                            
00012520                            @dontflyup:
00012520 4E75                       		rts	
00012522                            ; ===========================================================================
00012522                            
00012522                            @flyup:
00012522 6100 D270                  		bsr.w	SpeedToPos
00012526 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001252C 6100 0000                  		bsr.w	ObjHitCeiling
00012530 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012532 6A00                       		bpl.s	@noceiling	; if not, branch
00012534 9368 000C                  		sub.w	d1,obY(a0)
00012538 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001253E 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012542 4268 0012                  		clr.w	obVelY(a0)
00012546 4228 001C                  		clr.b	obAnim(a0)
0001254A 4228 0025                  		clr.b	ob2ndRout(a0)
0001254E                            
0001254E                            	@noceiling:
0001254E 4E75                       		rts	
00012550                            ; ===========================================================================
00012550                            
00012550                            ; Subroutine to check Sonic's distance from the basaran
00012550                            
00012550                            ; input:
00012550                            ;	d2 = distance to compare
00012550                            
00012550                            ; output:
00012550                            ;	d0 = distance between Sonic and basaran
00012550                            ;	d1 = speed/direction for basaran to fly
00012550                            
00012550                            @chkdistance:
00012550 323C 0100                  		move.w	#$100,d1
00012554 08E8 0000 0022             		bset	#0,obStatus(a0)
0001255A 3038 D008                  		move.w	(v_player+obX).w,d0
0001255E 9068 0008                  		sub.w	obX(a0),d0
00012562 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
00012564 4440                       		neg.w	d0
00012566 4441                       		neg.w	d1
00012568 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001256E                            
0001256E                            	@right:
0001256E B042                       		cmp.w	d2,d0
00012570 4E75                       		rts	
00012572                            ; ===========================================================================
00012572                            ; unused crap
00012572 6100 D220                  		bsr.w	SpeedToPos
00012576 6100 D230                  		bsr.w	DisplaySprite
0001257A 4A28 0001                  		tst.b	obRender(a0)
0001257E 6A00 D268                  		bpl.w	DeleteObject
00012582 4E75                       		rts	
00012582 4E75                       		rts	
00012584                            		include	"_anim\Basaran.asm"
00012584                            ; ---------------------------------------------------------------------------
00012584                            ; Animation script - Basaran enemy
00012584                            ; ---------------------------------------------------------------------------
00012584 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012586 0000                       		dc.w @fall-Ani_Bas
00012588 0000                       		dc.w @fly-Ani_Bas
0001258A 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001258E 00                         		even
0001258E 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012592 00                         		even
00012592 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
00012598                            		even
00012598                            		even
00012598                            Map_Bas:	include	"_maps\Basaran.asm"
00012598                            ; --------------------------------------------------------------------------------
00012598                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012598                            ; --------------------------------------------------------------------------------
00012598                            
00012598                            SME_RhYYA:	
00012598 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001259C 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000125A0 01                         SME_RhYYA_8:	dc.b 1	
000125A1 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
000125A6 03                         SME_RhYYA_E:	dc.b 3	
000125A7 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
000125AC 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000125B1 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000125B6 04                         SME_RhYYA_1E:	dc.b 4	
000125B7 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000125BC 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000125C1 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
000125C6 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
000125CB 04                         SME_RhYYA_33:	dc.b 4	
000125CC F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
000125D1 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
000125D6 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
000125DB FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
000125E0                            		even
000125E0                            		even
000125E0                            
000125E0                            		include	"_incObj\56 Floating Blocks and Doors.asm"
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            
000125E0                            FloatingBlock:
000125E0 7000                       		moveq	#0,d0
000125E2 1028 0024                  		move.b	obRoutine(a0),d0
000125E6 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
000125EA 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
000125EE                            ; ===========================================================================
000125EE 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
000125F0 0000                       		dc.w FBlock_Action-FBlock_Index
000125F2                            
000125F2 =00000034                  fb_origX:	equ $34		; original x-axis position
000125F2 =00000030                  fb_origY:	equ $30		; original y-axis position
000125F2 =0000003A                  fb_height:	equ $3A		; total object height
000125F2 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
000125F2                            
000125F2                            FBlock_Var:	; width/2, height/2
000125F2 1010                       		dc.b  $10, $10	; subtype 0x/8x
000125F4 2020                       		dc.b  $20, $20	; subtype 1x/9x
000125F6 1020                       		dc.b  $10, $20	; subtype 2x/Ax
000125F8 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
000125FA 1027                       		dc.b  $10, $27	; subtype 4x/Cx
000125FC 1010                       		dc.b  $10, $10	; subtype 5x/Dx
000125FE 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012600 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012602                            ; ===========================================================================
00012602                            
00012602                            FBlock_Main:	; Routine 0
00012602 5428 0024                  		addq.b	#2,obRoutine(a0)
00012606 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001260E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012614 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001261A 6600                       		bne.s	@notLZ
0001261C 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012622                            
00012622                            	@notLZ:
00012622 117C 0004 0001             		move.b	#4,obRender(a0)
00012628 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001262E 7000                       		moveq	#0,d0
00012630 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012634 E648                       		lsr.w	#3,d0
00012636 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
0001263A 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001263E 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012642 1152 0016                  		move.b	(a2),obHeight(a0)
00012646 E248                       		lsr.w	#1,d0
00012648 1140 001A                  		move.b	d0,obFrame(a0)
0001264C 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012652 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
00012658 7000                       		moveq	#0,d0
0001265A 1012                       		move.b	(a2),d0
0001265C D040                       		add.w	d0,d0
0001265E 3140 003A                  		move.w	d0,fb_height(a0)
00012662 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012668 6600                       			bne.s	@dontdelete
0001266A 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
00012670 6600                       			bne.s	@notatpos
00012672 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012676 6700                       			beq.s	@dontdelete
00012678 4EF9 0000 F7E8             			jmp	(DeleteObject).l
0001267E                            	@notatpos:
0001267E 4228 0028                  			clr.b	obSubtype(a0)
00012682 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012686 6600                       			bne.s	@dontdelete
00012688 4EF9 0000 F7E8             			jmp	(DeleteObject).l
0001268E                            	@dontdelete:
0001268E 7000                       		moveq	#0,d0
00012690 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012696 6700                       		beq.s	@stillnotLZ
00012698 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001269C 0240 000F                  		andi.w	#$F,d0
000126A0 5140                       		subq.w	#8,d0
000126A2 6500                       		bcs.s	@stillnotLZ
000126A4 E548                       		lsl.w	#2,d0
000126A6 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000126AA 45F2 0000                  		lea	(a2,d0.w),a2
000126AE 4A52                       		tst.w	(a2)
000126B0 6A00                       		bpl.s	@stillnotLZ
000126B2 0868 0000 0022             		bchg	#0,obStatus(a0)
000126B8                            
000126B8                            	@stillnotLZ:
000126B8 1028 0028                  		move.b	obSubtype(a0),d0
000126BC 6A00                       		bpl.s	FBlock_Action
000126BE 0200 000F                  		andi.b	#$F,d0
000126C2 1140 003C                  		move.b	d0,fb_type(a0)
000126C6 117C 0005 0028             		move.b	#5,obSubtype(a0)
000126CC 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
000126D2 6600                       		bne.s	@chkstate
000126D4 117C 000C 0028             		move.b	#$C,obSubtype(a0)
000126DA 317C 0080 003A             		move.w	#$80,fb_height(a0)
000126E0                            
000126E0                            @chkstate:
000126E0 45F8 FC00                  		lea	(v_objstate).w,a2
000126E4 7000                       		moveq	#0,d0
000126E6 1028 0023                  		move.b	obRespawnNo(a0),d0
000126EA 6700                       		beq.s	FBlock_Action
000126EC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000126F2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000126F8 6700                       		beq.s	FBlock_Action
000126FA 5228 0028                  		addq.b	#1,obSubtype(a0)
000126FE 4268 003A                  		clr.w	fb_height(a0)
00012702                            
00012702                            FBlock_Action:	; Routine 2
00012702 3F28 0008                  		move.w	obX(a0),-(sp)
00012706 7000                       		moveq	#0,d0
00012708 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001270C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012710 D040                       		add.w	d0,d0
00012712 323B 0000                  		move.w	@index(pc,d0.w),d1
00012716 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001271A 381F                       		move.w	(sp)+,d4
0001271C 4A28 0001                  		tst.b	obRender(a0)
00012720 6A00                       		bpl.s	@chkdel
00012722 7200                       		moveq	#0,d1
00012724 1228 0014                  		move.b	obActWid(a0),d1
00012728 0641 000B                  		addi.w	#$B,d1
0001272C 7400                       		moveq	#0,d2
0001272E 1428 0016                  		move.b	obHeight(a0),d2
00012732 3602                       		move.w	d2,d3
00012734 5243                       		addq.w	#1,d3
00012736 6100 F5D0                  		bsr.w	SolidObject
0001273A                            
0001273A                            	@chkdel:
00012756                            		@display:
00012756 6000 D050                  			bra.w	DisplaySprite
0001275A                            		@chkdel2:
0001275A 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012760 6600                       			bne.s	@delete
00012762 4A28 0038                  			tst.b	$38(a0)
00012766 66EE                       			bne.s	@display
00012768                            		@delete:
00012768 4EF9 0000 F7E8             			jmp	(DeleteObject).l
0001276E                            ; ===========================================================================
0001276E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012772 0000 0000                  		dc.w @type02-@index, @type03-@index
00012776 0000 0000                  		dc.w @type04-@index, @type05-@index
0001277A 0000 0000                  		dc.w @type06-@index, @type07-@index
0001277E 0000 0000                  		dc.w @type08-@index, @type09-@index
00012782 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012786 0000 0000                  		dc.w @type0C-@index, @type0D-@index
0001278A                            ; ===========================================================================
0001278A                            
0001278A                            @type00:
0001278A                            ; doesn't move
0001278A 4E75                       		rts	
0001278C                            ; ===========================================================================
0001278C                            
0001278C                            @type01:
0001278C                            ; moves side-to-side
0001278C 323C 0040                  		move.w	#$40,d1		; set move distance
00012790 7000                       		moveq	#0,d0
00012792 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012796 6000                       		bra.s	@moveLR
00012798                            ; ===========================================================================
00012798                            
00012798                            @type02:
00012798                            ; moves side-to-side
00012798 323C 0080                  		move.w	#$80,d1		; set move distance
0001279C 7000                       		moveq	#0,d0
0001279E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000127A2                            
000127A2                            	@moveLR:
000127A2 0828 0000 0022             		btst	#0,obStatus(a0)
000127A8 6700                       		beq.s	@noflip
000127AA 4440                       		neg.w	d0
000127AC D041                       		add.w	d1,d0
000127AE                            
000127AE                            	@noflip:
000127AE 3228 0034                  		move.w	fb_origX(a0),d1
000127B2 9240                       		sub.w	d0,d1
000127B4 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000127B8 4E75                       		rts	
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            @type03:
000127BA                            ; moves up/down
000127BA 323C 0040                  		move.w	#$40,d1		; set move distance
000127BE 7000                       		moveq	#0,d0
000127C0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000127C4 6000                       		bra.s	@moveUD
000127C6                            ; ===========================================================================
000127C6                            
000127C6                            @type04:
000127C6                            ; moves up/down
000127C6 323C 0080                  		move.w	#$80,d1		; set move distance
000127CA 7000                       		moveq	#0,d0
000127CC 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000127D0                            
000127D0                            	@moveUD:
000127D0 0828 0000 0022             		btst	#0,obStatus(a0)
000127D6 6700                       		beq.s	@noflip04
000127D8 4440                       		neg.w	d0
000127DA D041                       		add.w	d1,d0
000127DC                            
000127DC                            	@noflip04:
000127DC 3228 0030                  		move.w	fb_origY(a0),d1
000127E0 9240                       		sub.w	d0,d1
000127E2 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
000127E6 4E75                       		rts	
000127E8                            ; ===========================================================================
000127E8                            
000127E8                            @type05:
000127E8                            ; moves up when a switch is pressed
000127E8 4A28 0038                  		tst.b	$38(a0)
000127EC 6600                       		bne.s	@loc_104A4
000127EE 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000127F4 6600                       		bne.s	@aaa		; if not, branch
000127F6 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
000127FC 6600                       		bne.s	@aaa
000127FE 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012802 3038 D008                  		move.w	(v_player+obX).w,d0
00012806 B068 0008                  		cmp.w	obX(a0),d0
0001280A 6400                       		bcc.s	@aaa
0001280C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012812                            
00012812                            	@aaa:
00012812 45F8 F7E0                  		lea	(f_switch).w,a2
00012816 7000                       		moveq	#0,d0
00012818 1028 003C                  		move.b	fb_type(a0),d0
0001281C 0832 0000 0000             		btst	#0,(a2,d0.w)
00012822 6700                       		beq.s	@loc_104AE
00012824 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001282A 6600                       		bne.s	@loc_1049E	; if not, branch
0001282C 0C00 0003                  		cmpi.b	#3,d0
00012830 6600                       		bne.s	@loc_1049E
00012832 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012836                            
00012836                            @loc_1049E:
00012836 117C 0001 0038             		move.b	#1,$38(a0)
0001283C                            
0001283C                            @loc_104A4:
0001283C 4A68 003A                  		tst.w	fb_height(a0)
00012840 6700                       		beq.s	@loc_104C8
00012842 5568 003A                  		subq.w	#2,fb_height(a0)
00012846                            
00012846                            @loc_104AE:
00012846 3028 003A                  		move.w	fb_height(a0),d0
0001284A 0828 0000 0022             		btst	#0,$22(a0)
00012850 6700                       		beq.s	@loc_104BC
00012852 4440                       		neg.w	d0
00012854                            
00012854                            @loc_104BC:
00012854 3228 0030                  		move.w	fb_origY(a0),d1
00012858 D240                       		add.w	d0,d1
0001285A 3141 000C                  		move.w	d1,obY(a0)
0001285E 4E75                       		rts	
00012860                            ; ===========================================================================
00012860                            
00012860                            @loc_104C8:
00012860 5228 0028                  		addq.b	#1,$28(a0)
00012864 4228 0038                  		clr.b	$38(a0)
00012868 45F8 FC00                  		lea	(v_objstate).w,a2
0001286C 7000                       		moveq	#0,d0
0001286E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012872 67D2                       		beq.s	@loc_104AE
00012874 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001287A 60CA                       		bra.s	@loc_104AE
0001287C                            ; ===========================================================================
0001287C                            
0001287C                            @type06:
0001287C 4A28 0038                  		tst.b	$38(a0)
00012880 6600                       		bne.s	@loc_10500
00012882 45F8 F7E0                  		lea	(f_switch).w,a2
00012886 7000                       		moveq	#0,d0
00012888 1028 003C                  		move.b	fb_type(a0),d0
0001288C 4A32 0000                  		tst.b	(a2,d0.w)
00012890 6A00                       		bpl.s	@loc_10512
00012892 117C 0001 0038             		move.b	#1,$38(a0)
00012898                            
00012898                            @loc_10500:
00012898 7000                       		moveq	#0,d0
0001289A 1028 0016                  		move.b	obHeight(a0),d0
0001289E D040                       		add.w	d0,d0
000128A0 B068 003A                  		cmp.w	fb_height(a0),d0
000128A4 6700                       		beq.s	@loc_1052C
000128A6 5468 003A                  		addq.w	#2,fb_height(a0)
000128AA                            
000128AA                            @loc_10512:
000128AA 3028 003A                  		move.w	fb_height(a0),d0
000128AE 0828 0000 0022             		btst	#0,obStatus(a0)
000128B4 6700                       		beq.s	@loc_10520
000128B6 4440                       		neg.w	d0
000128B8                            
000128B8                            @loc_10520:
000128B8 3228 0030                  		move.w	fb_origY(a0),d1
000128BC D240                       		add.w	d0,d1
000128BE 3141 000C                  		move.w	d1,obY(a0)
000128C2 4E75                       		rts	
000128C4                            ; ===========================================================================
000128C4                            
000128C4                            @loc_1052C:
000128C4 5328 0028                  		subq.b	#1,obSubtype(a0)
000128C8 4228 0038                  		clr.b	$38(a0)
000128CC 45F8 FC00                  		lea	(v_objstate).w,a2
000128D0 7000                       		moveq	#0,d0
000128D2 1028 0023                  		move.b	obRespawnNo(a0),d0
000128D6 67D2                       		beq.s	@loc_10512
000128D8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000128DE 60CA                       		bra.s	@loc_10512
000128E0                            ; ===========================================================================
000128E0                            
000128E0                            @type07:
000128E0 4A28 0038                  		tst.b	$38(a0)
000128E4 6600                       		bne.s	@loc_1055E
000128E6 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
000128EA 6700                       		beq.s	@locret_10578
000128EC 117C 0001 0038             		move.b	#1,$38(a0)
000128F2 4268 003A                  		clr.w	fb_height(a0)
000128F6                            
000128F6                            @loc_1055E:
000128F6 5268 0008                  		addq.w	#1,obX(a0)
000128FA 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012900 5268 003A                  		addq.w	#1,fb_height(a0)
00012904 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001290A 6600                       		bne.s	@locret_10578
0001290C 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012912 4228 0038                  			clr.b	$38(a0)
00012916 4228 0028                  		clr.b	obSubtype(a0)
0001291A                            
0001291A                            @locret_10578:
0001291A 4E75                       		rts	
0001291C                            ; ===========================================================================
0001291C                            
0001291C                            @type0C:
0001291C 4A28 0038                  		tst.b	$38(a0)
00012920 6600                       		bne.s	@loc_10598
00012922 45F8 F7E0                  		lea	(f_switch).w,a2
00012926 7000                       		moveq	#0,d0
00012928 1028 003C                  		move.b	fb_type(a0),d0
0001292C 0832 0000 0000             		btst	#0,(a2,d0.w)
00012932 6700                       		beq.s	@loc_105A2
00012934 117C 0001 0038             		move.b	#1,$38(a0)
0001293A                            
0001293A                            @loc_10598:
0001293A 4A68 003A                  		tst.w	fb_height(a0)
0001293E 6700                       		beq.s	@loc_105C0
00012940 5568 003A                  		subq.w	#2,fb_height(a0)
00012944                            
00012944                            @loc_105A2:
00012944 3028 003A                  		move.w	fb_height(a0),d0
00012948 0828 0000 0022             		btst	#0,obStatus(a0)
0001294E 6700                       		beq.s	@loc_105B4
00012950 4440                       		neg.w	d0
00012952 0640 0080                  		addi.w	#$80,d0
00012956                            
00012956                            @loc_105B4:
00012956 3228 0034                  		move.w	fb_origX(a0),d1
0001295A D240                       		add.w	d0,d1
0001295C 3141 0008                  		move.w	d1,obX(a0)
00012960 4E75                       		rts	
00012962                            ; ===========================================================================
00012962                            
00012962                            @loc_105C0:
00012962 5228 0028                  		addq.b	#1,obSubtype(a0)
00012966 4228 0038                  		clr.b	$38(a0)
0001296A 45F8 FC00                  		lea	(v_objstate).w,a2
0001296E 7000                       		moveq	#0,d0
00012970 1028 0023                  		move.b	obRespawnNo(a0),d0
00012974 67CE                       		beq.s	@loc_105A2
00012976 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001297C 60C6                       		bra.s	@loc_105A2
0001297E                            ; ===========================================================================
0001297E                            
0001297E                            @type0D:
0001297E 4A28 0038                  		tst.b	$38(a0)
00012982 6600                       		bne.s	@loc_105F8
00012984 45F8 F7E0                  		lea	(f_switch).w,a2
00012988 7000                       		moveq	#0,d0
0001298A 1028 003C                  		move.b	fb_type(a0),d0
0001298E 4A32 0000                  		tst.b	(a2,d0.w)
00012992 6A00                       		bpl.s	@wtf
00012994 117C 0001 0038             		move.b	#1,$38(a0)
0001299A                            
0001299A                            @loc_105F8:
0001299A 303C 0080                  		move.w	#$80,d0
0001299E B068 003A                  		cmp.w	fb_height(a0),d0
000129A2 6700                       		beq.s	@loc_10624
000129A4 5468 003A                  		addq.w	#2,fb_height(a0)
000129A8                            
000129A8                            @wtf:
000129A8 3028 003A                  		move.w	fb_height(a0),d0
000129AC 0828 0000 0022             		btst	#0,obStatus(a0)
000129B2 6700                       		beq.s	@loc_10618
000129B4 4440                       		neg.w	d0
000129B6 0640 0080                  		addi.w	#$80,d0
000129BA                            
000129BA                            @loc_10618:
000129BA 3228 0034                  		move.w	fb_origX(a0),d1
000129BE D240                       		add.w	d0,d1
000129C0 3141 0008                  		move.w	d1,obX(a0)
000129C4 4E75                       		rts	
000129C6                            ; ===========================================================================
000129C6                            
000129C6                            @loc_10624:
000129C6 5328 0028                  		subq.b	#1,obSubtype(a0)
000129CA 4228 0038                  		clr.b	$38(a0)
000129CE 45F8 FC00                  		lea	(v_objstate).w,a2
000129D2 7000                       		moveq	#0,d0
000129D4 1028 0023                  		move.b	obRespawnNo(a0),d0
000129D8 67CE                       		beq.s	@wtf
000129DA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000129E0 60C6                       		bra.s	@wtf
000129E2                            ; ===========================================================================
000129E2                            
000129E2                            @type08:
000129E2 323C 0010                  		move.w	#$10,d1
000129E6 7000                       		moveq	#0,d0
000129E8 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
000129EC E248                       		lsr.w	#1,d0
000129EE 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
000129F2 6000                       		bra.s	@square
000129F4                            ; ===========================================================================
000129F4                            
000129F4                            @type09:
000129F4 323C 0030                  		move.w	#$30,d1
000129F8 7000                       		moveq	#0,d0
000129FA 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
000129FE 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A02 6000                       		bra.s	@square
00012A04                            ; ===========================================================================
00012A04                            
00012A04                            @type0A:
00012A04 323C 0050                  		move.w	#$50,d1
00012A08 7000                       		moveq	#0,d0
00012A0A 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A0E 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A12 6000                       		bra.s	@square
00012A14                            ; ===========================================================================
00012A14                            
00012A14                            @type0B:
00012A14 323C 0070                  		move.w	#$70,d1
00012A18 7000                       		moveq	#0,d0
00012A1A 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A1E 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012A22                            
00012A22                            @square:
00012A22 4A43                       		tst.w	d3
00012A24 6600                       		bne.s	@loc_1068E
00012A26 5228 0022                  		addq.b	#1,obStatus(a0)
00012A2A 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012A30                            
00012A30                            @loc_1068E:
00012A30 1428 0022                  		move.b	obStatus(a0),d2
00012A34 0202 0003                  		andi.b	#3,d2
00012A38 6600                       		bne.s	@loc_106AE
00012A3A 9041                       		sub.w	d1,d0
00012A3C D068 0034                  		add.w	fb_origX(a0),d0
00012A40 3140 0008                  		move.w	d0,obX(a0)
00012A44 4441                       		neg.w	d1
00012A46 D268 0030                  		add.w	fb_origY(a0),d1
00012A4A 3141 000C                  		move.w	d1,obY(a0)
00012A4E 4E75                       		rts	
00012A50                            ; ===========================================================================
00012A50                            
00012A50                            @loc_106AE:
00012A50 5302                       		subq.b	#1,d2
00012A52 6600                       		bne.s	@loc_106CC
00012A54 5341                       		subq.w	#1,d1
00012A56 9041                       		sub.w	d1,d0
00012A58 4440                       		neg.w	d0
00012A5A D068 0030                  		add.w	fb_origY(a0),d0
00012A5E 3140 000C                  		move.w	d0,obY(a0)
00012A62 5241                       		addq.w	#1,d1
00012A64 D268 0034                  		add.w	fb_origX(a0),d1
00012A68 3141 0008                  		move.w	d1,obX(a0)
00012A6C 4E75                       		rts	
00012A6E                            ; ===========================================================================
00012A6E                            
00012A6E                            @loc_106CC:
00012A6E 5302                       		subq.b	#1,d2
00012A70 6600                       		bne.s	@loc_106EA
00012A72 5341                       		subq.w	#1,d1
00012A74 9041                       		sub.w	d1,d0
00012A76 4440                       		neg.w	d0
00012A78 D068 0034                  		add.w	fb_origX(a0),d0
00012A7C 3140 0008                  		move.w	d0,obX(a0)
00012A80 5241                       		addq.w	#1,d1
00012A82 D268 0030                  		add.w	fb_origY(a0),d1
00012A86 3141 000C                  		move.w	d1,obY(a0)
00012A8A 4E75                       		rts	
00012A8C                            ; ===========================================================================
00012A8C                            
00012A8C                            @loc_106EA:
00012A8C 9041                       		sub.w	d1,d0
00012A8E D068 0030                  		add.w	fb_origY(a0),d0
00012A92 3140 000C                  		move.w	d0,obY(a0)
00012A96 4441                       		neg.w	d1
00012A98 D268 0034                  		add.w	fb_origX(a0),d1
00012A9C 3141 0008                  		move.w	d1,obX(a0)
00012AA0 4E75                       		rts	
00012AA0 4E75                       		rts	
00012AA2                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012AA2                            ; ---------------------------------------------------------------------------
00012AA2                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012AA2                            ; ---------------------------------------------------------------------------
00012AA2                            Map_FBlock_internal:
00012AA2 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012AA4 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012AA6 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012AA8 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012AAA 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012AAC 0000                       		dc.w @slz-Map_FBlock_internal
00012AAE 0000                       		dc.w @lzvert-Map_FBlock_internal
00012AB0 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012AB2 01                         @syz1x1:	dc.b 1
00012AB3 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012AB8 04                         @syz2x2:	dc.b 4
00012AB9 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012ABE E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012AC3 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012AC8 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012ACD 02                         @syz1x2:	dc.b 2
00012ACE E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012AD3 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012AD8 04                         @syzrect2x2:	dc.b 4
00012AD9 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012ADE E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012AE3 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012AE8 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012AED 03                         @syzrect1x3:	dc.b 3
00012AEE D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012AF3 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012AF8 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012AFD 01                         @slz:		dc.b 1
00012AFE F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B03 02                         @lzvert:	dc.b 2
00012B04 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B09 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B0E 04                         @lzhoriz:	dc.b 4
00012B0F F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B14 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B19 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B1E F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012B24 00                         		even
00012B24 00                         		even
00012B24                            
00012B24                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012B24                            ; ---------------------------------------------------------------------------
00012B24                            ; Object 57 - spiked balls (SYZ, LZ)
00012B24                            ; ---------------------------------------------------------------------------
00012B24                            
00012B24                            SpikeBall:
00012B24 7000                       		moveq	#0,d0
00012B26 1028 0024                  		move.b	obRoutine(a0),d0
00012B2A 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012B2E 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012B32                            ; ===========================================================================
00012B32 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012B34 0000                       		dc.w SBall_Move-SBall_Index
00012B36 0000                       		dc.w SBall_Display-SBall_Index
00012B38                            
00012B38 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012B38                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012B38 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012B38 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012B38 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012B38 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012B38                            ; ===========================================================================
00012B38                            
00012B38                            SBall_Main:	; Routine 0
00012B38 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B3C 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012B44 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012B4A 117C 0004 0001             		move.b	#4,obRender(a0)
00012B50 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B56 117C 0008 0014             		move.b	#8,obActWid(a0)
00012B5C 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012B62 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012B68 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012B6E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012B74 6600                       		bne.s	@notlz
00012B76                            
00012B76 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012B7C 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012B82 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012B8A                            
00012B8A                            	@notlz:
00012B8A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B8E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012B92 4881                       		ext.w	d1
00012B94 E741                       		asl.w	#3,d1		; multiply by 8
00012B96 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012B9A 1028 0022                  		move.b	obStatus(a0),d0
00012B9E E418                       		ror.b	#2,d0
00012BA0 0200 00C0                  		andi.b	#$C0,d0
00012BA4 1140 0026                  		move.b	d0,obAngle(a0)
00012BA8 45E8 0029                  		lea	sball_childs(a0),a2
00012BAC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BB0 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012BB4 14FC 0000                  		move.b	#0,(a2)+
00012BB8 3601                       		move.w	d1,d3
00012BBA E94B                       		lsl.w	#4,d3
00012BBC 1143 003C                  		move.b	d3,sball_radius(a0)
00012BC0 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012BC2 6500                       		bcs.s	@fail
00012BC4 0828 0003 0028             		btst	#3,obSubtype(a0)
00012BCA 6700                       		beq.s	@makechain
00012BCC 5341                       		subq.w	#1,d1
00012BCE 6500                       		bcs.s	@fail
00012BD0                            
00012BD0                            @makechain:
00012BD0 6100 D170                  		bsr.w	FindFreeObj
00012BD4 6600                       		bne.s	@fail
00012BD6 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012BDA 3A09                       		move.w	a1,d5		; get child object RAM address
00012BDC 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012BE0 EC4D                       		lsr.w	#6,d5		; divide by $40
00012BE2 0245 007F                  		andi.w	#$7F,d5
00012BE6 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012BE8 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012BEE 1290                       		move.b	0(a0),0(a1)
00012BF0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012BF6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012BFC 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C02 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C08 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C0E 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C14 0403 0010                  		subi.b	#$10,d3
00012C18 1343 003C                  		move.b	d3,sball_radius(a1)
00012C1C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C22 6600                       		bne.s	@notlzagain
00012C24                            
00012C24 4A03                       		tst.b	d3
00012C26 6600                       		bne.s	@notlzagain
00012C28 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012C2E                            
00012C2E                            	@notlzagain:
00012C2E 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012C32                            
00012C32                            	@fail:
00012C32 3A08                       		move.w	a0,d5
00012C34 0445 D000                  		subi.w	#$D000,d5
00012C38 EC4D                       		lsr.w	#6,d5
00012C3A 0245 007F                  		andi.w	#$7F,d5
00012C3E 14C5                       		move.b	d5,(a2)+
00012C40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C46 6600                       		bne.s	SBall_Move
00012C48                            
00012C48 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012C4E 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012C54                            
00012C54                            SBall_Move:	; Routine 2
00012C54 6100 0000                  		bsr.w	@movesub
00012C58 6000 0000                  		bra.w	@chkdel
00012C5C                            ; ===========================================================================
00012C5C                            
00012C5C                            @movesub:
00012C5C 3028 003E                  		move.w	sball_speed(a0),d0
00012C60 D168 0026                  		add.w	d0,obAngle(a0)
00012C64 1028 0026                  		move.b	obAngle(a0),d0
00012C68 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012C6E 3428 0038                  		move.w	sball_origY(a0),d2
00012C72 3628 003A                  		move.w	sball_origX(a0),d3
00012C76 45E8 0029                  		lea	sball_childs(a0),a2
00012C7A 7C00                       		moveq	#0,d6
00012C7C 1C1A                       		move.b	(a2)+,d6
00012C7E                            
00012C7E                            	@loop:
00012C7E 7800                       		moveq	#0,d4
00012C80 181A                       		move.b	(a2)+,d4
00012C82 ED4C                       		lsl.w	#6,d4
00012C84 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012C8A 2244                       		movea.l	d4,a1
00012C8C 7800                       		moveq	#0,d4
00012C8E 1829 003C                  		move.b	sball_radius(a1),d4
00012C92 2A04                       		move.l	d4,d5
00012C94 C9C0                       		muls.w	d0,d4
00012C96 E084                       		asr.l	#8,d4
00012C98 CBC1                       		muls.w	d1,d5
00012C9A E085                       		asr.l	#8,d5
00012C9C D842                       		add.w	d2,d4
00012C9E DA43                       		add.w	d3,d5
00012CA0 3344 000C                  		move.w	d4,obY(a1)
00012CA4 3345 0008                  		move.w	d5,obX(a1)
00012CA8 51CE FFD4                  		dbf	d6,@loop
00012CAC 4E75                       		rts	
00012CAE                            ; ===========================================================================
00012CAE                            
00012CAE                            @chkdel:
00012CCC 6000 CADA                  		bra.w	DisplaySprite
00012CD0                            ; ===========================================================================
00012CD0                            
00012CD0                            @delete:
00012CD0 7400                       		moveq	#0,d2
00012CD2 45E8 0029                  		lea	sball_childs(a0),a2
00012CD6 141A                       		move.b	(a2)+,d2
00012CD8                            
00012CD8                            	@deleteloop:
00012CD8 7000                       		moveq	#0,d0
00012CDA 101A                       		move.b	(a2)+,d0
00012CDC ED48                       		lsl.w	#6,d0
00012CDE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012CE4 2240                       		movea.l	d0,a1
00012CE6 6100 CB02                  		bsr.w	DeleteChild
00012CEA 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012CEE                            
00012CEE 4E75                       		rts	
00012CF0                            ; ===========================================================================
00012CF0                            
00012CF0                            SBall_Display:	; Routine 4
00012CF0 6000 CAB6                  		bra.w	DisplaySprite
00012CF0 6000 CAB6                  		bra.w	DisplaySprite
00012CF4                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012CF4                            ; ---------------------------------------------------------------------------
00012CF4                            ; Sprite mappings - chain of spiked balls (SYZ)
00012CF4                            ; ---------------------------------------------------------------------------
00012CF4                            Map_SBall_internal:
00012CF4 0000                       		dc.w @0-Map_SBall_internal
00012CF6 01                         @0:		dc.b 1
00012CF7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012CFC                            		even
00012CFC                            		even
00012CFC                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012CFC                            ; ---------------------------------------------------------------------------
00012CFC                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012CFC                            ; ---------------------------------------------------------------------------
00012CFC                            Map_SBall2_internal:
00012CFC 0000                       		dc.w @chain-Map_SBall2_internal
00012CFE 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D00 0000                       		dc.w @base-Map_SBall2_internal
00012D02 01                         @chain:		dc.b 1
00012D03 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D08 01                         @spikeball:	dc.b 1
00012D09 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D0E 01                         @base:		dc.b 1
00012D0F F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D14                            		even
00012D14                            		even
00012D14                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D14                            ; ---------------------------------------------------------------------------
00012D14                            ; Object 58 - giant spiked balls (SYZ)
00012D14                            ; ---------------------------------------------------------------------------
00012D14                            
00012D14                            BigSpikeBall:
00012D14 7000                       		moveq	#0,d0
00012D16 1028 0024                  		move.b	obRoutine(a0),d0
00012D1A 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D1E 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012D22                            ; ===========================================================================
00012D22 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012D24 0000                       		dc.w BBall_Move-BBall_Index
00012D26                            
00012D26 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012D26 =00000038                  bball_origY:	equ $38		; original y-axis position
00012D26 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012D26 =0000003E                  bball_speed:	equ $3E		; speed
00012D26                            ; ===========================================================================
00012D26                            
00012D26                            BBall_Main:	; Routine 0
00012D26 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D2A 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012D32 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012D38 117C 0004 0001             		move.b	#4,obRender(a0)
00012D3E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D44 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012D4A 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012D50 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012D56 117C 0086 0020             		move.b	#$86,obColType(a0)
00012D5C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012D60 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012D64 4881                       		ext.w	d1
00012D66 E741                       		asl.w	#3,d1		; multiply by 8
00012D68 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012D6C 1028 0022                  		move.b	obStatus(a0),d0
00012D70 E418                       		ror.b	#2,d0
00012D72 0200 00C0                  		andi.b	#$C0,d0
00012D76 1140 0026                  		move.b	d0,obAngle(a0)
00012D7A 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012D80                            
00012D80                            BBall_Move:	; Routine 2
00012D80 7000                       		moveq	#0,d0
00012D82 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012D86 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012D8A D040                       		add.w	d0,d0
00012D8C 323B 0000                  		move.w	@index(pc,d0.w),d1
00012D90 4EBB 1000                  		jsr	@index(pc,d1.w)
00012DB2 6000 C9F4                  		bra.w	DisplaySprite
00012DB6                            ; ===========================================================================
00012DB6 0000                       @index:		dc.w @type00-@index
00012DB8 0000                       		dc.w @type01-@index
00012DBA 0000                       		dc.w @type02-@index
00012DBC 0000                       		dc.w @type03-@index
00012DBE                            ; ===========================================================================
00012DBE                            
00012DBE                            @type00:
00012DBE 4E75                       		rts	
00012DC0                            ; ===========================================================================
00012DC0                            
00012DC0                            @type01:
00012DC0 323C 0060                  		move.w	#$60,d1
00012DC4 7000                       		moveq	#0,d0
00012DC6 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012DCA 0828 0000 0022             		btst	#0,obStatus(a0)
00012DD0 6700                       		beq.s	@noflip1
00012DD2 4440                       		neg.w	d0
00012DD4 D041                       		add.w	d1,d0
00012DD6                            
00012DD6                            	@noflip1:
00012DD6 3228 003A                  		move.w	bball_origX(a0),d1
00012DDA 9240                       		sub.w	d0,d1
00012DDC 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012DE0 4E75                       		rts	
00012DE2                            ; ===========================================================================
00012DE2                            
00012DE2                            @type02:
00012DE2 323C 0060                  		move.w	#$60,d1
00012DE6 7000                       		moveq	#0,d0
00012DE8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012DEC 0828 0000 0022             		btst	#0,obStatus(a0)
00012DF2 6700                       		beq.s	@noflip2
00012DF4 4440                       		neg.w	d0
00012DF6 0640 0080                  		addi.w	#$80,d0
00012DFA                            
00012DFA                            	@noflip2:
00012DFA 3228 0038                  		move.w	bball_origY(a0),d1
00012DFE 9240                       		sub.w	d0,d1
00012E00 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E04 4E75                       		rts	
00012E06                            ; ===========================================================================
00012E06                            
00012E06                            @type03:
00012E06 3028 003E                  		move.w	bball_speed(a0),d0
00012E0A D168 0026                  		add.w	d0,obAngle(a0)
00012E0E 1028 0026                  		move.b	obAngle(a0),d0
00012E12 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012E18 3428 0038                  		move.w	bball_origY(a0),d2
00012E1C 3628 003A                  		move.w	bball_origX(a0),d3
00012E20 7800                       		moveq	#0,d4
00012E22 1828 003C                  		move.b	bball_radius(a0),d4
00012E26 2A04                       		move.l	d4,d5
00012E28 C9C0                       		muls.w	d0,d4
00012E2A E084                       		asr.l	#8,d4
00012E2C CBC1                       		muls.w	d1,d5
00012E2E E085                       		asr.l	#8,d5
00012E30 D842                       		add.w	d2,d4
00012E32 DA43                       		add.w	d3,d5
00012E34 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012E38 3145 0008                  		move.w	d5,obX(a0)
00012E3C 4E75                       		rts	
00012E3C 4E75                       		rts	
00012E3E                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012E3E                            ; --------------------------------------------------------------------------------
00012E3E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012E3E                            ; --------------------------------------------------------------------------------
00012E3E                            
00012E3E                            SME_u_DKx:	
00012E3E 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012E42 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012E44 05                         SME_u_DKx_6:	dc.b 5	
00012E45 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012E4A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012E4F F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012E54 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012E59 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012E5E 01                         SME_u_DKx_20:	dc.b 1	
00012E5F F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012E64 02                         SME_u_DKx_26:	dc.b 2	
00012E65 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012E6A E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012E70 00                         		even
00012E70 00                         		even
00012E70                            		include	"_incObj\59 SLZ Elevators.asm"
00012E70                            ; ---------------------------------------------------------------------------
00012E70                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012E70                            ; ---------------------------------------------------------------------------
00012E70                            
00012E70                            Elevator:
00012E70 7000                       		moveq	#0,d0
00012E72 1028 0024                  		move.b	obRoutine(a0),d0
00012E76 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012E7A 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012E9C 6000 C90A                  		bra.w	DisplaySprite
00012EA0                            ; ===========================================================================
00012EA0 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012EA2 0000                       		dc.w Elev_Platform-Elev_Index
00012EA4 0000                       		dc.w Elev_Action-Elev_Index
00012EA6 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012EA8                            
00012EA8 =00000032                  elev_origX:	equ $32		; original x-axis position
00012EA8 =00000030                  elev_origY:	equ $30		; original y-axis position
00012EA8 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012EA8                            
00012EA8 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012EAA                            
00012EAA 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012EAC 2001                       		dc.b $20, 1
00012EAE 3401                       		dc.b $34, 1
00012EB0 1003                       		dc.b $10, 3
00012EB2 2003                       		dc.b $20, 3
00012EB4 3403                       		dc.b $34, 3
00012EB6 1401                       		dc.b $14, 1
00012EB8 2401                       		dc.b $24, 1
00012EBA 2C01                       		dc.b $2C, 1
00012EBC 1403                       		dc.b $14, 3
00012EBE 2403                       		dc.b $24, 3
00012EC0 2C03                       		dc.b $2C, 3
00012EC2 2005                       		dc.b $20, 5
00012EC4 2007                       		dc.b $20, 7
00012EC6 3009                       		dc.b $30, 9
00012EC8                            ; ===========================================================================
00012EC8                            
00012EC8                            Elev_Main:	; Routine 0
00012EC8 5428 0024                  		addq.b	#2,obRoutine(a0)
00012ECC 7000                       		moveq	#0,d0
00012ECE 1028 0028                  		move.b	obSubtype(a0),d0
00012ED2 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012ED4 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012ED8 0240 007F                  		andi.w	#$7F,d0
00012EDC C0FC 0006                  		mulu.w	#6,d0
00012EE0 3140 003C                  		move.w	d0,elev_dist(a0)
00012EE4 3140 003E                  		move.w	d0,$3E(a0)
00012EE8 588F                       		addq.l	#4,sp
00012EEA 4E75                       		rts	
00012EEC                            ; ===========================================================================
00012EEC                            
00012EEC                            	@normal:
00012EEC E648                       		lsr.w	#3,d0
00012EEE 0240 001E                  		andi.w	#$1E,d0
00012EF2 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012EF6 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012EFA 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012EFE 7000                       		moveq	#0,d0
00012F00 1028 0028                  		move.b	obSubtype(a0),d0
00012F04 D040                       		add.w	d0,d0
00012F06 0240 001E                  		andi.w	#$1E,d0
00012F0A 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F0E 101A                       		move.b	(a2)+,d0
00012F10 E548                       		lsl.w	#2,d0
00012F12 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F16 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F1A 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012F22 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F28 117C 0004 0001             		move.b	#4,obRender(a0)
00012F2E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F34 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012F3A 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012F40                            
00012F40                            Elev_Platform:	; Routine 2
00012F40 7200                       		moveq	#0,d1
00012F42 1228 0014                  		move.b	obActWid(a0),d1
00012F46 4EB9 0000 8C24             		jsr	(PlatformObject).l
00012F4C 6000 0000                  		bra.w	Elev_Types
00012F50                            ; ===========================================================================
00012F50                            
00012F50                            Elev_Action:	; Routine 4
00012F50 7200                       		moveq	#0,d1
00012F52 1228 0014                  		move.b	obActWid(a0),d1
00012F56 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00012F5C 3F28 0008                  		move.w	obX(a0),-(sp)
00012F60 6100 0000                  		bsr.w	Elev_Types
00012F64 341F                       		move.w	(sp)+,d2
00012F66 4A10                       		tst.b	0(a0)
00012F68 6700                       		beq.s	@deleted
00012F6A 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00012F70                            
00012F70                            	@deleted:
00012F70 4E75                       		rts	
00012F72                            ; ===========================================================================
00012F72                            
00012F72                            Elev_Types:
00012F72 7000                       		moveq	#0,d0
00012F74 1028 0028                  		move.b	obSubtype(a0),d0
00012F78 0240 000F                  		andi.w	#$F,d0
00012F7C D040                       		add.w	d0,d0
00012F7E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F82 4EFB 1000                  		jmp	@index(pc,d1.w)
00012F86                            ; ===========================================================================
00012F86 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012F8A 0000 0000                  		dc.w @type02-@index, @type01-@index
00012F8E 0000 0000                  		dc.w @type04-@index, @type01-@index
00012F92 0000 0000                  		dc.w @type06-@index, @type01-@index
00012F96 0000 0000                  		dc.w @type08-@index, @type09-@index
00012F9A                            ; ===========================================================================
00012F9A                            
00012F9A                            @type00:
00012F9A 4E75                       		rts	
00012F9C                            ; ===========================================================================
00012F9C                            
00012F9C                            @type01:
00012F9C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012FA2 6600                       		bne.s	@notstanding
00012FA4 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012FA8                            
00012FA8                            	@notstanding:
00012FA8 4E75                       		rts	
00012FAA                            ; ===========================================================================
00012FAA                            
00012FAA                            @type02:
00012FAA 6100 0000                  		bsr.w	Elev_Move
00012FAE 3028 0034                  		move.w	$34(a0),d0
00012FB2 4440                       		neg.w	d0
00012FB4 D068 0030                  		add.w	elev_origY(a0),d0
00012FB8 3140 000C                  		move.w	d0,obY(a0)
00012FBC 4E75                       		rts	
00012FBE                            ; ===========================================================================
00012FBE                            
00012FBE                            @type04:
00012FBE 6100 0000                  		bsr.w	Elev_Move
00012FC2 3028 0034                  		move.w	$34(a0),d0
00012FC6 D068 0030                  		add.w	elev_origY(a0),d0
00012FCA 3140 000C                  		move.w	d0,obY(a0)
00012FCE 4E75                       		rts	
00012FD0                            ; ===========================================================================
00012FD0                            
00012FD0                            @type06:
00012FD0 6100 0000                  		bsr.w	Elev_Move
00012FD4 3028 0034                  		move.w	$34(a0),d0
00012FD8 E240                       		asr.w	#1,d0
00012FDA 4440                       		neg.w	d0
00012FDC D068 0030                  		add.w	elev_origY(a0),d0
00012FE0 3140 000C                  		move.w	d0,obY(a0)
00012FE4 3028 0034                  		move.w	$34(a0),d0
00012FE8 D068 0032                  		add.w	elev_origX(a0),d0
00012FEC 3140 0008                  		move.w	d0,obX(a0)
00012FF0 4E75                       		rts	
00012FF2                            ; ===========================================================================
00012FF2                            
00012FF2                            @type08:
00012FF2 6100 0000                  		bsr.w	Elev_Move
00012FF6 3028 0034                  		move.w	$34(a0),d0
00012FFA E240                       		asr.w	#1,d0
00012FFC D068 0030                  		add.w	elev_origY(a0),d0
00013000 3140 000C                  		move.w	d0,obY(a0)
00013004 3028 0034                  		move.w	$34(a0),d0
00013008 4440                       		neg.w	d0
0001300A D068 0032                  		add.w	elev_origX(a0),d0
0001300E 3140 0008                  		move.w	d0,obX(a0)
00013012 4E75                       		rts	
00013014                            ; ===========================================================================
00013014                            
00013014                            @type09:
00013014 6100 0000                  		bsr.w	Elev_Move
00013018 3028 0034                  		move.w	$34(a0),d0
0001301C 4440                       		neg.w	d0
0001301E D068 0030                  		add.w	elev_origY(a0),d0
00013022 3140 000C                  		move.w	d0,obY(a0)
00013026 4A28 0028                  		tst.b	obSubtype(a0)
0001302A 6700 0000                  		beq.w	@typereset
0001302E 4E75                       		rts	
00013030                            ; ===========================================================================
00013030                            
00013030                            	@typereset:
00013030 0828 0003 0022             		btst	#3,obStatus(a0)
00013036 6700                       		beq.s	@delete
00013038 08E9 0001 0022             		bset	#1,obStatus(a1)
0001303E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013044 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001304A                            
0001304A                            	@delete:
0001304A 6000 C79C                  		bra.w	DeleteObject
0001304E                            
0001304E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001304E                            
0001304E                            
0001304E                            Elev_Move:
0001304E 3028 0038                  		move.w	$38(a0),d0
00013052 4A28 003A                  		tst.b	$3A(a0)
00013056 6600                       		bne.s	loc_10CC8
00013058 0C40 0800                  		cmpi.w	#$800,d0
0001305C 6400                       		bcc.s	loc_10CD0
0001305E 0640 0010                  		addi.w	#$10,d0
00013062 6000                       		bra.s	loc_10CD0
00013064                            ; ===========================================================================
00013064                            
00013064                            loc_10CC8:
00013064 4A40                       		tst.w	d0
00013066 6700                       		beq.s	loc_10CD0
00013068 0440 0010                  		subi.w	#$10,d0
0001306C                            
0001306C                            loc_10CD0:
0001306C 3140 0038                  		move.w	d0,$38(a0)
00013070 48C0                       		ext.l	d0
00013072 E180                       		asl.l	#8,d0
00013074 D0A8 0034                  		add.l	$34(a0),d0
00013078 2140 0034                  		move.l	d0,$34(a0)
0001307C 4840                       		swap	d0
0001307E 3428 003C                  		move.w	elev_dist(a0),d2
00013082 B042                       		cmp.w	d2,d0
00013084 6300                       		bls.s	loc_10CF0
00013086 117C 0001 003A             		move.b	#1,$3A(a0)
0001308C                            
0001308C                            loc_10CF0:
0001308C D442                       		add.w	d2,d2
0001308E B042                       		cmp.w	d2,d0
00013090 6600                       		bne.s	locret_10CFA
00013092 4228 0028                  		clr.b	obSubtype(a0)
00013096                            
00013096                            locret_10CFA:
00013096 4E75                       		rts	
00013098                            ; End of function Elev_Move
00013098                            
00013098                            ; ===========================================================================
00013098                            
00013098                            Elev_MakeMulti:	; Routine 6
00013098 5368 003C                  		subq.w	#1,elev_dist(a0)
0001309C 6600                       		bne.s	@chkdel
0001309E 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
000130A4 6100 CC9C                  		bsr.w	FindFreeObj
000130A8 6600                       		bne.s	@chkdel
000130AA 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
000130AE 3368 0008 0008             		move.w	obX(a0),obX(a1)
000130B4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000130BA 137C 000E 0028             		move.b	#$E,obSubtype(a1)
000130C0                            
000130C0                            @chkdel:
000130C0 588F                       		addq.l	#4,sp
000130E0 4E75                       		rts	
000130E0 4E75                       		rts	
000130E2                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
000130E2                            ; ---------------------------------------------------------------------------
000130E2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000130E2                            ; ---------------------------------------------------------------------------
000130E2                            Map_Elev_internal:
000130E2 0000                       		dc.w @elevator-Map_Elev_internal
000130E4 03                         @elevator:	dc.b 3
000130E5 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000130EA F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000130EF F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000130F4                            		even
000130F4                            		even
000130F4                            		include	"_incObj\5A SLZ Circling Platform.asm"
000130F4                            ; ---------------------------------------------------------------------------
000130F4                            ; Object 5A - platforms	moving in circles (SLZ)
000130F4                            ; ---------------------------------------------------------------------------
000130F4                            
000130F4                            CirclingPlatform:
000130F4 7000                       		moveq	#0,d0
000130F6 1028 0024                  		move.b	obRoutine(a0),d0
000130FA 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
000130FE 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00013120 6000 C686                  		bra.w	DisplaySprite
00013124                            ; ===========================================================================
00013124 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013126 0000                       		dc.w Circ_Platform-Circ_Index
00013128 0000                       		dc.w Circ_Action-Circ_Index
0001312A                            
0001312A =00000032                  circ_origX:	equ $32		; original x-axis position
0001312A =00000030                  circ_origY:	equ $30		; original y-axis position
0001312A                            ; ===========================================================================
0001312A                            
0001312A                            Circ_Main:	; Routine 0
0001312A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001312E 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00013136 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001313C 117C 0004 0001             		move.b	#4,obRender(a0)
00013142 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013148 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001314E 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00013154 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
0001315A                            
0001315A                            Circ_Platform:	; Routine 2
0001315A 7200                       		moveq	#0,d1
0001315C 1228 0014                  		move.b	obActWid(a0),d1
00013160 4EB9 0000 8C24             		jsr	(PlatformObject).l
00013166 6000 0000                  		bra.w	Circ_Types
0001316A                            ; ===========================================================================
0001316A                            
0001316A                            Circ_Action:	; Routine 4
0001316A 7200                       		moveq	#0,d1
0001316C 1228 0014                  		move.b	obActWid(a0),d1
00013170 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00013176 3F28 0008                  		move.w	obX(a0),-(sp)
0001317A 6100 0000                  		bsr.w	Circ_Types
0001317E 341F                       		move.w	(sp)+,d2
00013180 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00013186                            ; ===========================================================================
00013186                            
00013186                            Circ_Types:
00013186 7000                       		moveq	#0,d0
00013188 1028 0028                  		move.b	obSubtype(a0),d0
0001318C 0240 000C                  		andi.w	#$C,d0
00013190 E248                       		lsr.w	#1,d0
00013192 323B 0000                  		move.w	@index(pc,d0.w),d1
00013196 4EFB 1000                  		jmp	@index(pc,d1.w)
0001319A                            ; ===========================================================================
0001319A 0000                       @index:		dc.w @type00-@index
0001319C 0000                       		dc.w @type04-@index
0001319E                            ; ===========================================================================
0001319E                            
0001319E                            @type00:
0001319E 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
000131A2 0401 0050                  		subi.b	#$50,d1		; set radius of circle
000131A6 4881                       		ext.w	d1
000131A8 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000131AC 0402 0050                  		subi.b	#$50,d2
000131B0 4882                       		ext.w	d2
000131B2 0828 0000 0028             		btst	#0,obSubtype(a0)
000131B8 6700                       		beq.s	@noshift00a
000131BA 4441                       		neg.w	d1
000131BC 4442                       		neg.w	d2
000131BE                            
000131BE                            	@noshift00a:
000131BE 0828 0001 0028             		btst	#1,obSubtype(a0)
000131C4 6700                       		beq.s	@noshift00b
000131C6 4441                       		neg.w	d1
000131C8 C342                       		exg	d1,d2
000131CA                            
000131CA                            	@noshift00b:
000131CA D268 0032                  		add.w	circ_origX(a0),d1
000131CE 3141 0008                  		move.w	d1,obX(a0)
000131D2 D468 0030                  		add.w	circ_origY(a0),d2
000131D6 3142 000C                  		move.w	d2,obY(a0)
000131DA 4E75                       		rts	
000131DC                            ; ===========================================================================
000131DC                            
000131DC                            @type04:
000131DC 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
000131E0 0401 0050                  		subi.b	#$50,d1
000131E4 4881                       		ext.w	d1
000131E6 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000131EA 0402 0050                  		subi.b	#$50,d2
000131EE 4882                       		ext.w	d2
000131F0 0828 0000 0028             		btst	#0,obSubtype(a0)
000131F6 6700                       		beq.s	@noshift04a
000131F8 4441                       		neg.w	d1
000131FA 4442                       		neg.w	d2
000131FC                            
000131FC                            	@noshift04a:
000131FC 0828 0001 0028             		btst	#1,obSubtype(a0)
00013202 6700                       		beq.s	@noshift04b
00013204 4441                       		neg.w	d1
00013206 C342                       		exg	d1,d2
00013208                            
00013208                            	@noshift04b:
00013208 4441                       		neg.w	d1
0001320A D268 0032                  		add.w	circ_origX(a0),d1
0001320E 3141 0008                  		move.w	d1,obX(a0)
00013212 D468 0030                  		add.w	circ_origY(a0),d2
00013216 3142 000C                  		move.w	d2,obY(a0)
0001321A 4E75                       		rts	
0001321A 4E75                       		rts	
0001321C                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001321C                            ; ---------------------------------------------------------------------------
0001321C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001321C                            ; ---------------------------------------------------------------------------
0001321C                            Map_Circ_internal:
0001321C 0000                       		dc.w @platform-Map_Circ_internal
0001321E 02                         @platform:	dc.b 2
0001321F F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013224 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001322A 00                         		even
0001322A 00                         		even
0001322A                            		include	"_incObj\5B Staircase.asm"
0001322A                            ; ---------------------------------------------------------------------------
0001322A                            ; Object 5B - blocks that form a staircase (SLZ)
0001322A                            ; ---------------------------------------------------------------------------
0001322A                            
0001322A                            Staircase:
0001322A 7000                       		moveq	#0,d0
0001322C 1028 0024                  		move.b	obRoutine(a0),d0
00013230 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013234 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00013256 6000 C550                  		bra.w	DisplaySprite
0001325A                            ; ===========================================================================
0001325A 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
0001325C 0000                       		dc.w Stair_Move-Stair_Index
0001325E 0000                       		dc.w Stair_Solid-Stair_Index
00013260                            
00013260 =00000030                  stair_origX:	equ $30		; original x-axis position
00013260 =00000032                  stair_origY:	equ $32		; original y-axis position
00013260                            
00013260 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00013260                            ; ===========================================================================
00013260                            
00013260                            Stair_Main:	; Routine 0
00013260 5428 0024                  		addq.b	#2,obRoutine(a0)
00013264 7638                       		moveq	#$38,d3
00013266 7801                       		moveq	#1,d4
00013268 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0001326E 6700                       		beq.s	@notflipped	; if not, branch
00013270 763B                       		moveq	#$3B,d3
00013272 78FF                       		moveq	#-1,d4
00013274                            
00013274                            	@notflipped:
00013274 3428 0008                  		move.w	obX(a0),d2
00013278 2248                       		movea.l	a0,a1
0001327A 7203                       		moveq	#3,d1
0001327C 6000                       		bra.s	@makeblocks
0001327E                            ; ===========================================================================
0001327E                            
0001327E                            @loop:
0001327E 6100 CAD8                  		bsr.w	FindNextFreeObj
00013282 6600 0000                  		bne.w	@fail
00013286 137C 0004 0024             		move.b	#4,obRoutine(a1)
0001328C                            
0001328C                            @makeblocks:
0001328C 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013290 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00013298 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001329E 137C 0004 0001             		move.b	#4,obRender(a1)
000132A4 337C 0180 0018             		move.w	#$180,obPriority(a1)
000132AA 137C 0010 0014             		move.b	#$10,obActWid(a1)
000132B0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000132B6 3342 0008                  		move.w	d2,obX(a1)
000132BA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000132C0 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
000132C6 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
000132CC 0642 0020                  		addi.w	#$20,d2
000132D0 1343 0037                  		move.b	d3,$37(a1)
000132D4 2348 003C                  		move.l	a0,stair_parent(a1)
000132D8 D604                       		add.b	d4,d3
000132DA 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
000132DE                            
000132DE                            	@fail:
000132DE                            
000132DE                            Stair_Move:	; Routine 2
000132DE 7000                       		moveq	#0,d0
000132E0 1028 0028                  		move.b	obSubtype(a0),d0
000132E4 0240 0007                  		andi.w	#7,d0
000132E8 D040                       		add.w	d0,d0
000132EA 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
000132EE 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
000132F2                            
000132F2                            Stair_Solid:	; Routine 4
000132F2 2468 003C                  		movea.l	stair_parent(a0),a2
000132F6 7000                       		moveq	#0,d0
000132F8 1028 0037                  		move.b	$37(a0),d0
000132FC 1032 0000                  		move.b	(a2,d0.w),d0
00013300 D068 0032                  		add.w	stair_origY(a0),d0
00013304 3140 000C                  		move.w	d0,obY(a0)
00013308 7200                       		moveq	#0,d1
0001330A 1228 0014                  		move.b	obActWid(a0),d1
0001330E 0641 000B                  		addi.w	#$B,d1
00013312 343C 0010                  		move.w	#$10,d2
00013316 363C 0011                  		move.w	#$11,d3
0001331A 3828 0008                  		move.w	obX(a0),d4
0001331E 6100 E9E8                  		bsr.w	SolidObject
00013322 4A04                       		tst.b	d4
00013324 6A00                       		bpl.s	loc_10F92
00013326 1544 0036                  		move.b	d4,$36(a2)
0001332A                            
0001332A                            loc_10F92:
0001332A 0828 0003 0022             		btst	#3,obStatus(a0)
00013330 6700                       		beq.s	locret_10FA0
00013332 157C 0001 0036             		move.b	#1,$36(a2)
00013338                            
00013338                            locret_10FA0:
00013338 4E75                       		rts	
0001333A                            ; ===========================================================================
0001333A 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
0001333C 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001333E 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00013340 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013342                            ; ===========================================================================
00013342                            
00013342                            Stair_Type00:
00013342 4A68 0034                  		tst.w	$34(a0)
00013346 6600                       		bne.s	loc_10FC0
00013348 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001334E 6600                       		bne.s	locret_10FBE
00013350 317C 001E 0034             		move.w	#$1E,$34(a0)
00013356                            
00013356                            locret_10FBE:
00013356 4E75                       		rts	
00013358                            ; ===========================================================================
00013358                            
00013358                            loc_10FC0:
00013358 5368 0034                  		subq.w	#1,$34(a0)
0001335C 66F8                       		bne.s	locret_10FBE
0001335E 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013362 4E75                       		rts	
00013364                            ; ===========================================================================
00013364                            
00013364                            Stair_Type02:
00013364 4A68 0034                  		tst.w	$34(a0)
00013368 6600                       		bne.s	loc_10FE0
0001336A 4A28 0036                  		tst.b	$36(a0)
0001336E 6A00                       		bpl.s	locret_10FDE
00013370 317C 003C 0034             		move.w	#$3C,$34(a0)
00013376                            
00013376                            locret_10FDE:
00013376 4E75                       		rts	
00013378                            ; ===========================================================================
00013378                            
00013378                            loc_10FE0:
00013378 5368 0034                  		subq.w	#1,$34(a0)
0001337C 6600                       		bne.s	loc_10FEC
0001337E 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013382 4E75                       		rts	
00013384                            ; ===========================================================================
00013384                            
00013384                            loc_10FEC:
00013384 43E8 0038                  		lea	$38(a0),a1
00013388 3028 0034                  		move.w	$34(a0),d0
0001338C E408                       		lsr.b	#2,d0
0001338E 0200 0001                  		andi.b	#1,d0
00013392 12C0                       		move.b	d0,(a1)+
00013394 0A00 0001                  		eori.b	#1,d0
00013398 12C0                       		move.b	d0,(a1)+
0001339A 0A00 0001                  		eori.b	#1,d0
0001339E 12C0                       		move.b	d0,(a1)+
000133A0 0A00 0001                  		eori.b	#1,d0
000133A4 12C0                       		move.b	d0,(a1)+
000133A6 4E75                       		rts	
000133A8                            ; ===========================================================================
000133A8                            
000133A8                            Stair_Type01:
000133A8 43E8 0038                  		lea	$38(a0),a1
000133AC 0C11 0080                  		cmpi.b	#$80,(a1)
000133B0 6700                       		beq.s	locret_11038
000133B2 5211                       		addq.b	#1,(a1)
000133B4 7200                       		moveq	#0,d1
000133B6 1219                       		move.b	(a1)+,d1
000133B8 4841                       		swap	d1
000133BA E289                       		lsr.l	#1,d1
000133BC 2401                       		move.l	d1,d2
000133BE E289                       		lsr.l	#1,d1
000133C0 2601                       		move.l	d1,d3
000133C2 D682                       		add.l	d2,d3
000133C4 4841                       		swap	d1
000133C6 4842                       		swap	d2
000133C8 4843                       		swap	d3
000133CA 12C3                       		move.b	d3,(a1)+
000133CC 12C2                       		move.b	d2,(a1)+
000133CE 12C1                       		move.b	d1,(a1)+
000133D0                            
000133D0                            locret_11038:
000133D0 4E75                       		rts	
000133D2 4E75                       		rts	
000133D2 4E75                       		rts	
000133D4                            Map_Stair:	include	"_maps\Staircase.asm"
000133D4                            ; ---------------------------------------------------------------------------
000133D4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000133D4                            ; ---------------------------------------------------------------------------
000133D4                            Map_Stair_internal:
000133D4 0000                       		dc.w @block-Map_Stair_internal
000133D6 01                         @block:		dc.b 1
000133D7 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000133DC                            		even
000133DC                            		even
000133DC                            		include	"_incObj\5C Pylon.asm"
000133DC                            ; ---------------------------------------------------------------------------
000133DC                            ; Object 5C - metal pylons in foreground (SLZ)
000133DC                            ; ---------------------------------------------------------------------------
000133DC                            
000133DC                            Pylon:
000133DC 7000                       		moveq	#0,d0
000133DE 1028 0024                  		move.b	obRoutine(a0),d0
000133E2 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
000133E6 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
000133EA                            ; ===========================================================================
000133EA 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
000133EC 0000                       		dc.w Pyl_Display-Pyl_Index
000133EE                            ; ===========================================================================
000133EE                            
000133EE                            Pyl_Main:	; Routine 0
000133EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000133F2 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
000133FA 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013400 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013406                            
00013406                            Pyl_Display:	; Routine 2
00013406 2238 F700                  		move.l	(v_screenposx).w,d1
0001340A D281                       		add.l	d1,d1
0001340C 4841                       		swap	d1
0001340E 4441                       		neg.w	d1
00013410 3141 0008                  		move.w	d1,obX(a0)
00013414 2238 F704                  		move.l	(v_screenposy).w,d1
00013418 D281                       		add.l	d1,d1
0001341A 4841                       		swap	d1
0001341C 0241 003F                  		andi.w	#$3F,d1
00013420 4441                       		neg.w	d1
00013422 0641 0100                  		addi.w	#$100,d1
00013426 3141 000A                  		move.w	d1,obScreenY(a0)
0001342A 6000 C37C                  		bra.w	DisplaySprite
0001342A 6000 C37C                  		bra.w	DisplaySprite
0001342E                            Map_Pylon:	include	"_maps\Pylon.asm"
0001342E                            ; ---------------------------------------------------------------------------
0001342E                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001342E                            ; ---------------------------------------------------------------------------
0001342E                            Map_Pylon_internal:
0001342E 0000                       		dc.w @pylon-Map_Pylon_internal
00013430 09                         @pylon:		dc.b 9
00013431 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013436 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001343B C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00013440 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013445 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001344A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001344F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00013454 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00013459 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001345E                            		even
0001345E                            		even
0001345E                            
0001345E                            		include	"_incObj\1B Water Surface.asm"
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            ; Object 1B - water surface (LZ)
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            
0001345E                            WaterSurface:
0001345E 7000                       		moveq	#0,d0
00013460 1028 0024                  		move.b	obRoutine(a0),d0
00013464 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
00013468 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
0001346C                            ; ===========================================================================
0001346C 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
0001346E 0000                       		dc.w Surf_Action-Surf_Index
00013470                            
00013470 =00000030                  surf_origX:	equ $30		; original x-axis position
00013470 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
00013470                            ; ===========================================================================
00013470                            
00013470                            Surf_Main:	; Routine 0
00013470 5428 0024                  		addq.b	#2,obRoutine(a0)
00013474 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
0001347C 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013482 117C 0004 0001             		move.b	#4,obRender(a0)
00013488 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001348E 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013494                            
00013494                            Surf_Action:	; Routine 2
00013494 3238 F700                  		move.w	(v_screenposx).w,d1
00013498 0241 FFE0                  		andi.w	#$FFE0,d1
0001349C D268 0030                  		add.w	surf_origX(a0),d1
000134A0 0838 0000 FE05             		btst	#0,(v_framebyte).w
000134A6 6700                       		beq.s	@even		; branch on even frames
000134A8 0641 0020                  		addi.w	#$20,d1
000134AC                            
000134AC                            	@even:
000134AC 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000134B0 3238 F646                  		move.w	(v_waterpos1).w,d1
000134B4 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000134B8 4A28 0032                  		tst.b	surf_freeze(a0)
000134BC 6600                       		bne.s	@stopped
000134BE 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000134C4 6700                       		beq.s	@animate	; if not, branch
000134C6 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
000134CA 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
000134D0 6000                       		bra.s	@display
000134D2                            ; ===========================================================================
000134D2                            
000134D2                            @stopped:
000134D2 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000134D6 6600                       		bne.s	@display	; if yes, branch
000134D8 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
000134DE 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
000134E2                            
000134E2                            @animate:
000134E2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000134E6 6A00                       		bpl.s	@display
000134E8 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000134EE 5228 001A                  		addq.b	#1,obFrame(a0)
000134F2 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
000134F8 6500                       		bcs.s	@display
000134FA 117C 0000 001A             		move.b	#0,obFrame(a0)
00013500                            
00013500                            @display:
00013500 6000 C2A6                  		bra.w	DisplaySprite
00013500 6000 C2A6                  		bra.w	DisplaySprite
00013504                            Map_Surf:	include	"_maps\Water Surface.asm"
00013504                            ; --------------------------------------------------------------------------------
00013504                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013504                            ; --------------------------------------------------------------------------------
00013504                            
00013504                            SME_LGSi8:	
00013504 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013508 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001350C 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013510 03                         SME_LGSi8_C:	dc.b 3	
00013511 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013516 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001351B F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013520 03                         SME_LGSi8_1C:	dc.b 3	
00013521 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013526 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001352B F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013530 03                         SME_LGSi8_2C:	dc.b 3	
00013531 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013536 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001353B F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013540 06                         SME_LGSi8_3C:	dc.b 6	
00013541 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013546 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
0001354B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013550 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00013555 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001355A F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
0001355F 06                         SME_LGSi8_5B:	dc.b 6	
00013560 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013565 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
0001356A F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001356F F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
00013574 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013579 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
0001357E 06                         SME_LGSi8_7A:	dc.b 6	
0001357F F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013584 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
00013589 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001358E F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013593 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013598 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
0001359E 00                         		even
0001359E 00                         		even
0001359E                            		include	"_incObj\0B Pole that Breaks.asm"
0001359E                            ; ---------------------------------------------------------------------------
0001359E                            ; Object 0B - pole that	breaks (LZ)
0001359E                            ; ---------------------------------------------------------------------------
0001359E                            
0001359E                            Pole:
0001359E 7000                       		moveq	#0,d0
000135A0 1028 0024                  		move.b	obRoutine(a0),d0
000135A4 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000135A8 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
000135AC                            ; ===========================================================================
000135AC 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000135AE 0000                       		dc.w Pole_Action-Pole_Index
000135B0 0000                       		dc.w Pole_Display-Pole_Index
000135B2                            
000135B2 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000135B2 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000135B2                            ; ===========================================================================
000135B2                            
000135B2                            Pole_Main:	; Routine 0
000135B2 5428 0024                  		addq.b	#2,obRoutine(a0)
000135B6 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000135BE 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
000135C4 117C 0004 0001             		move.b	#4,obRender(a0)
000135CA 117C 0008 0014             		move.b	#8,obActWid(a0)
000135D0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000135D6 117C 00E1 0020             		move.b	#$E1,obColType(a0)
000135DC 7000                       		moveq	#0,d0
000135DE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000135E2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000135E6 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
000135EA                            
000135EA                            Pole_Action:	; Routine 2
000135EA 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
000135EE 6700                       		beq.s	@grab		; if not, branch
000135F0 4A68 0030                  		tst.w	pole_time(a0)
000135F4 6700                       		beq.s	@moveup
000135F6 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
000135FA 6600                       		bne.s	@moveup
000135FC 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013602 6000                       		bra.s	@release
00013604                            ; ===========================================================================
00013604                            
00013604                            @moveup:
00013604 43F8 D000                  		lea	(v_player).w,a1
00013608 3028 000C                  		move.w	obY(a0),d0
0001360C 0440 0018                  		subi.w	#$18,d0
00013610 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013616 6700                       		beq.s	@movedown	; if not, branch
00013618 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001361C B069 000C                  		cmp.w	obY(a1),d0
00013620 6500                       		bcs.s	@movedown
00013622 3340 000C                  		move.w	d0,obY(a1)
00013626                            
00013626                            @movedown:
00013626 0640 0024                  		addi.w	#$24,d0
0001362A 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
00013630 6700                       		beq.s	@letgo		; if not, branch
00013632 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013636 B069 000C                  		cmp.w	obY(a1),d0
0001363A 6400                       		bcc.s	@letgo
0001363C 3340 000C                  		move.w	d0,obY(a1)
00013640                            
00013640                            @letgo:
00013640 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013644 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00013648 6700                       		beq.s	Pole_Display	; if not, branch
0001364A                            
0001364A                            @release:
0001364A 4228 0020                  		clr.b	obColType(a0)
0001364E 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013652 4238 F7C8                  		clr.b	(f_lockmulti).w
00013656 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001365A 4228 0032                  		clr.b	pole_grabbed(a0)
0001365E 6000                       		bra.s	Pole_Display
00013660                            ; ===========================================================================
00013660                            
00013660                            @grab:
00013660 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
00013664 6700                       		beq.s	Pole_Display	; if not, branch
00013666 43F8 D000                  		lea	(v_player).w,a1
0001366A 3028 0008                  		move.w	obX(a0),d0
0001366E 0640 0014                  		addi.w	#$14,d0
00013672 B069 0008                  		cmp.w	obX(a1),d0
00013676 6400                       		bcc.s	Pole_Display
00013678 4228 0021                  		clr.b	obColProp(a0)
0001367C 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013682 6400                       		bcc.s	Pole_Display
00013684 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
00013688 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
0001368C 3028 0008                  		move.w	obX(a0),d0
00013690 0640 0014                  		addi.w	#$14,d0
00013694 3340 0008                  		move.w	d0,obX(a1)
00013698 08A9 0000 0022             		bclr	#0,obStatus(a1)
0001369E 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000136A4 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000136AA 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000136B0 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000136B6                            
000136B6                            Pole_Display:	; Routine 4
000136B6 6000 E1B8                  		bra.w	RememberState
000136B6 6000 E1B8                  		bra.w	RememberState
000136BA                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000136BA                            ; ---------------------------------------------------------------------------
000136BA                            ; Sprite mappings - pole that breaks (LZ)
000136BA                            ; ---------------------------------------------------------------------------
000136BA                            Map_Pole_internal:
000136BA 0000                       		dc.w @normal-Map_Pole_internal
000136BC 0000                       		dc.w @broken-Map_Pole_internal
000136BE 02                         @normal:	dc.b 2			; normal pole
000136BF E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000136C4 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000136C9 04                         @broken:	dc.b 4			; broken pole
000136CA E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000136CF F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000136D4 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000136D9 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000136DE                            		even
000136DE                            		even
000136DE                            		include	"_incObj\0C Flapping Door.asm"
000136DE                            ; ---------------------------------------------------------------------------
000136DE                            ; Object 0C - flapping door (LZ)
000136DE                            ; ---------------------------------------------------------------------------
000136DE                            
000136DE                            FlapDoor:
000136DE 7000                       		moveq	#0,d0
000136E0 1028 0024                  		move.b	obRoutine(a0),d0
000136E4 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
000136E8 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
000136EC                            ; ===========================================================================
000136EC 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
000136EE 0000                       		dc.w Flap_OpenClose-Flap_Index
000136F0                            
000136F0 =00000032                  flap_time:	equ $32		; time between opening/closing
000136F0 =00000030                  flap_wait:	equ $30		; time until change
000136F0                            ; ===========================================================================
000136F0                            
000136F0                            Flap_Main:	; Routine 0
000136F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000136F4 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
000136FC 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013702 0028 0004 0001             		ori.b	#4,obRender(a0)
00013708 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001370E 7000                       		moveq	#0,d0
00013710 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013714 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013718 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001371C                            
0001371C                            Flap_OpenClose:	; Routine 2
0001371C 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013720 6A00                       		bpl.s	@wait		; if time remains, branch
00013722 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013728 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001372E 4A28 0001                  		tst.b	obRender(a0)
00013732 6A00                       		bpl.s	@nosound
0001373E                            
0001373E                            	@wait:
0001373E                            	@nosound:
0001373E 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013744 6100 9118                  		bsr.w	AnimateSprite
00013748 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
0001374C 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
00013750 6600                       		bne.s	@display	; if yes, branch
00013752 3038 D008                  		move.w	(v_player+obX).w,d0
00013756 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
0001375A 6400                       		bcc.s	@display	; if yes, branch
0001375C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013762 323C 0013                  		move.w	#$13,d1
00013766 343C 0020                  		move.w	#$20,d2
0001376A 3602                       		move.w	d2,d3
0001376C 5243                       		addq.w	#1,d3
0001376E 3828 0008                  		move.w	obX(a0),d4
00013772 6100 E594                  		bsr.w	SolidObject	; make the door	solid
00013776                            
00013776                            	@display:
00013776 6000 E0F8                  		bra.w	RememberState
00013776 6000 E0F8                  		bra.w	RememberState
0001377A                            		include	"_anim\Flapping Door.asm"
0001377A                            ; ---------------------------------------------------------------------------
0001377A                            ; Animation script - flapping door (LZ)
0001377A                            ; ---------------------------------------------------------------------------
0001377A 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
0001377C 0000                       		dc.w @closing-Ani_Flap
0001377E 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013784 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
0001378A                            		even
0001378A                            		even
0001378A                            Map_Flap:	include	"_maps\Flapping Door.asm"
0001378A                            ; ---------------------------------------------------------------------------
0001378A                            ; Sprite mappings - flapping door (LZ)
0001378A                            ; ---------------------------------------------------------------------------
0001378A                            Map_Flap_internal:
0001378A 0000                       		dc.w @closed-Map_Flap_internal
0001378C 0000                       		dc.w @halfway-Map_Flap_internal
0001378E 0000                       		dc.w @open-Map_Flap_internal
00013790 02                         @closed:	dc.b 2
00013791 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013796 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001379B 02                         @halfway:	dc.b 2
0001379C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000137A1 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000137A6 02                         @open:		dc.b 2
000137A7 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000137AC 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000137B2 00                         		even
000137B2 00                         		even
000137B2                            
000137B2                            		include	"_incObj\71 Invisible Barriers.asm"
000137B2                            ; ---------------------------------------------------------------------------
000137B2                            ; Object 71 - invisible	solid barriers
000137B2                            ; ---------------------------------------------------------------------------
000137B2                            
000137B2                            Invisibarrier:
000137B2 7000                       		moveq	#0,d0
000137B4 1028 0024                  		move.b	obRoutine(a0),d0
000137B8 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000137BC 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000137C0                            ; ===========================================================================
000137C0 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
000137C2 0000                       		dc.w Invis_Solid-Invis_Index
000137C4                            
000137C4 =00000016                  invis_height:	equ $16		; height in pixels
000137C4                            ; ===========================================================================
000137C4                            
000137C4                            Invis_Main:	; Routine 0
000137C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000137C8 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
000137D0 317C 8680 0002             		move.w	#$8680,obGfx(a0)
000137D6 0028 0004 0001             		ori.b	#4,obRender(a0)
000137DC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000137E0 1200                       		move.b	d0,d1
000137E2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000137E6 0640 0010                  		addi.w	#$10,d0
000137EA E248                       		lsr.w	#1,d0
000137EC 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
000137F0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000137F4 5241                       		addq.w	#1,d1
000137F6 E749                       		lsl.w	#3,d1
000137F8 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
000137FC                            
000137FC                            Invis_Solid:	; Routine 2
000137FC 6100 C338                  		bsr.w	ChkObjectVisible
00013800 6600                       		bne.s	@chkdel
00013802 7200                       		moveq	#0,d1
00013804 1228 0014                  		move.b	obActWid(a0),d1
00013808 0641 000B                  		addi.w	#$B,d1
0001380C 7400                       		moveq	#0,d2
0001380E 1428 0016                  		move.b	invis_height(a0),d2
00013812 3602                       		move.w	d2,d3
00013814 5243                       		addq.w	#1,d3
00013816 3828 0008                  		move.w	obX(a0),d4
0001381A 6100 E534                  		bsr.w	SolidObject71
0001381E                            
0001381E                            @chkdel:
0001383A 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001383E 6700                       		beq.s	@nodisplay	; if not, branch
00013840 4EF9 0000 F7A8             		jmp	(DisplaySprite).l	; if yes, display the object
00013846                            
00013846                            	@nodisplay:
00013846 4E75                       		rts	
00013848                            
00013848                            	@delete:
00013848 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00013848 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001384E                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
0001384E                            ; --------------------------------------------------------------------------------
0001384E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001384E                            ; --------------------------------------------------------------------------------
0001384E                            
0001384E                            SME_t60cE:	
0001384E 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013852 0000                       		dc.w SME_t60cE_30-SME_t60cE	
00013854 04                         SME_t60cE_6:	dc.b 4	
00013855 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
0001385A 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
0001385F F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
00013864 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
00013869 04                         SME_t60cE_1B:	dc.b 4	
0001386A E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
0001386F E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
00013874 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
00013879 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
0001387E 04                         SME_t60cE_30:	dc.b 4	
0001387F E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013884 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
00013889 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
0001388E 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013894 00                         		even
00013894 00                         		even
00013894                            
00013894                            		include	"_incObj\5D Fan.asm"
00013894                            ; ---------------------------------------------------------------------------
00013894                            ; Object 5D - fans (SLZ)
00013894                            ; ---------------------------------------------------------------------------
00013894                            
00013894                            Fan:
00013894 7000                       		moveq	#0,d0
00013896 1028 0024                  		move.b	obRoutine(a0),d0
0001389A 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
0001389E 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000138A2                            ; ===========================================================================
000138A2 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
000138A4 0000                       		dc.w Fan_Delay-Fan_Index
000138A6                            
000138A6 =00000030                  fan_time:	equ $30		; time between switching on/off
000138A6 =00000032                  fan_switch:	equ $32		; on/off switch
000138A6                            ; ===========================================================================
000138A6                            
000138A6                            Fan_Main:	; Routine 0
000138A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000138AA 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000138B2 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000138B8 0028 0004 0001             		ori.b	#4,obRender(a0)
000138BE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000138C4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000138CA                            
000138CA                            Fan_Delay:	; Routine 2
000138CA 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
000138D0 6600                       		bne.s	@blow		; if yes, branch
000138D2 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
000138D6 6A00                       		bpl.s	@blow		; if time remains, branch
000138D8 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
000138DE 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
000138E4 6700                       		beq.s	@blow		; if fan is off, branch
000138E6 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
000138EC                            
000138EC                            @blow:
000138EC 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
000138F0 6600 0000                  		bne.w	@chkdel		; if not, branch
000138F4 43F8 D000                  		lea	(v_player).w,a1
000138F8 3029 0008                  		move.w	obX(a1),d0
000138FC 9068 0008                  		sub.w	obX(a0),d0
00013900 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013906 6600                       		bne.s	@chksonic	; if yes, branch
00013908 4440                       		neg.w	d0
0001390A                            
0001390A                            @chksonic:
0001390A 0640 0050                  		addi.w	#$50,d0
0001390E 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013912 6400                       		bcc.s	@animate	; if yes, branch
00013914 3229 000C                  		move.w	obY(a1),d1
00013918 0641 0060                  		addi.w	#$60,d1
0001391C 9268 000C                  		sub.w	obY(a0),d1
00013920 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013922 0C41 0070                  		cmpi.w	#$70,d1
00013926 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013928 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001392C 6400                       		bcc.s	@faraway	; if yes, branch
0001392E 4640                       		not.w	d0
00013930 D040                       		add.w	d0,d0
00013932                            
00013932                            	@faraway:
00013932 0640 0060                  		addi.w	#$60,d0
00013936 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001393C 6600                       		bne.s	@right		; if yes, branch
0001393E 4440                       		neg.w	d0
00013940                            
00013940                            	@right:
00013940 4400                       		neg.b	d0
00013942 E840                       		asr.w	#4,d0
00013944 0828 0000 0028             		btst	#0,obSubtype(a0)
0001394A 6700                       		beq.s	@movesonic
0001394C 4440                       		neg.w	d0
0001394E                            
0001394E                            	@movesonic:
0001394E D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013952                            
00013952                            @animate:
00013952 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013956 6A00                       		bpl.s	@chkdel
00013958 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
0001395E 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013962 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00013968 6500                       		bcs.s	@noreset
0001396A 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013970                            
00013970                            	@noreset:
00013970 7000                       		moveq	#0,d0
00013972 0828 0000 0028             		btst	#0,obSubtype(a0)
00013978 6700                       		beq.s	@noflip
0001397A 7002                       		moveq	#2,d0
0001397C                            
0001397C                            	@noflip:
0001397C D028 001B                  		add.b	obAniFrame(a0),d0
00013980 1140 001A                  		move.b	d0,obFrame(a0)
00013984                            
00013984                            @chkdel:
00013984 6100 BE22                  		bsr.w	DisplaySprite
000139A6 4E75                       		rts	
000139A6 4E75                       		rts	
000139A8                            Map_Fan:	include	"_maps\Fan.asm"
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            ; Sprite mappings - fans (SLZ)
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            Map_Fan_internal:
000139A8 0000                       		dc.w @fan1-Map_Fan_internal
000139AA 0000                       		dc.w @fan2-Map_Fan_internal
000139AC 0000                       		dc.w @fan3-Map_Fan_internal
000139AE 0000                       		dc.w @fan2-Map_Fan_internal
000139B0 0000                       		dc.w @fan1-Map_Fan_internal
000139B2 02                         @fan1:		dc.b 2
000139B3 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000139B8 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000139BD 02                         @fan2:		dc.b 2
000139BE F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000139C3 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000139C8 02                         @fan3:		dc.b 2
000139C9 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000139CE 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000139D4 00                         		even
000139D4 00                         		even
000139D4                            		include	"_incObj\5E Seesaw.asm"
000139D4                            ; ---------------------------------------------------------------------------
000139D4                            ; Object 5E - seesaws (SLZ)
000139D4                            ; ---------------------------------------------------------------------------
000139D4                            
000139D4                            Seesaw:
000139D4 7000                       		moveq	#0,d0
000139D6 1028 0024                  		move.b	obRoutine(a0),d0
000139DA 323B 0000                  		move.w	See_Index(pc,d0.w),d1
000139DE 4EBB 1000                  		jsr	See_Index(pc,d1.w)
000139E2 3028 0000                  		move.w	see_origX(a0),d0
000139E6 0240 FF80                  		andi.w	#$FF80,d0
000139EA 3238 F700                  		move.w	(v_screenposx).w,d1
000139EE 0441 0080                  		subi.w	#$80,d1
000139F2 0241 FF80                  		andi.w	#$FF80,d1
000139F6 9041                       		sub.w	d1,d0
000139F8 6B00 BDEE                  		bmi.w	DeleteObject
000139FC 0C40 0280                  		cmpi.w	#$280,d0
00013A00 6200 BDE6                  		bhi.w	DeleteObject
00013A04 6000 BDA2                  		bra.w	DisplaySprite
00013A08                            ; ===========================================================================
00013A08 0000                       See_Index:	dc.w See_Main-See_Index
00013A0A 0000                       		dc.w See_Slope-See_Index
00013A0C 0000                       		dc.w See_Slope2-See_Index
00013A0E 0000                       		dc.w See_Spikeball-See_Index
00013A10 0000                       		dc.w See_MoveSpike-See_Index
00013A12 0000                       		dc.w See_SpikeFall-See_Index
00013A14                            
00013A14 =00000030                  see_origX:	equ $30		; original x-axis position
00013A14 =00000034                  see_origY:	equ $34		; original y-axis position
00013A14 =00000038                  see_speed:	equ $38		; speed of collision
00013A14 =0000003A                  see_frame:	equ $3A		; 
00013A14 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A14                            ; ===========================================================================
00013A14                            
00013A14                            See_Main:	; Routine 0
00013A14 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A18 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A20 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013A26 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A2C 117C 0004 0018             		move.b	#4,obPriority(a0)
00013A32 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013A38 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013A3E 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013A42 6600                       		bne.s	@noball		; if not, branch
00013A44                            
00013A44 6100 C312                  		bsr.w	FindNextFreeObj
00013A48 6600                       		bne.s	@noball
00013A4A 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013A4E 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013A52 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013A58 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013A5E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013A64 2348 003C                  		move.l	a0,see_parent(a1)
00013A68                            
00013A68                            	@noball:
00013A68 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013A6E 6700                       		beq.s	@noflip		; if not, branch
00013A70 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013A76                            
00013A76                            	@noflip:
00013A76 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013A7C                            
00013A7C                            See_Slope:	; Routine 2
00013A7C 1228 003A                  		move.b	see_frame(a0),d1
00013A80 6100 0000                  		bsr.w	See_ChgFrame
00013A84 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013A8A 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013A90 6700                       		beq.s	@notflat	; if not, branch
00013A92 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013A98                            
00013A98                            	@notflat:
00013A98 43F8 D000                  		lea	(v_player).w,a1
00013A9C 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013AA2 323C 0030                  		move.w	#$30,d1
00013AA6 4EB9 0000 8CF8             		jsr	(SlopeObject).l
00013AAC 4E75                       		rts	
00013AAE                            ; ===========================================================================
00013AAE                            
00013AAE                            See_Slope2:	; Routine 4
00013AAE 6100 0000                  		bsr.w	See_ChkSide
00013AB2 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013AB8 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013ABE 6700                       		beq.s	@notflat	; if not, branch
00013AC0 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013AC6                            
00013AC6                            	@notflat:
00013AC6 323C 0030                  		move.w	#$30,d1
00013ACA 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00013AD0 323C 0030                  		move.w	#$30,d1
00013AD4 3428 0008                  		move.w	obX(a0),d2
00013AD8 4EB9 0000 9D32             		jsr	(SlopeObject2).l
00013ADE 4E75                       		rts	
00013AE0                            ; ===========================================================================
00013AE0                            
00013AE0                            See_ChkSide:
00013AE0 7202                       		moveq	#2,d1
00013AE2 43F8 D000                  		lea	(v_player).w,a1
00013AE6 3028 0008                  		move.w	obX(a0),d0
00013AEA 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013AEE 6400                       		bcc.s	@leftside	; if yes, branch
00013AF0 4440                       		neg.w	d0
00013AF2 7200                       		moveq	#0,d1
00013AF4                            
00013AF4                            	@leftside:
00013AF4 0C40 0008                  		cmpi.w	#8,d0
00013AF8 6400                       		bcc.s	See_ChgFrame
00013AFA 7201                       		moveq	#1,d1
00013AFC                            
00013AFC                            See_ChgFrame:
00013AFC 1028 001A                  		move.b	obFrame(a0),d0
00013B00 B001                       		cmp.b	d1,d0		; does frame need to change?
00013B02 6700                       		beq.s	@noflip		; if not, branch
00013B04 6400                       		bcc.s	@loc_11772
00013B06 5400                       		addq.b	#2,d0
00013B08                            
00013B08                            	@loc_11772:
00013B08 5300                       		subq.b	#1,d0
00013B0A 1140 001A                  		move.b	d0,obFrame(a0)
00013B0E 1141 003A                  		move.b	d1,see_frame(a0)
00013B12 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B18 0828 0001 001A             		btst	#1,obFrame(a0)
00013B1E 6700                       		beq.s	@noflip
00013B20 08E8 0000 0001             		bset	#0,obRender(a0)
00013B26                            
00013B26                            	@noflip:
00013B26 4E75                       		rts	
00013B28                            ; ===========================================================================
00013B28                            
00013B28                            See_Spikeball:	; Routine 6
00013B28 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B2C 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013B34 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013B3A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013B40 117C 0004 0018             		move.b	#4,obPriority(a0)
00013B46 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013B4C 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013B52 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013B58 0668 0028 0008             		addi.w	#$28,obX(a0)
00013B5E 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013B64 117C 0001 001A             		move.b	#1,obFrame(a0)
00013B6A 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013B70 6700                       		beq.s	See_MoveSpike	; if not, branch
00013B72 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013B78 117C 0002 003A             		move.b	#2,see_frame(a0)
00013B7E                            
00013B7E                            See_MoveSpike:	; Routine 8
00013B7E 2268 003C                  		movea.l	see_parent(a0),a1
00013B82 7000                       		moveq	#0,d0
00013B84 1028 003A                  		move.b	see_frame(a0),d0
00013B88 9029 003A                  		sub.b	see_frame(a1),d0
00013B8C 6700                       		beq.s	loc_1183E
00013B8E 6400                       		bcc.s	loc_117FC
00013B90 4400                       		neg.b	d0
00013B92                            
00013B92                            loc_117FC:
00013B92 323C F7E8                  		move.w	#-$818,d1
00013B96 343C FEEC                  		move.w	#-$114,d2
00013B9A 0C00 0001                  		cmpi.b	#1,d0
00013B9E 6700                       		beq.s	loc_11822
00013BA0 323C F510                  		move.w	#-$AF0,d1
00013BA4 343C FF34                  		move.w	#-$CC,d2
00013BA8 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013BAE 6D00                       		blt.s	loc_11822
00013BB0 323C F200                  		move.w	#-$E00,d1
00013BB4 343C FF60                  		move.w	#-$A0,d2
00013BB8                            
00013BB8                            loc_11822:
00013BB8 3141 0012                  		move.w	d1,obVelY(a0)
00013BBC 3142 0010                  		move.w	d2,obVelX(a0)
00013BC0 3028 0008                  		move.w	obX(a0),d0
00013BC4 9068 0030                  		sub.w	see_origX(a0),d0
00013BC8 6400                       		bcc.s	loc_11838
00013BCA 4468 0010                  		neg.w	obVelX(a0)
00013BCE                            
00013BCE                            loc_11838:
00013BCE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BD2 6000                       		bra.s	See_SpikeFall
00013BD4                            ; ===========================================================================
00013BD4                            
00013BD4                            loc_1183E:
00013BD4 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013BDA 7000                       		moveq	#0,d0
00013BDC 1029 001A                  		move.b	obFrame(a1),d0
00013BE0 343C 0028                  		move.w	#$28,d2
00013BE4 3228 0008                  		move.w	obX(a0),d1
00013BE8 9268 0030                  		sub.w	see_origX(a0),d1
00013BEC 6400                       		bcc.s	loc_1185C
00013BEE 4442                       		neg.w	d2
00013BF0 5440                       		addq.w	#2,d0
00013BF2                            
00013BF2                            loc_1185C:
00013BF2 D040                       		add.w	d0,d0
00013BF4 3228 0034                  		move.w	see_origY(a0),d1
00013BF8 D272 0000                  		add.w	(a2,d0.w),d1
00013BFC 3141 000C                  		move.w	d1,obY(a0)
00013C00 D468 0030                  		add.w	see_origX(a0),d2
00013C04 3142 0008                  		move.w	d2,obX(a0)
00013C08 4268 000E                  		clr.w	obY+2(a0)
00013C0C 4268 000A                  		clr.w	obX+2(a0)
00013C10 4E75                       		rts	
00013C12                            ; ===========================================================================
00013C12                            
00013C12                            See_SpikeFall:	; Routine $A
00013C12 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C16 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C18 6100 BB42                  		bsr.w	ObjectFall
00013C1C 3028 0034                  		move.w	see_origY(a0),d0
00013C20 0440 002F                  		subi.w	#$2F,d0
00013C24 B068 000C                  		cmp.w	obY(a0),d0
00013C28 6E00                       		bgt.s	locret_11898
00013C2A 6100 BB30                  		bsr.w	ObjectFall
00013C2E                            
00013C2E                            locret_11898:
00013C2E 4E75                       		rts	
00013C30                            ; ===========================================================================
00013C30                            
00013C30                            loc_1189A:
00013C30 6100 BB2A                  		bsr.w	ObjectFall
00013C34 2268 003C                  		movea.l	see_parent(a0),a1
00013C38 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C3E 7000                       		moveq	#0,d0
00013C40 1029 001A                  		move.b	obFrame(a1),d0
00013C44 3228 0008                  		move.w	obX(a0),d1
00013C48 9268 0030                  		sub.w	see_origX(a0),d1
00013C4C 6400                       		bcc.s	loc_118BA
00013C4E 5440                       		addq.w	#2,d0
00013C50                            
00013C50                            loc_118BA:
00013C50 D040                       		add.w	d0,d0
00013C52 3228 0034                  		move.w	see_origY(a0),d1
00013C56 D272 0000                  		add.w	(a2,d0.w),d1
00013C5A B268 000C                  		cmp.w	obY(a0),d1
00013C5E 6E00                       		bgt.s	locret_11938
00013C60 2268 003C                  		movea.l	see_parent(a0),a1
00013C64 7202                       		moveq	#2,d1
00013C66 4A68 0010                  		tst.w	obVelX(a0)
00013C6A 6B00                       		bmi.s	See_Spring
00013C6C 7200                       		moveq	#0,d1
00013C6E                            
00013C6E                            See_Spring:
00013C6E 1341 003A                  		move.b	d1,$3A(a1)
00013C72 1141 003A                  		move.b	d1,see_frame(a0)
00013C76 B229 001A                  		cmp.b	obFrame(a1),d1
00013C7A 6700                       		beq.s	loc_1192C
00013C7C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013C82 6700                       		beq.s	loc_1192C
00013C84 4229 0025                  		clr.b	ob2ndRout(a1)
00013C88 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013C8E 45F8 D000                  		lea	(v_player).w,a2
00013C92 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013C98 446A 0012                  		neg.w	obVelY(a2)
00013C9C 08EA 0001 0022             		bset	#1,obStatus(a2)
00013CA2 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013CA8 422A 003C                  		clr.b	$3C(a2)
00013CAC 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013CB2 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013CC2                            
00013CC2                            loc_1192C:
00013CC2 4268 0010                  		clr.w	obVelX(a0)
00013CC6 4268 0012                  		clr.w	obVelY(a0)
00013CCA 5528 0024                  		subq.b	#2,obRoutine(a0)
00013CCE                            
00013CCE                            locret_11938:
00013CCE 4E75                       		rts	
00013CD0                            ; ===========================================================================
00013CD0 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013CDA                            
00013CDA                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D0A                            		even
00013D0A                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013D3A                            		even
00013D3A                            		even
00013D3A                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013D3A                            ; ---------------------------------------------------------------------------
00013D3A                            ; Sprite mappings - seesaws (SLZ)
00013D3A                            ; ---------------------------------------------------------------------------
00013D3A                            Map_Seesaw_internal:
00013D3A 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D3C 0000                       		dc.w @flat-Map_Seesaw_internal
00013D3E 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D40 0000                       		dc.w @flat-Map_Seesaw_internal
00013D42 07                         @sloping:	dc.b 7
00013D43 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013D48 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013D4D E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013D52 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013D57 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013D5C F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013D61 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013D66 04                         @flat:		dc.b 4
00013D67 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013D6C E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013D71 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013D76 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013D7C 00                         		even
00013D7C 00                         		even
00013D7C                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013D7C                            ; ---------------------------------------------------------------------------
00013D7C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013D7C                            ; ---------------------------------------------------------------------------
00013D7C                            Map_SSawBall_internal:
00013D7C 0000                       		dc.w @red-Map_SSawBall_internal
00013D7E 0000                       		dc.w @silver-Map_SSawBall_internal
00013D80 01                         @red:		dc.b 1
00013D81 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013D86 01                         @silver:	dc.b 1
00013D87 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013D8C                            		even
00013D8C                            		even
00013D8C                            		include	"_incObj\5F Bomb Enemy.asm"
00013D8C                            ; ---------------------------------------------------------------------------
00013D8C                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013D8C                            ; ---------------------------------------------------------------------------
00013D8C                            
00013D8C                            Bomb:
00013D8C 7000                       		moveq	#0,d0
00013D8E 1028 0024                  		move.b	obRoutine(a0),d0
00013D92 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013D96 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013D9A                            ; ===========================================================================
00013D9A 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013D9C 0000                       		dc.w Bom_Action-Bom_Index
00013D9E 0000                       		dc.w Bom_Display-Bom_Index
00013DA0 0000                       		dc.w Bom_End-Bom_Index
00013DA2                            
00013DA2 =00000030                  bom_time:	equ $30		; time of fuse
00013DA2 =00000034                  bom_origY:	equ $34		; original y-axis position
00013DA2 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013DA2                            ; ===========================================================================
00013DA2                            
00013DA2                            Bom_Main:	; Routine 0
00013DA2 5428 0024                  		addq.b	#2,obRoutine(a0)
00013DA6 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013DAE 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013DB4 0028 0004 0001             		ori.b	#4,obRender(a0)
00013DBA 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013DC0 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013DC6 1028 0028                  		move.b	obSubtype(a0),d0
00013DCA 6700                       		beq.s	loc_11A3C
00013DCC 1140 0024                  		move.b	d0,obRoutine(a0)
00013DD0 4E75                       		rts	
00013DD2                            ; ===========================================================================
00013DD2                            
00013DD2                            loc_11A3C:
00013DD2 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013DD8 0868 0000 0022             		bchg	#0,obStatus(a0)
00013DDE                            
00013DDE                            Bom_Action:	; Routine 2
00013DDE 7000                       		moveq	#0,d0
00013DE0 1028 0025                  		move.b	ob2ndRout(a0),d0
00013DE4 323B 0000                  		move.w	@index(pc,d0.w),d1
00013DE8 4EBB 1000                  		jsr	@index(pc,d1.w)
00013DEC 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013DF2 6100 8A6A                  		bsr.w	AnimateSprite
00013DF6 6000 DA78                  		bra.w	RememberState
00013DFA                            ; ===========================================================================
00013DFA 0000                       @index:		dc.w @walk-@index
00013DFC 0000                       		dc.w @wait-@index
00013DFE 0000                       		dc.w @explode-@index
00013E00                            ; ===========================================================================
00013E00                            
00013E00                            @walk:
00013E00 6100 0000                  		bsr.w	@chksonic
00013E04 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E08 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E0A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E0E 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E14 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E1A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E20 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E26 6700                       		beq.s	@noflip
00013E28 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013E2C                            
00013E2C                            	@noflip:
00013E2C 4E75                       		rts	
00013E2E                            ; ===========================================================================
00013E2E                            
00013E2E                            @wait:
00013E2E 6100 0000                  		bsr.w	@chksonic
00013E32 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E36 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013E38 6100 B95A                  		bsr.w	SpeedToPos
00013E3C 4E75                       		rts	
00013E3E                            ; ===========================================================================
00013E3E                            
00013E3E                            	@stopwalking:
00013E3E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013E42 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013E48 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013E4C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013E52 4E75                       		rts	
00013E54                            ; ===========================================================================
00013E54                            
00013E54                            @explode:
00013E54 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E58 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013E5A 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013E5E 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013E64                            
00013E64                            	@noexplode:
00013E64 4E75                       		rts	
00013E66                            ; ===========================================================================
00013E66                            
00013E66                            @chksonic:
00013E66 3038 D008                  		move.w	(v_player+obX).w,d0
00013E6A 9068 0008                  		sub.w	obX(a0),d0
00013E6E 6400                       		bcc.s	@isleft
00013E70 4440                       		neg.w	d0
00013E72                            
00013E72                            	@isleft:
00013E72 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013E76 6400                       		bcc.s	@outofrange	; if not, branch
00013E78 3038 D00C                  		move.w	(v_player+obY).w,d0
00013E7C 9068 000C                  		sub.w	obY(a0),d0
00013E80 6400                       		bcc.s	@isabove
00013E82 4440                       		neg.w	d0
00013E84                            
00013E84                            	@isabove:
00013E84 0C40 0060                  		cmpi.w	#$60,d0
00013E88 6400                       		bcc.s	@outofrange
00013E8A 4A78 FE08                  		tst.w	(v_debuguse).w
00013E8E 6600                       		bne.s	@outofrange
00013E90                            
00013E90 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013E96 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013E9C 4268 0010                  		clr.w	obVelX(a0)
00013EA0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013EA6 6100 BEB0                  		bsr.w	FindNextFreeObj
00013EAA 6600                       		bne.s	@outofrange
00013EAC 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013EB0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013EB6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013EBC 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013EC2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013EC8 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013ECE 137C 0003 001C             		move.b	#3,obAnim(a1)
00013ED4 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013EDA 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013EE0 6700                       		beq.s	@normal		; if not, branch
00013EE2 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013EE6                            
00013EE6                            	@normal:
00013EE6 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013EEC 2348 003C                  		move.l	a0,bom_parent(a1)
00013EF0                            
00013EF0                            @outofrange:
00013EF0 4E75                       		rts	
00013EF2                            ; ===========================================================================
00013EF2                            
00013EF2                            Bom_Display:	; Routine 4
00013EF2 6100                       		bsr.s	loc_11B70
00013EF4 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013EFA 6100 8962                  		bsr.w	AnimateSprite
00013EFE 6000 D970                  		bra.w	RememberState
00013F02                            ; ===========================================================================
00013F02                            
00013F02                            loc_11B70:
00013F02 5368 0030                  		subq.w	#1,bom_time(a0)
00013F06 6B00                       		bmi.s	loc_11B7C
00013F08 6100 B88A                  		bsr.w	SpeedToPos
00013F0C 4E75                       		rts	
00013F0E                            ; ===========================================================================
00013F0E                            
00013F0E                            loc_11B7C:
00013F0E 4268 0030                  		clr.w	bom_time(a0)
00013F12 4228 0024                  		clr.b	obRoutine(a0)
00013F16 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F1C 7203                       		moveq	#3,d1
00013F1E 2248                       		movea.l	a0,a1
00013F20 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013F26 6000                       		bra.s	@makeshrapnel
00013F28                            ; ===========================================================================
00013F28                            
00013F28                            	@loop:
00013F28 6100 BE2E                  		bsr.w	FindNextFreeObj
00013F2C 6600                       		bne.s	@fail
00013F2E                            
00013F2E                            @makeshrapnel:
00013F2E 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013F32 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F38 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F3E 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013F44 137C 0004 001C             		move.b	#4,obAnim(a1)
00013F4A 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013F4E 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013F52 137C 0098 0020             		move.b	#$98,obColType(a1)
00013F58 08E9 0007 0001             		bset	#7,obRender(a1)
00013F5E                            
00013F5E                            	@fail:
00013F5E 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013F62                            
00013F62 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013F68                            
00013F68                            Bom_End:	; Routine 6
00013F68 6100 B82A                  		bsr.w	SpeedToPos
00013F6C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013F72 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F78 6100 88E4                  		bsr.w	AnimateSprite
00013F7C 4A28 0001                  		tst.b	obRender(a0)
00013F80 6A00 B866                  		bpl.w	DeleteObject
00013F84 6000 B822                  		bra.w	DisplaySprite
00013F88                            ; ===========================================================================
00013F88 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013F88 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013F98                            		include	"_anim\Bomb Enemy.asm"
00013F98                            ; ---------------------------------------------------------------------------
00013F98                            ; Animation script - Bomb enemy
00013F98                            ; ---------------------------------------------------------------------------
00013F98 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013F9A 0000                       		dc.w @walk-Ani_Bomb
00013F9C 0000                       		dc.w @activated-Ani_Bomb
00013F9E 0000                       		dc.w @fuse-Ani_Bomb
00013FA0 0000                       		dc.w @shrapnel-Ani_Bomb
00013FA2 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013FA6 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013FAC 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013FB0 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013FB4 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013FB8                            		even
00013FB8                            		even
00013FB8                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013FB8                            ; ---------------------------------------------------------------------------
00013FB8                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013FB8                            ; ---------------------------------------------------------------------------
00013FB8                            Map_Bomb_internal:
00013FB8 0000                       		dc.w @stand1-Map_Bomb_internal
00013FBA 0000                       		dc.w @stand2-Map_Bomb_internal
00013FBC 0000                       		dc.w @walk1-Map_Bomb_internal
00013FBE 0000                       		dc.w @walk2-Map_Bomb_internal
00013FC0 0000                       		dc.w @walk3-Map_Bomb_internal
00013FC2 0000                       		dc.w @walk4-Map_Bomb_internal
00013FC4 0000                       		dc.w @activate1-Map_Bomb_internal
00013FC6 0000                       		dc.w @activate2-Map_Bomb_internal
00013FC8 0000                       		dc.w @fuse1-Map_Bomb_internal
00013FCA 0000                       		dc.w @fuse2-Map_Bomb_internal
00013FCC 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013FCE 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013FD0 03                         @stand1:	dc.b 3
00013FD1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013FD6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FDB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013FE0 03                         @stand2:	dc.b 3
00013FE1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013FE6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FEB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013FF0 03                         @walk1:		dc.b 3
00013FF1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013FF6 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013FFB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014000 03                         @walk2:		dc.b 3
00014001 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014006 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001400B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014010 03                         @walk3:		dc.b 3
00014011 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014016 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001401B E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014020 03                         @walk4:		dc.b 3
00014021 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014026 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001402B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014030 02                         @activate1:	dc.b 2
00014031 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00014036 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001403B 02                         @activate2:	dc.b 2
0001403C F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014041 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014046 01                         @fuse1:		dc.b 1
00014047 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
0001404C 01                         @fuse2:		dc.b 1
0001404D E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00014052 01                         @shrapnel1:	dc.b 1
00014053 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00014058 01                         @shrapnel2:	dc.b 1
00014059 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001405E                            		even
0001405E                            		even
0001405E                            
0001405E                            		include	"_incObj\60 Orbinaut.asm"
0001405E                            ; ---------------------------------------------------------------------------
0001405E                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001405E                            ; ---------------------------------------------------------------------------
0001405E                            
0001405E                            Orbinaut:
0001405E 7000                       		moveq	#0,d0
00014060 1028 0024                  		move.b	obRoutine(a0),d0
00014064 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00014068 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
0001406C                            ; ===========================================================================
0001406C 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
0001406E 0000                       		dc.w Orb_ChkSonic-Orb_Index
00014070 0000                       		dc.w Orb_Display-Orb_Index
00014072 0000                       		dc.w Orb_MoveOrb-Orb_Index
00014074 0000                       		dc.w Orb_ChkDel2-Orb_Index
00014076                            
00014076 =0000003C                  orb_parent:	equ $3C		; address of parent object
00014076                            ; ===========================================================================
00014076                            
00014076                            Orb_Main:	; Routine 0
00014076 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
0001407E 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00014084 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0001408A 6700                       		beq.s	@isscrap
0001408C 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014092                            
00014092                            	@isscrap:
00014092 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00014098 6600                       		bne.s	@notlabyrinth
0001409A 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
000140A0                            
000140A0                            	@notlabyrinth:
000140A0 0028 0004 0001             		ori.b	#4,obRender(a0)
000140A6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000140AC 117C 000B 0020             		move.b	#$B,obColType(a0)
000140B2 117C 000C 0014             		move.b	#$C,obActWid(a0)
000140B8 7400                       		moveq	#0,d2
000140BA 45E8 0037                  		lea	$37(a0),a2
000140BE 264A                       		movea.l	a2,a3
000140C0 524A                       		addq.w	#1,a2
000140C2 7203                       		moveq	#3,d1
000140C4                            
000140C4                            @makesatellites:
000140C4 6100 BC92                  		bsr.w	FindNextFreeObj
000140C8 6600                       		bne.s	@fail
000140CA 5213                       		addq.b	#1,(a3)
000140CC 3A09                       		move.w	a1,d5
000140CE 0445 D000                  		subi.w	#$D000,d5
000140D2 EC4D                       		lsr.w	#6,d5
000140D4 0245 007F                  		andi.w	#$7F,d5
000140D8 14C5                       		move.b	d5,(a2)+
000140DA 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000140DC 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
000140E2 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000140E8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000140EE 0029 0004 0001             		ori.b	#4,obRender(a1)
000140F4 337C 0200 0018             		move.w	#$200,obPriority(a1)
000140FA 137C 0008 0014             		move.b	#8,obActWid(a1)
00014100 137C 0003 001A             		move.b	#3,obFrame(a1)
00014106 137C 0098 0020             		move.b	#$98,obColType(a1)
0001410C 1342 0026                  		move.b	d2,obAngle(a1)
00014110 0602 0040                  		addi.b	#$40,d2
00014114 2348 003C                  		move.l	a0,orb_parent(a1)
00014118 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001411C                            
0001411C                            	@fail:
0001411C 7001                       		moveq	#1,d0
0001411E 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014124 6700                       		beq.s	@noflip		; if not, branch
00014126 4440                       		neg.w	d0
00014128                            
00014128                            	@noflip:
00014128 1140 0036                  		move.b	d0,$36(a0)
0001412C 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00014132 5428 0024                  		addq.b	#2,obRoutine(a0)
00014136 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
0001413C 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00014142 6700                       		beq.s	@noflip2	; if not, branch
00014144 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00014148                            
00014148                            	@noflip2:
00014148 4E75                       		rts	
0001414A                            ; ===========================================================================
0001414A                            
0001414A                            Orb_ChkSonic:	; Routine 2
0001414A 3038 D008                  		move.w	(v_player+obX).w,d0
0001414E 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00014152 6400                       		bcc.s	@isright	; if yes, branch
00014154 4440                       		neg.w	d0
00014156                            
00014156                            	@isright:
00014156 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001415A 6400                       		bcc.s	@animate	; if not, branch
0001415C 3038 D00C                  		move.w	(v_player+obY).w,d0
00014160 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00014164 6400                       		bcc.s	@isabove	; if yes, branch
00014166 4440                       		neg.w	d0
00014168                            
00014168                            	@isabove:
00014168 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001416C 6400                       		bcc.s	@animate	; if not, branch
0001416E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00014172 6600                       		bne.s	@animate	; if yes, branch
00014174 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
0001417A                            
0001417A                            @animate:
0001417A 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00014180 6100 86DC                  		bsr.w	AnimateSprite
00014184 6000 0000                  		bra.w	Orb_ChkDel
00014188                            ; ===========================================================================
00014188                            
00014188                            Orb_Display:	; Routine 4
00014188 6100 B60A                  		bsr.w	SpeedToPos
0001418C                            
0001418C                            Orb_ChkDel:
000141AA 6000 B5FC                  		bra.w	DisplaySprite
000141AE                            
000141AE                            @chkgone:
000141AE 45F8 FC00                  		lea	(v_objstate).w,a2
000141B2 7000                       		moveq	#0,d0
000141B4 1028 0023                  		move.b	obRespawnNo(a0),d0
000141B8 6700                       		beq.s	loc_11E34
000141BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000141C0                            
000141C0                            loc_11E34:
000141C0 45E8 0037                  		lea	$37(a0),a2
000141C4 7400                       		moveq	#0,d2
000141C6 141A                       		move.b	(a2)+,d2
000141C8 5342                       		subq.w	#1,d2
000141CA 6500                       		bcs.s	Orb_Delete
000141CC                            
000141CC                            loc_11E40:
000141CC 7000                       		moveq	#0,d0
000141CE 101A                       		move.b	(a2)+,d0
000141D0 ED48                       		lsl.w	#6,d0
000141D2 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000141D8 2240                       		movea.l	d0,a1
000141DA 6100 B60E                  		bsr.w	DeleteChild
000141DE 51CA FFEC                  		dbf	d2,loc_11E40
000141E2                            
000141E2                            Orb_Delete:
000141E2 6000 B604                  		bra.w	DeleteObject
000141E6                            ; ===========================================================================
000141E6                            
000141E6                            Orb_MoveOrb:	; Routine 6
000141E6 2268 003C                  		movea.l	orb_parent(a0),a1
000141EA 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
000141EE 6600 B5F8                  		bne.w	DeleteObject	; if not, delete
000141F2 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
000141F8 6600                       		bne.s	@circle		; if not, branch
000141FA 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00014200 6600                       		bne.s	@circle		; if not, branch
00014202 5428 0024                  		addq.b	#2,obRoutine(a0)
00014206 5329 0037                  		subq.b	#1,$37(a1)
0001420A 6600                       		bne.s	@fire
0001420C 5429 0024                  		addq.b	#2,obRoutine(a1)
00014210                            
00014210                            	@fire:
00014210 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014216 0829 0000 0022             		btst	#0,obStatus(a1)
0001421C 6700                       		beq.s	@noflip
0001421E 4468 0010                  		neg.w	obVelX(a0)
00014222                            
00014222                            	@noflip:
00014222 6000 B584                  		bra.w	DisplaySprite
00014226                            ; ===========================================================================
00014226                            
00014226                            @circle:
00014226 1028 0026                  		move.b	obAngle(a0),d0
0001422A 4EB9 0000 3CCA             		jsr	(CalcSine).l
00014230 E841                       		asr.w	#4,d1
00014232 D269 0008                  		add.w	obX(a1),d1
00014236 3141 0008                  		move.w	d1,obX(a0)
0001423A E840                       		asr.w	#4,d0
0001423C D069 000C                  		add.w	obY(a1),d0
00014240 3140 000C                  		move.w	d0,obY(a0)
00014244 1029 0036                  		move.b	$36(a1),d0
00014248 D128 0026                  		add.b	d0,obAngle(a0)
0001424C 6000 B55A                  		bra.w	DisplaySprite
00014250                            ; ===========================================================================
00014250                            
00014250                            Orb_ChkDel2:	; Routine 8
00014250 6100 B542                  		bsr.w	SpeedToPos
00014254 4A28 0001                  		tst.b	obRender(a0)
00014258 6A00 B58E                  		bpl.w	DeleteObject
0001425C 6000 B54A                  		bra.w	DisplaySprite
0001425C 6000 B54A                  		bra.w	DisplaySprite
00014260                            		include	"_anim\Orbinaut.asm"
00014260                            ; ---------------------------------------------------------------------------
00014260                            ; Animation script - Orbinaut enemy
00014260                            ; ---------------------------------------------------------------------------
00014260 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00014262 0000                       		dc.w @angers-Ani_Orb
00014264 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00014268 00                         		even
00014268 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
0001426E 00                         		even
0001426E 00                         		even
0001426E                            Map_Orb:	include	"_maps\Orbinaut.asm"
0001426E                            ; ---------------------------------------------------------------------------
0001426E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001426E                            ; ---------------------------------------------------------------------------
0001426E                            Map_Orb_internal:
0001426E 0000                       		dc.w @normal-Map_Orb_internal
00014270 0000                       		dc.w @medium-Map_Orb_internal
00014272 0000                       		dc.w @angry-Map_Orb_internal
00014274 0000                       		dc.w @spikeball-Map_Orb_internal
00014276 01                         @normal:	dc.b 1
00014277 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001427C 01                         @medium:	dc.b 1
0001427D F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014282 01                         @angry:		dc.b 1
00014283 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00014288 01                         @spikeball:	dc.b 1
00014289 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001428E                            		even
0001428E                            		even
0001428E                            
0001428E                            		include	"_incObj\16 Harpoon.asm"
0001428E                            ; ---------------------------------------------------------------------------
0001428E                            ; Object 16 - harpoon (LZ)
0001428E                            ; ---------------------------------------------------------------------------
0001428E                            
0001428E                            Harpoon:
0001428E 7000                       		moveq	#0,d0
00014290 1028 0024                  		move.b	obRoutine(a0),d0
00014294 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00014298 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
0001429C                            ; ===========================================================================
0001429C 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
0001429E 0000                       		dc.w Harp_Move-Harp_Index
000142A0 0000                       		dc.w Harp_Wait-Harp_Index
000142A2                            
000142A2 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000142A2                            ; ===========================================================================
000142A2                            
000142A2                            Harp_Main:	; Routine 0
000142A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000142A6 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
000142AE 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
000142B4 0028 0004 0001             		ori.b	#4,obRender(a0)
000142BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000142C0 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
000142C6 117C 0014 0014             		move.b	#$14,obActWid(a0)
000142CC 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
000142D2                            
000142D2                            Harp_Move:	; Routine 2
000142D2 43F9 0000 0000             		lea	(Ani_Harp).l,a1
000142D8 6100 8584                  		bsr.w	AnimateSprite
000142DC 7000                       		moveq	#0,d0
000142DE 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
000142E2 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
000142E8 6000 D586                  		bra.w	RememberState
000142EC                            
000142EC                            	@types:
000142EC 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
000142F2                            		even
000142F2                            
000142F2                            Harp_Wait:	; Routine 4
000142F2 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
000142F6 6A00                       		bpl.s	@chkdel		; branch if time remains
000142F8 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
000142FE 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014302 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014308                            
00014308                            	@chkdel:
00014308 6000 D566                  		bra.w	RememberState
00014308 6000 D566                  		bra.w	RememberState
0001430C                            		include	"_anim\Harpoon.asm"
0001430C                            ; ---------------------------------------------------------------------------
0001430C                            ; Animation script - harpoon (LZ)
0001430C                            ; ---------------------------------------------------------------------------
0001430C 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001430E 0000                       		dc.w @h_retracting-Ani_Harp
00014310 0000                       		dc.w @v_extending-Ani_Harp
00014312 0000                       		dc.w @v_retracting-Ani_Harp
00014314 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014318 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001431C 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014320 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014324                            		even
00014324                            		even
00014324                            Map_Harp:	include	"_maps\Harpoon.asm"
00014324                            ; --------------------------------------------------------------------------------
00014324                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014324                            ; --------------------------------------------------------------------------------
00014324                            
00014324                            SME_JPFHb:	
00014324 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00014328 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
0001432C 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
00014330 01                         SME_JPFHb_C:	dc.b 1	
00014331 FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00014336 01                         SME_JPFHb_12:	dc.b 1	
00014337 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
0001433C 02                         SME_JPFHb_18:	dc.b 2	
0001433D FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00014342 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00014347 01                         SME_JPFHb_23:	dc.b 1	
00014348 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
0001434D 01                         SME_JPFHb_29:	dc.b 1	
0001434E E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00014353 02                         SME_JPFHb_2F:	dc.b 2	
00014354 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00014359 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
0001435E                            		even
0001435E                            		even
0001435E                            		include	"_incObj\61 LZ Blocks.asm"
0001435E                            ; ---------------------------------------------------------------------------
0001435E                            ; Object 61 - blocks (LZ)
0001435E                            ; ---------------------------------------------------------------------------
0001435E                            
0001435E                            LabyrinthBlock:
0001435E 7000                       		moveq	#0,d0
00014360 1028 0024                  		move.b	obRoutine(a0),d0
00014364 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00014368 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
0001436C                            ; ===========================================================================
0001436C 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
0001436E 0000                       		dc.w LBlk_Action-LBlk_Index
00014370                            
00014370 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014372 200C                       		dc.b $20, $C
00014374 1010                       		dc.b $10, $10
00014376 1010                       		dc.b $10, $10
00014378                            
00014378 =00000016                  lblk_height:	equ $16		; block height
00014378 =00000034                  lblk_origX:	equ $34		; original x-axis position
00014378 =00000030                  lblk_origY:	equ $30		; original y-axis position
00014378 =00000036                  lblk_time:	equ $36		; time delay for block movement
00014378 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00014378                            ; ===========================================================================
00014378                            
00014378                            LBlk_Main:	; Routine 0
00014378 5428 0024                  		addq.b	#2,obRoutine(a0)
0001437C 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014384 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
0001438A 117C 0004 0001             		move.b	#4,obRender(a0)
00014390 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014396 7000                       		moveq	#0,d0
00014398 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001439C E648                       		lsr.w	#3,d0		; read only the 1st digit
0001439E 0240 000E                  		andi.w	#$E,d0
000143A2 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
000143A6 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000143AA 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
000143AE E248                       		lsr.w	#1,d0
000143B0 1140 001A                  		move.b	d0,obFrame(a0)
000143B4 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000143BA 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000143C0 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000143C4 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
000143C8 6700                       		beq.s	LBlk_Action	; branch if 0
000143CA 0C00 0007                  		cmpi.b	#7,d0
000143CE 6700                       		beq.s	LBlk_Action	; branch if 7
000143D0 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
000143D6                            
000143D6                            LBlk_Action:	; Routine 2
000143D6 3F28 0008                  		move.w	obX(a0),-(sp)
000143DA 7000                       		moveq	#0,d0
000143DC 1028 0028                  		move.b	obSubtype(a0),d0
000143E0 0240 000F                  		andi.w	#$F,d0
000143E4 D040                       		add.w	d0,d0
000143E6 323B 0000                  		move.w	@index(pc,d0.w),d1
000143EA 4EBB 1000                  		jsr	@index(pc,d1.w)
000143EE 381F                       		move.w	(sp)+,d4
000143F0 4A28 0001                  		tst.b	obRender(a0)
000143F4 6A00                       		bpl.s	@chkdel
000143F6 7200                       		moveq	#0,d1
000143F8 1228 0014                  		move.b	obActWid(a0),d1
000143FC 0641 000B                  		addi.w	#$B,d1
00014400 7400                       		moveq	#0,d2
00014402 1428 0016                  		move.b	lblk_height(a0),d2
00014406 3602                       		move.w	d2,d3
00014408 5243                       		addq.w	#1,d3
0001440A 6100 D8FC                  		bsr.w	SolidObject
0001440E 1144 003F                  		move.b	d4,$3F(a0)
00014412 6100 0000                  		bsr.w	loc_12180
00014416                            
00014416                            @chkdel:
00014434 6000 B372                  		bra.w	DisplaySprite
00014438                            ; ===========================================================================
00014438 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001443C 0000 0000                  		dc.w @type02-@index, @type03-@index
00014440 0000 0000                  		dc.w @type04-@index, @type05-@index
00014444 0000 0000                  		dc.w @type06-@index, @type07-@index
00014448                            ; ===========================================================================
00014448                            
00014448                            @type00:
00014448 4E75                       		rts	
0001444A                            ; ===========================================================================
0001444A                            
0001444A                            @type01:
0001444A                            @type03:
0001444A 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
0001444E 6600                       		bne.s	@wait01		; if yes, branch
00014450 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
00014456 6700                       		beq.s	@donothing01	; if not, branch
00014458 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
0001445E                            
0001445E                            	@donothing01:
0001445E 4E75                       		rts	
00014460                            ; ===========================================================================
00014460                            
00014460                            	@wait01:
00014460 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
00014464 66F8                       		bne.s	@donothing01	; if time remains, branch
00014466 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
0001446A 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
0001446E 4E75                       		rts	
00014470                            ; ===========================================================================
00014470                            
00014470                            @type02:
00014470                            @type06:
00014470 6100 B322                  		bsr.w	SpeedToPos
00014474 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
00014478 6100 0000                  		bsr.w	ObjFloorDist
0001447C 4A41                       		tst.w	d1		; has block hit the floor?
0001447E 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014482 5241                       		addq.w	#1,d1
00014484 D368 000C                  		add.w	d1,obY(a0)
00014488 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
0001448C 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014490                            
00014490                            	@nofloor02:
00014490 4E75                       		rts	
00014492                            ; ===========================================================================
00014492                            
00014492                            @type04:
00014492 6100 B300                  		bsr.w	SpeedToPos
00014496 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001449A 6100 0000                  		bsr.w	ObjHitCeiling
0001449E 4A41                       		tst.w	d1		; has block hit the ceiling?
000144A0 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000144A4 9368 000C                  		sub.w	d1,obY(a0)
000144A8 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
000144AC 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000144B0                            
000144B0                            	@noceiling04:
000144B0 4E75                       		rts	
000144B2                            ; ===========================================================================
000144B2                            
000144B2                            @type05:
000144B2 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000144B8 6600                       		bne.s	@notouch05	; if not, branch
000144BA 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000144BE 4228 0038                  		clr.b	lblk_untouched(a0)
000144C2                            
000144C2                            	@notouch05:
000144C2 4E75                       		rts	
000144C4                            ; ===========================================================================
000144C4                            
000144C4                            @type07:
000144C4 3038 F646                  		move.w	(v_waterpos1).w,d0
000144C8 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
000144CC 6700                       		beq.s	@stop07		; if yes, branch
000144CE 6400                       		bcc.s	@fall07		; branch if block is above water
000144D0 0C40 FFFE                  		cmpi.w	#-2,d0
000144D4 6C00                       		bge.s	@loc_1214E
000144D6 70FE                       		moveq	#-2,d0
000144D8                            
000144D8                            	@loc_1214E:
000144D8 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
000144DC 6100 0000                  		bsr.w	ObjHitCeiling
000144E0 4A41                       		tst.w	d1		; has block hit the ceiling?
000144E2 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
000144E6 9368 000C                  		sub.w	d1,obY(a0)	; stop block
000144EA                            
000144EA                            	@noceiling07:
000144EA 4E75                       		rts	
000144EC                            ; ===========================================================================
000144EC                            
000144EC                            @fall07:
000144EC 0C40 0002                  		cmpi.w	#2,d0
000144F0 6F00                       		ble.s	@loc_1216A
000144F2 7002                       		moveq	#2,d0
000144F4                            
000144F4                            	@loc_1216A:
000144F4 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
000144F8 6100 0000                  		bsr.w	ObjFloorDist
000144FC 4A41                       		tst.w	d1
000144FE 6A00 0000                  		bpl.w	@stop07
00014502 5241                       		addq.w	#1,d1
00014504 D368 000C                  		add.w	d1,obY(a0)
00014508                            
00014508                            	@stop07:
00014508 4E75                       		rts	
0001450A                            ; ===========================================================================
0001450A                            
0001450A                            loc_12180:
0001450A 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001450E 6700                       		beq.s	locret_121C0	; if yes, branch
00014510 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014516 6600                       		bne.s	loc_1219A	; if yes, branch
00014518 4A28 003E                  		tst.b	$3E(a0)
0001451C 6700                       		beq.s	locret_121C0
0001451E 5928 003E                  		subq.b	#4,$3E(a0)
00014522 6000                       		bra.s	loc_121A6
00014524                            ; ===========================================================================
00014524                            
00014524                            loc_1219A:
00014524 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001452A 6700                       		beq.s	locret_121C0
0001452C 5828 003E                  		addq.b	#4,$3E(a0)
00014530                            
00014530                            loc_121A6:
00014530 1028 003E                  		move.b	$3E(a0),d0
00014534 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001453A 323C 0400                  		move.w	#$400,d1
0001453E C1C1                       		muls.w	d1,d0
00014540 4840                       		swap	d0
00014542 D068 0030                  		add.w	lblk_origY(a0),d0
00014546 3140 000C                  		move.w	d0,obY(a0)
0001454A                            
0001454A                            locret_121C0:
0001454A 4E75                       		rts	
0001454A 4E75                       		rts	
0001454C                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
0001454C                            Map_6865:
0001454C 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
0001454E 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
00014550 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014552 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
00014554 01                         Map_6865_8: 	dc.b $1
00014555 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
0001455A 02                         Map_6865_E: 	dc.b $2
0001455B F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
00014560 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
00014565 01                         Map_6865_19: 	dc.b $1
00014566 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
0001456B 01                         Map_6865_1F: 	dc.b $1
0001456C F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014572 00                         	even
00014572 00                         	even
00014572                            		include	"_incObj\62 Gargoyle.asm"
00014572                            ; ---------------------------------------------------------------------------
00014572                            ; Object 62 - gargoyle head (LZ)
00014572                            ; ---------------------------------------------------------------------------
00014572                            
00014572                            Gargoyle:
00014572 7000                       		moveq	#0,d0
00014574 1028 0024                  		move.b	obRoutine(a0),d0
00014578 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
0001457C 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014580 6000 D2EE                  		bra.w	RememberState
00014584                            ; ===========================================================================
00014584 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014586 0000                       		dc.w Gar_MakeFire-Gar_Index
00014588 0000                       		dc.w Gar_FireBall-Gar_Index
0001458A 0000                       		dc.w Gar_AniFire-Gar_Index
0001458C                            
0001458C 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014594                            ; ===========================================================================
00014594                            
00014594                            Gar_Main:	; Routine 0
00014594 5428 0024                  		addq.b	#2,obRoutine(a0)
00014598 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000145A0 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000145A6 0028 0004 0001             		ori.b	#4,obRender(a0)
000145AC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000145B2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000145B8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000145BC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000145C0 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
000145C6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000145CC 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000145D2                            
000145D2                            Gar_MakeFire:	; Routine 2
000145D2 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
000145D6 6600                       		bne.s	@nofire		; if time remains, branch
000145D8                            
000145D8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
000145DE 6100 B556                  		bsr.w	ChkObjectVisible
000145E2 6600                       		bne.s	@nofire
000145E4 6100 B75C                  		bsr.w	FindFreeObj
000145E8 6600                       		bne.s	@nofire
000145EA 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
000145EE 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
000145F2 3368 0008 0008             		move.w	obX(a0),obX(a1)
000145F8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000145FE 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014604 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001460A                            
0001460A                            	@nofire:
0001460A 4E75                       		rts	
0001460C                            ; ===========================================================================
0001460C                            
0001460C                            Gar_FireBall:	; Routine 4
0001460C 5428 0024                  		addq.b	#2,obRoutine(a0)
00014610 117C 0008 0016             		move.b	#8,obHeight(a0)
00014616 117C 0008 0017             		move.b	#8,obWidth(a0)
0001461C 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014624 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001462A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014630 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014636 117C 0098 0020             		move.b	#$98,obColType(a0)
0001463C 117C 0008 0014             		move.b	#8,obActWid(a0)
00014642 117C 0002 001A             		move.b	#2,obFrame(a0)
00014648 5068 000C                  		addq.w	#8,obY(a0)
0001464C 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014652 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
00014658 6600                       		bne.s	@noflip		; if not, branch
0001465A 4468 0010                  		neg.w	obVelX(a0)
0001465E                            
0001465E                            	@noflip:
00014668                            
00014668                            Gar_AniFire:	; Routine 6
00014668 1038 FE05                  		move.b	(v_framebyte).w,d0
0001466C 0200 0007                  		andi.b	#7,d0
00014670 6600                       		bne.s	@nochg
00014672 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
00014678                            
00014678                            	@nochg:
00014678 6100 B11A                  		bsr.w	SpeedToPos
0001467C 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014682 6600                       		bne.s	@isright	; if not, branch
00014684 76F8                       		moveq	#-8,d3
00014686 6100 0000                  		bsr.w	ObjHitWallLeft
0001468A 4A41                       		tst.w	d1
0001468C 6B00 B15A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014690 4E75                       		rts	
00014692                            
00014692                            	@isright:
00014692 7608                       		moveq	#8,d3
00014694 6100 0000                  		bsr.w	ObjHitWallRight
00014698 4A41                       		tst.w	d1
0001469A 6B00 B14C                  		bmi.w	DeleteObject
0001469E 4E75                       		rts	
0001469E 4E75                       		rts	
000146A0                            Map_Gar:	include	"_maps\Gargoyle.asm"
000146A0                            ; ---------------------------------------------------------------------------
000146A0                            ; Sprite mappings - gargoyle head (LZ)
000146A0                            ; ---------------------------------------------------------------------------
000146A0                            Map_Gar_internal:
000146A0 0000                       		dc.w @head-Map_Gar_internal
000146A2 0000                       		dc.w @head-Map_Gar_internal
000146A4 0000                       		dc.w @fireball1-Map_Gar_internal
000146A6 0000                       		dc.w @fireball2-Map_Gar_internal
000146A8 03                         @head:		dc.b 3
000146A9 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000146AE F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000146B3 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000146B8 01                         @fireball1:	dc.b 1
000146B9 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000146BE 01                         @fireball2:	dc.b 1
000146BF FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000146C4                            		even
000146C4                            		even
000146C4                            		include	"_incObj\63 LZ Conveyor.asm"
000146C4                            ; ---------------------------------------------------------------------------
000146C4                            ; Object 63 - platforms	on a conveyor belt (LZ)
000146C4                            ; ---------------------------------------------------------------------------
000146C4                            
000146C4                            LabyrinthConvey:
000146C4 7000                       		moveq	#0,d0
000146C6 1028 0024                  		move.b	obRoutine(a0),d0
000146CA 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
000146CE 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
000146EE                            
000146EE                            LCon_Display:
000146EE 6000 B0B8                  		bra.w	DisplaySprite
000146F2                            ; ===========================================================================
000146F2                            
000146F2                            loc_1236A:
000146F2 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
000146F8 6600                       		bne.s	loc_12378
000146FA 0C40 FF80                  		cmpi.w	#-$80,d0
000146FE 64EE                       		bcc.s	LCon_Display
00014700                            
00014700                            loc_12378:
00014700 1028 002F                  		move.b	$2F(a0),d0
00014704 6A00 B0E2                  		bpl.w	DeleteObject
00014708 0240 007F                  		andi.w	#$7F,d0
0001470C 45F8 F7C1                  		lea	(v_obj63).w,a2
00014710 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014716 6000 B0D0                  		bra.w	DeleteObject
0001471A                            ; ===========================================================================
0001471A 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001471C 0000                       		dc.w loc_124B2-LCon_Index
0001471E 0000                       		dc.w loc_124C2-LCon_Index
00014720 0000                       		dc.w loc_124DE-LCon_Index
00014722                            ; ===========================================================================
00014722                            
00014722                            LCon_Main:	; Routine 0
00014722 1028 0028                  		move.b	obSubtype(a0),d0
00014726 6B00 0000                  		bmi.w	loc_12460
0001472A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001472E 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014736 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
0001473C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014742 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014748 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001474E 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00014754 6600                       		bne.s	loc_123E2
00014756 5828 0024                  		addq.b	#4,obRoutine(a0)
0001475A 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
00014760 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014766 6000 0000                  		bra.w	loc_124DE
0001476A                            ; ===========================================================================
0001476A                            
0001476A                            loc_123E2:
0001476A 117C 0004 001A             		move.b	#4,obFrame(a0)
00014770 7000                       		moveq	#0,d0
00014772 1028 0028                  		move.b	obSubtype(a0),d0
00014776 3200                       		move.w	d0,d1
00014778 E648                       		lsr.w	#3,d0
0001477A 0240 001E                  		andi.w	#$1E,d0
0001477E 45FA 0000                  		lea	LCon_Data(pc),a2
00014782 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014786 315A 0038                  		move.w	(a2)+,$38(a0)
0001478A 315A 0030                  		move.w	(a2)+,$30(a0)
0001478E 214A 003C                  		move.l	a2,$3C(a0)
00014792 0241 000F                  		andi.w	#$F,d1
00014796 E549                       		lsl.w	#2,d1
00014798 1141 0038                  		move.b	d1,$38(a0)
0001479C 117C 0004 003A             		move.b	#4,$3A(a0)
000147A2 4A38 F7C0                  		tst.b	(f_conveyrev).w
000147A6 6700                       		beq.s	loc_1244C
000147A8 117C 0001 003B             		move.b	#1,$3B(a0)
000147AE 4428 003A                  		neg.b	$3A(a0)
000147B2 7200                       		moveq	#0,d1
000147B4 1228 0038                  		move.b	$38(a0),d1
000147B8 D228 003A                  		add.b	$3A(a0),d1
000147BC B228 0039                  		cmp.b	$39(a0),d1
000147C0 6500                       		bcs.s	loc_12448
000147C2 1001                       		move.b	d1,d0
000147C4 7200                       		moveq	#0,d1
000147C6 4A00                       		tst.b	d0
000147C8 6A00                       		bpl.s	loc_12448
000147CA 1228 0039                  		move.b	$39(a0),d1
000147CE 5901                       		subq.b	#4,d1
000147D0                            
000147D0                            loc_12448:
000147D0 1141 0038                  		move.b	d1,$38(a0)
000147D4                            
000147D4                            loc_1244C:
000147D4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000147DA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000147E0 6100 0000                  		bsr.w	LCon_ChangeDir
000147E4 6000 0000                  		bra.w	loc_124B2
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            loc_12460:
000147E8 1140 002F                  		move.b	d0,$2F(a0)
000147EC 0240 007F                  		andi.w	#$7F,d0
000147F0 45F8 F7C1                  		lea	(v_obj63).w,a2
000147F4 08F2 0000 0000             		bset	#0,(a2,d0.w)
000147FA 6600 AFEC                  		bne.w	DeleteObject
000147FE D040                       		add.w	d0,d0
00014800 0240 001E                  		andi.w	#$1E,d0
00014804 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014808 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001480E D4F2 0000                  		adda.w	(a2,d0.w),a2
00014812 321A                       		move.w	(a2)+,d1
00014814 2248                       		movea.l	a0,a1
00014816 6000                       		bra.s	LCon_MakePtfms
00014818                            ; ===========================================================================
00014818                            
00014818                            LCon_Loop:
00014818 6100 B528                  		bsr.w	FindFreeObj
0001481C 6600                       		bne.s	loc_124AA
0001481E                            
0001481E                            LCon_MakePtfms:
0001481E 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014822 335A 0008                  		move.w	(a2)+,obX(a1)
00014826 335A 000C                  		move.w	(a2)+,obY(a1)
0001482A 301A                       		move.w	(a2)+,d0
0001482C 1340 0028                  		move.b	d0,obSubtype(a1)
00014830                            
00014830                            loc_124AA:
00014830 51C9 FFE6                  		dbf	d1,LCon_Loop
00014834                            
00014834 588F                       		addq.l	#4,sp
00014836 4E75                       		rts	
00014838                            ; ===========================================================================
00014838                            
00014838                            loc_124B2:	; Routine 2
00014838 7200                       		moveq	#0,d1
0001483A 1228 0014                  		move.b	obActWid(a0),d1
0001483E 4EB9 0000 8C24             		jsr	(PlatformObject).l
00014844 6000 0000                  		bra.w	sub_12502
00014848                            ; ===========================================================================
00014848                            
00014848                            loc_124C2:	; Routine 4
00014848 7200                       		moveq	#0,d1
0001484A 1228 0014                  		move.b	obActWid(a0),d1
0001484E 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00014854 3F28 0008                  		move.w	obX(a0),-(sp)
00014858 6100 0000                  		bsr.w	sub_12502
0001485C 341F                       		move.w	(sp)+,d2
0001485E 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00014864                            ; ===========================================================================
00014864                            
00014864                            loc_124DE:	; Routine 6
00014864 3038 FE04                  		move.w	(v_framecount).w,d0
00014868 0240 0003                  		andi.w	#3,d0
0001486C 6600                       		bne.s	loc_124FC
0001486E 7201                       		moveq	#1,d1
00014870 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014874 6700                       		beq.s	loc_124F2
00014876 4401                       		neg.b	d1
00014878                            
00014878                            loc_124F2:
00014878 D328 001A                  		add.b	d1,obFrame(a0)
0001487C 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014882                            
00014882                            loc_124FC:
00014882 588F                       		addq.l	#4,sp
00014884 6000 CFEA                  		bra.w	RememberState
00014888                            
00014888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014888                            
00014888                            
00014888                            sub_12502:
00014888 4A38 F7EE                  		tst.b	(f_switch+$E).w
0001488C 6700                       		beq.s	loc_12520
0001488E 4A28 003B                  		tst.b	$3B(a0)
00014892 6600                       		bne.s	loc_12520
00014894 117C 0001 003B             		move.b	#1,$3B(a0)
0001489A 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000148A0 4428 003A                  		neg.b	$3A(a0)
000148A4 6000                       		bra.s	loc_12534
000148A6                            ; ===========================================================================
000148A6                            
000148A6                            loc_12520:
000148A6 3028 0008                  		move.w	obX(a0),d0
000148AA B068 0034                  		cmp.w	$34(a0),d0
000148AE 6600                       		bne.s	loc_1256A
000148B0 3028 000C                  		move.w	obY(a0),d0
000148B4 B068 0036                  		cmp.w	$36(a0),d0
000148B8 6600                       		bne.s	loc_1256A
000148BA                            
000148BA                            loc_12534:
000148BA 7200                       		moveq	#0,d1
000148BC 1228 0038                  		move.b	$38(a0),d1
000148C0 D228 003A                  		add.b	$3A(a0),d1
000148C4 B228 0039                  		cmp.b	$39(a0),d1
000148C8 6500                       		bcs.s	loc_12552
000148CA 1001                       		move.b	d1,d0
000148CC 7200                       		moveq	#0,d1
000148CE 4A00                       		tst.b	d0
000148D0 6A00                       		bpl.s	loc_12552
000148D2 1228 0039                  		move.b	$39(a0),d1
000148D6 5901                       		subq.b	#4,d1
000148D8                            
000148D8                            loc_12552:
000148D8 1141 0038                  		move.b	d1,$38(a0)
000148DC 2268 003C                  		movea.l	$3C(a0),a1
000148E0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000148E6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000148EC 6100 0000                  		bsr.w	LCon_ChangeDir
000148F0                            
000148F0                            loc_1256A:
000148F0 6100 AEA2                  		bsr.w	SpeedToPos
000148F4 4E75                       		rts	
000148F6                            ; End of function sub_12502
000148F6                            
000148F6                            
000148F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148F6                            
000148F6                            
000148F6                            LCon_ChangeDir:
000148F6 7000                       		moveq	#0,d0
000148F8 343C FF00                  		move.w	#-$100,d2
000148FC 3028 0008                  		move.w	obX(a0),d0
00014900 9068 0034                  		sub.w	$34(a0),d0
00014904 6400                       		bcc.s	loc_12584
00014906 4440                       		neg.w	d0
00014908 4442                       		neg.w	d2
0001490A                            
0001490A                            loc_12584:
0001490A 7200                       		moveq	#0,d1
0001490C 363C FF00                  		move.w	#-$100,d3
00014910 3228 000C                  		move.w	obY(a0),d1
00014914 9268 0036                  		sub.w	$36(a0),d1
00014918 6400                       		bcc.s	loc_12598
0001491A 4441                       		neg.w	d1
0001491C 4443                       		neg.w	d3
0001491E                            
0001491E                            loc_12598:
0001491E B240                       		cmp.w	d0,d1
00014920 6500                       		bcs.s	loc_125C2
00014922 3028 0008                  		move.w	obX(a0),d0
00014926 9068 0034                  		sub.w	$34(a0),d0
0001492A 6700                       		beq.s	loc_125AE
0001492C 48C0                       		ext.l	d0
0001492E E180                       		asl.l	#8,d0
00014930 81C1                       		divs.w	d1,d0
00014932 4440                       		neg.w	d0
00014934                            
00014934                            loc_125AE:
00014934 3140 0010                  		move.w	d0,obVelX(a0)
00014938 3143 0012                  		move.w	d3,obVelY(a0)
0001493C 4840                       		swap	d0
0001493E 3140 000A                  		move.w	d0,obX+2(a0)
00014942 4268 000E                  		clr.w	obY+2(a0)
00014946 4E75                       		rts	
00014948                            ; ===========================================================================
00014948                            
00014948                            loc_125C2:
00014948 3228 000C                  		move.w	obY(a0),d1
0001494C 9268 0036                  		sub.w	$36(a0),d1
00014950 6700                       		beq.s	loc_125D4
00014952 48C1                       		ext.l	d1
00014954 E181                       		asl.l	#8,d1
00014956 83C0                       		divs.w	d0,d1
00014958 4441                       		neg.w	d1
0001495A                            
0001495A                            loc_125D4:
0001495A 3141 0012                  		move.w	d1,obVelY(a0)
0001495E 3142 0010                  		move.w	d2,obVelX(a0)
00014962 4841                       		swap	d1
00014964 3141 000E                  		move.w	d1,obY+2(a0)
00014968 4268 000A                  		clr.w	obX+2(a0)
0001496C 4E75                       		rts	
0001496E                            ; End of function LCon_ChangeDir
0001496E                            
0001496E                            ; ===========================================================================
0001496E 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014970 0000                       		dc.w word_12610-LCon_Data
00014972 0000                       		dc.w word_12628-LCon_Data
00014974 0000                       		dc.w word_1263C-LCon_Data
00014976 0000                       		dc.w word_12650-LCon_Data
00014978 0000                       		dc.w word_12668-LCon_Data
0001497A 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001498A 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014996 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000149A6 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000149AE 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000149C2 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000149D6 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000149EE 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000149EE 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A02                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A02                            ; ---------------------------------------------------------------------------
00014A02                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A02                            ; ---------------------------------------------------------------------------
00014A02                            Map_LConv_internal:
00014A02 0000                       		dc.w @wheel1-Map_LConv_internal
00014A04 0000                       		dc.w @wheel2-Map_LConv_internal
00014A06 0000                       		dc.w @wheel3-Map_LConv_internal
00014A08 0000                       		dc.w @wheel4-Map_LConv_internal
00014A0A 0000                       		dc.w @platform-Map_LConv_internal
00014A0C 01                         @wheel1:	dc.b 1
00014A0D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A12 01                         @wheel2:	dc.b 1
00014A13 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A18 01                         @wheel3:	dc.b 1
00014A19 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A1E 01                         @wheel4:	dc.b 1
00014A1F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014A24 01                         @platform:	dc.b 1
00014A25 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014A2A                            		even
00014A2A                            		even
00014A2A                            		include	"_incObj\64 Bubbles.asm"
00014A2A                            ; ---------------------------------------------------------------------------
00014A2A                            ; Object 64 - bubbles (LZ)
00014A2A                            ; ---------------------------------------------------------------------------
00014A2A                            
00014A2A                            Bubble:
00014A2A 7000                       		moveq	#0,d0
00014A2C 1028 0024                  		move.b	obRoutine(a0),d0
00014A30 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014A34 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014A38                            ; ===========================================================================
00014A38 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014A3A 0000                       		dc.w Bub_Animate-Bub_Index
00014A3C 0000                       		dc.w Bub_ChkWater-Bub_Index
00014A3E 0000                       		dc.w Bub_Display-Bub_Index
00014A40 0000                       		dc.w Bub_Delete-Bub_Index
00014A42 0000                       		dc.w Bub_BblMaker-Bub_Index
00014A44                            
00014A44 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014A44 =00000030                  bub_origX:	equ $30		; original x-axis position
00014A44 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014A44 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014A44                            ; ===========================================================================
00014A44                            
00014A44                            Bub_Main:	; Routine 0
00014A44 5428 0024                  		addq.b	#2,obRoutine(a0)
00014A48 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014A50 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014A56 117C 0084 0001             		move.b	#$84,obRender(a0)
00014A5C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014A62 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014A68 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014A6C 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014A6E                            
00014A6E 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014A72 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014A76 1140 0032                  		move.b	d0,bub_time(a0)
00014A7A 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014A7E 117C 0006 001C             		move.b	#6,obAnim(a0)
00014A84 6000 0000                  		bra.w	Bub_BblMaker
00014A88                            ; ===========================================================================
00014A88                            
00014A88                            @bubble:
00014A88 1140 001C                  		move.b	d0,obAnim(a0)
00014A8C 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014A92 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014A98 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014A9E 1140 0026                  		move.b	d0,obAngle(a0)
00014AA2                            
00014AA2                            Bub_Animate:	; Routine 2
00014AA2 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014AA8 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00014AAE 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014AB4 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014AB6                            
00014AB6 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014ABC                            
00014ABC                            Bub_ChkWater:	; Routine 4
00014ABC 3038 F646                  		move.w	(v_waterpos1).w,d0
00014AC0 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014AC4 6500                       		bcs.s	@wobble		; if yes, branch
00014AC6                            
00014AC6                            @burst:
00014AC6 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014ACC 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014AD0 6000 0000                  		bra.w	Bub_Display
00014AD4                            ; ===========================================================================
00014AD4                            
00014AD4                            @wobble:
00014AD4 1028 0026                  		move.b	obAngle(a0),d0
00014AD8 5228 0026                  		addq.b	#1,obAngle(a0)
00014ADC 0240 007F                  		andi.w	#$7F,d0
00014AE0 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014AE6 1031 0000                  		move.b	(a1,d0.w),d0
00014AEA 4880                       		ext.w	d0
00014AEC D068 0030                  		add.w	bub_origX(a0),d0
00014AF0 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014AF4 4A28 002E                  		tst.b	bub_inhalable(a0)
00014AF8 6700                       		beq.s	@display
00014AFA 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014AFE 6700                       		beq.s	@display	; if not, branch
00014B00                            
00014B00 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B0E 43F8 D000                  		lea	(v_player).w,a1
00014B12 4269 0010                  		clr.w	obVelX(a1)
00014B16 4269 0012                  		clr.w	obVelY(a1)
00014B1A 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B1E 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014B24 337C 0023 003E             		move.w	#$23,$3E(a1)
00014B2A 137C 0000 003C             		move.b	#0,$3C(a1)
00014B30 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014B36 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014B3C 0829 0002 0022             		btst	#2,obStatus(a1)
00014B42 6700 FF82                  		beq.w	@burst
00014B46 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014B4C 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014B52 137C 0009 0017             		move.b	#9,obWidth(a1)
00014B58 5B69 000C                  		subq.w	#5,obY(a1)
00014B5C 6000 FF68                  		bra.w	@burst
00014B60                            ; ===========================================================================
00014B60                            
00014B60                            @display:
00014B60 6100 AC32                  		bsr.w	SpeedToPos
00014B64 4A28 0001                  		tst.b	obRender(a0)
00014B68 6A00                       		bpl.s	@delete
00014B6A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00014B70                            
00014B70                            	@delete:
00014B70 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00014B76                            ; ===========================================================================
00014B76                            
00014B76                            Bub_Display:	; Routine 6
00014B76 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B7C 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00014B82 4A28 0001                  		tst.b	obRender(a0)
00014B86 6A00                       		bpl.s	@delete
00014B88 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00014B8E                            
00014B8E                            	@delete:
00014B8E 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00014B94                            ; ===========================================================================
00014B94                            
00014B94                            Bub_Delete:	; Routine 8
00014B94 6000 AC52                  		bra.w	DeleteObject
00014B98                            ; ===========================================================================
00014B98                            
00014B98                            Bub_BblMaker:	; Routine $A
00014B98 4A68 0036                  		tst.w	$36(a0)
00014B9C 6600                       		bne.s	@loc_12874
00014B9E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014BA2 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014BA6 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014BAA 4A28 0001                  		tst.b	obRender(a0)
00014BAE 6A00 0000                  		bpl.w	@chkdel
00014BB2 5368 0038                  		subq.w	#1,$38(a0)
00014BB6 6A00 0000                  		bpl.w	@loc_12914
00014BBA 317C 0001 0036             		move.w	#1,$36(a0)
00014BC0                            
00014BC0                            	@tryagain:
00014BC0 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014BC6 3200                       		move.w	d0,d1
00014BC8 0240 0007                  		andi.w	#7,d0
00014BCC 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014BD0 64EE                       		bcc.s	@tryagain	; if yes, branch
00014BD2                            
00014BD2 1140 0034                  		move.b	d0,$34(a0)
00014BD6 0241 000C                  		andi.w	#$C,d1
00014BDA 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014BE0 D2C1                       		adda.w	d1,a1
00014BE2 2149 003C                  		move.l	a1,$3C(a0)
00014BE6 5328 0032                  		subq.b	#1,bub_time(a0)
00014BEA 6A00                       		bpl.s	@loc_12872
00014BEC 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014BF2 08E8 0007 0036             		bset	#7,$36(a0)
00014BF8                            
00014BF8                            @loc_12872:
00014BF8 6000                       		bra.s	@loc_1287C
00014BFA                            ; ===========================================================================
00014BFA                            
00014BFA                            @loc_12874:
00014BFA 5368 0038                  		subq.w	#1,$38(a0)
00014BFE 6A00 0000                  		bpl.w	@loc_12914
00014C02                            
00014C02                            @loc_1287C:
00014C02 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C08 0240 001F                  		andi.w	#$1F,d0
00014C0C 3140 0038                  		move.w	d0,$38(a0)
00014C10 6100 B130                  		bsr.w	FindFreeObj
00014C14 6600                       		bne.s	@fail
00014C16 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C1A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C20 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C26 0240 000F                  		andi.w	#$F,d0
00014C2A 5140                       		subq.w	#8,d0
00014C2C D169 0008                  		add.w	d0,obX(a1)
00014C30 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014C36 7000                       		moveq	#0,d0
00014C38 1028 0034                  		move.b	$34(a0),d0
00014C3C 2468 003C                  		movea.l	$3C(a0),a2
00014C40 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014C46 0828 0007 0036             		btst	#7,$36(a0)
00014C4C 6700                       		beq.s	@fail
00014C4E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C54 0240 0003                  		andi.w	#3,d0
00014C58 6600                       		bne.s	@loc_buh
00014C5A 08E8 0006 0036             		bset	#6,$36(a0)
00014C60 6600                       		bne.s	@fail
00014C62 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014C68                            
00014C68                            @loc_buh:
00014C68 4A28 0034                  		tst.b	$34(a0)
00014C6C 6600                       		bne.s	@fail
00014C6E 08E8 0006 0036             		bset	#6,$36(a0)
00014C74 6600                       		bne.s	@fail
00014C76 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014C7C                            
00014C7C                            	@fail:
00014C7C 5328 0034                  		subq.b	#1,$34(a0)
00014C80 6A00                       		bpl.s	@loc_12914
00014C82 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C88 0240 007F                  		andi.w	#$7F,d0
00014C8C 0640 0080                  		addi.w	#$80,d0
00014C90 D168 0038                  		add.w	d0,$38(a0)
00014C94 4268 0036                  		clr.w	$36(a0)
00014C98                            
00014C98                            @loc_12914:
00014C98 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014C9E 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00014CA4                            
00014CA4                            @chkdel:
00014CC2 3038 F646                  		move.w	(v_waterpos1).w,d0
00014CC6 B068 000C                  		cmp.w	obY(a0),d0
00014CCA 6500 AADC                  		bcs.w	DisplaySprite
00014CCE 4E75                       		rts	
00014CD0                            ; ===========================================================================
00014CD0                            ; bubble production sequence
00014CD0                            
00014CD0                            ; 0 = small bubble, 1 =	large bubble
00014CD0                            
00014CD0 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014CE2                            
00014CE2                            ; ===========================================================================
00014CE2                            
00014CE2                            Bub_ChkSonic:
00014CE2 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014CE6 6B00                       		bmi.s	@loc_12998
00014CE8 43F8 D000                  		lea	(v_player).w,a1
00014CEC 3029 0008                  		move.w	obX(a1),d0
00014CF0 3228 0008                  		move.w	obX(a0),d1
00014CF4 0441 0010                  		subi.w	#$10,d1
00014CF8 B240                       		cmp.w	d0,d1
00014CFA 6400                       		bcc.s	@loc_12998
00014CFC 0641 0020                  		addi.w	#$20,d1
00014D00 B240                       		cmp.w	d0,d1
00014D02 6500                       		bcs.s	@loc_12998
00014D04 3029 000C                  		move.w	obY(a1),d0
00014D08 3228 000C                  		move.w	obY(a0),d1
00014D0C B240                       		cmp.w	d0,d1
00014D0E 6400                       		bcc.s	@loc_12998
00014D10 0641 0010                  		addi.w	#$10,d1
00014D14 B240                       		cmp.w	d0,d1
00014D16 6500                       		bcs.s	@loc_12998
00014D18 7001                       		moveq	#1,d0
00014D1A 4E75                       		rts	
00014D1C                            ; ===========================================================================
00014D1C                            
00014D1C                            @loc_12998:
00014D1C 7000                       		moveq	#0,d0
00014D1E 4E75                       		rts	
00014D1E 4E75                       		rts	
00014D20                            		include	"_anim\Bubbles.asm"
00014D20                            ; ---------------------------------------------------------------------------
00014D20                            ; Animation script - bubbles (LZ)
00014D20                            ; ---------------------------------------------------------------------------
00014D20 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014D22 0000                       		dc.w @medium-Ani_Bub
00014D24 0000                       		dc.w @large-Ani_Bub
00014D26 0000                       		dc.w @incroutine-Ani_Bub
00014D28 0000                       		dc.w @incroutine-Ani_Bub
00014D2A 0000                       		dc.w @burst-Ani_Bub
00014D2C 0000                       		dc.w @bubmaker-Ani_Bub
00014D2E 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014D34 00                         		even
00014D34 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014D3A 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014D42 00                         		even
00014D42 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014D44 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014D4A 00                         		even
00014D4A 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014D50 00                         		even
00014D50 00                         		even
00014D50                            Map_Bub:	include	"_maps\Bubbles.asm"
00014D50                            ; ---------------------------------------------------------------------------
00014D50                            ; Sprite mappings - bubbles (LZ)
00014D50                            ; ---------------------------------------------------------------------------
00014D50                            Map_Bub_internal:
00014D50 0000                       		dc.w @bubble1-Map_Bub_internal
00014D52 0000                       		dc.w @bubble2-Map_Bub_internal
00014D54 0000                       		dc.w @bubble3-Map_Bub_internal
00014D56 0000                       		dc.w @bubble4-Map_Bub_internal
00014D58 0000                       		dc.w @bubble5-Map_Bub_internal
00014D5A 0000                       		dc.w @bubble6-Map_Bub_internal
00014D5C 0000                       		dc.w @bubblefull-Map_Bub_internal
00014D5E 0000                       		dc.w @burst1-Map_Bub_internal
00014D60 0000                       		dc.w @burst2-Map_Bub_internal
00014D62 0000                       		dc.w @zero_sm-Map_Bub_internal
00014D64 0000                       		dc.w @five_sm-Map_Bub_internal
00014D66 0000                       		dc.w @three_sm-Map_Bub_internal
00014D68 0000                       		dc.w @one_sm-Map_Bub_internal
00014D6A 0000                       		dc.w @zero-Map_Bub_internal
00014D6C 0000                       		dc.w @five-Map_Bub_internal
00014D6E 0000                       		dc.w @four-Map_Bub_internal
00014D70 0000                       		dc.w @three-Map_Bub_internal
00014D72 0000                       		dc.w @two-Map_Bub_internal
00014D74 0000                       		dc.w @one-Map_Bub_internal
00014D76 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014D78 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014D7A 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014D7C 0000                       		dc.w @blank-Map_Bub_internal
00014D7E 01                         @bubble1:	dc.b 1
00014D7F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014D84 01                         @bubble2:	dc.b 1
00014D85 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014D8A 01                         @bubble3:	dc.b 1
00014D8B FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014D90 01                         @bubble4:	dc.b 1
00014D91 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014D96 01                         @bubble5:	dc.b 1
00014D97 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014D9C 01                         @bubble6:	dc.b 1
00014D9D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014DA2 01                         @bubblefull:	dc.b 1
00014DA3 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014DA8 04                         @burst1:	dc.b 4
00014DA9 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014DAE F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014DB3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014DB8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014DBD 04                         @burst2:	dc.b 4
00014DBE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014DC3 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014DC8 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014DCD 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014DD2 01                         @zero_sm:	dc.b 1
00014DD3 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014DD8 01                         @five_sm:	dc.b 1
00014DD9 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014DDE 01                         @three_sm:	dc.b 1
00014DDF F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014DE4 01                         @one_sm:	dc.b 1
00014DE5 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014DEA 01                         @zero:		dc.b 1
00014DEB F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014DF0 01                         @five:		dc.b 1
00014DF1 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014DF6 01                         @four:		dc.b 1
00014DF7 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014DFC 01                         @three:		dc.b 1
00014DFD F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E02 01                         @two:		dc.b 1
00014E03 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E08 01                         @one:		dc.b 1
00014E09 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E0E 01                         @bubmaker1:	dc.b 1
00014E0F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E14 01                         @bubmaker2:	dc.b 1
00014E15 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E1A 01                         @bubmaker3:	dc.b 1
00014E1B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E20 00                         @blank:		dc.b 0
00014E22 00                         		even
00014E22 00                         		even
00014E22                            		include	"_incObj\65 Waterfalls.asm"
00014E22                            ; ---------------------------------------------------------------------------
00014E22                            ; Object 65 - waterfalls (LZ)
00014E22                            ; ---------------------------------------------------------------------------
00014E22                            
00014E22                            Waterfall:
00014E22 7000                       		moveq	#0,d0
00014E24 1028 0024                  		move.b	obRoutine(a0),d0
00014E28 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014E2C 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014E30                            ; ===========================================================================
00014E30 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014E32 0000                       		dc.w WFall_Animate-WFall_Index
00014E34 0000                       		dc.w WFall_ChkDel-WFall_Index
00014E36 0000                       		dc.w WFall_OnWater-WFall_Index
00014E38 0000                       		dc.w loc_12B36-WFall_Index
00014E3A                            ; ===========================================================================
00014E3A                            
00014E3A                            WFall_Main:	; Routine 0
00014E3A 5828 0024                  		addq.b	#4,obRoutine(a0)
00014E3E 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014E46 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014E4C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014E52 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014E58 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014E5E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014E62 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014E64 08E8 0007 0002             		bset	#7,obGfx(a0)
00014E6A                            
00014E6A                            	@under80:
00014E6A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014E6E 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014E72 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014E76 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014E78                            
00014E78 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014E7C 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014E80 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014E86 6700                       		beq.s	@not49		; if not, branch
00014E88                            
00014E88 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014E8E                            
00014E8E                            	@not49:
00014E8E 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014E94 6700                       		beq.s	WFall_Animate	; if not, branch
00014E96 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014E9C                            
00014E9C                            WFall_Animate:	; Routine 2
00014E9C 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014EA2 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00014EA8                            
00014EA8                            WFall_ChkDel:	; Routine 4
00014EA8 6000 C9C6                  		bra.w	RememberState
00014EAC                            ; ===========================================================================
00014EAC                            
00014EAC                            WFall_OnWater:	; Routine 6
00014EAC 3038 F646                  		move.w	(v_waterpos1).w,d0
00014EB0 0440 0010                  		subi.w	#$10,d0
00014EB4 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014EB8 60E2                       		bra.s	WFall_Animate
00014EBA                            ; ===========================================================================
00014EBA                            
00014EBA                            loc_12B36:	; Routine 8
00014EBA 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014EC0 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014EC6 6600                       		bne.s	@animate
00014EC8 08E8 0007 0002             		bset	#7,obGfx(a0)
00014ECE                            
00014ECE                            	@animate:
00014ECE 60CC                       		bra.s	WFall_Animate
00014ECE 60CC                       		bra.s	WFall_Animate
00014ED0                            		include	"_anim\Waterfalls.asm"
00014ED0                            ; ---------------------------------------------------------------------------
00014ED0                            ; Animation script - waterfall (LZ)
00014ED0                            ; ---------------------------------------------------------------------------
00014ED0 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014ED2 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014ED8 00                         		even
00014ED8 00                         		even
00014ED8                            Map_WFall	include	"_maps\Waterfalls.asm"
00014ED8                            ; ---------------------------------------------------------------------------
00014ED8                            ; Sprite mappings - waterfalls (LZ)
00014ED8                            ; ---------------------------------------------------------------------------
00014ED8                            Map_WFall_internal:
00014ED8 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014EDA 0000                       		dc.w @cornerwide-Map_WFall_internal
00014EDC 0000                       		dc.w @cornermedium-Map_WFall_internal
00014EDE 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014EE0 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014EE2 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014EE4 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014EE6 0000                       		dc.w @vertwide-Map_WFall_internal
00014EE8 0000                       		dc.w @diagonal-Map_WFall_internal
00014EEA 0000                       		dc.w @splash1-Map_WFall_internal
00014EEC 0000                       		dc.w @splash2-Map_WFall_internal
00014EEE 0000                       		dc.w @splash3-Map_WFall_internal
00014EF0 01                         @vertnarrow:	dc.b 1
00014EF1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014EF6 02                         @cornerwide:	dc.b 2
00014EF7 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014EFC 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F01 02                         @cornermedium:	dc.b 2
00014F02 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F07 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F0C 01                         @cornernarrow:	dc.b 1
00014F0D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F12 02                         @cornermedium2:	dc.b 2
00014F13 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F18 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F1D 01                         @cornernarrow2:	dc.b 1
00014F1E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014F23 01                         @cornernarrow3:	dc.b 1
00014F24 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014F29 01                         @vertwide:	dc.b 1
00014F2A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014F2F 02                         @diagonal:	dc.b 2
00014F30 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014F35 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014F3A 02                         @splash1:	dc.b 2
00014F3B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014F40 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014F45 02                         @splash2:	dc.b 2
00014F46 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014F4B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014F50 02                         @splash3:	dc.b 2
00014F51 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014F56 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014F5C 00                         		even
00014F5C 00                         		even
00014F5C                            
00014F5C                            
00014F5C                            SpinDash_dust:
00014F5C                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014F5C 7000                       		moveq	#0,d0
00014F5E 1028 0024                  		move.b	$24(a0),d0
00014F62 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014F66 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014F6A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F6A 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014F6C 0000                       		dc loc_1DD90-off_1DD2E; 1
00014F6E 0000                       		dc loc_1DE46-off_1DD2E; 2
00014F70 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014F72                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F72                            
00014F72                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014F72 5428 0024                  		addq.b	#2,$24(a0)
00014F76 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014F7E 0028 0004 0001             		or.b	#4,1(a0)
00014F84 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014F8A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014F90 317C 07AC 0002             		move	#$7AC,2(a0)
00014F96 317C D000 003E             		move	#-$3000,$3E(a0)
00014F9C 317C F580 003C             		move	#$F580,$3C(a0)
00014FA2 B0FC D1C0                  		cmp	#-$2E40,a0
00014FA6 6700                       		beq.s	loc_1DD8C
00014FA8 117C 0001 0034             		move.b	#1,$34(a0)
00014FAE                            ;		cmp	#2,($FFFFFF70).w
00014FAE                            ;		beq.s	loc_1DD8C
00014FAE                            ;		move	#$48C,2(a0)
00014FAE                            ;		move	#-$4FC0,$3E(a0)
00014FAE                            ;		move	#-$6E80,$3C(a0)
00014FAE                            
00014FAE                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014FAE                            ;		bsr.w	sub_16D6E
00014FAE                            
00014FAE                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014FAE 3468 003E                  		movea.w	$3E(a0),a2
00014FB2 7000                       		moveq	#0,d0
00014FB4 1028 001C                  		move.b	$1C(a0),d0
00014FB8 D040                       		add	d0,d0
00014FBA 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014FBE 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014FC2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FC2 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014FC4 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014FC6 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014FC8 0000                       		dc loc_1DE20-off_1DDA4; 3
00014FCA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FCA                            
00014FCA                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014FCA 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014FD0 4A28 001D                  		tst.b	$1D(a0)
00014FD4 6600                       		bne.s	loc_1DE28
00014FD6 316A 0008 0008             		move	8(a2),8(a0)
00014FDC 117C 0000 0022             		move.b	#0,$22(a0)
00014FE2 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014FE8 6000                       		bra.s	loc_1DE28
00014FEA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FEA                            
00014FEA                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014FEA                            ;		cmp.b	#$C,$28(a2)
00014FEA                            ;		bcs.s	loc_1DE3E
00014FEA 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014FF0 6400                       		bcc.s	loc_1DE3E
00014FF2 4A2A 0039                  		tst.b	$39(a2)
00014FF6 6700                       		beq.s	loc_1DE3E
00014FF8 316A 0008 0008             		move	8(a2),8(a0)
00014FFE 316A 000C 000C             		move	$C(a2),$C(a0)
00015004 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001500A 0228 0001 0022             		and.b	#1,$22(a0)
00015010 4A28 0034                  		tst.b	$34(a0)
00015014 6700                       		beq.s	loc_1DE06
00015016 5968 000C                  		sub	#4,$C(a0)
0001501A                            
0001501A                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001501A 4A28 001D                  		tst.b	$1D(a0)
0001501E 6600                       		bne.s	loc_1DE28
00015020 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015026 4A6A 0002                  		tst	2(a2)
0001502A 6A00                       		bpl.s	loc_1DE28
0001502C 0068 8000 0002             		or	#-$8000,2(a0)
00015032                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015032                            
00015032                            loc_1DE20:				; DATA XREF: h+6E30?o
00015032                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00015032 43F9 0000 0000             		lea	(off_1DF38).l,a1
00015038 4EB9 0000 C85E             		jsr	AnimateSprite
0001503E 6100 0000                  		bsr.w	loc_1DEE4
00015042 4EFA A764                  		jmp	DisplaySprite
00015046                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015046                            
00015046                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00015046 117C 0000 001C             		move.b	#0,$1C(a0)
0001504C 4E75                       		rts	
0001504E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001504E                            
0001504E                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001504E 6000 A798                  		bra.w	DeleteObject
00015052                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015052                            
00015052                            
00015052                            
00015052                            loc_1DE4A:
00015052 3468 003E                  	movea.w	$3E(a0),a2
00015056 7210                       	moveq	#$10,d1
00015058 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
0001505E 6700                       	beq.s	loc_1DE64
00015060 7206                       	moveq	#$6,d1
00015062 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00015068 6700                       	beq.s	loc_1DE64
0001506A 117C 0002 0024             	move.b	#2,$24(a0)
00015070 117C 0000 0032             	move.b	#0,$32(a0)
00015076 4E75                       	rts
00015078                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015078                            
00015078                            loc_1DE64:				; CODE XREF: h+6EE0?j
00015078 5328 0032                  		subq.b	#1,$32(a0)
0001507C 6A00                       		bpl.s	loc_1DEE0
0001507E 117C 0003 0032             		move.b	#3,$32(a0)
00015084 4EBA ACBC                  		jsr	FindFreeObj
00015088 6600                       		bne.s	loc_1DEE0
0001508A 1290                       		move.b	0(a0),0(a1)
0001508C 336A 0008 0008             		move	8(a2),8(a1)
00015092 336A 000C 000C             		move	$C(a2),$C(a1)
00015098 4A28 0034                  		tst.b	$34(a0)
0001509C 6700                       		beq.s	loc_1DE9A
0001509E 5941                       		sub	#4,d1
000150A0                            
000150A0                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000150A0 D369 000C                  		add	d1,$C(a1)
000150A4 137C 0000 0022             		move.b	#0,$22(a1)
000150AA 137C 0003 001C             		move.b	#3,$1C(a1)
000150B0 5429 0024                  		addq.b	#2,$24(a1)
000150B4 2368 0004 0004             		move.l	4(a0),4(a1)
000150BA 1368 0001 0001             		move.b	1(a0),1(a1)
000150C0 337C 0080 0018             		move.w	#$80,obPriority(a1)
000150C6 137C 0004 0014             		move.b	#4,obActWid(a1)
000150CC 3368 0002 0002             		move	2(a0),2(a1)
000150D2 3368 003E 003E             		move	$3E(a0),$3E(a1)
000150D8 0269 7FFF 0002             		and	#$7FFF,2(a1)
000150DE 4A6A 0002                  		tst	2(a2)
000150E2 6A00                       		bpl.s	loc_1DEE0
000150E4 0069 8000 0002             		or	#-$8000,2(a1)
000150EA                            
000150EA                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000150EA 6100                       		bsr.s	loc_1DEE4
000150EC 4E75                       		rts	
000150EE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150EE                            
000150EE                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000150EE 7000                       		moveq	#0,d0
000150F0 1028 001A                  		move.b	$1A(a0),d0
000150F4 B028 0030                  		cmp.b	$30(a0),d0
000150F8 6700 0000                  		beq.w	locret_1DF36
000150FC 1140 0030                  		move.b	d0,$30(a0)
00015100 45F9 0000 0000             		lea	(off_1E074).l,a2
00015106 D040                       		add	d0,d0
00015108 D4F2 0000                  		add	(a2,d0.w),a2
0001510C 3A1A                       		move	(a2)+,d5
0001510E 5345                       		subq	#1,d5
00015110 6B00 0000                  		bmi.w	locret_1DF36
00015114 3828 003C                  		move $3C(a0),d4
00015118                            
00015118                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015118 7200                       		moveq	#0,d1
0001511A 321A                       		move	(a2)+,d1
0001511C 3601                       		move	d1,d3
0001511E E04B                       		lsr.w	#8,d3
00015120 0243 00F0                  		and	#$F0,d3	; 'ð'
00015124 0643 0010                  		add	#$10,d3
00015128 0241 0FFF                  		and	#$FFF,d1
0001512C EB89                       		lsl.l	#5,d1
0001512E 0681 0000 0000             		add.l	#Art_Dust,d1
00015134 3404                       		move	d4,d2
00015136 D843                       		add	d3,d4
00015138 D843                       		add	d3,d4
0001513A 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00015140 51CD FFD6                  		dbf	d5,loc_1DF0A
00015144 4E75                           rts
00015146                            
00015146                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00015146 4E75                       		rts	
00015148                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015148 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
0001514A 0000                       		dc byte_1DF43-off_1DF38; 1
0001514C 0000                       		dc byte_1DF4F-off_1DF38; 2
0001514E 0000                       		dc byte_1DF58-off_1DF38; 3
00015150 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00015153 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001515F 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00015168 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
0001516E                            ; -------------------------------------------------------------------------------
0001516E                            ; Unknown Sprite Mappings
0001516E                            ; -------------------------------------------------------------------------------
0001516E                            MapUnc_1DF5E:
0001516E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00015170 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00015172 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00015174 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00015176 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00015178 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001517A 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001517C 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001517E 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00015180 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015182 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00015184 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00015186 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00015188 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001518A 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001518C 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001518E 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015190 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015192 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015194 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015196 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00015198 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001519A 00                         word_1DF8A:	dc.b 0
0001519B 01                         word_1DF8C:	dc.b 1
0001519C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151A1 01                         word_1DF96:	dc.b 1
000151A2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151A7 01                         word_1DFA0:	dc.b 1
000151A8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151AD 01                         word_1DFAA:	dc.b 1
000151AE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151B3 01                         word_1DFB4:	dc.b 1
000151B4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151B9 01                         word_1DFBE:	dc.b 1
000151BA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151BF 01                         word_1DFC8:	dc.b 1
000151C0 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151C5 01                         word_1DFD2:	dc.b 1
000151C6 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151CB 01                         word_1DFDC:	dc.b 1
000151CC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151D1 01                         word_1DFE6:	dc.b 1
000151D2 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151D7 01                         word_1DFF0:	dc.b 1
000151D8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151DD 01                         word_1DFFA:	dc.b 1
000151DE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151E3 02                         word_1E004:	dc.b 2
000151E4 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000151E9 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000151EE 02                         word_1E016:	dc.b 2
000151EF F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000151F4 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000151F9 02                         word_1E028:	dc.b 2
000151FA F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000151FF 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015204 02                         word_1E03A:	dc.b 2
00015205 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001520A 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001520F 01                         word_1E04C:	dc.b 1
00015210 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015215 01                         word_1E056:	dc.b 1
00015216 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001521B 01                         word_1E060:	dc.b 1
0001521C F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00015221 01                         word_1E06A:	dc.b 1
00015222 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015227 00                         	dc.b 0
00015228 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001522A 0000                       	dc word_1E0A2-off_1E074; 1
0001522C 0000                       	dc word_1E0A6-off_1E074; 2
0001522E 0000                       	dc word_1E0AA-off_1E074; 3
00015230 0000                       	dc word_1E0AE-off_1E074; 4
00015232 0000                       	dc word_1E0B2-off_1E074; 5
00015234 0000                       	dc word_1E0B6-off_1E074; 6
00015236 0000                       	dc word_1E0BA-off_1E074; 7
00015238 0000                       	dc word_1E0BE-off_1E074; 8
0001523A 0000                       	dc word_1E0C2-off_1E074; 9
0001523C 0000                       	dc word_1E0C6-off_1E074; 10
0001523E 0000                       	dc word_1E0CA-off_1E074; 11
00015240 0000                       	dc word_1E0CE-off_1E074; 12
00015242 0000                       	dc word_1E0D2-off_1E074; 13
00015244 0000                       	dc word_1E0D8-off_1E074; 14
00015246 0000                       	dc word_1E0DE-off_1E074; 15
00015248 0000                       	dc word_1E0E4-off_1E074; 16
0001524A 0000                       	dc word_1E0EA-off_1E074; 17
0001524C 0000                       	dc word_1E0EA-off_1E074; 18
0001524E 0000                       	dc word_1E0EA-off_1E074; 19
00015250 0000                       	dc word_1E0EA-off_1E074; 20
00015252 0000                       	dc word_1E0EC-off_1E074; 21
00015254 0000                       word_1E0A0:	dc 0
00015256 0001                       word_1E0A2:	dc 1
00015258 7000                       	dc $7000
0001525A 0001                       word_1E0A6:	dc 1
0001525C F008                       	dc $F008
0001525E 0001                       word_1E0AA:	dc 1
00015260 F018                       	dc $F018
00015262 0001                       word_1E0AE:	dc 1
00015264 F028                       	dc $F028
00015266 0001                       word_1E0B2:	dc 1
00015268 F038                       	dc $F038
0001526A 0001                       word_1E0B6:	dc 1
0001526C F048                       	dc $F048
0001526E 0001                       word_1E0BA:	dc 1
00015270 7058                       	dc $7058
00015272 0001                       word_1E0BE:	dc 1
00015274 7060                       	dc $7060
00015276 0001                       word_1E0C2:	dc 1
00015278 7068                       	dc $7068
0001527A 0001                       word_1E0C6:	dc 1
0001527C 7070                       	dc $7070
0001527E 0001                       word_1E0CA:	dc 1
00015280 7078                       	dc $7078
00015282 0001                       word_1E0CE:	dc 1
00015284 7080                       	dc $7080
00015286 0002                       word_1E0D2:	dc 2
00015288 1088                       	dc $1088
0001528A 708A                       	dc $708A
0001528C 0002                       word_1E0D8:	dc 2
0001528E 3092                       	dc $3092
00015290 7096                       	dc $7096
00015292 0002                       word_1E0DE:	dc 2
00015294 509E                       	dc $509E
00015296 70A4                       	dc $70A4
00015298 0002                       word_1E0E4:	dc 2
0001529A 50AC                       	dc $50AC
0001529C 70B2                       	dc $70B2
0001529E 0000                       word_1E0EA:	dc 0
000152A0 0001                       word_1E0EC:	dc 1
000152A2 F0BA                       	dc $F0BA
000152A4                            	even
000152A4                            
000152A4                            ; ===========================================================================
000152A4                            
000152A4                            LoadPlayerPal:
000152A4 7000                       		moveq	#0,d0
000152A6 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000152AA 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000152AE 4E75                       		rts
000152B0                            
000152B0                            	@palLUT:
000152B0 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
000152B5 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
000152BC 00                         		even
000152BC                            
000152BC                            LoadPlayerWaterPal:
000152BC 7000                       		moveq	#0,d0
000152BE 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000152C2 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000152C6 4E75                       		rts
000152C8                            
000152C8                            	@palLUT:
000152C8 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
000152CD 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
000152D4 00                         		even
000152D4                            
000152D4                            LoadLifeIcon:
000152D4 7000                       		moveq	#0,d0
000152D6 3038 FE10                  		move.w	(v_zone).w,d0	
000152DA E418                       		ror.b	#2,d0
000152DC EC48                               lsr.w 	#6,d0		
000152DE 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
000152E2 4EB8 173A                  		jsr		AddPLC	
000152E6 4E75                       		rts
000152E8                            
000152E8                            LoadLifeIcon_Table:
000152E8                            		; GHZ
000152E8 00                         		dc.b	plcid_LifeIcon
000152E9 00                         		dc.b	plcid_LifeIcon
000152EA 00                         		dc.b	plcid_LifeIcon	
000152EB 00                         		dc.b	plcid_LifeIcon	
000152EC                            		; LZ
000152EC 00                         		dc.b	plcid_LifeIcon
000152ED 00                         		dc.b	plcid_LifeIcon
000152EE 00                         		dc.b	plcid_LifeIcon	
000152EF 00                         		dc.b	plcid_LifeIconF	
000152F0                            		; MZ
000152F0 00                         		dc.b	plcid_LifeIconF
000152F1 00                         		dc.b	plcid_LifeIconF
000152F2 00                         		dc.b	plcid_LifeIconF
000152F3 00                         		dc.b	plcid_LifeIconF
000152F4                            		; SLZ
000152F4 00                         		dc.b	plcid_LifeIcon
000152F5 00                         		dc.b	plcid_LifeIcon
000152F6 00                         		dc.b	plcid_LifeIcon	
000152F7 00                         		dc.b	plcid_LifeIcon	
000152F8                            		; SYZ
000152F8 00                         		dc.b	plcid_LifeIconF
000152F9 00                         		dc.b	plcid_LifeIconF
000152FA 00                         		dc.b	plcid_LifeIconF
000152FB 00                         		dc.b	plcid_LifeIconF	
000152FC                            		; SBZ
000152FC 00                         		dc.b	plcid_LifeIconF
000152FD 00                         		dc.b	plcid_LifeIconF
000152FE 00                         		dc.b	plcid_LifeIconF
000152FF 00                         		dc.b	plcid_LifeIconF	
00015300                            		even
00015300                            
00015300                            ; ---------------------------------------------------------------------------
00015300                            ; Object 01 - Sonic
00015300                            ; ---------------------------------------------------------------------------
00015300                            
00015300                            SonicPlayer:
00015300 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015304 6700                       		beq.s	Sonic_Normal	; if not, branch
00015306 4EF9 0000 0000             		jmp	(DebugMode).l
0001530C                            ; ===========================================================================
0001530C                            
0001530C                            Sonic_Normal:
0001530C 7000                       		moveq	#0,d0
0001530E 1028 0024                  		move.b	obRoutine(a0),d0
00015312 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015316 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
0001531A                            ; ===========================================================================
0001531A 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
0001531C 0000                       		dc.w Sonic_Control-Sonic_Index
0001531E 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015320 0000                       		dc.w Sonic_Death-Sonic_Index
00015322 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015324                            ; ===========================================================================
00015324                            
00015324                            Sonic_Main:	; Routine 0
00015324 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001532A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001532E 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015334 117C 0009 0017             		move.b	#9,obWidth(a0)
0001533A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015342 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015348 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001534E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015354 117C 0004 0001             		move.b	#4,obRender(a0)
0001535A 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00015360 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015366 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
0001536C 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015372 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00015378                            		
00015378                            Sonic_Control:    ; Routine 2
00015378 4A38 FF8B                   		tst.b	($FFFFFF8B).w
0001537C 6700 0000                  		beq.w	@cont    
00015380 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015382                             
00015382                            	@cont: 
00015382 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
00015386 6700                       		beq.s    loc_12C58    ; if not, branch
00015388 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
0001538E 6700                       		beq.s    loc_12C58    ; if not, branch
00015390 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00015396 4238 F7CC                  		clr.b    (f_lockctrl).w
0001539A 4E75                       		rts
0001539C                            		
0001539C                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
0001539C                            ; ---------------------------------------------------------------------------
0001539C                            ; Subroutine to    horizontally pan the camera view ahead of the player
0001539C                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
0001539C                            ; ---------------------------------------------------------------------------
0001539C                            
0001539C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001539C                            
0001539C                            
0001539C                            Sonic_PanCamera:
0001539C 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000153A0 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153A4 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153A6 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153A8                            
000153A8                                @abs_inertia:
000153A8                            
000153A8                            ; These lines were intended to prevent the Camera from panning while
000153A8                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153A8                            ; However, given that no such object exists in Sonic 1, I just went
000153A8                            ; ahead and commented these out.
000153A8                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
000153A8                                   ; bne.s	@reset_pan                   ; if not, branch
000153A8                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153A8                                    ;bcs.s    @reset_pan                ; if so, branch
000153A8                            
000153A8                            ; These lines aren't part of the original routine; I added them myself.
000153A8                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153A8                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153A8 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153AC 6700                               beq.s    @skip                    ; if not, branch
000153AE 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000153B4 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000153B6 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000153B8                            
000153B8                                @skip:
000153B8 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000153BC 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000153BE 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000153C2 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000153C4                            
000153C4                                @pan_right:
000153C4 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000153C6 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000153CA 6500                               bcs.s    @update_pan                ; if not, branch
000153CC 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000153D0 6000                               bra.s    @update_pan                ; branch
000153D2                            ; ---------------------------------------------------------------------------
000153D2                            
000153D2                                @pan_left:
000153D2 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000153D4 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000153D8 6400                               bcc.s    @update_pan                ; if not, branch
000153DA 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000153DE 6000                               bra.s    @update_pan                ; branch
000153E0                            ; ---------------------------------------------------------------------------
000153E0                            
000153E0                                @reset_pan:
000153E0 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000153E4 6700                               beq.s    @update_pan                ; if so, branch
000153E6 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000153E8                                 
000153E8                                @reset_right:
000153E8 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000153EA 6000                               bra.s    @update_pan                ; branch
000153EC                            ; ---------------------------------------------------------------------------
000153EC                            
000153EC                                @reset_left:
000153EC 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000153EE                            
000153EE                                @update_pan:
000153EE 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000153F2 4E75                               rts                                ; return
000153F4                                 
000153F4                            ; End of function Sonic_PanCamera
000153F4                            
000153F4                            
000153F4                            ; ===========================================================================
000153F4                            
000153F4                            loc_12C58:
000153F4 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000153F8 6600                       		bne.s	loc_12C64	; if yes, branch
000153FA 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015400                            
00015400                            loc_12C64:
00015400 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015406 6600                       		bne.s	loc_12C7E	; if yes, branch
00015408 7000                       		moveq	#0,d0
0001540A 1028 0022                  		move.b	obStatus(a0),d0
0001540E 0240 0006                  		andi.w	#6,d0
00015412 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015416 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
0001541A                            
0001541A                            loc_12C7E:
0001541A 6100                       		bsr.s	Sonic_Display
0001541C 6100 0000                  		bsr.w	Sonic_Super
00015420 6100 0000                  		bsr.w	Sonic_RecordPosition
00015424 6100 0000                  		bsr.w	Sonic_Water
00015428 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
0001542E 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015434 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015438 6700                       		beq.s	loc_12CA6
0001543A 4A28 001C                  		tst.b	obAnim(a0)
0001543E 6600                       		bne.s	loc_12CA6
00015440 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015446                            
00015446                            loc_12CA6:
00015446 6100 0000                  		bsr.w	Sonic_Animate
0001544A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001544E 6B00                       		bmi.s	loc_12CB6
00015450 4EB9 0000 0000             		jsr	(ReactToItem).l
00015456                            
00015456                            loc_12CB6:
00015456 6100 0000                  		bsr.w	Sonic_Loops
0001545A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001545E 4E75                       		rts	
00015460                            ; ===========================================================================
00015460 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015462 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015464 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015466 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
00015468                            ; ---------------------------------------------------------------------------
00015468                            ; Music	to play	after invincibility wears off
00015468                            ; ---------------------------------------------------------------------------
00015468                            MusicList2:
00015468 00                         		dc.b bgm_GHZ
00015469 00                         		dc.b bgm_LZ
0001546A 00                         		dc.b bgm_MZ
0001546B 00                         		dc.b bgm_SLZ
0001546C 00                         		dc.b bgm_SYZ
0001546D 00                         		dc.b bgm_SBZ
0001546E                            		; The ending doesn't get an entry
0001546E                            		even
0001546E                            
0001546E                            		include	"_incObj\Sonic Display.asm"
0001546E                            ; ---------------------------------------------------------------------------
0001546E                            ; Subroutine to display Sonic and set music
0001546E                            ; ---------------------------------------------------------------------------
0001546E                            
0001546E                            Sonic_Display:
0001546E 3028 0030                  		move.w    flashtime(a0),d0
00015472 6700                       		beq.s    @showAfterImage
00015474 5368 0030                  		subq.w    #1,flashtime(a0)
00015478 E648                               	lsr.w    #3,d0
0001547A 6400                               	bcc.s    @chkinvincible
0001547C                            
0001547C                            	@showAfterImage:
0001547C 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015480 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015482 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015484 4440                       		neg        d0                    ; if not, negate it
00015486                            
00015486                            	@AfterImage_Start:        
00015486 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001548A 6700                       		beq.s	@display	; if not, don't show the After Image
0001548C                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
0001548C                            		;blt.s    @display	; if not, don't show the After Image
0001548C                            	
0001548C                            	@AfterImage_Start2:    
0001548C 6100 A8B4                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015490 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015492 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
00015496 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
0001549C 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154A2 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154A8                            
000154A8                                	@display:
000154A8 4EB9 0000 F7A8                     	jsr    (DisplaySprite).l
000154AE                            
000154AE                            	@chkinvincible:
000154AE 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154B2 6700                       		beq.s	@chkshoes	; if not, branch
000154B4 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
000154BA 6700 0000                          beq		 @exit		
000154BE 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000154C2 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000154C4 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000154C8 6600                       		bne.s	@chkshoes
000154CA 4A38 F7AA                  		tst.b	(f_lockscreen).w
000154CE 6600                       		bne.s	@removeinvincible
000154D0 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000154D6 6500                       		bcs.s	@removeinvincible	
000154D8 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000154DE 6700                       		beq.s	@removeinvincible	
000154E0 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
000154E6 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
000154E8 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
000154EC 6000                       		bra.s	@playtune
000154EE                            		
000154EE                            @haveshoes:		
000154EE 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000154F2                            
000154F2                            @playtune: 
000154F2 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
000154F8                            
000154F8                            	@removeinvincible:
000154F8 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000154FE                            
000154FE                            	@chkshoes:
000154FE 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015502 6700                       		beq.s	@exit		; if not, branch
00015504 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0001550A 6700 0000                          beq		 @exit			
0001550E 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015512 6700                       		beq.s	@exit
00015514 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015518 6600                       		bne.s	@exit
0001551A 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015520 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015526 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001552C 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015532 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015538 6700                       		beq.s	@exit
0001553A 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
00015540 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
00015542 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
00015546 6000                       		bra.b	@playtune2
00015548                            @isinvincible:		
00015548 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001554C                            @playtune2:
0001554C 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015552                            		
00015552                            	@exit:
00015552 4E75                       		rts	
00015552 4E75                       		rts	
00015554                            		include	"_incObj\Sonic RecordPosition.asm"
00015554                            ; ---------------------------------------------------------------------------
00015554                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015554                            ; ---------------------------------------------------------------------------
00015554                            
00015554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015554                            
00015554                            
00015554                            Sonic_RecordPosition:
00015554 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015558 43F8 CB00                  		lea	(v_tracksonic).w,a1
0001555C 43F1 0000                  		lea	(a1,d0.w),a1
00015560 32E8 0008                  		move.w	obX(a0),(a1)+
00015564 32E8 000C                  		move.w	obY(a0),(a1)+
00015568 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
0001556C 4E75                       		rts	
0001556E                            ; End of function Sonic_RecordPosition
0001556E                            ; End of function Sonic_RecordPosition
0001556E                            		include	"_incObj\Sonic Water.asm"
0001556E                            ; ---------------------------------------------------------------------------
0001556E                            ; Subroutine for Sonic when he's underwater
0001556E                            ; ---------------------------------------------------------------------------
0001556E                            
0001556E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001556E                            
0001556E                            
0001556E                            Sonic_Water:
0001556E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00015574 6600                       		bne.s	WaterTagforMZ	; if no, branch
00015576 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
0001557C 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
0001557E                            
0001557E                            	Sonic_Water_Exit:
0001557E 4E75                       		rts	
00015580                            ; ===========================================================================
00015580                            
00015580                            	Sonic_Water_LZ:
00015580 3038 F646                  		move.w	(v_waterpos1).w,d0
00015584 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015588 6C00 0000                  		bge.w	Abovewater	; if yes, branch
0001558C 6000 0000                  		bra	WaterStatus
00015590                            	WaterTagforMZ:
00015590 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015596 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001559A                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0001559A                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0001559A                                ;    	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0001559A                            	;	jsr	Palload_Loop
0001559A                            	WaterStatus:
0001559A 08E8 0006 0022             		bset	#6,obStatus(a0)
000155A0 6600 FFDC                  		bne.w	Sonic_Water_Exit
000155A4 6100 0000                  		bsr.w	ResumeMusic
000155A8 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155AE 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000155B4 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000155BA 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000155C0 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000155C6 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000155CC 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000155D0 6700                       		beq.s	@Skip			; If not branch
000155D2 31FC 0500 F760             		move.w	#$500,(v_sonspeedmax).w
000155D8 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w
000155DE 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
000155E4                            @Skip		
000155E4 E0E8 0010                  		asr	obVelX(a0)
000155E8 E0E8 0012                  		asr	obVelY(a0)
000155EC E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000155F0 6700 FF8C                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000155F4                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155F4 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015604 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001560A 6600 0000                  		bne.w	@return
0001560E                            		
0001560E                            		
0001560E                            	@return:
0001560E 4E75                       		rts
00015610                            ; ===========================================================================
00015610                            
00015610                            Abovewater:
00015610 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015616 6700 FF66                  		beq.w	Sonic_Water_Exit
0001561A 6100 0000                  		bsr.w	ResumeMusic
0001561E 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015624                            
00015624 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001562A 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015630 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015636 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
0001563A 6700                       		beq.s	@Skip			; If not branch
0001563C 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
00015642 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
00015648 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
0001564E                            @Skip		
0001564E E1E8 0012                  		asl	obVelY(a0)
00015652 6700 FF2A                  		beq.w	Sonic_Water_Exit
00015656 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
0001565C 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015662 6E00                       		bgt.s	@belowmaxspeed
00015664 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001566A                            
0001566A                            	@belowmaxspeed:
00015674                            ; End of function Sonic_Water
00015674                            ; End of function Sonic_Water
00015674                            		include "_incObj\03 Hangable Sprite.asm"
00015674                            ; ===========================================================================
00015674                            ; ----------------------------------------------------------------------------
00015674                            ; Object 03 - Invisible sprite that you can hang on to
00015674                            ; ----------------------------------------------------------------------------
00015674                            ; Sprite_2C92C:
00015674                            Obj03:
00015674 7000                       	moveq    #0,d0
00015676 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001567A 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
0001567E 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015682                            ; ===========================================================================
00015682                            ; off_2C93A:
00015682                            Obj03_Index:
00015682 0000                           dc.w Obj03_Main-Obj03_Index
00015684 0000                               dc.w Obj03_Init-Obj03_Index
00015686                            ; ===========================================================================
00015686                            ; loc_2C93E:
00015686                            Obj03_Init:
00015686 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001568A 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015690 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015696 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
0001569C                            ; loc_2C954:
0001569C                            Obj03_Main:
0001569C 45E8 0030                      lea    $30(a0),a2
000156A0 43F8 D000                      lea    (v_player).w,a1 ; a1=character
000156A4 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
000156A8 6100                           bsr.s    Obj03_Check
000156AA                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
000156AA                            ;    addq.w    #1,a2                          ;disabled
000156AA                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
000156AA                            ;    bsr.s    Obj03_Check         	;disabled
000156AA 4EF9 0000 0000             	jmp		bonu_chkdel
000156B0                            ; ===========================================================================
000156B0                            ; loc_2C972:
000156B0                            Obj03_Check:
000156B0 4A12                       		tst.b	(a2)
000156B2 6700                       		beq.s	loc_2C9A0
000156B4 0200 0070                  		andi.b	#btnABC,d0
000156B8 6700 0000                  		beq.w	Obj03_Check_End
000156BC 4238 F7C8                  		clr.b	f_lockmulti.w
000156C0 4212                       		clr.b	(a2)
000156C2 157C 0012 0002             		move.b	#$12,2(a2)
000156C8 0240 0F00                  		andi.w	#$F00,d0
000156CC 6700                       		beq.s	loc_2C954
000156CE 157C 003C 0002             		move.b	#$3C,2(a2)
000156D4                            	
000156D4                            loc_2C954:
000156D4 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000156DA 6000 0000                  		bra.w	Obj03_Check_End
000156DE                            ; ===========================================================================
000156DE                            
000156DE                            loc_2C9A0:
000156DE 4A2A 0002                  		tst.b	2(a2)
000156E2 6700                       		beq.s	loc_2C972
000156E4 532A 0002                  		subq.b	#1,2(a2)
000156E8 6600 0000                  		bne.w	Obj03_Check_End
000156EC                            
000156EC                            loc_2C972:
000156EC 3029 0008                  		move.w	obX(a1),d0
000156F0 9068 0008                  		sub.w	obX(a0),d0
000156F4 0640 0018                  		addi.w	#$18,d0
000156F8 0C40 0030                  		cmpi.w	#$30,d0
000156FC 6400 0000                  		bhs.w	Obj03_Check_End
00015700 3229 000C                  		move.w	obY(a1),d1
00015704 9268 000C                  		sub.w	obY(a0),d1
00015708 0C41 0010                  		cmpi.w	#$10,d1
0001570C 6400 0000                  		bhs.w	Obj03_Check_End
00015710 4A38 F7C8                  		tst.b	f_lockmulti.w
00015714 6B00                       		bmi.s	Obj03_Check_End
00015716 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0001571C 6400                       		bhs.s	Obj03_Check_End
0001571E 4A78 FFFA                  		tst.w	(f_debugmode).w
00015722 6600                       		bne.s	Obj03_Check_End
00015724 4269 0010                  		clr.w	x_vel(a1)
00015728 4269 0012                  		clr.w	y_vel(a1)
0001572C 4269 0020                  		clr.w	obInertia(a1)
00015730 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015736 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
0001573C 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015742 14BC 0001                  		move.b	#1,(a2)
00015746                            
00015746                            ; return_2CA08:
00015746                            Obj03_Check_End:
00015746 4E75                       		rts
00015746 4E75                       		rts
00015748                            
00015748                            ; ===========================================================================
00015748                            ; ---------------------------------------------------------------------------
00015748                            ; Modes	for controlling	Sonic
00015748                            ; ---------------------------------------------------------------------------
00015748                            
00015748                            Sonic_MdNormal:
00015748                            		;bsr.w	Sonic_Peelout
00015748                            		;bsr.w	Sonic_SpinDash
00015748 6100 0000                  		bsr.w	Sonic_Jump
0001574C 6100 0000                  		bsr.w	Sonic_SlopeResist
00015750 6100 0000                  		bsr.w	Sonic_Move
00015754 6100 0000                  		bsr.w	Sonic_Roll
00015758 6100 0000                  		bsr.w	Sonic_LevelBound
0001575C 4EB9 0000 F794             		jsr	(SpeedToPos).l
00015762 6100 0000                  		bsr.w	Sonic_AnglePos
00015766 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001576A 4E75                       		rts	
0001576C                            
0001576C                            ; ===========================================================================
0001576C                            
0001576C                            Sonic_MdJump:
0001576C 6100 0000                  		bsr.w   Sonic_AirRoll
00015770 6100 0000                  		bsr.w	Sonic_JumpHeight
00015774 6100 0000                  		bsr.w	Sonic_JumpDirection
00015778 6100 0000                  		bsr.w	Sonic_LevelBound
0001577C 4EB9 0000 F75C             		jsr	(ObjectFall).l
00015782 0828 0006 0022             		btst	#6,obStatus(a0)
00015788 6700                       		beq.s	loc_12E5C
0001578A 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015790                            
00015790                            loc_12E5C:
00015790 6100 0000                  		bsr.w	Sonic_JumpAngle
00015794 6100 0000                  		bsr.w	Sonic_Floor
00015798 4E75                       		rts	
0001579A                            ; ===========================================================================
0001579A                            
0001579A                            Sonic_MdRoll:
0001579A 6100 0000                  		bsr.w	Sonic_Jump
0001579E 6100 0000                  		bsr.w	Sonic_RollRepel
000157A2 6100 0000                  		bsr.w	Sonic_RollSpeed
000157A6 6100 0000                  		bsr.w	Sonic_LevelBound
000157AA 4EB9 0000 F794             		jsr	(SpeedToPos).l
000157B0 6100 0000                  		bsr.w	Sonic_AnglePos
000157B4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000157B8 4E75                       		rts	
000157BA                            ; ===========================================================================
000157BA                            
000157BA                            Sonic_MdJump2:
000157BA 6100 0000                  		bsr.w	Sonic_HomingAttack
000157BE 6100 0000                  		bsr.w	Sonic_JumpHeight
000157C2 6100 0000                  		bsr.w	Sonic_JumpDirection
000157C6 6100 0000                  		bsr.w	Sonic_LevelBound
000157CA 4EB9 0000 F75C             		jsr	(ObjectFall).l
000157D0 0828 0006 0022             		btst	#6,obStatus(a0)
000157D6 6700                       		beq.s	loc_12EA6
000157D8 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000157DE                            
000157DE                            loc_12EA6:
000157DE 6100 0000                  		bsr.w	Sonic_JumpAngle
000157E2 6100 0000                  		bsr.w	Sonic_Floor
000157E6 4E75                       		rts	
000157E8                            
000157E8                            		include	"_incObj\Sonic Move.asm"
000157E8                            ; ---------------------------------------------------------------------------
000157E8                            ; Subroutine to	make Sonic walk/run
000157E8                            ; ---------------------------------------------------------------------------
000157E8                            
000157E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E8                            
000157E8                            
000157E8                            Sonic_Move:
000157E8 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000157EC 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000157F0 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000157F4 4A38 F7CA                  		tst.b	(f_jumponly).w
000157F8 6600 0000                  		bne.w	loc_12FEE
000157FC 4A68 003E                  		tst.w	$3E(a0)
00015800 6600 0000                  		bne.w	Sonic_ResetScr
00015804 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001580A 6700                       		beq.s	@notleft	; if not, branch
0001580C 6100 0000                  		bsr.w	Sonic_MoveLeft
00015810                            
00015810                            	@notleft:
00015810 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015816 6700                       		beq.s	@notright	; if not, branch
00015818 6100 0000                  		bsr.w	Sonic_MoveRight
0001581C                            
0001581C                            	@notright:
0001581C 1028 0026                  		move.b	obAngle(a0),d0
00015820 0600 0020                  		addi.b	#$20,d0
00015824 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015828 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001582C 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015830 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015834 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001583A 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015840 0828 0003 0022             		btst	#3,obStatus(a0)
00015846 6700                       		beq.s	Sonic_Balance
00015848 7000                       		moveq	#0,d0
0001584A 1028 003D                  		move.b	$3D(a0),d0
0001584E ED48                       		lsl.w	#6,d0
00015850 43F8 D000                  		lea	(v_objspace).w,a1
00015854 43F1 0000                  		lea	(a1,d0.w),a1
00015858 4A29 0022                  		tst.b	obStatus(a1)
0001585C 6B00                       		bmi.s	Sonic_LookUp
0001585E 7200                       		moveq	#0,d1
00015860 1229 0014                  		move.b	obActWid(a1),d1
00015864 3401                       		move.w	d1,d2
00015866 D442                       		add.w	d2,d2
00015868 5942                       		subq.w	#4,d2
0001586A D268 0008                  		add.w	obX(a0),d1
0001586E 9269 0008                  		sub.w	obX(a1),d1
00015872 0C41 0004                  		cmpi.w	#4,d1
00015876 6D00                       		blt.s	loc_12F6A
00015878 B242                       		cmp.w	d2,d1
0001587A 6C00                       		bge.s	loc_12F5A
0001587C 6000                       		bra.s	Sonic_LookUp
0001587E                            ; ===========================================================================
0001587E                            
0001587E                            Sonic_Balance:
0001587E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015884 0C41 000C                  		cmpi.w	#$C,d1
00015888 6D00                       		blt.s	Sonic_LookUp
0001588A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015890 6600                       		bne.s	loc_12F62
00015892                            
00015892                            loc_12F5A:
00015892 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015898 6000                       		bra.s	loc_12F70
0001589A                            ; ===========================================================================
0001589A                            
0001589A                            loc_12F62:
0001589A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000158A0 6600                       		bne.s	Sonic_LookUp
000158A2                            
000158A2                            loc_12F6A:
000158A2 08E8 0000 0022             		bset	#0,obStatus(a0)
000158A8                            
000158A8                            loc_12F70:
000158A8 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
000158AE 6000 0000                  		bra.w	Sonic_ResetScr
000158B2                            ; ===========================================================================
000158B2                            
000158B2                            Sonic_LookUp:
000158B2 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
000158B8 6700                       		beq.s	Sonic_Duck	; if not, branch
000158BA 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
000158C0 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
000158C6 6700                       		beq.s	loc_12FC2
000158C8 5478 F73E                  		addq.w	#2,(v_lookshift).w
000158CC 6000                       		bra.s	loc_12FC2
000158CE                            ; ===========================================================================
000158CE                            
000158CE                            Sonic_Duck:
000158CE 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000158D4 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000158D6 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
000158DC 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
000158E2 6700                       		beq.s	loc_12FC2
000158E4 5578 F73E                  		subq.w	#2,(v_lookshift).w
000158E8 6000                       		bra.s	loc_12FC2
000158EA                            ; =============================================
000158EA                            ; ===========================================================================
000158EA                            
000158EA                            Sonic_ResetScr:
000158EA 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000158F0                            		
000158F0                            Sonic_ResetScr_Part2:
000158F0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000158F6 6700                       		beq.s	loc_12FC2	; if yes, branch
000158F8 6400                       		bcc.s	loc_12FBE
000158FA 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000158FE                            
000158FE                            loc_12FBE:
000158FE 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015902                            
00015902                            loc_12FC2:
00015902 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015906 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
0001590A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001590C 3028 0020                  		move.w	obInertia(a0),d0
00015910 6700                       		beq.s	loc_12FEE
00015912 6B00                       		bmi.s	loc_12FE2
00015914 9045                       		sub.w	d5,d0
00015916 6400                       		bcc.s	loc_12FDC
00015918 303C 0000                  		move.w	#0,d0
0001591C                            
0001591C                            loc_12FDC:
0001591C 3140 0020                  		move.w	d0,obInertia(a0)
00015920 6000                       		bra.s	loc_12FEE
00015922                            ; ===========================================================================
00015922                            
00015922                            loc_12FE2:
00015922 D045                       		add.w	d5,d0
00015924 6400                       		bcc.s	loc_12FEA
00015926 303C 0000                  		move.w	#0,d0
0001592A                            
0001592A                            loc_12FEA:
0001592A 3140 0020                  		move.w	d0,obInertia(a0)
0001592E                            
0001592E                            loc_12FEE:
0001592E 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015932 6600                       		bne.s	loc_1300C 	;Peelout
00015934 1028 0026                  		move.b	obAngle(a0),d0
00015938 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001593E C3E8 0020                  		muls.w	obInertia(a0),d1
00015942 E081                       		asr.l	#8,d1
00015944 3141 0010                  		move.w	d1,obVelX(a0)
00015948 C1E8 0020                  		muls.w	obInertia(a0),d0
0001594C E080                       		asr.l	#8,d0
0001594E 3140 0012                  		move.w	d0,obVelY(a0)
00015952                            
00015952                            loc_1300C:
00015952 1028 0026                  		move.b	obAngle(a0),d0
00015956 0600 0040                  		addi.b	#$40,d0
0001595A 6B00                       		bmi.s	locret_1307C
0001595C 123C 0040                  		move.b	#$40,d1
00015960 4A68 0020                  		tst.w	obInertia(a0)
00015964 6700                       		beq.s	locret_1307C
00015966 6B00                       		bmi.s	loc_13024
00015968 4441                       		neg.w	d1
0001596A                            
0001596A                            loc_13024:
0001596A 1028 0026                  		move.b	obAngle(a0),d0
0001596E D001                       		add.b	d1,d0
00015970 3F00                       		move.w	d0,-(sp)
00015972 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015976 301F                       		move.w	(sp)+,d0
00015978 4A41                       		tst.w	d1
0001597A 6A00                       		bpl.s	locret_1307C
0001597C E141                       		asl.w	#8,d1
0001597E 0600 0020                  		addi.b	#$20,d0
00015982 0200 00C0                  		andi.b	#$C0,d0
00015986 6700                       		beq.s	loc_13078
00015988 0C00 0040                  		cmpi.b	#$40,d0
0001598C 6700                       		beq.s	loc_13066
0001598E 0C00 0080                  		cmpi.b	#$80,d0
00015992 6700                       		beq.s	loc_13060
00015994 D368 0010                  		add.w	d1,obVelX(a0)
00015998 08E8 0005 0022             		bset	#5,obStatus(a0)
0001599E 317C 0000 0020             		move.w	#0,obInertia(a0)
000159A4 4E75                       		rts	
000159A6                            ; ===========================================================================
000159A6                            
000159A6                            loc_13060:
000159A6 9368 0012                  		sub.w	d1,obVelY(a0)
000159AA 4E75                       		rts	
000159AC                            ; ===========================================================================
000159AC                            
000159AC                            loc_13066:
000159AC 9368 0010                  		sub.w	d1,obVelX(a0)
000159B0 08E8 0005 0022             		bset	#5,obStatus(a0)
000159B6 317C 0000 0020             		move.w	#0,obInertia(a0)
000159BC 4E75                       		rts	
000159BE                            ; ===========================================================================
000159BE                            
000159BE                            loc_13078:
000159BE D368 0012                  		add.w	d1,obVelY(a0)
000159C2                            
000159C2                            locret_1307C:
000159C2 4E75                       		rts	
000159C4                            ; End of function Sonic_Move
000159C4                            
000159C4                            
000159C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C4                            
000159C4                            
000159C4                            Sonic_MoveLeft:
000159C4 3028 0020                  		move.w	obInertia(a0),d0
000159C8 6700                       		beq.s	loc_13086
000159CA 6A00                       		bpl.s	loc_130B2
000159CC                            
000159CC                            loc_13086:
000159CC 08E8 0000 0022             		bset	#0,$22(a0)
000159D2 6600                       		bne.s	loc_1309A
000159D4 08A8 0005 0022             		bclr	#5,$22(a0)
000159DA 117C 0001 001D             		move.b	#1,$1D(a0)
000159E0                            
000159E0                            loc_1309A:
000159E0 9045                       		sub.w	d5,d0
000159E2 3206                       		move.w	d6,d1
000159E4 4441                       		neg.w	d1
000159E6 B041                       		cmp.w	d1,d0
000159E8 6E00                       		bgt.s	loc_130A6
000159EA D045                       		add.w	d5,d0
000159EC B041                       		cmp.w	d1,d0
000159EE 6F00                       		ble.s	loc_130A6
000159F0 3001                       		move.w	d1,d0
000159F2                            
000159F2                            loc_130A6:
000159F2 3140 0020                  		move.w	d0,obInertia(a0)
000159F6 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000159FC 4E75                       		rts
000159FE                            ; ===========================================================================
000159FE                            
000159FE                            loc_130B2:
000159FE 9044                       		sub.w	d4,d0
00015A00 6400                       		bcc.s	loc_130BA
00015A02 303C FF80                  		move.w	#-$80,d0
00015A06                            
00015A06                            loc_130BA:
00015A06 3140 0020                  		move.w	d0,obInertia(a0)
00015A0A 1228 0026                  		move.b	obAngle(a0),d1
00015A0E 0601 0020                  		addi.b	#$20,d1
00015A12 0201 00C0                  		andi.b	#$C0,d1
00015A16 6600                       		bne.s	locret_130E8
00015A18 0C40 0400                  		cmpi.w	#$400,d0
00015A1C 6D00                       		blt.s	locret_130E8
00015A1E 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A24 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A34 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015A3A 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015A40                            		
00015A40                            locret_130E8:
00015A40 4E75                       		rts	
00015A42                            ; End of function Sonic_MoveLeft
00015A42                            
00015A42                            
00015A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A42                            
00015A42                            
00015A42                            Sonic_MoveRight:
00015A42 3028 0020                  		move.w	obInertia(a0),d0
00015A46 6B00                       		bmi.s	loc_13118
00015A48 08A8 0000 0022             		bclr	#0,$22(a0)
00015A4E 6700                       		beq.s	loc_13104
00015A50 08A8 0005 0022             		bclr	#5,$22(a0)
00015A56 117C 0001 001D             		move.b	#1,$1D(a0)
00015A5C                            
00015A5C                            loc_13104:
00015A5C D045                       		add.w	d5,d0
00015A5E B046                       		cmp.w	d6,d0
00015A60 6D00                       		blt.s	loc_1310C
00015A62 9045                       		sub.w	d5,d0
00015A64 B046                       		cmp.w	d6,d0
00015A66 6C00                       		bge.s	loc_1310C
00015A68 3006                       		move.w	d6,d0
00015A6A                            
00015A6A                            loc_1310C:
00015A6A 3140 0020                  		move.w	d0,obInertia(a0)
00015A6E 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015A74 4E75                       		rts
00015A76                            ; ===========================================================================
00015A76                            
00015A76                            loc_13118:
00015A76 D044                       		add.w	d4,d0
00015A78 6400                       		bcc.s	loc_13120
00015A7A 303C 0080                  		move.w	#$80,d0
00015A7E                            
00015A7E                            loc_13120:
00015A7E 3140 0020                  		move.w	d0,obInertia(a0)
00015A82 1228 0026                  		move.b	obAngle(a0),d1
00015A86 0601 0020                  		addi.b	#$20,d1
00015A8A 0201 00C0                  		andi.b	#$C0,d1
00015A8E 6600                       		bne.s	locret_1314E
00015A90 0C40 FC00                  		cmpi.w	#-$400,d0
00015A94 6E00                       		bgt.s	locret_1314E
00015A96 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A9C 08E8 0000 0022             		bset	#0,obStatus(a0)
00015AAC 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AB2 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015AB8                            		
00015AB8                            locret_1314E:
00015AB8 4E75                       		rts	
00015ABA                            ; End of function Sonic_MoveRight
00015ABA                            ; End of function Sonic_MoveRight
00015ABA                            		include	"_incObj\Sonic RollSpeed.asm"
00015ABA                            ; ---------------------------------------------------------------------------
00015ABA                            ; Subroutine to	change Sonic's speed as he rolls
00015ABA                            ; ---------------------------------------------------------------------------
00015ABA                            
00015ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015ABA                            
00015ABA                            
00015ABA                            Sonic_RollSpeed:
00015ABA 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015ABE E346                       		asl.w	#1,d6
00015AC0 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015AC2 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015AC6 E444                       		asr.w	#2,d4
00015AC8 4A38 F7CA                  		tst.b	(f_jumponly).w
00015ACC 6600 0000                  		bne.w	loc_131CC
00015AD0 4A68 003E                  		tst.w	$3E(a0)
00015AD4 6600                       		bne.s	@notright
00015AD6 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015ADC 6700                       		beq.s	@notleft	; if not, branch
00015ADE 6100 0000                  		bsr.w	Sonic_RollLeft
00015AE2                            
00015AE2                            	@notleft:
00015AE2 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015AE8 6700                       		beq.s	@notright	; if not, branch
00015AEA 6100 0000                  		bsr.w	Sonic_RollRight
00015AEE                            
00015AEE                            	@notright:
00015AEE 3028 0020                  		move.w	obInertia(a0),d0
00015AF2 6700                       		beq.s	loc_131AA
00015AF4 6B00                       		bmi.s	loc_1319E
00015AF6 9045                       		sub.w	d5,d0
00015AF8 6400                       		bcc.s	loc_13198
00015AFA 303C 0000                  		move.w	#0,d0
00015AFE                            
00015AFE                            loc_13198:
00015AFE 3140 0020                  		move.w	d0,obInertia(a0)
00015B02 6000                       		bra.s	loc_131AA
00015B04                            ; ===========================================================================
00015B04                            
00015B04                            loc_1319E:
00015B04 D045                       		add.w	d5,d0
00015B06 6400                       		bcc.s	loc_131A6
00015B08 303C 0000                  		move.w	#0,d0
00015B0C                            
00015B0C                            loc_131A6:
00015B0C 3140 0020                  		move.w	d0,obInertia(a0)
00015B10                            
00015B10                            loc_131AA:
00015B10 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015B14 6600                       		bne.s	loc_131CC	; if yes, branch
00015B16 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015B1C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015B22 117C 0009 0017             		move.b	#9,obWidth(a0)
00015B28 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015B2E 5B68 000C                  		subq.w	#5,obY(a0)
00015B32                            
00015B32                            loc_131CC:
00015B32 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015B38 6700                       		beq.s	@cont2
00015B3A 6400                       		bcc.s	@cont1
00015B3C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B40                            		
00015B40                            @cont1:
00015B40 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B44                            		
00015B44                            @cont2:
00015B44 1028 0026                  		move.b	obAngle(a0),d0
00015B48 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015B4E C1E8 0020                  		muls.w	obInertia(a0),d0
00015B52 E080                       		asr.l	#8,d0
00015B54 3140 0012                  		move.w	d0,obVelY(a0)
00015B58 C3E8 0020                  		muls.w	obInertia(a0),d1
00015B5C E081                       		asr.l	#8,d1
00015B5E 0C41 1000                  		cmpi.w	#$1000,d1
00015B62 6F00                       		ble.s	loc_131F0
00015B64 323C 1000                  		move.w	#$1000,d1
00015B68                            
00015B68                            loc_131F0:
00015B68 0C41 F000                  		cmpi.w	#-$1000,d1
00015B6C 6C00                       		bge.s	loc_131FA
00015B6E 323C F000                  		move.w	#-$1000,d1
00015B72                            
00015B72                            loc_131FA:
00015B72 3141 0010                  		move.w	d1,obVelX(a0)
00015B76 6000 FDDA                  		bra.w	loc_1300C
00015B7A                            ; End of function Sonic_RollSpeed
00015B7A                            
00015B7A                            
00015B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B7A                            
00015B7A                            
00015B7A                            Sonic_RollLeft:
00015B7A 3028 0020                  		move.w	obInertia(a0),d0
00015B7E 6700                       		beq.s	loc_1320A
00015B80 6A00                       		bpl.s	loc_13218
00015B82                            
00015B82                            loc_1320A:
00015B82 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B88 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B8E 4E75                       		rts	
00015B90                            ; ===========================================================================
00015B90                            
00015B90                            loc_13218:
00015B90 9044                       		sub.w	d4,d0
00015B92 6400                       		bcc.s	loc_13220
00015B94 303C FF80                  		move.w	#-$80,d0
00015B98                            
00015B98                            loc_13220:
00015B98 3140 0020                  		move.w	d0,obInertia(a0)
00015B9C 4E75                       		rts	
00015B9E                            ; End of function Sonic_RollLeft
00015B9E                            
00015B9E                            
00015B9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B9E                            
00015B9E                            
00015B9E                            Sonic_RollRight:
00015B9E 3028 0020                  		move.w	obInertia(a0),d0
00015BA2 6B00                       		bmi.s	loc_1323A
00015BA4 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015BAA 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BB0 4E75                       		rts	
00015BB2                            ; ===========================================================================
00015BB2                            
00015BB2                            loc_1323A:
00015BB2 D044                       		add.w	d4,d0
00015BB4 6400                       		bcc.s	loc_13242
00015BB6 303C 0080                  		move.w	#$80,d0
00015BBA                            
00015BBA                            loc_13242:
00015BBA 3140 0020                  		move.w	d0,obInertia(a0)
00015BBE 4E75                       		rts	
00015BC0                            ; End of function Sonic_RollRight
00015BC0                            ; End of function Sonic_RollRight
00015BC0                            		include	"_incObj\Sonic JumpDirection.asm"
00015BC0                            ; ---------------------------------------------------------------------------
00015BC0                            ; Subroutine to	change Sonic's direction while jumping
00015BC0                            ; ---------------------------------------------------------------------------
00015BC0                            
00015BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BC0                            
00015BC0                            
00015BC0                            Sonic_JumpDirection:
00015BC0 3C38 F760                  		move.w	($FFFFF760).w,d6
00015BC4 3A38 F762                  		move.w	($FFFFF762).w,d5
00015BC8 E345                       		asl.w	#1,d5
00015BCA 3028 0010                  		move.w	$10(a0),d0	
00015BCE 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015BD4 6700                       		beq.s	loc_13278; if not, branch	
00015BD6 08E8 0000 0022             		bset	#0,$22(a0)	
00015BDC 9045                       		sub.w	d5,d0	
00015BDE 3206                       		move.w	d6,d1	
00015BE0 4441                       		neg.w	d1	
00015BE2 B041                       		cmp.w	d1,d0	
00015BE4 6E00                       		bgt.s	loc_13278	
00015BE6 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015BE8 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015BEA 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015BEC 3001                       		move.w	d1,d0
00015BEE                            
00015BEE                            loc_13278:
00015BEE 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015BF4 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015BF6 08A8 0000 0022             		bclr	#0,$22(a0)	
00015BFC D045                       		add.w	d5,d0	
00015BFE B046                       		cmp.w	d6,d0	
00015C00 6D00                       		blt.s	Obj01_JumpMove
00015C02 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015C04 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015C06 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015C08 3006                       		move.w	d6,d0
00015C0A                            
00015C0A                            Obj01_JumpMove:
00015C0A 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015C0E                            
00015C0E                            Obj01_ResetScr2:
00015C0E 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015C14 6700                       		beq.s	loc_132A4	; if yes, branch
00015C16 6400                       		bcc.s	loc_132A0
00015C18 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015C1C                            
00015C1C                            loc_132A0:
00015C1C 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015C20                            
00015C20                            loc_132A4:
00015C20 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015C26 6500                       		bcs.s	locret_132D2	; if yes, branch
00015C28 3028 0010                  		move.w	obVelX(a0),d0
00015C2C 3200                       		move.w	d0,d1
00015C2E EA41                       		asr.w	#5,d1
00015C30 6700                       		beq.s	locret_132D2
00015C32 6B00                       		bmi.s	loc_132C6
00015C34 9041                       		sub.w	d1,d0
00015C36 6400                       		bcc.s	loc_132C0
00015C38 303C 0000                  		move.w	#0,d0
00015C3C                            
00015C3C                            loc_132C0:
00015C3C 3140 0010                  		move.w	d0,obVelX(a0)
00015C40 4E75                       		rts	
00015C42                            ; ===========================================================================
00015C42                            
00015C42                            loc_132C6:
00015C42 9041                       		sub.w	d1,d0
00015C44 6500                       		bcs.s	loc_132CE
00015C46 303C 0000                  		move.w	#0,d0
00015C4A                            
00015C4A                            loc_132CE:
00015C4A 3140 0010                  		move.w	d0,obVelX(a0)
00015C4E                            
00015C4E                            locret_132D2:
00015C4E 4E75                       		rts	
00015C50                            ; End of function Sonic_JumpDirection
00015C50                            ; End of function Sonic_JumpDirection
00015C50                            		include "_incObj\Sonic Peelout.asm"
00015C50                            ; ---------------------------------------------------------------------------
00015C50                            ; Subroutine to make Sonic perform a peelout
00015C50                            ; ---------------------------------------------------------------------------
00015C50                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C50                            
00015C50                            Sonic_Peelout:
00015C50 0828 0001 0039             		btst	#1,$39(a0)
00015C56 6600                       		bne.s	SCDPeelout_Launch
00015C58 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015C5E 6600                       		bne.s	@return
00015C60 1038 F603                  		move.b	($FFFFF603).w,d0
00015C64 0200 0070                  		andi.b	#%01110000,d0
00015C68 6700 0000                  		beq.w	@return
00015C6C 117C 0001 001C             		move.b	#1,$1C(a0)
00015C72 317C 0000 003A             		move.w	#0,$3A(a0)
00015C78 303C 00D2                  		move.w	#$D2,d0
00015C7C 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015C82                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015C82 588F                       		addq.l	#4,sp
00015C84 08E8 0001 0039             		bset	#1,$39(a0)
00015C8A                            		
00015C8A 4268 0020                  		clr.w	obInertia(a0)
00015C8E                             
00015C8E 6100 0000                  		bsr.w	Sonic_LevelBound
00015C92 6100 0000                  		bsr.w	Sonic_AnglePos
00015C96                             
00015C96                            	@return:
00015C96 4E75                       		rts	
00015C98                            ; ---------------------------------------------------------------------------
00015C98                             
00015C98                            SCDPeelout_Launch:
00015C98 0828 0001 0039             		btst	#1,$39(a0)
00015C9E 1038 F602                  		move.b	($FFFFF602).w,d0
00015CA2 0800 0000                  		btst	#0,d0
00015CA6 6600 0000                  		bne.w	SCDPeelout_Charge
00015CAA 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015CB0 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015CB6 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015CBA 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015CC0 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015CC6 3028 0020                  		move.w	obInertia(a0),d0
00015CCA 0440 0800                  		subi.w	#$800,d0
00015CCE D040                       		add.w	d0,d0
00015CD0 0240 1F00                  		andi.w	#$1F00,d0
00015CD4 4440                       		neg.w	d0
00015CD6 0640 2000                  		addi.w	#$2000,d0
00015CDA 31C0 C904                  		move.w	d0,($FFFFC904).w
00015CDE 0828 0000 0022             		btst	#0,$22(a0)
00015CE4 6700                       		beq.s	@dontflip
00015CE6 4468 0020                  		neg.w	obInertia(a0)
00015CEA                             
00015CEA                            @dontflip:
00015CEA 08A8 0007 0022             		bclr	#7,$22(a0)
00015CF0 303C 00D3                  		move.w	#$D3,d0
00015CF4 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
00015CFA                            	;	sfx 	sfx_PeeloutRelease
00015CFA 1028 0026                  		move.b	obAngle(a0),d0
00015CFE 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015D04 C3E8 0020                  		muls.w	obInertia(a0),d1
00015D08 E081                       		asr.l	#8,d1
00015D0A 3141 0010                  		move.w	d1,obVelX(a0)
00015D0E C1E8 0020                  		muls.w	obInertia(a0),d0
00015D12 E080                       		asr.l	#8,d0
00015D14 3140 0012                  		move.w	d0,obVelY(a0)	
00015D18 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015D1C                            ; ---------------------------------------------------------------------------
00015D1C                             
00015D1C                            SCDPeelout_Charge:				; If still charging the dash...
00015D1C 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015D20 3401                       		move.w	d1,d2
00015D22 D241                       		add.w	d1,d1
00015D24 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015D28 6700                       		beq.s	@noshoes
00015D2A E242                       		asr.w	#1,d2
00015D2C 9242                       		sub.w	d2,d1
00015D2E                            
00015D2E                            @noshoes:
00015D2E 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015D34 B268 0020                  		cmp.w	obInertia(a0),d1
00015D38 6E00                       		bgt.s	@inctimer
00015D3A 3141 0020                  		move.w	d1,obInertia(a0)
00015D3E                            
00015D3E                            @inctimer:
00015D3E 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015D42 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015D48 6500                       		bcs.s	SCDPeelout_ResetScr
00015D4A 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015D50 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015D56                            		
00015D56                            SCDPeelout_Stop_Sound:
00015D56 303C 00D4                  		move.w	#$D4,d0
00015D5A 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015D60                            	;	sfx 	sfx_PeeloutStop
00015D60 4268 0020                  		clr.w	obInertia(a0)
00015D64                            
00015D64                            SCDPeelout_ResetScr:
00015D64 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015D66 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015D6C 6700                       		beq.s	@finish
00015D6E 6400                       		bcc.s	@skip
00015D70 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015D74                             
00015D74                            	@skip:
00015D74 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015D78                             
00015D78                            	@finish:
00015D78 6100 0000                  		bsr.w	Sonic_LevelBound
00015D7C 6100 0000                  		bsr.w	Sonic_AnglePos
00015D80 4E75                       		rts
00015D82                            		
00015D82                            		
00015D82                            		include "_incObj\Sonic Spindash.asm"
00015D82                            ; ---------------------------------------------------------------------------
00015D82                            ; Subroutine to make Sonic perform a spindash
00015D82                            ; ---------------------------------------------------------------------------
00015D82                             
00015D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D82                             
00015D82                             
00015D82                            Sonic_SpinDash:
00015D82 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015D86 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015D88 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015D8E 6600                       		bne.s	locret2_1AC8C		; if not, return
00015D90 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D94 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015D98 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015D9C 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015DA2 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015DA6 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015DAC 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015DAE 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015DB4 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015DBA                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015DBA                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015DBA 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015DC0                            						; the smoke/dust object
00015DC0                            loc2_1AC84:
00015DC0 6100 0000                  		bsr.w	Sonic_LevelBound
00015DC4 6100 0000                  		bsr.w	Sonic_AnglePos
00015DC8                            
00015DC8                            locret2_1AC8C:
00015DC8 4E75                       		rts	
00015DCA                            ; ---------------------------------------------------------------------------
00015DCA                            
00015DCA                            loc2_1AC8E:	
00015DCA 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015DD0 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015DD4 0800 0001                  		btst	#1,d0			; check down button
00015DD8 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015DDC 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015DE2 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015DE8 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015DEE 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015DF2 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015DF8 7000                       		moveq	#0,d0
00015DFA 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015DFE D040                       		add.w	d0,d0			; double it
00015E00 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015E06 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015E0A 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015E0E D040                       		add.w	d0,d0			; double it
00015E10 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015E14 4440                       		neg.w	d0			; negate it
00015E16 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015E1A 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015E1E 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015E24 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015E26 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015E2A                            
00015E2A                            loc2_1ACF4:
00015E2A 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015E30 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015E36 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015E3A 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015E40 1028 0026                  		move.b	obAngle(a0),d0
00015E44 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015E4A C3E8 0020                  		muls.w	obInertia(a0),d1
00015E4E E081                       		asr.l	#8,d1
00015E50 3141 0010                  		move.w	d1,obVelX(a0)
00015E54 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E58 E080                       		asr.l	#8,d0
00015E5A 3140 0012                  		move.w	d0,obVelY(a0)
00015E5E                            	
00015E5E 6000                       		bra.s	loc2_1AD78
00015E60                            ; ===========================================================================
00015E60                            Dash_Speeds:
00015E60 0700                       		dc.w  $700		; 0
00015E62 0780                       		dc.w  $780		; 1
00015E64 0800                       		dc.w  $800		; 2
00015E66 0880                       		dc.w  $880		; 3
00015E68 0900                       		dc.w  $900		; 4
00015E6A 0980                       		dc.w  $980		; 5
00015E6C 0A00                       		dc.w  $A00		; 6
00015E6E 0A80                       		dc.w  $A80		; 7
00015E70 0B00                       		dc.w  $B00		; 8
00015E72                            ; ===========================================================================
00015E72                            
00015E72                            loc2_1AD30:				; If still charging the dash...
00015E72 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015E76 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015E78 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015E7C EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015E7E 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015E82 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015E84 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015E8A                            
00015E8A                            loc2_1AD48:
00015E8A 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E8E 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015E92 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015E96 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015E9C 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015EA0 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015EA6 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015EAC 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015EB2 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015EB8 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015EBA 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015EC0                            
00015EC0                            loc2_1AD78:
00015EC0 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015EC2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015EC8 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015ECA 6400                       		bcc.s	loc2_1AD88
00015ECC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015ED0                            
00015ED0                            loc2_1AD88:
00015ED0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015ED4                            
00015ED4                            loc2_1AD8C:
00015ED4 6100 0000                  		bsr.w	Sonic_LevelBound
00015ED8 6100 0000                  		bsr.w	Sonic_AnglePos
00015EDC                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015EDC 4E75                       		rts
00015EDE                            ; End of subroutine Sonic_SpinDash
00015EDE                            ; End of subroutine Sonic_SpinDash
00015EDE                            		include	"_incObj\Sonic HomingAttack.asm"
00015EDE                            ; ===========================================================================
00015EDE                            ; ---------------------------------------------------------------------------
00015EDE                            ; Subroutine to perform Homing Attack
00015EDE                            ; ---------------------------------------------------------------------------
00015EDE                            
00015EDE                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00015EDE                            
00015EDE                            Sonic_HomingAttack:     
00015EDE 4A38 F5C9                  		tst.b	(v_gshield)
00015EE2 6700                       		beq.s	@Return2
00015EE4 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
00015EEA 6700                       		beq.s	@Homing_Process		; if yes, branch
00015EEC 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00015EF2 6600                       		bne.s	@Homing_Perform
00015EF4 4E75                       		rts
00015EF6                            	@Return2:
00015EF6 4E75                       		rts
00015EF8                            ; ---------------------------------------------------------------------------
00015EF8                            @Homing_Process:
00015EF8 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00015EFC 6600                       		bne.s	@SetSpeeds		; if not, branch
00015EFE 4238 F5CD                  		clr.b	(v_homingattack).w
00015F02 4E75                       		rts
00015F04                            
00015F04                            	@SetSpeeds:
00015F04 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
00015F08                            
00015F08                            			
00015F08                            
00015F08 3229 000C                  		move.w	obY(a1),d1
00015F0C 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
00015F10 3429 0008                  		move.w	obX(a1),d2
00015F14 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
00015F18 4EB9 0000 3F5C                             jsr     (CalcAngle).l		; Calcuate Angle
00015F1E 4EB9 0000 3CCA                             jsr     (CalcSine).l		; Get Sine
00015F24 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
00015F28 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
00015F2C C1C3                       		muls.w	d3,d0
00015F2E C3C3                       		muls.w	d3,d1
00015F30 E080                       		asr.l	#8,d0
00015F32 E081                       		asr.l	#8,d1
00015F34 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
00015F38 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
00015F3C 3140 0020                  		move.w	d0,obInertia(a0)
00015F40 4E75                       		rts
00015F42                            
00015F42                            ; ---------------------------------------------------------------------------
00015F42                            @Homing_Perform:
00015F42 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015F48 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
00015F4A 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
00015F4C 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
00015F4E 3C3C 005F                  		move.w	#$5F,d6
00015F52 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
00015F56 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
00015F5A                            		
00015F5A                            	@ObjectsLoop:                  
00015F5A 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
00015F5E 6A00                       		bpl.s	@NextObject		; if yes, branch
00015F60 4A29 0020                  		tst.b	obColType(a1)			; load touch response
00015F64 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
00015F66                            
00015F66                            	@NextObject:
00015F66 43E9 0040                  		lea	$40(a1),a1		; load next object slot
00015F6A 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
00015F6E                            		
00015F6E 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
00015F74 6200 0000                  		bhi.w	Sonic_JumpDash
00015F78                            
00015F78                            
00015F78                            
00015F78 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
00015F7E 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
00015F84 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015F88 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015F8E                            
00015F8E                            
00015F8E                            ; ---------------------------------------------------------------------------
00015F8E                            @Homing_TestObject:
00015F8E 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
00015F92 1011                       		move.b	(a1),d0
00015F94                            		
00015F94                            	@CheckID:
00015F94 B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
00015F96 6700                       		beq.s	@CalcXDist		; if object is in list, branch
00015F98 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
00015F9A 60CA                       		bra.s	@NextObject		; the object is not in list, quit
00015F9C                            		
00015F9C                            	@CalcXDist:
00015F9C 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
00015FA0 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
00015FA4 6A00                       		bpl.s	@ObjAhead
00015FA6                            
00015FA6                            	; Object is behind Sonic
00015FA6 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015FAC 67B8                       		beq.s	@NextObject		; if not, we can't home at object
00015FAE 6000                       		bra.s	@CalcYDist
00015FB0                            
00015FB0                            	@ObjAhead:
00015FB0 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
00015FB6 66AE                       		bne.s	@NextObject		; if not, we can't home at object
00015FB8                            
00015FB8                            	@CalcYDist:
00015FB8 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
00015FBC 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
00015FC0                            		
00015FC0                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
00015FC0 3002                       		move.w	d2,d0			; d0 -> d2
00015FC2 4840                       		swap	d0
00015FC4 3001                       		move.w	d1,d0			; d0 -> d2 d1
00015FC6 C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
00015FC8 C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
00015FCA D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00015FCC B483                       		cmp.l	d3,d2			; is new distance shorter after all?
00015FCE 6400 FF96                  		bcc.w	@NextObject		; if not, branch
00015FD2                            
00015FD2 2602                       		move.l	d2,d3			; set new distance
00015FD4 3800                       		move.w	d0,d4			; set new Xdist
00015FD6 4840                       		swap	d0
00015FD8 3A00                       		move.w	d0,d5			; set new Ydist
00015FDA 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
00015FDE 6000 FF86                  		bra.w	@NextObject
00015FE2                            
00015FE2                            
00015FE2                            ; ---------------------------------------------------------------------------
00015FE2                            ; Object ids that are available for homming
00015FE2                            ; NOTE: They should go in increasing order (1,2,3..)
00015FE2                            ; ---------------------------------------------------------------------------
00015FE2                            
00015FE2                            @Homing_ObjectList:
00015FE2 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00015FEC 5055 6078                  		dc.b	$50, $55, $60, $78
00015FF0 FF                         		dc.b	-1	; mark end of list
00015FF2 00                         		even
00015FF2                            
00015FF2                            
00015FF2                            ; ===========================================================================
00015FF2                            ; ---------------------------------------------------------------------------
00015FF2                            ; Subroutine to perform Jump Dash
00015FF2                            ; ---------------------------------------------------------------------------
00015FF2                            
00015FF2                            Sonic_JumpDash:
00015FF2 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
00015FF6 6600                       		bne.s	@Return			; if yes, branch
00015FF8 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
00015FFE 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
00016002 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
00016008 6700                       		beq.s	@ChkShoes
0001600A 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
0001600E                            	
0001600E                            	@ChkShoes:
0001600E 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
00016012 6700                       		beq.s	@SetSpeeds		; if not, branch
00016014 0640 0200                  		addi.w	#$200,d0
00016018                            
00016018                            	;@ChkOrientation:
00016018                            		;btst	#0,obStatus(a0)
00016018                            		;beq.s	@SetSpeeds
00016018                            		;neg.w	d0
00016018                            
00016018                            	@SetSpeeds:
00016018 3140 0012                  		move.w	d0,obVelY(a0)
0001601C 3140 0020                  		move.w	d0,obInertia(a0)
00016020                            		;move.w	#0,obVelY(a0)
00016020 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00016024 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
0001602A                            
0001602A                            	@Return:
0001602A 4E75                       		rts
0001602C                            
0001602C                            ; -------------------------------------------------------------------------
0001602C                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
0001602C                            ; Jumpdash again when he has performed a Jumpdash
0001602C                            ; -------------------------------------------------------------------------
0001602C                            
0001602C                            BounceJD:
0001602C 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
00016032 6600                       		bne.s	BounceJD_End	; if not, branch
00016034 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
00016038 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
0001603C 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016042 303C FF10                  		move.w	#-$F0,d0
00016046 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
0001604C 6600                       		bne.s	@MoveAhead		; if not, we can't move right
0001604E 4440                       		neg.w	d0
00016050                            
00016050                            	@MoveAhead:
00016050 3140 0010                  		move.w	d0,obVelX(a0)
00016054                            	@Cont:
00016054 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
0001605A 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
00016060 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00016062 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
00016068                            		
00016068                            BounceJD_Shoes:
00016068 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
0001606C 6700                       		beq.s	BounceJD_End	; if not, branch
0001606E 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
00016074                            		
00016074                            BounceJD_End:
00016074 4E75                       		rts			; return
00016076                            ; End of function BounceJD
00016076                            ; End of function BounceJD
00016076                            
00016076                            Sonic_AirRoll:
00016076 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
0001607C 6600                               bne.s   AirRoll_Return   ; if not, return
0001607E                            
0001607E                            AirRoll_CheckBtn:
0001607E 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00016082 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00016086 6700                               beq.s	AirRoll_Return
00016088 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
0001608E                                   ; move.w	#$BC,d0
0001608E                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
0001608E                            
0001608E                            AirRoll_Return:
0001608E 4E75                               rts
00016090                            ; ===========================================================================
00016090                            ; ---------------------------------------------------------------------------
00016090                            ; Unused subroutine to squash Sonic
00016090                            ; ---------------------------------------------------------------------------
00016090 1028 0026                  		move.b	obAngle(a0),d0
00016094 0600 0020                  		addi.b	#$20,d0
00016098 0200 00C0                  		andi.b	#$C0,d0
0001609C 6600                       		bne.s	locret_13302
0001609E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160A2 4A41                       		tst.w	d1
000160A4 6A00                       		bpl.s	locret_13302
000160A6 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
000160AC 317C 0000 0010             		move.w	#0,obVelX(a0)
000160B2 317C 0000 0012             		move.w	#0,obVelY(a0)
000160B8 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
000160BE                            
000160BE                            locret_13302:
000160BE 4E75                       		rts		
000160C0                            		include	"_incObj\Sonic LevelBound.asm"
000160C0                            ; ---------------------------------------------------------------------------
000160C0                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000160C0                            ; ---------------------------------------------------------------------------
000160C0                            
000160C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160C0                            
000160C0                            
000160C0                            Sonic_LevelBound:
000160C0 2228 0008                  		move.l	obX(a0),d1
000160C4 3028 0010                  		move.w	obVelX(a0),d0
000160C8 48C0                       		ext.l	d0
000160CA E180                       		asl.l	#8,d0
000160CC D280                       		add.l	d0,d1
000160CE 4841                       		swap	d1
000160D0 3038 F728                  		move.w	(v_limitleft2).w,d0
000160D4 0640 0010                  		addi.w	#$10,d0
000160D8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000160DA 6200                       		bhi.s	@sides		; if yes, branch
000160DC 3038 F72A                  		move.w	(v_limitright2).w,d0
000160E0 0640 0128                  		addi.w	#$128,d0
000160E4 4A38 F7AA                  		tst.b	(f_lockscreen).w
000160E8 6600                       		bne.s	@screenlocked
000160EA 0640 0040                  		addi.w	#$40,d0
000160EE                            
000160EE                            	@screenlocked:
000160EE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000160F0 6300                       		bls.s	@sides		; if yes, branch
000160F2                            
000160F2                            	@chkbottom:
000160F2 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000160F6 0640 00E0                  		addi.w	#$E0,d0
000160FA B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
000160FE 6D00                       		blt.s	@bottom		; if yes, branch
00016100 4E75                       		rts	
00016102                            ; ===========================================================================
00016102                            
00016102                            @bottom:
00016102 3038 F726                  		move.w (v_limitbtm1).w,d0 
00016106 3238 F72E                  		move.w (v_limitbtm2).w,d1 
0001610A B240                       		cmp.w d0,d1 ; screen still scrolling down? 
0001610C 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
0001610E 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00016114 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00016118 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
0001611E 6500 0000                  		bcs.w	Kill_transport
00016122 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00016126 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001612C 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00016132 4E75                       		rts	
00016134                            @dontkill: 
00016134 4E75                       		rts
00016136                            ; ===========================================================================
00016136                            
00016136                            @sides:
00016136 3140 0008                  		move.w	d0,obX(a0)
0001613A 317C 0000 000A             		move.w	#0,obX+2(a0)
00016140 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00016146 317C 0000 0020             		move.w	#0,obInertia(a0)
0001614C 60A4                       		bra.s	@chkbottom
0001614E                            
0001614E                            Kill_transport: 
0001614E 4EF9 0000 0000                     	jmp        (KillSonic).l
00016154                            
00016154                            ; End of function Sonic_LevelBound
00016154                            ; End of function Sonic_LevelBound
00016154                            		include	"_incObj\Sonic Roll.asm"
00016154                            ; ---------------------------------------------------------------------------
00016154                            ; Subroutine allowing Sonic to roll when he's moving
00016154                            ; ---------------------------------------------------------------------------
00016154                            
00016154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016154                            
00016154                            
00016154                            Sonic_Roll:
00016154 4A38 F7CA                  		tst.b	(f_jumponly).w
00016158 6600                       		bne.s	@noroll
0001615A 3028 0020                  		move.w	obInertia(a0),d0
0001615E 6A00                       		bpl.s	@ispositive
00016160 4440                       		neg.w	d0
00016162                            
00016162                            	@ispositive:
00016162 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00016166 6500                       		bcs.s	@noroll		; if not, branch
00016168 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001616C 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00016170 6600                       		bne.s	@noroll		; if yes, branch
00016172 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00016178 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
0001617A                            
0001617A                            	@noroll:
0001617A 4E75                       		rts	
0001617C                            ; ===========================================================================
0001617C                            
0001617C                            Sonic_ChkRoll:
0001617C 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00016182 6700                       		beq.s	@roll		; if not, branch
00016184 4E75                       		rts	
00016186                            ; ===========================================================================
00016186                            
00016186                            @roll:
00016186 08E8 0002 0022             		bset	#2,obStatus(a0)
0001618C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00016192 117C 0007 0017             		move.b	#7,obWidth(a0)
00016198 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001619E 5A68 000C                  		addq.w	#5,obY(a0)
000161AC 4A68 0020                  		tst.w	obInertia(a0)
000161B0 6600                       		bne.s	@ismoving
000161B2 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
000161B8                            
000161B8                            	@ismoving:
000161B8 4E75                       		rts	
000161BA                            ; End of function Sonic_Roll
000161BA                            ; End of function Sonic_Roll
000161BA                            		include	"_incObj\Sonic Jump.asm"
000161BA                            ; ---------------------------------------------------------------------------
000161BA                            ; Subroutine allowing Sonic to jump
000161BA                            ; ---------------------------------------------------------------------------
000161BA                            
000161BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161BA                            
000161BA                            
000161BA                            Sonic_Jump:
000161BA 1038 F603                  		move.b	(v_jpadpress2).w,d0
000161BE 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000161C2 6700 0000                  		beq.w	locret_1348E	; if not, branch
000161C6 7000                       		moveq	#0,d0
000161C8 1028 0026                  		move.b	obAngle(a0),d0
000161CC 0600 0080                  		addi.b	#$80,d0
000161D0 6100 0000                  		bsr.w	sub_14D48
000161D4 0C41 0006                  		cmpi.w	#6,d1
000161D8 6D00 0000                  		blt.w	locret_1348E
000161DC 343C 0680                  		move.w	#$680,d2
000161E0 0828 0006 0022             		btst	#6,obStatus(a0)
000161E6 6700                       		beq.s	loc_1341C
000161E8 343C 0380                  		move.w	#$380,d2
000161EC                            
000161EC                            loc_1341C:
000161EC 7000                       		moveq	#0,d0
000161EE 1028 0026                  		move.b	obAngle(a0),d0
000161F2 0400 0040                  		subi.b	#$40,d0
000161F6 4EB9 0000 3CCA             		jsr	(CalcSine).l
000161FC C3C2                       		muls.w	d2,d1
000161FE E081                       		asr.l	#8,d1
00016200 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00016204 C1C2                       		muls.w	d2,d0
00016206 E080                       		asr.l	#8,d0
00016208 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
0001620C 08E8 0001 0022             		bset	#1,obStatus(a0)
00016212 08A8 0005 0022             		bclr	#5,obStatus(a0)
00016218 588F                       		addq.l	#4,sp
0001621A 117C 0001 003C             		move.b	#1,$3C(a0)
00016220 4228 0038                  		clr.b	$38(a0)
0001622E 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016234 117C 0009 0017             		move.b	#9,obWidth(a0)
0001623A 117C 000E 0016             		move.b	#$E,obHeight(a0)
00016240 117C 0007 0017             		move.b	#7,obWidth(a0)
00016246                            Result_Check:
00016246 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
0001624A 6700                       		beq.s   NormalJump ; If not, branch
0001624C 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00016252 6000                       		bra.s   cont ; Continue
00016254                            NormalJump:
00016254 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
0001625A                            cont:
0001625A 08E8 0002 0022             		bset	#2,obStatus(a0)
00016260 5A68 000C                  		addq.w	#5,obY(a0)
00016264                            
00016264                            locret_1348E:
00016264 4E75                       		rts	
00016266                            ; ===========================================================================
00016266                            
00016266                            ; End of function Sonic_Jump
00016266                            ; End of function Sonic_Jump
00016266                            		include	"_incObj\Sonic JumpHeight.asm"
00016266                            ; ---------------------------------------------------------------------------
00016266                            ; Subroutine controlling Sonic's jump height/duration
00016266                            ; ---------------------------------------------------------------------------
00016266                            
00016266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016266                            
00016266                            
00016266                            Sonic_JumpHeight:
00016266 4A28 003C                  		tst.b	$3C(a0)
0001626A 6700                       		beq.s	loc_134C4
0001626C 323C FC00                  		move.w	#-$400,d1
00016270 0828 0006 0022             		btst	#6,obStatus(a0)
00016276 6700                       		beq.s	loc_134AE
00016278 323C FE00                  		move.w	#-$200,d1
0001627C                            
0001627C                            loc_134AE:
0001627C B268 0012                  		cmp.w	obVelY(a0),d1
00016280 6F00                       		ble.s	locret_134C2
00016282 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016286 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
0001628A 6600                       		bne.s	locret_134C2	; if yes, branch
0001628C 3141 0012                  		move.w	d1,obVelY(a0)
00016290                            
00016290                            locret_134C2:
00016290 4A38 F7C8                          tst.b   (f_lockmulti).w      ; Are Controls locked?
00016294 66FA                               bne.s   locret_134C2            ; If so, branch, and do not bother with Super code
00016296 1038 F603                          move.b  (v_jpadpress2).w,d0
0001629A 0200 0010                          andi.b  #btnB,d0 ; is a jump button pressed?
0001629E 6600 0000                  		bne.w	Sonic_CheckGoSuper
000162A2 4E75                       		rts	
000162A4                            ; ===========================================================================
000162A4                            
000162A4                            loc_134C4:
000162A4 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
000162AA 6C00                       		bge.s	locret_134D2
000162AC 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
000162B2                            
000162B2                            locret_134D2:		
000162B2 4E75                       		rts	
000162B4                            ; End of function Sonic_JumpHeight
000162B4                            
000162B4                            
000162B4                            ; ---------------------------------------------------------------------------
000162B4                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
000162B4                            ; if he has enough rings and emeralds
000162B4                            ; ---------------------------------------------------------------------------
000162B4                            
000162B4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000162B4                            
000162B4                            Sonic_CheckGoSuper:
000162B4 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
000162B8 6600 0000                  		bne.w	Sonic_RevertToNormal			; if yes, branch	
000162BC 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; does Sonic have at least 50 rings?
000162C2 6500                       		bcs.s	return_1ABA4		; if not, branch	
000162C4 11FC 0001 F5D8             		move.b	#1,(Super_Sonic_palette).w
000162CA 11FC 000F F5DE             		move.b	#$F,(Palette_timer).w
000162D0 11FC 0001 FE19             		move.b	#1,(Super_Sonic_flag).w
000162D6 4238 FE2E                  		clr.b	(v_shoes).w ; clear speed shoes
000162DA 11FC 0001 F7C8             		move.b    #$1,(f_lockmulti).w
000162E0 117C 0000 001C             		move.b    #id_Transform,obAnim(a0)   
000162E6 4EB9 0000 0000             		jsr		Super_and_Invincibility_Stars				
000162EC 11FC 008D D200             		move.b	#id_SuperStars,($FFFFD200).w				
000162F2 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
000162F8 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
000162FE 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
00016304 317C 0000 0032             		move.w	#0,invtime(a0)
0001630A 11FC 0001 FE2D             		move.b #1,(v_invinc).w ; make Sonic invincible	
00016310 303C 00D6                  		move.w	#$D6,d0         ; 
00016314 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
0001631A 303C 0087                  		move.w	#$87,d0         
0001631E 4EF9 0000 129A             		jmp	(PlaySound).l	; load the invincibility song and return also playmusic doesn't exist
00016324                            
00016324                            ; ---------------------------------------------------------------------------
00016324                            return_1ABA4:
00016324 4E75                       		rts
00016326                            		
00016326                            ; End of subroutine Sonic_CheckGoSuper		
00016326                            ; ---------------------------------------------------------------------------
00016326                            ; Subroutine doing the extra logic for Super Sonic
00016326                            ; ---------------------------------------------------------------------------
00016326                            
00016326                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00016326                            
00016326                            ; loc_1ABA6:
00016326                            Sonic_Super:
00016326 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
0001632A 6700 0000                  		beq.w	return_1AC3C
0001632E 4A38 FE1E                  		tst.b	(f_timecount).w
00016332 6700                       		beq.s	Sonic_RevertToNormal ; ?
00016334 5378 F670                  		subq.w	#1,(v_pal_buffer+$20).w
00016338 6A00 0000                  		bpl.w	return_1AC3C
0001633C 31FC 003C F670             		move.w	#60,(v_pal_buffer+$20).w	; Reset frame counter to 60
00016342 4A78 FE20                  		tst.w	(v_rings).w
00016346 6700                       		beq.s	Sonic_RevertToNormal
00016348 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w
0001634E 0C78 0001 FE20             		cmpi.w	#1,(v_rings).w
00016354 6700                       		beq.s	@update
00016356 0C78 000A FE20             		cmpi.w	#10,(v_rings).w
0001635C 6700                       		beq.s	@update
0001635E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w
00016364 6600                       		bne.s	@update2
00016366                            @update
00016366 0038 0080 FE1D             		ori.b	#$80,(f_ringcount).w
0001636C                            @update2
0001636C 5378 FE20                  		subq.w	#1,(v_rings).w
00016370 6600                       		bne.s	return_1AC3C
00016372                            ; loc_1ABF2:
00016372                            Sonic_RevertToNormal:
00016372 4238 F7C8                  		clr.b   (f_lockmulti).w
00016376 11FC 0002 F5D8             		move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
0001637C 31FC 0028 F5CC             		move.w	#$28,($FFFFF5CC).w	; Unknown
00016382 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00016388 11FC 0000 F7C8             		move.b    #0,(f_lockmulti).w	
0001638E 317C 0001 0032             		move.w	#1,invtime(a0)				
00016394 117C 0001 001D             		move.b	#1,next_anim(a0)	; Change animation back to normal ?
0001639A 4238 D200                  		clr.b	($FFFFD200).w	; clear Obj7E (super sonic stars object) at $FFFFD200		
0001639E 4238 FE2D                  		clr.b 	(v_invinc).w
000163A2 4238 FE2E                  		clr.b 	(v_shoes).w 
000163A6 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000163AA 4EB9 0000 129A             		jsr		(PlaySound).l    ; play normal music		
000163B0 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
000163B6 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
000163BC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
000163C2 0828 0006 0022             		btst	#6,obStatus(a0)	; Check if underwater, return if not
000163C8 6700                       		beq.s	return_1AC3C
000163CA 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w
000163D0 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w
000163D6 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w
000163DC                            		
000163DC                            return_1AC3C:
000163DC 4E75                       		rts
000163DE                            ; End of subroutine Sonic_Super	
000163DE                            
000163DE                            
000163DE                            ; ---------------------------------------------------------------------------
000163DE                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
000163DE                            ; ---------------------------------------------------------------------------
000163DE                            
000163DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163DE                            
000163DE                            
000163DE                            Super_and_Invincibility_Stars:
000163DE 4278 D032                  		clr.w	($FFFFD032).w		; clear time limit of the invincibility
000163E2 2F08                       		move.l	a0,-(sp)
000163E4 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
000163E8 4EBA 93FE                  		jsr		DeleteObject		; delete stars
000163EC 41F8 D240                  		lea		($FFFFD240).w,a0	; stars object ($3802)
000163F0 4EBA 93F6                  		jsr		DeleteObject		; delete stars
000163F4 41F8 D280                  		lea		($FFFFD280).w,a0	; stars object ($3803)
000163F8 4EBA 93EE                  		jsr		DeleteObject		; delete stars
000163FC 41F8 D2C0                  		lea		($FFFFD2C0).w,a0	; stars object ($3804)
00016400 4EBA 93E6                  		jsr		DeleteObject		; delete stars
00016404 205F                       		move.l	(sp)+,a0
00016406 4E75                       		rts
00016408                            ; End of function Super_and_Invincibility_Stars
00016408                            ; End of function Super_and_Invincibility_Stars
00016408                            		include	"_incObj\Sonic SlopeResist.asm"
00016408                            ; ---------------------------------------------------------------------------
00016408                            ; Subroutine to	slow Sonic walking up a	slope
00016408                            ; ---------------------------------------------------------------------------
00016408                            
00016408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016408                            
00016408                            
00016408                            Sonic_SlopeResist:
00016408 1028 0026                  		move.b	obAngle(a0),d0
0001640C 0600 0060                  		addi.b	#$60,d0
00016410 0C00 00C0                  		cmpi.b	#$C0,d0
00016414 6400                       		bcc.s	locret_13508
00016416 1028 0026                  		move.b	obAngle(a0),d0
0001641A 4EB9 0000 3CCA             		jsr	(CalcSine).l
00016420 C1FC 0020                  		muls.w	#$20,d0
00016424 E080                       		asr.l	#8,d0
00016426 4A68 0020                  		tst.w	obInertia(a0)
0001642A 6700                       		beq.s	locret_13508
0001642C 6B00                       		bmi.s	loc_13504
0001642E 4A40                       		tst.w	d0
00016430 6700                       		beq.s	locret_13502
00016432 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00016436                            
00016436                            locret_13502:
00016436 4E75                       		rts	
00016438                            ; ===========================================================================
00016438                            
00016438                            loc_13504:
00016438 D168 0020                  		add.w	d0,obInertia(a0)
0001643C                            
0001643C                            locret_13508:
0001643C 4E75                       		rts	
0001643E                            ; End of function Sonic_SlopeResist
0001643E                            ; End of function Sonic_SlopeResist
0001643E                            		include	"_incObj\Sonic RollRepel.asm"
0001643E                            ; ---------------------------------------------------------------------------
0001643E                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001643E                            ; ---------------------------------------------------------------------------
0001643E                            
0001643E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001643E                            
0001643E                            
0001643E                            Sonic_RollRepel:
0001643E 1028 0026                  		move.b	obAngle(a0),d0
00016442 0600 0060                  		addi.b	#$60,d0
00016446 0C00 00C0                  		cmpi.b	#-$40,d0
0001644A 6400                       		bcc.s	locret_13544
0001644C 1028 0026                  		move.b	obAngle(a0),d0
00016450 4EB9 0000 3CCA             		jsr	(CalcSine).l
00016456 C1FC 0050                  		muls.w	#$50,d0
0001645A E080                       		asr.l	#8,d0
0001645C 4A68 0020                  		tst.w	obInertia(a0)
00016460 6B00                       		bmi.s	loc_1353A
00016462 4A40                       		tst.w	d0
00016464 6A00                       		bpl.s	loc_13534
00016466 E480                       		asr.l	#2,d0
00016468                            
00016468                            loc_13534:
00016468 D168 0020                  		add.w	d0,obInertia(a0)
0001646C 4E75                       		rts	
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            loc_1353A:
0001646E 4A40                       		tst.w	d0
00016470 6B00                       		bmi.s	loc_13540
00016472 E480                       		asr.l	#2,d0
00016474                            
00016474                            loc_13540:
00016474 D168 0020                  		add.w	d0,obInertia(a0)
00016478                            
00016478                            locret_13544:
00016478 4E75                       		rts	
0001647A                            ; End of function Sonic_RollRepel
0001647A                            ; End of function Sonic_RollRepel
0001647A                            		include	"_incObj\Sonic SlopeRepel.asm"
0001647A                            ; ---------------------------------------------------------------------------
0001647A                            ; Subroutine to	push Sonic down	a slope
0001647A                            ; ---------------------------------------------------------------------------
0001647A                            
0001647A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001647A                            
0001647A                            
0001647A                            Sonic_SlopeRepel:
0001647A 4E71                       		nop	
0001647C 4A28 0038                  		tst.b	$38(a0)
00016480 6600                       		bne.s	locret_13580
00016482 4A68 003E                  		tst.w	$3E(a0)
00016486 6600                       		bne.s	loc_13582
00016488 1028 0026                  		move.b	obAngle(a0),d0
0001648C 0600 0020                  		addi.b	#$20,d0
00016490 0200 00C0                  		andi.b	#$C0,d0
00016494 6700                       		beq.s	locret_13580
00016496 3028 0020                  		move.w	obInertia(a0),d0
0001649A 6A00                       		bpl.s	loc_1356A
0001649C 4440                       		neg.w	d0
0001649E                            
0001649E                            loc_1356A:
0001649E 0C40 0280                  		cmpi.w	#$280,d0
000164A2 6400                       		bcc.s	locret_13580
000164A4 4268 0020                  		clr.w	obInertia(a0)
000164A8 08E8 0001 0022             		bset	#1,obStatus(a0)
000164AE 317C 001E 003E             		move.w	#$1E,$3E(a0)
000164B4                            
000164B4                            locret_13580:
000164B4 4E75                       		rts	
000164B6                            ; ===========================================================================
000164B6                            
000164B6                            loc_13582:
000164B6 5368 003E                  		subq.w	#1,$3E(a0)
000164BA 4E75                       		rts	
000164BC                            ; End of function Sonic_SlopeRepel
000164BC                            ; End of function Sonic_SlopeRepel
000164BC                            		include	"_incObj\Sonic JumpAngle.asm"
000164BC                            ; ---------------------------------------------------------------------------
000164BC                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000164BC                            ; ---------------------------------------------------------------------------
000164BC                            
000164BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164BC                            
000164BC                            
000164BC                            Sonic_JumpAngle:
000164BC 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000164C0 6700                       		beq.s	locret_135A2	; if already 0,	branch
000164C2 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000164C4                            
000164C4 5400                       		addq.b	#2,d0		; increase angle
000164C6 6400                       		bcc.s	loc_13596
000164C8 7000                       		moveq	#0,d0
000164CA                            
000164CA                            loc_13596:
000164CA 6000                       		bra.s	loc_1359E
000164CC                            ; ===========================================================================
000164CC                            
000164CC                            loc_13598:
000164CC 5500                       		subq.b	#2,d0		; decrease angle
000164CE 6400                       		bcc.s	loc_1359E
000164D0 7000                       		moveq	#0,d0
000164D2                            
000164D2                            loc_1359E:
000164D2 1140 0026                  		move.b	d0,obAngle(a0)
000164D6                            
000164D6                            locret_135A2:
000164D6 4E75                       		rts	
000164D8                            ; End of function Sonic_JumpAngle
000164D8                            ; End of function Sonic_JumpAngle
000164D8                            		include	"_incObj\Sonic Floor.asm"
000164D8                            ; ---------------------------------------------------------------------------
000164D8                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000164D8                            ; ---------------------------------------------------------------------------
000164D8                            
000164D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164D8                            
000164D8                            
000164D8                            Sonic_Floor:
000164D8 3228 0010                  		move.w	obVelX(a0),d1
000164DC 3428 0012                  		move.w	obVelY(a0),d2
000164E0 4EB9 0000 3F5C             		jsr	(CalcAngle).l
000164E6 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000164EA 0400 0020                  		subi.b	#$20,d0
000164EE 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000164F2 0200 00C0                  		andi.b	#$C0,d0
000164F6 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000164FA 0C00 0040                  		cmpi.b	#$40,d0
000164FE 6700 0000                  		beq.w	loc_13680
00016502 0C00 0080                  		cmpi.b	#$80,d0
00016506 6700 0000                  		beq.w	loc_136E2
0001650A 0C00 00C0                  		cmpi.b	#$C0,d0
0001650E 6700 0000                  		beq.w	loc_1373E
00016512 6100 0000                  		bsr.w	Sonic_HitWall
00016516 4A41                       		tst.w	d1
00016518 6A00                       		bpl.s	loc_135F0
0001651A 9368 0008                  		sub.w	d1,obX(a0)
0001651E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016524                            
00016524                            loc_135F0:
00016524 6100 0000                  		bsr.w	sub_14EB4
00016528 4A41                       		tst.w	d1
0001652A 6A00                       		bpl.s	loc_13602
0001652C D368 0008                  		add.w	d1,obX(a0)
00016530 317C 0000 0010             		move.w	#0,obVelX(a0)
00016536                            
00016536                            loc_13602:
00016536 6100 0000                  		bsr.w	Sonic_HitFloor
0001653A 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001653E 4A41                       		tst.w	d1
00016540 6A00                       		bpl.s	locret_1367E
00016542 1428 0012                  		move.b	obVelY(a0),d2
00016546 5002                       		addq.b	#8,d2
00016548 4402                       		neg.b	d2
0001654A B202                       		cmp.b	d2,d1
0001654C 6C00                       		bge.s	loc_1361E
0001654E B002                       		cmp.b	d2,d0
00016550 6D00                       		blt.s	locret_1367E
00016552                            
00016552                            loc_1361E:
00016552 D368 000C                  		add.w	d1,obY(a0)
00016556 1143 0026                  		move.b	d3,obAngle(a0)
0001655A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001655E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016564 1003                       		move.b	d3,d0
00016566 0600 0020                  		addi.b	#$20,d0
0001656A 0200 0040                  		andi.b	#$40,d0
0001656E 6600                       		bne.s	loc_1365C
00016570 1003                       		move.b	d3,d0
00016572 0600 0010                  		addi.b	#$10,d0
00016576 0200 0020                  		andi.b	#$20,d0
0001657A 6700                       		beq.s	loc_1364E
0001657C E0E8 0012                  		asr	obVelY(a0)
00016580 6000                       		bra.s	loc_13670
00016582                            ; ===========================================================================
00016582                            
00016582                            loc_1364E:
00016582 317C 0000 0012             		move.w	#0,obVelY(a0)
00016588 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001658E 4E75                       		rts	
00016590                            ; ===========================================================================
00016590                            
00016590                            loc_1365C:
00016590 317C 0000 0010             		move.w	#0,obVelX(a0)
00016596 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001659C 6F00                       		ble.s	loc_13670
0001659E 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000165A4                            
000165A4                            loc_13670:
000165A4 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000165AA 4A03                       		tst.b	d3
000165AC 6A00                       		bpl.s	locret_1367E
000165AE 4468 0020                  		neg.w	obInertia(a0)
000165B2                            
000165B2                            locret_1367E:
000165B2 4E75                       		rts	
000165B4                            ; ===========================================================================
000165B4                            
000165B4                            loc_13680:
000165B4 6100 0000                  		bsr.w	Sonic_HitWall
000165B8 4A41                       		tst.w	d1
000165BA 6A00                       		bpl.s	loc_1369A
000165BC 9368 0008                  		sub.w	d1,obX(a0)
000165C0 317C 0000 0010             		move.w	#0,obVelX(a0)
000165C6 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000165CC 4E75                       		rts	
000165CE                            ; ===========================================================================
000165CE                            
000165CE                            loc_1369A:
000165CE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000165D2 4A41                       		tst.w	d1
000165D4 6A00                       		bpl.s	loc_136B4
000165D6 9368 000C                  		sub.w	d1,obY(a0)
000165DA 4A68 0012                  		tst.w	obVelY(a0)
000165DE 6A00                       		bpl.s	locret_136B2
000165E0 317C 0000 0012             		move.w	#0,obVelY(a0)
000165E6                            
000165E6                            locret_136B2:
000165E6 4E75                       		rts	
000165E8                            ; ===========================================================================
000165E8                            
000165E8                            loc_136B4:
000165E8 4A68 0012                  		tst.w	obVelY(a0)
000165EC 6B00                       		bmi.s	locret_136E0
000165EE 6100 0000                  		bsr.w	Sonic_HitFloor
000165F2 4A41                       		tst.w	d1
000165F4 6A00                       		bpl.s	locret_136E0
000165F6 D368 000C                  		add.w	d1,obY(a0)
000165FA 1143 0026                  		move.b	d3,obAngle(a0)
000165FE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016602 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016608 317C 0000 0012             		move.w	#0,obVelY(a0)
0001660E 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016614                            
00016614                            locret_136E0:
00016614 4E75                       		rts	
00016616                            ; ===========================================================================
00016616                            
00016616                            loc_136E2:
00016616 6100 0000                  		bsr.w	Sonic_HitWall
0001661A 4A41                       		tst.w	d1
0001661C 6A00                       		bpl.s	loc_136F4
0001661E 9368 0008                  		sub.w	d1,obX(a0)
00016622 317C 0000 0010             		move.w	#0,obVelX(a0)
00016628                            
00016628                            loc_136F4:
00016628 6100 0000                  		bsr.w	sub_14EB4
0001662C 4A41                       		tst.w	d1
0001662E 6A00                       		bpl.s	loc_13706
00016630 D368 0008                  		add.w	d1,obX(a0)
00016634 317C 0000 0010             		move.w	#0,obVelX(a0)
0001663A                            
0001663A                            loc_13706:
0001663A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001663E 4A41                       		tst.w	d1
00016640 6A00                       		bpl.s	locret_1373C
00016642 9368 000C                  		sub.w	d1,obY(a0)
00016646 1003                       		move.b	d3,d0
00016648 0600 0020                  		addi.b	#$20,d0
0001664C 0200 0040                  		andi.b	#$40,d0
00016650 6600                       		bne.s	loc_13726
00016652 317C 0000 0012             		move.w	#0,obVelY(a0)
00016658 4E75                       		rts	
0001665A                            ; ===========================================================================
0001665A                            
0001665A                            loc_13726:
0001665A 1143 0026                  		move.b	d3,obAngle(a0)
0001665E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016662 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016668 4A03                       		tst.b	d3
0001666A 6A00                       		bpl.s	locret_1373C
0001666C 4468 0020                  		neg.w	obInertia(a0)
00016670                            
00016670                            locret_1373C:
00016670 4E75                       		rts	
00016672                            ; ===========================================================================
00016672                            
00016672                            loc_1373E:
00016672 6100 0000                  		bsr.w	sub_14EB4
00016676 4A41                       		tst.w	d1
00016678 6A00                       		bpl.s	loc_13758
0001667A D368 0008                  		add.w	d1,obX(a0)
0001667E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016684 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001668A 4E75                       		rts	
0001668C                            ; ===========================================================================
0001668C                            
0001668C                            loc_13758:
0001668C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016690 4A41                       		tst.w	d1
00016692 6A00                       		bpl.s	loc_13772
00016694 9368 000C                  		sub.w	d1,obY(a0)
00016698 4A68 0012                  		tst.w	obVelY(a0)
0001669C 6A00                       		bpl.s	locret_13770
0001669E 317C 0000 0012             		move.w	#0,obVelY(a0)
000166A4                            
000166A4                            locret_13770:
000166A4 4E75                       		rts	
000166A6                            ; ===========================================================================
000166A6                            
000166A6                            loc_13772:
000166A6 4A68 0012                  		tst.w	obVelY(a0)
000166AA 6B00                       		bmi.s	locret_1379E
000166AC 6100 0000                  		bsr.w	Sonic_HitFloor
000166B0 4A41                       		tst.w	d1
000166B2 6A00                       		bpl.s	locret_1379E
000166B4 D368 000C                  		add.w	d1,obY(a0)
000166B8 1143 0026                  		move.b	d3,obAngle(a0)
000166BC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000166C0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000166C6 317C 0000 0012             		move.w	#0,obVelY(a0)
000166CC 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000166D2                            
000166D2                            locret_1379E:
000166D2 4E75                       		rts	
000166D4                            ; End of function Sonic_Floor
000166D4                            ; End of function Sonic_Floor
000166D4                            		include	"_incObj\Sonic ResetOnFloor.asm"
000166D4                            ; ---------------------------------------------------------------------------
000166D4                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000166D4                            ; ---------------------------------------------------------------------------
000166D4                            
000166D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166D4                            
000166D4                            
000166D4                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000166D4 4238 F5CD                  		clr.b	(v_homingattack).w
000166D8 08A8 0005 0022                     	bclr    #5,$22(a0)
000166DE 08A8 0001 0022                     	bclr    #1,$22(a0)
000166E4 0828 0002 0022                     	btst    #2,$22(a0)
000166EA 6700                               	beq.s    loc_137E4
000166EC 08A8 0002 0022             		bclr	#2,obStatus(a0)
000166F2 117C 0013 0016             		move.b	#$13,obHeight(a0)
000166F8 117C 0009 0017             		move.b	#9,obWidth(a0)
000166FE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016704 5B68 000C                  		subq.w	#5,obY(a0)
00016708                            
00016708                            loc_137E4:
00016708 117C 0000 003C             		move.b	#0,$3C(a0)
0001670E 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016714 4E75                       		rts	
00016716                            ; End of function Sonic_ResetOnFloor
00016716                            ; End of function Sonic_ResetOnFloor
00016716                            		include	"_incObj\Sonic (part 2).asm"
00016716                            ; ---------------------------------------------------------------------------
00016716                            ; Sonic	when he	gets hurt
00016716                            ; ---------------------------------------------------------------------------
00016716                            
00016716                            Sonic_Hurt:	; Routine 4
00016716 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001671C 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016722 0828 0006 0022             		btst	#6,obStatus(a0)
00016728 6700                       		beq.s	loc_1380C
0001672A 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016730                            
00016730                            loc_1380C:
00016730 6100 0000                  		bsr.w	Sonic_HurtStop
00016734 6100 F98A                  		bsr.w	Sonic_LevelBound
00016738 6100 EE1A                  		bsr.w	Sonic_RecordPosition
0001673C 6100 0000                  		bsr.w	Sonic_Animate
00016740 6100 0000                  		bsr.w	Sonic_LoadGfx
00016744 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001674A                            
0001674A                            ; ---------------------------------------------------------------------------
0001674A                            ; Subroutine to	stop Sonic falling after he's been hurt
0001674A                            ; ---------------------------------------------------------------------------
0001674A                            
0001674A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001674A                            
0001674A                            
0001674A                            Sonic_HurtStop:
0001674A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001674E 0640 00E0                  		addi.w	#$E0,d0
00016752                            		;cmp.w	obY(a0),d0
00016752                            		;bcs.w	KillSonic
00016752 6100 FD84                  		bsr.w	Sonic_Floor
00016756 0828 0001 0022             		btst	#1,obStatus(a0)
0001675C 6600                       		bne.s	locret_13860
0001675E 7000                       		moveq	#0,d0
00016760 3140 0012                  		move.w	d0,obVelY(a0)
00016764 3140 0010                  		move.w	d0,obVelX(a0)
00016768 3140 0020                  		move.w	d0,obInertia(a0)
0001676C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016772 5528 0024                  		subq.b	#2,obRoutine(a0)
00016776 317C 0078 0030             		move.w	#$78,$30(a0)
0001677C                            
0001677C                            locret_13860:
0001677C 4E75                       		rts	
0001677E                            ; End of function Sonic_HurtStop
0001677E                            
0001677E                            ; ---------------------------------------------------------------------------
0001677E                            ; Sonic	when he	dies
0001677E                            ; ---------------------------------------------------------------------------
0001677E                            
0001677E                            Sonic_Death:	; Routine 6
0001677E 6100 0000                  		bsr.w	GameOver
00016782 4EB9 0000 F75C             		jsr	(ObjectFall).l
00016788 6100 EDCA                  		bsr.w	Sonic_RecordPosition
0001678C 6100 0000                  		bsr.w	Sonic_Animate
00016790 6100 0000                  		bsr.w	Sonic_LoadGfx
00016794 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001679A                            
0001679A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001679A                            
0001679A                            GameOver:
0001679A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001679E 0640 0100                  		addi.w	#$100,d0
000167A2 B068 000C                  		cmp.w	obY(a0),d0
000167A6 6400 0000                  		bcc.w	locret_13900
000167AA 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000167B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000167B4 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000167B8 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000167BC 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000167C0 6600                       		bne.s	loc_138D4
000167C2 317C 0000 003A             		move.w	#0,$3A(a0)
000167C8 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000167CE 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000167D4 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000167DA 4238 FE1A                  		clr.b	(f_timeover).w
000167DE                            
000167DE                            loc_138C2:
000167E8 7003                       		moveq	#3,d0
000167EA 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000167F0                            		
000167F0                            loc_138C3:
000167FA 7003                       		moveq	#3,d0
000167FC 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
00016802                            ; ===========================================================================
00016802                            
00016802                            loc_138D4:
00016802 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016808 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001680C 6700                       		beq.s	locret_13900	; if not, branch
0001680E 317C 0000 003A             		move.w	#0,$3A(a0)
00016814 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001681A 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016820 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016826 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001682C 60B0                       		bra.s	loc_138C2
0001682E                            		
0001682E                            
0001682E                            ; ===========================================================================
0001682E                            
0001682E                            locret_13900:
0001682E 4E75                       		rts	
00016830                            ; End of function GameOver
00016830                            
00016830                            ; ---------------------------------------------------------------------------
00016830                            ; Sonic	when the level is restarted
00016830                            ; ---------------------------------------------------------------------------
00016830                            
00016830                            Sonic_ResetLevel:; Routine 8
00016830 4A68 003A                  		tst.w	$3A(a0)
00016834 6700                       		beq.s	locret_13914
00016836 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001683A 6600                       		bne.s	locret_13914
0001683C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016842                            
00016842                            	locret_13914:
00016842 4E75                       		rts	
00016842 4E75                       		rts	
00016844                            		include	"_incObj\Sonic Loops.asm"
00016844                            ; ---------------------------------------------------------------------------
00016844                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016844                            ; ---------------------------------------------------------------------------
00016844                            
00016844                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016844                            
00016844                            
00016844                            Sonic_Loops:
00016844 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
0001684A 6700                       		beq.s	@isstarlight	; if yes, branch
0001684C 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016850 6600 0000                  		bne.w	@noloops	; if not, branch
00016854                            
00016854                            	@isstarlight:
00016854 3028 000C                  		move.w	obY(a0),d0
00016858 E248                       		lsr.w	#1,d0
0001685A 0240 0380                  		andi.w	#$380,d0
0001685E 1228 0008                  		move.b	obX(a0),d1
00016862 0241 007F                  		andi.w	#$7F,d1
00016866 D041                       		add.w	d1,d0
00016868 43F8 A400                  		lea	(v_lvllayout).w,a1
0001686C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016870                            
00016870 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016874 6700 F906                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016878 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001687C 6700 F8FE                  		beq.w	Sonic_ChkRoll
00016880                            
00016880 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016884 6700                       		beq.s	@chkifleft	; if yes, branch
00016886 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
0001688A 6700                       		beq.s	@chkifinair
0001688C 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016892 4E75                       		rts	
00016894                            ; ===========================================================================
00016894                            
00016894                            @chkifinair:
00016894 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
0001689A 6700                       		beq.s	@chkifleft	; if not, branch
0001689C                            
0001689C 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000168A2 4E75                       		rts	
000168A4                            ; ===========================================================================
000168A4                            
000168A4                            @chkifleft:
000168A4 3428 0008                  		move.w	obX(a0),d2
000168A8 0C02 002C                  		cmpi.b	#$2C,d2
000168AC 6400                       		bcc.s	@chkifright
000168AE                            
000168AE 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000168B4 4E75                       		rts	
000168B6                            ; ===========================================================================
000168B6                            
000168B6                            @chkifright:
000168B6 0C02 00E0                  		cmpi.b	#$E0,d2
000168BA 6500                       		bcs.s	@chkangle1
000168BC                            
000168BC 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000168C2 4E75                       		rts	
000168C4                            ; ===========================================================================
000168C4                            
000168C4                            @chkangle1:
000168C4 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000168CA 6600                       		bne.s	@chkangle2	; if yes, branch
000168CC                            
000168CC 1228 0026                  		move.b	obAngle(a0),d1
000168D0 6700                       		beq.s	@done
000168D2 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000168D6 6200                       		bhi.s	@done		; if yes, branch
000168D8 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000168DE 4E75                       		rts	
000168E0                            ; ===========================================================================
000168E0                            
000168E0                            @chkangle2:
000168E0 1228 0026                  		move.b	obAngle(a0),d1
000168E4 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000168E8 6300                       		bls.s	@done		; if yes, branch
000168EA 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000168F0                            
000168F0                            @noloops:
000168F0                            @done:
000168F0 4E75                       		rts	
000168F2                            ; End of function Sonic_Loops
000168F2                            ; End of function Sonic_Loops
000168F2                            		include	"_incObj\Sonic Animate.asm"
000168F2                            ; ---------------------------------------------------------------------------
000168F2                            ; Subroutine to	animate	Sonic's sprites
000168F2                            ; ---------------------------------------------------------------------------
000168F2                            
000168F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168F2                            
000168F2                            
000168F2                            Sonic_Animate:				; XREF: Obj01_Control; et al
000168F2 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000168F8 4A38 FE19                          tst.b	(Super_Sonic_flag).w	    ; is sonic super?
000168FC 6700                       		beq.s	 Sonic_Animatecont	    ; if not, branch
000168FE 43F9 0000 0000             		lea	(Ani_SuperSonic).l,a1	
00016904                            
00016904                            Sonic_Animatecont:	
00016904 7000                       		moveq	#0,d0
00016906 1028 001C                  		move.b	obAnim(a0),d0
0001690A B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0001690E 6700                       		beq.s	@do		; if not, branch
00016910 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016914 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016918 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001691C                            		
0001691C 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016922                            
00016922                            	@do:
00016922 D040                       		add.w	d0,d0
00016924 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016928 1011                       		move.b	(a1),d0
0001692A 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001692C 1228 0022                  		move.b	obStatus(a0),d1
00016930 0201 0001                  		andi.b	#1,d1
00016934 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001693A 8328 0001                  		or.b	d1,obRender(a0)
0001693E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016942 6A00                       		bpl.s	@delay		; if time remains, branch
00016944 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016948                            
00016948                            @loadframe:
00016948 7200                       		moveq	#0,d1
0001694A 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001694E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016952 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016956 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
0001695A                            
0001695A                            	@next:
0001695A 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001695E 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016962                            
00016962                            	@delay:
00016962 4E75                       		rts	
00016964                            ; ===========================================================================
00016964                            
00016964                            @end_FF:
00016964 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016966 6600                       		bne.s	@end_FE		; if not, branch
00016968 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001696C 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016970 60E8                       		bra.s	@next
00016972                            ; ===========================================================================
00016972                            
00016972                            @end_FE:
00016972 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016974 6600                       		bne.s	@end_FD		; if not, branch
00016976 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001697A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001697E 9200                       		sub.b	d0,d1
00016980 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016984 60D4                       		bra.s	@next
00016986                            ; ===========================================================================
00016986                            
00016986                            @end_FD:
00016986 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016988 6600                       		bne.s	@end		; if not, branch
0001698A 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016990                            
00016990                            	@end:
00016990 4E75                       		rts	
00016992                            ; ===========================================================================
00016992                            
00016992                            @walkrunroll:
00016992 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016996 6ACA                       		bpl.s	@delay		; if time remains, branch
00016998 5200                       		addq.b	#1,d0		; is animation walking/running?
0001699A 6600 0000                  		bne.w	@rolljump	; if not, branch
0001699E 7200                       		moveq	#0,d1
000169A0 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000169A4 6B00                       		bmi.s	@ble 			; better handling of angles
000169A6 6700                       		beq.s	@ble
000169A8 5300                       		subq.b	#1,d0
000169AA                            
000169AA                            	@ble:																
000169AA 1428 0022                  		move.b	obStatus(a0),d2
000169AE 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000169B2 6600                       		bne.s	@flip		; if yes, branch
000169B4 4600                       		not.b	d0		; reverse angle
000169B6                            
000169B6                            	@flip:
000169B6 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000169BA 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000169BC 7203                       		moveq	#3,d1
000169BE                            
000169BE                            	@noinvert:
000169BE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000169C4 B302                       		eor.b	d1,d2
000169C6 8528 0001                  		or.b	d2,obRender(a0)
000169CA 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000169D0 6600 0000                  		bne.w	@push		; if yes, branch
000169D4                            
000169D4 E808                       		lsr.b	#4,d0		; divide angle by $10
000169D6 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000169DA 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000169DE 6A00                       		bpl.s	@nomodspeed
000169E0 4442                       		neg.w	d2		; modulus speed
000169E2                            
000169E2                            	@nomodspeed:
000169E2 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; is sonic super?
000169E6 6700                       		beq.s	@cont		; if not, branch
000169E8 43F9 0000 0000             		lea	(SuperSonAni_Run).l,a1 ; use	running	animation
000169EE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000169F2 6400                       		bcc.s	@running	; if yes, branch
000169F4 43F9 0000 0000             		lea	(SuperSonAni_Walk).l,a1 ; use walking animation
000169FA                            	
000169FA                            	@cont:	
000169FA 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use Dashing animation
00016A00 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016A04 6400                       		bcc.s	@running	; if yes, branch
00016A06                            
00016A06 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016A0C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016A10 6400                       		bcc.s	@running	; if yes, branch
00016A12                            
00016A12 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016A18                            
00016A18                            	@running:
00016A18 D000                       		add.b	d0,d0
00016A1A D000                       		add.b	d0,d0
00016A1C 1600                       		move.b	d0,d3
00016A1E 4442                       		neg.w	d2
00016A20 0642 0780                  		addi.w	#$780,d2
00016A24 6A00                       		bpl.s	@belowmax
00016A26 7400                       		moveq	#0,d2		; max animation speed
00016A28 6000                       		bra.s	@belowmax
00016A2A                            
00016A2A                            	@maxrunning:
00016A2A D000                       		add.b d0,d0
00016A2C 1600                       		move.b d0,d3
00016A2E 4442                       		neg.w d2
00016A30 0642 0800                  		addi.w #$800, d2
00016A34 6A00                       		bpl.s @belowmax
00016A36 7400                       		moveq #0, d2 
00016A38                            
00016A38                            	@belowmax:
00016A38 E04A                       		lsr.w	#8,d2
00016A3A 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016A3E 6100 FF08                  		bsr.w	@loadframe
00016A42 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016A46 4E75                       		rts	
00016A48                            ; ===========================================================================
00016A48                            
00016A48                            @rolljump:
00016A48 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016A4A 6600                       		bne.s	@push		; if not, branch
00016A4C 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016A50 6A00                       		bpl.s	@nomodspeed2
00016A52 4442                       		neg.w	d2
00016A54                            
00016A54                            	@nomodspeed2:
00016A54 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016A5A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016A5E 6400                       		bcc.s	@rollfast	; if yes, branch
00016A60 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016A66                            
00016A66                            	@rollfast:
00016A66 4442                       		neg.w	d2
00016A68 0642 0400                  		addi.w	#$400,d2
00016A6C 6A00                       		bpl.s	@belowmax2
00016A6E 7400                       		moveq	#0,d2
00016A70                            
00016A70                            	@belowmax2:
00016A70 E04A                       		lsr.w	#8,d2
00016A72 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016A76 1228 0022                  		move.b	obStatus(a0),d1
00016A7A 0201 0001                  		andi.b	#1,d1
00016A7E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016A84 8328 0001                  		or.b	d1,obRender(a0)
00016A88 6000 FEBE                  		bra.w	@loadframe
00016A8C                            ; ===========================================================================
00016A8C                            
00016A8C                            @push:
00016A8C 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016A90 6B00                       		bmi.s	@negspeed
00016A92 4442                       		neg.w	d2
00016A94                            
00016A94                            	@negspeed:
00016A94 0642 0800                  		addi.w	#$800,d2
00016A98 6A00                       		bpl.s	@belowmax3	
00016A9A 7400                       		moveq	#0,d2
00016A9C                            
00016A9C                            	@belowmax3:
00016A9C EC4A                       		lsr.w	#6,d2
00016A9E 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016AA2 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016AA8 1228 0022                  		move.b	obStatus(a0),d1
00016AAC 0201 0001                  		andi.b	#1,d1
00016AB0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016AB6 8328 0001                  		or.b	d1,obRender(a0)
00016ABA 6000 FE8C                  		bra.w	@loadframe
00016ABE                            
00016ABE                            ; End of function Sonic_Animate
00016ABE                            ; End of function Sonic_Animate
00016ABE                            		include	"_anim\Sonic.asm"
00016ABE                            ; ---------------------------------------------------------------------------
00016ABE                            ; Animation script - Sonic
00016ABE                            ; ---------------------------------------------------------------------------
00016ABE                            Ani_Sonic:
00016ABE                            
00016ABE 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016AC0 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016AC2 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016AC4 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016AC6 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016AC8 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016ACA 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016ACC 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016ACE 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016AD0 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016AD2 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016AD4 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016AD6 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016AD8 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016ADA 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016ADC 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016ADE 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016AE0 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016AE2 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016AE4 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016AE6 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016AE8 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016AEA 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016AEC 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016AEE 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016AF0 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016AF2 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016AF4 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016AF6 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016AF8 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016AFA 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016AFC 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016AFE 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016B00 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016B02 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016B04 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016B06 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016B08 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016B0A 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
00016B0C 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
00016B0E                            
00016B0E FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016B1C 00                         		even
00016B1C FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016B2A 00                         		even
00016B2A FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016B31 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016B38 00                         		even
00016B38 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016B3F 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016B46 00                         		even
00016B46 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016B54 00                         		even
00016B54                            SonAni_Wait:	
00016B54 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B63 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B72 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B81 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016B90 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016B9F 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016BAE 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016BBD 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016BCC 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016BD4                            		even
00016BD4 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016BDA                            		even
00016BDA 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016BE0 00                         		even
00016BE0 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016BE6 00                         		even
00016BE6 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016BEA 00                         		even
00016BEA 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016BEE 00                         		even
00016BEE 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016BF2 00                         		even
00016BF2 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016BF6 00                         		even
00016BF6 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016C00                            		even
00016C00 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016C06 00                         		even
00016C06 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016C10 00                         		even
00016C10 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016C1A 00                         		even
00016C1A 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016C1E                            		even
00016C1E 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
00016C2A                            		even
00016C2A 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
00016C2E                            		even
00016C2E 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016C32 00                         		even
00016C32 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
00016C36                            		even
00016C36 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016C3A 00                         		even
00016C3A 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016C3E 00                         		even
00016C3E 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016C42 00                         		even
00016C42 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016C46 00                         		even
00016C46                            SonAni_WaterSlide:
00016C46 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016C4A                            		even
00016C4A 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016C4E                            		even
00016C4E 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016C56 00                         		even
00016C56 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016C5A                            		even
00016C5A FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016C68 00                         		even
00016C68 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016C74                            		even
00016C74 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016C7A 00                         		even
00016C7A 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016C7E                            		even
00016C7E 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016C82                            		even
00016C82 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016C8C 00                         		even
00016C8C 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016C95 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016C9D 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016CA4 3334 35                    		dc.b	$33, $34, $35
00016CA7 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016CAE                            		even
00016CAE 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016CB4                            		even
00016CB4 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
00016CB8                            		even
00016CB8                            SonAni_Transform:
00016CB8 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016CC2 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016CCE                            		even
00016CCE                            
00016CCE =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016CCE =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016CCE =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016CCE =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016CCE =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016CCE =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016CCE =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016CCE =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016CCE =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016CCE =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016CCE =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016CCE =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016CCE =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016CCE =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016CCE =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016CCE =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016CCE =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016CCE =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016CCE =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016CCE =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016CCE =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016CCE =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016CCE =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016CCE =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016CCE =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016CCE =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016CCE =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016CCE =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016CCE =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016CCE =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016CCE =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016CCE =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016CCE =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016CCE =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016CCE =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016CCE =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016CCE =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016CCE =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016CCE =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016CCE =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016CCE =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016CCE                            		include	"_anim\Super Sonic.asm"		
00016CCE                            ; ---------------------------------------------------------------------------
00016CCE                            ; Animation script - Super Sonic
00016CCE                            ; ---------------------------------------------------------------------------
00016CCE                            Ani_SuperSonic:
00016CCE                            
00016CCE 0000                       ptr_SuperWalk:	dc.w SuperSonAni_Walk-Ani_SuperSonic
00016CD0 0000                       ptr_SuperRun:	dc.w SuperSonAni_Run-Ani_SuperSonic
00016CD2 0000                       ptr_SuperRoll:	dc.w SuperSonAni_Roll-Ani_Sonic
00016CD4 0000                       ptr_SuperRoll2:	dc.w SuperSonAni_Roll2-Ani_Sonic
00016CD6 0000                       ptr_SuperPush:	dc.w SuperSonAni_Push-Ani_SuperSonic
00016CD8 0000                       ptr_SuperWait:	dc.w SuperSonAni_Wait-Ani_SuperSonic
00016CDA 0000                       ptr_SuperBalance:	dc.w SuperSonAni_Balance-Ani_SuperSonic
00016CDC 0000                       ptr_SuperLookUp:	dc.w SuperSonAni_LookUp-Ani_SuperSonic
00016CDE 0000                       ptr_SuperDuck:	dc.w SuperSonAni_Duck-Ani_SuperSonic
00016CE0 0000                       ptr_SuperWarp1:	dc.w SuperSonAni_Warp1-Ani_Sonic
00016CE2 0000                       ptr_SuperWarp2:	dc.w SuperSonAni_Warp2-Ani_Sonic
00016CE4 0000                       ptr_SuperWarp3:	dc.w SuperSonAni_Warp3-Ani_Sonic
00016CE6 0000                       ptr_SuperWarp4:	dc.w SuperSonAni_Warp4-Ani_Sonic
00016CE8 0000                       ptr_SuperStop:	dc.w SuperSonAni_Stop-Ani_SuperSonic
00016CEA 0000                       ptr_SuperFloat1:	dc.w SuperSonAni_Float1-Ani_SuperSonic
00016CEC 0000                       ptr_SuperFloat2:	dc.w SuperSonAni_Float2-Ani_SuperSonic
00016CEE 0000                       ptr_SuperSpring:	dc.w SuperSonAni_Spring-Ani_SuperSonic
00016CF0 0000                       ptr_SuperHang:	dc.w SuperSonAni_Hang-Ani_SuperSonic
00016CF2 0000                       ptr_SuperLeap1:	dc.w SuperSonAni_Leap1-Ani_Sonic
00016CF4 0000                       ptr_SuperLeap2:	dc.w SuperSonAni_Leap2-Ani_Sonic
00016CF6 0000                       ptr_SuperSurf:	dc.w SuperSonAni_Surf-Ani_SuperSonic
00016CF8 0000                       ptr_SuperGetAir:	dc.w SuperSonAni_GetAir-Ani_SuperSonic
00016CFA 0000                       ptr_SuperBurnt:	dc.w SuperSonAni_Burnt-Ani_Sonic
00016CFC 0000                       ptr_SuperDrown:	dc.w SuperSonAni_Drown-Ani_Sonic
00016CFE 0000                       ptr_SuperDeath:	dc.w SuperSonAni_Death-Ani_Sonic
00016D00 0000                       ptr_SuperHurt:	dc.w SuperSonAni_Hurt-Ani_Sonic
00016D02 0000                       ptr_SuperWaterSlide:	dc.w SuperSonAni_WaterSlide-Ani_Sonic
00016D04 0000                       ptr_SuperNull:	dc.w SuperSonAni_Null-Ani_Sonic
00016D06 0000                       ptr_SuperFloat3:	dc.w SuperSonAni_Float3-Ani_SuperSonic
00016D08 0000                       ptr_SuperFloat4:	dc.w SuperSonAni_Float4-Ani_SuperSonic
00016D0A 0000                       ptr_SuperMaxRun:	dc.w SuperSonAni_MaxRun-Ani_SuperSonic
00016D0C 0000                       ptr_SuperSpindash:	dc.w SuperSonAni_SpinDash-Ani_Sonic ;1F
00016D0E 0000                       ptr_SuperHurt2:	dc.w SuperSonAni_Hurt2-Ani_Sonic
00016D10 0000                       ptr_SuperGetUp:	dc.w SuperSonAni_GetUp-Ani_Sonic
00016D12 0000                       ptr_SuperBlink:	dc.w SuperSonAni_Blink-Ani_SuperSonic
00016D14 0000                       ptr_SuperSit:	dc.w SuperSonAni_Sit-Ani_Sonic
00016D16 0000                       ptr_SuperPeelout:	dc.w SuperSonAni_Peelout-Ani_SuperSonic
00016D18 0000                       ptr_SuperHang2:	dc.w SuperSonAni_Hang2-Ani_SuperSonic
00016D1A 0000                       ptr_SuperTransform:	dc.w SuperSonAni_Transform-Ani_SuperSonic
00016D1C                            
00016D1C FF10 1112 1314 150E 0FFF+  SuperSonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016D2A 00                         		even
00016D2A FF2E 2F30 3132 3334 35FF+  SuperSonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016D38 00                         		even
00016D38 FE5E 5F60 6162 66          SuperSonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016D3F 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016D46 00                         		even
00016D46 FE5E 5F60 6162 66          SuperSonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016D4D 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016D54 00                         		even
00016D54 FD89 8A8B 8C8D 8E8F 90FF+  SuperSonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016D62 00                         		even
00016D62                            SuperSonAni_Wait:	
00016D62 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016D71 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016D80 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016D8F 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016D9E 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016DAD 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016DBC 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016DCB 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016DDA 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016DE2                            		even
00016DE2 0F72 7374 75FF             SuperSonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016DE8                            		even
00016DE8 030C 0DFE 01               SuperSonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016DEE 00                         		even
00016DEE 0270 71FE 01               SuperSonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016DF4 00                         		even
00016DF4 3F67 FF                    SuperSonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016DF8 00                         		even
00016DF8 3F68 FF                    SuperSonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016DFC 00                         		even
00016DFC 3F69 FF                    SuperSonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016E00 00                         		even
00016E00 3F6A FF                    SuperSonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016E04 00                         		even
00016E04 026B 6C6C 6D6D 6E6E FD00   SuperSonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016E0E                            		even
00016E0E 077C 82FE 02               SuperSonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016E14 00                         		even
00016E14 037C 7D7E 7F80 817B FF     SuperSonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016E1E 00                         		even
00016E1E 0783 8483 8483 84FD 00     SuperSonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016E28 00                         		even
00016E28 0485 86FF                  SuperSonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016E2C                            		even
00016E2C 0F87 8787 FE01             SuperSonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016E32                            		even
00016E32 0F87 88FE 01               SuperSonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016E38 00                         		even
00016E38 3F91 FF                    SuperSonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016E3C 00                         		even
00016E3C 0B95 9512 13FD 00          SuperSonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016E44 00                         		even
00016E44 2092 FF                    SuperSonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016E48 00                         		even
00016E48 2F93 FF                    SuperSonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016E4C 00                         		even
00016E4C 0394 FF                    SuperSonAni_Death:	dc.b 3,	fr_death, afEnd
00016E50 00                         		even
00016E50 0396 FF                    SuperSonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016E54 00                         		even
00016E54                            SuperSonAni_WaterSlide:
00016E54 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016E58                            		even
00016E58 7700 FD00                  SuperSonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016E5C                            		even
00016E5C 037C 7E80 817B FF          SuperSonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016E64 00                         		even
00016E64 037C FD00                  SuperSonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016E68                            		even
00016E68 FF4E 4F50 51FF FFFF FFFF+  SuperSonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016E76 00                         		even
00016E76 009B 9C9B 9D9B 9E9B 9F9B+  SuperSonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016E82                            		even
00016E82 0298 9699 FF               SuperSonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016E88 00                         		even
00016E88 030B FD00                  SuperSonAni_GetUp:	dc.b 3, $B,$FD,  0
00016E8C                            		even
00016E8C 0102 FD00                  SuperSonAni_Blink:	dc.b   1,  2,$FD,  0
00016E90                            		even
00016E90 0808 0909 0A0A 09FE 05     SuperSonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016E9A 00                         		even
00016E9A 000E 0E0E 0E0E 0E0F 0F     SuperSonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016EA3 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016EAB 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016EB2 3334 35                    		dc.b	$33, $34, $35
00016EB5 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016EBC                            		even
00016EBC 137A 7879 78FF             SuperSonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016EC2                            		even
00016EC2                            SuperSonAni_Transform:
00016EC2 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016ECC A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016ED8                            		even		
00016ED8                            		even		
00016ED8                            		include	"_incObj\Sonic LoadGfx.asm"
00016ED8                            ; ---------------------------------------------------------------------------
00016ED8                            ; Sonic	graphics loading subroutine
00016ED8                            ; ---------------------------------------------------------------------------
00016ED8                            
00016ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016ED8                            
00016ED8                            
00016ED8                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016ED8 7000                       		moveq	#0,d0
00016EDA 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016EDE B038 F766                  		cmp.b	($FFFFF766).w,d0
00016EE2 6700                       		beq.s	locret_13C96
00016EE4 11C0 F766                  		move.b	d0,($FFFFF766).w
00016EE8 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016EEE D040                       		add.w	d0,d0
00016EF0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EF4 7A00                       		moveq	#0,d5
00016EF6 1A1A                       		move.b	(a2)+,d5
00016EF8 5345                       		subq.w	#1,d5
00016EFA 6B00                       		bmi.s	locret_13C96
00016EFC 383C F000                  		move.w	#$F000,d4
00016F00 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016F06                            
00016F06                            SPLC_ReadEntry:
00016F06 7200                       		moveq	#0,d1
00016F08 121A                       		move.b	(a2)+,d1
00016F0A E149                       		lsl.w	#8,d1
00016F0C 121A                       		move.b	(a2)+,d1
00016F0E 3601                       		move.w	d1,d3
00016F10 E04B                       		lsr.w	#8,d3
00016F12 0243 00F0                  		andi.w	#$F0,d3
00016F16 0643 0010                  		addi.w	#$10,d3
00016F1A 0241 0FFF                  		andi.w	#$FFF,d1
00016F1E EB89                       		lsl.l	#5,d1
00016F20 D286                       		add.l	d6,d1
00016F22 3404                       		move.w	d4,d2
00016F24 D843                       		add.w	d3,d4
00016F26 D843                       		add.w	d3,d4
00016F28 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016F2E 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016F32                            
00016F32                            locret_13C96:
00016F32 4E75                       		rts	
00016F34                            ; End of function Sonic_LoadGfx
00016F34                            ; End of function Sonic_LoadGfx
00016F34                            
00016F34                            		include	"_incObj\0A Drowning Countdown.asm"
00016F34                            ; ---------------------------------------------------------------------------
00016F34                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016F34                            ; Sonic's mouth (LZ)
00016F34                            ; ---------------------------------------------------------------------------
00016F34                            
00016F34                            DrownCount:
00016F34 7000                       		moveq	#0,d0
00016F36 1028 0024                  		move.b	obRoutine(a0),d0
00016F3A 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016F3E 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016F42                            ; ===========================================================================
00016F42                            Drown_Index:
00016F42 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016F44 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016F46 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016F48 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016F4A 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016F4C 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016F4E 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016F50 0000                       			dc.w Drown_Display-Drown_Index
00016F52 0000                       			dc.w Drown_Delete-Drown_Index
00016F54                            
00016F54 =00000030                  drown_origX:		equ $30		; original x-axis position
00016F54 =00000038                  drown_time:		equ $38		; time between each number changes
00016F54                            
00016F54 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016F54 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016F54 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016F54 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016F54 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016F54 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016F54 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016F54                            ; ===========================================================================
00016F54                            
00016F54                            Drown_Main:	; Routine 0
00016F54 5428 0024                  		addq.b	#2,obRoutine(a0)
00016F58 217C 0001 4D50 0004        		move.l	#Map_Bub,obMap(a0)
00016F60 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016F66 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016F6C 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
00016F6E 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016F74                            
00016F74                            	Drown_IsSYZ:	
00016F74 117C 0084 0001             		move.b	#$84,obRender(a0)
00016F7A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016F80 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F86 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016F8A 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016F8C                            
00016F8C 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016F90 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016F98 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016F9E 0240 007F                  		andi.w	#$7F,d0
00016FA2 1140 0033                  		move.b	d0,$33(a0)
00016FA6 6000 0000                  		bra.w	Drown_Countdown
00016FAA                            ; ===========================================================================
00016FAA                            
00016FAA                            @smallbubble:
00016FAA 1140 001C                  		move.b	d0,obAnim(a0)
00016FAE 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016FB4 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016FBA                            
00016FBA                            Drown_Animate:	; Routine 2
00016FBA 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016FC0 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00016FC6                            
00016FC6                            Drown_ChkWater:	; Routine 4
00016FC6 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
00016FCC 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
00016FCE 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
00016FD2 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00016FD6 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
00016FDA 6200                       		bhi.s	Display_Next		; if so, branch TIS
00016FDC                            		
00016FDC                            
00016FDC                            Normal_Water_Level:
00016FDC 3038 F646                  		move.w	(v_waterpos1).w,d0
00016FE0 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016FE4 6500                       		bcs.s	Wobble		; if not, branch
00016FE6                            Display_Next:	;TIS		
00016FE6 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016FEC 5E28 001C                  		addq.b	#7,obAnim(a0)
00016FF0 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016FF6 6700                       		beq.s	Drown_Display
00016FF8 6000                       		bra.s	Drown_Display
00016FFA                            ; ===========================================================================
00016FFA                            
00016FFA                            Wobble:
00016FFA 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016FFE 6700                       		beq.s	@notunnel	; if not, branch
00017000 5868 0030                  		addq.w	#4,drown_origX(a0)
00017004                            
00017004                            	@notunnel:
00017004 1028 0026                  		move.b	obAngle(a0),d0
00017008 5228 0026                  		addq.b	#1,obAngle(a0)
0001700C 0240 007F                  		andi.w	#$7F,d0
00017010 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00017016 1031 0000                  		move.b	(a1,d0.w),d0
0001701A 4880                       		ext.w	d0
0001701C D068 0030                  		add.w	drown_origX(a0),d0
00017020 3140 0008                  		move.w	d0,obX(a0)
00017024 6100                       		bsr.s	Drown_ShowNumber
00017026 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001702C 4A28 0001                  		tst.b	obRender(a0)
00017030 6A00                       		bpl.s	@delete
00017032 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00017038                            
00017038                            	@delete:
00017038 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001703E                            ; ===========================================================================
0001703E                            
0001703E                            Drown_Display:	; Routine 6, Routine $E
0001703E 6100                       		bsr.s	Drown_ShowNumber
00017040 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017046 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001704C 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00017052                            ; ===========================================================================
00017052                            
00017052                            Drown_Delete:	; Routine 8, Routine $10
00017052 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00017058                            ; ===========================================================================
00017058                            
00017058                            Drown_AirLeft:	; Routine $C
00017058 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001705E 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00017060 5368 0038                  		subq.w	#1,drown_time(a0)
00017064 6600                       		bne.s	@display
00017066 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
0001706C 5E28 001C                  		addq.b	#7,obAnim(a0)
00017070 60CC                       		bra.s	Drown_Display
00017072                            ; ===========================================================================
00017072                            
00017072                            	@display:
00017072 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017078 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001707E 4A28 0001                  		tst.b	obRender(a0)
00017082 6A00                       		bpl.s	Drown_AirLeft_Delete
00017084 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001708A                            
0001708A                            Drown_AirLeft_Delete:	
0001708A 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00017090                            ; ===========================================================================
00017090                            
00017090                            Drown_ShowNumber:
00017090 4A68 0038                  		tst.w	drown_time(a0)
00017094 6700                       		beq.s	@nonumber
00017096 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001709A 6600                       		bne.s	@nonumber	; if time remains, branch
0001709C 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
000170A2 6400                       		bcc.s	@nonumber
000170A4                            
000170A4 317C 000F 0038             		move.w	#15,drown_time(a0)
000170AA 4268 0012                  		clr.w	obVelY(a0)
000170AE 117C 0080 0001             		move.b	#$80,obRender(a0)
000170B4 3028 0008                  		move.w	obX(a0),d0
000170B8 9078 F700                  		sub.w	(v_screenposx).w,d0
000170BC 0640 0080                  		addi.w	#$80,d0
000170C0 3140 0008                  		move.w	d0,obX(a0)
000170C4 3028 000C                  		move.w	obY(a0),d0
000170C8 9078 F704                  		sub.w	(v_screenposy).w,d0
000170CC 0640 0080                  		addi.w	#$80,d0
000170D0 3140 000A                  		move.w	d0,obScreenY(a0)
000170D4 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000170DA                            
000170DA                            	@nonumber:
000170DA 4E75                       		rts	
000170DC                            ; ===========================================================================
000170DC                            Drown_WobbleData:
000170DC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000170EC 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000170FC 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001710C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001711C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001712C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001713C FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
0001714C FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
0001715C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001716C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001717C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001718C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001719C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000171AC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000171BC FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000171CC FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000171DC                            ; ===========================================================================
000171DC                            
000171DC                            Drown_Countdown:; Routine $A
000171DC 4A68 002C                  		tst.w	$2C(a0)
000171E0 6600 0000                  		bne.w	@loc_13F86
000171E4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000171EA 6400 0000                  		bcc.w	@nocountdown
000171EE 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000171F4 6700 0000                  		beq.w	@nocountdown	; if not, branch
000171F8                            
000171F8 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000171FC 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00017200 317C 003B 0038             		move.w	#59,drown_time(a0)
00017206 317C 0001 0036             		move.w	#1,$36(a0)
0001720C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017212 0240 0001                  		andi.w	#1,d0
00017216 1140 0034                  		move.b	d0,$34(a0)
0001721A 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
0001721E 0C40 0019                  		cmpi.w	#25,d0
00017222 6700                       		beq.s	@warnsound	; play sound if	air is 25
00017224 0C40 0014                  		cmpi.w	#20,d0
00017228 6700                       		beq.s	@warnsound
0001722A 0C40 000F                  		cmpi.w	#15,d0
0001722E 6700                       		beq.s	@warnsound
00017230 0C40 000C                  		cmpi.w	#12,d0
00017234 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00017236                            
00017236                            	@skipmusic:
00017240 5328 0032                  		subq.b	#1,$32(a0)
00017244 6A00                       		bpl.s	@reduceair
00017246 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001724C 08E8 0007 0036             		bset	#7,$36(a0)
00017252 6000                       		bra.s	@reduceair
00017254                            ; ===========================================================================
00017254                            
00017254                            @warnsound:
0001725E                            
0001725E                            @reduceair:
0001725E 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00017262 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00017266                            
00017266                            		; Sonic drowns here
00017266 6100 0000                  		bsr.w	ResumeMusic
0001726A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001727A 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
00017280 117C 000A 0034             		move.b	#$A,$34(a0)
00017286 317C 0001 0036             		move.w	#1,$36(a0)
0001728C 317C 0078 002C             		move.w	#$78,$2C(a0)
00017292 2F08                       		move.l	a0,-(sp)
00017294 41F8 D000                  		lea	(v_player).w,a0
00017298 6100 F43A                  		bsr.w	Sonic_ResetOnFloor
0001729C 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
000172A2 08E8 0001 0022             		bset	#1,obStatus(a0)
000172A8 08E8 0007 0002             		bset	#7,obGfx(a0)
000172AE 317C 0000 0012             		move.w	#0,obVelY(a0)
000172B4 317C 0000 0010             		move.w	#0,obVelX(a0)
000172BA 317C 0000 0020             		move.w	#0,obInertia(a0)
000172C0 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
000172C6 205F                       		movea.l	(sp)+,a0
000172C8 4E75                       		rts	
000172CA                            ; ===========================================================================
000172CA                            
000172CA                            @loc_13F86:
000172CA 5368 002C                  		subq.w	#1,$2C(a0)
000172CE 6600                       		bne.s	@loc_13F94
000172D0 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
000172D6 4E75                       		rts	
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            	@loc_13F94:
000172D8 2F08                       		move.l	a0,-(sp)
000172DA 41F8 D000                  		lea	(v_player).w,a0
000172DE 4EB9 0000 F794             		jsr	(SpeedToPos).l
000172E4 0668 0010 0012             		addi.w	#$10,obVelY(a0)
000172EA 205F                       		movea.l	(sp)+,a0
000172EC 6000                       		bra.s	@nochange
000172EE                            ; ===========================================================================
000172EE                            
000172EE                            @gotomakenum:
000172EE 6000                       		bra.s	@makenum
000172F0                            ; ===========================================================================
000172F0                            
000172F0                            @nochange:
000172F0 4A68 0036                  		tst.w	$36(a0)
000172F4 6700 0000                  		beq.w	@nocountdown
000172F8 5368 003A                  		subq.w	#1,$3A(a0)
000172FC 6A00 0000                  		bpl.w	@nocountdown
00017300                            
00017300                            @makenum:
00017300 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017306 0240 000F                  		andi.w	#$F,d0
0001730A 3140 003A                  		move.w	d0,$3A(a0)
0001730E 4EB9 0000 FD42             		jsr	(FindFreeObj).l
00017314 6600 0000                  		bne.w	@nocountdown
00017318 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
0001731C 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00017322 7006                       		moveq	#6,d0
00017324 0838 0000 D022             		btst	#0,(v_player+obStatus).w
0001732A 6700                       		beq.s	@noflip
0001732C 4440                       		neg.w	d0
0001732E 137C 0040 0026             		move.b	#$40,obAngle(a1)
00017334                            
00017334                            	@noflip:
00017334 D169 0008                  		add.w	d0,obX(a1)
00017338 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
0001733E 137C 0006 0028             		move.b	#6,obSubtype(a1)
00017344 4A68 002C                  		tst.w	$2C(a0)
00017348 6700 0000                  		beq.w	@loc_1403E
0001734C 0268 0007 003A             		andi.w	#7,$3A(a0)
00017352 0668 0000 003A             		addi.w	#0,$3A(a0)
00017358 3038 D00C                  		move.w	(v_player+obY).w,d0
0001735C 0440 000C                  		subi.w	#$C,d0
00017360 3340 000C                  		move.w	d0,obY(a1)
00017364 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001736A 1340 0026                  		move.b	d0,obAngle(a1)
0001736E 3038 FE04                  		move.w	(v_framecount).w,d0
00017372 0200 0003                  		andi.b	#3,d0
00017376 6600                       		bne.s	@loc_14082
00017378 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001737E 6000                       		bra.s	@loc_14082
00017380                            ; ===========================================================================
00017380                            
00017380                            @loc_1403E:
00017380 0828 0007 0036             		btst	#7,$36(a0)
00017386 6700                       		beq.s	@loc_14082
00017388 3438 FE14                  		move.w	(v_air).w,d2
0001738C E24A                       		lsr.w	#1,d2
0001738E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017394 0240 0003                  		andi.w	#3,d0
00017398 6600                       		bne.s	@loc_1406A
0001739A 08E8 0006 0036             		bset	#6,$36(a0)
000173A0 6600                       		bne.s	@loc_14082
000173A2 1342 0028                  		move.b	d2,obSubtype(a1)
000173A6 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000173AC                            
000173AC                            	@loc_1406A:
000173AC 4A28 0034                  		tst.b	$34(a0)
000173B0 6600                       		bne.s	@loc_14082
000173B2 08E8 0006 0036             		bset	#6,$36(a0)
000173B8 6600                       		bne.s	@loc_14082
000173BA 1342 0028                  		move.b	d2,obSubtype(a1)
000173BE 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000173C4                            
000173C4                            @loc_14082:
000173C4 5328 0034                  		subq.b	#1,$34(a0)
000173C8 6A00                       		bpl.s	@nocountdown
000173CA 4268 0036                  		clr.w	$36(a0)
000173CE                            
000173CE                            @nocountdown:
000173CE 4E75                       		rts	
000173CE 4E75                       		rts	
000173D0                            
000173D0                            
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            
000173D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000173D0                            
000173D0                            
000173D0                            ResumeMusic:
000173D0                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
000173D0                            		;bhi.s	@over12		; if yes, branch
000173D0                            		;move.b	(v_Saved_music),d0
000173D0                            		;tst.b	(v_invinc).w ; is Sonic invincible?
000173D0                            		;beq.s	@notinvinc ; if not, branch
000173D0                            		;move.w	#bgm_Invincible,d0
000173D0                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
000173D0                            		;beq.s	@notinvinc	; if not, branch
000173D0                            		;move.w	#bgm_Ending,d0
000173D0                            
000173D0                            	;@notinvinc:
000173D0                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
000173D0                            		;beq.s	@playselected ; if not, branch
000173D0                            		;move.w	#bgm_Boss,d0
000173D0                            
000173D0                            	;@playselected:
000173D0                            		;jsr	(PlaySound).l
000173D0                            
000173D0                            	;@over12:
000173D0 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
000173D6 4238 D372                  		clr.b	(v_objspace+$340+$32).w
000173DA 4E75                       		rts	
000173DC                            
000173DC                            ;End of function ResumeMusic
000173DC                            
000173DC                            ; ===========================================================================
000173DC                            
000173DC                            		include	"_anim\Drowning Countdown.asm"
000173DC                            ; ---------------------------------------------------------------------------
000173DC                            ; Animation script - countdown numbers and bubbles (LZ)
000173DC                            ; ---------------------------------------------------------------------------
000173DC 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
000173DE 0000                       		dc.w @oneappear-Ani_Drown
000173E0 0000                       		dc.w @twoappear-Ani_Drown
000173E2 0000                       		dc.w @threeappear-Ani_Drown
000173E4 0000                       		dc.w @fourappear-Ani_Drown
000173E6 0000                       		dc.w @fiveappear-Ani_Drown
000173E8 0000                       		dc.w @smallbubble-Ani_Drown
000173EA 0000                       		dc.w @zeroflash-Ani_Drown
000173EC 0000                       		dc.w @oneflash-Ani_Drown
000173EE 0000                       		dc.w @twoflash-Ani_Drown
000173F0 0000                       		dc.w @threeflash-Ani_Drown
000173F2 0000                       		dc.w @fourflash-Ani_Drown
000173F4 0000                       		dc.w @fiveflash-Ani_Drown
000173F6 0000                       		dc.w @blank-Ani_Drown
000173F8 0000                       		dc.w @mediumbubble-Ani_Drown
000173FA 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00017404 00                         		even
00017404 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
0001740E 00                         		even
0001740E 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00017418 00                         		even
00017418 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00017422 00                         		even
00017422 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
0001742C 00                         		even
0001742C 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00017436 00                         		even
00017436 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
0001743C 00                         		even
0001743C 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00017444 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
0001744C 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00017454 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
0001745C 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00017464 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
0001746C 0EFC                       @blank:		dc.b $E, afRoutine
0001746E 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00017474                            		even
00017474                            		even
00017474                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00017474                            ; ---------------------------------------------------------------------------
00017474                            ; Sprite mappings - drowning countdown numbers (LZ)
00017474                            ; ---------------------------------------------------------------------------
00017474                            Map_Drown_internal:
00017474 0000                       		dc.w @num-Map_Drown_internal
00017476 01                         @num:		dc.b 1
00017477 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001747C                            		even
0001747C                            		even
0001747C                            
0001747C                            ; --------------------------------------------------
0001747C                            ; Subroutine to load the shield's art over DMA
0001747C                            ; --------------------------------------------------
0001747C                            
0001747C                            PLCLoad_Shields:
0001747C 7000                       		moveq	#0,d0
0001747E 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00017482 B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00017486 6700                       		beq.s	locret2_13C96
00017488 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
0001748C 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00017490 D040                       		add.w   d0,d0
00017492 D4F2 0000                  		adda.w  (a2,D0),a2
00017496 3A1A                       		move.w  (a2)+,d5
00017498 5345                       		subq.w  #1,d5
0001749A 6B00                       		bmi.s	locret2_13C96
0001749C 3828 0036                  		move.w  shield_vram_art(A0),d4
000174A0                            
000174A0                            loc_199BE:
000174A0 7200                       		moveq	#0,d1
000174A2 121A                       		move.b	(a2)+,d1
000174A4 E149                       		lsl.w	#8,d1
000174A6 121A                       		move.b	(a2)+,d1
000174A8 3601                       		move.w	d1,d3
000174AA E04B                       		lsr.w	#8,d3
000174AC 0243 00F0                  		andi.w	#$F0,d3
000174B0 0643 0010                  		addi.w	#$10,d3
000174B4 0241 0FFF                  		andi.w	#$FFF,d1
000174B8 EB89                       		lsl.l	#5,d1
000174BA D2A8 0038                  		add.l   shield_Art_Address(a0),d1
000174BE 3404                       		move.w  d4,d2
000174C0 D843                       		add.w   d3,d4
000174C2 D843                       		add.w   d3,d4
000174C4 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
000174CA 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
000174CE                            
000174CE                            locret2_13C96:
000174CE 4E75                       		rts	
000174D0                            ; End of function PLCLoad_Shields
000174D0                            
000174D0                            		include	"_incObj\4E Silver Shield.asm"
000174D0                            ; ---------------------------------------------------------------------------
000174D0                            ; Object 4E - Silver Shield
000174D0                            ; ---------------------------------------------------------------------------
000174D0                            SPShieldItem: ; XREF: Obj_Index
000174D0 7000                       		moveq	#0,d0
000174D2 1028 0024                  		move.b	obRoutine(a0),d0
000174D6 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
000174DA 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
000174DE                            ; ===========================================================================
000174DE                            ; off_1D900:
000174DE                            SPShieldItem_Index:
000174DE 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
000174E0 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
000174E2                            ; ===========================================================================
000174E2                            ; loc_1D904:
000174E2                            SPShieldItem_Init:
000174E2 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000174EA 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000174F2 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000174FA 117C 0004 0001             		move.b	#4,obRender(a0)
00017500 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017506 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001750C 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017512 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017518 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001751E 6700                       		beq.s	@animclear
00017520 08E8 0007 0002             		bset	#7,obGfx(a0)
00017526                            
00017526                            @animclear:
00017526 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001752C 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017532 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017536                            ; loc_1D92C:
00017536                            SPShieldItem_Main:
00017536 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
0001753A 4A38 FE2D                  		tst.b	(v_invinc).w
0001753E 6600                       		bne.s	@return
00017540                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017540                            		;beq.s	@return	; If so, do not display and do not update variables
00017540 4A38 F5CA                  		tst.b	(v_SpShield).w
00017544 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00017548 316A 0008 0008             		move.w	obX(a2),obX(a0)
0001754E 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017554 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001755A 4A6A 0002                  		tst.w	obGFX(a2)
0001755E 6A00                       		bpl.s	@nothighpriority
00017560 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017566                            
00017566                            		@nothighpriority:
00017566 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001756C 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00017572 4EB9 0001 747C             		jsr	(PLCLoad_Shields).l
00017578 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001757E                            ; ---------------------------------------------------------------------------
0001757E                            ; ===========================================================================
0001757E                            
0001757E                            @return:
0001757E 4E75                       		rts
00017580                            
00017580                            SPShieldItem_Destroy:
00017580 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017584 4E75                       		rts
00017586                            ; ===========================================================================
00017586                            ; ===========================================================================
00017586                            		include	"_incObj\04 Gold Shield.asm"
00017586                            ; ---------------------------------------------------------------------------
00017586                            ; Object 04 - Gold Shield
00017586                            ; ---------------------------------------------------------------------------
00017586                            GShieldItem: ; XREF: Obj_Index
00017586 7000                       		moveq	#0,d0
00017588 1028 0024                  		move.b	obRoutine(a0),d0
0001758C 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00017590 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00017594                            ; ===========================================================================
00017594                            ; off_1D900:
00017594                            GShieldItem_Index:
00017594 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00017596 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00017598                            ; ===========================================================================
00017598                            ; loc_1D904:
00017598                            GShieldItem_Init:
00017598 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000175A0 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000175A8 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000175B0 117C 0004 0001             		move.b	#4,obRender(a0)
000175B6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000175BC 117C 0018 0014             		move.b	#$18,obActWid(a0)
000175C2 317C 0541 0002             		move.w	#$541,obGfx(a0)
000175C8 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000175CE 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000175D4 6700                       		beq.s	@animclear
000175D6 08E8 0007 0002             		bset	#7,obGfx(a0)
000175DC                            
000175DC                            @animclear:
000175DC 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000175E2 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000175E8 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000175EC                            ; loc_1D92C:
000175EC                            GShieldItem_Main:
000175EC 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000175F0 4A38 FE2D                  		tst.b	(v_invinc).w
000175F4 6600                       		bne.s	@return
000175F6                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000175F6                            		;beq.s	@return	; If so, do not display and do not update variables
000175F6 4A38 F5C9                  		tst.b	(v_GShield).w
000175FA 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
000175FE 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017604 316A 000C 000C             		move.w	obY(a2),obY(a0)
0001760A 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017610 4A6A 0002                  		tst.w	obGFX(a2)
00017614 6A00                       		bpl.s	@nothighpriority
00017616 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
0001761C                            
0001761C                            		@nothighpriority:
0001761C 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017622 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00017628 4EB9 0001 747C             		jsr	(PLCLoad_Shields).l
0001762E 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00017634                            ; ---------------------------------------------------------------------------
00017634                            ; ===========================================================================
00017634                            
00017634                            @return:
00017634 4E75                       		rts
00017636                            
00017636                            GShieldItem_Destroy:
00017636 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
0001763A 4E75                       		rts
0001763C                            ; ===========================================================================
0001763C                            ; ===========================================================================
0001763C                            		include	"_incObj\07 Red Shield.asm"
0001763C                            ; ---------------------------------------------------------------------------
0001763C                            ; Object 07 - Red Shield
0001763C                            ; ---------------------------------------------------------------------------
0001763C                            RShieldItem: ; XREF: Obj_Index
0001763C 7000                       		moveq	#0,d0
0001763E 1028 0024                  		move.b	obRoutine(a0),d0
00017642 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
00017646 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
0001764A                            ; ===========================================================================
0001764A                            ; off_1D900:
0001764A                            RShieldItem_Index:
0001764A 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
0001764C 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
0001764E                            ; ===========================================================================
0001764E                            ; loc_1D904:
0001764E                            RShieldItem_Init:
0001764E 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017656 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
0001765E 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017666 117C 0004 0001             		move.b	#4,obRender(a0)
0001766C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017672 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017678 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001767E 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017684 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001768A 6700                       		beq.s	@animclear
0001768C 08E8 0007 0002             		bset	#7,obGfx(a0)
00017692                            
00017692                            @animclear:
00017692 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017698 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
0001769E 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000176A2                            ; loc_1D92C:
000176A2                            RShieldItem_Main:
000176A2 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000176A6 4A38 FE2D                  		tst.b	(v_invinc).w
000176AA 6600                       		bne.s	@return
000176AC                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000176AC                            		;beq.s	@return	; If so, do not display and do not update variables
000176AC 4A38 F5C8                  		tst.b	(v_RShield).w
000176B0 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
000176B4 316A 0008 0008             		move.w	obX(a2),obX(a0)
000176BA 316A 000C 000C             		move.w	obY(a2),obY(a0)
000176C0 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
000176C6 4A6A 0002                  		tst.w	obGFX(a2)
000176CA 6A00                       		bpl.s	@nothighpriority
000176CC 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000176D2                            
000176D2                            		@nothighpriority:
000176D2 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000176D8 4EB9 0000 C85E             		jsr	(AnimateSprite).l
000176DE 4EB9 0001 747C             		jsr	(PLCLoad_Shields).l
000176E4 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            ; ===========================================================================
000176EA                            
000176EA                            @return:
000176EA 4E75                       		rts
000176EC                            
000176EC                            RShieldItem_Destroy:
000176EC 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000176F0 4E75                       		rts
000176F2                            ; ===========================================================================
000176F2                            ; ===========================================================================
000176F2                            		include	"_incObj\38 Shield.asm"
000176F2                            ; ---------------------------------------------------------------------------
000176F2                            ; Object 38 - Shield
000176F2                            ; ---------------------------------------------------------------------------
000176F2                            ShieldItem: ; XREF: Obj_Index
000176F2 7000                       		moveq	#0,d0
000176F4 1028 0024                  		move.b	obRoutine(a0),d0
000176F8 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
000176FC 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
00017700                            ; ===========================================================================
00017700                            ; off_1D900:
00017700                            ShieldItem_Index:
00017700 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
00017702 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
00017704                            ; ===========================================================================
00017704                            ; loc_1D904:
00017704                            ShieldItem_Init:
00017704 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
0001770C 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017714 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
0001771C 117C 0004 0001             		move.b	#4,obRender(a0)
00017722 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017728 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001772E 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017734 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
0001773A 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017740 6700                       		beq.s	loc_195F0S
00017742 08E8 0007 0002             		bset	#7,obGfx(a0)
00017748                            
00017748                            loc_195F0S:
00017748 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001774E 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017754 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017758                            ; loc_1D92C:
00017758                            ShieldItem_Main:
00017758 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
0001775C 4A38 FE2D                  		tst.b	(v_invinc).w
00017760 6600                       		bne.s	return_1D976
00017762                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017762                            		;beq.s	return_1D976	; If so, do not display and do not update variables
00017762 4A38 FE2C                  		tst.b	(v_shield).w
00017766 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
0001776A 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017770 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017776 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001777C 4A6A 0002                  		tst.w	obGFX(a2)
00017780 6A00                       		bpl.s	@nothighpriority
00017782 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017788                            
00017788                            		@nothighpriority:
00017788 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001778E 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00017794 4EB9 0001 747C             		jsr	(PLCLoad_Shields).l
0001779A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
000177A0                            ; ---------------------------------------------------------------------------
000177A0                            ; ===========================================================================
000177A0                            
000177A0                            return_1D976:
000177A0 4E75                       		rts
000177A2                            
000177A2                            ShieldItem_Destroy:
000177A2 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000177A6 4E75                       		rts
000177A8                            ; ===========================================================================
000177A8                            ; ===========================================================================
000177A8                            		include	"_incObj\19 Invincibility Stars.asm"	
000177A8                            ; ---------------------------------------------------------------------------
000177A8                            ; Object 10 - invincibility stars
000177A8                            ; ---------------------------------------------------------------------------
000177A8 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
000177A8 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
000177A8 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
000177A8 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
000177A8                            
000177A8                            InvStarsObj: 
000177A8 7000                       		moveq	#0,d0
000177AA 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
000177AE 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000177B2 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000177B6                            ; ===========================================================================
000177B6 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
000177B8 0000                       		dc.w @MainObject-InvStars_Index
000177BA 0000                       		dc.w @SubObject-InvStars_Index
000177BC                            ; ===========================================================================
000177BC                            
000177BC                            	@SubObjectsData:
000177BC 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000177C0 0B00                       		dc.w $0B00 ; speed index,sub3 anim
000177C2 0000 0000                  		dc.l Ani_InvStars3
000177C6 160D                       		dc.w $160D
000177C8 0000 0000                  		dc.l Ani_InvStars4
000177CC 2C0D                       		dc.w $2C0D
000177CE                            ; ===========================================================================
000177CE                            
000177CE                            	@InitObjects:
000177CE 223C 0000 0000             		move.l	#Unc_Stars,d1
000177D4 343C ABC0                  		move.w	#$ABC0,d2
000177D8 363C 0220                  		move.w	#$220,d3
000177DC 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000177E2 7400                       		moveq	#0,d2
000177E4 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
000177E8 43D0                       		lea	(a0),a1
000177EA 7203                       		moveq	#3,d1
000177EC                            		
000177EC                            	@initStars:
000177EC 1290                       		move.b	(a0),(a1) ; load obj35
000177EE 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
000177F4 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
000177FC 337C 055E 0002             		move.w	#$55E,obGfx(a1)
00017802 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00017808 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
0001780E 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
00017814 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00017818 5242                       		addq.w	#1,d2
0001781A 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
0001781E 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
00017822 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00017826 51C9 FFC4                  		dbf	d1,@initStars
0001782A                            
0001782A 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
00017830 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00017836                            
00017836                            	@MainObject:
00017836 43F8 D000                  		lea (v_player).w,a1 ; a1=character
0001783A 4A38 FE2D                  		tst.b   (v_invinc).w
0001783E 6700 0000                  		beq.w	JmpTo_DeleteObject
00017842 3029 0008                  		move.w	obX(a1),d0
00017846 3140 0008                  		move.w	d0,obX(a0)
0001784A 3229 000C                  		move.w	obY(a1),d1
0001784E 3141 000C                  		move.w	d1,obY(a0)
00017852 45E8 0010                  		lea	sub2_x_pos(a0),a2
00017856 47F9 0000 0000             		lea	Ani_InvStars1,a3
0001785C 7A00                       		moveq	#0,d5
0001785E                            
0001785E                            	@getFrame_main:
0001785E 3428 0038                  		move.w	$38(a0),d2
00017862 1A33 2000                  		move.b	(a3,d2.w),d5
00017866 6A00                       		bpl.s	@setFrameAndPosition_main
00017868 4268 0038                  		clr.w	$38(a0)
0001786C 60F0                       		bra.s	@getFrame_main
0001786E                            ; ===========================================================================
0001786E                            
0001786E                            	@setFrameAndPosition_main:
0001786E 5268 0038                  		addq.w	#1,$38(a0)
00017872 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00017878 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001787C 6100 0000                  		bsr.w	InvStars_get_speed
00017880 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017882 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017884 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017886 0646 0020                  		addi.w	#$20,d6
0001788A 6100 0000                  		bsr.w	InvStars_get_speed
0001788E 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017890 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017892 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017894 7012                       		moveq	#$12,d0
00017896 0829 0000 0022             		btst	#0,obStatus(a1)
0001789C 6700                       		beq.s	@display_main
0001789E 4440                       		neg.w	d0
000178A0                            
000178A0                            	@display_main:
000178A0 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
000178A4 303C 0080                  		move.w	#(1*$80),d0
000178A8 4EF9 0000 F7D4             		jmp	DisplaySprite2
000178AE                            ; ===========================================================================
000178AE                            
000178AE                            	@SubObject:
000178AE 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
000178B2 4A38 FE2D                  		tst.b   (v_invinc).w
000178B6 6700 0000                  		beq.w	JmpTo_DeleteObject
000178BA 4BF8 F7A8                  		lea		(v_trackpos).w,a5
000178BE 4DF8 CB00                  		lea		(v_tracksonic).w,a6
000178C2                            
000178C2                            	@getPosition_sub:
000178C2 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000178C6 E509                       		lsl.b	#2,d1
000178C8 3401                       		move.w	d1,d2
000178CA D241                       		add.w	d1,d1
000178CC D242                       		add.w	d2,d1
000178CE 3015                       		move.w	(a5),d0
000178D0 9001                       		sub.b	d1,d0
000178D2 45F6 0000                  		lea	(a6,d0.w),a2
000178D6 301A                       		move.w	(a2)+,d0
000178D8 321A                       		move.w	(a2)+,d1
000178DA 3140 0008                  		move.w	d0,obX(a0)
000178DE 3141 000C                  		move.w	d1,obY(a0)
000178E2 45E8 0010                  		lea	sub2_x_pos(a0),a2
000178E6 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000178EA                            
000178EA                            	@getFrame_sub:
000178EA 3428 0038                  		move.w	$38(a0),d2
000178EE 1A33 2000                  		move.b	(a3,d2.w),d5
000178F2 6A00                       		bpl.s	@setFrameAndPosition_sub
000178F4 4268 0038                  		clr.w	$38(a0)
000178F8 60F0                       		bra.s	@getFrame_sub
000178FA                            ; ===========================================================================
000178FA                            
000178FA                            	@setFrameAndPosition_sub:
000178FA 4845                       		swap	d5
000178FC D428 0035                  		add.b	$35(a0),d2
00017900 1A33 2000                  		move.b	(a3,d2.w),d5
00017904 5268 0038                  		addq.w	#1,$38(a0)
00017908 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
0001790C 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00017910 6100                       		bsr.s	InvStars_get_speed
00017912 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017914 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017916 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017918 0646 0020                  		addi.w	#$20,d6
0001791C 4845                       		swap	d5
0001791E 6100                       		bsr.s	InvStars_get_speed
00017920 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017922 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017924 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017926 7002                       		moveq	#2,d0
00017928 0829 0000 0022             		btst	#0,obStatus(a1)
0001792E 6700                       		beq.s	loc_1DB20
00017930 4440                       		neg.w	d0
00017932                            
00017932                            loc_1DB20:
00017932 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00017936 303C 0080                  		move.w    #(1*$80),d0
0001793A 4EF9 0000 F7D4             		jmp    DisplaySprite2
00017940                            ; ===========================================================================
00017940                            
00017940                            InvStars_get_speed:
00017940 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
00017944 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00017948 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
0001794C 4882                       		ext.w	d2
0001794E 4883                       		ext.w	d3
00017950 D440                       		add.w	d0,d2 ; add object x position to x-move speed
00017952 D641                       		add.w	d1,d3 ; add object y position to y-move speed
00017954 4E75                       		rts
00017956                            
00017956                            InvStars_Speeds: ; x-move speed,	y-move speed	
00017956 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
00017966 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
00017976 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
00017986 FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00017996                            
00017996                            ; ---------------------------------------------------------------------------
00017996                            ; Animation script - invincibility stars
00017996                            ; ---------------------------------------------------------------------------
00017996                            
00017996                            ; The animation script differs from the animate_sprite subroutine
00017996                            ; Every positive byte - mapping
00017996                            ; Every negative byte - loop flag 
00017996                            
00017996 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
000179A4 00                         		even
000179A4 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
000179AF 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
000179BA 00                         		even
000179BA 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
000179C7 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000179D4 00                         		even
000179D4 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000179E1 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000179EE 00                         		even			
000179EE                            ; ---------------------------------------------------------------------------
000179EE                            JmpTo_DeleteObject:
000179EE 4EF9 0000 F7E8             		jmp		(DeleteObject).l
000179EE 4EF9 0000 F7E8             		jmp		(DeleteObject).l
000179F4                            		include	"_incObj\8D Super Stars.asm"			
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            ; Object 91 - Super Sonic Stars
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            
000179F4                            SuperStars:					; XREF: Obj_Index					  ; ...
000179F4 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
000179FA 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
000179FE                            								; In this case, VRAM = $541*20
000179FE 363C 0100                  		move.w	#$100,d3
00017A02 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00017A08 7000                       		moveq	#0,d0
00017A0A 1028 0024                  		move.b	obRoutine(a0),d0
00017A0E 323B 0000                  		move.w	SuperStars_States(pc,d0.w),d1
00017A12 4EFB 1000                  		jmp	SuperStars_States(pc,d1.w)
00017A16                            ; ---------------------------------------------------------------------------
00017A16 0000 0000                  SuperStars_States:	dc.w SuperStars_Init-SuperStars_States,SuperStars_Main-SuperStars_States; 0	; ...
00017A1A                            ; ---------------------------------------------------------------------------
00017A1A                            
00017A1A                            SuperStars_Init:					  ; ...
00017A1A 5428 0024                  		addq.b	#2,obRoutine(a0)
00017A1E 217C 0000 0000 0004        		move.l	#SuperStars_MapUnc_1E1BE,4(a0)
00017A26 117C 0004 0001             		move.b	#4,obRender(a0)
00017A2C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017A32 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017A38 317C 055E 0002             		move.w	#$55E,art_tile(a0)
00017A3E 0838 0007 D002             		btst	#7,(v_player+art_tile).w
00017A44 6700                       		beq.s	SuperStars_Main
00017A46 08E8 0007 0002             		bset	#7,art_tile(a0)
00017A4C                            ; loc_1E138:
00017A4C                            SuperStars_Main:
00017A4C 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00017A50 6700                       		beq.s	JmpTo8_DeleteObject
00017A52 4A28 0030                  		tst.b	$30(a0)
00017A56 6700                       		beq.s	loc_1E188
00017A58 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00017A5C 6A00                       		bpl.s	loc_1E170
00017A5E 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00017A64 5228 001A                  		addq.b	#1,mapping_frame(a0)
00017A68 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00017A6E 6500                       		bcs.s	loc_1E170
00017A70 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017A76 117C 0000 0030             		move.b	#0,$30(a0)
00017A7C 117C 0001 0031             		move.b	#1,$31(a0)
00017A82 4E75                       		rts
00017A84                            ; ===========================================================================
00017A84                            
00017A84                            loc_1E170:
00017A84 4A28 0031                  		tst.b	$31(a0)
00017A88 6600                       		bne.s	JmpTo6_DisplaySprite
00017A8A                            
00017A8A                            loc_1E176:
00017A8A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017A90 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017A96                            
00017A96                            JmpTo6_DisplaySprite:
00017A96 4EF9 0000 F7A8             		jmp	DisplaySprite
00017A9C                            ; ===========================================================================
00017A9C                            
00017A9C                            loc_1E188:
00017A9C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017AA0 6600                       		bne.s	loc_1E1AA
00017AA2 3038 D020                  		move.w	(v_player+obInertia).w,d0
00017AA6 6A00                       		bpl.s	loc_1E196
00017AA8 4440                       		neg.w	d0
00017AAA                            
00017AAA                            loc_1E196:
00017AAA 0C40 0800                  		cmpi.w	#$800,d0
00017AAE 6500                       		bcs.s	loc_1E1AA
00017AB0 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017AB6 117C 0001 0030             		move.b	#1,$30(a0)
00017ABC 60CC                       		bra.s	loc_1E176
00017ABE                            ; ===========================================================================
00017ABE                            
00017ABE                            loc_1E1AA:
00017ABE 117C 0000 0030             		move.b	#0,$30(a0)
00017AC4 117C 0000 0031             		move.b	#0,$31(a0)
00017ACA 4E75                       		rts
00017ACC                            ; ===========================================================================
00017ACC                            
00017ACC                            JmpTo8_DeleteObject:
00017ACC 4EF9 0000 F7E8             		jmp	DeleteObject
00017AD2                            ; ===========================================================================
00017AD2                            
00017AD2                            ; -------------------------------------------------------------------------------
00017AD2                            ; sprite mappings
00017AD2                            ; -------------------------------------------------------------------------------
00017AD2                            ;Obj8F_MapUnc_1E1BE:
00017AD2                            SuperStars_MapUnc_1E1BE:	include "_maps/Super Stars.asm"	
00017AD2                            ; --------------------------------------------------------------------------------
00017AD2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017AD2                            ; --------------------------------------------------------------------------------
00017AD2                            
00017AD2                            SME_fq6vL:	
00017AD2 0000 0000                  		dc.w SME_fq6vL_C-SME_fq6vL, SME_fq6vL_21-SME_fq6vL	
00017AD6 0000 0000                  		dc.w SME_fq6vL_36-SME_fq6vL, SME_fq6vL_4B-SME_fq6vL	
00017ADA 0000 0000                  		dc.w SME_fq6vL_60-SME_fq6vL, SME_fq6vL_75-SME_fq6vL	
00017ADE 04                         SME_fq6vL_C:	dc.b 4	
00017ADF F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017AE4 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017AE9 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017AEE 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017AF3 04                         SME_fq6vL_21:	dc.b 4	
00017AF4 F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017AF9 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017AFE 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017B03 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017B08 04                         SME_fq6vL_36:	dc.b 4	
00017B09 E80A 0005 E8               		dc.b $E8, $A, 0, 5, $E8	
00017B0E E80A 0805 00               		dc.b $E8, $A, 8, 5, 0	
00017B13 000A 1005 E8               		dc.b 0, $A, $10, 5, $E8	
00017B18 000A 1805 00               		dc.b 0, $A, $18, 5, 0	
00017B1D 04                         SME_fq6vL_4B:	dc.b 4	
00017B1E F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017B23 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017B28 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017B2D 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017B32 04                         SME_fq6vL_60:	dc.b 4	
00017B33 F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017B38 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017B3D 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017B42 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017B47 00                         SME_fq6vL_75:	dc.b 0	
00017B48                            		even
00017B48                            		even
00017B48                            
00017B48                            Unc_SuperSonic_stars:	incbin "artunc/Super Stars.bin"
00017D08                            			even
00017D08                            			even
00017D08                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00017D08                            ; ---------------------------------------------------------------------------
00017D08                            ; Object 4A - special stage entry from beta
00017D08                            ; ---------------------------------------------------------------------------
00017D08                            
00017D08                            VanishSonic:
00017D08 7000                       		moveq	#0,d0
00017D0A 1028 0024                  		move.b	obRoutine(a0),d0
00017D0E 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017D12 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017D16                            ; ===========================================================================
00017D16 0000                       Van_Index:	dc.w Van_Main-Van_Index
00017D18 0000                       		dc.w Van_RmvSonic-Van_Index
00017D1A 0000                       		dc.w Van_LoadSonic-Van_Index
00017D1C                            
00017D1C =00000030                  van_time:	equ $30		; time for Sonic to disappear
00017D1C                            ; ===========================================================================
00017D1C                            
00017D1C                            Van_Main:	; Routine 0
00017D1C 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017D20 6700                       		beq.s	@isempty	; if yes, branch
00017D22 4E75                       		rts	
00017D24                            
00017D24                            	@isempty:
00017D24 5428 0024                  		addq.b	#2,obRoutine(a0)
00017D28 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017D30 117C 0004 0001             		move.b	#4,obRender(a0)
00017D36 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017D3C 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017D42 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017D48 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017D4E                            
00017D4E                            Van_RmvSonic:	; Routine 2
00017D4E 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017D54 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017D5A 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017D60 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017D66 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00017D6C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017D72 6600                       		bne.s	@display
00017D74 4A38 D000                  		tst.b	(v_player).w
00017D78 6700                       		beq.s	@display
00017D7A 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017D8A                            
00017D8A                            	@display:
00017D8A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00017D90                            ; ===========================================================================
00017D90                            
00017D90                            Van_LoadSonic:	; Routine 4
00017D90 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017D94 6600                       		bne.s	@wait		; if time remains, branch
00017D96 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017D9C 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00017DA2                            
00017DA2                            	@wait:
00017DA2 4E75                       		rts	
00017DA2 4E75                       		rts	
00017DA4                            		include	"_incObj\08 Water Splash.asm"
00017DA4                            ; ---------------------------------------------------------------------------
00017DA4                            ; Object 08 - water splash (LZ)
00017DA4                            ; ---------------------------------------------------------------------------
00017DA4                            
00017DA4                            Splash:
00017DA4 7000                       		moveq	#0,d0
00017DA6 1028 0024                  		move.b	obRoutine(a0),d0
00017DAA 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017DAE 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017DB2                            ; ===========================================================================
00017DB2 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017DB4 0000                       		dc.w Spla_Display-Spla_Index
00017DB6 0000                       		dc.w Spla_Delete-Spla_Index
00017DB8                            ; ===========================================================================
00017DB8                            
00017DB8                            Spla_Main:    ; Routine 0
00017DB8 5428 0024                          addq.b    #2,obRoutine(a0)
00017DBC 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017DC4 0028 0004 0001                     ori.b    #4,obRender(a0)
00017DCA 117C 0001 0018                     move.b    #1,obPriority(a0)
00017DD0 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017DD6 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017DDC 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017DE2                            
00017DE2                            Spla_Display:    ; Routine 2
00017DE2                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017DE2 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017DE8 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017DEE 4EB9 0000 C85E                     jsr    (AnimateSprite).l
00017DF4 4EF9 0000 F7A8                     jmp    (DisplaySprite).l
00017DFA                            ; ===========================================================================
00017DFA                            
00017DFA                            Spla_Delete:	; Routine 4
00017DFA 4EF9 0000 F7E8             		jmp	(DeleteObject).l	; delete when animation	is complete
00017DFA 4EF9 0000 F7E8             		jmp	(DeleteObject).l	; delete when animation	is complete
00017E00                            		include	"_anim\Shield and Invincibility.asm"
00017E00                            ; ---------------------------------------------------------------------------
00017E00                            ; Animation script - shield and invincibility stars
00017E00                            ; ---------------------------------------------------------------------------
00017E00 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017E02 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017E02 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017E1C                            Map_Shield:	include	"_maps\Shield.asm"
00017E1C                            ; --------------------------------------------------------------------------------
00017E1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017E1C                            ; --------------------------------------------------------------------------------
00017E1C                            
00017E1C                            SME_ocN6K:	
00017E1C 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
00017E20 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017E24 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
00017E28 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
00017E2C 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
00017E30 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
00017E34 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
00017E36 00                         SME_ocN6K_1A:	dc.b 0	
00017E37 04                         SME_ocN6K_1B:	dc.b 4	
00017E38 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E3D E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E42 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E47 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E4C 04                         SME_ocN6K_30:	dc.b 4	
00017E4D E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E52 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E57 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E5C 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E61 04                         SME_ocN6K_45:	dc.b 4	
00017E62 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E67 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E6C 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E71 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E76 04                         SME_ocN6K_5A:	dc.b 4	
00017E77 E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
00017E7C E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
00017E81 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017E86 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017E8B 02                         SME_ocN6K_6F:	dc.b 2	
00017E8C E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017E91 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017E96 02                         SME_ocN6K_7A:	dc.b 2	
00017E97 E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
00017E9C 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017EA1 02                         SME_ocN6K_85:	dc.b 2	
00017EA2 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017EA7 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
00017EAC 02                         SME_ocN6K_90:	dc.b 2	
00017EAD E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017EB2 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017EB7 02                         SME_ocN6K_9B:	dc.b 2	
00017EB8 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
00017EBD 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017EC2 04                         SME_ocN6K_A6:	dc.b 4	
00017EC3 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017EC8 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
00017ECD 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017ED2 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017ED7 04                         SME_ocN6K_BB:	dc.b 4	
00017ED8 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017EDD E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017EE2 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017EE7 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017EEC 04                         SME_ocN6K_D0:	dc.b 4	
00017EED E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017EF2 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017EF7 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017EFC 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017F02 00                         		even
00017F02 00                         		even
00017F02                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
00017F02                            ; --------------------------------------------------------------------------------
00017F02                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
00017F02                            
00017F02                            SME_yRIsY:	
00017F02 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
00017F06 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
00017F0A 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017F0E 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00017F12 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00017F16 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
00017F1A 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
00017F1C 0000                       SME_yRIsY_1A:	dc.b 0, 0	
00017F1E 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
00017F28 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017F32 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017F3C 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017F46 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017F4C 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
00017F52 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
00017F58 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
00017F5E 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017F64 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017F6E 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017F78 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017F82                            		even
00017F82                            		even
00017F82                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00017F82                            ; ================================================================================
00017F82                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00017F82                            ; ================================================================================
00017F82                            
00017F82                            InvStarMap:
00017F82 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00017F86 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
00017F8A 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
00017F8E 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00017F92 0000                       	dc.w InvStarMap_8-InvStarMap
00017F94 01                         InvStarMap_1: dc.b $1
00017F95 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00017F9A 01                         InvStarMap_2: dc.b $1
00017F9B F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00017FA0 01                         InvStarMap_3: dc.b $1
00017FA1 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00017FA6 01                         InvStarMap_4: dc.b $1
00017FA7 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00017FAC 01                         InvStarMap_5: dc.b $1
00017FAD F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00017FB2 01                         InvStarMap_6: dc.b $1
00017FB3 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00017FB8 01                         InvStarMap_7: dc.b $1
00017FB9 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
00017FBE 01                         InvStarMap_8: dc.b $1
00017FBF F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00017FC4                            	even
00017FC4                            	even
00017FC4                            		include	"_anim\Special Stage Entry (Unused).asm"
00017FC4                            ; ---------------------------------------------------------------------------
00017FC4                            ; Animation script - special stage entry effect from beta
00017FC4                            ; ---------------------------------------------------------------------------
00017FC4 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017FC6 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017FDA                            		even
00017FDA                            		even
00017FDA                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017FDA                            ; ---------------------------------------------------------------------------
00017FDA                            ; Sprite mappings - special stage entry	from beta
00017FDA                            ; ---------------------------------------------------------------------------
00017FDA                            Map_Vanish_internal:
00017FDA 0000                       		dc.w @flash1-Map_Vanish_internal
00017FDC 0000                       		dc.w @flash2-Map_Vanish_internal
00017FDE 0000                       		dc.w @flash3-Map_Vanish_internal
00017FE0 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017FE2 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017FE4 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017FE6 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017FE8 0000                       		dc.w @blank-Map_Vanish_internal
00017FEA 03                         @flash1:	dc.b 3
00017FEB F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017FF0 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017FF5 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017FFA 03                         @flash2:	dc.b 3
00017FFB F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00018000 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00018005 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001800A 05                         @flash3:	dc.b 5
0001800B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00018010 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00018015 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001801A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001801F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00018024 09                         @sparkle1:	dc.b 9
00018025 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001802A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001802F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00018034 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00018039 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001803E F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00018043 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00018048 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001804D F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00018052 12                         @sparkle2:	dc.b $12
00018053 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00018058 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001805D F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00018062 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00018067 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001806C 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00018071 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00018076 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001807B 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00018080 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00018085 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001808A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001808F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00018094 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00018099 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001809E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000180A3 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000180A8 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000180AD 11                         @sparkle3:	dc.b $11
000180AE F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000180B3 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000180B8 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000180BD 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000180C2 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000180C7 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000180CC 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000180D1 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000180D6 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000180DB 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000180E0 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000180E5 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000180EA F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000180EF 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000180F4 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000180F9 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000180FE 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00018103 09                         @sparkle4:	dc.b 9
00018104 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00018109 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001810E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00018113 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00018118 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001811D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00018122 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00018127 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001812C 04                         		dc.b 4
0001812D 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00018132                            		even
00018132                            		even
00018132                            		include	"_anim\Water Splash.asm"
00018132                            ; ---------------------------------------------------------------------------
00018132                            ; Animation script - water splash (LZ)
00018132                            ; ---------------------------------------------------------------------------
00018132 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00018134 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
0001813A 00                         		even
0001813A 00                         		even
0001813A                            Map_Splash:	include	"_maps\Water Splash.asm"
0001813A                            ; ---------------------------------------------------------------------------
0001813A                            ; Sprite mappings - water splash (LZ)
0001813A                            ; ---------------------------------------------------------------------------
0001813A                            Map_Splash_internal:
0001813A 0000                       		dc.w @splash1-Map_Splash_internal
0001813C 0000                       		dc.w @splash2-Map_Splash_internal
0001813E 0000                       		dc.w @splash3-Map_Splash_internal
00018140 02                         @splash1:	dc.b 2
00018141 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00018146 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001814B 02                         @splash2:	dc.b 2
0001814C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00018151 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00018156 01                         @splash3:	dc.b 1
00018157 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001815C                            		even
0001815C                            		even
0001815C                            
0001815C                            		include	"_incObj\Sonic AnglePos.asm"
0001815C                            ; ---------------------------------------------------------------------------
0001815C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001815C                            ; ---------------------------------------------------------------------------
0001815C                            
0001815C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001815C                            
0001815C                            
0001815C                            Sonic_AnglePos:
0001815C 0828 0003 0022             		btst	#3,obStatus(a0)
00018162 6700                       		beq.s	loc_14602
00018164 7000                       		moveq	#0,d0
00018166 11C0 F768                  		move.b	d0,($FFFFF768).w
0001816A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001816E 4E75                       		rts	
00018170                            ; ===========================================================================
00018170                            
00018170                            loc_14602:
00018170 7003                       		moveq	#3,d0
00018172 11C0 F768                  		move.b	d0,($FFFFF768).w
00018176 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001817A 1028 0026                  		move.b	obAngle(a0),d0
0001817E 0600 0020                  		addi.b	#$20,d0
00018182 6A00                       		bpl.s	loc_14624
00018184 1028 0026                  		move.b	obAngle(a0),d0
00018188 6A00                       		bpl.s	loc_1461E
0001818A 5300                       		subq.b	#1,d0
0001818C                            
0001818C                            loc_1461E:
0001818C 0600 0020                  		addi.b	#$20,d0
00018190 6000                       		bra.s	loc_14630
00018192                            ; ===========================================================================
00018192                            
00018192                            loc_14624:
00018192 1028 0026                  		move.b	obAngle(a0),d0
00018196 6A00                       		bpl.s	loc_1462C
00018198 5200                       		addq.b	#1,d0
0001819A                            
0001819A                            loc_1462C:
0001819A 0600 001F                  		addi.b	#$1F,d0
0001819E                            
0001819E                            loc_14630:
0001819E 0200 00C0                  		andi.b	#$C0,d0
000181A2 0C00 0040                  		cmpi.b	#$40,d0
000181A6 6700 0000                  		beq.w	Sonic_WalkVertL
000181AA 0C00 0080                  		cmpi.b	#$80,d0
000181AE 6700 0000                  		beq.w	Sonic_WalkCeiling
000181B2 0C00 00C0                  		cmpi.b	#$C0,d0
000181B6 6700 0000                  		beq.w	Sonic_WalkVertR
000181BA 3428 000C                  		move.w	obY(a0),d2
000181BE 3628 0008                  		move.w	obX(a0),d3
000181C2 7000                       		moveq	#0,d0
000181C4 1028 0016                  		move.b	obHeight(a0),d0
000181C8 4880                       		ext.w	d0
000181CA D440                       		add.w	d0,d2
000181CC 1028 0017                  		move.b	obWidth(a0),d0
000181D0 4880                       		ext.w	d0
000181D2 D640                       		add.w	d0,d3
000181D4 49F8 F768                  		lea	($FFFFF768).w,a4
000181D8 367C 0010                  		movea.w	#$10,a3
000181DC 3C3C 0000                  		move.w	#0,d6
000181E0 7A0D                       		moveq	#$D,d5
000181E2 6100 0000                  		bsr.w	FindFloor
000181E6 3F01                       		move.w	d1,-(sp)
000181E8 3428 000C                  		move.w	obY(a0),d2
000181EC 3628 0008                  		move.w	obX(a0),d3
000181F0 7000                       		moveq	#0,d0
000181F2 1028 0016                  		move.b	obHeight(a0),d0
000181F6 4880                       		ext.w	d0
000181F8 D440                       		add.w	d0,d2
000181FA 1028 0017                  		move.b	obWidth(a0),d0
000181FE 4880                       		ext.w	d0
00018200 4440                       		neg.w	d0
00018202 D640                       		add.w	d0,d3
00018204 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018208 367C 0010                  		movea.w	#$10,a3
0001820C 3C3C 0000                  		move.w	#0,d6
00018210 7A0D                       		moveq	#$D,d5
00018212 6100 0000                  		bsr.w	FindFloor
00018216 301F                       		move.w	(sp)+,d0
00018218 6100 0000                  		bsr.w	Sonic_Angle
0001821C 4A41                       		tst.w	d1
0001821E 6700                       		beq.s	locret_146BE
00018220 6A00                       		bpl.s	loc_146C0
00018222 0C41 FFF2                  		cmpi.w	#-$E,d1
00018226 6D00                       		blt.s	locret_146E6
00018228 D368 000C                  		add.w	d1,obY(a0)
0001822C                            
0001822C                            locret_146BE:
0001822C 4E75                       		rts	
0001822E                            ; ===========================================================================
0001822E                            
0001822E                            loc_146C0:
0001822E 0C41 000E                  		cmpi.w	#$E,d1
00018232 6E00                       		bgt.s	loc_146CC
00018234                            
00018234                            loc_146C6:
00018234 D368 000C                  		add.w	d1,obY(a0)
00018238 4E75                       		rts	
0001823A                            ; ===========================================================================
0001823A                            
0001823A                            loc_146CC:
0001823A 4A28 0038                  		tst.b	$38(a0)
0001823E 66F4                       		bne.s	loc_146C6
00018240 08E8 0001 0022             		bset	#1,obStatus(a0)
00018246 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001824C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018252 4E75                       		rts	
00018254                            ; ===========================================================================
00018254                            
00018254                            locret_146E6:
00018254 4E75                       		rts	
00018256                            ; End of function Sonic_AnglePos
00018256                            
00018256                            ; ===========================================================================
00018256 2428 0008                  		move.l	obX(a0),d2
0001825A 3028 0010                  		move.w	obVelX(a0),d0
0001825E 48C0                       		ext.l	d0
00018260 E180                       		asl.l	#8,d0
00018262 9480                       		sub.l	d0,d2
00018264 2142 0008                  		move.l	d2,obX(a0)
00018268 303C 0038                  		move.w	#$38,d0
0001826C 48C0                       		ext.l	d0
0001826E E180                       		asl.l	#8,d0
00018270 9680                       		sub.l	d0,d3
00018272 2143 000C                  		move.l	d3,obY(a0)
00018276 4E75                       		rts	
00018278                            ; ===========================================================================
00018278                            
00018278                            locret_1470A:
00018278 4E75                       		rts	
0001827A                            ; ===========================================================================
0001827A 2628 000C                  		move.l	obY(a0),d3
0001827E 3028 0012                  		move.w	obVelY(a0),d0
00018282 0440 0038                  		subi.w	#$38,d0
00018286 3140 0012                  		move.w	d0,obVelY(a0)
0001828A 48C0                       		ext.l	d0
0001828C E180                       		asl.l	#8,d0
0001828E 9680                       		sub.l	d0,d3
00018290 2143 000C                  		move.l	d3,obY(a0)
00018294 4E75                       		rts	
00018296 4E75                       		rts	
00018298                            ; ===========================================================================
00018298 2428 0008                  		move.l	obX(a0),d2
0001829C 2628 000C                  		move.l	obY(a0),d3
000182A0 3028 0010                  		move.w	obVelX(a0),d0
000182A4 48C0                       		ext.l	d0
000182A6 E180                       		asl.l	#8,d0
000182A8 9480                       		sub.l	d0,d2
000182AA 3028 0012                  		move.w	obVelY(a0),d0
000182AE 48C0                       		ext.l	d0
000182B0 E180                       		asl.l	#8,d0
000182B2 9680                       		sub.l	d0,d3
000182B4 2142 0008                  		move.l	d2,obX(a0)
000182B8 2143 000C                  		move.l	d3,obY(a0)
000182BC 4E75                       		rts	
000182BE                            
000182BE                            ; ---------------------------------------------------------------------------
000182BE                            ; Subroutine to	change Sonic's angle as he walks along the floor
000182BE                            ; ---------------------------------------------------------------------------
000182BE                            
000182BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182BE                            
000182BE                            
000182BE                            Sonic_Angle:
000182BE 1438 F76A                  		move.b	($FFFFF76A).w,d2
000182C2 B240                       		cmp.w	d0,d1
000182C4 6F00                       		ble.s	loc_1475E
000182C6 1438 F768                  		move.b	($FFFFF768).w,d2
000182CA 3200                       		move.w	d0,d1
000182CC                            
000182CC                            loc_1475E:
000182CC 0802 0000                  		btst	#0,d2
000182D0 6600                       		bne.s	loc_1476A
000182D2 1142 0026                  		move.b	d2,obAngle(a0)
000182D6 4E75                       		rts	
000182D8                            ; ===========================================================================
000182D8                            
000182D8                            loc_1476A:
000182D8 1428 0026                  		move.b	obAngle(a0),d2
000182DC 0602 0020                  		addi.b	#$20,d2
000182E0 0202 00C0                  		andi.b	#$C0,d2
000182E4 1142 0026                  		move.b	d2,obAngle(a0)
000182E8 4E75                       		rts	
000182EA                            ; End of function Sonic_Angle
000182EA                            
000182EA                            ; ---------------------------------------------------------------------------
000182EA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000182EA                            ; ---------------------------------------------------------------------------
000182EA                            
000182EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182EA                            
000182EA                            
000182EA                            Sonic_WalkVertR:
000182EA 3428 000C                  		move.w	obY(a0),d2
000182EE 3628 0008                  		move.w	obX(a0),d3
000182F2 7000                       		moveq	#0,d0
000182F4 1028 0017                  		move.b	obWidth(a0),d0
000182F8 4880                       		ext.w	d0
000182FA 4440                       		neg.w	d0
000182FC D440                       		add.w	d0,d2
000182FE 1028 0016                  		move.b	obHeight(a0),d0
00018302 4880                       		ext.w	d0
00018304 D640                       		add.w	d0,d3
00018306 49F8 F768                  		lea	($FFFFF768).w,a4
0001830A 367C 0010                  		movea.w	#$10,a3
0001830E 3C3C 0000                  		move.w	#0,d6
00018312 7A0D                       		moveq	#$D,d5
00018314 6100 0000                  		bsr.w	FindWall
00018318 3F01                       		move.w	d1,-(sp)
0001831A 3428 000C                  		move.w	obY(a0),d2
0001831E 3628 0008                  		move.w	obX(a0),d3
00018322 7000                       		moveq	#0,d0
00018324 1028 0017                  		move.b	obWidth(a0),d0
00018328 4880                       		ext.w	d0
0001832A D440                       		add.w	d0,d2
0001832C 1028 0016                  		move.b	obHeight(a0),d0
00018330 4880                       		ext.w	d0
00018332 D640                       		add.w	d0,d3
00018334 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018338 367C 0010                  		movea.w	#$10,a3
0001833C 3C3C 0000                  		move.w	#0,d6
00018340 7A0D                       		moveq	#$D,d5
00018342 6100 0000                  		bsr.w	FindWall
00018346 301F                       		move.w	(sp)+,d0
00018348 6100 FF74                  		bsr.w	Sonic_Angle
0001834C 4A41                       		tst.w	d1
0001834E 6700                       		beq.s	locret_147F0
00018350 6A00                       		bpl.s	loc_147F2
00018352 0C41 FFF2                  		cmpi.w	#-$E,d1
00018356 6D00 FF20                  		blt.w	locret_1470A
0001835A D368 0008                  		add.w	d1,obX(a0)
0001835E                            
0001835E                            locret_147F0:
0001835E 4E75                       		rts	
00018360                            ; ===========================================================================
00018360                            
00018360                            loc_147F2:
00018360 0C41 000E                  		cmpi.w	#$E,d1
00018364 6E00                       		bgt.s	loc_147FE
00018366                            
00018366                            loc_147F8:
00018366 D368 0008                  		add.w	d1,obX(a0)
0001836A 4E75                       		rts	
0001836C                            ; ===========================================================================
0001836C                            
0001836C                            loc_147FE:
0001836C 4A28 0038                  		tst.b	$38(a0)
00018370 66F4                       		bne.s	loc_147F8
00018372 08E8 0001 0022             		bset	#1,obStatus(a0)
00018378 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001837E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018384 4E75                       		rts	
00018386                            ; End of function Sonic_WalkVertR
00018386                            
00018386                            ; ---------------------------------------------------------------------------
00018386                            ; Subroutine allowing Sonic to walk upside-down
00018386                            ; ---------------------------------------------------------------------------
00018386                            
00018386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018386                            
00018386                            
00018386                            Sonic_WalkCeiling:
00018386 3428 000C                  		move.w	obY(a0),d2
0001838A 3628 0008                  		move.w	obX(a0),d3
0001838E 7000                       		moveq	#0,d0
00018390 1028 0016                  		move.b	obHeight(a0),d0
00018394 4880                       		ext.w	d0
00018396 9440                       		sub.w	d0,d2
00018398 0A42 000F                  		eori.w	#$F,d2
0001839C 1028 0017                  		move.b	obWidth(a0),d0
000183A0 4880                       		ext.w	d0
000183A2 D640                       		add.w	d0,d3
000183A4 49F8 F768                  		lea	($FFFFF768).w,a4
000183A8 367C FFF0                  		movea.w	#-$10,a3
000183AC 3C3C 1000                  		move.w	#$1000,d6
000183B0 7A0D                       		moveq	#$D,d5
000183B2 6100 0000                  		bsr.w	FindFloor
000183B6 3F01                       		move.w	d1,-(sp)
000183B8 3428 000C                  		move.w	obY(a0),d2
000183BC 3628 0008                  		move.w	obX(a0),d3
000183C0 7000                       		moveq	#0,d0
000183C2 1028 0016                  		move.b	obHeight(a0),d0
000183C6 4880                       		ext.w	d0
000183C8 9440                       		sub.w	d0,d2
000183CA 0A42 000F                  		eori.w	#$F,d2
000183CE 1028 0017                  		move.b	obWidth(a0),d0
000183D2 4880                       		ext.w	d0
000183D4 9640                       		sub.w	d0,d3
000183D6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000183DA 367C FFF0                  		movea.w	#-$10,a3
000183DE 3C3C 1000                  		move.w	#$1000,d6
000183E2 7A0D                       		moveq	#$D,d5
000183E4 6100 0000                  		bsr.w	FindFloor
000183E8 301F                       		move.w	(sp)+,d0
000183EA 6100 FED2                  		bsr.w	Sonic_Angle
000183EE 4A41                       		tst.w	d1
000183F0 6700                       		beq.s	locret_14892
000183F2 6A00                       		bpl.s	loc_14894
000183F4 0C41 FFF2                  		cmpi.w	#-$E,d1
000183F8 6D00 FE5A                  		blt.w	locret_146E6
000183FC 9368 000C                  		sub.w	d1,obY(a0)
00018400                            
00018400                            locret_14892:
00018400 4E75                       		rts	
00018402                            ; ===========================================================================
00018402                            
00018402                            loc_14894:
00018402 0C41 000E                  		cmpi.w	#$E,d1
00018406 6E00                       		bgt.s	loc_148A0
00018408                            
00018408                            loc_1489A:
00018408 9368 000C                  		sub.w	d1,obY(a0)
0001840C 4E75                       		rts	
0001840E                            ; ===========================================================================
0001840E                            
0001840E                            loc_148A0:
0001840E 4A28 0038                  		tst.b	$38(a0)
00018412 66F4                       		bne.s	loc_1489A
00018414 08E8 0001 0022             		bset	#1,obStatus(a0)
0001841A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018420 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018426 4E75                       		rts	
00018428                            ; End of function Sonic_WalkCeiling
00018428                            
00018428                            ; ---------------------------------------------------------------------------
00018428                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00018428                            ; ---------------------------------------------------------------------------
00018428                            
00018428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018428                            
00018428                            
00018428                            Sonic_WalkVertL:
00018428 3428 000C                  		move.w	obY(a0),d2
0001842C 3628 0008                  		move.w	obX(a0),d3
00018430 7000                       		moveq	#0,d0
00018432 1028 0017                  		move.b	obWidth(a0),d0
00018436 4880                       		ext.w	d0
00018438 9440                       		sub.w	d0,d2
0001843A 1028 0016                  		move.b	obHeight(a0),d0
0001843E 4880                       		ext.w	d0
00018440 9640                       		sub.w	d0,d3
00018442 0A43 000F                  		eori.w	#$F,d3
00018446 49F8 F768                  		lea	($FFFFF768).w,a4
0001844A 367C FFF0                  		movea.w	#-$10,a3
0001844E 3C3C 0800                  		move.w	#$800,d6
00018452 7A0D                       		moveq	#$D,d5
00018454 6100 0000                  		bsr.w	FindWall
00018458 3F01                       		move.w	d1,-(sp)
0001845A 3428 000C                  		move.w	obY(a0),d2
0001845E 3628 0008                  		move.w	obX(a0),d3
00018462 7000                       		moveq	#0,d0
00018464 1028 0017                  		move.b	obWidth(a0),d0
00018468 4880                       		ext.w	d0
0001846A D440                       		add.w	d0,d2
0001846C 1028 0016                  		move.b	obHeight(a0),d0
00018470 4880                       		ext.w	d0
00018472 9640                       		sub.w	d0,d3
00018474 0A43 000F                  		eori.w	#$F,d3
00018478 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001847C 367C FFF0                  		movea.w	#-$10,a3
00018480 3C3C 0800                  		move.w	#$800,d6
00018484 7A0D                       		moveq	#$D,d5
00018486 6100 0000                  		bsr.w	FindWall
0001848A 301F                       		move.w	(sp)+,d0
0001848C 6100 FE30                  		bsr.w	Sonic_Angle
00018490 4A41                       		tst.w	d1
00018492 6700                       		beq.s	locret_14934
00018494 6A00                       		bpl.s	loc_14936
00018496 0C41 FFF2                  		cmpi.w	#-$E,d1
0001849A 6D00 FDDC                  		blt.w	locret_1470A
0001849E 9368 0008                  		sub.w	d1,obX(a0)
000184A2                            
000184A2                            locret_14934:
000184A2 4E75                       		rts	
000184A4                            ; ===========================================================================
000184A4                            
000184A4                            loc_14936:
000184A4 0C41 000E                  		cmpi.w	#$E,d1
000184A8 6E00                       		bgt.s	loc_14942
000184AA                            
000184AA                            loc_1493C:
000184AA 9368 0008                  		sub.w	d1,obX(a0)
000184AE 4E75                       		rts	
000184B0                            ; ===========================================================================
000184B0                            
000184B0                            loc_14942:
000184B0 4A28 0038                  		tst.b	$38(a0)
000184B4 66F4                       		bne.s	loc_1493C
000184B6 08E8 0001 0022             		bset	#1,obStatus(a0)
000184BC 08A8 0005 0022             		bclr	#5,obStatus(a0)
000184C2 117C 0001 001D             		move.b	#1,obNextAni(a0)
000184C8 4E75                       		rts	
000184CA                            ; End of function Sonic_WalkVertL
000184CA                            ; End of function Sonic_WalkVertL
000184CA                            
000184CA                            		include	"_incObj\sub FindNearestTile.asm"
000184CA                            ; ---------------------------------------------------------------------------
000184CA                            ; Subroutine to	find which tile	the object is standing on
000184CA                            
000184CA                            ; input:
000184CA                            ;	d2 = y-position of object's bottom edge
000184CA                            ;	d3 = x-position of object
000184CA                            
000184CA                            ; output:
000184CA                            ;	a1 = address within 256x256 mappings where object is standing
000184CA                            ;	     (refers to a 16x16 tile number)
000184CA                            ; ---------------------------------------------------------------------------
000184CA                            
000184CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184CA                            
000184CA                            
000184CA                            FindNearestTile:
000184CA 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000184CC E248                       		lsr.w	#1,d0
000184CE 0240 0380                  		andi.w	#$380,d0
000184D2 3203                       		move.w	d3,d1		; get x-pos. of object
000184D4 E049                       		lsr.w	#8,d1
000184D6 0241 007F                  		andi.w	#$7F,d1
000184DA D041                       		add.w	d1,d0		; combine
000184DC 72FF                       		moveq	#-1,d1
000184DE 43F8 A400                  		lea	(v_lvllayout).w,a1
000184E2 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000184E6 6700                       		beq.s	@blanktile	; branch if 0
000184E8 6B00                       		bmi.s	@specialtile	; branch if >$7F
000184EA 5301                       		subq.b	#1,d1
000184EC 4881                       		ext.w	d1
000184EE EE59                       		ror.w	#7,d1
000184F0 3002                       		move.w	d2,d0
000184F2 D040                       		add.w	d0,d0
000184F4 0240 01E0                  		andi.w	#$1E0,d0
000184F8 D240                       		add.w	d0,d1
000184FA 3003                       		move.w	d3,d0
000184FC E648                       		lsr.w	#3,d0
000184FE 0240 001E                  		andi.w	#$1E,d0
00018502 D240                       		add.w	d0,d1
00018504                            
00018504                            @blanktile:
00018504 2241                       		movea.l	d1,a1
00018506 4E75                       		rts	
00018508                            ; ===========================================================================
00018508                            
00018508                            @specialtile:
00018508 0241 007F                  		andi.w	#$7F,d1
0001850C 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00018512 6700                       		beq.s	@treatasnormal	; if not, branch
00018514 5241                       		addq.w	#1,d1
00018516 0C41 0029                  		cmpi.w	#$29,d1
0001851A 6600                       		bne.s	@treatasnormal
0001851C 323C 0051                  		move.w	#$51,d1
00018520                            
00018520                            	@treatasnormal:
00018520 5301                       		subq.b	#1,d1
00018522 EE59                       		ror.w	#7,d1
00018524 3002                       		move.w	d2,d0
00018526 D040                       		add.w	d0,d0
00018528 0240 01E0                  		andi.w	#$1E0,d0
0001852C D240                       		add.w	d0,d1
0001852E 3003                       		move.w	d3,d0
00018530 E648                       		lsr.w	#3,d0
00018532 0240 001E                  		andi.w	#$1E,d0
00018536 D240                       		add.w	d0,d1
00018538 2241                       		movea.l	d1,a1
0001853A 4E75                       		rts	
0001853C                            ; End of function FindNearestTile
0001853C                            ; End of function FindNearestTile
0001853C                            		include	"_incObj\sub FindFloor.asm"
0001853C                            ; ---------------------------------------------------------------------------
0001853C                            ; Subroutine to	find the floor
0001853C                            
0001853C                            ; input:
0001853C                            ;	d2 = y-position of object's bottom edge
0001853C                            ;	d3 = x-position of object
0001853C                            ;	d5 = bit to test for solidness
0001853C                            
0001853C                            ; output:
0001853C                            ;	d1 = distance to the floor
0001853C                            ;	a1 = address within 256x256 mappings where object is standing
0001853C                            ;	     (refers to a 16x16 tile number)
0001853C                            ;	(a4) = floor angle
0001853C                            ; ---------------------------------------------------------------------------
0001853C                            
0001853C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001853C                            
0001853C                            
0001853C                            FindFloor:
0001853C 618C                       		bsr.s	FindNearestTile
0001853E 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00018540 3800                       		move.w	d0,d4
00018542 0240 07FF                  		andi.w	#$7FF,d0
00018546 6700                       		beq.s	@isblank	; branch if tile is blank
00018548 0B04                       		btst	d5,d4		; is the tile solid?
0001854A 6600                       		bne.s	@issolid	; if yes, branch
0001854C                            
0001854C                            @isblank:
0001854C D44B                       		add.w	a3,d2
0001854E 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00018552 944B                       		sub.w	a3,d2
00018554 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00018558 4E75                       		rts	
0001855A                            ; ===========================================================================
0001855A                            
0001855A                            @issolid:
0001855A 2478 F796                  		movea.l	(v_collindex).w,a2
0001855E 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00018562 0240 00FF                  		andi.w	#$FF,d0
00018566 67E4                       		beq.s	@isblank	; branch if 0
00018568 45F9 0000 0000             		lea	(AngleMap).l,a2
0001856E 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00018572 E948                       		lsl.w	#4,d0
00018574 3203                       		move.w	d3,d1		; get x-pos. of object
00018576 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
0001857A 6700                       		beq.s	@noflip		; if not, branch
0001857C 4641                       		not.w	d1
0001857E 4414                       		neg.b	(a4)
00018580                            
00018580                            	@noflip:
00018580 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00018584 6700                       		beq.s	@noflip2	; if not, branch
00018586 0614 0040                  		addi.b	#$40,(a4)
0001858A 4414                       		neg.b	(a4)
0001858C 0414 0040                  		subi.b	#$40,(a4)
00018590                            
00018590                            	@noflip2:
00018590 0241 000F                  		andi.w	#$F,d1
00018594 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00018596 45F9 0000 0000             		lea	(CollArray1).l,a2
0001859C 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
000185A0 4880                       		ext.w	d0
000185A2 BD44                       		eor.w	d6,d4
000185A4 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000185A8 6700                       		beq.s	@noflip3	; if not, branch
000185AA 4440                       		neg.w	d0
000185AC                            
000185AC                            	@noflip3:
000185AC 4A40                       		tst.w	d0
000185AE 679C                       		beq.s	@isblank	; branch if height is 0
000185B0 6B00                       		bmi.s	@negfloor	; branch if height is negative
000185B2 0C00 0010                  		cmpi.b	#$10,d0
000185B6 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
000185B8 3202                       		move.w	d2,d1		; get y-pos. of object
000185BA 0241 000F                  		andi.w	#$F,d1
000185BE D041                       		add.w	d1,d0
000185C0 323C 000F                  		move.w	#$F,d1
000185C4 9240                       		sub.w	d0,d1		; return distance to floor
000185C6 4E75                       		rts	
000185C8                            ; ===========================================================================
000185C8                            
000185C8                            @negfloor:
000185C8 3202                       		move.w	d2,d1
000185CA 0241 000F                  		andi.w	#$F,d1
000185CE D041                       		add.w	d1,d0
000185D0 6A00 FF7A                  		bpl.w	@isblank
000185D4                            
000185D4                            @maxfloor:
000185D4 944B                       		sub.w	a3,d2
000185D6 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000185DA D44B                       		add.w	a3,d2
000185DC 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000185E0 4E75                       		rts	
000185E2                            ; End of function FindFloor
000185E2                            
000185E2                            
000185E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185E2                            
000185E2                            
000185E2                            FindFloor2:
000185E2 6100 FEE6                  		bsr.w	FindNearestTile
000185E6 3011                       		move.w	(a1),d0
000185E8 3800                       		move.w	d0,d4
000185EA 0240 07FF                  		andi.w	#$7FF,d0
000185EE 6700                       		beq.s	@isblank2
000185F0 0B04                       		btst	d5,d4
000185F2 6600                       		bne.s	@issolid
000185F4                            
000185F4                            @isblank2:
000185F4 323C 000F                  		move.w	#$F,d1
000185F8 3002                       		move.w	d2,d0
000185FA 0240 000F                  		andi.w	#$F,d0
000185FE 9240                       		sub.w	d0,d1
00018600 4E75                       		rts	
00018602                            ; ===========================================================================
00018602                            
00018602                            @issolid:
00018602 2478 F796                  		movea.l	(v_collindex).w,a2
00018606 1032 0000                  		move.b	(a2,d0.w),d0
0001860A 0240 00FF                  		andi.w	#$FF,d0
0001860E 67E4                       		beq.s	@isblank2
00018610 45F9 0000 0000             		lea	(AngleMap).l,a2
00018616 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001861A E948                       		lsl.w	#4,d0
0001861C 3203                       		move.w	d3,d1
0001861E 0804 000B                  		btst	#$B,d4
00018622 6700                       		beq.s	@noflip
00018624 4641                       		not.w	d1
00018626 4414                       		neg.b	(a4)
00018628                            
00018628                            	@noflip:
00018628 0804 000C                  		btst	#$C,d4
0001862C 6700                       		beq.s	@noflip2
0001862E 0614 0040                  		addi.b	#$40,(a4)
00018632 4414                       		neg.b	(a4)
00018634 0414 0040                  		subi.b	#$40,(a4)
00018638                            
00018638                            	@noflip2:
00018638 0241 000F                  		andi.w	#$F,d1
0001863C D240                       		add.w	d0,d1
0001863E 45F9 0000 0000             		lea	(CollArray1).l,a2
00018644 1032 1000                  		move.b	(a2,d1.w),d0
00018648 4880                       		ext.w	d0
0001864A BD44                       		eor.w	d6,d4
0001864C 0804 000C                  		btst	#$C,d4
00018650 6700                       		beq.s	@noflip3
00018652 4440                       		neg.w	d0
00018654                            
00018654                            	@noflip3:
00018654 4A40                       		tst.w	d0
00018656 679C                       		beq.s	@isblank2
00018658 6B00                       		bmi.s	@negfloor
0001865A 3202                       		move.w	d2,d1
0001865C 0241 000F                  		andi.w	#$F,d1
00018660 D041                       		add.w	d1,d0
00018662 323C 000F                  		move.w	#$F,d1
00018666 9240                       		sub.w	d0,d1
00018668 4E75                       		rts	
0001866A                            ; ===========================================================================
0001866A                            
0001866A                            @negfloor:
0001866A 3202                       		move.w	d2,d1
0001866C 0241 000F                  		andi.w	#$F,d1
00018670 D041                       		add.w	d1,d0
00018672 6A00 FF80                  		bpl.w	@isblank2
00018676 4641                       		not.w	d1
00018678 4E75                       		rts	
0001867A                            ; End of function FindFloor2
0001867A                            ; End of function FindFloor2
0001867A                            		include	"_incObj\sub FindWall.asm"
0001867A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001867A                            
0001867A                            
0001867A                            FindWall:
0001867A 6100 FE4E                  		bsr.w	FindNearestTile
0001867E 3011                       		move.w	(a1),d0
00018680 3800                       		move.w	d0,d4
00018682 0240 07FF                  		andi.w	#$7FF,d0
00018686 6700                       		beq.s	loc_14B1E
00018688 0B04                       		btst	d5,d4
0001868A 6600                       		bne.s	loc_14B2C
0001868C                            
0001868C                            loc_14B1E:
0001868C D64B                       		add.w	a3,d3
0001868E 6100 0000                  		bsr.w	FindWall2
00018692 964B                       		sub.w	a3,d3
00018694 0641 0010                  		addi.w	#$10,d1
00018698 4E75                       		rts	
0001869A                            ; ===========================================================================
0001869A                            
0001869A                            loc_14B2C:
0001869A 2478 F796                  		movea.l	(v_collindex).w,a2
0001869E 1032 0000                  		move.b	(a2,d0.w),d0
000186A2 0240 00FF                  		andi.w	#$FF,d0
000186A6 67E4                       		beq.s	loc_14B1E
000186A8 45F9 0000 0000             		lea	(AngleMap).l,a2
000186AE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000186B2 E948                       		lsl.w	#4,d0
000186B4 3202                       		move.w	d2,d1
000186B6 0804 000C                  		btst	#$C,d4
000186BA 6700                       		beq.s	loc_14B5A
000186BC 4641                       		not.w	d1
000186BE 0614 0040                  		addi.b	#$40,(a4)
000186C2 4414                       		neg.b	(a4)
000186C4 0414 0040                  		subi.b	#$40,(a4)
000186C8                            
000186C8                            loc_14B5A:
000186C8 0804 000B                  		btst	#$B,d4
000186CC 6700                       		beq.s	loc_14B62
000186CE 4414                       		neg.b	(a4)
000186D0                            
000186D0                            loc_14B62:
000186D0 0241 000F                  		andi.w	#$F,d1
000186D4 D240                       		add.w	d0,d1
000186D6 45F9 0000 0000             		lea	(CollArray2).l,a2
000186DC 1032 1000                  		move.b	(a2,d1.w),d0
000186E0 4880                       		ext.w	d0
000186E2 BD44                       		eor.w	d6,d4
000186E4 0804 000B                  		btst	#$B,d4
000186E8 6700                       		beq.s	loc_14B7E
000186EA 4440                       		neg.w	d0
000186EC                            
000186EC                            loc_14B7E:
000186EC 4A40                       		tst.w	d0
000186EE 679C                       		beq.s	loc_14B1E
000186F0 6B00                       		bmi.s	loc_14B9A
000186F2 0C00 0010                  		cmpi.b	#$10,d0
000186F6 6700                       		beq.s	loc_14BA6
000186F8 3203                       		move.w	d3,d1
000186FA 0241 000F                  		andi.w	#$F,d1
000186FE D041                       		add.w	d1,d0
00018700 323C 000F                  		move.w	#$F,d1
00018704 9240                       		sub.w	d0,d1
00018706 4E75                       		rts	
00018708                            ; ===========================================================================
00018708                            
00018708                            loc_14B9A:
00018708 3203                       		move.w	d3,d1
0001870A 0241 000F                  		andi.w	#$F,d1
0001870E D041                       		add.w	d1,d0
00018710 6A00 FF7A                  		bpl.w	loc_14B1E
00018714                            
00018714                            loc_14BA6:
00018714 964B                       		sub.w	a3,d3
00018716 6100 0000                  		bsr.w	FindWall2
0001871A D64B                       		add.w	a3,d3
0001871C 0441 0010                  		subi.w	#$10,d1
00018720 4E75                       		rts	
00018722                            ; End of function FindWall
00018722                            
00018722                            
00018722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018722                            
00018722                            
00018722                            FindWall2:
00018722 6100 FDA6                  		bsr.w	FindNearestTile
00018726 3011                       		move.w	(a1),d0
00018728 3800                       		move.w	d0,d4
0001872A 0240 07FF                  		andi.w	#$7FF,d0
0001872E 6700                       		beq.s	loc_14BC6
00018730 0B04                       		btst	d5,d4
00018732 6600                       		bne.s	loc_14BD4
00018734                            
00018734                            loc_14BC6:
00018734 323C 000F                  		move.w	#$F,d1
00018738 3003                       		move.w	d3,d0
0001873A 0240 000F                  		andi.w	#$F,d0
0001873E 9240                       		sub.w	d0,d1
00018740 4E75                       		rts	
00018742                            ; ===========================================================================
00018742                            
00018742                            loc_14BD4:
00018742 2478 F796                  		movea.l	(v_collindex).w,a2
00018746 1032 0000                  		move.b	(a2,d0.w),d0
0001874A 0240 00FF                  		andi.w	#$FF,d0
0001874E 67E4                       		beq.s	loc_14BC6
00018750 45F9 0000 0000             		lea	(AngleMap).l,a2
00018756 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001875A E948                       		lsl.w	#4,d0
0001875C 3202                       		move.w	d2,d1
0001875E 0804 000C                  		btst	#$C,d4
00018762 6700                       		beq.s	loc_14C02
00018764 4641                       		not.w	d1
00018766 0614 0040                  		addi.b	#$40,(a4)
0001876A 4414                       		neg.b	(a4)
0001876C 0414 0040                  		subi.b	#$40,(a4)
00018770                            
00018770                            loc_14C02:
00018770 0804 000B                  		btst	#$B,d4
00018774 6700                       		beq.s	loc_14C0A
00018776 4414                       		neg.b	(a4)
00018778                            
00018778                            loc_14C0A:
00018778 0241 000F                  		andi.w	#$F,d1
0001877C D240                       		add.w	d0,d1
0001877E 45F9 0000 0000             		lea	(CollArray2).l,a2
00018784 1032 1000                  		move.b	(a2,d1.w),d0
00018788 4880                       		ext.w	d0
0001878A BD44                       		eor.w	d6,d4
0001878C 0804 000B                  		btst	#$B,d4
00018790 6700                       		beq.s	loc_14C26
00018792 4440                       		neg.w	d0
00018794                            
00018794                            loc_14C26:
00018794 4A40                       		tst.w	d0
00018796 679C                       		beq.s	loc_14BC6
00018798 6B00                       		bmi.s	loc_14C3C
0001879A 3203                       		move.w	d3,d1
0001879C 0241 000F                  		andi.w	#$F,d1
000187A0 D041                       		add.w	d1,d0
000187A2 323C 000F                  		move.w	#$F,d1
000187A6 9240                       		sub.w	d0,d1
000187A8 4E75                       		rts	
000187AA                            ; ===========================================================================
000187AA                            
000187AA                            loc_14C3C:
000187AA 3203                       		move.w	d3,d1
000187AC 0241 000F                  		andi.w	#$F,d1
000187B0 D041                       		add.w	d1,d0
000187B2 6A00 FF80                  		bpl.w	loc_14BC6
000187B6 4641                       		not.w	d1
000187B8 4E75                       		rts	
000187BA                            ; End of function FindWall2
000187BA                            ; End of function FindWall2
000187BA                            
000187BA                            ; ---------------------------------------------------------------------------
000187BA                            ; Unused floor/wall subroutine - logs something	to do with collision
000187BA                            ; ---------------------------------------------------------------------------
000187BA                            
000187BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187BA                            
000187BA                            
000187BA                            FloorLog_Unk:
000187BA 4E75                       		rts	
000187BC                            
000187BC 43F9 0000 0000             		lea	(CollArray1).l,a1
000187C2 45F9 0000 0000             		lea	(CollArray1).l,a2
000187C8 363C 00FF                  		move.w	#$FF,d3
000187CC                            
000187CC                            loc_14C5E:
000187CC 7A10                       		moveq	#$10,d5
000187CE 343C 000F                  		move.w	#$F,d2
000187D2                            
000187D2                            loc_14C64:
000187D2 7800                       		moveq	#0,d4
000187D4 323C 000F                  		move.w	#$F,d1
000187D8                            
000187D8                            loc_14C6A:
000187D8 3019                       		move.w	(a1)+,d0
000187DA EAA8                       		lsr.l	d5,d0
000187DC D944                       		addx.w	d4,d4
000187DE 51C9 FFF8                  		dbf	d1,loc_14C6A
000187E2                            
000187E2 34C4                       		move.w	d4,(a2)+
000187E4 92FC 0020                  		suba.w	#$20,a1
000187E8 5345                       		subq.w	#1,d5
000187EA 51CA FFE6                  		dbf	d2,loc_14C64
000187EE                            
000187EE D2FC 0020                  		adda.w	#$20,a1
000187F2 51CB FFD8                  		dbf	d3,loc_14C5E
000187F6                            
000187F6 43F9 0000 0000             		lea	(CollArray1).l,a1
000187FC 45F9 0000 0000             		lea	(CollArray2).l,a2
00018802 6100                       		bsr.s	FloorLog_Unk2
00018804 43F9 0000 0000             		lea	(CollArray1).l,a1
0001880A 45F9 0000 0000             		lea	(CollArray1).l,a2
00018810                            
00018810                            ; End of function FloorLog_Unk
00018810                            
00018810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018810                            
00018810                            
00018810                            FloorLog_Unk2:
00018810 363C 0FFF                  		move.w	#$FFF,d3
00018814                            
00018814                            loc_14CA6:
00018814 7400                       		moveq	#0,d2
00018816 323C 000F                  		move.w	#$F,d1
0001881A 3019                       		move.w	(a1)+,d0
0001881C 6700                       		beq.s	loc_14CD4
0001881E 6B00                       		bmi.s	loc_14CBE
00018820                            
00018820                            loc_14CB2:
00018820 E248                       		lsr.w	#1,d0
00018822 6400                       		bhs.s	loc_14CB8
00018824 5202                       		addq.b	#1,d2
00018826                            
00018826                            loc_14CB8:
00018826 51C9 FFF8                  		dbf	d1,loc_14CB2
0001882A                            
0001882A 6000                       		bra.s	loc_14CD6
0001882C                            ; ===========================================================================
0001882C                            
0001882C                            loc_14CBE:
0001882C 0C40 FFFF                  		cmpi.w	#-1,d0
00018830 6700                       		beq.s	loc_14CD0
00018832                            
00018832                            loc_14CC4:
00018832 E348                       		lsl.w	#1,d0
00018834 6400                       		bhs.s	loc_14CCA
00018836 5302                       		subq.b	#1,d2
00018838                            
00018838                            loc_14CCA:
00018838 51C9 FFF8                  		dbf	d1,loc_14CC4
0001883C                            
0001883C 6000                       		bra.s	loc_14CD6
0001883E                            ; ===========================================================================
0001883E                            
0001883E                            loc_14CD0:
0001883E 303C 0010                  		move.w	#$10,d0
00018842                            
00018842                            loc_14CD4:
00018842 3400                       		move.w	d0,d2
00018844                            
00018844                            loc_14CD6:
00018844 14C2                       		move.b	d2,(a2)+
00018846 51CB FFCC                  		dbf	d3,loc_14CA6
0001884A                            
0001884A 4E75                       		rts	
0001884C                            
0001884C                            ; End of function FloorLog_Unk2
0001884C                            
0001884C                            
0001884C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001884C                            
0001884C                            
0001884C                            Sonic_WalkSpeed:
0001884C 2628 0008                  		move.l	obX(a0),d3
00018850 2428 000C                  		move.l	obY(a0),d2
00018854 3228 0010                  		move.w	obVelX(a0),d1
00018858 48C1                       		ext.l	d1
0001885A E181                       		asl.l	#8,d1
0001885C D681                       		add.l	d1,d3
0001885E 3228 0012                  		move.w	obVelY(a0),d1
00018862 48C1                       		ext.l	d1
00018864 E181                       		asl.l	#8,d1
00018866 D481                       		add.l	d1,d2
00018868 4842                       		swap	d2
0001886A 4843                       		swap	d3
0001886C 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00018870 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018874 1200                       		move.b	d0,d1
00018876 0600 0020                  		addi.b	#$20,d0
0001887A 6A00                       		bpl.s	loc_14D1A
0001887C 1001                       		move.b	d1,d0
0001887E 6A00                       		bpl.s	loc_14D14
00018880 5300                       		subq.b	#1,d0
00018882                            
00018882                            loc_14D14:
00018882 0600 0020                  		addi.b	#$20,d0
00018886 6000                       		bra.s	loc_14D24
00018888                            ; ===========================================================================
00018888                            
00018888                            loc_14D1A:
00018888 1001                       		move.b	d1,d0
0001888A 6A00                       		bpl.s	loc_14D20
0001888C 5200                       		addq.b	#1,d0
0001888E                            
0001888E                            loc_14D20:
0001888E 0600 001F                  		addi.b	#$1F,d0
00018892                            
00018892                            loc_14D24:
00018892 0200 00C0                  		andi.b	#$C0,d0
00018896 6700 0000                  		beq.w	loc_14DF0
0001889A 0C00 0080                  		cmpi.b	#$80,d0
0001889E 6700 0000                  		beq.w	loc_14F7C
000188A2 0201 0038                  		andi.b	#$38,d1
000188A6 6600                       		bne.s	loc_14D3C
000188A8 5042                       		addq.w	#8,d2
000188AA                            
000188AA                            loc_14D3C:
000188AA 0C00 0040                  		cmpi.b	#$40,d0
000188AE 6700 0000                  		beq.w	loc_1504A
000188B2 6000 0000                  		bra.w	loc_14EBC
000188B6                            
000188B6                            ; End of function Sonic_WalkSpeed
000188B6                            
000188B6                            
000188B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188B6                            
000188B6                            
000188B6                            sub_14D48:
000188B6 11C0 F768                  		move.b	d0,(v_anglebuffer).w
000188BA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000188BE 0600 0020                  		addi.b	#$20,d0
000188C2 0200 00C0                  		andi.b	#$C0,d0
000188C6 0C00 0040                  		cmpi.b	#$40,d0
000188CA 6700 0000                  		beq.w	loc_14FD6
000188CE 0C00 0080                  		cmpi.b	#$80,d0
000188D2 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000188D6 0C00 00C0                  		cmpi.b	#$C0,d0
000188DA 6700 0000                  		beq.w	sub_14E50
000188DE                            
000188DE                            ; End of function sub_14D48
000188DE                            
000188DE                            ; ---------------------------------------------------------------------------
000188DE                            ; Subroutine to	make Sonic land	on the floor after jumping
000188DE                            ; ---------------------------------------------------------------------------
000188DE                            
000188DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188DE                            
000188DE                            
000188DE                            Sonic_HitFloor:
000188DE 3428 000C                  		move.w	obY(a0),d2
000188E2 3628 0008                  		move.w	obX(a0),d3
000188E6 7000                       		moveq	#0,d0
000188E8 1028 0016                  		move.b	obHeight(a0),d0
000188EC 4880                       		ext.w	d0
000188EE D440                       		add.w	d0,d2
000188F0 1028 0017                  		move.b	obWidth(a0),d0
000188F4 4880                       		ext.w	d0
000188F6 D640                       		add.w	d0,d3
000188F8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000188FC 367C 0010                  		movea.w	#$10,a3
00018900 3C3C 0000                  		move.w	#0,d6
00018904 7A0D                       		moveq	#$D,d5
00018906 6100 FC34                  		bsr.w	FindFloor
0001890A 3F01                       		move.w	d1,-(sp)
0001890C 3428 000C                  		move.w	obY(a0),d2
00018910 3628 0008                  		move.w	obX(a0),d3
00018914 7000                       		moveq	#0,d0
00018916 1028 0016                  		move.b	obHeight(a0),d0
0001891A 4880                       		ext.w	d0
0001891C D440                       		add.w	d0,d2
0001891E 1028 0017                  		move.b	obWidth(a0),d0
00018922 4880                       		ext.w	d0
00018924 9640                       		sub.w	d0,d3
00018926 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001892A 367C 0010                  		movea.w	#$10,a3
0001892E 3C3C 0000                  		move.w	#0,d6
00018932 7A0D                       		moveq	#$D,d5
00018934 6100 FC06                  		bsr.w	FindFloor
00018938 301F                       		move.w	(sp)+,d0
0001893A 143C 0000                  		move.b	#0,d2
0001893E                            
0001893E                            loc_14DD0:
0001893E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00018942 B240                       		cmp.w	d0,d1
00018944 6F00                       		ble.s	loc_14DDE
00018946 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001894A C141                       		exg	d0,d1
0001894C                            
0001894C                            loc_14DDE:
0001894C 0803 0000                  		btst	#0,d3
00018950 6700                       		beq.s	locret_14DE6
00018952 1602                       		move.b	d2,d3
00018954                            
00018954                            locret_14DE6:
00018954 4E75                       		rts	
00018956                            
00018956                            ; End of function Sonic_HitFloor
00018956                            
00018956                            ; ===========================================================================
00018956 3428 000C                  		move.w	obY(a0),d2
0001895A 3628 0008                  		move.w	obX(a0),d3
0001895E                            
0001895E                            loc_14DF0:
0001895E 0642 000A                  		addi.w	#$A,d2
00018962 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018966 367C 0010                  		movea.w	#$10,a3
0001896A 3C3C 0000                  		move.w	#0,d6
0001896E 7A0E                       		moveq	#$E,d5
00018970 6100 FBCA                  		bsr.w	FindFloor
00018974 143C 0000                  		move.b	#0,d2
00018978                            
00018978                            loc_14E0A:
00018978 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001897C 0803 0000                  		btst	#0,d3
00018980 6700                       		beq.s	locret_14E16
00018982 1602                       		move.b	d2,d3
00018984                            
00018984                            locret_14E16:
00018984 4E75                       		rts	
00018986                            
00018986                            		include	"_incObj\sub ObjFloorDist.asm"
00018986                            ; ---------------------------------------------------------------------------
00018986                            ; Subroutine to find the distance of an object to the floor
00018986                            
00018986                            ; input:
00018986                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00018986                            
00018986                            ; output:
00018986                            ;	d1 = distance to the floor
00018986                            ;	d3 = floor angle
00018986                            ;	a1 = address within 256x256 mappings where object is standing
00018986                            ;	     (refers to a 16x16 tile number)
00018986                            ;	(a4) = floor angle
00018986                            ; ---------------------------------------------------------------------------
00018986                            
00018986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018986                            
00018986                            
00018986                            ObjFloorDist:
00018986 3628 0008                  		move.w	obX(a0),d3
0001898A                            
0001898A                            
0001898A                            ObjFloorDist2:
0001898A 3428 000C                  		move.w	obY(a0),d2
0001898E 7000                       		moveq	#0,d0
00018990 1028 0016                  		move.b	obHeight(a0),d0
00018994 4880                       		ext.w	d0
00018996 D440                       		add.w	d0,d2
00018998 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001899C 18BC 0000                  		move.b	#0,(a4)
000189A0 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
000189A4 3C3C 0000                  		move.w	#0,d6
000189A8 7A0D                       		moveq	#$D,d5		; bit to test for solidness
000189AA 6100 FB90                  		bsr.w	FindFloor
000189AE 1638 F768                  		move.b	(v_anglebuffer).w,d3
000189B2 0803 0000                  		btst	#0,d3
000189B6 6700                       		beq.s	locret_14E4E
000189B8 163C 0000                  		move.b	#0,d3
000189BC                            
000189BC                            	locret_14E4E:
000189BC 4E75                       		rts	
000189BE                            
000189BE                            ; End of function ObjFloorDist2
000189BE                            ; End of function ObjFloorDist2
000189BE                            
000189BE                            
000189BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189BE                            
000189BE                            
000189BE                            sub_14E50:
000189BE 3428 000C                  		move.w	obY(a0),d2
000189C2 3628 0008                  		move.w	obX(a0),d3
000189C6 7000                       		moveq	#0,d0
000189C8 1028 0017                  		move.b	obWidth(a0),d0
000189CC 4880                       		ext.w	d0
000189CE 9440                       		sub.w	d0,d2
000189D0 1028 0016                  		move.b	obHeight(a0),d0
000189D4 4880                       		ext.w	d0
000189D6 D640                       		add.w	d0,d3
000189D8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000189DC 367C 0010                  		movea.w	#$10,a3
000189E0 3C3C 0000                  		move.w	#0,d6
000189E4 7A0E                       		moveq	#$E,d5
000189E6 6100 FC92                  		bsr.w	FindWall
000189EA 3F01                       		move.w	d1,-(sp)
000189EC 3428 000C                  		move.w	obY(a0),d2
000189F0 3628 0008                  		move.w	obX(a0),d3
000189F4 7000                       		moveq	#0,d0
000189F6 1028 0017                  		move.b	obWidth(a0),d0
000189FA 4880                       		ext.w	d0
000189FC D440                       		add.w	d0,d2
000189FE 1028 0016                  		move.b	obHeight(a0),d0
00018A02 4880                       		ext.w	d0
00018A04 D640                       		add.w	d0,d3
00018A06 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018A0A 367C 0010                  		movea.w	#$10,a3
00018A0E 3C3C 0000                  		move.w	#0,d6
00018A12 7A0E                       		moveq	#$E,d5
00018A14 6100 FC64                  		bsr.w	FindWall
00018A18 301F                       		move.w	(sp)+,d0
00018A1A 143C 00C0                  		move.b	#-$40,d2
00018A1E 6000 FF1E                  		bra.w	loc_14DD0
00018A22                            
00018A22                            ; End of function sub_14E50
00018A22                            
00018A22                            
00018A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A22                            
00018A22                            
00018A22                            sub_14EB4:
00018A22 3428 000C                  		move.w	obY(a0),d2
00018A26 3628 0008                  		move.w	obX(a0),d3
00018A2A                            
00018A2A                            loc_14EBC:
00018A2A 0643 000A                  		addi.w	#$A,d3
00018A2E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A32 367C 0010                  		movea.w	#$10,a3
00018A36 3C3C 0000                  		move.w	#0,d6
00018A3A 7A0E                       		moveq	#$E,d5
00018A3C 6100 FC3C                  		bsr.w	FindWall
00018A40 143C 00C0                  		move.b	#-$40,d2
00018A44 6000 FF32                  		bra.w	loc_14E0A
00018A48                            
00018A48                            ; End of function sub_14EB4
00018A48                            
00018A48                            ; ---------------------------------------------------------------------------
00018A48                            ; Subroutine to	detect when an object hits a wall to its right
00018A48                            ; ---------------------------------------------------------------------------
00018A48                            
00018A48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A48                            
00018A48                            
00018A48                            ObjHitWallRight:
00018A48 D668 0008                  		add.w	obX(a0),d3
00018A4C 3428 000C                  		move.w	obY(a0),d2
00018A50 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A54 18BC 0000                  		move.b	#0,(a4)
00018A58 367C 0010                  		movea.w	#$10,a3
00018A5C 3C3C 0000                  		move.w	#0,d6
00018A60 7A0E                       		moveq	#$E,d5
00018A62 6100 FC16                  		bsr.w	FindWall
00018A66 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018A6A 0803 0000                  		btst	#0,d3
00018A6E 6700                       		beq.s	locret_14F06
00018A70 163C 00C0                  		move.b	#-$40,d3
00018A74                            
00018A74                            locret_14F06:
00018A74 4E75                       		rts	
00018A76                            
00018A76                            ; End of function ObjHitWallRight
00018A76                            
00018A76                            ; ---------------------------------------------------------------------------
00018A76                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018A76                            ; touches them
00018A76                            ; ---------------------------------------------------------------------------
00018A76                            
00018A76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A76                            
00018A76                            
00018A76                            Sonic_DontRunOnWalls:
00018A76 3428 000C                  		move.w	obY(a0),d2
00018A7A 3628 0008                  		move.w	obX(a0),d3
00018A7E 7000                       		moveq	#0,d0
00018A80 1028 0016                  		move.b	obHeight(a0),d0
00018A84 4880                       		ext.w	d0
00018A86 9440                       		sub.w	d0,d2
00018A88 0A42 000F                  		eori.w	#$F,d2
00018A8C 1028 0017                  		move.b	obWidth(a0),d0
00018A90 4880                       		ext.w	d0
00018A92 D640                       		add.w	d0,d3
00018A94 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A98 367C FFF0                  		movea.w	#-$10,a3
00018A9C 3C3C 1000                  		move.w	#$1000,d6
00018AA0 7A0E                       		moveq	#$E,d5
00018AA2 6100 FA98                  		bsr.w	FindFloor
00018AA6 3F01                       		move.w	d1,-(sp)
00018AA8 3428 000C                  		move.w	obY(a0),d2
00018AAC 3628 0008                  		move.w	obX(a0),d3
00018AB0 7000                       		moveq	#0,d0
00018AB2 1028 0016                  		move.b	obHeight(a0),d0
00018AB6 4880                       		ext.w	d0
00018AB8 9440                       		sub.w	d0,d2
00018ABA 0A42 000F                  		eori.w	#$F,d2
00018ABE 1028 0017                  		move.b	obWidth(a0),d0
00018AC2 4880                       		ext.w	d0
00018AC4 9640                       		sub.w	d0,d3
00018AC6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018ACA 367C FFF0                  		movea.w	#-$10,a3
00018ACE 3C3C 1000                  		move.w	#$1000,d6
00018AD2 7A0E                       		moveq	#$E,d5
00018AD4 6100 FA66                  		bsr.w	FindFloor
00018AD8 301F                       		move.w	(sp)+,d0
00018ADA 143C 0080                  		move.b	#-$80,d2
00018ADE 6000 FE5E                  		bra.w	loc_14DD0
00018AE2                            ; End of function Sonic_DontRunOnWalls
00018AE2                            
00018AE2                            ; ===========================================================================
00018AE2 3428 000C                  		move.w	obY(a0),d2
00018AE6 3628 0008                  		move.w	obX(a0),d3
00018AEA                            
00018AEA                            loc_14F7C:
00018AEA 0442 000A                  		subi.w	#$A,d2
00018AEE 0A42 000F                  		eori.w	#$F,d2
00018AF2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018AF6 367C FFF0                  		movea.w	#-$10,a3
00018AFA 3C3C 1000                  		move.w	#$1000,d6
00018AFE 7A0E                       		moveq	#$E,d5
00018B00 6100 FA3A                  		bsr.w	FindFloor
00018B04 143C 0080                  		move.b	#-$80,d2
00018B08 6000 FE6E                  		bra.w	loc_14E0A
00018B0C                            
00018B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B0C                            
00018B0C                            
00018B0C                            ObjHitCeiling:
00018B0C 3428 000C                  		move.w	obY(a0),d2
00018B10 3628 0008                  		move.w	obX(a0),d3
00018B14 7000                       		moveq	#0,d0
00018B16 1028 0016                  		move.b	obHeight(a0),d0
00018B1A 4880                       		ext.w	d0
00018B1C 9440                       		sub.w	d0,d2
00018B1E 0A42 000F                  		eori.w	#$F,d2
00018B22 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B26 367C FFF0                  		movea.w	#-$10,a3
00018B2A 3C3C 1000                  		move.w	#$1000,d6
00018B2E 7A0E                       		moveq	#$E,d5
00018B30 6100 FA0A                  		bsr.w	FindFloor
00018B34 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018B38 0803 0000                  		btst	#0,d3
00018B3C 6700                       		beq.s	locret_14FD4
00018B3E 163C 0080                  		move.b	#-$80,d3
00018B42                            
00018B42                            locret_14FD4:
00018B42 4E75                       		rts	
00018B44                            ; End of function ObjHitCeiling
00018B44                            
00018B44                            ; ===========================================================================
00018B44                            
00018B44                            loc_14FD6:
00018B44 3428 000C                  		move.w	obY(a0),d2
00018B48 3628 0008                  		move.w	obX(a0),d3
00018B4C 7000                       		moveq	#0,d0
00018B4E 1028 0017                  		move.b	obWidth(a0),d0
00018B52 4880                       		ext.w	d0
00018B54 9440                       		sub.w	d0,d2
00018B56 1028 0016                  		move.b	obHeight(a0),d0
00018B5A 4880                       		ext.w	d0
00018B5C 9640                       		sub.w	d0,d3
00018B5E 0A43 000F                  		eori.w	#$F,d3
00018B62 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B66 367C FFF0                  		movea.w	#-$10,a3
00018B6A 3C3C 0800                  		move.w	#$800,d6
00018B6E 7A0E                       		moveq	#$E,d5
00018B70 6100 FB08                  		bsr.w	FindWall
00018B74 3F01                       		move.w	d1,-(sp)
00018B76 3428 000C                  		move.w	obY(a0),d2
00018B7A 3628 0008                  		move.w	obX(a0),d3
00018B7E 7000                       		moveq	#0,d0
00018B80 1028 0017                  		move.b	obWidth(a0),d0
00018B84 4880                       		ext.w	d0
00018B86 D440                       		add.w	d0,d2
00018B88 1028 0016                  		move.b	obHeight(a0),d0
00018B8C 4880                       		ext.w	d0
00018B8E 9640                       		sub.w	d0,d3
00018B90 0A43 000F                  		eori.w	#$F,d3
00018B94 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018B98 367C FFF0                  		movea.w	#-$10,a3
00018B9C 3C3C 0800                  		move.w	#$800,d6
00018BA0 7A0E                       		moveq	#$E,d5
00018BA2 6100 FAD6                  		bsr.w	FindWall
00018BA6 301F                       		move.w	(sp)+,d0
00018BA8 143C 0040                  		move.b	#$40,d2
00018BAC 6000 FD90                  		bra.w	loc_14DD0
00018BB0                            
00018BB0                            ; ---------------------------------------------------------------------------
00018BB0                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018BB0                            ; ---------------------------------------------------------------------------
00018BB0                            
00018BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BB0                            
00018BB0                            
00018BB0                            Sonic_HitWall:
00018BB0 3428 000C                  		move.w	obY(a0),d2
00018BB4 3628 0008                  		move.w	obX(a0),d3
00018BB8                            
00018BB8                            loc_1504A:
00018BB8 0443 000A                  		subi.w	#$A,d3
00018BBC 0A43 000F                  		eori.w	#$F,d3
00018BC0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BC4 367C FFF0                  		movea.w	#-$10,a3
00018BC8 3C3C 0800                  		move.w	#$800,d6
00018BCC 7A0E                       		moveq	#$E,d5
00018BCE 6100 FAAA                  		bsr.w	FindWall
00018BD2 143C 0040                  		move.b	#$40,d2
00018BD6 6000 FDA0                  		bra.w	loc_14E0A
00018BDA                            ; End of function Sonic_HitWall
00018BDA                            
00018BDA                            ; ---------------------------------------------------------------------------
00018BDA                            ; Subroutine to	detect when an object hits a wall to its left
00018BDA                            ; ---------------------------------------------------------------------------
00018BDA                            
00018BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BDA                            
00018BDA                            
00018BDA                            ObjHitWallLeft:
00018BDA D668 0008                  		add.w	obX(a0),d3
00018BDE 3428 000C                  		move.w	obY(a0),d2
00018BE2                            		; Engine bug: colliding with left walls is erratic with this function.
00018BE2                            		; The cause is this: a missing instruction to flip collision on the found
00018BE2                            		; 16x16 block; this one:
00018BE2                            		;eori.w	#$F,d3
00018BE2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BE6 18BC 0000                  		move.b	#0,(a4)
00018BEA 367C FFF0                  		movea.w	#-$10,a3
00018BEE 3C3C 0800                  		move.w	#$800,d6
00018BF2 7A0E                       		moveq	#$E,d5
00018BF4 6100 FA84                  		bsr.w	FindWall
00018BF8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018BFC 0803 0000                  		btst	#0,d3
00018C00 6700                       		beq.s	locret_15098
00018C02 163C 0040                  		move.b	#$40,d3
00018C06                            
00018C06                            locret_15098:
00018C06 4E75                       		rts	
00018C08                            ; End of function ObjHitWallLeft
00018C08                            
00018C08                            ; ===========================================================================
00018C08                            
00018C08                            		include	"_incObj\66 Rotating Junction.asm"
00018C08                            ; ---------------------------------------------------------------------------
00018C08                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018C08                            ; ---------------------------------------------------------------------------
00018C08                            
00018C08                            Junction:
00018C08 7000                       		moveq	#0,d0
00018C0A 1028 0024                  		move.b	obRoutine(a0),d0
00018C0E 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018C12 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018C16                            ; ===========================================================================
00018C16 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018C18 0000                       		dc.w Jun_Action-Jun_Index
00018C1A 0000                       		dc.w Jun_Display-Jun_Index
00018C1C 0000                       		dc.w Jun_Release-Jun_Index
00018C1E                            
00018C1E =00000034                  jun_frame:	equ $34		; current frame
00018C1E =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018C1E =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018C1E                            ; ===========================================================================
00018C1E                            
00018C1E                            Jun_Main:	; Routine 0
00018C1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018C22 323C 0001                  		move.w	#1,d1
00018C26 2248                       		movea.l	a0,a1
00018C28 6000                       		bra.s	@makeitem
00018C2A                            ; ===========================================================================
00018C2A                            
00018C2A                            	@repeat:
00018C2A 4EB9 0000 FD42             		jsr	FindFreeObj
00018C30 6600                       		bne.s	@fail
00018C32 12BC 0066                  		move.b	#id_Junction,0(a1)
00018C36 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018C3A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018C40 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018C46 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018C4C 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00018C52                            
00018C52                            @makeitem:
00018C52 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018C5A 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00018C60 0029 0004 0001             		ori.b	#4,obRender(a1)
00018C66 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018C6C                            
00018C6C                            	@fail:
00018C6C 51C9 FFBC                  		dbf	d1,@repeat
00018C70                            
00018C70 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018C76 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018C7C 317C 003C 0030             		move.w	#$3C,$30(a0)
00018C82 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018C88 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018C8E                            
00018C8E                            Jun_Action:	; Routine 2
00018C8E 6100 0000                  		bsr.w	Jun_ChkSwitch
00018C92 4A28 0001                  		tst.b	obRender(a0)
00018C96 6A00 0000                  		bpl.w	Jun_Display
00018C9A 323C 0030                  		move.w	#$30,d1
00018C9E 3401                       		move.w	d1,d2
00018CA0 3602                       		move.w	d2,d3
00018CA2 5243                       		addq.w	#1,d3
00018CA4 3828 0008                  		move.w	obX(a0),d4
00018CA8 6100 905E                  		bsr.w	SolidObject
00018CAC 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018CB2 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018CB6                            
00018CB6 43F8 D000                  		lea	(v_player).w,a1
00018CBA 720E                       		moveq	#$E,d1
00018CBC 3029 0008                  		move.w	obX(a1),d0
00018CC0 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018CC4 6500                       		bcs.s	@isleft		; if yes, branch
00018CC6 7207                       		moveq	#7,d1		
00018CC8                            
00018CC8                            	@isleft:
00018CC8 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018CCC 6600                       		bne.s	Jun_Display	; if not, branch
00018CCE                            
00018CCE 1141 0032                  		move.b	d1,$32(a0)
00018CD2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018CD6 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018CDC 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018CE2 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018CE8 337C 0000 0010             		move.w	#0,obVelX(a1)
00018CEE 337C 0000 0012             		move.w	#0,obVelY(a1)
00018CF4 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018CFA 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018D00 08E9 0001 0022             		bset	#1,obStatus(a1)
00018D06 3429 0008                  		move.w	obX(a1),d2
00018D0A 3629 000C                  		move.w	obY(a1),d3
00018D0E 6100 0000                  		bsr.w	Jun_ChgPos
00018D12 D569 0008                  		add.w	d2,obX(a1)
00018D16 D769 000C                  		add.w	d3,obY(a1)
00018D1A E0E9 0008                  		asr	obX(a1)
00018D1E E0E9 000C                  		asr	obY(a1)
00018D22                            
00018D22                            Jun_Display:	; Routine 4
00018D22 6000 8B4C                  		bra.w	RememberState
00018D26                            ; ===========================================================================
00018D26                            
00018D26                            Jun_Release:	; Routine 6
00018D26 1028 001A                  		move.b	obFrame(a0),d0
00018D2A 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018D2E 6700                       		beq.s	@release	; if yes, branch
00018D30 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018D34 6600                       		bne.s	@dontrelease	; if not, branch
00018D36                            
00018D36                            	@release:
00018D36 B028 0032                  		cmp.b	$32(a0),d0
00018D3A 6700                       		beq.s	@dontrelease
00018D3C 43F8 D000                  		lea	(v_player).w,a1
00018D40 337C 0000 0010             		move.w	#0,obVelX(a1)
00018D46 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018D4C 0C00 0004                  		cmpi.b	#4,d0
00018D50 6700                       		beq.s	@isdown
00018D52 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018D58 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018D5E                            
00018D5E                            	@isdown:
00018D5E 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018D62 5928 0024                  		subq.b	#4,obRoutine(a0)
00018D66                            
00018D66                            	@dontrelease:
00018D66 6100                       		bsr.s	Jun_ChkSwitch
00018D68 6100                       		bsr.s	Jun_ChgPos
00018D6A 6000 8B04                  		bra.w	RememberState
00018D6E                            
00018D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018D6E                            
00018D6E                            
00018D6E                            Jun_ChkSwitch:
00018D6E 45F8 F7E0                  		lea	(f_switch).w,a2
00018D72 7000                       		moveq	#0,d0
00018D74 1028 0038                  		move.b	jun_switch(a0),d0
00018D78 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018D7E 6700                       		beq.s	@unpressed	; if not, branch
00018D80                            
00018D80 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018D84 6600                       		bne.s	@animate	; if yes, branch
00018D86 4428 0034                  		neg.b	jun_frame(a0)
00018D8A 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018D90 6000                       		bra.s	@animate
00018D92                            ; ===========================================================================
00018D92                            
00018D92                            @unpressed:
00018D92 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018D96                            
00018D96                            @animate:
00018D96 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018D9A 6A00                       		bpl.s	@nochange	; if time remains, branch
00018D9C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018DA2 1228 0034                  		move.b	jun_frame(a0),d1
00018DA6 1028 001A                  		move.b	obFrame(a0),d0
00018DAA D001                       		add.b	d1,d0
00018DAC 0200 000F                  		andi.b	#$F,d0
00018DB0 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018DB4                            
00018DB4                            	@nochange:
00018DB4 4E75                       		rts	
00018DB6                            ; End of function Jun_ChkSwitch
00018DB6                            
00018DB6                            
00018DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DB6                            
00018DB6                            
00018DB6                            Jun_ChgPos:
00018DB6 43F8 D000                  		lea	(v_player).w,a1
00018DBA 7000                       		moveq	#0,d0
00018DBC 1028 001A                  		move.b	obFrame(a0),d0
00018DC0 D040                       		add.w	d0,d0
00018DC2 45FB 0000                  		lea	@data(pc,d0.w),a2
00018DC6 101A                       		move.b	(a2)+,d0
00018DC8 4880                       		ext.w	d0
00018DCA D068 0008                  		add.w	obX(a0),d0
00018DCE 3340 0008                  		move.w	d0,obX(a1)
00018DD2 101A                       		move.b	(a2)+,d0
00018DD4 4880                       		ext.w	d0
00018DD6 D068 000C                  		add.w	obY(a0),d0
00018DDA 3340 000C                  		move.w	d0,obY(a1)
00018DDE 4E75                       		rts	
00018DE0                            
00018DE0                            
00018DE0 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018DE4 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018DE8 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018DEC 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018DF0 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018DF4 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018DF8 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018DFC E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018DFC E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018E00                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018E00                            ; ---------------------------------------------------------------------------
00018E00                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018E00                            ; ---------------------------------------------------------------------------
00018E00                            Map_Jun_internal:
00018E00 0000                       		dc.w @gap0-Map_Jun_internal
00018E02 0000                       		dc.w @gap1-Map_Jun_internal
00018E04 0000                       		dc.w @gap2-Map_Jun_internal
00018E06 0000                       		dc.w @gap3-Map_Jun_internal
00018E08 0000                       		dc.w @gap4-Map_Jun_internal
00018E0A 0000                       		dc.w @gap5-Map_Jun_internal
00018E0C 0000                       		dc.w @gap6-Map_Jun_internal
00018E0E 0000                       		dc.w @gap7-Map_Jun_internal
00018E10 0000                       		dc.w @gap8-Map_Jun_internal
00018E12 0000                       		dc.w @gap9-Map_Jun_internal
00018E14 0000                       		dc.w @gapA-Map_Jun_internal
00018E16 0000                       		dc.w @gapB-Map_Jun_internal
00018E18 0000                       		dc.w @gapC-Map_Jun_internal
00018E1A 0000                       		dc.w @gapD-Map_Jun_internal
00018E1C 0000                       		dc.w @gapE-Map_Jun_internal
00018E1E 0000                       		dc.w @gapF-Map_Jun_internal
00018E20 0000                       		dc.w @circle-Map_Jun_internal
00018E22 06                         @gap0:		dc.b 6
00018E23 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018E28 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018E2D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018E32 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018E37 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018E3C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018E41 06                         @gap1:		dc.b 6
00018E42 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018E47 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018E4C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018E51 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018E56 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018E5B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018E60 06                         @gap2:		dc.b 6
00018E61 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018E66 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018E6B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018E70 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018E75 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018E7A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018E7F 06                         @gap3:		dc.b 6
00018E80 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018E85 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018E8A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018E8F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018E94 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018E99 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018E9E 06                         @gap4:		dc.b 6
00018E9F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018EA4 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018EA9 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018EAE 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018EB3 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018EB8 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018EBD 06                         @gap5:		dc.b 6
00018EBE 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018EC3 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018EC8 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018ECD 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018ED2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018ED7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018EDC 06                         @gap6:		dc.b 6
00018EDD 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018EE2 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018EE7 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018EEC 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018EF1 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018EF6 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018EFB 06                         @gap7:		dc.b 6
00018EFC 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018F01 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018F06 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018F0B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018F10 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018F15 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018F1A 06                         @gap8:		dc.b 6
00018F1B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018F20 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018F25 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018F2A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018F2F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018F34 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018F39 06                         @gap9:		dc.b 6
00018F3A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018F3F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018F44 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018F49 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018F4E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018F53 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018F58 06                         @gapA:		dc.b 6
00018F59 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018F5E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018F63 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018F68 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018F6D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018F72 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018F77 06                         @gapB:		dc.b 6
00018F78 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00018F7D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018F82 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018F87 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018F8C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018F91 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018F96 06                         @gapC:		dc.b 6
00018F97 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018F9C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018FA1 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018FA6 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018FAB E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018FB0 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018FB5 06                         @gapD:		dc.b 6
00018FB6 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018FBB D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018FC0 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018FC5 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018FCA E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018FCF E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018FD4 06                         @gapE:		dc.b 6
00018FD5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018FDA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018FDF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018FE4 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018FE9 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018FEE E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018FF3 06                         @gapF:		dc.b 6
00018FF4 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018FF9 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018FFE DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00019003 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00019008 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001900D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00019012 0C                         @circle:	dc.b $C
00019013 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00019018 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001901D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00019022 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00019027 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001902C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00019031 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00019036 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001903B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00019040 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00019045 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001904A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00019050 00                         		even
00019050 00                         		even
00019050                            		include	"_incObj\67 Running Disc.asm"
00019050                            ; ---------------------------------------------------------------------------
00019050                            ; Object 67 - disc that	you run	around (SBZ)
00019050                            ; ---------------------------------------------------------------------------
00019050                            
00019050                            RunningDisc:
00019050 7000                       		moveq	#0,d0
00019052 1028 0024                  		move.b	obRoutine(a0),d0
00019056 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
0001905A 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
0001905E                            ; ===========================================================================
0001905E 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00019060 0000                       		dc.w Disc_Action-Disc_Index
00019062                            
00019062 =00000032                  disc_origX:	equ $32		; original x-axis position
00019062 =00000030                  disc_origY:	equ $30		; original y-axis position
00019062                            ; ===========================================================================
00019062                            
00019062                            Disc_Main:	; Routine 0
00019062 5428 0024                  		addq.b	#2,obRoutine(a0)
00019066 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
0001906E 317C C344 0002             		move.w	#$C344,obGfx(a0)
00019074 117C 0004 0001             		move.b	#4,obRender(a0)
0001907A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019080 117C 0008 0014             		move.b	#8,obActWid(a0)
00019086 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001908C 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00019092 117C 0018 0034             		move.b	#$18,$34(a0)
00019098 117C 0048 0038             		move.b	#$48,$38(a0)
0001909E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000190A2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000190A6 6700                       		beq.s	@typeis0	; branch if 0
000190A8 117C 0010 0034             		move.b	#$10,$34(a0)
000190AE 117C 0038 0038             		move.b	#$38,$38(a0)
000190B4                            
000190B4                            	@typeis0:
000190B4 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000190B8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000190BC 4881                       		ext.w	d1
000190BE E741                       		asl.w	#3,d1
000190C0 3141 0036                  		move.w	d1,$36(a0)
000190C4 1028 0022                  		move.b	obStatus(a0),d0
000190C8 E418                       		ror.b	#2,d0
000190CA 0200 00C0                  		andi.b	#$C0,d0
000190CE 1140 0026                  		move.b	d0,obAngle(a0)
000190D2                            
000190D2                            Disc_Action:	; Routine 2
000190D2 6100 0000                  		bsr.w	Disc_MoveSonic
000190D6 6100 0000                  		bsr.w	Disc_MoveSpot
000190DA 6000 0000                  		bra.w	Disc_ChkDel
000190DE                            ; ===========================================================================
000190DE                            
000190DE                            Disc_MoveSonic:
000190DE 7400                       		moveq	#0,d2
000190E0 1428 0038                  		move.b	$38(a0),d2
000190E4 3602                       		move.w	d2,d3
000190E6 D643                       		add.w	d3,d3
000190E8 43F8 D000                  		lea	(v_player).w,a1
000190EC 3029 0008                  		move.w	obX(a1),d0
000190F0 9068 0032                  		sub.w	disc_origX(a0),d0
000190F4 D042                       		add.w	d2,d0
000190F6 B043                       		cmp.w	d3,d0
000190F8 6400                       		bcc.s	loc_155A8
000190FA 3229 000C                  		move.w	obY(a1),d1
000190FE 9268 0030                  		sub.w	disc_origY(a0),d1
00019102 D242                       		add.w	d2,d1
00019104 B243                       		cmp.w	d3,d1
00019106 6400                       		bcc.s	loc_155A8
00019108 0829 0001 0022             		btst	#1,obStatus(a1)
0001910E 6700                       		beq.s	loc_155B8
00019110 4228 003A                  		clr.b	$3A(a0)
00019114 4E75                       		rts	
00019116                            ; ===========================================================================
00019116                            
00019116                            loc_155A8:
00019116 4A28 003A                  		tst.b	$3A(a0)
0001911A 6700                       		beq.s	locret_155B6
0001911C 4229 0038                  		clr.b	$38(a1)
00019120 4228 003A                  		clr.b	$3A(a0)
00019124                            
00019124                            locret_155B6:
00019124 4E75                       		rts	
00019126                            ; ===========================================================================
00019126                            
00019126                            loc_155B8:
00019126 4A28 003A                  		tst.b	$3A(a0)
0001912A 6600                       		bne.s	loc_155E2
0001912C 117C 0001 003A             		move.b	#1,$3A(a0)
00019132 0829 0002 0022             		btst	#2,obStatus(a1)
00019138 6600                       		bne.s	loc_155D0
0001913A 4229 001C                  		clr.b	obAnim(a1)
0001913E                            
0001913E                            loc_155D0:
0001913E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019144 137C 0001 001D             		move.b	#1,obNextAni(a1)
0001914A 137C 0001 0038             		move.b	#1,$38(a1)
00019150                            
00019150                            loc_155E2:
00019150 3029 0020                  		move.w	obInertia(a1),d0
00019154 4A68 0036                  		tst.w	$36(a0)
00019158 6A00                       		bpl.s	loc_15608
0001915A 0C40 FC00                  		cmpi.w	#-$400,d0
0001915E 6F00                       		ble.s	loc_155FA
00019160 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00019166 4E75                       		rts	
00019168                            ; ===========================================================================
00019168                            
00019168                            loc_155FA:
00019168 0C40 F100                  		cmpi.w	#-$F00,d0
0001916C 6C00                       		bge.s	locret_15606
0001916E 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00019174                            
00019174                            locret_15606:
00019174 4E75                       		rts	
00019176                            ; ===========================================================================
00019176                            
00019176                            loc_15608:
00019176 0C40 0400                  		cmpi.w	#$400,d0
0001917A 6C00                       		bge.s	loc_15616
0001917C 337C 0400 0020             		move.w	#$400,obInertia(a1)
00019182 4E75                       		rts	
00019184                            ; ===========================================================================
00019184                            
00019184                            loc_15616:
00019184 0C40 0F00                  		cmpi.w	#$F00,d0
00019188 6F00                       		ble.s	locret_15622
0001918A 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00019190                            
00019190                            locret_15622:
00019190 4E75                       		rts	
00019192                            ; ===========================================================================
00019192                            
00019192                            Disc_MoveSpot:
00019192 3028 0036                  		move.w	$36(a0),d0
00019196 D168 0026                  		add.w	d0,obAngle(a0)
0001919A 1028 0026                  		move.b	obAngle(a0),d0
0001919E 4EB9 0000 3CCA             		jsr	(CalcSine).l
000191A4 3428 0030                  		move.w	disc_origY(a0),d2
000191A8 3628 0032                  		move.w	disc_origX(a0),d3
000191AC 7800                       		moveq	#0,d4
000191AE 1828 0034                  		move.b	$34(a0),d4
000191B2 E14C                       		lsl.w	#8,d4
000191B4 2A04                       		move.l	d4,d5
000191B6 C9C0                       		muls.w	d0,d4
000191B8 4844                       		swap	d4
000191BA CBC1                       		muls.w	d1,d5
000191BC 4845                       		swap	d5
000191BE D842                       		add.w	d2,d4
000191C0 DA43                       		add.w	d3,d5
000191C2 3144 000C                  		move.w	d4,obY(a0)
000191C6 3145 0008                  		move.w	d5,obX(a0)
000191CA 4E75                       		rts	
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            Disc_ChkDel:
000191E8 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
000191EE                            
000191EE                            	@delete:
000191EE 4EF9 0000 F7E8             		jmp	(DeleteObject).l
000191EE 4EF9 0000 F7E8             		jmp	(DeleteObject).l
000191F4                            Map_Disc:	include	"_maps\Running Disc.asm"
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            ; Sprite mappings - disc that you run around (SBZ)
000191F4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000191F4                            ; part of the level tiles.)
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            Map_Disc_internal:
000191F4 0000                       		dc.w @spot-Map_Disc_internal
000191F6 01                         @spot:		dc.b 1
000191F7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000191FC                            		even
000191FC                            		even
000191FC                            		include	"_incObj\68 Conveyor Belt.asm"
000191FC                            ; ---------------------------------------------------------------------------
000191FC                            ; Object 68 - conveyor belts (SBZ)
000191FC                            ; ---------------------------------------------------------------------------
000191FC                            
000191FC                            Conveyor:
000191FC 7000                       		moveq	#0,d0
000191FE 1028 0024                  		move.b	obRoutine(a0),d0
00019202 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00019206 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
0001920A                            ; ===========================================================================
0001920A 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001920C 0000                       		dc.w Conv_Action-Conv_Index
0001920E                            
0001920E =00000036                  conv_speed:	equ $36
0001920E =00000038                  conv_width:	equ $38
0001920E                            ; ===========================================================================
0001920E                            
0001920E                            Conv_Main:	; Routine 0
0001920E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019212 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00019218 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001921C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00019220 6700                       		beq.s	@typeis0	; if zero, branch
00019222 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00019228                            
00019228                            	@typeis0:
00019228 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001922C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00019230 4881                       		ext.w	d1
00019232 E841                       		asr.w	#4,d1
00019234 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00019238                            
00019238                            Conv_Action:	; Routine 2
00019238 6100                       		bsr.s	@movesonic
00019256 4E75                       		rts	
00019258                            
00019258                            	@delete:
00019258 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001925E                            ; ===========================================================================
0001925E                            
0001925E                            @movesonic:
0001925E 7400                       		moveq	#0,d2
00019260 1428 0038                  		move.b	conv_width(a0),d2
00019264 3602                       		move.w	d2,d3
00019266 D643                       		add.w	d3,d3
00019268 43F8 D000                  		lea	(v_player).w,a1
0001926C 3029 0008                  		move.w	obX(a1),d0
00019270 9068 0008                  		sub.w	obX(a0),d0
00019274 D042                       		add.w	d2,d0
00019276 B043                       		cmp.w	d3,d0
00019278 6400                       		bcc.s	@notonconveyor
0001927A 3229 000C                  		move.w	obY(a1),d1
0001927E 9268 000C                  		sub.w	obY(a0),d1
00019282 0641 0030                  		addi.w	#$30,d1
00019286 0C41 0030                  		cmpi.w	#$30,d1
0001928A 6400                       		bcc.s	@notonconveyor
0001928C 0829 0001 0022             		btst	#1,obStatus(a1)
00019292 6600                       		bne.s	@notonconveyor
00019294 3028 0036                  		move.w	conv_speed(a0),d0
00019298 D169 0008                  		add.w	d0,obX(a1)
0001929C                            
0001929C                            	@notonconveyor:
0001929C 4E75                       		rts	
0001929C 4E75                       		rts	
0001929E                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001929E                            ; ---------------------------------------------------------------------------
0001929E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001929E                            ; ---------------------------------------------------------------------------
0001929E                            
0001929E                            SpinPlatform:
0001929E 7000                       		moveq	#0,d0
000192A0 1028 0024                  		move.b	obRoutine(a0),d0
000192A4 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
000192A8 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
000192AC                            ; ===========================================================================
000192AC 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
000192AE 0000                       		dc.w Spin_Trapdoor-Spin_Index
000192B0 0000                       		dc.w Spin_Spinner-Spin_Index
000192B2                            
000192B2 =00000030                  spin_timer:	equ $30		; time counter until change
000192B2 =00000032                  spin_timelen:	equ $32		; time between changes (general)
000192B2                            ; ===========================================================================
000192B2                            
000192B2                            Spin_Main:	; Routine 0
000192B2 5428 0024                  		addq.b	#2,obRoutine(a0)
000192B6 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000192BE 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000192C4 0028 0004 0001             		ori.b	#4,obRender(a0)
000192CA 117C 0080 0014             		move.b	#$80,obActWid(a0)
000192D0 7000                       		moveq	#0,d0
000192D2 1028 0028                  		move.b	obSubtype(a0),d0
000192D6 0240 000F                  		andi.w	#$F,d0
000192DA C0FC 003C                  		mulu.w	#$3C,d0
000192DE 3140 0032                  		move.w	d0,spin_timelen(a0)
000192E2 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000192E6 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000192E8                            
000192E8 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000192EC 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000192F4 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000192FA 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019300 117C 0002 001C             		move.b	#2,obAnim(a0)
00019306 7000                       		moveq	#0,d0
00019308 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001930C 3200                       		move.w	d0,d1
0001930E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019312 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00019316 3140 0030                  		move.w	d0,spin_timer(a0)
0001931A 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001931E 0241 0070                  		andi.w	#$70,d1
00019322 0641 0010                  		addi.w	#$10,d1
00019326 E549                       		lsl.w	#2,d1
00019328 5341                       		subq.w	#1,d1
0001932A 3141 0036                  		move.w	d1,$36(a0)
0001932E 6000                       		bra.s	Spin_Spinner
00019330                            ; ===========================================================================
00019330                            
00019330                            Spin_Trapdoor:	; Routine 2
00019330 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00019334 6A00                       		bpl.s	@animate	; if time remains, branch
00019336                            
00019336 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001933C 0868 0000 001C             		bchg	#0,obAnim(a0)
00019342 4A28 0001                  		tst.b	obRender(a0)
00019346 6A00                       		bpl.s	@animate
00019352                            
00019352                            	@animate:
00019352 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00019358 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001935E 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00019362 6600                       		bne.s	@notsolid	; if not, branch
00019364 323C 004B                  		move.w	#$4B,d1
00019368 343C 000C                  		move.w	#$C,d2
0001936C 3602                       		move.w	d2,d3
0001936E 5243                       		addq.w	#1,d3
00019370 3828 0008                  		move.w	obX(a0),d4
00019374 6100 8992                  		bsr.w	SolidObject
00019378 6000 84F6                  		bra.w	RememberState
0001937C                            ; ===========================================================================
0001937C                            
0001937C                            @notsolid:
0001937C 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00019382 6700                       		beq.s	@display	; if not, branch
00019384 43F8 D000                  		lea	(v_player).w,a1
00019388 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001938E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019394 4228 0025                  		clr.b	obSolid(a0)
00019398                            
00019398                            	@display:
00019398 6000 84D6                  		bra.w	RememberState
0001939C                            ; ===========================================================================
0001939C                            
0001939C                            Spin_Spinner:	; Routine 4
0001939C 3038 FE04                  		move.w	(v_framecount).w,d0
000193A0 C068 0036                  		and.w	$36(a0),d0
000193A4 6600                       		bne.s	@delay
000193A6 117C 0001 0034             		move.b	#1,$34(a0)
000193AC                            
000193AC                            	@delay:
000193AC 4A28 0034                  		tst.b	$34(a0)
000193B0 6700                       		beq.s	@animate
000193B2 5368 0030                  		subq.w	#1,spin_timer(a0)
000193B6 6A00                       		bpl.s	@animate
000193B8 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000193BE 4228 0034                  		clr.b	$34(a0)
000193C2 0868 0000 001C             		bchg	#0,obAnim(a0)
000193C8                            
000193C8                            	@animate:
000193C8 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000193CE 4EB9 0000 C85E             		jsr	(AnimateSprite).l
000193D4 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000193D8 6600                       		bne.s	@notsolid2	; if not, branch
000193DA 323C 001B                  		move.w	#$1B,d1
000193DE 343C 0007                  		move.w	#7,d2
000193E2 3602                       		move.w	d2,d3
000193E4 5243                       		addq.w	#1,d3
000193E6 3828 0008                  		move.w	obX(a0),d4
000193EA 6100 891C                  		bsr.w	SolidObject
000193EE 6000 8480                  		bra.w	RememberState
000193F2                            ; ===========================================================================
000193F2                            
000193F2                            @notsolid2:
000193F2 0828 0003 0022             		btst	#3,obStatus(a0)
000193F8 6700                       		beq.s	@display
000193FA 43F8 D000                  		lea	(v_player).w,a1
000193FE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019404 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001940A 4228 0025                  		clr.b	obSolid(a0)
0001940E                            
0001940E                            	@display:
0001940E 6000 8460                  		bra.w	RememberState
0001940E 6000 8460                  		bra.w	RememberState
00019412                            		include	"_anim\SBZ Spinning Platforms.asm"
00019412                            ; ---------------------------------------------------------------------------
00019412                            ; Animation script - trapdoor (SBZ)
00019412                            ; ---------------------------------------------------------------------------
00019412 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00019414 0000                       		dc.w @trapclose-Ani_Spin
00019416 0000                       		dc.w @spin1-Ani_Spin
00019418 0000                       		dc.w @spin2-Ani_Spin
0001941A 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00019420 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00019426 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001943A 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001944E                            		even
0001944E                            		even
0001944E                            Map_Trap:	include	"_maps\Trapdoor.asm"
0001944E                            ; ---------------------------------------------------------------------------
0001944E                            ; Sprite mappings - trapdoor (SBZ)
0001944E                            ; ---------------------------------------------------------------------------
0001944E                            Map_Trap_internal:
0001944E 0000                       		dc.w @closed-Map_Trap_internal
00019450 0000                       		dc.w @half-Map_Trap_internal
00019452 0000                       		dc.w @open-Map_Trap_internal
00019454 04                         @closed:	dc.b 4
00019455 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001945A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001945F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00019464 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00019469 08                         @half:		dc.b 8
0001946A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001946F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00019474 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00019479 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001947E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00019483 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00019488 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001948D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00019492 04                         @open:		dc.b 4
00019493 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00019498 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001949D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000194A2 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000194A8 00                         		even
000194A8 00                         		even
000194A8                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
000194A8                            ; ---------------------------------------------------------------------------
000194A8                            ; Sprite mappings - spinning platforms (SBZ)
000194A8                            ; ---------------------------------------------------------------------------
000194A8                            Map_Spin_internal:
000194A8 0000                       		dc.w @flat-Map_Spin_internal
000194AA 0000                       		dc.w @spin1-Map_Spin_internal
000194AC 0000                       		dc.w @spin2-Map_Spin_internal
000194AE 0000                       		dc.w @spin3-Map_Spin_internal
000194B0 0000                       		dc.w @spin4-Map_Spin_internal
000194B2 02                         @flat:		dc.b 2
000194B3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000194B8 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000194BD 02                         @spin1:		dc.b 2
000194BE F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000194C3 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000194C8 02                         @spin2:		dc.b 2
000194C9 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000194CE 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000194D3 02                         @spin3:		dc.b 2
000194D4 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000194D9 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000194DE 02                         @spin4:		dc.b 2
000194DF F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000194E4 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000194EA 00                         		even
000194EA 00                         		even
000194EA                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000194EA                            ; ---------------------------------------------------------------------------
000194EA                            ; Object 6A - ground saws and pizza cutters (SBZ)
000194EA                            ; ---------------------------------------------------------------------------
000194EA                            
000194EA                            Saws:
000194EA 7000                       		moveq	#0,d0
000194EC 1028 0024                  		move.b	obRoutine(a0),d0
000194F0 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000194F4 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
000194F8                            ; ===========================================================================
000194F8 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
000194FA 0000                       		dc.w Saw_Action-Saw_Index
000194FC                            
000194FC =0000003A                  saw_origX:	equ $3A		; original x-axis position
000194FC =00000038                  saw_origY:	equ $38		; original y-axis position
000194FC =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            Saw_Main:	; Routine 0
000194FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00019500 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00019508 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
0001950E 117C 0004 0001             		move.b	#4,obRender(a0)
00019514 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001951A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00019520 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019526 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
0001952C 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00019532 6400                       		bcc.s	Saw_Action	; if yes, branch
00019534 117C 00A2 0020             		move.b	#$A2,obColType(a0)
0001953A                            
0001953A                            Saw_Action:	; Routine 2
0001953A 7000                       		moveq	#0,d0
0001953C 1028 0028                  		move.b	obSubtype(a0),d0
00019540 0240 0007                  		andi.w	#7,d0
00019544 D040                       		add.w	d0,d0
00019546 323B 0000                  		move.w	@index(pc,d0.w),d1
0001954A 4EBB 1000                  		jsr	@index(pc,d1.w)
0001956A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00019570                            
00019570                            	@delete:
00019570 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00019576                            ; ===========================================================================
00019576 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001957C 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00019580                            ; ===========================================================================
00019580                            
00019580                            @type00:
00019580 4E75                       		rts			; doesn't move
00019582                            ; ===========================================================================
00019582                            
00019582                            @type01:
00019582 323C 0060                  		move.w	#$60,d1
00019586 7000                       		moveq	#0,d0
00019588 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001958C 0828 0000 0022             		btst	#0,obStatus(a0)
00019592 6700                       		beq.s	@noflip01
00019594 4440                       		neg.w	d0
00019596 D041                       		add.w	d1,d0
00019598                            
00019598                            	@noflip01:
00019598 3228 003A                  		move.w	saw_origX(a0),d1
0001959C 9240                       		sub.w	d0,d1
0001959E 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
000195A2                            
000195A2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000195A6 6A00                       		bpl.s	@sameframe01
000195A8 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
000195AE 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
000195B4                            
000195B4                            	@sameframe01:
000195B4 4A28 0001                  		tst.b	obRender(a0)
000195B8 6A00                       		bpl.s	@nosound01
000195BA 3038 FE04                  		move.w	(v_framecount).w,d0
000195BE 0240 000F                  		andi.w	#$F,d0
000195C2 6600                       		bne.s	@nosound01
000195CE                            
000195CE                            	@nosound01:
000195CE 4E75                       		rts	
000195D0                            ; ===========================================================================
000195D0                            
000195D0                            @type02:
000195D0 323C 0030                  		move.w	#$30,d1
000195D4 7000                       		moveq	#0,d0
000195D6 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000195DA 0828 0000 0022             		btst	#0,obStatus(a0)
000195E0 6700                       		beq.s	@noflip02
000195E2 4440                       		neg.w	d0
000195E4 0640 0080                  		addi.w	#$80,d0
000195E8                            
000195E8                            	@noflip02:
000195E8 3228 0038                  		move.w	saw_origY(a0),d1
000195EC 9240                       		sub.w	d0,d1
000195EE 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000195F2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000195F6 6A00                       		bpl.s	@sameframe02
000195F8 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000195FE 0868 0000 001A             		bchg	#0,obFrame(a0)
00019604                            
00019604                            	@sameframe02:
00019604 4A28 0001                  		tst.b	obRender(a0)
00019608 6A00                       		bpl.s	@nosound02
0001960A 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0001960E 0C00 0018                  		cmpi.b	#$18,d0
00019612 6600                       		bne.s	@nosound02
0001961E                            
0001961E                            	@nosound02:
0001961E 4E75                       		rts	
00019620                            ; ===========================================================================
00019620                            
00019620                            @type03:
00019620 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00019624 6600                       		bne.s	@here03		; if yes, branch
00019626                            
00019626 3038 D008                  		move.w	(v_player+obX).w,d0
0001962A 0440 00C0                  		subi.w	#$C0,d0
0001962E 6500                       		bcs.s	@nosaw03x
00019630 9068 0008                  		sub.w	obX(a0),d0
00019634 6500                       		bcs.s	@nosaw03x
00019636 3038 D00C                  		move.w	(v_player+obY).w,d0
0001963A 0440 0080                  		subi.w	#$80,d0
0001963E B068 000C                  		cmp.w	obY(a0),d0
00019642 6400                       		bcc.s	@nosaw03y
00019644 0640 0100                  		addi.w	#$100,d0
00019648 B068 000C                  		cmp.w	obY(a0),d0
0001964C 6500                       		bcs.s	@nosaw03y
0001964E 117C 0001 003D             		move.b	#1,saw_here(a0)
00019654 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
0001965A 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019660 117C 0002 001A             		move.b	#2,obFrame(a0)
00019670                            
00019670                            	@nosaw03x:
00019670 588F                       		addq.l	#4,sp
00019672                            
00019672                            	@nosaw03y:
00019672 4E75                       		rts	
00019674                            ; ===========================================================================
00019674                            
00019674                            @here03:
00019674 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001967A 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019680 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019684 6A00                       		bpl.s	@sameframe03
00019686 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001968C 0868 0000 001A             		bchg	#0,obFrame(a0)
00019692                            
00019692                            	@sameframe03:
00019692 4E75                       		rts	
00019694                            ; ===========================================================================
00019694                            
00019694                            @type04:
00019694 4A28 003D                  		tst.b	saw_here(a0)
00019698 6600                       		bne.s	@here04
0001969A 3038 D008                  		move.w	(v_player+obX).w,d0
0001969E 0640 00E0                  		addi.w	#$E0,d0
000196A2 9068 0008                  		sub.w	obX(a0),d0
000196A6 6400                       		bcc.s	@nosaw04x
000196A8 3038 D00C                  		move.w	(v_player+obY).w,d0
000196AC 0440 0080                  		subi.w	#$80,d0
000196B0 B068 000C                  		cmp.w	obY(a0),d0
000196B4 6400                       		bcc.s	@nosaw04y
000196B6 0640 0100                  		addi.w	#$100,d0
000196BA B068 000C                  		cmp.w	obY(a0),d0
000196BE 6500                       		bcs.s	@nosaw04y
000196C0 117C 0001 003D             		move.b	#1,saw_here(a0)
000196C6 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000196CC 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000196D2 117C 0002 001A             		move.b	#2,obFrame(a0)
000196E2                            
000196E2                            	@nosaw04x:
000196E2 588F                       		addq.l	#4,sp
000196E4                            
000196E4                            	@nosaw04y:
000196E4 4E75                       		rts	
000196E6                            ; ===========================================================================
000196E6                            
000196E6                            @here04:
000196E6 4EB9 0000 F794             		jsr	(SpeedToPos).l
000196EC 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000196F2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000196F6 6A00                       		bpl.s	@sameframe04
000196F8 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000196FE 0868 0000 001A             		bchg	#0,obFrame(a0)
00019704                            
00019704                            	@sameframe04:
00019704 4E75                       		rts	
00019704 4E75                       		rts	
00019706                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00019706                            ; ---------------------------------------------------------------------------
00019706                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00019706                            ; ---------------------------------------------------------------------------
00019706                            Map_Saw_internal:
00019706 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00019708 0000                       		dc.w @pizzacutter2-Map_Saw_internal
0001970A 0000                       		dc.w @groundsaw1-Map_Saw_internal
0001970C 0000                       		dc.w @groundsaw2-Map_Saw_internal
0001970E 07                         @pizzacutter1:	dc.b 7
0001970F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019714 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019719 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001971E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00019723 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019728 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001972D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019732 07                         @pizzacutter2:	dc.b 7
00019733 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019738 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001973D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00019742 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019747 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001974C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019751 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019756 04                         @groundsaw1:	dc.b 4
00019757 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001975C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019761 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00019766 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001976B 04                         @groundsaw2:	dc.b 4
0001976C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019771 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019776 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001977B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019780                            		even
00019780                            		even
00019780                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00019780                            ; ---------------------------------------------------------------------------
00019780                            ; Object 6B - stomper and sliding door (SBZ)
00019780                            ; ---------------------------------------------------------------------------
00019780                            
00019780                            ScrapStomp:
00019780 7000                       		moveq	#0,d0
00019782 1028 0024                  		move.b	obRoutine(a0),d0
00019786 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
0001978A 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
0001978E                            ; ===========================================================================
0001978E 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00019790 0000                       		dc.w Sto_Action-Sto_Index
00019792                            
00019792 =00000016                  sto_height:	equ $16
00019792 =00000034                  sto_origX:	equ $34		; original x-axis position
00019792 =00000030                  sto_origY:	equ $30		; original y-axis position
00019792 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00019792                            
00019792 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00019796 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001979A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001979E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000197A2 8040 0005                  		dc.b  $80, $40,	  0,   5
000197A6                            ; ===========================================================================
000197A6                            
000197A6                            Sto_Main:	; Routine 0
000197A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000197AA 7000                       		moveq	#0,d0
000197AC 1028 0028                  		move.b	obSubtype(a0),d0
000197B0 E448                       		lsr.w	#2,d0
000197B2 0240 001C                  		andi.w	#$1C,d0
000197B6 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
000197BA 115B 0014                  		move.b	(a3)+,obActWid(a0)
000197BE 115B 0016                  		move.b	(a3)+,sto_height(a0)
000197C2 E448                       		lsr.w	#2,d0
000197C4 1140 001A                  		move.b	d0,obFrame(a0)
000197C8 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
000197D0 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
000197D6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
000197DC 6600                       		bne.s	@isSBZ12	; if not, branch
000197DE 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
000197E4 6700                       		beq.s	@isSBZ3
000197E6                            
000197E6                            @chkdel:
000197E6 45F8 FC00                  		lea	(v_objstate).w,a2
000197EA 7000                       		moveq	#0,d0
000197EC 1028 0023                  		move.b	obRespawnNo(a0),d0
000197F0 6700                       		beq.s	@delete
000197F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000197F8                            
000197F8                            	@delete:
000197F8 4EF9 0000 F7E8             		jmp	(DeleteObject).l
000197FE                            ; ===========================================================================
000197FE                            
000197FE                            @isSBZ3:
000197FE 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00019804 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
0001980A 6600                       		bne.s	@isSBZ12
0001980C 45F8 FC00                  		lea	(v_objstate).w,a2
00019810 7000                       		moveq	#0,d0
00019812 1028 0023                  		move.b	obRespawnNo(a0),d0
00019816 6700                       		beq.s	@isSBZ12
00019818 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001981E 6700                       		beq.s	@isSBZ12
00019820 4238 F7CB                  		clr.b	(v_obj6B).w
00019824 60C0                       		bra.s	@chkdel
00019826                            ; ===========================================================================
00019826                            
00019826                            @isSBZ12:
00019826 0028 0004 0001             		ori.b	#4,obRender(a0)
0001982C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019832 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019838 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
0001983E 7000                       		moveq	#0,d0
00019840 101B                       		move.b	(a3)+,d0
00019842 3140 003C                  		move.w	d0,$3C(a0)
00019846 7000                       		moveq	#0,d0
00019848 1028 0028                  		move.b	obSubtype(a0),d0
0001984C 6A00                       		bpl.s	Sto_Action
0001984E 0200 000F                  		andi.b	#$F,d0
00019852 1140 003E                  		move.b	d0,$3E(a0)
00019856 1153 0028                  		move.b	(a3),obSubtype(a0)
0001985A 0C13 0005                  		cmpi.b	#5,(a3)
0001985E 6600                       		bne.s	@chkgone
00019860 08E8 0004 0001             		bset	#4,obRender(a0)
00019866                            
00019866                            	@chkgone:
00019866 45F8 FC00                  		lea	(v_objstate).w,a2
0001986A 7000                       		moveq	#0,d0
0001986C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019870 6700                       		beq.s	Sto_Action
00019872 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019878                            
00019878                            Sto_Action:	; Routine 2
00019878 3F28 0008                  		move.w	obX(a0),-(sp)
0001987C 7000                       		moveq	#0,d0
0001987E 1028 0028                  		move.b	obSubtype(a0),d0
00019882 0240 000F                  		andi.w	#$F,d0
00019886 D040                       		add.w	d0,d0
00019888 323B 0000                  		move.w	@index(pc,d0.w),d1
0001988C 4EBB 1000                  		jsr	@index(pc,d1.w)
00019890 381F                       		move.w	(sp)+,d4
00019892 4A28 0001                  		tst.b	obRender(a0)
00019896 6A00                       		bpl.s	@chkdel
00019898 7200                       		moveq	#0,d1
0001989A 1228 0014                  		move.b	obActWid(a0),d1
0001989E 0641 000B                  		addi.w	#$B,d1
000198A2 7400                       		moveq	#0,d2
000198A4 1428 0016                  		move.b	sto_height(a0),d2
000198A8 3602                       		move.w	d2,d3
000198AA 5243                       		addq.w	#1,d3
000198AC 6100 845A                  		bsr.w	SolidObject
000198B0                            
000198B0                            	@chkdel:
000198CC 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
000198D2                            
000198D2                            	@chkgone:
000198D2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
000198D8 6600                       		bne.s	@delete
000198DA 4238 F7CB                  		clr.b	(v_obj6B).w
000198DE 45F8 FC00                  		lea	(v_objstate).w,a2
000198E2 7000                       		moveq	#0,d0
000198E4 1028 0023                  		move.b	obRespawnNo(a0),d0
000198E8 6700                       		beq.s	@delete
000198EA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000198F0                            
000198F0                            	@delete:
000198F0 4EF9 0000 F7E8             		jmp	(DeleteObject).l
000198F6                            ; ===========================================================================
000198F6 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000198FA 0000 0000                  		dc.w @type02-@index, @type03-@index
000198FE 0000 0000                  		dc.w @type04-@index, @type05-@index
00019902                            ; ===========================================================================
00019902                            
00019902                            @type00:
00019902 4E75                       		rts
00019904                            ; ===========================================================================
00019904                            
00019904                            @type01:
00019904 4A28 0038                  		tst.b	sto_active(a0)
00019908 6600                       		bne.s	@isactive01
0001990A 45F8 F7E0                  		lea	(f_switch).w,a2
0001990E 7000                       		moveq	#0,d0
00019910 1028 003E                  		move.b	$3E(a0),d0
00019914 0832 0000 0000             		btst	#0,(a2,d0.w)
0001991A 6700                       		beq.s	@loc_15DC2
0001991C 117C 0001 0038             		move.b	#1,sto_active(a0)
00019922                            
00019922                            	@isactive01:
00019922 3028 003C                  		move.w	$3C(a0),d0
00019926 B068 003A                  		cmp.w	$3A(a0),d0
0001992A 6700                       		beq.s	@loc_15DE0
0001992C 5468 003A                  		addq.w	#2,$3A(a0)
00019930                            
00019930                            	@loc_15DC2:
00019930 3028 003A                  		move.w	$3A(a0),d0
00019934 0828 0000 0022             		btst	#0,obStatus(a0)
0001993A 6700                       		beq.s	@noflip01
0001993C 4440                       		neg.w	d0
0001993E 0640 0080                  		addi.w	#$80,d0
00019942                            
00019942                            	@noflip01:
00019942 3228 0034                  		move.w	sto_origX(a0),d1
00019946 9240                       		sub.w	d0,d1
00019948 3141 0008                  		move.w	d1,obX(a0)
0001994C 4E75                       		rts	
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            @loc_15DE0:
0001994E 5228 0028                  		addq.b	#1,obSubtype(a0)
00019952 317C 00B4 0036             		move.w	#$B4,$36(a0)
00019958 4228 0038                  		clr.b	sto_active(a0)
0001995C 45F8 FC00                  		lea	(v_objstate).w,a2
00019960 7000                       		moveq	#0,d0
00019962 1028 0023                  		move.b	obRespawnNo(a0),d0
00019966 67C8                       		beq.s	@loc_15DC2
00019968 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001996E 60C0                       		bra.s	@loc_15DC2
00019970                            ; ===========================================================================
00019970                            
00019970                            @type02:
00019970 4A28 0038                  		tst.b	sto_active(a0)
00019974 6600                       		bne.s	@isactive02
00019976 5368 0036                  		subq.w	#1,$36(a0)
0001997A 6600                       		bne.s	@loc_15E1E
0001997C 117C 0001 0038             		move.b	#1,sto_active(a0)
00019982                            
00019982                            	@isactive02:
00019982 4A68 003A                  		tst.w	$3A(a0)
00019986 6700                       		beq.s	@loc_15E3C
00019988 5568 003A                  		subq.w	#2,$3A(a0)
0001998C                            
0001998C                            	@loc_15E1E:
0001998C 3028 003A                  		move.w	$3A(a0),d0
00019990 0828 0000 0022             		btst	#0,obStatus(a0)
00019996 6700                       		beq.s	@noflip02
00019998 4440                       		neg.w	d0
0001999A 0640 0080                  		addi.w	#$80,d0
0001999E                            
0001999E                            	@noflip02:
0001999E 3228 0034                  		move.w	sto_origX(a0),d1
000199A2 9240                       		sub.w	d0,d1
000199A4 3141 0008                  		move.w	d1,obX(a0)
000199A8 4E75                       		rts	
000199AA                            ; ===========================================================================
000199AA                            
000199AA                            @loc_15E3C:
000199AA 5328 0028                  		subq.b	#1,obSubtype(a0)
000199AE 4228 0038                  		clr.b	sto_active(a0)
000199B2 45F8 FC00                  		lea	(v_objstate).w,a2
000199B6 7000                       		moveq	#0,d0
000199B8 1028 0023                  		move.b	obRespawnNo(a0),d0
000199BC 67CE                       		beq.s	@loc_15E1E
000199BE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000199C4 60C6                       		bra.s	@loc_15E1E
000199C6                            ; ===========================================================================
000199C6                            
000199C6                            @type03:
000199C6 4A28 0038                  		tst.b	sto_active(a0)
000199CA 6600                       		bne.s	@isactive03
000199CC 4A68 003A                  		tst.w	$3A(a0)
000199D0 6700                       		beq.s	@loc_15E6A
000199D2 5368 003A                  		subq.w	#1,$3A(a0)
000199D6 6000                       		bra.s	@loc_15E8E
000199D8                            ; ===========================================================================
000199D8                            
000199D8                            @loc_15E6A:
000199D8 5368 0036                  		subq.w	#1,$36(a0)
000199DC 6A00                       		bpl.s	@loc_15E8E
000199DE 317C 003C 0036             		move.w	#$3C,$36(a0)
000199E4 117C 0001 0038             		move.b	#1,sto_active(a0)
000199EA                            
000199EA                            @isactive03:
000199EA 5068 003A                  		addq.w	#8,$3A(a0)
000199EE 3028 003A                  		move.w	$3A(a0),d0
000199F2 B068 003C                  		cmp.w	$3C(a0),d0
000199F6 6600                       		bne.s	@loc_15E8E
000199F8 4228 0038                  		clr.b	sto_active(a0)
000199FC                            
000199FC                            @loc_15E8E:
000199FC 3028 003A                  		move.w	$3A(a0),d0
00019A00 0828 0000 0022             		btst	#0,obStatus(a0)
00019A06 6700                       		beq.s	@noflip03
00019A08 4440                       		neg.w	d0
00019A0A 0640 0038                  		addi.w	#$38,d0
00019A0E                            
00019A0E                            	@noflip03:
00019A0E 3228 0030                  		move.w	sto_origY(a0),d1
00019A12 D240                       		add.w	d0,d1
00019A14 3141 000C                  		move.w	d1,obY(a0)
00019A18 4E75                       		rts	
00019A1A                            ; ===========================================================================
00019A1A                            
00019A1A                            @type04:
00019A1A 4A28 0038                  		tst.b	sto_active(a0)
00019A1E 6600                       		bne.s	@isactive04
00019A20 4A68 003A                  		tst.w	$3A(a0)
00019A24 6700                       		beq.s	@loc_15EBE
00019A26 5168 003A                  		subq.w	#8,$3A(a0)
00019A2A 6000                       		bra.s	@loc_15EF0
00019A2C                            ; ===========================================================================
00019A2C                            
00019A2C                            @loc_15EBE:
00019A2C 5368 0036                  		subq.w	#1,$36(a0)
00019A30 6A00                       		bpl.s	@loc_15EF0
00019A32 317C 003C 0036             		move.w	#$3C,$36(a0)
00019A38 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A3E                            
00019A3E                            @isactive04:
00019A3E 3028 003A                  		move.w	$3A(a0),d0
00019A42 B068 003C                  		cmp.w	$3C(a0),d0
00019A46 6700                       		beq.s	@loc_15EE0
00019A48 5068 003A                  		addq.w	#8,$3A(a0)
00019A4C 6000                       		bra.s	@loc_15EF0
00019A4E                            ; ===========================================================================
00019A4E                            
00019A4E                            @loc_15EE0:
00019A4E 5368 0036                  		subq.w	#1,$36(a0)
00019A52 6A00                       		bpl.s	@loc_15EF0
00019A54 317C 003C 0036             		move.w	#$3C,$36(a0)
00019A5A 4228 0038                  		clr.b	sto_active(a0)
00019A5E                            
00019A5E                            @loc_15EF0:
00019A5E 3028 003A                  		move.w	$3A(a0),d0
00019A62 0828 0000 0022             		btst	#0,obStatus(a0)
00019A68 6700                       		beq.s	@noflip04
00019A6A 4440                       		neg.w	d0
00019A6C 0640 0038                  		addi.w	#$38,d0
00019A70                            
00019A70                            	@noflip04:
00019A70 3228 0030                  		move.w	sto_origY(a0),d1
00019A74 D240                       		add.w	d0,d1
00019A76 3141 000C                  		move.w	d1,obY(a0)
00019A7A 4E75                       		rts	
00019A7C                            ; ===========================================================================
00019A7C                            
00019A7C                            @type05:
00019A7C 4A28 0038                  		tst.b	sto_active(a0)
00019A80 6600                       		bne.s	@loc_15F3E
00019A82 45F8 F7E0                  		lea	(f_switch).w,a2
00019A86 7000                       		moveq	#0,d0
00019A88 1028 003E                  		move.b	$3E(a0),d0
00019A8C 0832 0000 0000             		btst	#0,(a2,d0.w)
00019A92 6700                       		beq.s	@locret_15F5C
00019A94 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A9A 45F8 FC00                  		lea	(v_objstate).w,a2
00019A9E 7000                       		moveq	#0,d0
00019AA0 1028 0023                  		move.b	obRespawnNo(a0),d0
00019AA4 6700                       		beq.s	@loc_15F3E
00019AA6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019AAC                            
00019AAC                            @loc_15F3E:
00019AAC 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019AB4 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019ABC 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019AC2 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019AC8 6700                       		beq.s	@loc_15F5E
00019ACA                            
00019ACA                            @locret_15F5C:
00019ACA 4E75                       		rts	
00019ACC                            ; ===========================================================================
00019ACC                            
00019ACC                            @loc_15F5E:
00019ACC 4228 0028                  		clr.b	obSubtype(a0)
00019AD0 4228 0038                  		clr.b	sto_active(a0)
00019AD4 4E75                       		rts	
00019AD4 4E75                       		rts	
00019AD6                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019AD6                            ; ---------------------------------------------------------------------------
00019AD6                            ; Sprite mappings - stomper and	platforms (SBZ)
00019AD6                            ; ---------------------------------------------------------------------------
00019AD6                            Map_Stomp_internal:
00019AD6 0000                       		dc.w @door-Map_Stomp_internal
00019AD8 0000                       		dc.w @stomper-Map_Stomp_internal
00019ADA 0000                       		dc.w @stomper-Map_Stomp_internal
00019ADC 0000                       		dc.w @stomper-Map_Stomp_internal
00019ADE 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019AE0 04                         @door:		dc.b 4
00019AE1 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019AE6 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019AEB F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019AF0 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019AF5 08                         @stomper:	dc.b 8
00019AF6 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019AFB E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019B00 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019B05 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019B0A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019B0F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019B14 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019B19 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019B1E 0E                         @bigdoor:	dc.b $E
00019B1F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019B24 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019B29 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019B2E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00019B33 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019B38 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019B3D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00019B42 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00019B47 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019B4C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00019B51 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00019B56 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019B5B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00019B60 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00019B66 00                         		even
00019B66 00                         		even
00019B66                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00019B66                            ; ---------------------------------------------------------------------------
00019B66                            ; Object 6C - vanishing	platforms (SBZ)
00019B66                            ; ---------------------------------------------------------------------------
00019B66                            
00019B66                            VanishPlatform:
00019B66 7000                       		moveq	#0,d0
00019B68 1028 0024                  		move.b	obRoutine(a0),d0
00019B6C 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019B70 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00019B74                            ; ===========================================================================
00019B74 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00019B76 0000                       		dc.w VanP_Vanish-VanP_Index
00019B78 0000                       		dc.w VanP_Appear-VanP_Index
00019B7A 0000                       		dc.w loc_16068-VanP_Index
00019B7C                            
00019B7C =00000030                  vanp_timer:	equ $30		; counter for time until event
00019B7C =00000032                  vanp_timelen:	equ $32		; time between events (general)
00019B7C                            ; ===========================================================================
00019B7C                            
00019B7C                            VanP_Main:	; Routine 0
00019B7C 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019B80 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00019B88 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00019B8E 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00019B94 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00019B96 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00019B9C                            
00019B9C                            	VanP_IsSYZ:	
00019B9C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019BA2 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019BA8 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019BAE 7000                       		moveq	#0,d0
00019BB0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019BB4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019BB8 5240                       		addq.w	#1,d0		; add 1
00019BBA EF48                       		lsl.w	#7,d0		; multiply by $80
00019BBC 3200                       		move.w	d0,d1
00019BBE 5340                       		subq.w	#1,d0
00019BC0 3140 0030                  		move.w	d0,vanp_timer(a0)
00019BC4 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019BC8 7000                       		moveq	#0,d0
00019BCA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019BCE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019BD2 0641 0080                  		addi.w	#$80,d1
00019BD6 C0C1                       		mulu.w	d1,d0
00019BD8 E088                       		lsr.l	#8,d0
00019BDA 3140 0036                  		move.w	d0,$36(a0)
00019BDE 5341                       		subq.w	#1,d1
00019BE0 3141 0038                  		move.w	d1,$38(a0)
00019BE4                            
00019BE4                            loc_16068:	; Routine 6
00019BE4 3038 FE04                  		move.w	(v_framecount).w,d0
00019BE8 9068 0036                  		sub.w	$36(a0),d0
00019BEC C068 0038                  		and.w	$38(a0),d0
00019BF0 6600                       		bne.s	@animate
00019BF2 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019BF6 6000                       		bra.s	VanP_Vanish
00019BF8                            ; ===========================================================================
00019BF8                            
00019BF8                            @animate:
00019BF8 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019BFE 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00019C04 4EF9 0001 1870             		jmp	RememberState
00019C0A                            ; ===========================================================================
00019C0A                            
00019C0A                            VanP_Vanish:	; Routine 2
00019C0A                            VanP_Appear:	; Routine 4
00019C0A 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019C0E 6A00                       		bpl.s	@wait
00019C10 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019C16 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019C1A 6700                       		beq.s	@isvanishing	; if yes, branch
00019C1C 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019C22                            
00019C22                            	@isvanishing:
00019C22 0868 0000 001C             		bchg	#0,obAnim(a0)
00019C28                            
00019C28                            	@wait:
00019C28 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019C2E 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00019C34 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019C3A 6600                       		bne.s	@notsolid	; if yes, branch
00019C3C 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00019C42 6600                       		bne.s	@loc_160D6
00019C44 7200                       		moveq	#0,d1
00019C46 1228 0014                  		move.b	obActWid(a0),d1
00019C4A 4EB9 0000 8C24             		jsr	(PlatformObject).l
00019C50 4EF9 0001 1870             		jmp	RememberState
00019C56                            ; ===========================================================================
00019C56                            
00019C56                            @loc_160D6:
00019C56 7200                       		moveq	#0,d1
00019C58 1228 0014                  		move.b	obActWid(a0),d1
00019C5C 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00019C62 3428 0008                  		move.w	obX(a0),d2
00019C66 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
00019C6C 4EF9 0001 1870             		jmp	RememberState
00019C72                            ; ===========================================================================
00019C72                            
00019C72                            @notsolid:
00019C72 0828 0003 0022             		btst	#3,obStatus(a0)
00019C78 6700                       		beq.s	@display
00019C7A 43F8 D000                  		lea	(v_player).w,a1
00019C7E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019C84 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019C8A 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019C90 4228 0025                  		clr.b	obSolid(a0)
00019C94                            
00019C94                            	@display:
00019C94 4EF9 0001 1870             		jmp	RememberState
00019C94 4EF9 0001 1870             		jmp	RememberState
00019C9A                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019C9A                            ; ---------------------------------------------------------------------------
00019C9A                            ; Animation script - vanishing platforms (SBZ)
00019C9A                            ; ---------------------------------------------------------------------------
00019C9A 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019C9C 0000                       		dc.w @appear-Ani_Van
00019C9E 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
00019CA8                            		even
00019CA8 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019CB2                            		even
00019CB2                            		even
00019CB2                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019CB2                            ; --------------------------------------------------------------------------------
00019CB2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019CB2                            ; --------------------------------------------------------------------------------
00019CB2                            
00019CB2                            SME_Mrcg1:	
00019CB2 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
00019CB6 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019CBA 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019CBE 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
00019CC0 01                         SME_Mrcg1_E:	dc.b 1	
00019CC1 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00019CC6 04                         SME_Mrcg1_14:	dc.b 4	
00019CC7 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019CCC F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019CD1 F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
00019CD6 F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019CDB 01                         SME_Mrcg1_29:	dc.b 1	
00019CDC F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
00019CE1 02                         SME_Mrcg1_2F:	dc.b 2	
00019CE2 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019CE7 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019CEC 01                         SME_Mrcg1_3A:	dc.b 1	
00019CED F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
00019CF2 01                         SME_Mrcg1_40:	dc.b 1	
00019CF3 F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
00019CF8 00                         SME_Mrcg1_46:	dc.b 0	
00019CFA 00                         		even
00019CFA 00                         		even
00019CFA                            		include	"_incObj\6E Electrocuter.asm"
00019CFA                            ; ---------------------------------------------------------------------------
00019CFA                            ; Object 6E - electrocution orbs (SBZ)
00019CFA                            ; ---------------------------------------------------------------------------
00019CFA                            
00019CFA                            Electro:
00019CFA 7000                       		moveq	#0,d0
00019CFC 1028 0024                  		move.b	obRoutine(a0),d0
00019D00 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019D04 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019D08                            ; ===========================================================================
00019D08 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019D0A 0000                       		dc.w Elec_Shock-Elec_Index
00019D0C                            
00019D0C =00000034                  elec_freq:	equ $34		; frequency
00019D0C                            ; ===========================================================================
00019D0C                            
00019D0C                            Elec_Main:	; Routine 0
00019D0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019D10 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019D18 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019D1E 0028 0004 0001             		ori.b	#4,obRender(a0)
00019D24 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019D2A 7000                       		moveq	#0,d0
00019D2C 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019D30 E948                       		lsl.w	#4,d0		; multiply by $10
00019D32 5340                       		subq.w	#1,d0
00019D34 3140 0034                  		move.w	d0,elec_freq(a0)
00019D38                            
00019D38                            Elec_Shock:	; Routine 2
00019D38 3038 FE04                  		move.w	(v_framecount).w,d0
00019D3C C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019D40 6600                       		bne.s	@animate	; if not, branch
00019D42                            
00019D42 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019D48 4A28 0001                  		tst.b	obRender(a0)
00019D4C 6A00                       		bpl.s	@animate
00019D58                            
00019D58                            	@animate:
00019D58 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019D5E 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00019D64 117C 0000 0020             		move.b	#0,obColType(a0)
00019D6A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019D70 6600                       		bne.s	@display	; if not, branch
00019D72 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019D78                            
00019D78                            	@display:
00019D78 4EF9 0001 1870             		jmp	RememberState
00019D78 4EF9 0001 1870             		jmp	RememberState
00019D7E                            		include	"_anim\Electrocuter.asm"
00019D7E                            ; ---------------------------------------------------------------------------
00019D7E                            ; Animation script - electrocution orbs (SBZ)
00019D7E                            ; ---------------------------------------------------------------------------
00019D7E 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019D80 0000                       		dc.w byte_161D0-Ani_Elec
00019D82 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019D86 00                         		even
00019D86 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019D96                            		even
00019D96                            		even
00019D96                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019D96                            ; --------------------------------------------------------------------------------
00019D96                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019D96                            ; --------------------------------------------------------------------------------
00019D96                            
00019D96                            SME_KiF9w:	
00019D96 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019D9A 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019D9E 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019DA2 02                         SME_KiF9w_C:	dc.b 2	
00019DA3 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019DA8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DAD 03                         SME_KiF9w_17:	dc.b 3	
00019DAE F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DB3 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019DB8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DBD 05                         SME_KiF9w_27:	dc.b 5	
00019DBE F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DC3 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019DC8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DCD F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019DD2 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019DD7 04                         SME_KiF9w_41:	dc.b 4	
00019DD8 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019DDD 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DE2 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019DE7 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019DEC 06                         SME_KiF9w_56:	dc.b 6	
00019DED F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DF2 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DF7 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019DFC F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019E01 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019E06 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019E0B 04                         SME_KiF9w_75:	dc.b 4	
00019E0C F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019E11 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E16 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019E1B F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019E20                            		even
00019E20                            		even
00019E20                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019E20                            ; ---------------------------------------------------------------------------
00019E20                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019E20                            ; ---------------------------------------------------------------------------
00019E20                            
00019E20                            SpinConvey:
00019E20 7000                       		moveq	#0,d0
00019E22 1028 0024                  		move.b	obRoutine(a0),d0
00019E26 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019E2A 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019E4A                            
00019E4A                            SpinC_Display:
00019E4A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
00019E50                            ; ===========================================================================
00019E50                            
00019E50                            loc_1629A:
00019E50 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019E56 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019E58 0C40 FF80                  		cmpi.w	#-$80,d0
00019E5C 64EC                       		bcc.s	SpinC_Display
00019E5E                            
00019E5E                            SpinC_Act1or2:
00019E5E 1028 002F                  		move.b	$2F(a0),d0
00019E62 6A00                       		bpl.s	SpinC_Delete
00019E64 0240 007F                  		andi.w	#$7F,d0
00019E68 45F8 F7C1                  		lea	(v_obj63).w,a2
00019E6C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019E72                            
00019E72                            SpinC_Delete:
00019E72 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00019E78                            ; ===========================================================================
00019E78 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019E7A 0000                       		dc.w loc_163D8-SpinC_Index
00019E7C                            ; ===========================================================================
00019E7C                            
00019E7C                            SpinC_Main:	; Routine 0
00019E7C 1028 0028                  		move.b	obSubtype(a0),d0
00019E80 6B00 0000                  		bmi.w	loc_16380
00019E84 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E88 217C 0001 94A8 0004        		move.l	#Map_Spin,obMap(a0)
00019E90 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019E96 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019E9C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019EA2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019EA8 7000                       		moveq	#0,d0
00019EAA 1028 0028                  		move.b	obSubtype(a0),d0
00019EAE 3200                       		move.w	d0,d1
00019EB0 E648                       		lsr.w	#3,d0
00019EB2 0240 001E                  		andi.w	#$1E,d0
00019EB6 45FA 0000                  		lea	off_164A6(pc),a2
00019EBA D4F2 0000                  		adda.w	(a2,d0.w),a2
00019EBE 315A 0038                  		move.w	(a2)+,$38(a0)
00019EC2 315A 0030                  		move.w	(a2)+,$30(a0)
00019EC6 214A 003C                  		move.l	a2,$3C(a0)
00019ECA 0241 000F                  		andi.w	#$F,d1
00019ECE E549                       		lsl.w	#2,d1
00019ED0 1141 0038                  		move.b	d1,$38(a0)
00019ED4 117C 0004 003A             		move.b	#4,$3A(a0)
00019EDA 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019EDE 6700                       		beq.s	loc_16356
00019EE0 117C 0001 003B             		move.b	#1,$3B(a0)
00019EE6 4428 003A                  		neg.b	$3A(a0)
00019EEA 7200                       		moveq	#0,d1
00019EEC 1228 0038                  		move.b	$38(a0),d1
00019EF0 D228 003A                  		add.b	$3A(a0),d1
00019EF4 B228 0039                  		cmp.b	$39(a0),d1
00019EF8 6500                       		bcs.s	loc_16352
00019EFA 1001                       		move.b	d1,d0
00019EFC 7200                       		moveq	#0,d1
00019EFE 4A00                       		tst.b	d0
00019F00 6A00                       		bpl.s	loc_16352
00019F02 1228 0039                  		move.b	$39(a0),d1
00019F06 5901                       		subq.b	#4,d1
00019F08                            
00019F08                            loc_16352:
00019F08 1141 0038                  		move.b	d1,$38(a0)
00019F0C                            
00019F0C                            loc_16356:
00019F0C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019F12 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019F18 4A41                       		tst.w	d1
00019F1A 6600                       		bne.s	loc_1636C
00019F1C 117C 0001 001C             		move.b	#1,obAnim(a0)
00019F22                            
00019F22                            loc_1636C:
00019F22 0C41 0008                  		cmpi.w	#8,d1
00019F26 6600                       		bne.s	loc_16378
00019F28 117C 0000 001C             		move.b	#0,obAnim(a0)
00019F2E                            
00019F2E                            loc_16378:
00019F2E 6100 A9C6                  		bsr.w	LCon_ChangeDir
00019F32 6000 0000                  		bra.w	loc_163D8
00019F36                            ; ===========================================================================
00019F36                            
00019F36                            loc_16380:
00019F36 1140 002F                  		move.b	d0,$2F(a0)
00019F3A 0240 007F                  		andi.w	#$7F,d0
00019F3E 45F8 F7C1                  		lea	(v_obj63).w,a2
00019F42 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019F48 6700                       		beq.s	loc_1639A
00019F4A 4EF9 0000 F7E8             		jmp	(DeleteObject).l
00019F50                            ; ===========================================================================
00019F50                            
00019F50                            loc_1639A:
00019F50 D040                       		add.w	d0,d0
00019F52 0240 001E                  		andi.w	#$1E,d0
00019F56 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019F5A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019F60 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019F64 321A                       		move.w	(a2)+,d1
00019F66 2248                       		movea.l	a0,a1
00019F68 6000                       		bra.s	SpinC_LoadPform
00019F6A                            ; ===========================================================================
00019F6A                            
00019F6A                            SpinC_Loop:
00019F6A 4EB9 0000 FD42             		jsr	(FindFreeObj).l
00019F70 6600                       		bne.s	loc_163D0
00019F72                            
00019F72                            SpinC_LoadPform:
00019F72 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019F76 335A 0008                  		move.w	(a2)+,obX(a1)
00019F7A 335A 000C                  		move.w	(a2)+,obY(a1)
00019F7E 301A                       		move.w	(a2)+,d0
00019F80 1340 0028                  		move.b	d0,obSubtype(a1)
00019F84                            
00019F84                            loc_163D0:
00019F84 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019F88                            
00019F88 588F                       		addq.l	#4,sp
00019F8A 4E75                       		rts	
00019F8C                            ; ===========================================================================
00019F8C                            
00019F8C                            loc_163D8:	; Routine 2
00019F8C 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019F92 4EB9 0000 C85E             		jsr	(AnimateSprite).l
00019F98 4A28 001A                  		tst.b	obFrame(a0)
00019F9C 6600                       		bne.s	loc_16404
00019F9E 3F28 0008                  		move.w	obX(a0),-(sp)
00019FA2 6100 0000                  		bsr.w	loc_16424
00019FA6 323C 001B                  		move.w	#$1B,d1
00019FAA 343C 0007                  		move.w	#7,d2
00019FAE 3602                       		move.w	d2,d3
00019FB0 5243                       		addq.w	#1,d3
00019FB2 381F                       		move.w	(sp)+,d4
00019FB4 4EF9 0001 1D08             		jmp	SolidObject
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            loc_16404:
00019FBA 0828 0003 0022             		btst	#3,obStatus(a0)
00019FC0 6700                       		beq.s	loc_16420
00019FC2 43F8 D000                  		lea	(v_objspace).w,a1
00019FC6 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019FCC 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019FD2 4228 0025                  		clr.b	obSolid(a0)
00019FD6                            
00019FD6                            loc_16420:
00019FD6 6000 0000                  		bra.w	loc_16424
00019FDA                            
00019FDA                            loc_16424:
00019FDA 3028 0008                  		move.w	obX(a0),d0
00019FDE B068 0034                  		cmp.w	$34(a0),d0
00019FE2 6600                       		bne.s	loc_16484
00019FE4 3028 000C                  		move.w	obY(a0),d0
00019FE8 B068 0036                  		cmp.w	$36(a0),d0
00019FEC 6600                       		bne.s	loc_16484
00019FEE 7200                       		moveq	#0,d1
00019FF0 1228 0038                  		move.b	$38(a0),d1
00019FF4 D228 003A                  		add.b	$3A(a0),d1
00019FF8 B228 0039                  		cmp.b	$39(a0),d1
00019FFC 6500                       		bcs.s	loc_16456
00019FFE 1001                       		move.b	d1,d0
0001A000 7200                       		moveq	#0,d1
0001A002 4A00                       		tst.b	d0
0001A004 6A00                       		bpl.s	loc_16456
0001A006 1228 0039                  		move.b	$39(a0),d1
0001A00A 5901                       		subq.b	#4,d1
0001A00C                            
0001A00C                            loc_16456:
0001A00C 1141 0038                  		move.b	d1,$38(a0)
0001A010 2268 003C                  		movea.l	$3C(a0),a1
0001A014 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001A01A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001A020 4A41                       		tst.w	d1
0001A022 6600                       		bne.s	loc_16474
0001A024 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A02A                            
0001A02A                            loc_16474:
0001A02A 0C41 0008                  		cmpi.w	#8,d1
0001A02E 6600                       		bne.s	loc_16480
0001A030 117C 0000 001C             		move.b	#0,obAnim(a0)
0001A036                            
0001A036                            loc_16480:
0001A036 6100 A8BE                  		bsr.w	LCon_ChangeDir
0001A03A                            
0001A03A                            loc_16484:
0001A03A 4EF9 0000 F794             		jmp	(SpeedToPos).l
0001A03A 4EF9 0000 F794             		jmp	(SpeedToPos).l
0001A040                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001A040                            ; ---------------------------------------------------------------------------
0001A040                            ; Animation script - platform on conveyor belt (SBZ)
0001A040                            ; ---------------------------------------------------------------------------
0001A040 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
0001A042 0000                       		dc.w @still-Ani_SpinConvey
0001A044 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001A051 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001A058 00                         		even
0001A058 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001A05C 00                         		even
0001A05C 00                         		even
0001A05C                            
0001A05C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001A062 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001A068 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001A07C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001A090 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001A0A4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001A0B8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001A0CC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001A0E0                            ; ===========================================================================
0001A0E0                            
0001A0E0                            		include	"_incObj\70 Girder Block.asm"
0001A0E0                            ; ---------------------------------------------------------------------------
0001A0E0                            ; Object 70 - large girder block (SBZ)
0001A0E0                            ; ---------------------------------------------------------------------------
0001A0E0                            
0001A0E0                            Girder:
0001A0E0 7000                       		moveq	#0,d0
0001A0E2 1028 0024                  		move.b	obRoutine(a0),d0
0001A0E6 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001A0EA 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001A0EE                            ; ===========================================================================
0001A0EE 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
0001A0F0 0000                       		dc.w Gird_Action-Gird_Index
0001A0F2                            
0001A0F2 =00000016                  gird_height:	equ $16
0001A0F2 =00000032                  gird_origX:	equ $32		; original x-axis position
0001A0F2 =00000030                  gird_origY:	equ $30		; original y-axis position
0001A0F2 =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001A0F2 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001A0F2 =0000003A                  gird_delay:	equ $3A		; delay for movement
0001A0F2                            ; ===========================================================================
0001A0F2                            
0001A0F2                            Gird_Main:	; Routine 0
0001A0F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0F6 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001A0FE 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001A104 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A10A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A110 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001A116 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001A11C 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
0001A122 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001A128 6100 0000                  		bsr.w	Gird_ChgMove
0001A12C                            
0001A12C                            Gird_Action:	; Routine 2
0001A12C 3F28 0008                  		move.w	obX(a0),-(sp)
0001A130 4A68 003A                  		tst.w	gird_delay(a0)
0001A134 6700                       		beq.s	@beginmove
0001A136 5368 003A                  		subq.w	#1,gird_delay(a0)
0001A13A 6600                       		bne.s	@solid
0001A13C                            
0001A13C                            	@beginmove:
0001A13C 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001A142 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001A146 6600                       		bne.s	@solid		; if time remains, branch
0001A148 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001A14C                            
0001A14C                            	@solid:
0001A14C 381F                       		move.w	(sp)+,d4
0001A14E 4A28 0001                  		tst.b	obRender(a0)
0001A152 6A00                       		bpl.s	@chkdel
0001A154 7200                       		moveq	#0,d1
0001A156 1228 0014                  		move.b	obActWid(a0),d1
0001A15A 0641 000B                  		addi.w	#$B,d1
0001A15E 7400                       		moveq	#0,d2
0001A160 1428 0016                  		move.b	gird_height(a0),d2
0001A164 3602                       		move.w	d2,d3
0001A166 5243                       		addq.w	#1,d3
0001A168 4EB9 0001 1D08             		jsr	SolidObject
0001A16E                            
0001A16E                            	@chkdel:
0001A18A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001A190                            
0001A190                            	@delete:
0001A190 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001A196                            ; ===========================================================================
0001A196                            
0001A196                            Gird_ChgMove:
0001A196 1028 0038                  		move.b	gird_set(a0),d0
0001A19A 0240 0018                  		andi.w	#$18,d0
0001A19E 43F9 0000 0000             		lea	(@settings).l,a1
0001A1A4 43F1 0000                  		lea	(a1,d0.w),a1
0001A1A8 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001A1AC 3159 0012                  		move.w	(a1)+,obVelY(a0)
0001A1B0 3159 0034                  		move.w	(a1)+,gird_time(a0)
0001A1B4 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001A1B8 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001A1BE 4E75                       		rts	
0001A1C0                            ; ===========================================================================
0001A1C0                            @settings:	;   x-speed, y-speed, duration
0001A1C0 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001A1C8 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
0001A1D0 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001A1D8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A1D8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A1E0                            Map_Gird:	include	"_maps\Girder Block.asm"
0001A1E0                            ; ---------------------------------------------------------------------------
0001A1E0                            ; Sprite mappings - large girder block (SBZ)
0001A1E0                            ; ---------------------------------------------------------------------------
0001A1E0                            Map_Gird_internal:
0001A1E0 0000                       		dc.w @girder-Map_Gird_internal
0001A1E2 0C                         @girder:	dc.b $C
0001A1E3 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001A1E8 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001A1ED E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001A1F2 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001A1F7 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001A1FC 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001A201 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001A206 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001A20B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001A210 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001A215 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001A21A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001A220 00                         		even
0001A220 00                         		even
0001A220                            		include	"_incObj\72 Teleporter.asm"
0001A220                            ; ---------------------------------------------------------------------------
0001A220                            ; Object 72 - teleporter (SBZ)
0001A220                            ; ---------------------------------------------------------------------------
0001A220                            
0001A220                            Teleport:
0001A220 7000                       		moveq	#0,d0
0001A222 1028 0024                  		move.b	obRoutine(a0),d0
0001A226 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001A22A 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001A24A 4E75                       		rts	
0001A24C                            
0001A24C                            	@delete:
0001A24C 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001A252                            ; ===========================================================================
0001A252 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001A254 0000                       		dc.w loc_166C8-Tele_Index
0001A256 0000                       		dc.w loc_1675E-Tele_Index
0001A258 0000                       		dc.w loc_16798-Tele_Index
0001A25A                            ; ===========================================================================
0001A25A                            
0001A25A                            Tele_Main:	; Routine 0
0001A25A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A25E 1028 0028                  		move.b	obSubtype(a0),d0
0001A262 D040                       		add.w	d0,d0
0001A264 0240 001E                  		andi.w	#$1E,d0
0001A268 45FA 0000                  		lea	Tele_Data(pc),a2
0001A26C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A270 315A 003A                  		move.w	(a2)+,$3A(a0)
0001A274 214A 003C                  		move.l	a2,$3C(a0)
0001A278 315A 0036                  		move.w	(a2)+,$36(a0)
0001A27C 315A 0038                  		move.w	(a2)+,$38(a0)
0001A280                            
0001A280                            loc_166C8:	; Routine 2
0001A280 43F8 D000                  		lea	(v_player).w,a1
0001A284 3029 0008                  		move.w	obX(a1),d0
0001A288 9068 0008                  		sub.w	obX(a0),d0
0001A28C 0828 0000 0022             		btst	#0,obStatus(a0)
0001A292 6700                       		beq.s	loc_166E0
0001A294 0640 000F                  		addi.w	#$F,d0
0001A298                            
0001A298                            loc_166E0:
0001A298 0C40 0010                  		cmpi.w	#$10,d0
0001A29C 6400                       		bcc.s	locret_1675C
0001A29E 3229 000C                  		move.w	obY(a1),d1
0001A2A2 9268 000C                  		sub.w	obY(a0),d1
0001A2A6 0641 0020                  		addi.w	#$20,d1
0001A2AA 0C41 0040                  		cmpi.w	#$40,d1
0001A2AE 6400                       		bcc.s	locret_1675C
0001A2B0 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A2B4 6600                       		bne.s	locret_1675C
0001A2B6 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001A2BC 6600                       		bne.s	loc_1670E
0001A2BE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001A2C4 6500                       		bcs.s	locret_1675C
0001A2C6                            
0001A2C6                            loc_1670E:
0001A2C6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A2CA 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001A2D0 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001A2D6 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001A2DC 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A2E2 337C 0000 0012             		move.w	#0,obVelY(a1)
0001A2E8 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001A2EE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001A2F4 08E9 0001 0022             		bset	#1,obStatus(a1)
0001A2FA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A300 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A306 4228 0032                  		clr.b	$32(a0)
0001A314                            
0001A314                            locret_1675C:
0001A314 4E75                       		rts	
0001A316                            ; ===========================================================================
0001A316                            
0001A316                            loc_1675E:	; Routine 4
0001A316 43F8 D000                  		lea	(v_player).w,a1
0001A31A 1028 0032                  		move.b	$32(a0),d0
0001A31E 5428 0032                  		addq.b	#2,$32(a0)
0001A322 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001A328 EA40                       		asr.w	#5,d0
0001A32A 3428 000C                  		move.w	obY(a0),d2
0001A32E 9440                       		sub.w	d0,d2
0001A330 3342 000C                  		move.w	d2,obY(a1)
0001A334 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001A33A 6600                       		bne.s	locret_16796
0001A33C 6100 0000                  		bsr.w	sub_1681C
0001A340 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A34E                            
0001A34E                            locret_16796:
0001A34E 4E75                       		rts	
0001A350                            ; ===========================================================================
0001A350                            
0001A350                            loc_16798:	; Routine 6
0001A350 588F                       		addq.l	#4,sp
0001A352 43F8 D000                  		lea	(v_player).w,a1
0001A356 5328 002E                  		subq.b	#1,$2E(a0)
0001A35A 6A00                       		bpl.s	loc_167DA
0001A35C 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001A362 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A368 7200                       		moveq	#0,d1
0001A36A 1228 003A                  		move.b	$3A(a0),d1
0001A36E 5801                       		addq.b	#4,d1
0001A370 B228 003B                  		cmp.b	$3B(a0),d1
0001A374 6500                       		bcs.s	loc_167C2
0001A376 7200                       		moveq	#0,d1
0001A378 6000                       		bra.s	loc_16800
0001A37A                            ; ===========================================================================
0001A37A                            
0001A37A                            loc_167C2:
0001A37A 1141 003A                  		move.b	d1,$3A(a0)
0001A37E 2468 003C                  		movea.l	$3C(a0),a2
0001A382 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001A388 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001A38E 6000 0000                  		bra.w	sub_1681C
0001A392                            ; ===========================================================================
0001A392                            
0001A392                            loc_167DA:
0001A392 2429 0008                  		move.l	obX(a1),d2
0001A396 2629 000C                  		move.l	obY(a1),d3
0001A39A 3029 0010                  		move.w	obVelX(a1),d0
0001A39E 48C0                       		ext.l	d0
0001A3A0 E180                       		asl.l	#8,d0
0001A3A2 D480                       		add.l	d0,d2
0001A3A4 3029 0012                  		move.w	obVelY(a1),d0
0001A3A8 48C0                       		ext.l	d0
0001A3AA E180                       		asl.l	#8,d0
0001A3AC D680                       		add.l	d0,d3
0001A3AE 2342 0008                  		move.l	d2,obX(a1)
0001A3B2 2343 000C                  		move.l	d3,obY(a1)
0001A3B6 4E75                       		rts	
0001A3B8                            ; ===========================================================================
0001A3B8                            
0001A3B8                            loc_16800:
0001A3B8 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001A3BE 4228 0024                  		clr.b	obRoutine(a0)
0001A3C2 4238 F7C8                  		clr.b	(f_lockmulti).w
0001A3C6 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A3CC 337C 0200 0012             		move.w	#$200,obVelY(a1)
0001A3D2 4E75                       		rts	
0001A3D4                            
0001A3D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A3D4                            
0001A3D4                            
0001A3D4                            sub_1681C:
0001A3D4 7000                       		moveq	#0,d0
0001A3D6 343C 1000                  		move.w	#$1000,d2
0001A3DA 3028 0036                  		move.w	$36(a0),d0
0001A3DE 9069 0008                  		sub.w	obX(a1),d0
0001A3E2 6C00                       		bge.s	loc_16830
0001A3E4 4440                       		neg.w	d0
0001A3E6 4442                       		neg.w	d2
0001A3E8                            
0001A3E8                            loc_16830:
0001A3E8 7200                       		moveq	#0,d1
0001A3EA 363C 1000                  		move.w	#$1000,d3
0001A3EE 3228 0038                  		move.w	$38(a0),d1
0001A3F2 9269 000C                  		sub.w	obY(a1),d1
0001A3F6 6C00                       		bge.s	loc_16844
0001A3F8 4441                       		neg.w	d1
0001A3FA 4443                       		neg.w	d3
0001A3FC                            
0001A3FC                            loc_16844:
0001A3FC B240                       		cmp.w	d0,d1
0001A3FE 6500                       		bcs.s	loc_1687A
0001A400 7200                       		moveq	#0,d1
0001A402 3228 0038                  		move.w	$38(a0),d1
0001A406 9269 000C                  		sub.w	obY(a1),d1
0001A40A 4841                       		swap	d1
0001A40C 83C3                       		divs.w	d3,d1
0001A40E 7000                       		moveq	#0,d0
0001A410 3028 0036                  		move.w	$36(a0),d0
0001A414 9069 0008                  		sub.w	obX(a1),d0
0001A418 6700                       		beq.s	loc_16866
0001A41A 4840                       		swap	d0
0001A41C 81C1                       		divs.w	d1,d0
0001A41E                            
0001A41E                            loc_16866:
0001A41E 3340 0010                  		move.w	d0,obVelX(a1)
0001A422 3343 0012                  		move.w	d3,obVelY(a1)
0001A426 4A41                       		tst.w	d1
0001A428 6A00                       		bpl.s	loc_16874
0001A42A 4441                       		neg.w	d1
0001A42C                            
0001A42C                            loc_16874:
0001A42C 3141 002E                  		move.w	d1,$2E(a0)
0001A430 4E75                       		rts	
0001A432                            ; ===========================================================================
0001A432                            
0001A432                            loc_1687A:
0001A432 7000                       		moveq	#0,d0
0001A434 3028 0036                  		move.w	$36(a0),d0
0001A438 9069 0008                  		sub.w	obX(a1),d0
0001A43C 4840                       		swap	d0
0001A43E 81C2                       		divs.w	d2,d0
0001A440 7200                       		moveq	#0,d1
0001A442 3228 0038                  		move.w	$38(a0),d1
0001A446 9269 000C                  		sub.w	obY(a1),d1
0001A44A 6700                       		beq.s	loc_16898
0001A44C 4841                       		swap	d1
0001A44E 83C0                       		divs.w	d0,d1
0001A450                            
0001A450                            loc_16898:
0001A450 3341 0012                  		move.w	d1,obVelY(a1)
0001A454 3342 0010                  		move.w	d2,obVelX(a1)
0001A458 4A40                       		tst.w	d0
0001A45A 6A00                       		bpl.s	loc_168A6
0001A45C 4440                       		neg.w	d0
0001A45E                            
0001A45E                            loc_168A6:
0001A45E 3140 002E                  		move.w	d0,$2E(a0)
0001A462 4E75                       		rts	
0001A464                            ; End of function sub_1681C
0001A464                            
0001A464                            ; ===========================================================================
0001A464 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001A46A 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001A470 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
0001A474 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001A47A 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001A480 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001A486 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001A48C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001A492 0884 0298 0894             		dc.w $884, $298, $894
0001A498 0270 0894 0190             		dc.w $270, $894, $190
0001A49E 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001A4A4 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001A4AA 1184 0498 1158             		dc.w $1184, $498, $1158
0001A4B0 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001A4B6 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001A4BC 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001A4C2 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001A4C8 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001A4CE 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001A4D4 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001A4DA 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001A4E0 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001A4E6 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A4E6 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A4EC                            
0001A4EC                            		include	"_incObj\78 Caterkiller.asm"
0001A4EC                            ; ---------------------------------------------------------------------------
0001A4EC                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001A4EC                            ; ---------------------------------------------------------------------------
0001A4EC                            
0001A4EC                            Caterkiller:
0001A4EC 7000                       		moveq	#0,d0
0001A4EE 1028 0024                  		move.b	obRoutine(a0),d0
0001A4F2 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001A4F6 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001A4FA                            ; ===========================================================================
0001A4FA 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001A4FC 0000                       		dc.w Cat_Head-Cat_Index
0001A4FE 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A500 0000                       		dc.w Cat_BodySeg2-Cat_Index
0001A502 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A504 0000                       		dc.w Cat_Delete-Cat_Index
0001A506 0000                       		dc.w loc_16CC0-Cat_Index
0001A508                            
0001A508 =0000003C                  cat_parent:	equ $3C		; address of parent object
0001A508                            ; ===========================================================================
0001A508                            
0001A508                            locret_16950:
0001A508 4E75                       		rts	
0001A50A                            ; ===========================================================================
0001A50A                            
0001A50A                            Cat_Main:	; Routine 0
0001A50A 117C 0007 0016             		move.b	#7,obHeight(a0)
0001A510 117C 0008 0017             		move.b	#8,obWidth(a0)
0001A516 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001A51C 4EB9 0001 8986             		jsr	(ObjFloorDist).l
0001A522 4A41                       		tst.w	d1
0001A524 6AE2                       		bpl.s	locret_16950
0001A526 D368 000C                  		add.w	d1,obY(a0)
0001A52A 4268 0012                  		clr.w	obVelY(a0)
0001A52E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A532 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
0001A53A 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001A540 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
0001A546 6700                       		beq.s	@isscrapbrain
0001A548 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001A54E                            
0001A54E                            	@isscrapbrain:
0001A54E 0228 0003 0001             		andi.b	#3,obRender(a0)
0001A554 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A55A 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001A560 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A566 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A56C 117C 000B 0020             		move.b	#$B,obColType(a0)
0001A572 3428 0008                  		move.w	obX(a0),d2
0001A576 7A0C                       		moveq	#$C,d5
0001A578 0828 0000 0022             		btst	#0,obStatus(a0)
0001A57E 6700                       		beq.s	@noflip
0001A580 4445                       		neg.w	d5
0001A582                            
0001A582                            	@noflip:
0001A582 1C3C 0004                  		move.b	#4,d6
0001A586 7600                       		moveq	#0,d3
0001A588 7804                       		moveq	#4,d4
0001A58A 2448                       		movea.l	a0,a2
0001A58C 7202                       		moveq	#2,d1
0001A58E                            
0001A58E                            Cat_Loop:
0001A58E 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001A594 6600 0000                  			bne.w	Cat_ChkGone
0001A598 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001A59C 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001A5A0 5406                       		addq.b	#2,d6		; alternate between the two
0001A5A2 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001A5A8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001A5AE 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001A5B4 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A5BA 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001A5C0 D445                       		add.w	d5,d2
0001A5C2 3342 0008                  		move.w	d2,obX(a1)
0001A5C6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A5CC 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001A5D2 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001A5D8 137C 0008 001A             		move.b	#8,obFrame(a1)
0001A5DE 234A 003C                  		move.l	a2,cat_parent(a1)
0001A5E2 1344 003C                  		move.b	d4,cat_parent(a1)
0001A5E6 5804                       		addq.b	#4,d4
0001A5E8 2449                       		movea.l	a1,a2
0001A5EA                            
0001A5EA                            	@fail:
0001A5EA 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001A5EE                            
0001A5EE 117C 0007 002A             		move.b	#7,$2A(a0)
0001A5F4 4228 003C                  		clr.b	cat_parent(a0)
0001A5F8                            
0001A5F8                            Cat_Head:	; Routine 2
0001A5F8 4A28 0022                  		tst.b	obStatus(a0)
0001A5FC 6B00 0000                  		bmi.w	loc_16C96
0001A600 7000                       		moveq	#0,d0
0001A602 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A606 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001A60A 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001A60E 1228 002B                  		move.b	$2B(a0),d1
0001A612 6A00                       		bpl.s	@display
0001A614 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A61A 1028 0026                  		move.b	obAngle(a0),d0
0001A61E 0240 007F                  		andi.w	#$7F,d0
0001A622 5828 0026                  		addq.b	#4,obAngle(a0)
0001A626 1031 0000                  		move.b	(a1,d0.w),d0
0001A62A 6A00                       		bpl.s	@animate
0001A62C 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A632 6000                       		bra.s	@display
0001A634                            
0001A634                            	@animate:
0001A634 0201 0010                  		andi.b	#$10,d1
0001A638 D001                       		add.b	d1,d0
0001A63A 1140 001A                  		move.b	d0,obFrame(a0)
0001A63E                            
0001A63E                            	@display:
0001A65C 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001A662                            
0001A662                            	Cat_ChkGone:
0001A662 45F8 FC00                  		lea	(v_objstate).w,a2
0001A666 7000                       		moveq	#0,d0
0001A668 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A66C 6700                       		beq.s	@delete
0001A66E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A674                            
0001A674                            	@delete:
0001A674 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001A67A 4E75                       		rts	
0001A67C                            ; ===========================================================================
0001A67C                            
0001A67C                            Cat_Delete:	; Routine $A
0001A67C 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001A682                            ; ===========================================================================
0001A682 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001A684 0000                       		dc.w loc_16B02-Cat_Index2
0001A686                            ; ===========================================================================
0001A686                            
0001A686                            @wait:
0001A686 5328 002A                  		subq.b	#1,$2A(a0)
0001A68A 6B00                       		bmi.s	@move
0001A68C 4E75                       		rts	
0001A68E                            ; ===========================================================================
0001A68E                            
0001A68E                            @move:
0001A68E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A692 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A698 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001A69E 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001A6A4 0868 0004 002B             		bchg	#4,$2B(a0)
0001A6AA 6600                       		bne.s	loc_16AFC
0001A6AC 4268 0010                  		clr.w	obVelX(a0)
0001A6B0 4468 001C                  		neg.w	obAnim(a0)
0001A6B4                            
0001A6B4                            loc_16AFC:
0001A6B4 08E8 0007 002B             		bset	#7,$2B(a0)
0001A6BA                            
0001A6BA                            loc_16B02:
0001A6BA 5328 002A                  		subq.b	#1,$2A(a0)
0001A6BE 6B00                       		bmi.s	@loc_16B5E
0001A6C0 4A68 0010                  			tst.w	obVelX(a0)
0001A6C4 6700                       			beq.s	@notmoving
0001A6C6 2428 0008                  			move.l	obX(a0),d2
0001A6CA 2602                       			move.l	d2,d3
0001A6CC 3028 0010                  		move.w	obVelX(a0),d0
0001A6D0 0828 0000 0022             		btst	#0,obStatus(a0)
0001A6D6 6700                       		beq.s	@noflip
0001A6D8 4440                       		neg.w	d0
0001A6DA                            
0001A6DA                            	@noflip:
0001A6DA 48C0                       		ext.l	d0
0001A6DC E180                       		asl.l	#8,d0
0001A6DE D480                       		add.l	d0,d2
0001A6E0 2142 0008                  		move.l	d2,obX(a0)
0001A6E4 4843                       			swap	d3
0001A6E6 B668 0008                  			cmp.w	obX(a0),d3
0001A6EA 6700                       			beq.s	@notmoving
0001A6EC 4EB9 0001 8986             			jsr	(ObjFloorDist).l
0001A6F2 0C41 FFF8                  			cmpi.w	#-8,d1
0001A6F6 6D00                       			blt.s	@loc_16B70
0001A6F8 0C41 000C                  			cmpi.w	#$C,d1
0001A6FC 6C00                       			bge.s	@loc_16B70
0001A6FE D368 000C                  			add.w	d1,obY(a0)
0001A702 7000                       		moveq	#0,d0
0001A704 1028 003C                  		move.b	cat_parent(a0),d0
0001A708 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A70C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A712 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A716                            
0001A716                            	@notmoving:
0001A716 4E75                       		rts	
0001A718                            ; ===========================================================================
0001A718                            
0001A718                            @loc_16B5E:
0001A718 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A71C 117C 0007 002A             		move.b	#7,$2A(a0)
0001A722 4268 0010                  			clr.w	obVelX(a0)
0001A726 4268 001C                  			clr.w	obAnim(a0)
0001A72A 4E75                       		rts	
0001A72C                            ; ===========================================================================
0001A72C                            
0001A72C                            @loc_16B70:
0001A72C 7000                       			moveq	#0,d0
0001A72E 1028 003C                  			move.b	cat_parent(a0),d0
0001A732 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
0001A738 4468 000A                  			neg.w	obX+2(a0)
0001A73C 6700                       			beq.s	@loc_1730A
0001A73E 0828 0000 0022             			btst	#0,obStatus(a0)
0001A744 6700                       			beq.s	@loc_1730A
0001A746 5368 0008                  			subq.w	#1,obX(a0)
0001A74A 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A74E 7000                       			moveq	#0,d0
0001A750 1028 003C                  			move.b	cat_parent(a0),d0
0001A754 4230 002C                  			clr.b	$2C(a0,d0)
0001A758                            	@loc_1730A:
0001A758 0868 0000 0022             			bchg	#0,obStatus(a0)
0001A75E 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
0001A764 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A768 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A76E 4E75                       		rts	
0001A770                            ; ===========================================================================
0001A770                            
0001A770                            Cat_BodySeg2:	; Routine 6
0001A770 2268 003C                  		movea.l	cat_parent(a0),a1
0001A774 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A77A 6A00                       		bpl.s	Cat_BodySeg1
0001A77C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A782 1028 0026                  		move.b	obAngle(a0),d0
0001A786 0240 007F                  		andi.w	#$7F,d0
0001A78A 5828 0026                  		addq.b	#4,obAngle(a0)
0001A78E 4A31 0004                  		tst.b	4(a1,d0.w)
0001A792 6A00                       		bpl.s	Cat_AniBody
0001A794 5828 0026                  		addq.b	#4,obAngle(a0)
0001A798                            
0001A798                            Cat_AniBody:
0001A798 1031 0000                  		move.b	(a1,d0.w),d0
0001A79C 5000                       		addq.b	#8,d0
0001A79E 1140 001A                  		move.b	d0,obFrame(a0)
0001A7A2                            
0001A7A2                            Cat_BodySeg1:	; Routine 4, 8
0001A7A2 2268 003C                  		movea.l	cat_parent(a0),a1
0001A7A6 4A28 0022                  		tst.b	obStatus(a0)
0001A7AA 6B00 0000                  		bmi.w	loc_16C90
0001A7AE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A7B4 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
0001A7BA 6700 0000                  		beq.w	loc_16C64
0001A7BE 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
0001A7C4 3029 0010                  		move.w	obVelX(a1),d0
0001A7C8 D068 001C                  			add.w	obAnim(a0),d0
0001A7CC 3140 0010                  		move.w	d0,obVelX(a0)
0001A7D0 2428 0008                  		move.l	obX(a0),d2
0001A7D4 2602                       		move.l	d2,d3
0001A7D6 3028 0010                  		move.w	obVelX(a0),d0
0001A7DA 0828 0000 0022             		btst	#0,obStatus(a0)
0001A7E0 6700                       		beq.s	loc_16C0C
0001A7E2 4440                       		neg.w	d0
0001A7E4                            
0001A7E4                            loc_16C0C:
0001A7E4 48C0                       		ext.l	d0
0001A7E6 E180                       		asl.l	#8,d0
0001A7E8 D480                       		add.l	d0,d2
0001A7EA 2142 0008                  		move.l	d2,obX(a0)
0001A7EE 4843                       		swap	d3
0001A7F0 B668 0008                  		cmp.w	obX(a0),d3
0001A7F4 6700                       		beq.s	loc_16C64
0001A7F6 7000                       		moveq	#0,d0
0001A7F8 1028 003C                  		move.b	cat_parent(a0),d0
0001A7FC 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A800 0C01 0080                  		cmpi.b	#$80,d1
0001A804 6600                       		bne.s	loc_16C50
0001A806 1181 002C                  			move.b	d1,$2C(a0,d0)
0001A80A 4468 000A                  			neg.w	obX+2(a0)
0001A80E 6700                       			beq.s	locj_173E4
0001A810 0828 0000 0022             			btst	#0,obStatus(a0)
0001A816 6700                       			beq.s	locj_173E4
0001A818 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
0001A81E 6600                       			bne.s	locj_173E4
0001A820 5368 0008                  			subq.w	#1,obX(a0)
0001A824 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A828 7000                       			moveq	#0,d0
0001A82A 1028 003C                  			move.b	cat_parent(a0),d0
0001A82E 4230 002C                  			clr.b	$2C(a0,d0)
0001A832                            	locj_173E4:
0001A832 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A838 1168 0022 0001             		move.b	obStatus(a0),1(a0)
0001A83E 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A842 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A848 6000                       		bra.s	loc_16C64
0001A84A                            ; ===========================================================================
0001A84A                            
0001A84A                            loc_16C50:
0001A84A 4881                       		ext.w	d1
0001A84C D368 000C                  		add.w	d1,obY(a0)
0001A850 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A854 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A85A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A85E                            
0001A85E                            loc_16C64:
0001A85E 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
0001A864 6700                       		beq.s	loc_16C90
0001A866 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
0001A86A 6700                       		beq.s	loc_16C7C
0001A86C 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
0001A872 6600                       		bne.s	loc_16C82
0001A874                            
0001A874                            loc_16C7C:
0001A874 4229 0020                  		clr.b    $20(a1)
0001A878 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001A87E                            
0001A87E                            loc_16C82:
0001A87E 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001A884                            
0001A884                            ; ===========================================================================
0001A884 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            loc_16C90:
0001A88C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001A892                            
0001A892                            loc_16C96:
0001A892 7000                       		moveq	#0,d0
0001A894 1028 0024                  		move.b	obRoutine(a0),d0
0001A898 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
0001A89C 0828 0000 0022             		btst	#0,obStatus(a0)
0001A8A2 6700                       		beq.s	loc_16CAA
0001A8A4 4440                       		neg.w	d0
0001A8A6                            
0001A8A6                            loc_16CAA:
0001A8A6 3140 0010                  		move.w	d0,obVelX(a0)
0001A8AA 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A8B0 117C 000C 0024             		move.b	#$C,obRoutine(a0)
0001A8B6 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
0001A8BC                            
0001A8BC                            loc_16CC0:	; Routine $C
0001A8BC 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001A8C2 4A68 0012                  		tst.w	obVelY(a0)
0001A8C6 6B00                       		bmi.s	loc_16CE0
0001A8C8 4EB9 0001 8986             		jsr	(ObjFloorDist).l
0001A8CE 4A41                       		tst.w	d1
0001A8D0 6A00                       		bpl.s	loc_16CE0
0001A8D2 D368 000C                  		add.w	d1,obY(a0)
0001A8D6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A8DC                            
0001A8DC                            loc_16CE0:
0001A8DC 4A28 0001                  		tst.b	obRender(a0)
0001A8E0 6A00 FD80                  		bpl.w	Cat_ChkGone
0001A8E4 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001A8E4 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001A8EA                            		include	"_anim\Caterkiller.asm"
0001A8EA                            ; ---------------------------------------------------------------------------
0001A8EA                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A8EA                            ; ---------------------------------------------------------------------------
0001A8EA 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A8FA 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A90A 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001A91A 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001A92A 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001A93A 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001A94A 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001A95A 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001A96A                            		even
0001A96A                            		even
0001A96A                            Map_Cat:	include	"_maps\Caterkiller.asm"
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A                            Map_Cat_internal:
0001A96A 0000                       		dc.w byte_16D9E-Map_Cat_internal
0001A96C 0000                       		dc.w byte_16DA4-Map_Cat_internal
0001A96E 0000                       		dc.w byte_16DAA-Map_Cat_internal
0001A970 0000                       		dc.w byte_16DB0-Map_Cat_internal
0001A972 0000                       		dc.w byte_16DB6-Map_Cat_internal
0001A974 0000                       		dc.w byte_16DBC-Map_Cat_internal
0001A976 0000                       		dc.w byte_16DC2-Map_Cat_internal
0001A978 0000                       		dc.w byte_16DC8-Map_Cat_internal
0001A97A 0000                       		dc.w byte_16DCE-Map_Cat_internal
0001A97C 0000                       		dc.w byte_16DD4-Map_Cat_internal
0001A97E 0000                       		dc.w byte_16DDA-Map_Cat_internal
0001A980 0000                       		dc.w byte_16DE0-Map_Cat_internal
0001A982 0000                       		dc.w byte_16DE6-Map_Cat_internal
0001A984 0000                       		dc.w byte_16DEC-Map_Cat_internal
0001A986 0000                       		dc.w byte_16DF2-Map_Cat_internal
0001A988 0000                       		dc.w byte_16DF8-Map_Cat_internal
0001A98A 0000                       		dc.w byte_16DFE-Map_Cat_internal
0001A98C 0000                       		dc.w byte_16E04-Map_Cat_internal
0001A98E 0000                       		dc.w byte_16E0A-Map_Cat_internal
0001A990 0000                       		dc.w byte_16E10-Map_Cat_internal
0001A992 0000                       		dc.w byte_16E16-Map_Cat_internal
0001A994 0000                       		dc.w byte_16E1C-Map_Cat_internal
0001A996 0000                       		dc.w byte_16E22-Map_Cat_internal
0001A998 0000                       		dc.w byte_16E28-Map_Cat_internal
0001A99A 01                         byte_16D9E:	dc.b 1
0001A99B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001A9A0 01                         byte_16DA4:	dc.b 1
0001A9A1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001A9A6 01                         byte_16DAA:	dc.b 1
0001A9A7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001A9AC 01                         byte_16DB0:	dc.b 1
0001A9AD EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001A9B2 01                         byte_16DB6:	dc.b 1
0001A9B3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001A9B8 01                         byte_16DBC:	dc.b 1
0001A9B9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001A9BE 01                         byte_16DC2:	dc.b 1
0001A9BF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001A9C4 01                         byte_16DC8:	dc.b 1
0001A9C5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001A9CA 01                         byte_16DCE:	dc.b 1
0001A9CB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001A9D0 01                         byte_16DD4:	dc.b 1
0001A9D1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001A9D6 01                         byte_16DDA:	dc.b 1
0001A9D7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001A9DC 01                         byte_16DE0:	dc.b 1
0001A9DD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001A9E2 01                         byte_16DE6:	dc.b 1
0001A9E3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001A9E8 01                         byte_16DEC:	dc.b 1
0001A9E9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001A9EE 01                         byte_16DF2:	dc.b 1
0001A9EF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001A9F4 01                         byte_16DF8:	dc.b 1
0001A9F5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001A9FA 01                         byte_16DFE:	dc.b 1
0001A9FB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001AA00 01                         byte_16E04:	dc.b 1
0001AA01 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001AA06 01                         byte_16E0A:	dc.b 1
0001AA07 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001AA0C 01                         byte_16E10:	dc.b 1
0001AA0D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001AA12 01                         byte_16E16:	dc.b 1
0001AA13 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001AA18 01                         byte_16E1C:	dc.b 1
0001AA19 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001AA1E 01                         byte_16E22:	dc.b 1
0001AA1F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001AA24 01                         byte_16E28:	dc.b 1
0001AA25 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001AA2A                            		even
0001AA2A                            		even
0001AA2A                            
0001AA2A                            		include	"_incObj\79 Lamppost.asm"
0001AA2A                            ; ---------------------------------------------------------------------------
0001AA2A                            ; Object 79 - lamppost
0001AA2A                            ; ---------------------------------------------------------------------------
0001AA2A                            
0001AA2A                            Lamppost:
0001AA2A 7000                       		moveq	#0,d0
0001AA2C 1028 0024                  		move.b	obRoutine(a0),d0
0001AA30 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001AA34 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001AA38 4EF9 0001 1870             		jmp	(RememberState).l
0001AA3E                            ; ===========================================================================
0001AA3E 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001AA40 0000                       		dc.w Lamp_Blue-Lamp_Index
0001AA42 0000                       		dc.w Lamp_Finish-Lamp_Index
0001AA44 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001AA46                            
0001AA46 =00000030                  lamp_origX:	equ $30		; original x-axis position
0001AA46 =00000032                  lamp_origY:	equ $32		; original y-axis position
0001AA46 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001AA46                            ; ===========================================================================
0001AA46                            
0001AA46                            Lamp_Main:	; Routine 0
0001AA46 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA4A 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001AA52 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001AA58 117C 0004 0001             		move.b	#4,obRender(a0)
0001AA5E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001AA64 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001AA6A 45F8 FC00                  		lea	(v_objstate).w,a2
0001AA6E 7000                       		moveq	#0,d0
0001AA70 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AA74 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AA7A 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001AA80 6600                       		bne.s	@red
0001AA82 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AA86 0201 007F                  		andi.b	#$7F,d1
0001AA8A 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001AA8E 0202 007F                  		andi.b	#$7F,d2
0001AA92 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AA94 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001AA96                            
0001AA96                            @red:
0001AA96 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AA9C 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AAA2 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AAA8 4E75                       		rts	
0001AAAA                            
0001AAAA                            ; ===========================================================================
0001AAAA                            
0001AAAA                            Lamp_Blue:	; Routine 2
0001AAAA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001AAAE 6600 0000                  		bne.w	@donothing	; if yes, branch
0001AAB2 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001AAB6 6B00 0000                  		bmi.w	@donothing
0001AABA 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AABE 0201 007F                  		andi.b	#$7F,d1
0001AAC2 1428 0028                  		move.b	obSubtype(a0),d2
0001AAC6 0202 007F                  		andi.b	#$7F,d2
0001AACA B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AACC 6500                       		bcs.s	@chkhit		; if yes, branch
0001AACE 45F8 FC00                  		lea	(v_objstate).w,a2
0001AAD2 7000                       		moveq	#0,d0
0001AAD4 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AAD8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AADE 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001AAE4 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AAEA 6000 0000                  		bra.w	@donothing
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            @chkhit:
0001AAEE 3038 D008                  		move.w	(v_player+obX).w,d0
0001AAF2 9068 0008                  		sub.w	obX(a0),d0
0001AAF6 5040                       		addq.w	#8,d0
0001AAF8 0C40 0010                  		cmpi.w	#$10,d0
0001AAFC 6400 0000                  		bcc.w	@donothing
0001AB00 3038 D00C                  		move.w	(v_player+obY).w,d0
0001AB04 9068 000C                  		sub.w	obY(a0),d0
0001AB08 0640 0040                  		addi.w	#$40,d0
0001AB0C 0C40 0068                  		cmpi.w	#$68,d0
0001AB10 6400                       		bcc.s	@donothing
0001AB12                            
0001AB1C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB20 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001AB26 6600                       		bne.s	@fail
0001AB28 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001AB2C 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001AB32 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001AB38 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001AB3E 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001AB44 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001AB4C 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001AB52 137C 0004 0001             		move.b	#4,obRender(a1)
0001AB58 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AB5E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001AB64 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001AB6A 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001AB70                            
0001AB70                            	@fail:
0001AB70 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001AB76 6100 0000                  		bsr.w	Lamp_StoreInfo
0001AB7A 45F8 FC00                  		lea	(v_objstate).w,a2
0001AB7E 7000                       		moveq	#0,d0
0001AB80 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AB84 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AB8A                            
0001AB8A                            	@donothing:
0001AB8A 4E75                       		rts	
0001AB8C                            ; ===========================================================================
0001AB8C                            
0001AB8C                            Lamp_Finish:	; Routine 4	
0001AB8C 4E75                       		rts	
0001AB8E                            ; ===========================================================================
0001AB8E                            
0001AB8E                            Lamp_Twirl:	; Routine 6
0001AB8E 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001AB92 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001AB94 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AB9A                            
0001AB9A                            	@continue:
0001AB9A 1028 0026                  		move.b	obAngle(a0),d0
0001AB9E 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001ABA4 0400 0040                  		subi.b	#$40,d0
0001ABA8 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001ABAE C3FC 0C00                  		muls.w	#$C00,d1
0001ABB2 4841                       		swap	d1
0001ABB4 D268 0030                  		add.w	lamp_origX(a0),d1
0001ABB8 3141 0008                  		move.w	d1,obX(a0)
0001ABBC C1FC 0C00                  		muls.w	#$C00,d0
0001ABC0 4840                       		swap	d0
0001ABC2 D068 0032                  		add.w	lamp_origY(a0),d0
0001ABC6 3140 000C                  		move.w	d0,obY(a0)
0001ABCA 4E75                       		rts	
0001ABCC                            ; ===========================================================================
0001ABCC                            ; ---------------------------------------------------------------------------
0001ABCC                            ; Subroutine to	store information when you hit a lamppost
0001ABCC                            ; ---------------------------------------------------------------------------
0001ABCC                            
0001ABCC                            Lamp_StoreInfo:
0001ABCC 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001ABD2 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001ABD8 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001ABDE 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001ABE4 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001ABEA 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001ABF0 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001ABF6 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001ABFC 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001AC02 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001AC08 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001AC0E 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001AC14 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001AC1A 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001AC20 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001AC26 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001AC2C 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001AC32 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001AC38 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001AC3E 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001AC44 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001AC4A 4E75                       		rts	
0001AC4C                            
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C                            
0001AC4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AC4C                            
0001AC4C                            
0001AC4C                            Lamp_LoadInfo:
0001AC4C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001AC52 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001AC58 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001AC5E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001AC64 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001AC6A 4278 FE20                  		clr.w	(v_rings).w
0001AC6E 4238 FE1B                  		clr.b	(v_lifecount).w
0001AC72 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001AC78 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001AC7E 5338 FE24                  		subq.b	#1,(v_timesec).w
0001AC82 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001AC88 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AC8E 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001AC94 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001AC9A 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001ACA0 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001ACA6 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001ACAC 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001ACB2 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001ACB8 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001ACBE 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001ACC4 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001ACCA 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001ACD0 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001ACD6 6600                       		bne.s	@notlabyrinth	; if not, branch
0001ACD8                            
0001ACD8 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001ACDE 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001ACE4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001ACEA                            
0001ACEA                            	@notlabyrinth:
0001ACEA 4A38 FE30                  		tst.b	(v_lastlamp).w
0001ACEE 6A00                       		bpl.s	locret_170F6
0001ACF0 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001ACF4 0440 00A0                  		subi.w	#$A0,d0
0001ACF8 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001ACFC                            
0001ACFC                            locret_170F6:
0001ACFC 4E75                       		rts	
0001ACFC 4E75                       		rts	
0001ACFE                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001ACFE                            ; --------------------------------------------------------------------------------
0001ACFE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001ACFE                            ; --------------------------------------------------------------------------------
0001ACFE                            
0001ACFE                            SME_JfaKr:	
0001ACFE 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001AD02 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001AD06 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001AD08 0A                         SME_JfaKr_A:	dc.b $A	
0001AD09 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001AD0E E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD13 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001AD18 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001AD1D F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD22 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD27 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD2C 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD31 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD36 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD3B 08                         SME_JfaKr_3D:	dc.b 8	
0001AD3C E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AD41 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD46 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD4B F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD50 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD55 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD5A 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD5F 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD64 02                         SME_JfaKr_66:	dc.b 2	
0001AD65 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001AD6A F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001AD6F 0A                         SME_JfaKr_71:	dc.b $A	
0001AD70 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AD75 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD7A F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD7F F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD84 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD89 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD8E 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD93 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD98 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001AD9D D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001ADA2 0A                         SME_JfaKr_A4:	dc.b $A	
0001ADA3 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001ADA8 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001ADAD F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001ADB2 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001ADB7 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001ADBC 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001ADC1 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001ADC6 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001ADCB D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001ADD0 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001ADD6 00                         		even
0001ADD6 00                         		even
0001ADD6                            		include	"_incObj\7D Hidden Bonuses.asm"
0001ADD6                            ; ---------------------------------------------------------------------------
0001ADD6                            ; Object 7D - hidden points at the end of a level
0001ADD6                            ; ---------------------------------------------------------------------------
0001ADD6                            
0001ADD6                            HiddenBonus:
0001ADD6 7000                       		moveq	#0,d0
0001ADD8 1028 0024                  		move.b	obRoutine(a0),d0
0001ADDC 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001ADE0 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001ADE4                            ; ===========================================================================
0001ADE4 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001ADE6 0000                       		dc.w Bonus_Display-Bonus_Index
0001ADE8                            
0001ADE8 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001ADE8                            ; ===========================================================================
0001ADE8                            
0001ADE8                            Bonus_Main:	; Routine 0
0001ADE8 7410                       		moveq	#$10,d2
0001ADEA 3602                       		move.w	d2,d3
0001ADEC D643                       		add.w	d3,d3
0001ADEE 43F8 D000                  		lea	(v_player).w,a1
0001ADF2 3029 0008                  		move.w	obX(a1),d0
0001ADF6 9068 0008                  		sub.w	obX(a0),d0
0001ADFA D042                       		add.w	d2,d0
0001ADFC B043                       		cmp.w	d3,d0
0001ADFE 6400                       		bcc.s	bonu_chkdel
0001AE00 3229 000C                  		move.w	obY(a1),d1
0001AE04 9268 000C                  		sub.w	obY(a0),d1
0001AE08 D242                       		add.w	d2,d1
0001AE0A B243                       		cmp.w	d3,d1
0001AE0C 6400                       		bcc.s	bonu_chkdel
0001AE0E 4A78 FE08                  		tst.w	(v_debuguse).w
0001AE12 6600                       		bne.s	bonu_chkdel
0001AE14 4A38 F7CD                  		tst.b	(f_bigring).w
0001AE18 6600                       		bne.s	bonu_chkdel
0001AE1A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AE1E 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001AE26 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001AE2C 0028 0004 0001             		ori.b	#4,obRender(a0)
0001AE32 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AE38 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001AE3E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001AE44 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001AE54 7000                       		moveq	#0,d0
0001AE56 1028 0028                  		move.b	obSubtype(a0),d0
0001AE5A D040                       		add.w	d0,d0
0001AE5C 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001AE60 4EB9 0000 0000             		jsr	(AddPoints).l
0001AE66                            
0001AE66                            bonu_chkdel:
0001AE82 4E75                       		rts	
0001AE84                            
0001AE84                            	@delete:
0001AE84 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001AE8A                            
0001AE8A                            ; ===========================================================================
0001AE8A 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001AE8C 03E8                       		dc.w 1000
0001AE8E 0064                       		dc.w 100
0001AE90 000A                       		dc.w 10
0001AE92                            ; ===========================================================================
0001AE92                            
0001AE92                            Bonus_Display:	; Routine 2
0001AE92 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001AE96 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001AEB4 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001AEBA                            
0001AEBA                            Bonus_Display_Delete:	
0001AEBA 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001AEBA 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001AEC0                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001AEC0                            ; ---------------------------------------------------------------------------
0001AEC0                            ; Sprite mappings - hidden points at the end of	a level
0001AEC0                            ; ---------------------------------------------------------------------------
0001AEC0                            Map_Bonus_internal:
0001AEC0 0000                       		dc.w @blank-Map_Bonus_internal
0001AEC2 0000                       		dc.w @10000-Map_Bonus_internal
0001AEC4 0000                       		dc.w @1000-Map_Bonus_internal
0001AEC6 0000                       		dc.w @100-Map_Bonus_internal
0001AEC8 00                         @blank:		dc.b 0
0001AEC9 01                         @10000:		dc.b 1
0001AECA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001AECF 01                         @1000:		dc.b 1
0001AED0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001AED5 01                         @100:		dc.b 1
0001AED6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001AEDC 00                         		even
0001AEDC 00                         		even
0001AEDC                            
0001AEDC                            		include	"_incObj\8A Credits.asm"
0001AEDC                            ; ---------------------------------------------------------------------------
0001AEDC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001AEDC                            ; ---------------------------------------------------------------------------
0001AEDC                            
0001AEDC                            CreditsText:
0001AEDC 7000                       		moveq	#0,d0
0001AEDE 1028 0024                  		move.b	obRoutine(a0),d0
0001AEE2 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001AEE6 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001AEEA                            ; ===========================================================================
0001AEEA 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001AEEC 0000                       		dc.w Cred_Display-Cred_Index
0001AEEE                            ; ===========================================================================
0001AEEE                            
0001AEEE                            Cred_Main:	; Routine 0
0001AEEE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AEF2 317C 0120 0008             		move.w	#$120,obX(a0)
0001AEF8 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001AEFE 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001AF06 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001AF0C 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001AF10 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001AF14 117C 0000 0001             		move.b	#0,obRender(a0)
0001AF1A 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AF20                            
0001AF20 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001AF26 6600                       		bne.s	Cred_Display	; if not, branch
0001AF28                            
0001AF28 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001AF2E 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001AF34 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001AF38 6700                       		beq.s	Cred_Display	; if not, branch
0001AF3A 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001AF40 6600                       		bne.s	Cred_Display	; if not, branch
0001AF42 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001AF48 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001AF4E 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001AF54                            ; ===========================================================================
0001AF54                            
0001AF54                            Cred_Display:	; Routine 2
0001AF54 4EF9 0000 F7A8             		jmp	DisplaySprite
0001AF54 4EF9 0000 F7A8             		jmp	DisplaySprite
0001AF5A                            Map_Cred:	include	"_maps\Credits.asm"
0001AF5A                            ; ---------------------------------------------------------------------------
0001AF5A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001AF5A                            ; ---------------------------------------------------------------------------
0001AF5A                            Map_Cred_internal:
0001AF5A 0000                       		dc.w @staff-Map_Cred_internal
0001AF5C 0000                       		dc.w @gameplan-Map_Cred_internal
0001AF5E 0000                       		dc.w @program-Map_Cred_internal
0001AF60 0000                       		dc.w @character-Map_Cred_internal
0001AF62 0000                       		dc.w @design-Map_Cred_internal
0001AF64 0000                       		dc.w @soundproduce-Map_Cred_internal
0001AF66 0000                       		dc.w @soundprogram-Map_Cred_internal
0001AF68 0000                       		dc.w @thanks-Map_Cred_internal
0001AF6A 0000                       		dc.w @presentedby-Map_Cred_internal
0001AF6C 0000                       		dc.w @tryagain-Map_Cred_internal
0001AF6E 0000                       		dc.w @sonicteam-Map_Cred_internal
0001AF70 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001AF71 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001AF76 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001AF7B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001AF80 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001AF85 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001AF8A F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001AF8F F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001AF94 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001AF99 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001AF9E F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001AFA3 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001AFA8 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001AFAD F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001AFB2 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001AFB7 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001AFB8 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001AFBD 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001AFC2 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001AFC7 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001AFCC 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001AFD1 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001AFD6 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001AFDB 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001AFE0 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001AFE5                            
0001AFE5 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001AFEA B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001AFEF B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001AFF4 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001AFF9 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001AFFE 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001AFFF 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B004 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B009 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001B00E 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001B013 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001B018 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001B01D 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001B022                            
0001B022 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001B027 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001B02C B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001B031 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001B036 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001B03B B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001B040 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001B045 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001B04A                            
0001B04A D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001B04F D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001B054                            
0001B054 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001B059 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001B05E D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001B063 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001B068 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001B06D D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001B072                            
0001B072 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001B077 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001B07C F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001B081 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001B082 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001B087 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B08C 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001B091                            
0001B091 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B096 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B09B B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B0A0 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B0A5 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001B0AA 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001B0AB 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001B0B0 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001B0B5 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001B0BA 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001B0BF 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001B0C4 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001B0C9                            
0001B0C9 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B0CE B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B0D3 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B0D8 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B0DD B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B0E2 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001B0E3 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B0E8 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001B0ED 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001B0F2 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001B0F7 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001B0FC 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B101 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001B106 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001B10B 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001B110 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001B115                            
0001B115 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001B11A B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001B11F B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001B124 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001B129 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001B12E B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001B133 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001B138 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001B13D                            
0001B13D D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001B142 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001B147 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001B14C D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001B151 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001B156 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001B15B D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001B160 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001B165 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001B16A D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001B16F 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001B170 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001B175 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001B17A D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001B17F D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001B184 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001B189 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001B18E D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001B193 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001B198 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001B19D D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001B1A2 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001B1A7 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001B1AC 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001B1B1 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001B1B6 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001B1BB 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001B1C0 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001B1C5 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001B1CA 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001B1CF 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001B1D4 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001B1D9 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001B1DE 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001B1E3 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001B1E4 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B1E9 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001B1EE 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B1F3 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001B1F8 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001B1FD 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001B202 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001B207 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B20C                            
0001B20C B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001B211 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001B216 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001B21B B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001B220 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001B225 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001B22A                            
0001B22A D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001B22F D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B234 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001B239 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001B23A 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B23F 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B244 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B249 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001B24E 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001B253 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001B258 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001B25D 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001B262 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001B267                            
0001B267 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001B26C B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001B271                            
0001B271 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001B276 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B27B D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001B280 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001B285 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001B28A 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001B28B 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001B290 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001B295 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001B29A 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001B29F 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001B2A4 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001B2A9 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001B2AE 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001B2B3 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001B2B4 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001B2B9 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001B2BE E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001B2C3 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001B2C8 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001B2CD E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001B2D2                            
0001B2D2 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001B2D7 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001B2DC 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001B2E1 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001B2E6 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001B2EB 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001B2F0 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001B2F5 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001B2FA                            		even
0001B2FA                            		even
0001B2FA                            
0001B2FA                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001B2FA                            ; ---------------------------------------------------------------------------
0001B2FA                            ; Object 3D - Eggman (GHZ)
0001B2FA                            ; ---------------------------------------------------------------------------
0001B2FA                            
0001B2FA                            BossGreenHill:
0001B2FA 7000                       		moveq	#0,d0
0001B2FC 1028 0024                  		move.b	obRoutine(a0),d0
0001B300 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001B304 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001B308                            ; ===========================================================================
0001B308 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001B30A 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001B30C 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001B30E 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001B310                            
0001B310 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001B312 0401                       		dc.b 4,	1
0001B314 0607                       		dc.b 6,	7
0001B316                            ; ===========================================================================
0001B316                            
0001B316                            BGHZ_Main:	; Routine 0
0001B316 45F9 0001 B310             		lea	(BGHZ_ObjData).l,a2
0001B31C 2248                       		movea.l	a0,a1
0001B31E 7202                       		moveq	#2,d1
0001B320 6000                       		bra.s	BGHZ_LoadBoss
0001B322                            ; ===========================================================================
0001B322                            
0001B322                            BGHZ_Loop:
0001B322 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001B328 6600                       		bne.s	loc_17772
0001B32A                            
0001B32A                            BGHZ_LoadBoss:
0001B32A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B32E 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001B332 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B338 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B33E 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001B346 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B34C 137C 0004 0001             		move.b	#4,obRender(a1)
0001B352 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B358 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001B35E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B362 2348 0034                  		move.l	a0,$34(a1)
0001B366 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001B36A                            
0001B36A                            loc_17772:
0001B36A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B370 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B376 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B37C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B382                            
0001B382                            
0001B382                            BGHZ_ShipMain:	; Routine 2
0001B382 7000                       		moveq	#0,d0
0001B384 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B388 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001B38C 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001B390 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B396 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001B39C 1028 0022                  		move.b	obStatus(a0),d0
0001B3A0 0200 0003                  		andi.b	#3,d0
0001B3A4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B3AA 8128 0001                  		or.b	d0,obRender(a0)
0001B3AE 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B3B4                            ; ===========================================================================
0001B3B4 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001B3B6 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001B3B8 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001B3BA 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001B3BC 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001B3BE 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001B3C0 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            BGHZ_ShipStart:
0001B3C2 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001B3C8 6100 0000                  		bsr.w	BossMove
0001B3CC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001B3D2 6600                       		bne.s	loc_177E6
0001B3D4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001B3DA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001B3DE                            
0001B3DE                            loc_177E6:
0001B3DE 1028 003F                  		move.b	$3F(a0),d0
0001B3E2 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001B3E8 EC40                       		asr.w	#6,d0
0001B3EA D068 0038                  		add.w	$38(a0),d0
0001B3EE 3140 000C                  		move.w	d0,obY(a0)
0001B3F2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B3F8 5428 003F                  		addq.b	#2,$3F(a0)
0001B3FC 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001B402 6400                       		bcc.s	locret_1784A
0001B404 4A28 0022                  		tst.b	obStatus(a0)
0001B408 6B00                       		bmi.s	loc_1784C
0001B40A 4A28 0020                  		tst.b	obColType(a0)
0001B40E 6600                       		bne.s	locret_1784A
0001B410 4A28 003E                  		tst.b	$3E(a0)
0001B414 6600                       		bne.s	BGHZ_ShipFlash
0001B416 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001B426                            
0001B426                            BGHZ_ShipFlash:
0001B426 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001B42A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B42C 4A51                       		tst.w	(a1)
0001B42E 6600                       		bne.s	loc_1783C
0001B430 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001B434                            
0001B434                            loc_1783C:
0001B434 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001B436 5328 003E                  		subq.b	#1,$3E(a0)
0001B43A 6600                       		bne.s	locret_1784A
0001B43C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B442                            
0001B442                            locret_1784A:
0001B442 4E75                       		rts	
0001B444                            ; ===========================================================================
0001B444                            
0001B444                            loc_1784C:
0001B444 7064                       		moveq	#100,d0
0001B446 6100 0000                  		bsr.w	AddPoints
0001B44A 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001B450 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001B456 4E75                       		rts	
0001B456 4E75                       		rts	
0001B458                            
0001B458                            ; ---------------------------------------------------------------------------
0001B458                            ; Defeated boss	subroutine
0001B458                            ; ---------------------------------------------------------------------------
0001B458                            
0001B458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B458                            
0001B458                            
0001B458                            BossDefeated:
0001B458 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001B45C 0200 0007                  		andi.b	#7,d0
0001B460 6600                       		bne.s	locret_178A2
0001B462 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001B468 6600                       		bne.s	locret_178A2
0001B46A 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001B46E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B474 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B47A 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001B480 3200                       		move.w	d0,d1
0001B482 7200                       		moveq	#0,d1
0001B484 1200                       		move.b	d0,d1
0001B486 E409                       		lsr.b	#2,d1
0001B488 0441 0020                  		subi.w	#$20,d1
0001B48C D369 0008                  		add.w	d1,obX(a1)
0001B490 E048                       		lsr.w	#8,d0
0001B492 E608                       		lsr.b	#3,d0
0001B494 D169 000C                  		add.w	d0,obY(a1)
0001B498                            
0001B498                            locret_178A2:
0001B498 4E75                       		rts	
0001B49A                            ; End of function BossDefeated
0001B49A                            
0001B49A                            ; ---------------------------------------------------------------------------
0001B49A                            ; Subroutine to	move a boss
0001B49A                            ; ---------------------------------------------------------------------------
0001B49A                            
0001B49A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B49A                            
0001B49A                            
0001B49A                            BossMove:
0001B49A 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001B4A0 E188                       		lsl.l	#8,d0
0001B4A2 D1A8 0030                  		add.l	d0,$30(a0)
0001B4A6 E18A                       		lsl.l	#8,d2
0001B4A8 D5A8 0038                  		add.l	d2,$38(a0)
0001B4AC 4E75                       		rts
0001B4AE                            ; End of function BossMove
0001B4AE                            
0001B4AE                            ; ===========================================================================
0001B4AE                            
0001B4AE                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001B4AE                            
0001B4AE                            BGHZ_MakeBall:
0001B4AE 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001B4B4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B4BA 6100 FFDE                  		bsr.w	BossMove
0001B4BE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B4C4 6600                       		bne.s	loc_17916
0001B4C6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B4CC 317C 0000 0012             		move.w	#0,obVelY(a0)
0001B4D2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B4D6 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001B4DC 6600                       		bne.s	loc_17910
0001B4DE 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001B4E2 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001B4E8 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B4EE 2348 0034                  		move.l	a0,$34(a1)
0001B4F2                            
0001B4F2                            loc_17910:
0001B4F2 317C 0077 003C             		move.w	#$77,$3C(a0)
0001B4F8                            
0001B4F8                            loc_17916:
0001B4F8 6000 FEE4                  		bra.w	loc_177E6
0001B4FC                            ; ===========================================================================
0001B4FC                            
0001B4FC                            BGHZ_ShipMove:
0001B4FC 5368 003C                  		subq.w	#1,$3C(a0)
0001B500 6A00                       		bpl.s	BGHZ_Reverse
0001B502 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B506 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B50C 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001B512 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B518 6600                       		bne.s	BGHZ_Reverse
0001B51A 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001B520 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001B526                            
0001B526                            BGHZ_Reverse:
0001B526 0828 0000 0022             		btst	#0,obStatus(a0)
0001B52C 6600                       		bne.s	loc_17950
0001B52E 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001B532                            
0001B532                            loc_17950:
0001B532 6000 FEAA                  		bra.w	loc_177E6
0001B536                            ; ===========================================================================
0001B536                            
0001B536                            loc_17954:
0001B536 5368 003C                  		subq.w	#1,$3C(a0)
0001B53A 6B00                       		bmi.s	loc_17960
0001B53C 6100 FF5C                  		bsr.w	BossMove
0001B540 6000                       		bra.s	loc_17976
0001B542                            ; ===========================================================================
0001B542                            
0001B542                            loc_17960:
0001B542 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B548 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B54E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B552 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B558                            
0001B558                            loc_17976:
0001B558 6000 FE84                  		bra.w	loc_177E6
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            loc_1797A:
0001B55C 5368 003C                  		subq.w	#1,$3C(a0)
0001B560 6B00                       		bmi.s	loc_17984
0001B562 6000 FEF4                  		bra.w	BossDefeated
0001B566                            ; ===========================================================================
0001B566                            
0001B566                            loc_17984:
0001B566 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B56C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B572 4268 0010                  		clr.w	obVelX(a0)
0001B576 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B57A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B580 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B584 6600                       		bne.s	locret_179AA
0001B586 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B58C                            
0001B58C                            locret_179AA:
0001B58C 4E75                       		rts	
0001B58E                            ; ===========================================================================
0001B58E                            
0001B58E                            loc_179AC:
0001B58E 5268 003C                  		addq.w	#1,$3C(a0)
0001B592 6700                       		beq.s	loc_179BC
0001B594 6A00                       		bpl.s	loc_179C2
0001B596 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B59C 6000                       		bra.s	loc_179EE
0001B59E                            ; ===========================================================================
0001B59E                            
0001B59E                            loc_179BC:
0001B59E 4268 0012                  		clr.w	obVelY(a0)
0001B5A2 6000                       		bra.s	loc_179EE
0001B5A4                            ; ===========================================================================
0001B5A4                            
0001B5A4                            loc_179C2:
0001B5A4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B5AA 6500                       		bcs.s	loc_179DA
0001B5AC 6700                       		beq.s	loc_179E0
0001B5AE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B5B4 6500                       		bcs.s	loc_179EE
0001B5B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B5BA 6000                       		bra.s	loc_179EE
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            loc_179DA:
0001B5BC 5168 0012                  		subq.w	#8,obVelY(a0)
0001B5C0 6000                       		bra.s	loc_179EE
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            loc_179E0:
0001B5C2 4268 0012                          clr.w    obVelY(a0)
0001B5C6 4A38 FE2D                          tst.b     (v_invinc).w
0001B5CA 6600                               bne.s   @boss_invinc
0001B5CC 4A38 FE2E                          tst.b     (v_shoes).w
0001B5D0 6600                               bne.s   @boss_shoes
0001B5D2                            
0001B5D2 1038 F5C6                          move.b   (v_Saved_music),d0
0001B5D6 6000 0000                          bra.w      @boss_play
0001B5DA                            
0001B5DA                            @boss_invinc:
0001B5DA 103C 0000                          move.b #bgm_Invincible,d0
0001B5DE                            
0001B5DE                            @boss_shoes:
0001B5DE 103C 0000                          move.b #bgm_Ending,d0
0001B5E2                            
0001B5E2                            @boss_play:
0001B5E2 4EB8 129A                          jsr PlaySound
0001B5E6                            
0001B5E6                            loc_179EE:
0001B5E6 6100 FEB2                  		bsr.w	BossMove
0001B5EA 6000 FDF2                  		bra.w	loc_177E6
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            loc_179F6:
0001B5EE 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B5F4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B5FA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001B600 6700                       		beq.s	loc_17A10
0001B602 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B606 6000                       		bra.s	loc_17A16
0001B608                            ; ===========================================================================
0001B608                            
0001B608                            loc_17A10:
0001B608 4A28 0001                  		tst.b	obRender(a0)
0001B60C 6A00                       		bpl.s	BGHZ_ShipDel
0001B60E                            
0001B60E                            loc_17A16:
0001B60E 6100 FE8A                  		bsr.w	BossMove
0001B612 6000 FDCA                  		bra.w	loc_177E6
0001B616                            ; ===========================================================================
0001B616                            
0001B616                            BGHZ_ShipDel:
0001B616 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001B61C                            ; ===========================================================================
0001B61C                            
0001B61C                            BGHZ_FaceMain:	; Routine 4
0001B61C 7000                       		moveq	#0,d0
0001B61E 7201                       		moveq	#1,d1
0001B620 2268 0034                  		movea.l	$34(a0),a1
0001B624 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B628 5900                       		subq.b	#4,d0
0001B62A 6600                       		bne.s	loc_17A3E
0001B62C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001B632 6600                       		bne.s	loc_17A46
0001B634 7204                       		moveq	#4,d1
0001B636                            
0001B636                            loc_17A3E:
0001B636 5D00                       		subq.b	#6,d0
0001B638 6B00                       		bmi.s	loc_17A46
0001B63A 720A                       		moveq	#$A,d1
0001B63C 6000                       		bra.s	loc_17A5A
0001B63E                            ; ===========================================================================
0001B63E                            
0001B63E                            loc_17A46:
0001B63E 4A29 0020                  		tst.b	obColType(a1)
0001B642 6600                       		bne.s	loc_17A50
0001B644 7205                       		moveq	#5,d1
0001B646 6000                       		bra.s	loc_17A5A
0001B648                            ; ===========================================================================
0001B648                            
0001B648                            loc_17A50:
0001B648 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B64E 6500                       		bcs.s	loc_17A5A
0001B650 7204                       		moveq	#4,d1
0001B652                            
0001B652                            loc_17A5A:
0001B652 1141 001C                  		move.b	d1,obAnim(a0)
0001B656 5500                       		subq.b	#2,d0
0001B658 6600                       		bne.s	BGHZ_FaceDisp
0001B65A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B660 4A28 0001                  		tst.b	obRender(a0)
0001B664 6A00                       		bpl.s	BGHZ_FaceDel
0001B666                            
0001B666                            BGHZ_FaceDisp:
0001B666 6000                       		bra.s	BGHZ_Display
0001B668                            ; ===========================================================================
0001B668                            
0001B668                            BGHZ_FaceDel:
0001B668 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001B66E                            ; ===========================================================================
0001B66E                            
0001B66E                            BGHZ_FlameMain:	; Routine 6
0001B66E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B674 2268 0034                  		movea.l	$34(a0),a1
0001B678 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001B67E 6600                       		bne.s	loc_17A96
0001B680 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B686 4A28 0001                  		tst.b	obRender(a0)
0001B68A 6A00                       		bpl.s	BGHZ_FlameDel
0001B68C 6000                       		bra.s	BGHZ_FlameDisp
0001B68E                            ; ===========================================================================
0001B68E                            
0001B68E                            loc_17A96:
0001B68E 3029 0010                  		move.w	obVelX(a1),d0
0001B692 6700                       		beq.s	BGHZ_FlameDisp
0001B694 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B69A                            
0001B69A                            BGHZ_FlameDisp:
0001B69A 6000                       		bra.s	BGHZ_Display
0001B69C                            ; ===========================================================================
0001B69C                            
0001B69C                            BGHZ_FlameDel:
0001B69C 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001B6A2                            ; ===========================================================================
0001B6A2                            
0001B6A2                            BGHZ_Display:
0001B6A2 2268 0034                  		movea.l	$34(a0),a1
0001B6A6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B6AC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B6B2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B6B8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B6BE 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001B6C4 1028 0022                  		move.b	obStatus(a0),d0
0001B6C8 0200 0003                  		andi.b	#3,d0
0001B6CC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B6D2 8128 0001                  		or.b	d0,obRender(a0)
0001B6D6 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B6D6 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B6DC                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001B6DC                            ; ---------------------------------------------------------------------------
0001B6DC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B6DC                            ; ---------------------------------------------------------------------------
0001B6DC                            
0001B6DC                            BossBall:
0001B6DC 7000                       		moveq	#0,d0
0001B6DE 1028 0024                  		move.b	obRoutine(a0),d0
0001B6E2 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001B6E6 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001B6EA                            ; ===========================================================================
0001B6EA 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001B6EC 0000                       		dc.w GBall_Base-GBall_Index
0001B6EE 0000                       		dc.w GBall_Display2-GBall_Index
0001B6F0 0000                       		dc.w loc_17C68-GBall_Index
0001B6F2 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001B6F4                            ; ===========================================================================
0001B6F4                            
0001B6F4                            GBall_Main:	; Routine 0
0001B6F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B6F8 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001B6FE 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001B704 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001B70C 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001B712 45E8 0028                  		lea	obSubtype(a0),a2
0001B716 14FC 0000                  		move.b	#0,(a2)+
0001B71A 7205                       		moveq	#5,d1
0001B71C 2248                       		movea.l	a0,a1
0001B71E 6000                       		bra.s	loc_17B60
0001B720                            ; ===========================================================================
0001B720                            
0001B720                            GBall_MakeLinks:
0001B720 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001B726 6600                       		bne.s	GBall_MakeBall
0001B728 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B72E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B734 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001B738 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001B73E 237C 0000 941C 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001B746 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001B74C 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B752 5228 0028                  		addq.b	#1,obSubtype(a0)
0001B756                            
0001B756                            loc_17B60:
0001B756 3A09                       		move.w	a1,d5
0001B758 0445 D000                  		subi.w	#$D000,d5
0001B75C EC4D                       		lsr.w	#6,d5
0001B75E 0245 007F                  		andi.w	#$7F,d5
0001B762 14C5                       		move.b	d5,(a2)+
0001B764 137C 0004 0001             		move.b	#4,obRender(a1)
0001B76A 137C 0008 0014             		move.b	#8,obActWid(a1)
0001B770 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001B776 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001B77C 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001B780                            
0001B780                            GBall_MakeBall:
0001B780 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001B786 237C 0000 9978 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001B78E 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001B794 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B79A 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001B7A0 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001B7A6 4E75                       		rts	
0001B7A8                            ; ===========================================================================
0001B7A8                            
0001B7A8 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B7AE                            
0001B7AE                            ; ===========================================================================
0001B7AE                            
0001B7AE                            GBall_Base:	; Routine 2
0001B7AE 47F9 0001 B7A8             		lea	(GBall_PosData).l,a3
0001B7B4 45E8 0028                  		lea	obSubtype(a0),a2
0001B7B8 7C00                       		moveq	#0,d6
0001B7BA 1C1A                       		move.b	(a2)+,d6
0001B7BC                            
0001B7BC                            loc_17BC6:
0001B7BC 7800                       		moveq	#0,d4
0001B7BE 181A                       		move.b	(a2)+,d4
0001B7C0 ED4C                       		lsl.w	#6,d4
0001B7C2 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001B7C8 2244                       		movea.l	d4,a1
0001B7CA 101B                       		move.b	(a3)+,d0
0001B7CC B029 003C                  		cmp.b	$3C(a1),d0
0001B7D0 6700                       		beq.s	loc_17BE0
0001B7D2 5229 003C                  		addq.b	#1,$3C(a1)
0001B7D6                            
0001B7D6                            loc_17BE0:
0001B7D6 51CE FFE4                  		dbf	d6,loc_17BC6
0001B7DA                            
0001B7DA B029 003C                  		cmp.b	$3C(a1),d0
0001B7DE 6600                       		bne.s	loc_17BFA
0001B7E0 2268 0034                  		movea.l	$34(a0),a1
0001B7E4 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001B7EA 6600                       		bne.s	loc_17BFA
0001B7EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B7F0                            
0001B7F0                            loc_17BFA:
0001B7F0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B7F6 6700                       		beq.s	GBall_Display
0001B7F8 5268 0032                  		addq.w	#1,$32(a0)
0001B7FC                            
0001B7FC                            GBall_Display:
0001B7FC 6100 0000                  		bsr.w	sub_17C2A
0001B800 1028 0026                  		move.b	obAngle(a0),d0
0001B804 4EB9 0000 938E             		jsr	(Swing_Move2).l
0001B80A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B810                            ; ===========================================================================
0001B810                            
0001B810                            GBall_Display2:	; Routine 4
0001B810 6100 0000                  		bsr.w	sub_17C2A
0001B814 4EB9 0000 934E             		jsr	(Obj48_Move).l
0001B81A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B820                            
0001B820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B820                            
0001B820                            
0001B820                            sub_17C2A:
0001B820 2268 0034                  		movea.l	$34(a0),a1
0001B824 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001B82A 6400                       		bcc.s	loc_17C3C
0001B82C 0868 0000 001A             		bchg	#0,obFrame(a0)
0001B832                            
0001B832                            loc_17C3C:
0001B832 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001B838 3029 000C                  		move.w	obY(a1),d0
0001B83C D068 0032                  		add.w	$32(a0),d0
0001B840 3140 0038                  		move.w	d0,$38(a0)
0001B844 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B84A 4A29 0022                  		tst.b	obStatus(a1)
0001B84E 6A00                       		bpl.s	locret_17C66
0001B850 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B854 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B85A                            
0001B85A                            locret_17C66:
0001B85A 4E75                       		rts	
0001B85C                            ; End of function sub_17C2A
0001B85C                            
0001B85C                            ; ===========================================================================
0001B85C                            
0001B85C                            loc_17C68:	; Routine 6
0001B85C 2268 0034                  		movea.l	$34(a0),a1
0001B860 4A29 0022                  		tst.b	obStatus(a1)
0001B864 6A00                       		bpl.s	GBall_Display3
0001B866 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B86A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B870                            
0001B870                            GBall_Display3:
0001B870 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B876                            ; ===========================================================================
0001B876                            
0001B876                            GBall_ChkVanish:; Routine 8
0001B876 7000                       		moveq	#0,d0
0001B878 4A28 001A                  		tst.b	obFrame(a0)
0001B87C 6600                       		bne.s	GBall_Vanish
0001B87E 5200                       		addq.b	#1,d0
0001B880                            
0001B880                            GBall_Vanish:
0001B880 1140 001A                  		move.b	d0,obFrame(a0)
0001B884 2268 0034                  		movea.l	$34(a0),a1
0001B888 4A29 0022                  		tst.b	obStatus(a1)
0001B88C 6A00                       		bpl.s	GBall_Display4
0001B88E 117C 0000 0020             		move.b	#0,obColType(a0)
0001B894 6100 FBC2                  		bsr.w	BossDefeated
0001B898 5328 003C                  		subq.b	#1,$3C(a0)
0001B89C 6A00                       		bpl.s	GBall_Display4
0001B89E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001B8A2 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B8A8                            
0001B8A8                            GBall_Display4:
0001B8A8 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B8A8 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001B8AE                            		include	"_anim\Eggman.asm"
0001B8AE                            ; ---------------------------------------------------------------------------
0001B8AE                            ; Animation script - Eggman (bosses)
0001B8AE                            ; ---------------------------------------------------------------------------
0001B8AE 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001B8B0 0000                       		dc.w @facenormal1-Ani_Eggman
0001B8B2 0000                       		dc.w @facenormal2-Ani_Eggman
0001B8B4 0000                       		dc.w @facenormal3-Ani_Eggman
0001B8B6 0000                       		dc.w @facelaugh-Ani_Eggman
0001B8B8 0000                       		dc.w @facehit-Ani_Eggman
0001B8BA 0000                       		dc.w @facepanic-Ani_Eggman
0001B8BC 0000                       		dc.w @blank-Ani_Eggman
0001B8BE 0000                       		dc.w @flame1-Ani_Eggman
0001B8C0 0000                       		dc.w @flame2-Ani_Eggman
0001B8C2 0000                       		dc.w @facedefeat-Ani_Eggman
0001B8C4 0000                       		dc.w @escapeflame-Ani_Eggman
0001B8C6 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001B8CA 00                         		even
0001B8CA 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001B8CE                            		even
0001B8CE 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001B8D2                            		even
0001B8D2 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001B8D6                            		even
0001B8D6 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001B8DA                            		even
0001B8DA 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001B8DE                            		even
0001B8DE 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001B8E2                            		even
0001B8E2 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001B8E6 00                         		even
0001B8E6 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001B8EA                            		even
0001B8EA 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001B8EE                            		even
0001B8EE 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001B8F2 00                         		even
0001B8F2 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001B8FE 00                         		even
0001B8FE 00                         		even
0001B8FE                            Map_Eggman:	include	"_maps\Eggman.asm"
0001B8FE                            ; --------------------------------------------------------------------------------
0001B8FE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B8FE                            ; --------------------------------------------------------------------------------
0001B8FE                            
0001B8FE                            SME_F_pyS:	
0001B8FE 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001B902 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001B906 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001B90A 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001B90E 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001B912 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001B916 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001B918 05                         SME_F_pyS_1A:	dc.b 5	
0001B919 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001B91E FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B923 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B928 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B92D 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001B932 03                         SME_F_pyS_34:	dc.b 3	
0001B933 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B938 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001B93D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B942 03                         SME_F_pyS_44:	dc.b 3	
0001B943 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B948 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B94D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B952 04                         SME_F_pyS_54:	dc.b 4	
0001B953 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001B958 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001B95D EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001B962 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B967 04                         SME_F_pyS_69:	dc.b 4	
0001B968 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001B96D EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001B972 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001B977 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B97C 04                         SME_F_pyS_7E:	dc.b 4	
0001B97D E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B982 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001B987 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B98C EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B991 04                         SME_F_pyS_93:	dc.b 4	
0001B992 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001B997 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B99C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B9A1 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B9A6 07                         SME_F_pyS_A8:	dc.b 7	
0001B9A7 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001B9AC E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B9B1 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B9B6 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001B9BB F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001B9C0 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001B9C5 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B9CA 01                         SME_F_pyS_CC:	dc.b 1	
0001B9CB 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001B9D0 01                         SME_F_pyS_D2:	dc.b 1	
0001B9D1 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001B9D6 00                         SME_F_pyS_D8:	dc.b 0	
0001B9D7 02                         SME_F_pyS_D9:	dc.b 2	
0001B9D8 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001B9DD 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001B9E2 02                         SME_F_pyS_E4:	dc.b 2	
0001B9E3 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001B9E8 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001B9EE 00                         		even
0001B9EE 00                         		even
0001B9EE                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001B9EE                            ; ---------------------------------------------------------------------------
0001B9EE                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B9EE                            ; ---------------------------------------------------------------------------
0001B9EE                            Map_BossItems_internal:
0001B9EE 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001B9F0 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001B9F2 0000                       		dc.w @cross-Map_BossItems_internal
0001B9F4 0000                       		dc.w @widepipe-Map_BossItems_internal
0001B9F6 0000                       		dc.w @pipe-Map_BossItems_internal
0001B9F8 0000                       		dc.w @spike-Map_BossItems_internal
0001B9FA 0000                       		dc.w @legmask-Map_BossItems_internal
0001B9FC 0000                       		dc.w @legs-Map_BossItems_internal
0001B9FE 01                         @chainanchor1:	dc.b 1
0001B9FF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001BA04 02                         @chainanchor2:	dc.b 2
0001BA05 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001BA0A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BA10 00                         		even
0001BA10 01                         @cross:		dc.b 1
0001BA11 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001BA16 01                         @widepipe:	dc.b 1
0001BA17 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001BA1C 01                         @pipe:		dc.b 1
0001BA1D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001BA22 04                         @spike:		dc.b 4
0001BA23 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001BA28 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001BA2D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001BA32 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001BA38 00                         		even
0001BA38 02                         @legmask:	dc.b 2
0001BA39 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001BA3E 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001BA44 00                         		even
0001BA44 02                         @legs:		dc.b 2
0001BA45 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001BA4A 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001BA50 00                         		even
0001BA50 00                         		even
0001BA50                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001BA50                            ; ---------------------------------------------------------------------------
0001BA50                            ; Object 77 - Eggman (LZ)
0001BA50                            ; ---------------------------------------------------------------------------
0001BA50                            
0001BA50                            BossLabyrinth:
0001BA50 7000                       		moveq	#0,d0
0001BA52 1028 0024                  		move.b	obRoutine(a0),d0
0001BA56 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001BA5A 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001BA5E                            ; ===========================================================================
0001BA5E 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001BA60 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001BA62 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001BA64 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001BA66                            
0001BA66 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001BA68 0401                       		dc.b 4,	1
0001BA6A 0607                       		dc.b 6,	7
0001BA6C                            ; ===========================================================================
0001BA6C                            
0001BA6C                            Obj77_Main:	; Routine 0
0001BA6C 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001BA72 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001BA78 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA7E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA84 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA8A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BA90 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BA96 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001BA9A 2248                       		movea.l	a0,a1
0001BA9C 7202                       		moveq	#2,d1
0001BA9E 6000                       		bra.s	Obj77_LoadBoss
0001BAA0                            ; ===========================================================================
0001BAA0                            
0001BAA0                            Obj77_Loop:
0001BAA0 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001BAA6 6600                       		bne.s	Obj77_ShipMain
0001BAA8 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001BAAC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BAB2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BAB8                            
0001BAB8                            Obj77_LoadBoss:
0001BAB8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BABE 4229 0025                  		clr.b	ob2ndRout(a1)
0001BAC2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BAC6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BACA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001BAD0 237C 0001 B8FE 0004        		move.l	#Map_Eggman,obMap(a1)
0001BAD8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BADE 137C 0004 0001             		move.b	#4,obRender(a1)
0001BAE4 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BAEA 2348 0034                  		move.l	a0,$34(a1)
0001BAEE 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001BAF2                            
0001BAF2                            Obj77_ShipMain:	; Routine 2
0001BAF2 43F8 D000                  		lea	(v_player).w,a1
0001BAF6 7000                       		moveq	#0,d0
0001BAF8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BAFC 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001BB00 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001BB04 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001BB0A 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001BB10 7003                       		moveq	#3,d0
0001BB12 C028 0022                  		and.b	obStatus(a0),d0
0001BB16 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BB1C 8128 0001                  		or.b	d0,obRender(a0)
0001BB20 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001BB26                            ; ===========================================================================
0001BB26 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001BB2A 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001BB2E 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001BB32 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001BB36                            ; ===========================================================================
0001BB36                            
0001BB36                            loc_17F1E:
0001BB36 3029 0008                  		move.w	obX(a1),d0
0001BB3A 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001BB3E 6500                       		bcs.s	loc_17F38
0001BB40 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BB46 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001BB4C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB50                            
0001BB50                            loc_17F38:
0001BB50 6100 F948                  		bsr.w	BossMove
0001BB54 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB5A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB60                            
0001BB60                            loc_17F48:
0001BB60 4A28 003D                  		tst.b	$3D(a0)
0001BB64 6600                       		bne.s	loc_17F8E
0001BB66 4A28 0022                  		tst.b	obStatus(a0)
0001BB6A 6B00                       		bmi.s	loc_17F92
0001BB6C 4A28 0020                  		tst.b	obColType(a0)
0001BB70 6600                       		bne.s	locret_17F8C
0001BB72 4A28 003E                  		tst.b	$3E(a0)
0001BB76 6600                       		bne.s	loc_17F70
0001BB78 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BB88                            
0001BB88                            loc_17F70:
0001BB88 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BB8C 7000                       		moveq	#0,d0
0001BB8E 4A51                       		tst.w	(a1)
0001BB90 6600                       		bne.s	loc_17F7E
0001BB92 303C 0EEE                  		move.w	#cWhite,d0
0001BB96                            
0001BB96                            loc_17F7E:
0001BB96 3280                       		move.w	d0,(a1)
0001BB98 5328 003E                  		subq.b	#1,$3E(a0)
0001BB9C 6600                       		bne.s	locret_17F8C
0001BB9E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BBA4                            
0001BBA4                            locret_17F8C:
0001BBA4 4E75                       		rts	
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_17F8E:
0001BBA6 6000 F8B0                  		bra.w	BossDefeated
0001BBAA                            ; ===========================================================================
0001BBAA                            
0001BBAA                            loc_17F92:
0001BBAA 7064                       		moveq	#100,d0
0001BBAC 6100 0000                  		bsr.w	AddPoints
0001BBB0 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001BBB6 4E75                       		rts	
0001BBB8                            ; ===========================================================================
0001BBB8                            
0001BBB8                            loc_17FA0:
0001BBB8 70FE                       		moveq	#-2,d0
0001BBBA 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001BBC0 6500                       		bcs.s	loc_17FB6
0001BBC2 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001BBC8 4268 0010                  		clr.w	obVelX(a0)
0001BBCC 5240                       		addq.w	#1,d0
0001BBCE                            
0001BBCE                            loc_17FB6:
0001BBCE 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001BBD4 6E00                       		bgt.s	loc_17FCA
0001BBD6 317C 0500 0038             		move.w	#$500,$38(a0)
0001BBDC 4268 0012                  		clr.w	obVelY(a0)
0001BBE0 5240                       		addq.w	#1,d0
0001BBE2                            
0001BBE2                            loc_17FCA:
0001BBE2 6600                       		bne.s	loc_17FDC
0001BBE4 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BBEA 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001BBF0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BBF4                            
0001BBF4                            loc_17FDC:
0001BBF4 6000 FF5A                  		bra.w	loc_17F38
0001BBF8                            ; ===========================================================================
0001BBF8                            
0001BBF8                            loc_17FE0:
0001BBF8 70FE                       		moveq	#-2,d0
0001BBFA 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001BC00 6500                       		bcs.s	loc_17FF6
0001BC02 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001BC08 4268 0010                  		clr.w	obVelX(a0)
0001BC0C 5240                       		addq.w	#1,d0
0001BC0E                            
0001BC0E                            loc_17FF6:
0001BC0E 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001BC14 6E00                       		bgt.s	loc_1800A
0001BC16 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001BC1C 4268 0012                  		clr.w	obVelY(a0)
0001BC20 5240                       		addq.w	#1,d0
0001BC22                            
0001BC22                            loc_1800A:
0001BC22 6600                       		bne.s	loc_1801A
0001BC24 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BC2A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC2E 4228 003F                  		clr.b	$3F(a0)
0001BC32                            
0001BC32                            loc_1801A:
0001BC32 6000 FF1C                  		bra.w	loc_17F38
0001BC36                            ; ===========================================================================
0001BC36                            
0001BC36                            loc_1801E:
0001BC36 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001BC3C 6E00                       		bgt.s	loc_1804E
0001BC3E 317C 0100 0038             		move.w	#$100,$38(a0)
0001BC44 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BC4A 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001BC50 4A28 003D                  		tst.b	$3D(a0)
0001BC54 6700                       		beq.s	loc_18046
0001BC56 E1E8 0010                  		asl	obVelX(a0)
0001BC5A E1E8 0012                  		asl	obVelY(a0)
0001BC5E                            
0001BC5E                            loc_18046:
0001BC5E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC62 6000 FEEC                  		bra.w	loc_17F38
0001BC66                            ; ===========================================================================
0001BC66                            
0001BC66                            loc_1804E:
0001BC66 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BC6C 5428 003F                  		addq.b	#2,$3F(a0)
0001BC70 1028 003F                  		move.b	$3F(a0),d0
0001BC74 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BC7A 4A41                       		tst.w	d1
0001BC7C 6A00                       		bpl.s	loc_1806C
0001BC7E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BC84                            
0001BC84                            loc_1806C:
0001BC84 E840                       		asr.w	#4,d0
0001BC86 4840                       		swap	d0
0001BC88 4240                       		clr.w	d0
0001BC8A D0A8 0030                  		add.l	$30(a0),d0
0001BC8E 4840                       		swap	d0
0001BC90 3140 0008                  		move.w	d0,obX(a0)
0001BC94 3028 0012                  		move.w	obVelY(a0),d0
0001BC98 3238 D00C                  		move.w	(v_player+obY).w,d1
0001BC9C 9268 000C                  		sub.w	obY(a0),d1
0001BCA0 6500                       		bcs.s	loc_180A2
0001BCA2 0441 0048                  		subi.w	#$48,d1
0001BCA6 6500                       		bcs.s	loc_180A2
0001BCA8 E240                       		asr.w	#1,d0
0001BCAA 0441 0028                  		subi.w	#$28,d1
0001BCAE 6500                       		bcs.s	loc_180A2
0001BCB0 E240                       		asr.w	#1,d0
0001BCB2 0441 0028                  		subi.w	#$28,d1
0001BCB6 6500                       		bcs.s	loc_180A2
0001BCB8 7000                       		moveq	#0,d0
0001BCBA                            
0001BCBA                            loc_180A2:
0001BCBA 48C0                       		ext.l	d0
0001BCBC E180                       		asl.l	#8,d0
0001BCBE 4A28 003D                  		tst.b	$3D(a0)
0001BCC2 6700                       		beq.s	loc_180AE
0001BCC4 D080                       		add.l	d0,d0
0001BCC6                            
0001BCC6                            loc_180AE:
0001BCC6 D1A8 0038                  		add.l	d0,$38(a0)
0001BCCA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BCD0 6000 FE8E                  		bra.w	loc_17F48
0001BCD4                            ; ===========================================================================
0001BCD4                            
0001BCD4                            loc_180BC:
0001BCD4 70FE                       		moveq	#-2,d0
0001BCD6 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001BCDC 6500                       		bcs.s	loc_180D2
0001BCDE 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001BCE4 4268 0010                  		clr.w	obVelX(a0)
0001BCE8 5240                       		addq.w	#1,d0
0001BCEA                            
0001BCEA                            loc_180D2:
0001BCEA 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001BCF0 6E00                       		bgt.s	loc_180E6
0001BCF2 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001BCF8 4268 0012                  		clr.w	obVelY(a0)
0001BCFC 5240                       		addq.w	#1,d0
0001BCFE                            
0001BCFE                            loc_180E6:
0001BCFE 6600                       		bne.s	loc_180F2
0001BD00 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD04 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BD0A                            
0001BD0A                            loc_180F2:
0001BD0A 6000 FE44                  		bra.w	loc_17F38
0001BD0E                            ; ===========================================================================
0001BD0E                            
0001BD0E                            loc_180F6:
0001BD0E 4A28 003D                  		tst.b	$3D(a0)
0001BD12 6600                       		bne.s	loc_18112
0001BD14 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001BD1A 6D00                       		blt.s	loc_18126
0001BD1C 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001BD22 6E00                       		bgt.s	loc_18126
0001BD24 117C 0032 003C             		move.b	#$32,$3C(a0)
0001BD2A                            
0001BD2A                            loc_18112:
0001BD2A 4A38 FE2D                          tst.b     (v_invinc).w
0001BD2E 6600                               bne.s   @boss_invinc
0001BD30                            
0001BD30 1038 F5C6                          move.b   (v_Saved_music),d0
0001BD34 6000 0000                          bra.w      @boss_play
0001BD38                            
0001BD38                            @boss_invinc:
0001BD38 103C 0000                          move.b #bgm_Invincible,d0
0001BD3C                            
0001BD3C                            @boss_play:
0001BD3C 4EB8 129A                          jsr PlaySound
0001BD40 4238 F7AA                          clr.b    (f_lockscreen).w
0001BD44 08E8 0000 0022                     bset    #0,obStatus(a0)
0001BD4A 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001BD4E                            
0001BD4E                            loc_18126:
0001BD4E 6000 FE00                  		bra.w	loc_17F38
0001BD52                            ; ===========================================================================
0001BD52                            
0001BD52                            loc_1812A:
0001BD52 4A28 003D                  		tst.b	$3D(a0)
0001BD56 6600                       		bne.s	loc_18136
0001BD58 5328 003C                  		subq.b	#1,$3C(a0)
0001BD5C 6600                       		bne.s	loc_1814E
0001BD5E                            
0001BD5E                            loc_18136:
0001BD5E 4228 003C                  		clr.b	$3C(a0)
0001BD62 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD68 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD6E 4228 003D                  		clr.b	$3D(a0)
0001BD72 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD76                            
0001BD76                            loc_1814E:
0001BD76 6000 FDD8                  		bra.w	loc_17F38
0001BD7A                            ; ===========================================================================
0001BD7A                            
0001BD7A                            loc_18152:
0001BD7A 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001BD80 6400                       		bcc.s	loc_18160
0001BD82 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BD86 6000                       		bra.s	loc_18166
0001BD88                            ; ===========================================================================
0001BD88                            
0001BD88                            loc_18160:
0001BD88 4A28 0001                  		tst.b	obRender(a0)
0001BD8C 6A00                       		bpl.s	Obj77_ShipDel
0001BD8E                            
0001BD8E                            loc_18166:
0001BD8E 6000 FDC0                  		bra.w	loc_17F38
0001BD92                            ; ===========================================================================
0001BD92                            
0001BD92                            Obj77_ShipDel:
0001BD92 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001BD98                            ; ===========================================================================
0001BD98                            
0001BD98                            Obj77_FaceMain:	; Routine 4
0001BD98 2268 0034                  		movea.l	$34(a0),a1
0001BD9C 1011                       		move.b	(a1),d0
0001BD9E B010                       		cmp.b	(a0),d0
0001BDA0 6600                       		bne.s	Obj77_FaceDel
0001BDA2 7000                       		moveq	#0,d0
0001BDA4 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BDA8 7201                       		moveq	#1,d1
0001BDAA 4A28 003D                  		tst.b	$3D(a0)
0001BDAE 6700                       		beq.s	loc_1818C
0001BDB0 720A                       		moveq	#$A,d1
0001BDB2 6000                       		bra.s	loc_181A0
0001BDB4                            ; ===========================================================================
0001BDB4                            
0001BDB4                            loc_1818C:
0001BDB4 4A29 0020                  		tst.b	obColType(a1)
0001BDB8 6600                       		bne.s	loc_18196
0001BDBA 7205                       		moveq	#5,d1
0001BDBC 6000                       		bra.s	loc_181A0
0001BDBE                            ; ===========================================================================
0001BDBE                            
0001BDBE                            loc_18196:
0001BDBE 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BDC4 6500                       		bcs.s	loc_181A0
0001BDC6 7204                       		moveq	#4,d1
0001BDC8                            
0001BDC8                            loc_181A0:
0001BDC8 1141 001C                  		move.b	d1,obAnim(a0)
0001BDCC 0C00 000E                  		cmpi.b	#$E,d0
0001BDD0 6600                       		bne.s	loc_181B6
0001BDD2 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BDD8 4A28 0001                  		tst.b	obRender(a0)
0001BDDC 6A00                       		bpl.s	Obj77_FaceDel
0001BDDE                            
0001BDDE                            loc_181B6:
0001BDDE 6000                       		bra.s	Obj77_Display
0001BDE0                            ; ===========================================================================
0001BDE0                            
0001BDE0                            Obj77_FaceDel:
0001BDE0 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001BDE6                            ; ===========================================================================
0001BDE6                            
0001BDE6                            Obj77_FlameMain:; Routine 6
0001BDE6 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BDEC 2268 0034                  		movea.l	$34(a0),a1
0001BDF0 1011                       		move.b	(a1),d0
0001BDF2 B010                       		cmp.b	(a0),d0
0001BDF4 6600                       		bne.s	Obj77_FlameDel
0001BDF6 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001BDFC 6600                       		bne.s	loc_181F0
0001BDFE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BE04 4A28 0001                  		tst.b	1(a0)
0001BE08 6A00                       		bpl.s	Obj77_FlameDel
0001BE0A 6000                       		bra.s	loc_181F0
0001BE0C                            ; ===========================================================================
0001BE0C 4A69 0010                  		tst.w	obVelX(a1)
0001BE10 6700                       		beq.s	loc_181F0
0001BE12 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BE18                            
0001BE18                            loc_181F0:
0001BE18 6000                       		bra.s	Obj77_Display
0001BE1A                            ; ===========================================================================
0001BE1A                            
0001BE1A                            Obj77_FlameDel:
0001BE1A 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001BE20                            ; ===========================================================================
0001BE20                            
0001BE20                            Obj77_Display:
0001BE20 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001BE26 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001BE2C 2268 0034                  		movea.l	$34(a0),a1
0001BE30 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BE36 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BE3C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BE42 7003                       		moveq	#3,d0
0001BE44 C028 0022                  		and.b	obStatus(a0),d0
0001BE48 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BE4E 8128 0001                  		or.b	d0,obRender(a0)
0001BE52 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001BE52 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001BE58                            		include	"_incObj\73 Boss - Marble.asm"
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58                            ; Object 73 - Eggman (MZ)
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58                            
0001BE58                            BossMarble:
0001BE58 7000                       		moveq	#0,d0
0001BE5A 1028 0024                  		move.b	obRoutine(a0),d0
0001BE5E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001BE62 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001BE66                            ; ===========================================================================
0001BE66 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001BE68 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001BE6A 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001BE6C 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001BE6E 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001BE70                            
0001BE70 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BE74 0401 0200                  		dc.b 4,	1, $02, $00
0001BE78 0607 0200                  		dc.b 6,	7, $02, $00
0001BE7C 0800 0180                  		dc.b 8,	0, $01, $80
0001BE80                            ; ===========================================================================
0001BE80                            
0001BE80                            Obj73_Main:	; Routine 0
0001BE80 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BE86 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BE8C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BE92 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BE98 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001BE9C 2248                       		movea.l	a0,a1
0001BE9E 7203                       		moveq	#3,d1
0001BEA0 6000                       		bra.s	Obj73_LoadBoss
0001BEA2                            ; ===========================================================================
0001BEA2                            
0001BEA2                            Obj73_Loop:
0001BEA2 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001BEA8 6600                       		bne.s	Obj73_ShipMain
0001BEAA 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001BEAE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BEB4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BEBA                            
0001BEBA                            Obj73_LoadBoss:
0001BEBA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEC0 4229 0025                  		clr.b	ob2ndRout(a1)
0001BEC4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BEC8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BECC 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001BED0 237C 0001 B8FE 0004        		move.l	#Map_Eggman,obMap(a1)
0001BED8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BEDE 137C 0004 0001             		move.b	#4,obRender(a1)
0001BEE4 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BEEA 2348 0034                  		move.l	a0,$34(a1)
0001BEEE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001BEF2                            
0001BEF2                            Obj73_ShipMain:	; Routine 2
0001BEF2 7000                       		moveq	#0,d0
0001BEF4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BEF8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001BEFC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001BF00 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001BF06 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001BF0C 7003                       		moveq	#3,d0
0001BF0E C028 0022                  		and.b	obStatus(a0),d0
0001BF12 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BF18 8128 0001                  		or.b	d0,obRender(a0)
0001BF1C 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001BF22                            ; ===========================================================================
0001BF22 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001BF24 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001BF26 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001BF28 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001BF2A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001BF2C                            ; ===========================================================================
0001BF2C                            
0001BF2C                            loc_18302:
0001BF2C 1028 003F                  		move.b	$3F(a0),d0
0001BF30 5428 003F                  		addq.b	#2,$3F(a0)
0001BF34 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BF3A E440                       		asr.w	#2,d0
0001BF3C 3140 0012                  		move.w	d0,obVelY(a0)
0001BF40 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BF46 6100 F552                  		bsr.w	BossMove
0001BF4A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BF50 6600                       		bne.s	loc_18334
0001BF52 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BF56 4228 0028                  		clr.b	obSubtype(a0)
0001BF5A 42A8 0010                  		clr.l	obVelX(a0)
0001BF5E                            
0001BF5E                            loc_18334:
0001BF5E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001BF64 1140 0034                  		move.b	d0,$34(a0)
0001BF68                            
0001BF68                            loc_1833E:
0001BF68 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BF6E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BF74 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001BF7A 6400                       		bcc.s	locret_18390
0001BF7C 4A28 0022                  		tst.b	obStatus(a0)
0001BF80 6B00                       		bmi.s	loc_18392
0001BF82 4A28 0020                  		tst.b	obColType(a0)
0001BF86 6600                       		bne.s	locret_18390
0001BF88 4A28 003E                  		tst.b	$3E(a0)
0001BF8C 6600                       		bne.s	loc_18374
0001BF8E 117C 0028 003E             		move.b	#$28,$3E(a0)
0001BF9E                            
0001BF9E                            loc_18374:
0001BF9E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BFA2 7000                       		moveq	#0,d0
0001BFA4 4A51                       		tst.w	(a1)
0001BFA6 6600                       		bne.s	loc_18382
0001BFA8 303C 0EEE                  		move.w	#cWhite,d0
0001BFAC                            
0001BFAC                            loc_18382:
0001BFAC 3280                       		move.w	d0,(a1)
0001BFAE 5328 003E                  		subq.b	#1,$3E(a0)
0001BFB2 6600                       		bne.s	locret_18390
0001BFB4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BFBA                            
0001BFBA                            locret_18390:
0001BFBA 4E75                       		rts	
0001BFBC                            ; ===========================================================================
0001BFBC                            
0001BFBC                            loc_18392:
0001BFBC 7064                       		moveq	#100,d0
0001BFBE 6100 0000                  		bsr.w	AddPoints
0001BFC2 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001BFC8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001BFCE 4268 0010                  		clr.w	obVelX(a0)
0001BFD2 4E75                       		rts	
0001BFD4                            ; ===========================================================================
0001BFD4                            
0001BFD4                            loc_183AA:
0001BFD4 7000                       		moveq	#0,d0
0001BFD6 1028 0028                  		move.b	obSubtype(a0),d0
0001BFDA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001BFDE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001BFE2 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001BFE8 6000 FF7E                  		bra.w	loc_1833E
0001BFEC                            ; ===========================================================================
0001BFEC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001BFEE 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BFF0 0000                       		dc.w loc_183CA-off_183C2
0001BFF2 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BFF4                            ; ===========================================================================
0001BFF4                            
0001BFF4                            loc_183CA:
0001BFF4 4A68 0010                  		tst.w	obVelX(a0)
0001BFF8 6600                       		bne.s	loc_183FE
0001BFFA 7040                       		moveq	#$40,d0
0001BFFC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C002 6700                       		beq.s	loc_183E6
0001C004 6500                       		bcs.s	loc_183DE
0001C006 4440                       		neg.w	d0
0001C008                            
0001C008                            loc_183DE:
0001C008 3140 0012                  		move.w	d0,obVelY(a0)
0001C00C 6000 F48C                  		bra.w	BossMove
0001C010                            ; ===========================================================================
0001C010                            
0001C010                            loc_183E6:
0001C010 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C016 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001C01C 0828 0000 0022             		btst	#0,obStatus(a0)
0001C022 6600                       		bne.s	loc_183FE
0001C024 4468 0010                  		neg.w	obVelX(a0)
0001C028                            
0001C028                            loc_183FE:
0001C028 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001C02E 6400                       		bcc.s	Obj73_MakeLava
0001C030 6100 F468                  		bsr.w	BossMove
0001C034 5968 0012                  		subq.w	#4,obVelY(a0)
0001C038                            
0001C038                            Obj73_MakeLava:
0001C038 5328 0034                  		subq.b	#1,$34(a0)
0001C03C 6400                       		bcc.s	loc_1845C
0001C03E 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001C044 6600                       		bne.s	loc_1844A
0001C046 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001C04A 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001C050 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001C056 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001C05C 80FC 0050                  		divu.w	#$50,d0
0001C060 4840                       		swap	d0
0001C062 0640 1878                  		addi.w	#$1878,d0
0001C066 3340 0008                  		move.w	d0,obX(a1)
0001C06A EE09                       		lsr.b	#7,d1
0001C06C 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001C072                            
0001C072                            loc_1844A:
0001C072 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001C078 0200 001F                  		andi.b	#$1F,d0
0001C07C 0600 0040                  		addi.b	#$40,d0
0001C080 1140 0034                  		move.b	d0,$34(a0)
0001C084                            
0001C084                            loc_1845C:
0001C084 0828 0000 0022             		btst	#0,obStatus(a0)
0001C08A 6700                       		beq.s	loc_18474
0001C08C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001C092 6D00                       		blt.s	locret_1849C
0001C094 317C 1910 0030             		move.w	#$1910,$30(a0)
0001C09A 6000                       		bra.s	loc_18482
0001C09C                            ; ===========================================================================
0001C09C                            
0001C09C                            loc_18474:
0001C09C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001C0A2 6E00                       		bgt.s	locret_1849C
0001C0A4 317C 1830 0030             		move.w	#$1830,$30(a0)
0001C0AA                            
0001C0AA                            loc_18482:
0001C0AA 4268 0010                  		clr.w	obVelX(a0)
0001C0AE 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001C0B4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C0BA 6400                       		bcc.s	loc_18498
0001C0BC 4468 0012                  		neg.w	obVelY(a0)
0001C0C0                            
0001C0C0                            loc_18498:
0001C0C0 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C0C4                            
0001C0C4                            locret_1849C:
0001C0C4 4E75                       		rts	
0001C0C6                            ; ===========================================================================
0001C0C6                            
0001C0C6                            Obj73_MakeLava2:
0001C0C6 6100 F3D2                  		bsr.w	BossMove
0001C0CA 3028 0038                  		move.w	$38(a0),d0
0001C0CE 0440 022C                  		subi.w	#$22C,d0
0001C0D2 6E00                       		bgt.s	locret_184F4
0001C0D4 303C 022C                  		move.w	#$22C,d0
0001C0D8 4A68 0012                  		tst.w	obVelY(a0)
0001C0DC 6700                       		beq.s	loc_184EA
0001C0DE 4268 0012                  		clr.w	obVelY(a0)
0001C0E2 317C 0050 003C             		move.w	#$50,$3C(a0)
0001C0E8 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C0EE 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001C0F4 6600                       		bne.s	loc_184EA
0001C0F6 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001C0FC 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001C102 0669 0018 000C             		addi.w	#$18,obY(a1)
0001C108 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001C10C 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001C112                            
0001C112                            loc_184EA:
0001C112 5368 003C                  		subq.w	#1,$3C(a0)
0001C116 6600                       		bne.s	locret_184F4
0001C118 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C11C                            
0001C11C                            locret_184F4:
0001C11C 4E75                       		rts	
0001C11E                            ; ===========================================================================
0001C11E                            
0001C11E                            loc_184F6:
0001C11E 5368 003C                  		subq.w	#1,$3C(a0)
0001C122 6B00                       		bmi.s	loc_18500
0001C124 6000 F332                  		bra.w	BossDefeated
0001C128                            ; ===========================================================================
0001C128                            
0001C128                            loc_18500:
0001C128 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C12E 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C134 4268 0010                  		clr.w	obVelX(a0)
0001C138 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C13C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001C142 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C146 6600                       		bne.s	locret_1852A
0001C148 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C14E 4268 0012                  		clr.w	obVelY(a0)
0001C152                            
0001C152                            locret_1852A:
0001C152 4E75                       		rts	
0001C154                            ; ===========================================================================
0001C154                            
0001C154                            loc_1852C:
0001C154 5268 003C                  		addq.w	#1,$3C(a0)
0001C158 6700                       		beq.s	loc_18544
0001C15A 6A00                       		bpl.s	loc_1854E
0001C15C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001C162 6400                       		bcc.s	loc_18544
0001C164 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C16A 6000                       		bra.s	loc_1857A
0001C16C                            ; ===========================================================================
0001C16C                            
0001C16C                            loc_18544:
0001C16C 4268 0012                  		clr.w	obVelY(a0)
0001C170 4268 003C                  		clr.w	$3C(a0)
0001C174 6000                       		bra.s	loc_1857A
0001C176                            ; ===========================================================================
0001C176                            
0001C176                            loc_1854E:
0001C176 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001C17C 6500                       		bcs.s	loc_18566
0001C17E 6700                       		beq.s	loc_1856C
0001C180 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001C186 6500                       		bcs.s	loc_1857A
0001C188 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C18C 6000                       		bra.s	loc_1857A
0001C18E                            ; ===========================================================================
0001C18E                            
0001C18E                            loc_18566:
0001C18E 5168 0012                  		subq.w	#8,obVelY(a0)
0001C192 6000                       		bra.s	loc_1857A
0001C194                            ; ===========================================================================
0001C194                            
0001C194                            loc_1856C:
0001C194 4268 0012                  		clr.w	obVelY(a0)
0001C1A2                            
0001C1A2                            loc_1857A:
0001C1A2 6100 F2F6                  		bsr.w	BossMove
0001C1A6 6000 FDC0                  		bra.w	loc_1833E
0001C1AA                            ; ===========================================================================
0001C1AA                            
0001C1AA                            loc_18582:
0001C1AA 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001C1B0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C1B6 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001C1BC 6400                       		bcc.s	loc_1859C
0001C1BE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C1C2 6000                       		bra.s	loc_185A2
0001C1C4                            ; ===========================================================================
0001C1C4                            
0001C1C4                            loc_1859C:
0001C1C4 4A28 0001                  		tst.b	obRender(a0)
0001C1C8 6A00                       		bpl.s	Obj73_ShipDel
0001C1CA                            
0001C1CA                            loc_185A2:
0001C1CA 6100 F2CE                  		bsr.w	BossMove
0001C1CE 6000 FD98                  		bra.w	loc_1833E
0001C1D2                            ; ===========================================================================
0001C1D2                            
0001C1D2                            Obj73_ShipDel:
0001C1D2 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C1D8                            ; ===========================================================================
0001C1D8                            
0001C1D8                            Obj73_FaceMain:	; Routine 4
0001C1D8 7000                       		moveq	#0,d0
0001C1DA 7201                       		moveq	#1,d1
0001C1DC 2268 0034                  		movea.l	$34(a0),a1
0001C1E0 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C1E4 5540                       		subq.w	#2,d0
0001C1E6 6600                       		bne.s	loc_185D2
0001C1E8 0829 0001 0028             		btst	#1,obSubtype(a1)
0001C1EE 6700                       		beq.s	loc_185DA
0001C1F0 4A69 0012                  		tst.w	obVelY(a1)
0001C1F4 6600                       		bne.s	loc_185DA
0001C1F6 7204                       		moveq	#4,d1
0001C1F8 6000                       		bra.s	loc_185EE
0001C1FA                            ; ===========================================================================
0001C1FA                            
0001C1FA                            loc_185D2:
0001C1FA 5500                       		subq.b	#2,d0
0001C1FC 6B00                       		bmi.s	loc_185DA
0001C1FE 720A                       		moveq	#$A,d1
0001C200 6000                       		bra.s	loc_185EE
0001C202                            ; ===========================================================================
0001C202                            
0001C202                            loc_185DA:
0001C202 4A29 0020                  		tst.b	obColType(a1)
0001C206 6600                       		bne.s	loc_185E4
0001C208 7205                       		moveq	#5,d1
0001C20A 6000                       		bra.s	loc_185EE
0001C20C                            ; ===========================================================================
0001C20C                            
0001C20C                            loc_185E4:
0001C20C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C212 6500                       		bcs.s	loc_185EE
0001C214 7204                       		moveq	#4,d1
0001C216                            
0001C216                            loc_185EE:
0001C216 1141 001C                  		move.b	d1,obAnim(a0)
0001C21A 5900                       		subq.b	#4,d0
0001C21C 6600                       		bne.s	loc_18602
0001C21E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C224 4A28 0001                  		tst.b	obRender(a0)
0001C228 6A00                       		bpl.s	Obj73_FaceDel
0001C22A                            
0001C22A                            loc_18602:
0001C22A 6000                       		bra.s	Obj73_Display
0001C22C                            ; ===========================================================================
0001C22C                            
0001C22C                            Obj73_FaceDel:
0001C22C 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C232                            ; ===========================================================================
0001C232                            
0001C232                            Obj73_FlameMain:; Routine 6
0001C232 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C238 2268 0034                  		movea.l	$34(a0),a1
0001C23C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C242 6D00                       		blt.s	loc_1862A
0001C244 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C24A 4A28 0001                  		tst.b	obRender(a0)
0001C24E 6A00                       		bpl.s	Obj73_FlameDel
0001C250 6000                       		bra.s	loc_18636
0001C252                            ; ===========================================================================
0001C252                            
0001C252                            loc_1862A:
0001C252 4A69 0010                  		tst.w	obVelX(a1)
0001C256 6700                       		beq.s	loc_18636
0001C258 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C25E                            
0001C25E                            loc_18636:
0001C25E 6000                       		bra.s	Obj73_Display
0001C260                            ; ===========================================================================
0001C260                            
0001C260                            Obj73_FlameDel:
0001C260 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C266                            ; ===========================================================================
0001C266                            
0001C266                            Obj73_Display:
0001C266 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001C26C 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001C272                            
0001C272                            loc_1864A:
0001C272 2268 0034                  		movea.l	$34(a0),a1
0001C276 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C27C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C282 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C288 7003                       		moveq	#3,d0
0001C28A C028 0022                  		and.b	obStatus(a0),d0
0001C28E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C294 8128 0001                  		or.b	d0,obRender(a0)
0001C298 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001C29E                            ; ===========================================================================
0001C29E                            
0001C29E                            Obj73_TubeMain:	; Routine 8
0001C29E 2268 0034                  		movea.l	$34(a0),a1
0001C2A2 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C2A8 6600                       		bne.s	loc_18688
0001C2AA 4A28 0001                  		tst.b	obRender(a0)
0001C2AE 6A00                       		bpl.s	Obj73_TubeDel
0001C2B0                            
0001C2B0                            loc_18688:
0001C2B0 217C 0001 B9EE 0004        		move.l	#Map_BossItems,obMap(a0)
0001C2B8 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C2BE 117C 0004 001A             		move.b	#4,obFrame(a0)
0001C2C4 60AC                       		bra.s	loc_1864A
0001C2C6                            ; ===========================================================================
0001C2C6                            
0001C2C6                            Obj73_TubeDel:
0001C2C6 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C2C6 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C2CC                            		include	"_incObj\74 MZ Boss Fire.asm"
0001C2CC                            ; ---------------------------------------------------------------------------
0001C2CC                            ; Object 74 - lava that	Eggman drops (MZ)
0001C2CC                            ; ---------------------------------------------------------------------------
0001C2CC                            
0001C2CC                            BossFire:
0001C2CC 7000                       		moveq	#0,d0
0001C2CE 1028 0024                  		move.b	obRoutine(a0),d0
0001C2D2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001C2D6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001C2DA 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001C2E0                            ; ===========================================================================
0001C2E0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001C2E2 0000                       		dc.w Obj74_Action-Obj74_Index
0001C2E4 0000                       		dc.w loc_18886-Obj74_Index
0001C2E6 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001C2E8                            ; ===========================================================================
0001C2E8                            
0001C2E8                            Obj74_Main:	; Routine 0
0001C2E8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C2EE 117C 0008 0017             		move.b	#8,obWidth(a0)
0001C2F4 217C 0000 D4B0 0004        		move.l	#Map_Fire,obMap(a0)
0001C2FC 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001C302 117C 0004 0001             		move.b	#4,obRender(a0)
0001C308 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001C30E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C314 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C31A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C31E 4A28 0028                  		tst.b	obSubtype(a0)
0001C322 6600                       		bne.s	loc_1870A
0001C324 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C32A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C32E 6000 0000                  		bra.w	loc_18886
0001C332                            ; ===========================================================================
0001C332                            
0001C332                            loc_1870A:
0001C332 117C 001E 0029             		move.b	#$1E,$29(a0)
0001C342                            
0001C342                            Obj74_Action:	; Routine 2
0001C342 7000                       		moveq	#0,d0
0001C344 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C348 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001C34C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001C350 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001C356 43F9 0001 078C             		lea	(Ani_Fire).l,a1
0001C35C 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001C362 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001C368 6200                       		bhi.s	Obj74_Delete
0001C36A 4E75                       		rts	
0001C36C                            ; ===========================================================================
0001C36C                            
0001C36C                            Obj74_Delete:
0001C36C 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C372                            ; ===========================================================================
0001C372 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001C374 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001C376 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001C378 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001C37A                            ; ===========================================================================
0001C37A                            
0001C37A                            Obj74_Drop:
0001C37A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C380 5328 0029                  		subq.b	#1,$29(a0)
0001C384 6A00                       		bpl.s	locret_18780
0001C386 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C38C 4228 0028                  		clr.b	obSubtype(a0)
0001C390 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C396 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C39C 6100 C5E8                  		bsr.w	ObjFloorDist
0001C3A0 4A41                       		tst.w	d1
0001C3A2 6A00                       		bpl.s	locret_18780
0001C3A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3A8                            
0001C3A8                            locret_18780:
0001C3A8 4E75                       		rts	
0001C3AA                            ; ===========================================================================
0001C3AA                            
0001C3AA                            Obj74_MakeFlame:
0001C3AA 5568 000C                  		subq.w	#2,obY(a0)
0001C3AE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C3B4 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001C3BA 4268 0012                  		clr.w	obVelY(a0)
0001C3BE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C3C4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C3CA 117C 0003 0029             		move.b	#3,$29(a0)
0001C3D0 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001C3D6 6600                       		bne.s	loc_187CA
0001C3D8 47D1                       		lea	(a1),a3
0001C3DA 45D0                       		lea	(a0),a2
0001C3DC 7003                       		moveq	#3,d0
0001C3DE                            
0001C3DE                            Obj74_Loop:
0001C3DE 26DA                       		move.l	(a2)+,(a3)+
0001C3E0 26DA                       		move.l	(a2)+,(a3)+
0001C3E2 26DA                       		move.l	(a2)+,(a3)+
0001C3E4 26DA                       		move.l	(a2)+,(a3)+
0001C3E6 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001C3EA                            
0001C3EA 4469 0010                  		neg.w	obVelX(a1)
0001C3EE 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001C3F2                            
0001C3F2                            loc_187CA:
0001C3F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3F6 4E75                       		rts	
0001C3F8                            
0001C3F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3F8                            
0001C3F8                            
0001C3F8                            Obj74_Duplicate2:
0001C3F8 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001C3FE 6600                       		bne.s	locret_187EE
0001C400 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C406 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C40C 12BC 0074                  		move.b	#id_BossFire,(a1)
0001C410 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001C416                            
0001C416                            locret_187EE:
0001C416 4E75                       		rts	
0001C418                            ; End of function Obj74_Duplicate2
0001C418                            
0001C418                            ; ===========================================================================
0001C418                            
0001C418                            Obj74_Duplicate:
0001C418 6100 C56C                  		bsr.w	ObjFloorDist
0001C41C 4A41                       		tst.w	d1
0001C41E 6A00                       		bpl.s	loc_18826
0001C420 3028 0008                  		move.w	obX(a0),d0
0001C424 0C40 1940                  		cmpi.w	#$1940,d0
0001C428 6E00                       		bgt.s	loc_1882C
0001C42A 3228 0030                  		move.w	$30(a0),d1
0001C42E B240                       		cmp.w	d0,d1
0001C430 6700                       		beq.s	loc_1881E
0001C432 0240 0010                  		andi.w	#$10,d0
0001C436 0241 0010                  		andi.w	#$10,d1
0001C43A B240                       		cmp.w	d0,d1
0001C43C 6700                       		beq.s	loc_1881E
0001C43E 61B8                       		bsr.s	Obj74_Duplicate2
0001C440 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001C446                            
0001C446                            loc_1881E:
0001C446 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C44C 4E75                       		rts	
0001C44E                            ; ===========================================================================
0001C44E                            
0001C44E                            loc_18826:
0001C44E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C452 4E75                       		rts	
0001C454                            ; ===========================================================================
0001C454                            
0001C454                            loc_1882C:
0001C454 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C458 4E75                       		rts	
0001C45A                            ; ===========================================================================
0001C45A                            
0001C45A                            Obj74_FallEdge:
0001C45A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C460 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001C466 3028 0008                  		move.w	obX(a0),d0
0001C46A 9068 0032                  		sub.w	$32(a0),d0
0001C46E 6A00                       		bpl.s	loc_1884A
0001C470 4440                       		neg.w	d0
0001C472                            
0001C472                            loc_1884A:
0001C472 0C40 0012                  		cmpi.w	#$12,d0
0001C476 6600                       		bne.s	loc_18856
0001C478 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001C47E                            
0001C47E                            loc_18856:
0001C47E 6100 C506                  		bsr.w	ObjFloorDist
0001C482 4A41                       		tst.w	d1
0001C484 6A00                       		bpl.s	locret_1887E
0001C486 5328 0029                  		subq.b	#1,$29(a0)
0001C48A 6700                       		beq.s	Obj74_Delete2
0001C48C 4268 0012                  		clr.w	obVelY(a0)
0001C490 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001C496 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C49C 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C4A2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C4A6                            
0001C4A6                            locret_1887E:
0001C4A6 4E75                       		rts	
0001C4A8                            ; ===========================================================================
0001C4A8                            
0001C4A8                            Obj74_Delete2:
0001C4A8 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C4AE                            ; ===========================================================================
0001C4AE                            
0001C4AE                            loc_18886:	; Routine 4
0001C4AE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C4B4 5328 0029                  		subq.b	#1,$29(a0)
0001C4B8 6600                       		bne.s	Obj74_Animate
0001C4BA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C4C0 5968 000C                  		subq.w	#4,obY(a0)
0001C4C4 4228 0020                  		clr.b	obColType(a0)
0001C4C8                            
0001C4C8                            Obj74_Animate:
0001C4C8 43F9 0001 078C             		lea	(Ani_Fire).l,a1
0001C4CE 4EF9 0000 C85E             		jmp	(AnimateSprite).l
0001C4D4                            ; ===========================================================================
0001C4D4                            
0001C4D4                            Obj74_Delete3:	; Routine 6
0001C4D4 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C4D4 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C4DA                            
0001C4DA                            	Obj7A_Delete:
0001C4DA 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001C4E0                            
0001C4E0                            		include	"_incObj\7A Boss - Star Light.asm"
0001C4E0                            ; ---------------------------------------------------------------------------
0001C4E0                            ; Object 7A - Eggman (SLZ)
0001C4E0                            ; ---------------------------------------------------------------------------
0001C4E0                            
0001C4E0                            BossStarLight:
0001C4E0 7000                       		moveq	#0,d0
0001C4E2 1028 0024                  		move.b	obRoutine(a0),d0
0001C4E6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001C4EA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001C4EE                            ; ===========================================================================
0001C4EE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001C4F0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001C4F2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001C4F4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001C4F6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001C4F8                            
0001C4F8 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001C4FC 0401 0200                  		dc.b 4,	1, $02, $00
0001C500 0607 0200                  		dc.b 6,	7, $02, $00
0001C504 0800 0180                  		dc.b 8,	0, $01, $80
0001C508                            ; ===========================================================================
0001C508                            
0001C508                            Obj7A_Main:
0001C508 317C 2188 0008             		move.w	#$2188,obX(a0)
0001C50E 317C 0228 000C             		move.w	#$228,obY(a0)
0001C514 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C51A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C520 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C526 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C52C 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001C530 2248                       		movea.l	a0,a1
0001C532 7203                       		moveq	#3,d1
0001C534 6000                       		bra.s	Obj7A_LoadBoss
0001C536                            ; ===========================================================================
0001C536                            
0001C536                            Obj7A_Loop:
0001C536 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001C53C 6600                       		bne.s	loc_1895C
0001C53E 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001C542 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C548 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C54E                            
0001C54E                            Obj7A_LoadBoss:
0001C54E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C554 4229 0025                  		clr.b	ob2ndRout(a1)
0001C558 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C55C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C560 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C564 237C 0001 B8FE 0004        		move.l	#Map_Eggman,obMap(a1)
0001C56C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C572 137C 0004 0001             		move.b	#4,obRender(a1)
0001C578 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C57E 2348 0034                  		move.l	a0,$34(a1)
0001C582 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001C586                            
0001C586                            loc_1895C:
0001C586 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C58A 45E8 002A                  		lea	$2A(a0),a2
0001C58E 705E                       		moveq	#$5E,d0
0001C590 723E                       		moveq	#$3E,d1
0001C592                            
0001C592                            loc_18968:
0001C592 B011                       		cmp.b	(a1),d0
0001C594 6600                       		bne.s	loc_18974
0001C596 4A29 0028                  		tst.b	obSubtype(a1)
0001C59A 6700                       		beq.s	loc_18974
0001C59C 34C9                       		move.w	a1,(a2)+
0001C59E                            
0001C59E                            loc_18974:
0001C59E D2FC 0040                  		adda.w	#$40,a1
0001C5A2 51C9 FFEE                  		dbf	d1,loc_18968
0001C5A6                            
0001C5A6                            Obj7A_ShipMain:	; Routine 2
0001C5A6 7000                       		moveq	#0,d0
0001C5A8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C5AC 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001C5B0 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001C5B4 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001C5BA 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001C5C0 7003                       		moveq	#3,d0
0001C5C2 C028 0022                  		and.b	obStatus(a0),d0
0001C5C6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C5CC 8128 0001                  		or.b	d0,obRender(a0)
0001C5D0 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001C5D6                            ; ===========================================================================
0001C5D6 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001C5D8 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001C5DA 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001C5DC 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001C5DE 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001C5E0 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001C5E2                            ; ===========================================================================
0001C5E2                            
0001C5E2                            loc_189B8:
0001C5E2 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C5E8 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001C5EE 6400                       		bcc.s	loc_189CA
0001C5F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C5F4                            
0001C5F4                            loc_189CA:
0001C5F4 6100 EEA4                  		bsr.w	BossMove
0001C5F8 1028 003F                  		move.b	$3F(a0),d0
0001C5FC 5428 003F                  		addq.b	#2,$3F(a0)
0001C600 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001C606 EC40                       		asr.w	#6,d0
0001C608 D068 0038                  		add.w	$38(a0),d0
0001C60C 3140 000C                  		move.w	d0,obY(a0)
0001C610 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C616 6000                       		bra.s	loc_189FE
0001C618                            ; ===========================================================================
0001C618                            
0001C618                            loc_189EE:
0001C618 6100 EE80                  		bsr.w	BossMove
0001C61C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C622 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C628                            
0001C628                            loc_189FE:
0001C628 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C62E 6400                       		bcc.s	locret_18A44
0001C630 4A28 0022                  		tst.b	obStatus(a0)
0001C634 6B00                       		bmi.s	loc_18A46
0001C636 4A28 0020                  		tst.b	obColType(a0)
0001C63A 6600                       		bne.s	locret_18A44
0001C63C 4A28 003E                  		tst.b	$3E(a0)
0001C640 6600                       		bne.s	loc_18A28
0001C642 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C652                            
0001C652                            loc_18A28:
0001C652 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C656 7000                       		moveq	#0,d0
0001C658 4A51                       		tst.w	(a1)
0001C65A 6600                       		bne.s	loc_18A36
0001C65C 303C 0EEE                  		move.w	#cWhite,d0
0001C660                            
0001C660                            loc_18A36:
0001C660 3280                       		move.w	d0,(a1)
0001C662 5328 003E                  		subq.b	#1,$3E(a0)
0001C666 6600                       		bne.s	locret_18A44
0001C668 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C66E                            
0001C66E                            locret_18A44:
0001C66E 4E75                       		rts	
0001C670                            ; ===========================================================================
0001C670                            
0001C670                            loc_18A46:
0001C670 7064                       		moveq	#100,d0
0001C672 6100 0000                  		bsr.w	AddPoints
0001C676 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C67C 117C 0078 003C             		move.b	#$78,$3C(a0)
0001C682 4268 0010                  		clr.w	obVelX(a0)
0001C686 4E75                       		rts	
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            loc_18A5E:
0001C688 3028 0030                  		move.w	$30(a0),d0
0001C68C 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C692 0828 0000 0022             		btst	#0,obStatus(a0)
0001C698 6600                       		bne.s	loc_18A7C
0001C69A 4468 0010                  		neg.w	obVelX(a0)
0001C69E 0C40 2008                  		cmpi.w	#$2008,d0
0001C6A2 6E00                       		bgt.s	loc_18A88
0001C6A4 6000                       		bra.s	loc_18A82
0001C6A6                            ; ===========================================================================
0001C6A6                            
0001C6A6                            loc_18A7C:
0001C6A6 0C40 2138                  		cmpi.w	#$2138,d0
0001C6AA 6D00                       		blt.s	loc_18A88
0001C6AC                            
0001C6AC                            loc_18A82:
0001C6AC 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C6B2                            
0001C6B2                            loc_18A88:
0001C6B2 3028 0008                  		move.w	8(a0),d0
0001C6B6 72FF                       		moveq	#-1,d1
0001C6B8 7402                       		moveq	#2,d2
0001C6BA 45E8 002A                  		lea	$2A(a0),a2
0001C6BE 7828                       		moveq	#$28,d4
0001C6C0 4A68 0010                  		tst.w	obVelX(a0)
0001C6C4 6A00                       		bpl.s	loc_18A9E
0001C6C6 4444                       		neg.w	d4
0001C6C8                            
0001C6C8                            loc_18A9E:
0001C6C8 321A                       		move.w	(a2)+,d1
0001C6CA 2641                       		movea.l	d1,a3
0001C6CC 082B 0003 0022             		btst	#3,obStatus(a3)
0001C6D2 6600                       		bne.s	loc_18AB4
0001C6D4 362B 0008                  		move.w	8(a3),d3
0001C6D8 D644                       		add.w	d4,d3
0001C6DA 9640                       		sub.w	d0,d3
0001C6DC 6700                       		beq.s	loc_18AC0
0001C6DE                            
0001C6DE                            loc_18AB4:
0001C6DE 51CA FFE8                  		dbf	d2,loc_18A9E
0001C6E2                            
0001C6E2 1142 0028                  		move.b	d2,obSubtype(a0)
0001C6E6 6000 FF0C                  		bra.w	loc_189CA
0001C6EA                            ; ===========================================================================
0001C6EA                            
0001C6EA                            loc_18AC0:
0001C6EA 1142 0028                  		move.b	d2,obSubtype(a0)
0001C6EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C6F2 117C 0028 003C             		move.b	#$28,$3C(a0)
0001C6F8 6000 FEFA                  		bra.w	loc_189CA
0001C6FC                            ; ===========================================================================
0001C6FC                            
0001C6FC                            Obj7A_MakeBall:
0001C6FC 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001C702 6600                       		bne.s	loc_18B36
0001C704 70FF                       		moveq	#-1,d0
0001C706 1028 0028                  		move.b	obSubtype(a0),d0
0001C70A 4880                       		ext.w	d0
0001C70C 6B00                       		bmi.s	loc_18B40
0001C70E 5540                       		subq.w	#2,d0
0001C710 4440                       		neg.w	d0
0001C712 D040                       		add.w	d0,d0
0001C714 43E8 002A                  		lea	$2A(a0),a1
0001C718 3031 0000                  		move.w	(a1,d0.w),d0
0001C71C 2440                       		movea.l	d0,a2
0001C71E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C722 723E                       		moveq	#$3E,d1
0001C724                            
0001C724                            loc_18AFA:
0001C724 B0A9 003C                  		cmp.l	$3C(a1),d0
0001C728 6700                       		beq.s	loc_18B40
0001C72A D2FC 0040                  		adda.w	#$40,a1
0001C72E 51C9 FFF4                  		dbf	d1,loc_18AFA
0001C732                            
0001C732 2F08                       		move.l	a0,-(sp)
0001C734 41D2                       		lea	(a2),a0
0001C736 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001C73C 205F                       		movea.l	(sp)+,a0
0001C73E 6600                       		bne.s	loc_18B40
0001C740 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001C744 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C74A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C750 0669 0020 000C             		addi.w	#$20,obY(a1)
0001C756 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001C75C 234A 003C                  		move.l	a2,$3C(a1)
0001C760                            
0001C760                            loc_18B36:
0001C760 5328 003C                  		subq.b	#1,$3C(a0)
0001C764 6700                       		beq.s	loc_18B40
0001C766 6000 FEC0                  		bra.w	loc_189FE
0001C76A                            ; ===========================================================================
0001C76A                            
0001C76A                            loc_18B40:
0001C76A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C76E 6000 FE84                  		bra.w	loc_189CA
0001C772                            ; ===========================================================================
0001C772                            
0001C772                            loc_18B48:
0001C772 5328 003C                  		subq.b	#1,$3C(a0)
0001C776 6B00                       		bmi.s	loc_18B52
0001C778 6000 ECDE                  		bra.w	BossDefeated
0001C77C                            ; ===========================================================================
0001C77C                            
0001C77C                            loc_18B52:
0001C77C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C780 4268 0012                  		clr.w	obVelY(a0)
0001C784 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C78A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C790 4268 0010                  		clr.w	obVelX(a0)
0001C794 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001C79A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C79E 6600                       		bne.s	loc_18B7C
0001C7A0 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C7A6                            
0001C7A6                            loc_18B7C:
0001C7A6 6000 FE80                  		bra.w	loc_189FE
0001C7AA                            ; ===========================================================================
0001C7AA                            
0001C7AA                            loc_18B80:
0001C7AA 5228 003C                  		addq.b	#1,$3C(a0)
0001C7AE 6700                       		beq.s	loc_18B90
0001C7B0 6A00                       		bpl.s	loc_18B96
0001C7B2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C7B8 6000                       		bra.s	loc_18BC2
0001C7BA                            ; ===========================================================================
0001C7BA                            
0001C7BA                            loc_18B90:
0001C7BA 4268 0012                  		clr.w	obVelY(a0)
0001C7BE 6000                       		bra.s	loc_18BC2
0001C7C0                            ; ===========================================================================
0001C7C0                            
0001C7C0                            loc_18B96:
0001C7C0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001C7C6 6500                       		bcs.s	loc_18BAE
0001C7C8 6700                       		beq.s	loc_18BB4
0001C7CA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001C7D0 6500                       		bcs.s	loc_18BC2
0001C7D2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C7D6 6000                       		bra.s	loc_18BC2
0001C7D8                            ; ===========================================================================
0001C7D8                            
0001C7D8                            loc_18BAE:
0001C7D8 5168 0012                  		subq.w	#8,obVelY(a0)
0001C7DC 6000                       		bra.s	loc_18BC2
0001C7DE                            ; ===========================================================================
0001C7DE                            
0001C7DE                            loc_18BB4:
0001C7DE 4268 0012                          	clr.w    obVelY(a0)
0001C7E2 4A38 FE2D                          	tst.b     (v_invinc).w
0001C7E6 6600                               	bne.s   @boss_invinc
0001C7E8                            
0001C7E8 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C7EC 6000 0000                          	bra.w      @boss_play
0001C7F0                            
0001C7F0                            	@boss_invinc:
0001C7F0 103C 0000                          	move.b #bgm_Invincible,d0
0001C7F4                            
0001C7F4                            	@boss_play:
0001C7F4 4EB8 129A                          	jsr PlaySound
0001C7F8                            
0001C7F8                            loc_18BC2:
0001C7F8 6000 FE1E                  		bra.w	loc_189EE
0001C7FC                            ; ===========================================================================
0001C7FC                            
0001C7FC                            loc_18BC6:
0001C7FC 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C802 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C808 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001C80E 6400                       		bcc.s	loc_18BE0
0001C810 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C814 6000                       		bra.s	loc_18BE8
0001C816                            ; ===========================================================================
0001C816                            
0001C816                            loc_18BE0:
0001C816 4A28 0001                  		tst.b	obRender(a0)
0001C81A 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001C81E                            
0001C81E                            loc_18BE8:
0001C81E 6100 EC7A                  		bsr.w	BossMove
0001C822 6000 FDD0                  		bra.w	loc_189CA
0001C826                            ; ===========================================================================
0001C826                            
0001C826                            Obj7A_FaceMain:	; Routine 4
0001C826 7000                       		moveq	#0,d0
0001C828 7201                       		moveq	#1,d1
0001C82A 2268 0034                  		movea.l	$34(a0),a1
0001C82E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C832 0C00 0006                  		cmpi.b	#6,d0
0001C836 6B00                       		bmi.s	loc_18C06
0001C838 720A                       		moveq	#$A,d1
0001C83A 6000                       		bra.s	loc_18C1A
0001C83C                            ; ===========================================================================
0001C83C                            
0001C83C                            loc_18C06:
0001C83C 4A29 0020                  		tst.b	obColType(a1)
0001C840 6600                       		bne.s	loc_18C10
0001C842 7205                       		moveq	#5,d1
0001C844 6000                       		bra.s	loc_18C1A
0001C846                            ; ===========================================================================
0001C846                            
0001C846                            loc_18C10:
0001C846 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C84C 6500                       		bcs.s	loc_18C1A
0001C84E 7204                       		moveq	#4,d1
0001C850                            
0001C850                            loc_18C1A:
0001C850 1141 001C                  		move.b	d1,obAnim(a0)
0001C854 0C00 000A                  		cmpi.b	#$A,d0
0001C858 6600                       		bne.s	loc_18C32
0001C85A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C860 4A28 0001                  		tst.b	obRender(a0)
0001C864 6A00 FC74                  		bpl.w	Obj7A_Delete
0001C868                            
0001C868                            loc_18C32:
0001C868 6000                       		bra.s	loc_18C6C
0001C86A                            ; ===========================================================================
0001C86A                            
0001C86A                            Obj7A_FlameMain:; Routine 6
0001C86A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C870 2268 0034                  		movea.l	$34(a0),a1
0001C874 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C87A 6600                       		bne.s	loc_18C56
0001C87C 4A28 0001                  		tst.b	obRender(a0)
0001C880 6A00 FC58                  		bpl.w	Obj7A_Delete
0001C884 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C88A 6000                       		bra.s	loc_18C6C
0001C88C                            ; ===========================================================================
0001C88C                            
0001C88C                            loc_18C56:
0001C88C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C892 6E00                       		bgt.s	loc_18C6C
0001C894 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C89A 6D00                       		blt.s	loc_18C6C
0001C89C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C8A2                            
0001C8A2                            loc_18C6C:
0001C8A2 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001C8A8 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001C8AE                            
0001C8AE                            loc_18C78:
0001C8AE 2268 0034                  		movea.l	$34(a0),a1
0001C8B2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C8B8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C8BE 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C8C4 7003                       		moveq	#3,d0
0001C8C6 C028 0022                  		and.b	obStatus(a0),d0
0001C8CA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C8D0 8128 0001                  		or.b	d0,obRender(a0)
0001C8D4 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001C8DA                            ; ===========================================================================
0001C8DA                            
0001C8DA                            Obj7A_TubeMain:	; Routine 8
0001C8DA 2268 0034                  		movea.l	$34(a0),a1
0001C8DE 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C8E4 6600                       		bne.s	loc_18CB8
0001C8E6 4A28 0001                  		tst.b	obRender(a0)
0001C8EA 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001C8EE                            
0001C8EE                            loc_18CB8:
0001C8EE 217C 0001 B9EE 0004        		move.l	#Map_BossItems,obMap(a0)
0001C8F6 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C8FC 117C 0003 001A             		move.b	#3,obFrame(a0)
0001C902 60AA                       		bra.s	loc_18C78
0001C902 60AA                       		bra.s	loc_18C78
0001C904                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001C904                            ; ---------------------------------------------------------------------------
0001C904                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001C904                            ; ---------------------------------------------------------------------------
0001C904                            
0001C904                            BossSpikeball:
0001C904 7000                       		moveq	#0,d0
0001C906 1028 0024                  		move.b	obRoutine(a0),d0
0001C90A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001C90E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001C912 3028 0030                  		move.w	$30(a0),d0
0001C916 0240 FF80                  		andi.w	#$FF80,d0
0001C91A 3238 F700                  		move.w	(v_screenposx).w,d1
0001C91E 0441 0080                  		subi.w	#$80,d1
0001C922 0241 FF80                  		andi.w	#$FF80,d1
0001C926 9041                       		sub.w	d1,d0
0001C928 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001C92C 0C40 0280                  		cmpi.w	#$280,d0
0001C930 6200 FBA8                  		bhi.w	Obj7A_Delete
0001C934 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001C93A                            ; ===========================================================================
0001C93A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001C93C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001C93E 0000                       		dc.w loc_18DC6-Obj7B_Index
0001C940 0000                       		dc.w loc_18EAA-Obj7B_Index
0001C942 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001C944 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001C946                            ; ===========================================================================
0001C946                            
0001C946                            Obj7B_Main:	; Routine 0
0001C946 217C 0001 3D7C 0004        		move.l	#Map_SSawBall,obMap(a0)
0001C94E 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001C954 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C95A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001C960 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001C966 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C96C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001C972 2268 003C                  		movea.l	$3C(a0),a1
0001C976 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001C97C 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001C982 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C988 3028 0008                  		move.w	obX(a0),d0
0001C98C B069 0008                  		cmp.w	obX(a1),d0
0001C990 6E00                       		bgt.s	loc_18D68
0001C992 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C998 117C 0002 003A             		move.b	#2,$3A(a0)
0001C99E                            
0001C99E                            loc_18D68:
0001C99E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C9A2                            
0001C9A2                            Obj7B_Fall:	; Routine 2
0001C9A2 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001C9A8 2268 003C                  		movea.l	$3C(a0),a1
0001C9AC 45F9 0000 0000             		lea	(word_19018).l,a2
0001C9B2 7000                       		moveq	#0,d0
0001C9B4 1029 001A                  		move.b	obFrame(a1),d0
0001C9B8 3228 0008                  		move.w	8(a0),d1
0001C9BC 9268 0030                  		sub.w	$30(a0),d1
0001C9C0 6400                       		bcc.s	loc_18D8E
0001C9C2 5440                       		addq.w	#2,d0
0001C9C4                            
0001C9C4                            loc_18D8E:
0001C9C4 D040                       		add.w	d0,d0
0001C9C6 3228 0034                  		move.w	$34(a0),d1
0001C9CA D272 0000                  		add.w	(a2,d0.w),d1
0001C9CE B268 000C                  		cmp.w	obY(a0),d1
0001C9D2 6E00                       		bgt.s	locret_18DC4
0001C9D4 2268 003C                  		movea.l	$3C(a0),a1
0001C9D8 7202                       		moveq	#2,d1
0001C9DA 0828 0000 0022             		btst	#0,obStatus(a0)
0001C9E0 6700                       		beq.s	loc_18DAE
0001C9E2 7200                       		moveq	#0,d1
0001C9E4                            
0001C9E4                            loc_18DAE:
0001C9E4 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001C9EA 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001C9F0 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C9F6 6000 0000                  		bra.w	loc_18FA2
0001C9FA                            ; ===========================================================================
0001C9FA                            
0001C9FA                            locret_18DC4:
0001C9FA 4E75                       		rts	
0001C9FC                            ; ===========================================================================
0001C9FC                            
0001C9FC                            loc_18DC6:	; Routine 4
0001C9FC 2268 003C                  		movea.l	$3C(a0),a1
0001CA00 7000                       		moveq	#0,d0
0001CA02 1028 003A                  		move.b	$3A(a0),d0
0001CA06 9029 003A                  		sub.b	$3A(a1),d0
0001CA0A 6700                       		beq.s	loc_18E2A
0001CA0C 6400                       		bcc.s	loc_18DDA
0001CA0E 4400                       		neg.b	d0
0001CA10                            
0001CA10                            loc_18DDA:
0001CA10 323C F7E8                  		move.w	#-$818,d1
0001CA14 343C FEEC                  		move.w	#-$114,d2
0001CA18 0C00 0001                  		cmpi.b	#1,d0
0001CA1C 6700                       		beq.s	loc_18E00
0001CA1E 323C F6A0                  		move.w	#-$960,d1
0001CA22 343C FF0C                  		move.w	#-$F4,d2
0001CA26 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001CA2C 6D00                       		blt.s	loc_18E00
0001CA2E 323C F5E0                  		move.w	#-$A20,d1
0001CA32 343C FF80                  		move.w	#-$80,d2
0001CA36                            
0001CA36                            loc_18E00:
0001CA36 3141 0012                  		move.w	d1,obVelY(a0)
0001CA3A 3142 0010                  		move.w	d2,obVelX(a0)
0001CA3E 3028 0008                  		move.w	obX(a0),d0
0001CA42 9068 0030                  		sub.w	$30(a0),d0
0001CA46 6400                       		bcc.s	loc_18E16
0001CA48 4468 0010                  		neg.w	obVelX(a0)
0001CA4C                            
0001CA4C                            loc_18E16:
0001CA4C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CA52 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CA58 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CA5C 6000 0000                  		bra.w	loc_18EAA
0001CA60                            ; ===========================================================================
0001CA60                            
0001CA60                            loc_18E2A:
0001CA60 45F9 0000 0000             		lea	(word_19018).l,a2
0001CA66 7000                       		moveq	#0,d0
0001CA68 1029 001A                  		move.b	obFrame(a1),d0
0001CA6C 343C 0028                  		move.w	#$28,d2
0001CA70 3228 0008                  		move.w	obX(a0),d1
0001CA74 9268 0030                  		sub.w	$30(a0),d1
0001CA78 6400                       		bcc.s	loc_18E48
0001CA7A 4442                       		neg.w	d2
0001CA7C 5440                       		addq.w	#2,d0
0001CA7E                            
0001CA7E                            loc_18E48:
0001CA7E D040                       		add.w	d0,d0
0001CA80 3228 0034                  		move.w	$34(a0),d1
0001CA84 D272 0000                  		add.w	(a2,d0.w),d1
0001CA88 3141 000C                  		move.w	d1,obY(a0)
0001CA8C D468 0030                  		add.w	$30(a0),d2
0001CA90 3142 0008                  		move.w	d2,obX(a0)
0001CA94 4268 000E                  		clr.w	obY+2(a0)
0001CA98 4268 000A                  		clr.w	obX+2(a0)
0001CA9C 5368 0028                  		subq.w	#1,obSubtype(a0)
0001CAA0 6600                       		bne.s	loc_18E7A
0001CAA2 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CAA8 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001CAAE 4E75                       		rts	
0001CAB0                            ; ===========================================================================
0001CAB0                            
0001CAB0                            loc_18E7A:
0001CAB0 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001CAB6 6600                       		bne.s	loc_18E88
0001CAB8 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001CABE                            
0001CABE                            loc_18E88:
0001CABE 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001CAC4 6600                       		bne.s	loc_18E96
0001CAC6 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001CACC                            
0001CACC                            loc_18E96:
0001CACC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001CAD0 6E00                       		bgt.s	locret_18EA8
0001CAD2 0868 0000 001A             		bchg	#0,obFrame(a0)
0001CAD8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CADE                            
0001CADE                            locret_18EA8:
0001CADE 4E75                       		rts	
0001CAE0                            ; ===========================================================================
0001CAE0                            
0001CAE0                            loc_18EAA:	; Routine 6
0001CAE0 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001CAE4 707A                       		moveq	#id_BossStarLight,d0
0001CAE6 7240                       		moveq	#$40,d1
0001CAE8 743E                       		moveq	#$3E,d2
0001CAEA                            
0001CAEA                            loc_18EB4:
0001CAEA B011                       		cmp.b	(a1),d0
0001CAEC 6700                       		beq.s	loc_18EC0
0001CAEE D2C1                       		adda.w	d1,a1
0001CAF0 51CA FFF8                  		dbf	d2,loc_18EB4
0001CAF4                            
0001CAF4 6000                       		bra.s	loc_18F38
0001CAF6                            ; ===========================================================================
0001CAF6                            
0001CAF6                            loc_18EC0:
0001CAF6 3029 0008                  		move.w	obX(a1),d0
0001CAFA 3229 000C                  		move.w	obY(a1),d1
0001CAFE 3428 0008                  		move.w	obX(a0),d2
0001CB02 3628 000C                  		move.w	obY(a0),d3
0001CB06 45FA 0000                  		lea	byte_19022(pc),a2
0001CB0A 47FA 0000                  		lea	byte_19026(pc),a3
0001CB0E 181A                       		move.b	(a2)+,d4
0001CB10 4884                       		ext.w	d4
0001CB12 D044                       		add.w	d4,d0
0001CB14 181B                       		move.b	(a3)+,d4
0001CB16 4884                       		ext.w	d4
0001CB18 D444                       		add.w	d4,d2
0001CB1A B440                       		cmp.w	d0,d2
0001CB1C 6500                       		bcs.s	loc_18F38
0001CB1E 181A                       		move.b	(a2)+,d4
0001CB20 4884                       		ext.w	d4
0001CB22 D044                       		add.w	d4,d0
0001CB24 181B                       		move.b	(a3)+,d4
0001CB26 4884                       		ext.w	d4
0001CB28 D444                       		add.w	d4,d2
0001CB2A B042                       		cmp.w	d2,d0
0001CB2C 6500                       		bcs.s	loc_18F38
0001CB2E 181A                       		move.b	(a2)+,d4
0001CB30 4884                       		ext.w	d4
0001CB32 D244                       		add.w	d4,d1
0001CB34 181B                       		move.b	(a3)+,d4
0001CB36 4884                       		ext.w	d4
0001CB38 D644                       		add.w	d4,d3
0001CB3A B641                       		cmp.w	d1,d3
0001CB3C 6500                       		bcs.s	loc_18F38
0001CB3E 181A                       		move.b	(a2)+,d4
0001CB40 4884                       		ext.w	d4
0001CB42 D244                       		add.w	d4,d1
0001CB44 181B                       		move.b	(a3)+,d4
0001CB46 4884                       		ext.w	d4
0001CB48 D644                       		add.w	d4,d3
0001CB4A B243                       		cmp.w	d3,d1
0001CB4C 6500                       		bcs.s	loc_18F38
0001CB4E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB52 4268 0028                  		clr.w	obSubtype(a0)
0001CB56 4229 0020                  		clr.b	obColType(a1)
0001CB5A 5329 0021                  		subq.b	#1,obColProp(a1)
0001CB5E 6600                       		bne.s	loc_18F38
0001CB60 08E9 0007 0022             		bset	#7,obStatus(a1)
0001CB66 4268 0010                  		clr.w	obVelX(a0)
0001CB6A 4268 0012                  		clr.w	obVelY(a0)
0001CB6E                            
0001CB6E                            loc_18F38:
0001CB6E 4A68 0012                  		tst.w	obVelY(a0)
0001CB72 6A00                       		bpl.s	loc_18F5C
0001CB74 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001CB7A 3028 0034                  		move.w	$34(a0),d0
0001CB7E 0440 002F                  		subi.w	#$2F,d0
0001CB82 B068 000C                  		cmp.w	obY(a0),d0
0001CB86 6E00                       		bgt.s	loc_18F58
0001CB88 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001CB8E                            
0001CB8E                            loc_18F58:
0001CB8E 6000 FF20                  		bra.w	loc_18E7A
0001CB92                            ; ===========================================================================
0001CB92                            
0001CB92                            loc_18F5C:
0001CB92 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001CB98 2268 003C                  		movea.l	$3C(a0),a1
0001CB9C 45F9 0000 0000             		lea	(word_19018).l,a2
0001CBA2 7000                       		moveq	#0,d0
0001CBA4 1029 001A                  		move.b	obFrame(a1),d0
0001CBA8 3228 0008                  		move.w	obX(a0),d1
0001CBAC 9268 0030                  		sub.w	$30(a0),d1
0001CBB0 6400                       		bcc.s	loc_18F7E
0001CBB2 5440                       		addq.w	#2,d0
0001CBB4                            
0001CBB4                            loc_18F7E:
0001CBB4 D040                       		add.w	d0,d0
0001CBB6 3228 0034                  		move.w	$34(a0),d1
0001CBBA D272 0000                  		add.w	(a2,d0.w),d1
0001CBBE B268 000C                  		cmp.w	obY(a0),d1
0001CBC2 6ECA                       		bgt.s	loc_18F58
0001CBC4 2268 003C                  		movea.l	$3C(a0),a1
0001CBC8 7202                       		moveq	#2,d1
0001CBCA 4A68 0010                  		tst.w	obVelX(a0)
0001CBCE 6B00                       		bmi.s	loc_18F9C
0001CBD0 7200                       		moveq	#0,d1
0001CBD2                            
0001CBD2                            loc_18F9C:
0001CBD2 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001CBD8                            
0001CBD8                            loc_18FA2:
0001CBD8 1341 003A                  		move.b	d1,$3A(a1)
0001CBDC 1141 003A                  		move.b	d1,$3A(a0)
0001CBE0 B229 001A                  		cmp.b	obFrame(a1),d1
0001CBE4 6700                       		beq.s	loc_19008
0001CBE6 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001CBEC 6700                       		beq.s	loc_19008
0001CBEE 4229 0025                  		clr.b	ob2ndRout(a1)
0001CBF2 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001CBF8 45F8 D000                  		lea	(v_objspace).w,a2
0001CBFC 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001CC02 446A 0012                  		neg.w	obVelY(a2)
0001CC06 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001CC0C 6600                       		bne.s	loc_18FDC
0001CC0E E0EA 0012                  		asr	obVelY(a2)
0001CC12                            
0001CC12                            loc_18FDC:
0001CC12 08EA 0001 0022             		bset	#1,obStatus(a2)
0001CC18 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001CC1E 422A 003C                  		clr.b	$3C(a2)
0001CC22 2F08                       		move.l	a0,-(sp)
0001CC24 41D2                       		lea	(a2),a0
0001CC26 4EB9 0001 617C             		jsr	(Sonic_ChkRoll).l
0001CC2C 205F                       		movea.l	(sp)+,a0
0001CC2E 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001CC3E                            
0001CC3E                            loc_19008:
0001CC3E 4268 0010                  		clr.w	obVelX(a0)
0001CC42 4268 0012                  		clr.w	obVelY(a0)
0001CC46 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC4A 6000 FE64                  		bra.w	loc_18E7A
0001CC4E                            ; ===========================================================================
0001CC4E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001CC58                            		even
0001CC58 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001CC5C                            		even
0001CC5C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001CC60                            		even
0001CC60                            ; ===========================================================================
0001CC60                            
0001CC60                            Obj7B_Explode:	; Routine 8
0001CC60 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001CC64 4228 0024                  		clr.b	obRoutine(a0)
0001CC68 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001CC6E 6700                       		beq.s	Obj7B_MakeFrag
0001CC70 4E75                       		rts	
0001CC72                            ; ===========================================================================
0001CC72                            
0001CC72                            Obj7B_MakeFrag:
0001CC72 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001CC78 7203                       		moveq	#3,d1
0001CC7A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001CC7E                            
0001CC7E                            Obj7B_Loop:
0001CC7E 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001CC84 6600                       		bne.s	loc_1909A
0001CC86 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001CC8A 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001CC90 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001CC98 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CC9E 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001CCA4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CCAA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CCB0 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001CCB4 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001CCB8 137C 0098 0020             		move.b	#$98,obColType(a1)
0001CCBE 0029 0004 0001             		ori.b	#4,obRender(a1)
0001CCC4 08E9 0007 0001             		bset	#7,obRender(a1)
0001CCCA 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001CCD0                            
0001CCD0                            loc_1909A:
0001CCD0 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001CCD4                            
0001CCD4 4E75                       		rts	
0001CCD6                            ; ===========================================================================
0001CCD6 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001CCDA FF60 FDC0                  		dc.w -$A0, -$240
0001CCDE 0100 FCC0                  		dc.w $100, -$340
0001CCE2 00A0 FDC0                  		dc.w $A0, -$240
0001CCE6                            ; ===========================================================================
0001CCE6                            
0001CCE6                            Obj7B_MoveFrag:	; Routine $A
0001CCE6 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001CCEC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CCF2 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001CCF8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001CCFE 7004                       		moveq	#4,d0
0001CD00 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CD04 E448                       		lsr.w	#2,d0
0001CD06 1140 001A                  		move.b	d0,obFrame(a0)
0001CD0A 4A28 0001                  		tst.b	1(a0)
0001CD0E 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001CD12 4E75                       		rts	
0001CD12 4E75                       		rts	
0001CD14                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001CD14                            ; ---------------------------------------------------------------------------
0001CD14                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001CD14                            ; ---------------------------------------------------------------------------
0001CD14                            Map_BSBall_internal:
0001CD14 0000                       		dc.w @fireball1-Map_BSBall_internal
0001CD16 0000                       		dc.w @fireball2-Map_BSBall_internal
0001CD18 01                         @fireball1:	dc.b 1
0001CD19 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001CD1E 01                         @fireball2:	dc.b 1
0001CD1F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001CD24                            		even
0001CD24                            		even
0001CD24                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001CD24                            ; ---------------------------------------------------------------------------
0001CD24                            ; Object 75 - Eggman (SYZ)
0001CD24                            ; ---------------------------------------------------------------------------
0001CD24                            
0001CD24                            BossSpringYard:
0001CD24 7000                       		moveq	#0,d0
0001CD26 1028 0024                  		move.b	obRoutine(a0),d0
0001CD2A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001CD2E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001CD32                            ; ===========================================================================
0001CD32 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001CD34 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001CD36 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001CD38 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001CD3A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001CD3C                            
0001CD3C 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001CD40 0401 0280                  		dc.b 4,	1, $02, $80
0001CD44 0607 0280                  		dc.b 6,	7, $02, $80
0001CD48 0800 0280                  		dc.b 8,	0, $02, $80
0001CD4C                            ; ===========================================================================
0001CD4C                            
0001CD4C                            Obj75_Main:	; Routine 0
0001CD4C 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001CD52 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001CD58 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CD5E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001CD64 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CD6A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001CD70 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001CD74 2248                       		movea.l	a0,a1
0001CD76 7203                       		moveq	#3,d1
0001CD78 6000                       		bra.s	Obj75_LoadBoss
0001CD7A                            ; ===========================================================================
0001CD7A                            
0001CD7A                            Obj75_Loop:
0001CD7A 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001CD80 6600                       		bne.s	Obj75_ShipMain
0001CD82 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001CD86 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CD8C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CD92                            
0001CD92                            Obj75_LoadBoss:
0001CD92 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CD98 4229 0025                  		clr.b	ob2ndRout(a1)
0001CD9C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CDA0 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CDA4 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001CDA8 237C 0001 B8FE 0004        		move.l	#Map_Eggman,obMap(a1)
0001CDB0 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001CDB6 137C 0004 0001             		move.b	#4,obRender(a1)
0001CDBC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001CDC2 2348 0034                  		move.l	a0,$34(a1)
0001CDC6 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001CDCA                            
0001CDCA                            Obj75_ShipMain:	; Routine 2
0001CDCA 7000                       		moveq	#0,d0
0001CDCC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CDD0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001CDD4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001CDD8 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001CDDE 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001CDE4 7003                       		moveq	#3,d0
0001CDE6 C028 0022                  		and.b	obStatus(a0),d0
0001CDEA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001CDF0 8128 0001                  		or.b	d0,obRender(a0)
0001CDF4 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001CDFA                            ; ===========================================================================
0001CDFA 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001CDFE 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001CE02 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001CE06                            ; ===========================================================================
0001CE06                            
0001CE06                            loc_191CC:
0001CE06 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001CE0C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001CE12 6400                       		bcc.s	loc_191DE
0001CE14 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CE18                            
0001CE18                            loc_191DE:
0001CE18 1028 003F                  		move.b	$3F(a0),d0
0001CE1C 5428 003F                  		addq.b	#2,$3F(a0)
0001CE20 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001CE26 E440                       		asr.w	#2,d0
0001CE28 3140 0012                  		move.w	d0,obVelY(a0)
0001CE2C                            
0001CE2C                            loc_191F2:
0001CE2C 6100 E66C                  		bsr.w	BossMove
0001CE30 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001CE36 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CE3C                            
0001CE3C                            loc_19202:
0001CE3C 3028 0008                  		move.w	8(a0),d0
0001CE40 0440 2C00                  		subi.w	#$2C00,d0
0001CE44 EA48                       		lsr.w	#5,d0
0001CE46 1140 0034                  		move.b	d0,$34(a0)
0001CE4A 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001CE50 6400                       		bcc.s	locret_19256
0001CE52 4A28 0022                  		tst.b	obStatus(a0)
0001CE56 6B00                       		bmi.s	loc_19258
0001CE58 4A28 0020                  		tst.b	obColType(a0)
0001CE5C 6600                       		bne.s	locret_19256
0001CE5E 4A28 003E                  		tst.b	$3E(a0)
0001CE62 6600                       		bne.s	loc_1923A
0001CE64 117C 0020 003E             		move.b	#$20,$3E(a0)
0001CE74                            
0001CE74                            loc_1923A:
0001CE74 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001CE78 7000                       		moveq	#0,d0
0001CE7A 4A51                       		tst.w	(a1)
0001CE7C 6600                       		bne.s	loc_19248
0001CE7E 303C 0EEE                  		move.w	#cWhite,d0
0001CE82                            
0001CE82                            loc_19248:
0001CE82 3280                       		move.w	d0,(a1)
0001CE84 5328 003E                  		subq.b	#1,$3E(a0)
0001CE88 6600                       		bne.s	locret_19256
0001CE8A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CE90                            
0001CE90                            locret_19256:
0001CE90 4E75                       		rts	
0001CE92                            ; ===========================================================================
0001CE92                            
0001CE92                            loc_19258:
0001CE92 7064                       		moveq	#100,d0
0001CE94 6100 0000                  		bsr.w	AddPoints
0001CE98 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001CE9E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001CEA4 4268 0010                  		clr.w	obVelX(a0)
0001CEA8 4E75                       		rts	
0001CEAA                            ; ===========================================================================
0001CEAA                            
0001CEAA                            loc_19270:
0001CEAA 3028 0030                  		move.w	$30(a0),d0
0001CEAE 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001CEB4 0828 0000 0022             		btst	#0,obStatus(a0)
0001CEBA 6600                       		bne.s	loc_1928E
0001CEBC 4468 0010                  		neg.w	obVelX(a0)
0001CEC0 0C40 2C08                  		cmpi.w	#$2C08,d0
0001CEC4 6E00                       		bgt.s	loc_1929E
0001CEC6 6000                       		bra.s	loc_19294
0001CEC8                            ; ===========================================================================
0001CEC8                            
0001CEC8                            loc_1928E:
0001CEC8 0C40 2D38                  		cmpi.w	#$2D38,d0
0001CECC 6D00                       		blt.s	loc_1929E
0001CECE                            
0001CECE                            loc_19294:
0001CECE 0868 0000 0022             		bchg	#0,obStatus(a0)
0001CED4 4228 003D                  		clr.b	$3D(a0)
0001CED8                            
0001CED8                            loc_1929E:
0001CED8 0440 2C10                  		subi.w	#$2C10,d0
0001CEDC 0240 001F                  		andi.w	#$1F,d0
0001CEE0 0440 001F                  		subi.w	#$1F,d0
0001CEE4 6A00                       		bpl.s	loc_192AE
0001CEE6 4440                       		neg.w	d0
0001CEE8                            
0001CEE8                            loc_192AE:
0001CEE8 5340                       		subq.w	#1,d0
0001CEEA 6E00                       		bgt.s	loc_192E8
0001CEEC 4A28 003D                  		tst.b	$3D(a0)
0001CEF0 6600                       		bne.s	loc_192E8
0001CEF2 3238 D008                  		move.w	(v_player+obX).w,d1
0001CEF6 0441 2C00                  		subi.w	#$2C00,d1
0001CEFA EA41                       		asr.w	#5,d1
0001CEFC B228 0034                  		cmp.b	$34(a0),d1
0001CF00 6600                       		bne.s	loc_192E8
0001CF02 7000                       		moveq	#0,d0
0001CF04 1028 0034                  		move.b	$34(a0),d0
0001CF08 EB40                       		asl.w	#5,d0
0001CF0A 0640 2C10                  		addi.w	#$2C10,d0
0001CF0E 3140 0030                  		move.w	d0,$30(a0)
0001CF12 6100 0000                  		bsr.w	Obj75_FindBlocks
0001CF16 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CF1A 4268 0028                  		clr.w	obSubtype(a0)
0001CF1E 4268 0010                  		clr.w	obVelX(a0)
0001CF22                            
0001CF22                            loc_192E8:
0001CF22 6000 FEF4                  		bra.w	loc_191DE
0001CF26                            ; ===========================================================================
0001CF26                            
0001CF26                            loc_192EC:
0001CF26 7000                       		moveq	#0,d0
0001CF28 1028 0028                  		move.b	obSubtype(a0),d0
0001CF2C 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001CF30 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001CF34                            ; ===========================================================================
0001CF34 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001CF36 0000                       		dc.w loc_19348-off_192FA
0001CF38 0000                       		dc.w loc_1938E-off_192FA
0001CF3A 0000                       		dc.w loc_193D0-off_192FA
0001CF3C                            ; ===========================================================================
0001CF3C                            
0001CF3C                            loc_19302:
0001CF3C 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001CF42 3028 0038                  		move.w	$38(a0),d0
0001CF46 0C40 0556                  		cmpi.w	#$556,d0
0001CF4A 6500                       		bcs.s	loc_19344
0001CF4C 317C 0556 0038             		move.w	#$556,$38(a0)
0001CF52 4268 003C                  		clr.w	$3C(a0)
0001CF56 70FF                       		moveq	#-1,d0
0001CF58 3028 0036                  		move.w	$36(a0),d0
0001CF5C 6700                       		beq.s	loc_1933C
0001CF5E 2240                       		movea.l	d0,a1
0001CF60 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CF66 117C 00FF 0029             		move.b	#-1,$29(a0)
0001CF6C 2348 0034                  		move.l	a0,$34(a1)
0001CF70 317C 0032 003C             		move.w	#$32,$3C(a0)
0001CF76                            
0001CF76                            loc_1933C:
0001CF76 4268 0012                  		clr.w	obVelY(a0)
0001CF7A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CF7E                            
0001CF7E                            loc_19344:
0001CF7E 6000 FEAC                  		bra.w	loc_191F2
0001CF82                            ; ===========================================================================
0001CF82                            
0001CF82                            loc_19348:
0001CF82 5368 003C                  		subq.w	#1,$3C(a0)
0001CF86 6A00                       		bpl.s	loc_19366
0001CF88 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CF8C 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001CF92 4A68 0036                  		tst.w	$36(a0)
0001CF96 6600                       		bne.s	loc_19362
0001CF98 E0E8 0012                  		asr	obVelY(a0)
0001CF9C                            
0001CF9C                            loc_19362:
0001CF9C 7000                       		moveq	#0,d0
0001CF9E 6000                       		bra.s	loc_1937C
0001CFA0                            ; ===========================================================================
0001CFA0                            
0001CFA0                            loc_19366:
0001CFA0 7000                       		moveq	#0,d0
0001CFA2 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001CFA8 6E00                       		bgt.s	loc_1937C
0001CFAA 7002                       		moveq	#2,d0
0001CFAC 0828 0001 003D             		btst	#1,$3D(a0)
0001CFB2 6700                       		beq.s	loc_1937C
0001CFB4 4440                       		neg.w	d0
0001CFB6                            
0001CFB6                            loc_1937C:
0001CFB6 D068 0038                  		add.w	$38(a0),d0
0001CFBA 3140 000C                  		move.w	d0,obY(a0)
0001CFBE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CFC4 6000 FE76                  		bra.w	loc_19202
0001CFC8                            ; ===========================================================================
0001CFC8                            
0001CFC8                            loc_1938E:
0001CFC8 303C 04DA                  		move.w	#$4DA,d0
0001CFCC 4A68 0036                  		tst.w	$36(a0)
0001CFD0 6700                       		beq.s	loc_1939C
0001CFD2 0440 0018                  		subi.w	#$18,d0
0001CFD6                            
0001CFD6                            loc_1939C:
0001CFD6 B068 0038                  		cmp.w	$38(a0),d0
0001CFDA 6D00                       		blt.s	loc_193BE
0001CFDC 317C 0008 003C             		move.w	#8,$3C(a0)
0001CFE2 4A68 0036                  		tst.w	$36(a0)
0001CFE6 6700                       		beq.s	loc_193B4
0001CFE8 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001CFEE                            
0001CFEE                            loc_193B4:
0001CFEE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CFF2 4268 0012                  		clr.w	obVelY(a0)
0001CFF6 6000                       		bra.s	loc_193CC
0001CFF8                            ; ===========================================================================
0001CFF8                            
0001CFF8                            loc_193BE:
0001CFF8 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001CFFE 6C00                       		bge.s	loc_193CC
0001D000 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001D006                            
0001D006                            loc_193CC:
0001D006 6000 FE24                  		bra.w	loc_191F2
0001D00A                            ; ===========================================================================
0001D00A                            
0001D00A                            loc_193D0:
0001D00A 5368 003C                  		subq.w	#1,$3C(a0)
0001D00E 6E00                       		bgt.s	loc_19406
0001D010 6B00                       		bmi.s	loc_193EE
0001D012 70FF                       		moveq	#-1,d0
0001D014 3028 0036                  		move.w	$36(a0),d0
0001D018 6700                       		beq.s	loc_193E8
0001D01A 2240                       		movea.l	d0,a1
0001D01C 137C 000A 0029             		move.b	#$A,$29(a1)
0001D022                            
0001D022                            loc_193E8:
0001D022 4268 0036                  		clr.w	$36(a0)
0001D026 6000                       		bra.s	loc_19406
0001D028                            ; ===========================================================================
0001D028                            
0001D028                            loc_193EE:
0001D028 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001D02E 6600                       		bne.s	loc_19406
0001D030 4228 0029                  		clr.b	$29(a0)
0001D034 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001D038 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001D03E 6000                       		bra.s	loc_19446
0001D040                            ; ===========================================================================
0001D040                            
0001D040                            loc_19406:
0001D040 7001                       		moveq	#1,d0
0001D042 4A68 0036                  		tst.w	$36(a0)
0001D046 6700                       		beq.s	loc_19410
0001D048 7002                       		moveq	#2,d0
0001D04A                            
0001D04A                            loc_19410:
0001D04A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001D050 6700                       		beq.s	loc_19424
0001D052 6D00                       		blt.s	loc_1941C
0001D054 4440                       		neg.w	d0
0001D056                            
0001D056                            loc_1941C:
0001D056 4A68 0036                  		tst.w	$36(a0)
0001D05A D168 0038                  		add.w	d0,$38(a0)
0001D05E                            
0001D05E                            loc_19424:
0001D05E 7000                       		moveq	#0,d0
0001D060 4A68 0036                  		tst.w	$36(a0)
0001D064 6700                       		beq.s	loc_19438
0001D066 7002                       		moveq	#2,d0
0001D068 0828 0000 003D             		btst	#0,$3D(a0)
0001D06E 6700                       		beq.s	loc_19438
0001D070 4440                       		neg.w	d0
0001D072                            
0001D072                            loc_19438:
0001D072 D068 0038                  		add.w	$38(a0),d0
0001D076 3140 000C                  		move.w	d0,obY(a0)
0001D07A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D080                            
0001D080                            loc_19446:
0001D080 6000 FDBA                  		bra.w	loc_19202
0001D084                            
0001D084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D084                            
0001D084                            
0001D084                            Obj75_FindBlocks:
0001D084 4268 0036                  		clr.w	$36(a0)
0001D088 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001D08C 703E                       		moveq	#$3E,d0
0001D08E 7276                       		moveq	#$76,d1
0001D090 1428 0034                  		move.b	$34(a0),d2
0001D094                            
0001D094                            Obj75_FindLoop:
0001D094 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001D096 6600                       		bne.s	loc_1946A	; if not, branch
0001D098 B429 0028                  		cmp.b	obSubtype(a1),d2
0001D09C 6600                       		bne.s	loc_1946A
0001D09E 3149 0036                  		move.w	a1,$36(a0)
0001D0A2 6000                       		bra.s	locret_19472
0001D0A4                            ; ===========================================================================
0001D0A4                            
0001D0A4                            loc_1946A:
0001D0A4 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001D0A8 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001D0AC                            
0001D0AC                            locret_19472:
0001D0AC 4E75                       		rts	
0001D0AE                            ; End of function Obj75_FindBlocks
0001D0AE                            
0001D0AE                            ; ===========================================================================
0001D0AE                            
0001D0AE                            loc_19474:
0001D0AE 5368 003C                  		subq.w	#1,$3C(a0)
0001D0B2 6B00                       		bmi.s	loc_1947E
0001D0B4 6000 E3A2                  		bra.w	BossDefeated
0001D0B8                            ; ===========================================================================
0001D0B8                            
0001D0B8                            loc_1947E:
0001D0B8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D0BC 4268 0012                  		clr.w	obVelY(a0)
0001D0C0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0C6 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001D0CC 4268 0010                  		clr.w	obVelX(a0)
0001D0D0 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001D0D6 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001D0DA 6600                       		bne.s	loc_194A8
0001D0DC 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001D0E2                            
0001D0E2                            loc_194A8:
0001D0E2 6000 FD58                  		bra.w	loc_19202
0001D0E6                            ; ===========================================================================
0001D0E6                            
0001D0E6                            loc_194AC:
0001D0E6 5268 003C                  		addq.w	#1,$3C(a0)
0001D0EA 6700                       		beq.s	loc_194BC
0001D0EC 6A00                       		bpl.s	loc_194C2
0001D0EE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001D0F4 6000                       		bra.s	loc_194EE
0001D0F6                            ; ===========================================================================
0001D0F6                            
0001D0F6                            loc_194BC:
0001D0F6 4268 0012                  		clr.w	obVelY(a0)
0001D0FA 6000                       		bra.s	loc_194EE
0001D0FC                            ; ===========================================================================
0001D0FC                            
0001D0FC                            loc_194C2:
0001D0FC 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001D102 6500                       		bcs.s	loc_194DA
0001D104 6700                       		beq.s	loc_194E0
0001D106 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001D10C 6500                       		bcs.s	loc_194EE
0001D10E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D112 6000                       		bra.s	loc_194EE
0001D114                            ; ===========================================================================
0001D114                            
0001D114                            loc_194DA:
0001D114 5168 0012                  		subq.w	#8,obVelY(a0)
0001D118 6000                       		bra.s	loc_194EE
0001D11A                            ; ===========================================================================
0001D11A                            
0001D11A                            loc_194E0:
0001D11A 4268 0012                  		clr.w    obVelY(a0)
0001D11E 4A38 FE2D                          	tst.b     (v_invinc).w
0001D122 6600                               	bne.s   @boss_invinc
0001D124                            
0001D124 1038 F5C6                          	move.b   (v_Saved_music),d0
0001D128 6000 0000                          	bra.w      @boss_play
0001D12C                            
0001D12C                            @boss_invinc:
0001D12C 103C 0000                          	move.b #bgm_Invincible,d0
0001D130                            
0001D130                            @boss_play:
0001D130 4EB8 129A                          	jsr PlaySound
0001D134                            
0001D134                            loc_194EE:
0001D134 6000 FCF6                  		bra.w	loc_191F2
0001D138                            ; ===========================================================================
0001D138                            
0001D138                            loc_194F2:
0001D138 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D13E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D144 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001D14A 6400                       		bcc.s	loc_1950C
0001D14C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D150 6000                       		bra.s	loc_19512
0001D152                            ; ===========================================================================
0001D152                            
0001D152                            loc_1950C:
0001D152 4A28 0001                  		tst.b	obRender(a0)
0001D156 6A00                       		bpl.s	Obj75_ShipDelete
0001D158                            
0001D158                            loc_19512:
0001D158 6100 E340                  		bsr.w	BossMove
0001D15C 6000 FCBA                  		bra.w	loc_191DE
0001D160                            ; ===========================================================================
0001D160                            
0001D160                            Obj75_ShipDelete:
0001D160 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D166                            ; ===========================================================================
0001D166                            
0001D166                            Obj75_FaceMain:	; Routine 4
0001D166 7201                       		moveq	#1,d1
0001D168 2268 0034                  		movea.l	$34(a0),a1
0001D16C 7000                       		moveq	#0,d0
0001D16E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001D172 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001D176 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001D17A 1141 001C                  		move.b	d1,obAnim(a0)
0001D17E 1010                       		move.b	(a0),d0
0001D180 B011                       		cmp.b	(a1),d0
0001D182 6600                       		bne.s	Obj75_FaceDelete
0001D184 6000                       		bra.s	loc_195BE
0001D186                            ; ===========================================================================
0001D186                            
0001D186                            Obj75_FaceDelete:
0001D186 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D18C                            ; ===========================================================================
0001D18C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001D190 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001D194 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001D198                            ; ===========================================================================
0001D198                            
0001D198                            loc_19552:
0001D198 720A                       		moveq	#$A,d1
0001D19A 4E75                       		rts	
0001D19C                            ; ===========================================================================
0001D19C                            
0001D19C                            loc_19556:
0001D19C 7206                       		moveq	#6,d1
0001D19E 4E75                       		rts	
0001D1A0                            ; ===========================================================================
0001D1A0                            
0001D1A0                            loc_1955A:
0001D1A0 7000                       		moveq	#0,d0
0001D1A2 1029 0028                  		move.b	obSubtype(a1),d0
0001D1A6 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001D1AA 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001D1AE                            ; ===========================================================================
0001D1AE 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001D1B2 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001D1B6                            ; ===========================================================================
0001D1B6                            
0001D1B6                            loc_19570:
0001D1B6 6000                       		bra.s	loc_19574
0001D1B8                            ; ===========================================================================
0001D1B8                            
0001D1B8                            loc_19572:
0001D1B8 7206                       		moveq	#6,d1
0001D1BA                            
0001D1BA                            loc_19574:
0001D1BA 4A29 0020                  		tst.b	obColType(a1)
0001D1BE 6600                       		bne.s	loc_1957E
0001D1C0 7205                       		moveq	#5,d1
0001D1C2 4E75                       		rts	
0001D1C4                            ; ===========================================================================
0001D1C4                            
0001D1C4                            loc_1957E:
0001D1C4 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001D1CA 6500                       		bcs.s	locret_19588
0001D1CC 7204                       		moveq	#4,d1
0001D1CE                            
0001D1CE                            locret_19588:
0001D1CE 4E75                       		rts	
0001D1D0                            ; ===========================================================================
0001D1D0                            
0001D1D0                            Obj75_FlameMain:; Routine 6
0001D1D0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D1D6 2268 0034                  		movea.l	$34(a0),a1
0001D1DA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D1E0 6600                       		bne.s	loc_195AA
0001D1E2 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D1E8 4A28 0001                  		tst.b	1(a0)
0001D1EC 6A00                       		bpl.s	Obj75_FlameDelete
0001D1EE 6000                       		bra.s	loc_195B6
0001D1F0                            ; ===========================================================================
0001D1F0                            
0001D1F0                            loc_195AA:
0001D1F0 4A69 0010                  		tst.w	obVelX(a1)
0001D1F4 6700                       		beq.s	loc_195B6
0001D1F6 117C 0008 001C             		move.b	#8,obAnim(a0)
0001D1FC                            
0001D1FC                            loc_195B6:
0001D1FC 6000                       		bra.s	loc_195BE
0001D1FE                            ; ===========================================================================
0001D1FE                            
0001D1FE                            Obj75_FlameDelete:
0001D1FE 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D204                            ; ===========================================================================
0001D204                            
0001D204                            loc_195BE:
0001D204 43F9 0001 B8AE             		lea	(Ani_Eggman).l,a1
0001D20A 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001D210 2268 0034                  		movea.l	$34(a0),a1
0001D214 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D21A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D220                            
0001D220                            loc_195DA:
0001D220 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D226 7003                       		moveq	#3,d0
0001D228 C028 0022                  		and.b	obStatus(a0),d0
0001D22C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D232 8128 0001                  		or.b	d0,obRender(a0)
0001D236 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D23C                            ; ===========================================================================
0001D23C                            
0001D23C                            Obj75_SpikeMain:; Routine 8
0001D23C 217C 0001 B9EE 0004        		move.l	#Map_BossItems,obMap(a0)
0001D244 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001D24A 117C 0005 001A             		move.b	#5,obFrame(a0)
0001D250 2268 0034                  		movea.l	$34(a0),a1
0001D254 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D25A 6600                       		bne.s	loc_1961C
0001D25C 4A28 0001                  		tst.b	obRender(a0)
0001D260 6A00                       		bpl.s	Obj75_SpikeDelete
0001D262                            
0001D262                            loc_1961C:
0001D262 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D268 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D26E 3028 003C                  		move.w	$3C(a0),d0
0001D272 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001D278 6600                       		bne.s	loc_19652
0001D27A 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001D280 6700                       		beq.s	loc_1964C
0001D282 4A29 0028                  		tst.b	obSubtype(a1)
0001D286 6600                       		bne.s	loc_19658
0001D288 0C40 0094                  		cmpi.w	#$94,d0
0001D28C 6C00                       		bge.s	loc_19658
0001D28E 5E40                       		addq.w	#7,d0
0001D290 6000                       		bra.s	loc_19658
0001D292                            ; ===========================================================================
0001D292                            
0001D292                            loc_1964C:
0001D292 4A69 003C                  		tst.w	$3C(a1)
0001D296 6A00                       		bpl.s	loc_19658
0001D298                            
0001D298                            loc_19652:
0001D298 4A40                       		tst.w	d0
0001D29A 6F00                       		ble.s	loc_19658
0001D29C 5B40                       		subq.w	#5,d0
0001D29E                            
0001D29E                            loc_19658:
0001D29E 3140 003C                  		move.w	d0,$3C(a0)
0001D2A2 E440                       		asr.w	#2,d0
0001D2A4 D168 000C                  		add.w	d0,obY(a0)
0001D2A8 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D2AE 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001D2B4 4228 0020                  		clr.b	obColType(a0)
0001D2B8 2268 0034                  		movea.l	$34(a0),a1
0001D2BC 4A29 0020                  		tst.b	obColType(a1)
0001D2C0 6700                       		beq.s	loc_19688
0001D2C2 4A29 0029                  		tst.b	$29(a1)
0001D2C6 6600                       		bne.s	loc_19688
0001D2C8 117C 0084 0020             		move.b	#$84,obColType(a0)
0001D2CE                            
0001D2CE                            loc_19688:
0001D2CE 6000 FF50                  		bra.w	loc_195DA
0001D2D2                            ; ===========================================================================
0001D2D2                            
0001D2D2                            Obj75_SpikeDelete:
0001D2D2 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D2D2 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D2D8                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001D2D8                            ; ---------------------------------------------------------------------------
0001D2D8                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001D2D8                            ; ---------------------------------------------------------------------------
0001D2D8                            
0001D2D8                            BossBlock:
0001D2D8 7000                       		moveq	#0,d0
0001D2DA 1028 0024                  		move.b	obRoutine(a0),d0
0001D2DE 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001D2E2 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001D2E6                            ; ===========================================================================
0001D2E6 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001D2E8 0000                       		dc.w Obj76_Action-Obj76_Index
0001D2EA 0000                       		dc.w loc_19762-Obj76_Index
0001D2EC                            ; ===========================================================================
0001D2EC                            
0001D2EC                            Obj76_Main:	; Routine 0
0001D2EC 7800                       		moveq	#0,d4
0001D2EE 3A3C 2C10                  		move.w	#$2C10,d5
0001D2F2 7C09                       		moveq	#9,d6
0001D2F4 43D0                       		lea	(a0),a1
0001D2F6 6000                       		bra.s	Obj76_MakeBlock
0001D2F8                            ; ===========================================================================
0001D2F8                            
0001D2F8                            Obj76_Loop:
0001D2F8 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001D2FE 6600                       		bne.s	Obj76_ExitLoop
0001D300                            
0001D300                            Obj76_MakeBlock:
0001D300 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001D304 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001D30C 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001D312 137C 0004 0001             		move.b	#4,obRender(a1)
0001D318 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D31E 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D324 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D32A 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001D32E 337C 0582 000C             		move.w	#$582,obY(a1)
0001D334 3344 0028                  		move.w	d4,obSubtype(a1)
0001D338 0644 0101                  		addi.w	#$101,d4
0001D33C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001D340 5429 0024                  		addq.b	#2,obRoutine(a1)
0001D344 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001D348                            
0001D348                            Obj76_ExitLoop:
0001D348 4E75                       		rts	
0001D34A                            ; ===========================================================================
0001D34A                            
0001D34A                            Obj76_Action:	; Routine 2
0001D34A 1028 0029                  		move.b	$29(a0),d0
0001D34E B028 0028                  		cmp.b	obSubtype(a0),d0
0001D352 6700                       		beq.s	Obj76_Solid
0001D354 4A00                       		tst.b	d0
0001D356 6B00                       		bmi.s	loc_19718
0001D358                            
0001D358                            loc_19712:
0001D358 6100 0000                  		bsr.w	Obj76_Break
0001D35C 6000                       		bra.s	Obj76_Display
0001D35E                            ; ===========================================================================
0001D35E                            
0001D35E                            loc_19718:
0001D35E 2268 0034                  		movea.l	$34(a0),a1
0001D362 4A29 0021                  		tst.b	obColProp(a1)
0001D366 67F0                       		beq.s	loc_19712
0001D368 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D36E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D374 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001D37A B2C8                       		cmpa.w	a0,a1
0001D37C 6500                       		bcs.s	Obj76_Display
0001D37E 3029 0012                  		move.w	obVelY(a1),d0
0001D382 48C0                       		ext.l	d0
0001D384 E080                       		asr.l	#8,d0
0001D386 D168 000C                  		add.w	d0,obY(a0)
0001D38A 6000                       		bra.s	Obj76_Display
0001D38C                            ; ===========================================================================
0001D38C                            
0001D38C                            Obj76_Solid:
0001D38C 323C 001B                  		move.w	#$1B,d1
0001D390 343C 0010                  		move.w	#$10,d2
0001D394 363C 0011                  		move.w	#$11,d3
0001D398 3828 0008                  		move.w	obX(a0),d4
0001D39C 4EB9 0001 1D08             		jsr	(SolidObject).l
0001D3A2                            
0001D3A2                            Obj76_Display:
0001D3A2 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D3A8                            ; ===========================================================================
0001D3A8                            
0001D3A8                            loc_19762:	; Routine 4
0001D3A8 4A28 0001                  		tst.b	obRender(a0)
0001D3AC 6A00                       		bpl.s	Obj76_Delete
0001D3AE 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001D3B4 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D3BA                            ; ===========================================================================
0001D3BA                            
0001D3BA                            Obj76_Delete:
0001D3BA 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D3C0                            
0001D3C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3C0                            
0001D3C0                            
0001D3C0                            Obj76_Break:
0001D3C0 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001D3C4 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001D3C8 7801                       		moveq	#1,d4
0001D3CA 7203                       		moveq	#3,d1
0001D3CC 7438                       		moveq	#$38,d2
0001D3CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3D2 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D3D8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D3DE 43D0                       		lea	(a0),a1
0001D3E0 6000                       		bra.s	Obj76_MakeFrag
0001D3E2                            ; ===========================================================================
0001D3E2                            
0001D3E2                            Obj76_LoopFrag:
0001D3E2 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001D3E8 6600                       		bne.s	loc_197D4
0001D3EA                            
0001D3EA                            Obj76_MakeFrag:
0001D3EA 45D0                       		lea	(a0),a2
0001D3EC 47D1                       		lea	(a1),a3
0001D3EE 7603                       		moveq	#3,d3
0001D3F0                            
0001D3F0                            loc_197AA:
0001D3F0 26DA                       		move.l	(a2)+,(a3)+
0001D3F2 26DA                       		move.l	(a2)+,(a3)+
0001D3F4 26DA                       		move.l	(a2)+,(a3)+
0001D3F6 26DA                       		move.l	(a2)+,(a3)+
0001D3F8 51CB FFF6                  		dbf	d3,loc_197AA
0001D3FC                            
0001D3FC 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001D400 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D404 361D                       		move.w	(a5)+,d3
0001D406 D769 0008                  		add.w	d3,obX(a1)
0001D40A 361D                       		move.w	(a5)+,d3
0001D40C D769 000C                  		add.w	d3,obY(a1)
0001D410 1344 001A                  		move.b	d4,obFrame(a1)
0001D414 5244                       		addq.w	#1,d4
0001D416 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001D41A                            
0001D41A                            loc_197D4:
0001D424                            ; End of function Obj76_Break
0001D424                            
0001D424                            ; ===========================================================================
0001D424 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001D428 0180 FE00                  		dc.w $180, -$200
0001D42C FF00 FF00                  		dc.w -$100, -$100
0001D430 0100 FF00                  		dc.w $100, -$100
0001D434 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001D438 0010 0000                  		dc.w $10, 0
0001D43C 0000 0010                  		dc.w 0,	$10
0001D440 0010 0010                  		dc.w $10, $10
0001D440 0010 0010                  		dc.w $10, $10
0001D444                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001D444                            ; ---------------------------------------------------------------------------
0001D444                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001D444                            ; ---------------------------------------------------------------------------
0001D444                            Map_BossBlock_internal:
0001D444 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001D446 0000                       		dc.w @topleft-Map_BossBlock_internal
0001D448 0000                       		dc.w @topright-Map_BossBlock_internal
0001D44A 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001D44C 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001D44E 02                         @wholeblock:	dc.b 2
0001D44F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001D454 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001D459 00                         		dc.b 0
0001D45A 01                         @topleft:	dc.b 1
0001D45B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001D460 01                         @topright:	dc.b 1
0001D461 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001D466 01                         @bottomleft:	dc.b 1
0001D467 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001D46C 01                         @bottomright:	dc.b 1
0001D46D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001D472                            		even
0001D472                            		even
0001D472                            
0001D472                            loc_1982C:
0001D472 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D478                            
0001D478                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001D478                            ; ---------------------------------------------------------------------------
0001D478                            ; Object 82 - Eggman (SBZ2)
0001D478                            ; ---------------------------------------------------------------------------
0001D478                            
0001D478                            ScrapEggman:
0001D478 7000                       		moveq	#0,d0
0001D47A 1028 0024                  		move.b	obRoutine(a0),d0
0001D47E 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001D482 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001D486                            ; ===========================================================================
0001D486 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001D488 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001D48A 0000                       		dc.w SEgg_Switch-SEgg_Index
0001D48C                            
0001D48C 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001D48F 0400 03                    		dc.b 4,	0, 3
0001D492                            ; ===========================================================================
0001D492                            
0001D492                            SEgg_Main:	; Routine 0
0001D492 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001D496 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001D49C 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001D4A2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D4A8 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001D4AE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D4B4 4228 0025                  		clr.b	ob2ndRout(a0)
0001D4B8 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001D4BC 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001D4C0 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001D4C4 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001D4CC 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D4D2 117C 0004 0001             		move.b	#4,obRender(a0)
0001D4D8 08E8 0007 0001             		bset	#7,obRender(a0)
0001D4DE 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D4E4 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001D4EA 6600                       		bne.s	SEgg_Eggman
0001D4EC 2348 0034                  		move.l	a0,$34(a1)
0001D4F0 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001D4F4 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001D4FA 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001D500 4228 0025                  		clr.b	ob2ndRout(a0)
0001D504 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001D508 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001D50C 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001D510 237C 0000 DFE0 0004        		move.l	#Map_But,obMap(a1)
0001D518 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001D51E 137C 0004 0001             		move.b	#4,obRender(a1)
0001D524 08E9 0007 0001             		bset	#7,obRender(a1)
0001D52A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D530 137C 0000 001A             		move.b	#0,obFrame(a1)
0001D536                            
0001D536                            SEgg_Eggman:	; Routine 2
0001D536 7000                       		moveq	#0,d0
0001D538 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D53C 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001D540 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001D544 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001D548 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001D54E 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D554                            ; ===========================================================================
0001D554 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001D556 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001D558 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001D55A 0000                       		dc.w loc_19934-SEgg_EggIndex
0001D55C                            ; ===========================================================================
0001D55C                            
0001D55C                            SEgg_ChkSonic:
0001D55C 3028 0008                  		move.w	obX(a0),d0
0001D560 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D564 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001D568 6400                       		bcc.s	loc_19934	; if not, branch
0001D56A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D56E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001D574 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D57A                            
0001D57A                            loc_19934:
0001D57A 4EF9 0000 F794             		jmp	(SpeedToPos).l
0001D580                            ; ===========================================================================
0001D580                            
0001D580                            SEgg_PreLeap:
0001D580 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001D584 6600                       		bne.s	loc_19954	; if time remains, branch
0001D586 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D58A 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D590 5868 000C                  		addq.w	#4,obY(a0)
0001D594 317C 000F 003C             		move.w	#15,$3C(a0)
0001D59A                            
0001D59A                            loc_19954:
0001D59A 60DE                       		bra.s	loc_19934
0001D59C                            ; ===========================================================================
0001D59C                            
0001D59C                            SEgg_Leap:
0001D59C 5368 003C                  		subq.w	#1,$3C(a0)
0001D5A0 6E00                       		bgt.s	loc_199D0
0001D5A2 6600                       		bne.s	loc_1996A
0001D5A4 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001D5AA 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001D5B0                            
0001D5B0                            loc_1996A:
0001D5B0 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001D5B6 6E00                       		bgt.s	loc_19976
0001D5B8 4268 0010                  		clr.w	obVelX(a0)
0001D5BC                            
0001D5BC                            loc_19976:
0001D5BC 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001D5C2 4A68 0012                  		tst.w	obVelY(a0)
0001D5C6 6B00                       		bmi.s	SEgg_FindBlocks
0001D5C8 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001D5CE 6500                       		bcs.s	SEgg_FindBlocks
0001D5D0 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001D5D6 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001D5DC 6500                       		bcs.s	SEgg_FindBlocks
0001D5DE 317C 029B 000C             		move.w	#$29B,obY(a0)
0001D5E4 4268 0012                  		clr.w	obVelY(a0)
0001D5E8                            
0001D5E8                            SEgg_FindBlocks:
0001D5E8 3028 0010                  		move.w	obVelX(a0),d0
0001D5EC 8068 0012                  		or.w	obVelY(a0),d0
0001D5F0 6600                       		bne.s	loc_199D0
0001D5F2 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001D5F6 703E                       		moveq	#$3E,d0
0001D5F8 7240                       		moveq	#$40,d1
0001D5FA                            
0001D5FA                            SEgg_FindLoop:	
0001D5FA D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001D5FC 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001D600 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001D604                            
0001D604 6600                       		bne.s	loc_199D0
0001D606 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001D60C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D610 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D616                            
0001D616                            loc_199D0:
0001D616 6000 FF62                  		bra.w	loc_19934
0001D61A                            ; ===========================================================================
0001D61A                            
0001D61A                            SEgg_Switch:	; Routine 4
0001D61A 7000                       		moveq	#0,d0
0001D61C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D620 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001D624 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001D628                            ; ===========================================================================
0001D628 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001D62A 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001D62C                            ; ===========================================================================
0001D62C                            
0001D62C                            loc_199E6:
0001D62C 2268 0034                  		movea.l	$34(a0),a1
0001D630 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001D636 6600                       		bne.s	SEgg_SwDisplay
0001D638 117C 0001 001A             		move.b	#1,obFrame(a0)
0001D63E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D642                            
0001D642                            SEgg_SwDisplay:
0001D642 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D642 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D648                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001D648                            ; ---------------------------------------------------------------------------
0001D648                            ; Animation script - Eggman (SBZ2)
0001D648                            ; ---------------------------------------------------------------------------
0001D648 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001D64A 0000                       		dc.w @laugh-Ani_SEgg
0001D64C 0000                       		dc.w @jump1-Ani_SEgg
0001D64E 0000                       		dc.w @intube-Ani_SEgg
0001D650 0000                       		dc.w @running-Ani_SEgg
0001D652 0000                       		dc.w @jump2-Ani_SEgg
0001D654 0000                       		dc.w @starjump-Ani_SEgg
0001D656 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001D65A 00                         		even
0001D65A 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001D65E 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001D666 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001D66A 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001D670 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001D676 00                         		even
0001D676 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001D67A 00                         		even
0001D67A 00                         		even
0001D67A                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001D67A                            ; --------------------------------------------------------------------------------
0001D67A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D67A                            ; --------------------------------------------------------------------------------
0001D67A                            
0001D67A                            SME_y00JM:	
0001D67A 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001D67E 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001D682 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001D686 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001D68A 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001D68E 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001D690 03                         SME_y00JM_16:	dc.b 3	
0001D691 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D696 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D69B 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D6A0 07                         SME_y00JM_26:	dc.b 7	
0001D6A1 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001D6A6 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D6AB FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D6B0 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001D6B5 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001D6BA F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001D6BF F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001D6C4 07                         SME_y00JM_4A:	dc.b 7	
0001D6C5 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001D6CA FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001D6CF F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001D6D4 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001D6D9 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001D6DE F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001D6E3 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001D6E8 04                         SME_y00JM_6E:	dc.b 4	
0001D6E9 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001D6EE F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001D6F3 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001D6F8 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001D6FD 07                         SME_y00JM_83:	dc.b 7	
0001D6FE F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D703 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D708 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001D70D E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001D712 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001D717 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001D71C E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001D721 04                         SME_y00JM_A7:	dc.b 4	
0001D722 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D727 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D72C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D731 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D736 07                         SME_y00JM_BC:	dc.b 7	
0001D737 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D73C E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D741 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D746 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D74B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D750 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001D755 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001D75A 05                         SME_y00JM_E0:	dc.b 5	
0001D75B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D760 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D765 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D76A 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D76F E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D774 06                         SME_y00JM_FA:	dc.b 6	
0001D775 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001D77A EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001D77F 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001D784 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001D789 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001D78E E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001D793 08                         SME_y00JM_119:	dc.b 8	
0001D794 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D799 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D79E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D7A3 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D7A8 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001D7AD F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001D7B2 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001D7B7 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001D7BC 03                         SME_y00JM_142:	dc.b 3	
0001D7BD EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001D7C2 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001D7C7 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001D7CC                            		even
0001D7CC                            		even
0001D7CC                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001D7CC                            ; ---------------------------------------------------------------------------
0001D7CC                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001D7CC                            ; ---------------------------------------------------------------------------
0001D7CC                            
0001D7CC                            FalseFloor:
0001D7CC 7000                       		moveq	#0,d0
0001D7CE 1028 0024                  		move.b	obRoutine(a0),d0
0001D7D2 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001D7D6 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001D7DA                            ; ===========================================================================
0001D7DA 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001D7DC 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001D7DE 0000                       		dc.w loc_19C36-FFloor_Index
0001D7E0 0000                       		dc.w loc_19C62-FFloor_Index
0001D7E2 0000                       		dc.w loc_19C72-FFloor_Index
0001D7E4 0000                       		dc.w loc_19C80-FFloor_Index
0001D7E6                            ; ===========================================================================
0001D7E6                            
0001D7E6                            FFloor_Main:	; Routine 0
0001D7E6 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001D7EC 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001D7F2 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001D7F8 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001D7FE 117C 0004 0001             		move.b	#4,obRender(a0)
0001D804 08E8 0007 0001             		bset	#7,obRender(a0)
0001D80A 7800                       		moveq	#0,d4
0001D80C 3A3C 1B10                  		move.w	#$1B10,d5
0001D810 7C07                       		moveq	#7,d6
0001D812 45E8 0030                  		lea	$30(a0),a2
0001D816                            
0001D816                            FFloor_MakeBlock:
0001D816 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001D81C 6600                       		bne.s	FFloor_ExitMake
0001D81E 34C9                       		move.w	a1,(a2)+
0001D820 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001D824 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001D82C 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001D832 137C 0004 0001             		move.b	#4,obRender(a1)
0001D838 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D83E 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D844 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D84A 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001D84E 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001D854 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001D858 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D85E 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001D862                            
0001D862                            FFloor_ExitMake:
0001D862 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D866 4E75                       		rts	
0001D868                            ; ===========================================================================
0001D868                            
0001D868                            FFloor_ChkBreak:; Routine 2
0001D868 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D86E 6600                       		bne.s	FFloor_Solid	; if not, branch
0001D870 4228 001A                  		clr.b	obFrame(a0)
0001D874 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001D878                            
0001D878                            FFloor_Solid:
0001D878 7000                       		moveq	#0,d0
0001D87A 1028 001A                  		move.b	obFrame(a0),d0
0001D87E 4400                       		neg.b	d0
0001D880 4880                       		ext.w	d0
0001D882 5040                       		addq.w	#8,d0
0001D884 E940                       		asl.w	#4,d0
0001D886 383C 1C00                  		move.w	#$1C00,d4
0001D88A 9840                       		sub.w	d0,d4
0001D88C 1140 0014                  		move.b	d0,obActWid(a0)
0001D890 3144 0008                  		move.w	d4,obX(a0)
0001D894 720B                       		moveq	#$B,d1
0001D896 D240                       		add.w	d0,d1
0001D898 7410                       		moveq	#$10,d2
0001D89A 7611                       		moveq	#$11,d3
0001D89C 4EF9 0001 1D08             		jmp	(SolidObject).l
0001D8A2                            ; ===========================================================================
0001D8A2                            
0001D8A2                            loc_19C36:	; Routine 4
0001D8A2 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001D8A8 6400                       		bcc.s	FFloor_Solid2
0001D8AA 70FF                       		moveq	#-1,d0
0001D8AC 1028 001A                  		move.b	obFrame(a0),d0
0001D8B0 4880                       		ext.w	d0
0001D8B2 D040                       		add.w	d0,d0
0001D8B4 3030 0030                  		move.w	$30(a0,d0.w),d0
0001D8B8 2240                       		movea.l	d0,a1
0001D8BA 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001D8C0 5228 001A                  		addq.b	#1,obFrame(a0)
0001D8C4 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001D8CA 6700                       		beq.s	loc_19C62
0001D8CC                            
0001D8CC                            FFloor_Solid2:
0001D8CC 60AA                       		bra.s	FFloor_Solid
0001D8CE                            ; ===========================================================================
0001D8CE                            
0001D8CE                            loc_19C62:	; Routine 6
0001D8CE 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001D8D4 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001D8DA 6000 FB96                  		bra.w	loc_1982C
0001D8DE                            ; ===========================================================================
0001D8DE                            
0001D8DE                            loc_19C72:	; Routine 8
0001D8DE 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D8E4 6700                       		beq.s	FFloor_Break	; if yes, branch
0001D8E6 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D8EC                            ; ===========================================================================
0001D8EC                            
0001D8EC                            loc_19C80:	; Routine $A
0001D8EC 4A28 0001                  		tst.b	obRender(a0)
0001D8F0 6A00 FB80                  		bpl.w	loc_1982C
0001D8F4 4EB9 0000 F75C             		jsr	(ObjectFall).l
0001D8FA 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D900                            ; ===========================================================================
0001D900                            
0001D900                            FFloor_Break:
0001D900 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001D904 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001D908 7801                       		moveq	#1,d4
0001D90A 7203                       		moveq	#3,d1
0001D90C 7438                       		moveq	#$38,d2
0001D90E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D912 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D918 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D91E 43D0                       		lea	(a0),a1
0001D920 6000                       		bra.s	FFloor_MakeFrag
0001D922                            ; ===========================================================================
0001D922                            
0001D922                            FFloor_LoopFrag:
0001D922 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001D928 6600                       		bne.s	FFloor_BreakSnd
0001D92A                            
0001D92A                            FFloor_MakeFrag:
0001D92A 45D0                       		lea	(a0),a2
0001D92C 47D1                       		lea	(a1),a3
0001D92E 7603                       		moveq	#3,d3
0001D930                            
0001D930                            loc_19CC4:
0001D930 26DA                       		move.l	(a2)+,(a3)+
0001D932 26DA                       		move.l	(a2)+,(a3)+
0001D934 26DA                       		move.l	(a2)+,(a3)+
0001D936 26DA                       		move.l	(a2)+,(a3)+
0001D938 51CB FFF6                  		dbf	d3,loc_19CC4
0001D93C                            
0001D93C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D940 361D                       		move.w	(a5)+,d3
0001D942 D769 0008                  		add.w	d3,obX(a1)
0001D946 361D                       		move.w	(a5)+,d3
0001D948 D769 000C                  		add.w	d3,obY(a1)
0001D94C 1344 001A                  		move.b	d4,obFrame(a1)
0001D950 5244                       		addq.w	#1,d4
0001D952 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001D956                            
0001D956                            FFloor_BreakSnd:
0001D960 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001D966                            ; ===========================================================================
0001D966 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001D96A 0120 00C0                  		dc.w $120, $C0
0001D96E FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001D972 0010 0000                  		dc.w $10, 0
0001D976 0000 0010                  		dc.w 0,	$10
0001D97A 0010 0010                  		dc.w $10, $10
0001D97A 0010 0010                  		dc.w $10, $10
0001D97E                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001D97E                            ; ---------------------------------------------------------------------------
0001D97E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001D97E                            ; ---------------------------------------------------------------------------
0001D97E                            Map_FFloor_internal:
0001D97E 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001D980 0000                       		dc.w @topleft-Map_FFloor_internal
0001D982 0000                       		dc.w @topright-Map_FFloor_internal
0001D984 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001D986 0000                       		dc.w @bottomright-Map_FFloor_internal
0001D988 01                         @wholeblock:	dc.b 1
0001D989 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001D98E 02                         @topleft:	dc.b 2
0001D98F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001D994 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001D999 00                         		dc.b 0
0001D99A 02                         @topright:	dc.b 2
0001D99B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001D9A0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001D9A5 00                         		dc.b 0
0001D9A6 02                         @bottomleft:	dc.b 2
0001D9A7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001D9AC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001D9B1 00                         		dc.b 0
0001D9B2 02                         @bottomright:	dc.b 2
0001D9B3 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001D9B8 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001D9BE 00                         		even
0001D9BE 00                         		even
0001D9BE                            		include	"_incObj\85 Boss - Final.asm"
0001D9BE                            ; ---------------------------------------------------------------------------
0001D9BE                            ; Object 85 - Eggman (FZ)
0001D9BE                            ; ---------------------------------------------------------------------------
0001D9BE                            
0001D9BE                            Obj85_Delete:
0001D9BE 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001D9C4                            ; ===========================================================================
0001D9C4                            
0001D9C4                            BossFinal:
0001D9C4 7000                       		moveq	#0,d0
0001D9C6 1028 0024                  		move.b	obRoutine(a0),d0
0001D9CA 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001D9CE 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001D9D2                            ; ===========================================================================
0001D9D2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001D9D4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001D9D6 0000                       		dc.w loc_1A38E-Obj85_Index
0001D9D8 0000                       		dc.w loc_1A346-Obj85_Index
0001D9DA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001D9DC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001D9DE 0000                       		dc.w loc_1A264-Obj85_Index
0001D9E0                            
0001D9E0 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001D9E6 0001 D67A                  		dc.l Map_SEgg		; mappings pointer
0001D9EA 25B0 0590 0300             		dc.w $25B0, $590, $300
0001D9F0 0000 0000                  		dc.l Map_EggCyl
0001D9F4 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001D9FA 0000 0000                  		dc.l Map_FZLegs
0001D9FE 26E0 0596 0470             		dc.w $26E0, $596, $470
0001DA04 0001 D67A                  		dc.l Map_SEgg
0001DA08 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DA0E 0001 B8FE                  		dc.l Map_Eggman
0001DA12 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DA18 0001 B8FE                  		dc.l Map_Eggman
0001DA1C                            
0001DA1C                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001DA1C 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001DA22 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001DA28 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001DA2E 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001DA34 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001DA3A 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001DA40                            ; ===========================================================================
0001DA40                            
0001DA40                            Obj85_Main:	; Routine 0
0001DA40 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001DA44 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001DA48 2248                       		movea.l	a0,a1
0001DA4A 7205                       		moveq	#5,d1
0001DA4C 6000                       		bra.s	Obj85_LoadBoss
0001DA4E                            ; ===========================================================================
0001DA4E                            
0001DA4E                            Obj85_Loop:
0001DA4E 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001DA54 6600                       		bne.s	loc_19E20
0001DA56                            
0001DA56                            Obj85_LoadBoss:
0001DA56 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001DA5A 335A 0008                  		move.w	(a2)+,obX(a1)
0001DA5E 335A 000C                  		move.w	(a2)+,obY(a1)
0001DA62 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001DA66 235A 0004                  		move.l	(a2)+,obMap(a1)
0001DA6A 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001DA6E 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001DA72 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001DA76 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001DA7A 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001DA7E 137C 0004 0001             		move.b	#4,obRender(a1)
0001DA84 08E8 0007 0001             		bset	#7,obRender(a0)
0001DA8A 2348 0034                  		move.l	a0,$34(a1)
0001DA8E 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001DA92                            
0001DA92                            loc_19E20:
0001DA92 45E8 0036                  		lea	$36(a0),a2
0001DA96 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001DA9C 6600                       		bne.s	loc_19E5A
0001DA9E 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001DAA2 3489                       		move.w	a1,(a2)
0001DAA4 2348 0034                  		move.l	a0,$34(a1)
0001DAA8 45E8 0038                  		lea	$38(a0),a2
0001DAAC 7400                       		moveq	#0,d2
0001DAAE 7203                       		moveq	#3,d1
0001DAB0                            
0001DAB0                            loc_19E3E:
0001DAB0 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001DAB6 6600                       		bne.s	loc_19E5A
0001DAB8 34C9                       		move.w	a1,(a2)+
0001DABA 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001DABE 2348 0034                  		move.l	a0,$34(a1)
0001DAC2 1342 0028                  		move.b	d2,obSubtype(a1)
0001DAC6 5442                       		addq.w	#2,d2
0001DAC8 51C9 FFE6                  		dbf	d1,loc_19E3E
0001DACC                            
0001DACC                            loc_19E5A:
0001DACC 317C 0000 0034             		move.w	#0,$34(a0)
0001DAD2 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001DAD8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DADE                            
0001DADE                            Obj85_Eggman:	; Routine 2
0001DADE 7000                       		moveq	#0,d0
0001DAE0 1028 0034                  		move.b	$34(a0),d0
0001DAE4 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001DAE8 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001DAEC 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001DAF2                            ; ===========================================================================
0001DAF2 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001DAF6 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001DAFA 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001DAFE 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001DB02                            ; ===========================================================================
0001DB02                            
0001DB02                            loc_19E90:
0001DB02 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001DB06 6600                       		bne.s	loc_19EA2
0001DB08 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001DB0E 6500                       		bcs.s	loc_19EA2
0001DB10 5428 0034                  		addq.b	#2,$34(a0)
0001DB14                            
0001DB14                            loc_19EA2:
0001DB14 52B8 F636                  		addq.l	#1,(v_random).w
0001DB18 4E75                       		rts	
0001DB1A                            ; ===========================================================================
0001DB1A                            
0001DB1A                            loc_19EA8:
0001DB1A 4A68 0030                  		tst.w	$30(a0)
0001DB1E 6A00                       		bpl.s	loc_19F10
0001DB20 4268 0030                  		clr.w	$30(a0)
0001DB24 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001DB2A 0240 000C                  		andi.w	#$C,d0
0001DB2E 3200                       		move.w	d0,d1
0001DB30 5441                       		addq.w	#2,d1
0001DB32 4A80                       		tst.l	d0
0001DB34 6A00                       		bpl.s	loc_19EC6
0001DB36 C340                       		exg	d1,d0
0001DB38                            
0001DB38                            loc_19EC6:
0001DB38 43FA 0000                  		lea	word_19FD6(pc),a1
0001DB3C 3031 0000                  		move.w	(a1,d0.w),d0
0001DB40 3231 1000                  		move.w	(a1,d1.w),d1
0001DB44 3140 0030                  		move.w	d0,$30(a0)
0001DB48 74FF                       		moveq	#-1,d2
0001DB4A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001DB4E 2242                       		movea.l	d2,a1
0001DB50 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DB56 337C FFFF 0030             		move.w	#-1,$30(a1)
0001DB5C 3430 1038                  		move.w	$38(a0,d1.w),d2
0001DB60 2242                       		movea.l	d2,a1
0001DB62 137C 0001 0029             		move.b	#1,$29(a1)
0001DB68 337C 0000 0030             		move.w	#0,$30(a1)
0001DB6E 317C 0001 0032             		move.w	#1,$32(a0)
0001DB74 4228 0035                  		clr.b	$35(a0)
0001DB82                            
0001DB82                            loc_19F10:
0001DB82 4A68 0032                  		tst.w	$32(a0)
0001DB86 6B00 0000                  		bmi.w	loc_19FA6
0001DB8A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001DB90 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB94 9068 0008                  		sub.w	obX(a0),d0
0001DB98 6500                       		bcs.s	loc_19F2E
0001DB9A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DBA0                            
0001DBA0                            loc_19F2E:
0001DBA0 323C 002B                  		move.w	#$2B,d1
0001DBA4 343C 0014                  		move.w	#$14,d2
0001DBA8 363C 0014                  		move.w	#$14,d3
0001DBAC 3828 0008                  		move.w	obX(a0),d4
0001DBB0 4EB9 0001 1D08             		jsr	(SolidObject).l
0001DBB6 4A44                       		tst.w	d4
0001DBB8 6E00                       		bgt.s	loc_19F50
0001DBBA                            
0001DBBA                            loc_19F48:
0001DBBA 4A28 0035                  		tst.b	$35(a0)
0001DBBE 6600                       		bne.s	loc_19F88
0001DBC0 6000                       		bra.s	loc_19F96
0001DBC2                            ; ===========================================================================
0001DBC2                            
0001DBC2                            loc_19F50:
0001DBC2 5E78 F636                  		addq.w	#7,(v_random).w
0001DBC6 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001DBCC 66EC                       		bne.s	loc_19F48
0001DBCE 303C 0300                  		move.w	#$300,d0
0001DBD2 0828 0000 0022             		btst	#0,obStatus(a0)
0001DBD8 6600                       		bne.s	loc_19F6A
0001DBDA 4440                       		neg.w	d0
0001DBDC                            
0001DBDC                            loc_19F6A:
0001DBDC 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001DBE0 4A28 0035                  		tst.b	$35(a0)
0001DBE4 6600                       		bne.s	loc_19F88
0001DBE6 5328 0021                  		subq.b	#1,obColProp(a0)
0001DBEA 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001DBF0 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DBF6                            
0001DBF6                            loc_19F88:
0001DBF6 5328 0035                  		subq.b	#1,$35(a0)
0001DBFA 6700                       		beq.s	loc_19F96
0001DBFC 117C 0003 001C             		move.b	#3,obAnim(a0)
0001DC02 6000                       		bra.s	loc_19F9C
0001DC04                            ; ===========================================================================
0001DC04                            
0001DC04                            loc_19F96:
0001DC04 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DC0A                            
0001DC0A                            loc_19F9C:
0001DC0A 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001DC0E 4EF9 0000 C85E             		jmp	(AnimateSprite).l
0001DC14                            ; ===========================================================================
0001DC14                            
0001DC14                            loc_19FA6:
0001DC14 4A28 0021                  		tst.b	obColProp(a0)
0001DC18 6700                       		beq.s	loc_19FBC
0001DC1A 5428 0034                  		addq.b	#2,$34(a0)
0001DC1E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DC24 4268 0032                  		clr.w	$32(a0)
0001DC28 4E75                       		rts	
0001DC2A                            ; ===========================================================================
0001DC2A                            
0001DC2A                            loc_19FBC:
0001DC2A 7064                       			moveq	#100,d0
0001DC2C 6100 0000                  			bsr.w	AddPoints
0001DC30 117C 0006 0034             		move.b	#6,$34(a0)
0001DC36 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001DC3C 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DC42 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001DC48 4E75                       		rts	
0001DC4A                            ; ===========================================================================
0001DC4A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001DC5A                            ; ===========================================================================
0001DC5A                            
0001DC5A                            loc_19FE6:
0001DC5A 70FF                       		moveq	#-1,d0
0001DC5C 3028 0036                  		move.w	$36(a0),d0
0001DC60 2240                       		movea.l	d0,a1
0001DC62 4A68 0030                  		tst.w	$30(a0)
0001DC66 6A00                       		bpl.s	loc_1A000
0001DC68 4268 0030                  		clr.w	$30(a0)
0001DC6C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DC72 6100                       		bsr.s	loc_1A020
0001DC74                            
0001DC74                            loc_1A000:
0001DC74 700F                       		moveq	#$F,d0
0001DC76 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001DC7A 6600                       		bne.s	loc_1A00A
0001DC7C 6100                       		bsr.s	loc_1A020
0001DC7E                            
0001DC7E                            loc_1A00A:
0001DC7E 4A68 0032                  		tst.w	$32(a0)
0001DC82 6700                       		beq.s	locret_1A01E
0001DC84 5528 0034                  		subq.b	#2,$34(a0)
0001DC88 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DC8E 4268 0032                  		clr.w	$32(a0)
0001DC92                            
0001DC92                            locret_1A01E:
0001DC92 4E75                       		rts	
0001DC94                            ; ===========================================================================
0001DC94                            
0001DC94                            loc_1A020:
0001DC9E                            ; ===========================================================================
0001DC9E                            
0001DC9E                            loc_1A02A:
0001DC9E 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001DCA4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DCAA 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001DCB0 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DCB6 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DCBC 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001DCC2 6500                       		bcs.s	loc_1A070
0001DCC4 317C 059C 000C             		move.w	#$59C,obY(a0)
0001DCCA 5428 0034                  		addq.b	#2,$34(a0)
0001DCCE 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001DCD4 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001DCDA 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001DCE0 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001DCE4                            
0001DCE4                            loc_1A070:
0001DCE4 6000 0000                  		bra.w	loc_1A166
0001DCE8                            ; ===========================================================================
0001DCE8                            
0001DCE8                            loc_1A074:
0001DCE8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DCEE 117C 0004 001C             		move.b	#4,obAnim(a0)
0001DCF4 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001DCFA 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DD00 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001DD06 6500                       		bcs.s	loc_1A09A
0001DD08 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001DD0E                            
0001DD0E                            loc_1A09A:
0001DD0E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001DD14 3028 0008                  		move.w	obX(a0),d0
0001DD18 9078 D008                  		sub.w	(v_player+obX).w,d0
0001DD1C 6A00                       		bpl.s	loc_1A0B4
0001DD1E 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001DD24 6000 0000                  		bra.w	loc_1A0F2
0001DD28                            ; ===========================================================================
0001DD28                            
0001DD28                            loc_1A0B4:
0001DD28 0440 0070                  		subi.w	#$70,d0
0001DD2C 6500                       		bcs.s	loc_1A0F2
0001DD2E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DD34 5140                       		subq.w	#8,d0
0001DD36 6500                       		bcs.s	loc_1A0F2
0001DD38 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DD3E 5140                       		subq.w	#8,d0
0001DD40 6500                       		bcs.s	loc_1A0F2
0001DD42 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD48 5140                       		subq.w	#8,d0
0001DD4A 6500                       		bcs.s	loc_1A0F2
0001DD4C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD52 5140                       		subq.w	#8,d0
0001DD54 6500                       		bcs.s	loc_1A0F2
0001DD56 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD5C 0440 0038                  		subi.w	#$38,d0
0001DD60 6500                       		bcs.s	loc_1A0F2
0001DD62 4268 0010                  		clr.w	obVelX(a0)
0001DD66                            
0001DD66                            loc_1A0F2:
0001DD66 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001DD6C 6500                       		bcs.s	loc_1A110
0001DD6E 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001DD74 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001DD7A 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001DD80 5428 0034                  		addq.b	#2,$34(a0)
0001DD84                            
0001DD84                            loc_1A110:
0001DD84 6000                       		bra.s	loc_1A15C
0001DD86                            ; ===========================================================================
0001DD86                            
0001DD86                            loc_1A112:
0001DD86 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001DD8C 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001DD92 6500                       		bcs.s	loc_1A124
0001DD94 4268 0010                  		clr.w	obVelX(a0)
0001DD98                            
0001DD98                            loc_1A124:
0001DD98 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001DD9E 4A68 0012                  		tst.w	obVelY(a0)
0001DDA2 6B00                       		bmi.s	loc_1A142
0001DDA4 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001DDAA 6500                       		bcs.s	loc_1A142
0001DDAC 317C 0592 000C             		move.w	#$592,obY(a0)
0001DDB2 4268 0012                  		clr.w	obVelY(a0)
0001DDB6                            
0001DDB6                            loc_1A142:
0001DDB6 3028 0010                  		move.w	obVelX(a0),d0
0001DDBA 8068 0012                  		or.w	obVelY(a0),d0
0001DDBE 6600                       		bne.s	loc_1A15C
0001DDC0 5428 0034                  		addq.b	#2,$34(a0)
0001DDC4 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001DDCA 117C 0001 0021             		move.b	#1,obColProp(a0)
0001DDD0                            
0001DDD0                            loc_1A15C:
0001DDD0 43FA F876                  		lea	Ani_SEgg(pc),a1
0001DDD4 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001DDDA                            
0001DDDA                            loc_1A166:
0001DDDA 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001DDE0 6C00                       		bge.s	loc_1A172
0001DDE2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001DDE6                            
0001DDE6                            loc_1A172:
0001DDE6 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001DDEC 6C00                       		bge.s	locret_1A190
0001DDEE 323C 001B                  		move.w	#$1B,d1
0001DDF2 343C 0070                  		move.w	#$70,d2
0001DDF6 363C 0071                  		move.w	#$71,d3
0001DDFA 3828 0008                  		move.w	obX(a0),d4
0001DDFE 4EF9 0001 1D08             		jmp	(SolidObject).l
0001DE04                            ; ===========================================================================
0001DE04                            
0001DE04                            locret_1A190:
0001DE04 4E75                       		rts	
0001DE06                            ; ===========================================================================
0001DE06                            
0001DE06                            loc_1A192:
0001DE06 217C 0001 B8FE 0004        		move.l	#Map_Eggman,obMap(a0)
0001DE0E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DE14 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DE1A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DE20 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001DE26 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001DE2C 6400                       		bcc.s	loc_1A1D0
0001DE2E 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001DE34 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001DE3A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DE40 5428 0034                  		addq.b	#2,$34(a0)
0001DE44                            
0001DE44                            loc_1A1D0:
0001DE44 6000 FF8A                  		bra.w	loc_1A15C
0001DE48                            ; ===========================================================================
0001DE48                            
0001DE48                            loc_1A1D4:
0001DE48 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DE4E 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001DE54 4A68 0030                  		tst.w	$30(a0)
0001DE58 6600                       		bne.s	loc_1A1FC
0001DE5A 4A28 0020                  		tst.b	obColType(a0)
0001DE5E 6600                       		bne.s	loc_1A216
0001DE60 317C 001E 0030             		move.w	#$1E,$30(a0)
0001DE66 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DE6C                            
0001DE6C                            loc_1A1FC:
0001DE6C 5368 0030                  		subq.w	#1,$30(a0)
0001DE70 6600                       		bne.s	loc_1A216
0001DE72 4A28 0022                  		tst.b	obStatus(a0)
0001DE76 6A00                       		bpl.s	loc_1A210
0001DE78 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001DE7E 6000                       		bra.s	loc_1A216
0001DE80                            ; ===========================================================================
0001DE80                            
0001DE80                            loc_1A210:
0001DE80 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DE86                            
0001DE86                            loc_1A216:
0001DE86 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001DE8C 6D00                       		blt.s	loc_1A23A
0001DE8E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001DE94 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001DE9A 4278 D020                  		clr.w	(v_player+obInertia).w
0001DE9E 4A68 0012                  		tst.w	obVelY(a0)
0001DEA2 6A00                       		bpl.s	loc_1A248
0001DEA4 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001DEAA                            
0001DEAA                            loc_1A23A:
0001DEAA 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001DEB0 6D00                       		blt.s	loc_1A248
0001DEB2 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001DEB8                            
0001DEB8                            loc_1A248:
0001DEB8 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001DEBE 6500                       		bcs.s	loc_1A260
0001DEC0 4A28 0001                  		tst.b	obRender(a0)
0001DEC4 6B00                       		bmi.s	loc_1A260
0001DEC6 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001DECC 6000 FAF0                  		bra.w	Obj85_Delete
0001DED0                            ; ===========================================================================
0001DED0                            
0001DED0                            loc_1A260:
0001DED0 6000 FEFE                  		bra.w	loc_1A15C
0001DED4                            ; ===========================================================================
0001DED4                            
0001DED4                            loc_1A264:	; Routine 4
0001DED4 2268 0034                  		movea.l	$34(a0),a1
0001DED8 1011                       		move.b	(a1),d0
0001DEDA B010                       		cmp.b	(a0),d0
0001DEDC 6600 FAE0                  		bne.w	Obj85_Delete
0001DEE0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001DEE6 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DEEC 6C00                       		bge.s	loc_1A280
0001DEEE 6000                       		bra.s	loc_1A2A6
0001DEF0                            ; ===========================================================================
0001DEF0                            
0001DEF0                            loc_1A280:
0001DEF0 4A69 0010                  		tst.w	obVelX(a1)
0001DEF4 6700                       		beq.s	loc_1A28C
0001DEF6 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001DEFC                            
0001DEFC                            loc_1A28C:
0001DEFC 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001DF00 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001DF06                            
0001DF06                            loc_1A296:
0001DF06 2268 0034                  		movea.l	$34(a0),a1
0001DF0A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DF10 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DF16                            
0001DF16                            loc_1A2A6:
0001DF16 2268 0034                  		movea.l	$34(a0),a1
0001DF1A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001DF20 7003                       		moveq	#3,d0
0001DF22 C028 0022                  		and.b	obStatus(a0),d0
0001DF26 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001DF2C 8128 0001                  		or.b	d0,obRender(a0)
0001DF30 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001DF36                            ; ===========================================================================
0001DF36                            
0001DF36                            loc_1A2C6:	; Routine 6
0001DF36 2268 0034                  		movea.l	$34(a0),a1
0001DF3A 1011                       		move.b	(a1),d0
0001DF3C B010                       		cmp.b	(a0),d0
0001DF3E 6600 FA7E                  		bne.w	Obj85_Delete
0001DF42 0CA9 0001 B8FE 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DF4A 6700                       		beq.s	loc_1A2E4
0001DF4C 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001DF52 60C2                       		bra.s	loc_1A2A6
0001DF54                            ; ===========================================================================
0001DF54                            
0001DF54                            loc_1A2E4:
0001DF54 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DF5A 4A29 0021                  		tst.b	obColProp(a1)
0001DF5E 6F00                       		ble.s	loc_1A312
0001DF60 117C 0006 001C             		move.b	#6,obAnim(a0)
0001DF66 217C 0001 B8FE 0004        		move.l	#Map_Eggman,obMap(a0)
0001DF6E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DF74 43FA D938                  		lea	Ani_Eggman(pc),a1
0001DF78 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001DF7E 6000 FF86                  		bra.w	loc_1A296
0001DF82                            ; ===========================================================================
0001DF82                            
0001DF82                            loc_1A312:
0001DF82 4A28 0001                  		tst.b	1(a0)
0001DF86 6A00 FA36                  		bpl.w	Obj85_Delete
0001DF8A 6100 D4CC                  		bsr.w	BossDefeated
0001DF8E 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001DF94 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DF9A 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001DFA2 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001DFA8 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001DFAC 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001DFB2 6000 FF52                  		bra.w	loc_1A296
0001DFB6                            ; ===========================================================================
0001DFB6                            
0001DFB6                            loc_1A346:	; Routine 8
0001DFB6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DFBC 2268 0034                  		movea.l	$34(a0),a1
0001DFC0 0CA9 0001 B8FE 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DFC8 6700                       		beq.s	loc_1A35E
0001DFCA 6000 FF4A                  		bra.w	loc_1A2A6
0001DFCE                            ; ===========================================================================
0001DFCE                            
0001DFCE                            loc_1A35E:
0001DFCE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DFD4 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DFDA 4A28 001E                  		tst.b	obTimeFrame(a0)
0001DFDE 6600                       		bne.s	loc_1A376
0001DFE0 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001DFE6                            
0001DFE6                            loc_1A376:
0001DFE6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001DFEA 6E00                       		bgt.s	loc_1A38A
0001DFEC 5228 001A                  		addq.b	#1,obFrame(a0)
0001DFF0 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001DFF6 6E00 F9C6                  		bgt.w	Obj85_Delete
0001DFFA                            
0001DFFA                            loc_1A38A:
0001DFFA 6000 FF0A                  		bra.w	loc_1A296
0001DFFE                            ; ===========================================================================
0001DFFE                            
0001DFFE                            loc_1A38E:	; Routine $A
0001DFFE 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001E004 3038 D008                  		move.w	(v_player+obX).w,d0
0001E008 9068 0008                  		sub.w	obX(a0),d0
0001E00C 6500                       		bcs.s	loc_1A3A6
0001E00E 4A28 0001                  		tst.b	obRender(a0)
0001E012 6A00 F9AA                  		bpl.w	Obj85_Delete
0001E016                            
0001E016                            loc_1A3A6:
0001E016 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001E01C                            ; ===========================================================================
0001E01C                            
0001E01C                            loc_1A3AC:	; Routine $C
0001E01C 117C 0000 001A             		move.b	#0,obFrame(a0)
0001E022 08E8 0000 0022             		bset	#0,obStatus(a0)
0001E028 2268 0034                  		movea.l	$34(a0),a1
0001E02C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001E032 6600                       		bne.s	loc_1A3D0
0001E034 0CA9 0001 B8FE 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E03C 6700 F980                  		beq.w	Obj85_Delete
0001E040                            
0001E040                            loc_1A3D0:
0001E040 6000 FED4                  		bra.w	loc_1A2A6
0001E044                            		
0001E044                            BossModeMusic:
0001E044 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001E04A 6600 0000                  		bne.w	NormalMode
0001E04E 4EF9 0000 0000             		jmp	PinchMode
0001E054                            
0001E054                            NormalMode:
0001E054 303C 00AC                  		move.w	#$AC,d0
0001E058 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E05E 4E75                       		rts
0001E060                            
0001E060                            PinchMode:
0001E060 303C 0094                  		move.w	#$94,d0
0001E064 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E06A 303C 00E2                  		move.w	#$E2,d0
0001E06E 4EB9 0000 129A             		jsr	(PlaySound).l
0001E074 4E75                       		rts		
0001E074 4E75                       		rts		
0001E076                            		include	"_anim\FZ Eggman in Ship.asm"
0001E076                            ; ---------------------------------------------------------------------------
0001E076                            ; Animation script - Eggman (FZ)
0001E076                            ; ---------------------------------------------------------------------------
0001E076 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001E078 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001E07C                            		even
0001E07C                            		even
0001E07C                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C                            Map_FZDamaged_internal:
0001E07C 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001E07E 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001E080 06                         @damage1:	dc.b 6
0001E081 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001E086 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001E08B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E090 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E095 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E09A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E09F 06                         @damage2:	dc.b 6
0001E0A0 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001E0A5 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001E0AA EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E0AF FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E0B4 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E0B9 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E0BE                            		even
0001E0BE                            		even
0001E0BE                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001E0BE                            ; ---------------------------------------------------------------------------
0001E0BE                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001E0BE                            ; ---------------------------------------------------------------------------
0001E0BE                            Map_FZLegs_internal:
0001E0BE 0000                       		dc.w @extended-Map_FZLegs_internal
0001E0C0 0000                       		dc.w @halfway-Map_FZLegs_internal
0001E0C2 0000                       		dc.w @retracted-Map_FZLegs_internal
0001E0C4 02                         @extended:	dc.b 2
0001E0C5 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001E0CA 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001E0CF 03                         @halfway:	dc.b 3
0001E0D0 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001E0D5 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001E0DA 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001E0DF 02                         @retracted:	dc.b 2
0001E0E0 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001E0E5 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001E0EA                            		even
0001E0EA                            		even
0001E0EA                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            ; Object 84 - cylinder Eggman hides in (FZ)
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            
0001E0EA                            Obj84_Delete:
0001E0EA 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001E0F0                            ; ===========================================================================
0001E0F0                            
0001E0F0                            EggmanCylinder:
0001E0F0 7000                       		moveq	#0,d0
0001E0F2 1028 0024                  		move.b	obRoutine(a0),d0
0001E0F6 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001E0FA 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001E0FE                            ; ===========================================================================
0001E0FE 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001E100 0000                       		dc.w loc_1A4CE-Obj84_Index
0001E102 0000                       		dc.w loc_1A57E-Obj84_Index
0001E104                            
0001E104 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001E108 2550 0620                  		dc.w $2550, $620
0001E10C 2490 04C0                  		dc.w $2490, $4C0
0001E110 2510 04C0                  		dc.w $2510, $4C0
0001E114                            ; ===========================================================================
0001E114                            
0001E114                            Obj84_Main:	; Routine
0001E114 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001E118 7000                       		moveq	#0,d0
0001E11A 1028 0028                  		move.b	obSubtype(a0),d0
0001E11E D040                       		add.w	d0,d0
0001E120 D2C0                       		adda.w	d0,a1
0001E122 117C 0004 0001             		move.b	#4,obRender(a0)
0001E128 08E8 0007 0001             		bset	#7,obRender(a0)
0001E12E 08E8 0004 0001             		bset	#4,obRender(a0)
0001E134 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E13A 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001E142 3159 0008                  		move.w	(a1)+,obX(a0)
0001E146 3151 000C                  		move.w	(a1),obY(a0)
0001E14A 3159 0038                  		move.w	(a1)+,$38(a0)
0001E14E 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001E154 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001E15A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001E160 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001E166 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E16C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E170                            
0001E170                            loc_1A4CE:	; Routine 2
0001E170 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E176 6F00                       		ble.s	loc_1A4DC
0001E178 08E8 0001 0001             		bset	#1,obRender(a0)
0001E17E                            
0001E17E                            loc_1A4DC:
0001E17E 42A8 003C                  		clr.l	$3C(a0)
0001E182 4A28 0029                  		tst.b	$29(a0)
0001E186 6700                       		beq.s	loc_1A4EA
0001E188 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E18C                            
0001E18C                            loc_1A4EA:
0001E18C 2028 003C                  		move.l	$3C(a0),d0
0001E190 2228 0038                  		move.l	$38(a0),d1
0001E194 D280                       		add.l	d0,d1
0001E196 4841                       		swap	d1
0001E198 3141 000C                  		move.w	d1,obY(a0)
0001E19C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001E1A2 6600                       		bne.s	loc_1A524
0001E1A4 4A68 0030                  		tst.w	$30(a0)
0001E1A8 6A00                       		bpl.s	loc_1A524
0001E1AA 70F6                       		moveq	#-$A,d0
0001E1AC 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E1B2 6F00                       		ble.s	loc_1A514
0001E1B4 700E                       		moveq	#$E,d0
0001E1B6                            
0001E1B6                            loc_1A514:
0001E1B6 D240                       		add.w	d0,d1
0001E1B8 2268 0034                  		movea.l	$34(a0),a1
0001E1BC 3341 000C                  		move.w	d1,obY(a1)
0001E1C0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E1C6                            
0001E1C6                            loc_1A524:
0001E1C6 323C 002B                  		move.w	#$2B,d1
0001E1CA 343C 0060                  		move.w	#$60,d2
0001E1CE 363C 0061                  		move.w	#$61,d3
0001E1D2 3828 0008                  		move.w	obX(a0),d4
0001E1D6 4EB9 0001 1D08             		jsr	(SolidObject).l
0001E1DC 7000                       		moveq	#0,d0
0001E1DE 3228 003C                  		move.w	$3C(a0),d1
0001E1E2 6A00                       		bpl.s	loc_1A550
0001E1E4 4441                       		neg.w	d1
0001E1E6 5141                       		subq.w	#8,d1
0001E1E8 6500                       		bcs.s	loc_1A55C
0001E1EA 5200                       		addq.b	#1,d0
0001E1EC E841                       		asr.w	#4,d1
0001E1EE D041                       		add.w	d1,d0
0001E1F0 6000                       		bra.s	loc_1A55C
0001E1F2                            ; ===========================================================================
0001E1F2                            
0001E1F2                            loc_1A550:
0001E1F2 0441 0027                  		subi.w	#$27,d1
0001E1F6 6500                       		bcs.s	loc_1A55C
0001E1F8 5200                       		addq.b	#1,d0
0001E1FA E841                       		asr.w	#4,d1
0001E1FC D041                       		add.w	d1,d0
0001E1FE                            
0001E1FE                            loc_1A55C:
0001E1FE 1140 001A                  		move.b	d0,obFrame(a0)
0001E202 3038 D008                  		move.w	(v_player+obX).w,d0
0001E206 9068 0008                  		sub.w	obX(a0),d0
0001E20A 6B00                       		bmi.s	loc_1A578
0001E20C 0440 0140                  		subi.w	#$140,d0
0001E210 6B00                       		bmi.s	loc_1A578
0001E212 4A28 0001                  		tst.b	obRender(a0)
0001E216 6A00 FED2                  		bpl.w	Obj84_Delete
0001E21A                            
0001E21A                            loc_1A578:
0001E21A 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001E220                            ; ===========================================================================
0001E220                            
0001E220                            loc_1A57E:	; Routine 4
0001E220 7000                       		moveq	#0,d0
0001E222 1028 0028                  		move.b	obSubtype(a0),d0
0001E226 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001E22A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001E22E 6000 FF5C                  		bra.w	loc_1A4EA
0001E232                            ; ===========================================================================
0001E232 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001E234 0000                       		dc.w loc_1A598-off_1A590
0001E236 0000                       		dc.w loc_1A604-off_1A590
0001E238 0000                       		dc.w loc_1A604-off_1A590
0001E23A                            ; ===========================================================================
0001E23A                            
0001E23A                            loc_1A598:
0001E23A 4A28 0029                  		tst.b	$29(a0)
0001E23E 6600                       		bne.s	loc_1A5D4
0001E240 2268 0034                  		movea.l	$34(a0),a1
0001E244 4A29 0021                  		tst.b	obColProp(a1)
0001E248 6600                       		bne.s	loc_1A5B4
0001E24A 6100 D20C                  		bsr.w	BossDefeated
0001E24E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001E256                            
0001E256                            loc_1A5B4:
0001E256 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001E25E 6400                       		bcc.s	locret_1A602
0001E260 42A8 003C                  		clr.l	$3C(a0)
0001E264 2268 0034                  		movea.l	$34(a0),a1
0001E268 5369 0032                  		subq.w	#1,$32(a1)
0001E26C 4269 0030                  		clr.w	$30(a1)
0001E270 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E274 4E75                       		rts	
0001E276                            ; ===========================================================================
0001E276                            
0001E276                            loc_1A5D4:
0001E276 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001E27C 6C00                       		bge.s	loc_1A5E4
0001E27E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001E286                            
0001E286                            loc_1A5E4:
0001E286 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001E28E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001E294 6E00                       		bgt.s	locret_1A602
0001E296 4268 003E                  		clr.w	$3E(a0)
0001E29A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001E2A0 4228 0029                  		clr.b	$29(a0)
0001E2A4                            
0001E2A4                            locret_1A602:
0001E2A4 4E75                       		rts	
0001E2A6                            ; ===========================================================================
0001E2A6                            
0001E2A6                            loc_1A604:
0001E2A6 08E8 0001 0001             		bset	#1,obRender(a0)
0001E2AC 4A28 0029                  		tst.b	$29(a0)
0001E2B0 6600                       		bne.s	loc_1A646
0001E2B2 2268 0034                  		movea.l	$34(a0),a1
0001E2B6 4A29 0021                  		tst.b	obColProp(a1)
0001E2BA 6600                       		bne.s	loc_1A626
0001E2BC 6100 D19A                  		bsr.w	BossDefeated
0001E2C0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001E2C8                            
0001E2C8                            loc_1A626:
0001E2C8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001E2D0 6400                       		bcc.s	locret_1A674
0001E2D2 42A8 003C                  		clr.l	$3C(a0)
0001E2D6 2268 0034                  		movea.l	$34(a0),a1
0001E2DA 5369 0032                  		subq.w	#1,$32(a1)
0001E2DE 4269 0030                  		clr.w	$30(a1)
0001E2E2 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E2E6 4E75                       		rts	
0001E2E8                            ; ===========================================================================
0001E2E8                            
0001E2E8                            loc_1A646:
0001E2E8 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001E2EE 6D00                       		blt.s	loc_1A656
0001E2F0 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001E2F8                            
0001E2F8                            loc_1A656:
0001E2F8 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001E300 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001E306 6D00                       		blt.s	locret_1A674
0001E308 4268 003E                  		clr.w	$3E(a0)
0001E30C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001E312 4228 0029                  		clr.b	$29(a0)
0001E316                            
0001E316                            locret_1A674:
0001E316 4E75                       		rts	
0001E316 4E75                       		rts	
0001E318                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001E318                            ; --------------------------------------------------------------------------------
0001E318                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E318                            ; --------------------------------------------------------------------------------
0001E318                            
0001E318                            SME_SCUpI:	
0001E318 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001E31C 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001E320 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001E324 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001E328 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001E32C 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001E330 06                         SME_SCUpI_18:	dc.b 6	
0001E331 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E336 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E33B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E340 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E345 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E34A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E34F 08                         SME_SCUpI_37:	dc.b 8	
0001E350 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E355 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E35A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E35F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E364 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E369 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E36E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E373 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E378 0A                         SME_SCUpI_60:	dc.b $A	
0001E379 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E37E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E383 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E388 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E38D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E392 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E397 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E39C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E3A1 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E3A6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E3AB 0C                         SME_SCUpI_93:	dc.b $C	
0001E3AC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E3B1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E3B6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E3BB B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E3C0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E3C5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E3CA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E3CF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E3D4 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E3D9 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E3DE 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E3E3 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E3E8 0D                         SME_SCUpI_D0:	dc.b $D	
0001E3E9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E3EE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E3F3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E3F8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E3FD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E402 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E407 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E40C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E411 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E416 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E41B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E420 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E425 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E42A 0E                         SME_SCUpI_112:	dc.b $E	
0001E42B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E430 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E435 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E43A B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E43F B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E444 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E449 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E44E F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E453 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E458 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E45D 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E462 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E467 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E46C A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E471 0E                         SME_SCUpI_159:	dc.b $E	
0001E472 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E477 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E47C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E481 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E486 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E48B D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E490 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E495 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E49A F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E49F 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E4A4 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E4A9 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E4AE 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E4B3 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4B8 0E                         SME_SCUpI_1A0:	dc.b $E	
0001E4B9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E4BE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E4C3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E4C8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E4CD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E4D2 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E4D7 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4DC F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E4E1 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E4E6 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E4EB 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E4F0 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E4F5 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E4FA A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4FF 0E                         SME_SCUpI_1E7:	dc.b $E	
0001E500 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E505 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E50A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E50F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E514 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E519 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E51E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E523 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E528 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E52D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E532 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E537 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E53C 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E541 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E546 0E                         SME_SCUpI_22E:	dc.b $E	
0001E547 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E54C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E551 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E556 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E55B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E560 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E565 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E56A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E56F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E574 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E579 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E57E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E583 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E588 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E58D 0E                         SME_SCUpI_275:	dc.b $E	
0001E58E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E593 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E598 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E59D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E5A2 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E5A7 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E5AC D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E5B1 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E5B6 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E5BB 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E5C0 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E5C5 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E5CA 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E5CF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E5D4 02                         SME_SCUpI_2BC:	dc.b 2	
0001E5D5 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001E5DA 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001E5E0 00                         		even
0001E5E0 00                         		even
0001E5E0                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001E5E0                            ; ---------------------------------------------------------------------------
0001E5E0                            ; Object 86 - energy balls (FZ)
0001E5E0                            ; ---------------------------------------------------------------------------
0001E5E0                            
0001E5E0                            BossPlasma:
0001E5E0 7000                       		moveq	#0,d0
0001E5E2 1028 0024                  		move.b	obRoutine(a0),d0
0001E5E6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001E5EA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001E5EE                            ; ===========================================================================
0001E5EE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001E5F0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001E5F2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001E5F4 0000                       		dc.w loc_1A962-Obj86_Index
0001E5F6 0000                       		dc.w loc_1A982-Obj86_Index
0001E5F8                            ; ===========================================================================
0001E5F8                            
0001E5F8                            Obj86_Main:	; Routine 0
0001E5F8 317C 2588 0008             		move.w	#$2588,obX(a0)
0001E5FE 317C 053C 000C             		move.w	#$53C,obY(a0)
0001E604 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E60A 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001E612 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E618 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E61E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001E624 117C 0008 0016             		move.b	#8,obHeight(a0)
0001E62A 117C 0004 0001             		move.b	#4,obRender(a0)
0001E630 08E8 0007 0001             		bset	#7,obRender(a0)
0001E636 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E63A                            
0001E63A                            Obj86_Generator:; Routine 2
0001E63A 2268 0034                  		movea.l	$34(a0),a1
0001E63E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001E644 6600                       		bne.s	loc_1A850
0001E646 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001E64A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001E650 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001E656                            ; ===========================================================================
0001E656                            
0001E656                            loc_1A850:
0001E656 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E65C 4A28 0029                  		tst.b	$29(a0)
0001E660 6700                       		beq.s	loc_1A86C
0001E662 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E666 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E66C 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001E672                            
0001E672                            loc_1A86C:
0001E672 323C 0013                  		move.w	#$13,d1
0001E676 343C 0008                  		move.w	#8,d2
0001E67A 363C 0011                  		move.w	#$11,d3
0001E67E 3828 0008                  		move.w	obX(a0),d4
0001E682 4EB9 0001 1D08             		jsr	(SolidObject).l
0001E688 3038 D008                  		move.w	(v_player+obX).w,d0
0001E68C 9068 0008                  		sub.w	obX(a0),d0
0001E690 6B00                       		bmi.s	loc_1A89A
0001E692 0440 0140                  		subi.w	#$140,d0
0001E696 6B00                       		bmi.s	loc_1A89A
0001E698 4A28 0001                  		tst.b	obRender(a0)
0001E69C 6A00 FA4C                  		bpl.w	Obj84_Delete
0001E6A0                            
0001E6A0                            loc_1A89A:
0001E6A0 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001E6A4 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001E6AA 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001E6B0                            ; ===========================================================================
0001E6B0                            
0001E6B0                            Obj86_MakeBalls:; Routine 4
0001E6B0 4A28 0029                  		tst.b	$29(a0)
0001E6B4 6700 0000                  		beq.w	loc_1A954
0001E6B8 4228 0029                  		clr.b	$29(a0)
0001E6BC D068 0030                  		add.w	$30(a0),d0
0001E6C0 0240 001E                  		andi.w	#$1E,d0
0001E6C4 D4C0                       		adda.w	d0,a2
0001E6C6 5868 0030                  		addq.w	#4,$30(a0)
0001E6CA 4268 0032                  		clr.w	$32(a0)
0001E6CE 7403                       		moveq	#3,d2
0001E6D0                            
0001E6D0                            Obj86_Loop:
0001E6D0 4EB9 0000 FD58             		jsr	(FindNextFreeObj).l
0001E6D6 6600 0000                  		bne.w	loc_1A954
0001E6DA 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001E6DE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E6E4 337C 053C 000C             		move.w	#$53C,obY(a1)
0001E6EA 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001E6F0 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001E6F6 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001E6FE 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001E704 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001E70A 137C 0000 0020             		move.b	#0,obColType(a1)
0001E710 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001E716 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001E71C 137C 0004 0001             		move.b	#4,obRender(a1)
0001E722 08E9 0007 0001             		bset	#7,obRender(a1)
0001E728 2348 0034                  		move.l	a0,$34(a1)
0001E72C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001E732 3228 0032                  		move.w	$32(a0),d1
0001E736 C3FC FFB1                  		muls.w	#-$4F,d1
0001E73A 0641 2578                  		addi.w	#$2578,d1
0001E73E 0240 001F                  		andi.w	#$1F,d0
0001E742 0440 0010                  		subi.w	#$10,d0
0001E746 D041                       		add.w	d1,d0
0001E748 3340 0030                  		move.w	d0,$30(a1)
0001E74C 5268 0032                  		addq.w	#1,$32(a0)
0001E750 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001E756 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001E75A                            
0001E75A                            loc_1A954:
0001E75A 4A68 0032                  		tst.w	$32(a0)
0001E75E 6600                       		bne.s	loc_1A95E
0001E760 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E764                            
0001E764                            loc_1A95E:
0001E764 6000 FF0C                  		bra.w	loc_1A86C
0001E768                            ; ===========================================================================
0001E768                            
0001E768                            loc_1A962:	; Routine 6
0001E768 117C 0002 001C             		move.b	#2,obAnim(a0)
0001E76E 4A68 0038                  		tst.w	$38(a0)
0001E772 6600                       		bne.s	loc_1A97E
0001E774 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001E77A 2268 0034                  		movea.l	$34(a0),a1
0001E77E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001E784                            
0001E784                            loc_1A97E:
0001E784 6000 FEEC                  		bra.w	loc_1A86C
0001E788                            ; ===========================================================================
0001E788                            
0001E788                            loc_1A982:	; Routine 8
0001E788 7000                       		moveq	#0,d0
0001E78A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001E78E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001E792 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001E796 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001E79A 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001E7A0 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001E7A6                            ; ===========================================================================
0001E7A6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001E7A8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001E7AA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001E7AC                            ; ===========================================================================
0001E7AC                            
0001E7AC                            loc_1A9A6:
0001E7AC 3028 0030                  		move.w	$30(a0),d0
0001E7B0 9068 0008                  		sub.w	obX(a0),d0
0001E7B4 E940                       		asl.w	#4,d0
0001E7B6 3140 0010                  		move.w	d0,obVelX(a0)
0001E7BA 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E7C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E7C4 4E75                       		rts	
0001E7C6                            ; ===========================================================================
0001E7C6                            
0001E7C6                            loc_1A9C0:
0001E7C6 4A68 0010                  		tst.w	obVelX(a0)
0001E7CA 6700                       		beq.s	loc_1A9E6
0001E7CC 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001E7D2 3028 0008                  		move.w	obX(a0),d0
0001E7D6 9068 0030                  		sub.w	$30(a0),d0
0001E7DA 6400                       		bcc.s	loc_1A9E6
0001E7DC 4268 0010                  		clr.w	obVelX(a0)
0001E7E0 D168 0008                  		add.w	d0,obX(a0)
0001E7E4 2268 0034                  		movea.l	$34(a0),a1
0001E7E8 5369 0032                  		subq.w	#1,$32(a1)
0001E7EC                            
0001E7EC                            loc_1A9E6:
0001E7EC 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E7F2 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E7F6 6600                       		bne.s	locret_1AA1C
0001E7F8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E7FC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E802 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001E808 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E80E 7000                       		moveq	#0,d0
0001E810 3038 D008                  		move.w	(v_player+obX).w,d0
0001E814 9068 0008                  		sub.w	obX(a0),d0
0001E818 3140 0010                  		move.w	d0,obVelX(a0)
0001E81C 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001E822                            
0001E822                            locret_1AA1C:
0001E822 4E75                       		rts	
0001E824                            ; ===========================================================================
0001E824                            
0001E824                            loc_1AA1E:
0001E824 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001E82A 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001E830 6400                       		bcc.s	loc_1AA34
0001E832 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E836 6700                       		beq.s	loc_1AA34
0001E838 4E75                       		rts	
0001E83A                            ; ===========================================================================
0001E83A                            
0001E83A                            loc_1AA34:
0001E83A 2268 0034                  		movea.l	$34(a0),a1
0001E83E 5369 0038                  		subq.w	#1,$38(a1)
0001E842 6000 F8A6                  		bra.w	Obj84_Delete
0001E842 6000 F8A6                  		bra.w	Obj84_Delete
0001E846                            		include	"_anim\Plasma Ball Launcher.asm"
0001E846                            ; ---------------------------------------------------------------------------
0001E846                            ; Animation script - energy ball launcher (FZ)
0001E846                            ; ---------------------------------------------------------------------------
0001E846 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001E848 0000                       		dc.w @redsparking-Ani_PLaunch
0001E84A 0000                       		dc.w @whitesparking-Ani_PLaunch
0001E84C 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001E850 00                         		even
0001E850 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001E856                            		even
0001E856 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001E85C                            		even
0001E85C                            		even
0001E85C                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001E85C                            ; ---------------------------------------------------------------------------
0001E85C                            ; Sprite mappings - energy ball	launcher (FZ)
0001E85C                            ; ---------------------------------------------------------------------------
0001E85C                            Map_PLaunch_internal:
0001E85C 0000                       		dc.w @red-Map_PLaunch_internal
0001E85E 0000                       		dc.w @white-Map_PLaunch_internal
0001E860 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001E862 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001E864 01                         @red:		dc.b 1
0001E865 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001E86A 01                         @white:		dc.b 1
0001E86B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001E870 01                         @sparking1:	dc.b 1
0001E871 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001E876 01                         @sparking2:	dc.b 1
0001E877 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001E87C                            		even
0001E87C                            		even
0001E87C                            		include	"_anim\Plasma Balls.asm"
0001E87C                            ; ---------------------------------------------------------------------------
0001E87C                            ; Animation script - energy balls (FZ)
0001E87C                            ; ---------------------------------------------------------------------------
0001E87C 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001E87E 0000                       		dc.w @short-Ani_Plasma
0001E880 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001E88F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001E89E 0A05 FF                    		dc.b $A, 5, afEnd
0001E8A2 00                         		even
0001E8A2 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001E8AC                            		even
0001E8AC                            		even
0001E8AC                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001E8AC                            ; ---------------------------------------------------------------------------
0001E8AC                            ; Sprite mappings - energy balls (FZ)
0001E8AC                            ; ---------------------------------------------------------------------------
0001E8AC                            Map_Plasma_internal:
0001E8AC 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001E8AE 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001E8B0 0000                       		dc.w @white1-Map_Plasma_internal
0001E8B2 0000                       		dc.w @white2-Map_Plasma_internal
0001E8B4 0000                       		dc.w @white3-Map_Plasma_internal
0001E8B6 0000                       		dc.w @white4-Map_Plasma_internal
0001E8B8 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001E8BA 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001E8BC 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001E8BE 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001E8C0 0000                       		dc.w @blank-Map_Plasma_internal
0001E8C2 02                         @fuzzy1:	dc.b 2
0001E8C3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001E8C8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001E8CD 02                         @fuzzy2:	dc.b 2
0001E8CE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001E8D3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001E8D8 02                         @white1:	dc.b 2
0001E8D9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001E8DE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001E8E3 02                         @white2:	dc.b 2
0001E8E4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001E8E9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001E8EE 02                         @white3:	dc.b 2
0001E8EF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001E8F4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001E8F9 02                         @white4:	dc.b 2
0001E8FA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001E8FF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001E904 01                         @fuzzy3:	dc.b 1
0001E905 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001E90A 01                         @fuzzy4:	dc.b 1
0001E90B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001E910 02                         @fuzzy5:	dc.b 2
0001E911 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001E916 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001E91B 02                         @fuzzy6:	dc.b 2
0001E91C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001E921 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001E926 00                         @blank:		dc.b 0
0001E928 00                         		even
0001E928 00                         		even
0001E928                            
0001E928                            		include	"_incObj\3E Prison Capsule.asm"
0001E928                            ; ---------------------------------------------------------------------------
0001E928                            ; Object 3E - prison capsule
0001E928                            ; ---------------------------------------------------------------------------
0001E928                            
0001E928                            Prison:
0001E928 7000                       		moveq	#0,d0
0001E92A 1028 0024                  		move.b	obRoutine(a0),d0
0001E92E 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001E932 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001E952 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001E958                            
0001E958                            	@delete:
0001E958 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001E95E                            ; ===========================================================================
0001E95E 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001E960 0000                       		dc.w Pri_BodyMain-Pri_Index
0001E962 0000                       		dc.w Pri_Switched-Pri_Index
0001E964 0000                       		dc.w Pri_Explosion-Pri_Index
0001E966 0000                       		dc.w Pri_Explosion-Pri_Index
0001E968 0000                       		dc.w Pri_Explosion-Pri_Index
0001E96A 0000                       		dc.w Pri_Animals-Pri_Index
0001E96C 0000                       		dc.w Pri_EndAct-Pri_Index
0001E96E                            
0001E96E =00000030                  pri_origY:	equ $30		; original y-axis position
0001E96E                            
0001E96E 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001E972 040C 0501                  		dc.b 4,	$C, 5, 1
0001E976 0610 0403                  		dc.b 6,	$10, 4,	3
0001E97A 0810 0305                  		dc.b 8,	$10, 3,	5
0001E97E                            ; ===========================================================================
0001E97E                            
0001E97E                            Pri_Main:	; Routine 0
0001E97E 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001E986 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001E98C 117C 0004 0001             		move.b	#4,obRender(a0)
0001E992 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001E998 7000                       		moveq	#0,d0
0001E99A 1028 0028                  		move.b	obSubtype(a0),d0
0001E99E E548                       		lsl.w	#2,d0
0001E9A0 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001E9A4 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001E9A8 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001E9AC 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001E9B0 3028 0018                  		move.w obPriority(a0),d0 
0001E9B4 E248                       		lsr.w #1,d0 
0001E9B6 0240 0380                  		andi.w #$380,d0 
0001E9BA 3140 0018                  		move.w d0,obPriority(a0)		
0001E9BE 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001E9C2 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001E9C6 6600                       		bne.s	@not02		; if not, branch
0001E9C8                            
0001E9C8 117C 0006 0020             		move.b	#6,obColType(a0)
0001E9CE 117C 0008 0021             		move.b	#8,obColProp(a0)
0001E9D4                            
0001E9D4                            	@not02:
0001E9D4 4E75                       		rts	
0001E9D6                            ; ===========================================================================
0001E9D6                            
0001E9D6                            Pri_BodyMain:	; Routine 2
0001E9D6 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001E9DC 6700                       		beq.s	@chkopened
0001E9DE 323C 002B                  		move.w	#$2B,d1
0001E9E2 343C 0018                  		move.w	#$18,d2
0001E9E6 363C 0018                  		move.w	#$18,d3
0001E9EA 3828 0008                  		move.w	obX(a0),d4
0001E9EE 4EF9 0001 1D08             		jmp	(SolidObject).l
0001E9F4                            ; ===========================================================================
0001E9F4                            
0001E9F4                            @chkopened:
0001E9F4 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001E9F8 6700                       		beq.s	@open		; if yes, branch
0001E9FA 4228 0025                  		clr.b	ob2ndRout(a0)
0001E9FE 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EA04 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EA0A                            
0001EA0A                            	@open:
0001EA0A 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001EA10                            		
0001EA10                            	@rts:
0001EA10 4E75                       		rts
0001EA12                            ; ===========================================================================
0001EA12                            
0001EA12                            Pri_Switched:	; Routine 4
0001EA12 323C 0017                  		move.w	#$17,d1
0001EA16 343C 0008                  		move.w	#8,d2
0001EA1A 363C 0008                  		move.w	#8,d3
0001EA1E 3828 0008                  		move.w	obX(a0),d4
0001EA22 4EB9 0001 1D08             		jsr	(SolidObject).l
0001EA28 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001EA2E 4EB9 0000 C85E             		jsr	(AnimateSprite).l
0001EA34 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001EA3A 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001EA3E 6700                       		beq.s	@open2		; if yes, branch
0001EA40                            
0001EA40 5068 000C                  		addq.w	#8,obY(a0)
0001EA44 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001EA4A 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001EA50 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001EA54 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001EA58 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001EA5E 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001EA64 4228 0025                  		clr.b	ob2ndRout(a0)
0001EA68 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EA6E 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EA74 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001EA78 6700                       		beq.s	@open2
0001EA7A 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001EA88                            
0001EA88                            	@open2:
0001EA88 4E75                       		rts	
0001EA8A                            ; ===========================================================================
0001EA8A                            
0001EA8A                            Pri_Explosion:	; Routine 6, 8, $A
0001EA8A 7007                       		moveq	#7,d0
0001EA8C C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EA90 6600                       		bne.s	@noexplosion
0001EA92 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001EA98 6600                       		bne.s	@noexplosion
0001EA9A 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001EA9E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EAA4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EAAA 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001EAB0 7200                       		moveq	#0,d1
0001EAB2 1200                       		move.b	d0,d1
0001EAB4 E409                       		lsr.b	#2,d1
0001EAB6 0441 0020                  		subi.w	#$20,d1
0001EABA D369 0008                  		add.w	d1,obX(a1)
0001EABE E048                       		lsr.w	#8,d0
0001EAC0 E608                       		lsr.b	#3,d0
0001EAC2 D169 000C                  		add.w	d0,obY(a1)
0001EAC6                            
0001EAC6                            	@noexplosion:
0001EAC6 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EACA 6700                       		beq.s	@makeanimal
0001EACC 4E75                       		rts	
0001EACE                            ; ===========================================================================
0001EACE                            
0001EACE                            @makeanimal:
0001EACE 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001EAD4 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001EADA 117C 0006 001A             		move.b	#6,obFrame(a0)
0001EAE0 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001EAE6 0668 0020 000C             		addi.w	#$20,obY(a0)
0001EAEC 7C07                       		moveq	#7,d6
0001EAEE 3A3C 009A                  		move.w	#$9A,d5
0001EAF2 78E4                       		moveq	#-$1C,d4
0001EAF4                            
0001EAF4                            	@loop:
0001EAF4 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001EAFA 6600                       		bne.s	@fail
0001EAFC 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EB00 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EB06 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EB0C D969 0008                  		add.w	d4,obX(a1)
0001EB10 5E44                       		addq.w	#7,d4
0001EB12 3345 0036                  		move.w	d5,$36(a1)
0001EB16 5145                       		subq.w	#8,d5
0001EB18 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001EB1C                            
0001EB1C                            	@fail:
0001EB1C 4E75                       		rts	
0001EB1E                            ; ===========================================================================
0001EB1E                            
0001EB1E                            Pri_Animals:	; Routine $C
0001EB1E 7007                       		moveq	#7,d0
0001EB20 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EB24 6600                       		bne.s	@noanimal
0001EB26 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001EB2C 6600                       		bne.s	@noanimal
0001EB2E 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EB32 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EB38 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EB3E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001EB44 0240 001F                  		andi.w	#$1F,d0
0001EB48 5D40                       		subq.w	#6,d0
0001EB4A 4A41                       		tst.w	d1
0001EB4C 6A00                       		bpl.s	@ispositive
0001EB4E 4440                       		neg.w	d0
0001EB50                            
0001EB50                            	@ispositive:
0001EB50 D169 0008                  		add.w	d0,obX(a1)
0001EB54 337C 000C 0036             		move.w	#$C,$36(a1)
0001EB5A                            
0001EB5A                            	@noanimal:
0001EB5A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EB5E 6600                       		bne.s	@wait
0001EB60 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EB64 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001EB6A                            
0001EB6A                            	@wait:
0001EB6A 4E75                       		rts	
0001EB6C                            ; ===========================================================================
0001EB6C                            
0001EB6C                            Pri_EndAct:	; Routine $E
0001EB6C 703E                       		moveq	#$3E,d0
0001EB6E 7228                       		moveq	#id_Animals,d1
0001EB70 7440                       		moveq	#$40,d2
0001EB72 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001EB76                            
0001EB76                            	@findanimal:
0001EB76 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001EB78 6700                       		beq.s	@found		; if yes, branch
0001EB7A D2C2                       		adda.w	d2,a1		; next object RAM
0001EB7C 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001EB80                            
0001EB80 4EB9 0001 102A             		jsr	(GotThroughAct1).l
0001EB86 4EF9 0000 F7E8             		jmp	(DeleteObject).l
0001EB8C                            
0001EB8C                            	@found:
0001EB8C 4E75                       		rts	
0001EB8C 4E75                       		rts	
0001EB8E                            		include	"_anim\Prison Capsule.asm"
0001EB8E                            ; ---------------------------------------------------------------------------
0001EB8E                            ; Animation script - prison capsule
0001EB8E                            ; ---------------------------------------------------------------------------
0001EB8E 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001EB90 0000                       		dc.w @switchflash-Ani_Pri
0001EB92 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001EB96                            		even
0001EB96                            		even
0001EB96                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001EB96                            ; ---------------------------------------------------------------------------
0001EB96                            ; Sprite mappings - prison capsule
0001EB96                            ; ---------------------------------------------------------------------------
0001EB96                            Map_Pri_internal:
0001EB96 0000                       		dc.w @capsule-Map_Pri_internal
0001EB98 0000                       		dc.w @switch1-Map_Pri_internal
0001EB9A 0000                       		dc.w @broken-Map_Pri_internal
0001EB9C 0000                       		dc.w @switch2-Map_Pri_internal
0001EB9E 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001EBA0 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001EBA2 0000                       		dc.w @blank-Map_Pri_internal
0001EBA4 07                         @capsule:	dc.b 7
0001EBA5 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001EBAA E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001EBAF E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001EBB4 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001EBB9 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001EBBE 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EBC3 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EBC8 01                         @switch1:	dc.b 1
0001EBC9 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001EBCE 06                         @broken:	dc.b 6
0001EBCF 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001EBD4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001EBD9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001EBDE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001EBE3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EBE8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EBED 01                         @switch2:	dc.b 1
0001EBEE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001EBF3 02                         @unusedthing1:	dc.b 2
0001EBF4 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001EBF9 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001EBFE 01                         @unusedthing2:	dc.b 1
0001EBFF F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001EC04 00                         @blank:		dc.b 0
0001EC06 00                         		even
0001EC06 00                         		even
0001EC06                            
0001EC06                            		include	"_incObj\sub ReactToItem.asm"
0001EC06                            ; ---------------------------------------------------------------------------
0001EC06                            ; Subroutine to react to obColType(a0)
0001EC06                            ; ---------------------------------------------------------------------------
0001EC06                            
0001EC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC06                            
0001EC06                            
0001EC06                            ReactToItem:
0001EC06 4E71                       		nop	
0001EC08 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001EC0C 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001EC10 5142                       		subq.w	#8,d2
0001EC12 7A00                       		moveq	#0,d5
0001EC14 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001EC18 5705                       		subq.b	#3,d5
0001EC1A 9645                       		sub.w	d5,d3
0001EC1C 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001EC22 6600                       		bne.s	@notducking	; if not, branch
0001EC24 0643 000C                  		addi.w	#$C,d3
0001EC28 7A0A                       		moveq	#$A,d5
0001EC2A                            
0001EC2A                            	@notducking:
0001EC2A 383C 0010                  		move.w	#$10,d4
0001EC2E DA45                       		add.w	d5,d5
0001EC30 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001EC34 3C3C 005F                  		move.w	#$5F,d6
0001EC38                            
0001EC38                            @loop:
0001EC38 4A29 0001                  		tst.b	obRender(a1)
0001EC3C 6A00                       		bpl.s	@next
0001EC3E 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001EC42 6600                       		bne.s	@proximity	; if nonzero, branch
0001EC44                            
0001EC44                            	@next:
0001EC44 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001EC48 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001EC4C                            
0001EC4C 7000                       		moveq	#0,d0
0001EC4E 4E75                       		rts	
0001EC50                            ; ===========================================================================
0001EC50                            @sizes:		;   width, height
0001EC50 1414                       		dc.b  $14, $14		; $01
0001EC52 0C14                       		dc.b   $C, $14		; $02
0001EC54 140C                       		dc.b  $14,  $C		; $03
0001EC56 0410                       		dc.b	4, $10		; $04
0001EC58 0C12                       		dc.b   $C, $12		; $05
0001EC5A 1010                       		dc.b  $10, $10		; $06
0001EC5C 0606                       		dc.b	6,   6		; $07
0001EC5E 180C                       		dc.b  $18,  $C		; $08
0001EC60 0C10                       		dc.b   $C, $10		; $09
0001EC62 100C                       		dc.b  $10,  $C		; $0A
0001EC64 0808                       		dc.b	8,   8		; $0B
0001EC66 1410                       		dc.b  $14, $10		; $0C
0001EC68 1408                       		dc.b  $14,   8		; $0D
0001EC6A 0E0E                       		dc.b   $E,  $E		; $0E
0001EC6C 1818                       		dc.b  $18, $18		; $0F
0001EC6E 2810                       		dc.b  $28, $10		; $10
0001EC70 1018                       		dc.b  $10, $18		; $11
0001EC72 0810                       		dc.b	8, $10		; $12
0001EC74 2070                       		dc.b  $20, $70		; $13
0001EC76 4020                       		dc.b  $40, $20		; $14
0001EC78 8020                       		dc.b  $80, $20		; $15
0001EC7A 2020                       		dc.b  $20, $20		; $16
0001EC7C 0808                       		dc.b	8,   8		; $17
0001EC7E 0404                       		dc.b	4,   4		; $18
0001EC80 2008                       		dc.b  $20,   8		; $19
0001EC82 0C0C                       		dc.b   $C,  $C		; $1A
0001EC84 0804                       		dc.b	8,   4		; $1B
0001EC86 1804                       		dc.b  $18,   4		; $1C
0001EC88 2804                       		dc.b  $28,   4		; $1D
0001EC8A 0408                       		dc.b	4,   8		; $1E
0001EC8C 0418                       		dc.b	4, $18		; $1F
0001EC8E 0428                       		dc.b	4, $28		; $20
0001EC90 0420                       		dc.b	4, $20		; $21
0001EC92 1818                       		dc.b  $18, $18		; $22
0001EC94 0C18                       		dc.b   $C, $18		; $23
0001EC96 4808                       		dc.b  $48,   8		; $24
0001EC98                            ; ===========================================================================
0001EC98                            
0001EC98                            @proximity:
0001EC98 0240 003F                  		andi.w	#$3F,d0
0001EC9C D040                       		add.w	d0,d0
0001EC9E 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001ECA2 7200                       		moveq	#0,d1
0001ECA4 121A                       		move.b	(a2)+,d1
0001ECA6 3029 0008                  		move.w	obX(a1),d0
0001ECAA 9041                       		sub.w	d1,d0
0001ECAC 9042                       		sub.w	d2,d0
0001ECAE 6400                       		bcc.s	@outsidex	; branch if not touching
0001ECB0 D241                       		add.w	d1,d1
0001ECB2 D041                       		add.w	d1,d0
0001ECB4 6500                       		bcs.s	@withinx	; branch if touching
0001ECB6 6000 FF8C                  		bra.w	@next
0001ECBA                            ; ===========================================================================
0001ECBA                            
0001ECBA                            @outsidex:
0001ECBA 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001ECBE B044                       		cmp.w	d4,d0
0001ECC0 6200 FF82                  		bhi.w	@next
0001ECC4                            
0001ECC4                            @withinx:
0001ECC4 7200                       		moveq	#0,d1
0001ECC6 121A                       		move.b	(a2)+,d1
0001ECC8 3029 000C                  		move.w	obY(a1),d0
0001ECCC 9041                       		sub.w	d1,d0
0001ECCE 9043                       		sub.w	d3,d0
0001ECD0 6400                       		bcc.s	@outsidey	; branch if not touching
0001ECD2 D241                       		add.w	d1,d1
0001ECD4 D240                       		add.w	d0,d1
0001ECD6 6500                       		bcs.s	@withiny	; branch if touching
0001ECD8 6000 FF6A                  		bra.w	@next
0001ECDC                            
0001ECDC                            ; ===========================================================================
0001ECDC                            
0001ECDC                            @outsidey:
0001ECDC 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001ECE0 B045                       		cmp.w	d5,d0
0001ECE2 6200 FF60                  		bhi.w	@next
0001ECE6                            
0001ECE6                            @withiny:
0001ECE6                            	@chktype:
0001ECE6 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001ECEC 6600 0000                          	bne	NotGHZReact  ;TIS
0001ECF0 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001ECF4 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001ECF8 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001ECFC 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001ED00 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001ED04 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001ED08 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001ED0C                            NotGHZReact:                      ;TIS
0001ED0C 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001ED10 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001ED14 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001ED18 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001ED1C 6700 0000                  		beq.w	React_Special	; if yes, branch
0001ED20 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001ED22 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001ED26                            
0001ED26                            ; obColType is $40-$7F (powerups)
0001ED26                            
0001ED26 1029 0020                  		move.b	obColType(a1),d0
0001ED2A 0200 003F                  		andi.b	#$3F,d0
0001ED2E 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001ED32 6700                       		beq.s	React_Monitor	; if yes, branch
0001ED34 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001ED3A 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001ED3E 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001ED42                            
0001ED42                            	@invincible:
0001ED42 4E75                       		rts	
0001ED44                            ; ===========================================================================
0001ED44                            
0001ED44                            React_Monitor:
0001ED44 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001ED48 6A00                       		bpl.s	@movingdown	; if not, branch
0001ED4A                            
0001ED4A 3028 000C                  		move.w	obY(a0),d0
0001ED4E 0440 0010                  		subi.w	#$10,d0
0001ED52 B069 000C                  		cmp.w	obY(a1),d0
0001ED56 6500                       		bcs.s	@donothing
0001ED58 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001ED5C 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001ED62 4A29 0025                  		tst.b	ob2ndRout(a1)
0001ED66 6600                       		bne.s	@donothing
0001ED68 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001ED6C 4E75                       		rts	
0001ED6E                            ; ===========================================================================
0001ED6E                            
0001ED6E                            @movingdown:
0001ED6E 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001ED74 6600                       		bne.s	@donothing
0001ED76 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001ED7A 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001ED7E 4EB9 0001 602C             		jsr		BounceJD
0001ED84                            
0001ED84                            	@donothing:
0001ED84 4E75                       		rts	
0001ED86                            ; ===========================================================================
0001ED86                            
0001ED86                            React_Enemy:
0001ED86 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001ED8A 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001ED8C 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001ED92 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001ED96 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001ED9C 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001EDA0                            
0001EDA0                            	@donthurtsonic:
0001EDA0 4A29 0021                  		tst.b	obColProp(a1)
0001EDA4 6700                       		beq.s	breakenemy
0001EDA6                            
0001EDA6 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001EDAA 4468 0012                  		neg.w	obVelY(a0)
0001EDAE E0E8 0010                  		asr	obVelX(a0)
0001EDB2 E0E8 0012                  		asr	obVelY(a0)
0001EDB6 137C 0000 0020             		move.b	#0,obColType(a1)
0001EDBC 5329 0021                  		subq.b	#1,obColProp(a1)
0001EDC0 6600                       		bne.s	@flagnotclear
0001EDC2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EDC8                            
0001EDC8                            	@flagnotclear:
0001EDC8 4E75                       		rts	
0001EDCA                            ; ===========================================================================
0001EDCA                            
0001EDCA                            breakenemy:
0001EDCA 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EDD0 7000                       		moveq	#0,d0
0001EDD2 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001EDD6 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001EDDA 0C40 0006                  		cmpi.w	#6,d0
0001EDDE 6500                       		bcs.s	@bonusokay
0001EDE0 7006                       		moveq	#6,d0		; max bonus is lvl6
0001EDE2                            
0001EDE2                            	@bonusokay:
0001EDE2 3340 003E                  		move.w	d0,$3E(a1)
0001EDE6 303B 0000                  		move.w	@points(pc,d0.w),d0
0001EDEA 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001EDF0 6500                       		bcs.s	@lessthan16	; if not, branch
0001EDF2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001EDF6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001EDFC                            
0001EDFC                            	@lessthan16:
0001EDFC 6100 0000                  		bsr.w	AddPoints
0001EE00 4EB9 0001 602C             		jsr		BounceJD
0001EE06 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001EE0A 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001EE10 4A68 0012                  		tst.w	obVelY(a0)
0001EE14 6B00                       		bmi.s	@bouncedown
0001EE16 3028 000C                  		move.w	obY(a0),d0
0001EE1A B069 000C                  		cmp.w	obY(a1),d0
0001EE1E 6400                       		bcc.s	@bounceup
0001EE20 4468 0012                  		neg.w	obVelY(a0)
0001EE24 4E75                       		rts	
0001EE26                            ; ===========================================================================
0001EE26                            
0001EE26                            	@bouncedown:
0001EE26 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001EE2C 4E75                       		rts	
0001EE2E                            
0001EE2E                            	@bounceup:
0001EE2E 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001EE34 4E75                       		rts	
0001EE36                            
0001EE36 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001EE3E                            
0001EE3E                            ; ===========================================================================
0001EE3E                            
0001EE3E                            React_Caterkiller:
0001EE3E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EE44                            
0001EE44                            React_ChkHurt:
0001EE44 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EE48 6700                       		beq.s	notinvincible	; if not, branch
0001EE4A                            
0001EE4A                            	isflashing:
0001EE4A 70FF                       		moveq	#-1,d0
0001EE4C 4E75                       		rts	
0001EE4E                            ; ===========================================================================
0001EE4E                            
0001EE4E                            	notinvincible:
0001EE4E 4E71                       		nop	
0001EE50 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001EE54 66F4                       		bne.s	isflashing	; if yes, branch
0001EE56 2449                       		movea.l	a1,a2
0001EE58                            
0001EE58                            ; End of function ReactToItem
0001EE58                            ; continue straight to HurtSonic
0001EE58                            
0001EE58                            ; ---------------------------------------------------------------------------
0001EE58                            ; Hurting Sonic	subroutine
0001EE58                            ; ---------------------------------------------------------------------------
0001EE58                            
0001EE58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE58                            
0001EE58                            
0001EE58                            HurtSonic:
0001EE58 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001EE5C 6600                       		bne.s	@hasshield	; if yes, branch
0001EE5E 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001EE62 6600                       		bne.s	@hasshield	; if yes, branch
0001EE64 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001EE68 6600                       		bne.s	@hasshield	; if yes, branch
0001EE6A 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001EE6E 6600                       		bne.s	@hasshield	; if yes, branch
0001EE70 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001EE74 6700 0000                  		beq.w	@norings	; if not, branch
0001EE78                            
0001EE78 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0001EE7E 6600                       		bne.s	@hasshield
0001EE80 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001EE84 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EE8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EE90                            
0001EE90                            	@hasshield:
0001EE90 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001EE96 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001EE98 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001EE9C 6700 FFAC                  		beq.w	isflashing
0001EEA0 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001EEA4 6700 FFA4                  		beq.w	isflashing
0001EEA8                            
0001EEA8                            	@hasrshield:
0001EEA8 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001EEAE 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001EEB0 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001EEB4 6700 FF94                  		beq.w 	isflashing
0001EEB8 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001EEBC 6700 FF8C                  		beq.w 	isflashing
0001EEC0 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001EEC4 6700 FF84                  		beq.w 	isflashing
0001EEC8 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001EECC 6700 FF7C                  		beq.w 	isflashing
0001EED0 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001EED4 6700 FF74                  		beq.w 	isflashing
0001EED8 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001EEDC 6700 FF6C                  		beq.w 	isflashing
0001EEE0 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001EEE4 6700 FF64                  		beq.w 	isflashing
0001EEE8 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001EEEC 6700 FF5C                  		beq.w 	isflashing
0001EEF0                            
0001EEF0                            	@hasspshield:
0001EEF0 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001EEF6 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001EEFA 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001EEFE 6700 FF4A                  		beq.w 	isflashing
0001EF02 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001EF06 6700 FF42                  		beq.w 	isflashing
0001EF0A 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001EF0E 6700 FF3A                  		beq.w 	isflashing
0001EF12 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001EF16 6700 FF32                  		beq.w 	isflashing
0001EF1A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001EF1E 6700 FF2A                  		beq.w 	isflashing
0001EF22 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001EF26 6700 FF22                  		beq.w 	isflashing
0001EF2A 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001EF2E 6700 FF1A                  		beq.w 	isflashing
0001EF32 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001EF36 6700 FF12                  		beq.w 	isflashing
0001EF3A 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001EF3E 6700 FF0A                  		beq.w 	isflashing
0001EF42 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001EF46 6700 FF02                  		beq.w 	isflashing
0001EF4A                            
0001EF4A 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001EF4E 6700 FE7A                  		beq.w 	breakenemy
0001EF52 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001EF56 6700 FE72                  		beq.w 	breakenemy
0001EF5A 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001EF5E 6700 FE6A                  		beq.w 	breakenemy
0001EF62 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001EF66 6700 FEE2                  		beq.w 	isflashing
0001EF6A 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001EF6E 6700 FE5A                  		beq.w 	breakenemy
0001EF72                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001EF72                            		;beq.w 	breakenemy
0001EF72 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001EF76 6700 FE52                  		beq.w 	breakenemy
0001EF7A 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001EF7E 6700 FE4A                  		beq.w 	breakenemy
0001EF82                            
0001EF82                            	@hurtcont:
0001EF82 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001EF88                            		;move.b	#0,(v_gshield).w	; remove g shield
0001EF88 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001EF8E                            		
0001EF8E 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001EF94 6700                       		beq.s	@gshieldcheck	;if not, branch
0001EF96 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001EF9A                            		
0001EF9A                            	@gshieldcheck:
0001EF9A 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001EFA0 6700                       		beq.s	@hurtcont2			;if not, branch
0001EFA2 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001EFA6                            		
0001EFA6                            	@hurtcont2:
0001EFA6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001EFAC 4EB9 0001 66D4             		jsr		Sonic_ResetOnFloor
0001EFB2 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EFB8 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001EFBE 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001EFC4 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001EFCA 6700                       		beq.s	@isdry		; if not, branch
0001EFCC                            
0001EFCC 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001EFD2 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001EFD8                            
0001EFD8                            	@isdry:
0001EFD8 3028 0008                  		move.w	obX(a0),d0
0001EFDC B06A 0008                  		cmp.w	obX(a2),d0
0001EFE0 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001EFE2 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001EFE6                            
0001EFE6                            	@isleft:
0001EFE6 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001EFEC 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001EFF2 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001EFF8 317C 0120 0030             		move.w	#$120,$30(a0)
0001EFFE 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001F002 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F004 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001F008 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F00A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F010 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001F016 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F01C 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F020 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F024 6600                       		bne.s	@sound		; if not, branch
0001F026 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F02A 6600                       		bne.s	@sound		; if not, branch
0001F02C 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F030                            
0001F030                            	@sound:
0001F030 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001F036 70FF                       		moveq	#-1,d0
0001F038 4E75                       		rts	
0001F03A                            
0001F03A                            	@hurtelec:
0001F03A 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001F040 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F046 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F04A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F04E 66E0                       		bne.s	@sound		; if not, branch
0001F050 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F054 66DA                       		bne.s	@sound		; if not, branch
0001F056 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F05A                            ; ===========================================================================
0001F05A                            
0001F05A                            @norings:
0001F05A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001F05E 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001F062                            
0001F062                            ; ---------------------------------------------------------------------------
0001F062                            ; Subroutine to	kill Sonic
0001F062                            ; ---------------------------------------------------------------------------
0001F062                            
0001F062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F062                            
0001F062                            
0001F062                            KillSonic:
0001F062 11FC 0002 F5D8             		move.b    #2,(Super_Sonic_palette).w; Remove rotating palette
0001F068 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001F06C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001F070 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001F074 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001F07A 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001F080 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001F086 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001F08C 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001F092 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001F098 4EB9 0001 66D4             		jsr		Sonic_ResetOnFloor
0001F09E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F0A4 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001F0AA 317C 0000 0010             		move.w	#0,obVelX(a0)
0001F0B0 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F0B6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001F0BC 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001F0C0 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001F0C2 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001F0C6 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001F0C8 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001F0CE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001F0D4 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001F0D8 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001F0DC 6600                       		bne.s	@sound
0001F0DE 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001F0E2                            
0001F0E2                            	@sound:
0001F0E2 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001F0E8                            
0001F0E8                            	@dontdie:
0001F0E8 70FF                       		moveq	#-1,d0
0001F0EA 4E75                       		rts	
0001F0EC                            ; End of function KillSonic
0001F0EC                            Kill_Lava:	
0001F0EC 08E8 0007 0002             	bset	#7,obGfx(a0)
0001F0F2 117C 0016 001C             	move.b	#$16,$1C(a0)
0001F0F8 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001F0FC 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001F102                            
0001F102                            
0001F102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F102                            
0001F102                            
0001F102                            React_Special:
0001F102 1229 0020                  		move.b	obColType(a1),d1
0001F106 0201 003F                  		andi.b	#$3F,d1
0001F10A 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001F10E 6700                       		beq.s	@caterkiller	; if yes, branch
0001F110 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001F114 6700                       		beq.s	@yadrin		; if yes, branch
0001F116 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001F11A 6700                       		beq.s	@D7orE1		; if yes, branch
0001F11C 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001F120 6700                       		beq.s	@D7orE1		; if yes, branch
0001F122 4E75                       		rts	
0001F124                            ; ===========================================================================
0001F124                            
0001F124                            @caterkiller:
0001F124 6000 FD18                  		bra.w	React_Caterkiller
0001F128                            ; ===========================================================================
0001F128                            
0001F128                            @yadrin:
0001F128 9A40                       		sub.w	d0,d5
0001F12A 0C45 0008                  		cmpi.w	#8,d5
0001F12E 6400                       		bcc.s	@normalenemy
0001F130 3029 0008                  		move.w	obX(a1),d0
0001F134 5940                       		subq.w	#4,d0
0001F136 0829 0000 0022             		btst	#0,obStatus(a1)
0001F13C 6700                       		beq.s	@noflip
0001F13E 0440 0010                  		subi.w	#$10,d0
0001F142                            
0001F142                            	@noflip:
0001F142 9042                       		sub.w	d2,d0
0001F144 6400                       		bcc.s	@loc_1B13C
0001F146 0640 0018                  		addi.w	#$18,d0
0001F14A 6500                       		bcs.s	@loc_1B140
0001F14C 6000                       		bra.s	@normalenemy
0001F14E                            ; ===========================================================================
0001F14E                            
0001F14E                            	@loc_1B13C:
0001F14E B044                       		cmp.w	d4,d0
0001F150 6200                       		bhi.s	@normalenemy
0001F152                            
0001F152                            	@loc_1B140:
0001F152 6000 FCF0                  		bra.w	React_ChkHurt
0001F156                            ; ===========================================================================
0001F156                            
0001F156                            	@normalenemy:
0001F156 6000 FC2E                  		bra.w	React_Enemy
0001F15A                            ; ===========================================================================
0001F15A                            
0001F15A                            @D7orE1:
0001F15A 5229 0021                  		addq.b	#1,obColProp(a1)
0001F15E 4E75                       		rts	
0001F160                            ; End of function React_Special
0001F160                            
0001F160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F160                            
0001F160                            React_ChkWaterTag:
0001F160 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F166 6600 0000                  		bne	NotWaterTag
0001F16A 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001F170                            	NotWaterTag:
0001F170 4E75                       		rts
0001F172                            
0001F172                            React_WaterTag:
0001F172 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F178 6700 0000                  		beq	SkipWaterTag
0001F17C 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001F182                            	SkipWaterTag:
0001F182 4E75                       		rts
0001F182 4E75                       		rts
0001F184                            
0001F184                            ; ---------------------------------------------------------------------------
0001F184                            ; Subroutine to	show the special stage layout
0001F184                            ; ---------------------------------------------------------------------------
0001F184                            
0001F184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F184                            
0001F184                            
0001F184                            SS_ShowLayout:
0001F184 6100 0000                  		bsr.w	SS_AniWallsRings
0001F188 6100 0000                  		bsr.w	SS_AniItems
0001F18C 3F05                       		move.w	d5,-(sp)
0001F18E 43F8 8000                  		lea	($FFFF8000).w,a1
0001F192 1038 F780                  		move.b	(v_ssangle).w,d0
0001F196 0200 00FC                  		andi.b	#$FC,d0
0001F19A 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001F1A0 3800                       		move.w	d0,d4
0001F1A2 3A01                       		move.w	d1,d5
0001F1A4 C9FC 0018                  		muls.w	#$18,d4
0001F1A8 CBFC 0018                  		muls.w	#$18,d5
0001F1AC 7400                       		moveq	#0,d2
0001F1AE 3438 F700                  		move.w	(v_screenposx).w,d2
0001F1B2 84FC 0018                  		divu.w	#$18,d2
0001F1B6 4842                       		swap	d2
0001F1B8 4442                       		neg.w	d2
0001F1BA 0642 FF4C                  		addi.w	#-$B4,d2
0001F1BE 7600                       		moveq	#0,d3
0001F1C0 3638 F704                  		move.w	(v_screenposy).w,d3
0001F1C4 86FC 0018                  		divu.w	#$18,d3
0001F1C8 4843                       		swap	d3
0001F1CA 4443                       		neg.w	d3
0001F1CC 0643 FF4C                  		addi.w	#-$B4,d3
0001F1D0 3E3C 000F                  		move.w	#$F,d7
0001F1D4                            
0001F1D4                            loc_1B19E:
0001F1D4 48A7 E000                  		movem.w	d0-d2,-(sp)
0001F1D8 48A7 C000                  		movem.w	d0-d1,-(sp)
0001F1DC 4440                       		neg.w	d0
0001F1DE C3C2                       		muls.w	d2,d1
0001F1E0 C1C3                       		muls.w	d3,d0
0001F1E2 2C00                       		move.l	d0,d6
0001F1E4 DC81                       		add.l	d1,d6
0001F1E6 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001F1EA C1C2                       		muls.w	d2,d0
0001F1EC C3C3                       		muls.w	d3,d1
0001F1EE D280                       		add.l	d0,d1
0001F1F0 2406                       		move.l	d6,d2
0001F1F2 3C3C 000F                  		move.w	#$F,d6
0001F1F6                            
0001F1F6                            loc_1B1C0:
0001F1F6 2002                       		move.l	d2,d0
0001F1F8 E080                       		asr.l	#8,d0
0001F1FA 32C0                       		move.w	d0,(a1)+
0001F1FC 2001                       		move.l	d1,d0
0001F1FE E080                       		asr.l	#8,d0
0001F200 32C0                       		move.w	d0,(a1)+
0001F202 D485                       		add.l	d5,d2
0001F204 D284                       		add.l	d4,d1
0001F206 51CE FFEE                  		dbf	d6,loc_1B1C0
0001F20A                            
0001F20A 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001F20E 0643 0018                  		addi.w	#$18,d3
0001F212 51CF FFC0                  		dbf	d7,loc_1B19E
0001F216                            
0001F216 3A1F                       		move.w	(sp)+,d5
0001F218 41F9 00FF 0000             		lea	($FF0000).l,a0
0001F21E 7000                       		moveq	#0,d0
0001F220 3038 F704                  		move.w	(v_screenposy).w,d0
0001F224 80FC 0018                  		divu.w	#$18,d0
0001F228 C0FC 0080                  		mulu.w	#$80,d0
0001F22C D1C0                       		adda.l	d0,a0
0001F22E 7000                       		moveq	#0,d0
0001F230 3038 F700                  		move.w	(v_screenposx).w,d0
0001F234 80FC 0018                  		divu.w	#$18,d0
0001F238 D0C0                       		adda.w	d0,a0
0001F23A 49F8 8000                  		lea	($FFFF8000).w,a4
0001F23E 3E3C 000F                  		move.w	#$F,d7
0001F242                            
0001F242                            loc_1B20C:
0001F242 3C3C 000F                  		move.w	#$F,d6
0001F246                            
0001F246                            loc_1B210:
0001F246 7000                       		moveq	#0,d0
0001F248 1018                       		move.b	(a0)+,d0
0001F24A 6700                       		beq.s	loc_1B268
0001F24C 0C00 004E                  		cmpi.b	#$4E,d0
0001F250 6200                       		bhi.s	loc_1B268
0001F252 3614                       		move.w	(a4),d3
0001F254 0643 0120                  		addi.w	#$120,d3
0001F258 0C43 0070                  		cmpi.w	#$70,d3
0001F25C 6500                       		blo.s	loc_1B268
0001F25E 0C43 01D0                  		cmpi.w	#$1D0,d3
0001F262 6400                       		bhs.s	loc_1B268
0001F264 342C 0002                  		move.w	2(a4),d2
0001F268 0642 00F0                  		addi.w	#$F0,d2
0001F26C 0C42 0070                  		cmpi.w	#$70,d2
0001F270 6500                       		blo.s	loc_1B268
0001F272 0C42 0170                  		cmpi.w	#$170,d2
0001F276 6400                       		bhs.s	loc_1B268
0001F278 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001F27E E748                       		lsl.w	#3,d0
0001F280 4BF5 0000                  		lea	(a5,d0.w),a5
0001F284 225D                       		movea.l	(a5)+,a1
0001F286 321D                       		move.w	(a5)+,d1
0001F288 D241                       		add.w	d1,d1
0001F28A D2F1 1000                  		adda.w	(a1,d1.w),a1
0001F28E 365D                       		movea.w	(a5)+,a3
0001F290 7200                       		moveq	#0,d1
0001F292 1219                       		move.b	(a1)+,d1
0001F294 5301                       		subq.b	#1,d1
0001F296 6B00                       		bmi.s	loc_1B268
0001F298 4EB9 0000 FA1A             		jsr	(sub_D762).l
0001F29E                            
0001F29E                            loc_1B268:
0001F29E 584C                       		addq.w	#4,a4
0001F2A0 51CE FFA4                  		dbf	d6,loc_1B210
0001F2A4                            
0001F2A4 41E8 0070                  		lea	$70(a0),a0
0001F2A8 51CF FF98                  		dbf	d7,loc_1B20C
0001F2AC                            
0001F2AC 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001F2B0 0C05 0050                  		cmpi.b	#$50,d5
0001F2B4 6700                       		beq.s	loc_1B288
0001F2B6 24BC 0000 0000             		move.l	#0,(a2)
0001F2BC 4E75                       		rts	
0001F2BE                            ; ===========================================================================
0001F2BE                            
0001F2BE                            loc_1B288:
0001F2BE 157C 0000 FFFB             		move.b	#0,-5(a2)
0001F2C4 4E75                       		rts	
0001F2C6                            ; End of function SS_ShowLayout
0001F2C6                            
0001F2C6                            ; ---------------------------------------------------------------------------
0001F2C6                            ; Subroutine to	animate	walls and rings	in the special stage
0001F2C6                            ; ---------------------------------------------------------------------------
0001F2C6                            
0001F2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2C6                            
0001F2C6                            
0001F2C6                            SS_AniWallsRings:
0001F2C6 43F9 00FF 400C             		lea	($FF400C).l,a1
0001F2CC 7000                       		moveq	#0,d0
0001F2CE 1038 F780                  		move.b	(v_ssangle).w,d0
0001F2D2 E408                       		lsr.b	#2,d0
0001F2D4 0240 000F                  		andi.w	#$F,d0
0001F2D8 7223                       		moveq	#$23,d1
0001F2DA                            
0001F2DA                            loc_1B2A4:
0001F2DA 3280                       		move.w	d0,(a1)
0001F2DC 5049                       		addq.w	#8,a1
0001F2DE 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001F2E2                            
0001F2E2 43F9 00FF 4005             		lea	($FF4005).l,a1
0001F2E8 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001F2EC 6A00                       		bpl.s	loc_1B2C8
0001F2EE 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001F2F4 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001F2F8 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001F2FE                            
0001F2FE                            loc_1B2C8:
0001F2FE 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001F304 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001F308 6A00                       		bpl.s	loc_1B2E4
0001F30A 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001F310 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001F314 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001F31A                            
0001F31A                            loc_1B2E4:
0001F31A 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001F31E 1340 0138                  		move.b	d0,$138(a1)
0001F322 1340 0160                  		move.b	d0,$160(a1)
0001F326 1340 0148                  		move.b	d0,$148(a1)
0001F32A 1340 0150                  		move.b	d0,$150(a1)
0001F32E 1340 01D8                  		move.b	d0,$1D8(a1)
0001F332 1340 01E0                  		move.b	d0,$1E0(a1)
0001F336 1340 01E8                  		move.b	d0,$1E8(a1)
0001F33A 1340 01F0                  		move.b	d0,$1F0(a1)
0001F33E 1340 01F8                  		move.b	d0,$1F8(a1)
0001F342 1340 0200                  		move.b	d0,$200(a1)
0001F346 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001F34A 6A00                       		bpl.s	loc_1B326
0001F34C 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001F352 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001F356 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001F35C                            
0001F35C                            loc_1B326:
0001F35C 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001F360 1340 0168                  		move.b	d0,$168(a1)
0001F364 1340 0170                  		move.b	d0,$170(a1)
0001F368 1340 0178                  		move.b	d0,$178(a1)
0001F36C 1340 0180                  		move.b	d0,$180(a1)
0001F370 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001F374 6A00                       		bpl.s	loc_1B350
0001F376 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001F37C 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001F380 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001F386                            
0001F386                            loc_1B350:
0001F386 43F9 00FF 4016             		lea	($FF4016).l,a1
0001F38C 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001F392 7000                       		moveq	#0,d0
0001F394 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001F398 D040                       		add.w	d0,d0
0001F39A 41F0 0000                  		lea	(a0,d0.w),a0
0001F39E 3290                       		move.w	(a0),(a1)
0001F3A0 3368 0002 0008             		move.w	2(a0),8(a1)
0001F3A6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F3AC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F3B2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F3B8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F3BE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F3C4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F3CA D0FC 0020                  		adda.w	#$20,a0
0001F3CE D2FC 0048                  		adda.w	#$48,a1
0001F3D2 3290                       		move.w	(a0),(a1)
0001F3D4 3368 0002 0008             		move.w	2(a0),8(a1)
0001F3DA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F3E0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F3E6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F3EC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F3F2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F3F8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F3FE D0FC 0020                  		adda.w	#$20,a0
0001F402 D2FC 0048                  		adda.w	#$48,a1
0001F406 3290                       		move.w	(a0),(a1)
0001F408 3368 0002 0008             		move.w	2(a0),8(a1)
0001F40E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F414 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F41A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F420 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F426 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F42C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F432 D0FC 0020                  		adda.w	#$20,a0
0001F436 D2FC 0048                  		adda.w	#$48,a1
0001F43A 3290                       		move.w	(a0),(a1)
0001F43C 3368 0002 0008             		move.w	2(a0),8(a1)
0001F442 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F448 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F44E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F454 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F45A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F460 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F466 D0FC 0020                  		adda.w	#$20,a0
0001F46A D2FC 0048                  		adda.w	#$48,a1
0001F46E 4E75                       		rts	
0001F470                            ; End of function SS_AniWallsRings
0001F470                            
0001F470                            ; ===========================================================================
0001F470 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F480 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F490 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F4A0 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F4B0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F4C0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F4D0 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F4E0 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0                            ; Subroutine to	remove items when you collect them in the special stage
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0                            
0001F4F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4F0                            
0001F4F0                            
0001F4F0                            SS_RemoveCollectedItem:
0001F4F0 45F9 00FF 4400             		lea	($FF4400).l,a2
0001F4F6 303C 001F                  		move.w	#$1F,d0
0001F4FA                            
0001F4FA                            loc_1B4C4:
0001F4FA 4A12                       		tst.b	(a2)
0001F4FC 6700                       		beq.s	locret_1B4CE
0001F4FE 504A                       		addq.w	#8,a2
0001F500 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001F504                            
0001F504                            locret_1B4CE:
0001F504 4E75                       		rts	
0001F506                            ; End of function SS_RemoveCollectedItem
0001F506                            
0001F506                            ; ---------------------------------------------------------------------------
0001F506                            ; Subroutine to	animate	special	stage items when you touch them
0001F506                            ; ---------------------------------------------------------------------------
0001F506                            
0001F506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F506                            
0001F506                            
0001F506                            SS_AniItems:
0001F506 41F9 00FF 4400             		lea	($FF4400).l,a0
0001F50C 3E3C 001F                  		move.w	#$1F,d7
0001F510                            
0001F510                            loc_1B4DA:
0001F510 7000                       		moveq	#0,d0
0001F512 1010                       		move.b	(a0),d0
0001F514 6700                       		beq.s	loc_1B4E8
0001F516 E548                       		lsl.w	#2,d0
0001F518 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001F51C 4E91                       		jsr	(a1)
0001F51E                            
0001F51E                            loc_1B4E8:
0001F51E 5048                       		addq.w	#8,a0
0001F520                            
0001F520                            loc_1B4EA:
0001F520 51CF FFEE                  		dbf	d7,loc_1B4DA
0001F524                            
0001F524 4E75                       		rts	
0001F526                            ; End of function SS_AniItems
0001F526                            
0001F526                            ; ===========================================================================
0001F526 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001F52A 0000 0000                  		dc.l SS_AniBumper
0001F52E 0000 0000                  		dc.l SS_Ani1Up
0001F532 0000 0000                  		dc.l SS_AniReverse
0001F536 0000 0000                  		dc.l SS_AniEmeraldSparks
0001F53A 0000 0000                  		dc.l SS_AniGlassBlock
0001F53E                            ; ===========================================================================
0001F53E                            
0001F53E                            SS_AniRingSparks:
0001F53E 5328 0002                  		subq.b	#1,2(a0)
0001F542 6A00                       		bpl.s	locret_1B530
0001F544 117C 0005 0002             		move.b	#5,2(a0)
0001F54A 7000                       		moveq	#0,d0
0001F54C 1028 0003                  		move.b	3(a0),d0
0001F550 5228 0003                  		addq.b	#1,3(a0)
0001F554 2268 0004                  		movea.l	4(a0),a1
0001F558 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001F55C 1280                       		move.b	d0,(a1)
0001F55E 6600                       		bne.s	locret_1B530
0001F560 4290                       		clr.l	(a0)
0001F562 42A8 0004                  		clr.l	4(a0)
0001F566                            
0001F566                            locret_1B530:
0001F566 4E75                       		rts	
0001F568                            ; ===========================================================================
0001F568 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001F56E                            ; ===========================================================================
0001F56E                            
0001F56E                            SS_AniBumper:
0001F56E 5328 0002                  		subq.b	#1,2(a0)
0001F572 6A00                       		bpl.s	locret_1B566
0001F574 117C 0007 0002             		move.b	#7,2(a0)
0001F57A 7000                       		moveq	#0,d0
0001F57C 1028 0003                  		move.b	3(a0),d0
0001F580 5228 0003                  		addq.b	#1,3(a0)
0001F584 2268 0004                  		movea.l	4(a0),a1
0001F588 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001F58C 6600                       		bne.s	loc_1B564
0001F58E 4290                       		clr.l	(a0)
0001F590 42A8 0004                  		clr.l	4(a0)
0001F594 12BC 0025                  		move.b	#$25,(a1)
0001F598 4E75                       		rts	
0001F59A                            ; ===========================================================================
0001F59A                            
0001F59A                            loc_1B564:
0001F59A 1280                       		move.b	d0,(a1)
0001F59C                            
0001F59C                            locret_1B566:
0001F59C 4E75                       		rts	
0001F59E                            ; ===========================================================================
0001F59E 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001F5A4                            ; ===========================================================================
0001F5A4                            
0001F5A4                            SS_Ani1Up:
0001F5A4 5328 0002                  		subq.b	#1,2(a0)
0001F5A8 6A00                       		bpl.s	locret_1B596
0001F5AA 117C 0005 0002             		move.b	#5,2(a0)
0001F5B0 7000                       		moveq	#0,d0
0001F5B2 1028 0003                  		move.b	3(a0),d0
0001F5B6 5228 0003                  		addq.b	#1,3(a0)
0001F5BA 2268 0004                  		movea.l	4(a0),a1
0001F5BE 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001F5C2 1280                       		move.b	d0,(a1)
0001F5C4 6600                       		bne.s	locret_1B596
0001F5C6 4290                       		clr.l	(a0)
0001F5C8 42A8 0004                  		clr.l	4(a0)
0001F5CC                            
0001F5CC                            locret_1B596:
0001F5CC 4E75                       		rts	
0001F5CE                            ; ===========================================================================
0001F5CE 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001F5D4                            ; ===========================================================================
0001F5D4                            
0001F5D4                            SS_AniReverse:
0001F5D4 5328 0002                  		subq.b	#1,2(a0)
0001F5D8 6A00                       		bpl.s	locret_1B5CC
0001F5DA 117C 0007 0002             		move.b	#7,2(a0)
0001F5E0 7000                       		moveq	#0,d0
0001F5E2 1028 0003                  		move.b	3(a0),d0
0001F5E6 5228 0003                  		addq.b	#1,3(a0)
0001F5EA 2268 0004                  		movea.l	4(a0),a1
0001F5EE 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001F5F2 6600                       		bne.s	loc_1B5CA
0001F5F4 4290                       		clr.l	(a0)
0001F5F6 42A8 0004                  		clr.l	4(a0)
0001F5FA 12BC 002B                  		move.b	#$2B,(a1)
0001F5FE 4E75                       		rts	
0001F600                            ; ===========================================================================
0001F600                            
0001F600                            loc_1B5CA:
0001F600 1280                       		move.b	d0,(a1)
0001F602                            
0001F602                            locret_1B5CC:
0001F602 4E75                       		rts	
0001F604                            ; ===========================================================================
0001F604 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001F60A                            ; ===========================================================================
0001F60A                            
0001F60A                            SS_AniEmeraldSparks:
0001F60A 5328 0002                  		subq.b	#1,2(a0)
0001F60E 6A00                       		bpl.s	locret_1B60C
0001F610 117C 0005 0002             		move.b	#5,2(a0)
0001F616 7000                       		moveq	#0,d0
0001F618 1028 0003                  		move.b	3(a0),d0
0001F61C 5228 0003                  		addq.b	#1,3(a0)
0001F620 2268 0004                  		movea.l	4(a0),a1
0001F624 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001F628 1280                       		move.b	d0,(a1)
0001F62A 6600                       		bne.s	locret_1B60C
0001F62C 4290                       		clr.l	(a0)
0001F62E 42A8 0004                  		clr.l	4(a0)
0001F632 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001F642                            
0001F642                            locret_1B60C:
0001F642 4E75                       		rts	
0001F644                            ; ===========================================================================
0001F644 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001F64A                            ; ===========================================================================
0001F64A                            
0001F64A                            SS_AniGlassBlock:
0001F64A 5328 0002                  		subq.b	#1,2(a0)
0001F64E 6A00                       		bpl.s	locret_1B640
0001F650 117C 0001 0002             		move.b	#1,2(a0)
0001F656 7000                       		moveq	#0,d0
0001F658 1028 0003                  		move.b	3(a0),d0
0001F65C 5228 0003                  		addq.b	#1,3(a0)
0001F660 2268 0004                  		movea.l	4(a0),a1
0001F664 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001F668 1280                       		move.b	d0,(a1)
0001F66A 6600                       		bne.s	locret_1B640
0001F66C 12A8 0004                  		move.b	4(a0),(a1)
0001F670 4290                       		clr.l	(a0)
0001F672 42A8 0004                  		clr.l	4(a0)
0001F676                            
0001F676                            locret_1B640:
0001F676 4E75                       		rts	
0001F678                            ; ===========================================================================
0001F678 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001F682                            
0001F682                            ; ---------------------------------------------------------------------------
0001F682                            ; Special stage	layout pointers
0001F682                            ; ---------------------------------------------------------------------------
0001F682                            SS_LayoutIndex:
0001F682 0000 0000                  		dc.l SS_1
0001F686 0000 0000                  		dc.l SS_2
0001F68A 0000 0000                  		dc.l SS_3
0001F68E 0000 0000                  		dc.l SS_4
0001F692 0000 0000                  		dc.l SS_5
0001F696 0000 0000                  		dc.l SS_6
0001F69A                            		even
0001F69A                            
0001F69A                            ; ---------------------------------------------------------------------------
0001F69A                            ; Special stage start locations
0001F69A                            ; ---------------------------------------------------------------------------
0001F69A                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001F69A                            ; ---------------------------------------------------------------------------
0001F69A                            ; Special stage start locations
0001F69A                            ; ---------------------------------------------------------------------------
0001F69A                            
0001F69A                            		incbin	"startpos\ss1.bin"
0001F69E                            		incbin	"startpos\ss2.bin"
0001F6A2                            		incbin	"startpos\ss3.bin"
0001F6A6                            		incbin	"startpos\ss4.bin"
0001F6AA                            		incbin	"startpos\ss5.bin"
0001F6AE                            		incbin	"startpos\ss6.bin"
0001F6B2                            		even
0001F6B2                            		even
0001F6B2                            
0001F6B2                            ; ---------------------------------------------------------------------------
0001F6B2                            ; Subroutine to	load special stage layout
0001F6B2                            ; ---------------------------------------------------------------------------
0001F6B2                            
0001F6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F6B2                            
0001F6B2                            
0001F6B2                            SS_Load:
0001F6B2 7000                       		moveq	#0,d0
0001F6B4 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001F6B8 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001F6BC 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001F6C2 6500                       		blo.s	SS_ChkEmldNum
0001F6C4 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001F6CA                            
0001F6CA                            SS_ChkEmldNum:
0001F6CA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001F6D0 6700                       		beq.s	SS_LoadData	; if yes, branch
0001F6D2 7200                       		moveq	#0,d1
0001F6D4 1238 FE57                  		move.b	(v_emeralds).w,d1
0001F6D8 5301                       		subq.b	#1,d1
0001F6DA 6500                       		blo.s	SS_LoadData
0001F6DC 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001F6E0                            
0001F6E0                            SS_ChkEmldLoop:	
0001F6E0 B033 1000                  		cmp.b	(a3,d1.w),d0
0001F6E4 6600                       		bne.s	SS_ChkEmldRepeat
0001F6E6 60CA                       		bra.s	SS_Load
0001F6E8                            ; ===========================================================================
0001F6E8                            
0001F6E8                            SS_ChkEmldRepeat:
0001F6E8 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001F6EC                            
0001F6EC                            SS_LoadData:
0001F6EC E548                       		lsl.w	#2,d0
0001F6EE 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001F6F2 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001F6F6 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001F6FA 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001F6FE 43F9 00FF 4000             		lea	($FF4000).l,a1
0001F704 303C 0000                  		move.w	#0,d0
0001F708 4EB9 0000 18D8             		jsr	(EniDec).l
0001F70E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F714 303C 0FFF                  		move.w	#$FFF,d0
0001F718                            
0001F718                            SS_ClrRAM3:
0001F718 4299                       		clr.l	(a1)+
0001F71A 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001F71E                            
0001F71E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F724 41F9 00FF 4000             		lea	($FF4000).l,a0
0001F72A 723F                       		moveq	#$3F,d1
0001F72C                            
0001F72C                            loc_1B6F6:
0001F72C 743F                       		moveq	#$3F,d2
0001F72E                            
0001F72E                            loc_1B6F8:
0001F72E 12D8                       		move.b	(a0)+,(a1)+
0001F730 51CA FFFC                  		dbf	d2,loc_1B6F8
0001F734                            
0001F734 43E9 0040                  		lea	$40(a1),a1
0001F738 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001F73C                            
0001F73C 43F9 00FF 4008             		lea	($FF4008).l,a1
0001F742 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001F748 724D                       		moveq	#$4D,d1
0001F74A                            
0001F74A                            loc_1B714:
0001F74A 22D8                       		move.l	(a0)+,(a1)+
0001F74C 32FC 0000                  		move.w	#0,(a1)+
0001F750 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001F756 32D8                       		move.w	(a0)+,(a1)+
0001F758 51C9 FFF0                  		dbf	d1,loc_1B714
0001F75C                            
0001F75C 43F9 00FF 4400             		lea	($FF4400).l,a1
0001F762 323C 003F                  		move.w	#$3F,d1
0001F766                            
0001F766                            loc_1B730:
0001F766                            
0001F766 4299                       		clr.l	(a1)+
0001F768 51C9 FFFC                  		dbf	d1,loc_1B730
0001F76C                            
0001F76C 4E75                       		rts	
0001F76E                            ; End of function SS_Load
0001F76E                            
0001F76E                            ; ===========================================================================
0001F76E                            
0001F76E                            SS_MapIndex:
0001F76E                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001F76E                            ; ---------------------------------------------------------------------------
0001F76E                            ; Special stage	mappings and VRAM pointers
0001F76E                            ; ---------------------------------------------------------------------------
0001F76E 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001F772 0142                       	dc.w $142		; VRAM setting
0001F774 0000 0000                  	dc.l Map_SSWalls
0001F778 0142                       	dc.w $142
0001F77A 0000 0000                  	dc.l Map_SSWalls
0001F77E 0142                       	dc.w $142
0001F780 0000 0000                  	dc.l Map_SSWalls
0001F784 0142                       	dc.w $142
0001F786 0000 0000                  	dc.l Map_SSWalls
0001F78A 0142                       	dc.w $142
0001F78C 0000 0000                  	dc.l Map_SSWalls
0001F790 0142                       	dc.w $142
0001F792 0000 0000                  	dc.l Map_SSWalls
0001F796 0142                       	dc.w $142
0001F798 0000 0000                  	dc.l Map_SSWalls
0001F79C 0142                       	dc.w $142
0001F79E 0000 0000                  	dc.l Map_SSWalls
0001F7A2 0142                       	dc.w $142
0001F7A4 0000 0000                  	dc.l Map_SSWalls
0001F7A8 2142                       	dc.w $2142
0001F7AA 0000 0000                  	dc.l Map_SSWalls
0001F7AE 2142                       	dc.w $2142
0001F7B0 0000 0000                  	dc.l Map_SSWalls
0001F7B4 2142                       	dc.w $2142
0001F7B6 0000 0000                  	dc.l Map_SSWalls
0001F7BA 2142                       	dc.w $2142
0001F7BC 0000 0000                  	dc.l Map_SSWalls
0001F7C0 2142                       	dc.w $2142
0001F7C2 0000 0000                  	dc.l Map_SSWalls
0001F7C6 2142                       	dc.w $2142
0001F7C8 0000 0000                  	dc.l Map_SSWalls
0001F7CC 2142                       	dc.w $2142
0001F7CE 0000 0000                  	dc.l Map_SSWalls
0001F7D2 2142                       	dc.w $2142
0001F7D4 0000 0000                  	dc.l Map_SSWalls
0001F7D8 2142                       	dc.w $2142
0001F7DA 0000 0000                  	dc.l Map_SSWalls
0001F7DE 4142                       	dc.w $4142
0001F7E0 0000 0000                  	dc.l Map_SSWalls
0001F7E4 4142                       	dc.w $4142
0001F7E6 0000 0000                  	dc.l Map_SSWalls
0001F7EA 4142                       	dc.w $4142
0001F7EC 0000 0000                  	dc.l Map_SSWalls
0001F7F0 4142                       	dc.w $4142
0001F7F2 0000 0000                  	dc.l Map_SSWalls
0001F7F6 4142                       	dc.w $4142
0001F7F8 0000 0000                  	dc.l Map_SSWalls
0001F7FC 4142                       	dc.w $4142
0001F7FE 0000 0000                  	dc.l Map_SSWalls
0001F802 4142                       	dc.w $4142
0001F804 0000 0000                  	dc.l Map_SSWalls
0001F808 4142                       	dc.w $4142
0001F80A 0000 0000                  	dc.l Map_SSWalls
0001F80E 4142                       	dc.w $4142
0001F810 0000 0000                  	dc.l Map_SSWalls
0001F814 6142                       	dc.w $6142
0001F816 0000 0000                  	dc.l Map_SSWalls
0001F81A 6142                       	dc.w $6142
0001F81C 0000 0000                  	dc.l Map_SSWalls
0001F820 6142                       	dc.w $6142
0001F822 0000 0000                  	dc.l Map_SSWalls
0001F826 6142                       	dc.w $6142
0001F828 0000 0000                  	dc.l Map_SSWalls
0001F82C 6142                       	dc.w $6142
0001F82E 0000 0000                  	dc.l Map_SSWalls
0001F832 6142                       	dc.w $6142
0001F834 0000 0000                  	dc.l Map_SSWalls
0001F838 6142                       	dc.w $6142
0001F83A 0000 0000                  	dc.l Map_SSWalls
0001F83E 6142                       	dc.w $6142
0001F840 0000 0000                  	dc.l Map_SSWalls
0001F844 6142                       	dc.w $6142
0001F846 0001 0DEC                  	dc.l Map_Bump
0001F84A 023B                       	dc.w $23B
0001F84C 0000 0000                  	dc.l Map_SS_R
0001F850 0570                       	dc.w $570
0001F852 0000 0000                  	dc.l Map_SS_R
0001F856 0251                       	dc.w $251
0001F858 0000 0000                  	dc.l Map_SS_R
0001F85C 0370                       	dc.w $370
0001F85E 0000 0000                  	dc.l Map_SS_Up
0001F862 0263                       	dc.w $263
0001F864 0000 0000                  	dc.l Map_SS_Down
0001F868 0263                       	dc.w $263
0001F86A 0000 0000                  	dc.l Map_SS_R
0001F86E 22F0                       	dc.w $22F0
0001F870 0000 0000                  	dc.l Map_SS_Glass
0001F874 0470                       	dc.w $470
0001F876 0000 0000                  	dc.l Map_SS_Glass
0001F87A 05F0                       	dc.w $5F0
0001F87C 0000 0000                  	dc.l Map_SS_Glass
0001F880 65F0                       	dc.w $65F0
0001F882 0000 0000                  	dc.l Map_SS_Glass
0001F886 25F0                       	dc.w $25F0
0001F888 0000 0000                  	dc.l Map_SS_Glass
0001F88C 45F0                       	dc.w $45F0
0001F88E 0000 0000                  	dc.l Map_SS_R
0001F892 02F0                       	dc.w $2F0
0001F894 0101 0DEC                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001F898 023B                       	dc.w $23B
0001F89A 0201 0DEC                  	dc.l Map_Bump+$2000000
0001F89E 023B                       	dc.w $23B
0001F8A0 0000 0000                  	dc.l Map_SS_R
0001F8A4 0797                       	dc.w $797
0001F8A6 0000 0000                  	dc.l Map_SS_R
0001F8AA 07A0                       	dc.w $7A0
0001F8AC 0000 0000                  	dc.l Map_SS_R
0001F8B0 07A9                       	dc.w $7A9
0001F8B2 0000 0000                  	dc.l Map_SS_R
0001F8B6 0797                       	dc.w $797
0001F8B8 0000 0000                  	dc.l Map_SS_R
0001F8BC 07A0                       	dc.w $7A0
0001F8BE 0000 0000                  	dc.l Map_SS_R
0001F8C2 07A9                       	dc.w $7A9
0001F8C4 0000 BDB0                  	dc.l Map_Ring
0001F8C8 2798                       	dc.w $2798
0001F8CA 0000 0000                  	dc.l Map_SS_Chaos3
0001F8CE 0770                       	dc.w $770
0001F8D0 0000 0000                  	dc.l Map_SS_Chaos3
0001F8D4 2770                       	dc.w $2770
0001F8D6 0000 0000                  	dc.l Map_SS_Chaos3
0001F8DA 4770                       	dc.w $4770
0001F8DC 0000 0000                  	dc.l Map_SS_Chaos3
0001F8E0 6770                       	dc.w $6770
0001F8E2 0000 0000                  	dc.l Map_SS_Chaos1
0001F8E6 0770                       	dc.w $770
0001F8E8 0000 0000                  	dc.l Map_SS_Chaos2
0001F8EC 0770                       	dc.w $770
0001F8EE 0000 0000                  	dc.l Map_SS_R
0001F8F2 04F0                       	dc.w $4F0
0001F8F4 0400 BDB0                  	dc.l Map_Ring+$4000000
0001F8F8 2798                       	dc.w $2798
0001F8FA 0500 BDB0                  	dc.l Map_Ring+$5000000
0001F8FE 2798                       	dc.w $2798
0001F900 0600 BDB0                  	dc.l Map_Ring+$6000000
0001F904 2798                       	dc.w $2798
0001F906 0700 BDB0                  	dc.l Map_Ring+$7000000
0001F90A 2798                       	dc.w $2798
0001F90C 0000 0000                  	dc.l Map_SS_Glass
0001F910 23F0                       	dc.w $23F0
0001F912 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001F916 23F0                       	dc.w $23F0
0001F918 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001F91C 23F0                       	dc.w $23F0
0001F91E 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001F922 23F0                       	dc.w $23F0
0001F924 0000 0000                  	dc.l Map_SS_R+$2000000
0001F928 04F0                       	dc.w $4F0
0001F92A 0000 0000                  	dc.l Map_SS_Glass
0001F92E 05F0                       	dc.w $5F0
0001F930 0000 0000                  	dc.l Map_SS_Glass
0001F934 65F0                       	dc.w $65F0
0001F936 0000 0000                  	dc.l Map_SS_Glass
0001F93A 25F0                       	dc.w $25F0
0001F93C 0000 0000                  	dc.l Map_SS_Glass
0001F940 45F0                       	dc.w $45F0
0001F940 45F0                       	dc.w $45F0
0001F942                            
0001F942                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001F942                            ; ---------------------------------------------------------------------------
0001F942                            ; Sprite mappings - special stage "R" block
0001F942                            ; ---------------------------------------------------------------------------
0001F942                            Map_SS_R_internal:
0001F942 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001F944 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001F946 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001F948 01                         byte_1B912:	dc.b 1
0001F949 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F94E 01                         byte_1B918:	dc.b 1
0001F94F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F954 00                         byte_1B91E:	dc.b 0
0001F956 00                         		even
0001F956 00                         		even
0001F956                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001F956                            ; ---------------------------------------------------------------------------
0001F956                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001F956                            ; ---------------------------------------------------------------------------
0001F956                            Map_SS_Glass_internal:
0001F956 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001F958 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001F95A 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001F95C 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001F95E 01                         byte_1B928:	dc.b 1
0001F95F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F964 01                         byte_1B92E:	dc.b 1
0001F965 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001F96A 01                         byte_1B934:	dc.b 1
0001F96B F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001F970 01                         byte_1B93A:	dc.b 1
0001F971 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001F976                            		even
0001F976                            		even
0001F976                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001F976                            ; ---------------------------------------------------------------------------
0001F976                            ; Sprite mappings - special stage "UP" block
0001F976                            ; ---------------------------------------------------------------------------
0001F976                            Map_SS_Up_internal:
0001F976 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001F978 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001F97A 01                         byte_1B944:	dc.b 1
0001F97B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F980 01                         byte_1B94A:	dc.b 1
0001F981 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F986                            		even
0001F986                            		even
0001F986                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001F986                            ; ---------------------------------------------------------------------------
0001F986                            ; Sprite mappings - special stage "DOWN" block
0001F986                            ; ---------------------------------------------------------------------------
0001F986                            Map_SS_Down_internal:
0001F986 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001F988 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001F98A 01                         byte_1B954:	dc.b 1
0001F98B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F990 01                         byte_1B95A:	dc.b 1
0001F991 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F996                            		even
0001F996                            		even
0001F996                            		include	"_maps\SS Chaos Emeralds.asm"
0001F996                            ; ---------------------------------------------------------------------------
0001F996                            ; Sprite mappings - special stage chaos	emeralds
0001F996                            ; ---------------------------------------------------------------------------
0001F996 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001F998 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001F99A 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001F99C 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001F99E 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001F9A0 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001F9A2 01                         byte_1B96C:	dc.b 1
0001F9A3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001F9A8 01                         byte_1B972:	dc.b 1
0001F9A9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001F9AE 01                         byte_1B978:	dc.b 1
0001F9AF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001F9B4 01                         byte_1B97E:	dc.b 1
0001F9B5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001F9BA                            		even
0001F9BA                            		even
0001F9BA                            
0001F9BA                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001F9BA                            ; ---------------------------------------------------------------------------
0001F9BA                            ; Object 09 - Sonic (special stage)
0001F9BA                            ; ---------------------------------------------------------------------------
0001F9BA                            
0001F9BA                            SonicSpecial:
0001F9BA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001F9BE 6700                       		beq.s	Obj09_Normal	; if not, branch
0001F9C0 6100 0000                  		bsr.w	SS_FixCamera
0001F9C4 6000 0000                  		bra.w	DebugMode
0001F9C8                            ; ===========================================================================
0001F9C8                            
0001F9C8                            Obj09_Normal:
0001F9C8 7000                       		moveq	#0,d0
0001F9CA 1028 0024                  		move.b	obRoutine(a0),d0
0001F9CE 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001F9D2 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001F9D6                            ; ===========================================================================
0001F9D6 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001F9D8 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001F9DA 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001F9DC 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001F9DE                            ; ===========================================================================
0001F9DE                            
0001F9DE                            Obj09_Main:	; Routine 0
0001F9DE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F9E2 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001F9E8 117C 0007 0017             		move.b	#7,obWidth(a0)
0001F9EE 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001F9F6 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001F9FC 117C 0004 0001             		move.b	#4,obRender(a0)
0001FA02 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FA08 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001FA0E 08E8 0002 0022             		bset	#2,obStatus(a0)
0001FA14 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FA1A                            
0001FA1A                            Obj09_ChkDebug:	; Routine 2
0001FA1A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001FA1E 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FA20 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001FA26 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FA28 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001FA2E                            
0001FA2E                            Obj09_NoDebug:
0001FA2E 117C 0000 0030             		move.b	#0,$30(a0)
0001FA34 7000                       		moveq	#0,d0
0001FA36 1028 0022                  		move.b	obStatus(a0),d0
0001FA3A 0240 0002                  		andi.w	#2,d0
0001FA3E 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001FA42 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001FA46 4EB9 0001 6ED8             		jsr	(Sonic_LoadGfx).l
0001FA4C 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001FA52                            ; ===========================================================================
0001FA52 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001FA54 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001FA56                            ; ===========================================================================
0001FA56                            
0001FA56                            Obj09_OnWall:
0001FA56 6100 0000                  		bsr.w	Obj09_Jump
0001FA5A 6100 0000                  		bsr.w	Obj09_Move
0001FA5E 6100 0000                  		bsr.w	Obj09_Fall
0001FA62 6000                       		bra.s	Obj09_Display
0001FA64                            ; ===========================================================================
0001FA64                            
0001FA64                            Obj09_InAir:
0001FA64 6100 0000                  		bsr.w	nullsub_2
0001FA68 6100 0000                  		bsr.w	Obj09_Move
0001FA6C 6100 0000                  		bsr.w	Obj09_Fall
0001FA70                            
0001FA70                            Obj09_Display:
0001FA70 6100 0000                  		bsr.w	Obj09_ChkItems
0001FA74 6100 0000                  		bsr.w	Obj09_ChkItems2
0001FA78 4EB9 0000 F794             		jsr	(SpeedToPos).l
0001FA7E 6100 0000                  		bsr.w	SS_FixCamera
0001FA82 3038 F780                  		move.w	(v_ssangle).w,d0
0001FA86 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FA8A 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FA8E 4EB9 0001 68F2             		jsr	(Sonic_Animate).l
0001FA94 4E75                       		rts	
0001FA96                            
0001FA96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA96                            
0001FA96                            
0001FA96                            Obj09_Move:
0001FA96 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001FA9C 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001FA9E 6100 0000                  		bsr.w	Obj09_MoveLeft
0001FAA2                            
0001FAA2                            Obj09_ChkRight:
0001FAA2 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001FAA8 6700                       		beq.s	loc_1BA78	; if not, branch
0001FAAA 6100 0000                  		bsr.w	Obj09_MoveRight
0001FAAE                            
0001FAAE                            loc_1BA78:
0001FAAE 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FAB2 0200 000C                  		andi.b	#btnL+btnR,d0
0001FAB6 6600                       		bne.s	loc_1BAA8
0001FAB8 3028 0020                  		move.w	obInertia(a0),d0
0001FABC 6700                       		beq.s	loc_1BAA8
0001FABE 6B00                       		bmi.s	loc_1BA9A
0001FAC0 0440 000C                  		subi.w	#$C,d0
0001FAC4 6400                       		bcc.s	loc_1BA94
0001FAC6 303C 0000                  		move.w	#0,d0
0001FACA                            
0001FACA                            loc_1BA94:
0001FACA 3140 0020                  		move.w	d0,obInertia(a0)
0001FACE 6000                       		bra.s	loc_1BAA8
0001FAD0                            ; ===========================================================================
0001FAD0                            
0001FAD0                            loc_1BA9A:
0001FAD0 0640 000C                  		addi.w	#$C,d0
0001FAD4 6400                       		bcc.s	loc_1BAA4
0001FAD6 303C 0000                  		move.w	#0,d0
0001FADA                            
0001FADA                            loc_1BAA4:
0001FADA 3140 0020                  		move.w	d0,obInertia(a0)
0001FADE                            
0001FADE                            loc_1BAA8:
0001FADE 1038 F780                  		move.b	(v_ssangle).w,d0
0001FAE2 0600 0020                  		addi.b	#$20,d0
0001FAE6 0200 00C0                  		andi.b	#$C0,d0
0001FAEA 4400                       		neg.b	d0
0001FAEC 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FAF2 C3E8 0020                  		muls.w	obInertia(a0),d1
0001FAF6 D3A8 0008                  		add.l	d1,obX(a0)
0001FAFA C1E8 0020                  		muls.w	obInertia(a0),d0
0001FAFE D1A8 000C                  		add.l	d0,obY(a0)
0001FB02 48E7 C000                  		movem.l	d0-d1,-(sp)
0001FB06 2428 000C                  		move.l	obY(a0),d2
0001FB0A 2628 0008                  		move.l	obX(a0),d3
0001FB0E 6100 0000                  		bsr.w	sub_1BCE8
0001FB12 6700                       		beq.s	loc_1BAF2
0001FB14 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FB18 93A8 0008                  		sub.l	d1,obX(a0)
0001FB1C 91A8 000C                  		sub.l	d0,obY(a0)
0001FB20 317C 0000 0020             		move.w	#0,obInertia(a0)
0001FB26 4E75                       		rts	
0001FB28                            ; ===========================================================================
0001FB28                            
0001FB28                            loc_1BAF2:
0001FB28 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FB2C 4E75                       		rts	
0001FB2E                            ; End of function Obj09_Move
0001FB2E                            
0001FB2E                            
0001FB2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB2E                            
0001FB2E                            
0001FB2E                            Obj09_MoveLeft:
0001FB2E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001FB34 3028 0020                  		move.w	obInertia(a0),d0
0001FB38 6700                       		beq.s	loc_1BB06
0001FB3A 6A00                       		bpl.s	loc_1BB1A
0001FB3C                            
0001FB3C                            loc_1BB06:
0001FB3C 0440 000C                  		subi.w	#$C,d0
0001FB40 0C40 F800                  		cmpi.w	#-$800,d0
0001FB44 6E00                       		bgt.s	loc_1BB14
0001FB46 303C F800                  		move.w	#-$800,d0
0001FB4A                            
0001FB4A                            loc_1BB14:
0001FB4A 3140 0020                  		move.w	d0,obInertia(a0)
0001FB4E 4E75                       		rts	
0001FB50                            ; ===========================================================================
0001FB50                            
0001FB50                            loc_1BB1A:
0001FB50 0440 0040                  		subi.w	#$40,d0
0001FB54 6400                       		bcc.s	loc_1BB22
0001FB56 4E71                       		nop	
0001FB58                            
0001FB58                            loc_1BB22:
0001FB58 3140 0020                  		move.w	d0,obInertia(a0)
0001FB5C 4E75                       		rts	
0001FB5E                            ; End of function Obj09_MoveLeft
0001FB5E                            
0001FB5E                            
0001FB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB5E                            
0001FB5E                            
0001FB5E                            Obj09_MoveRight:
0001FB5E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001FB64 3028 0020                  		move.w	obInertia(a0),d0
0001FB68 6B00                       		bmi.s	loc_1BB48
0001FB6A 0640 000C                  		addi.w	#$C,d0
0001FB6E 0C40 0800                  		cmpi.w	#$800,d0
0001FB72 6D00                       		blt.s	loc_1BB42
0001FB74 303C 0800                  		move.w	#$800,d0
0001FB78                            
0001FB78                            loc_1BB42:
0001FB78 3140 0020                  		move.w	d0,obInertia(a0)
0001FB7C 6000                       		bra.s	locret_1BB54
0001FB7E                            ; ===========================================================================
0001FB7E                            
0001FB7E                            loc_1BB48:
0001FB7E 0640 0040                  		addi.w	#$40,d0
0001FB82 6400                       		bcc.s	loc_1BB50
0001FB84 4E71                       		nop	
0001FB86                            
0001FB86                            loc_1BB50:
0001FB86 3140 0020                  		move.w	d0,obInertia(a0)
0001FB8A                            
0001FB8A                            locret_1BB54:
0001FB8A 4E75                       		rts	
0001FB8C                            ; End of function Obj09_MoveRight
0001FB8C                            
0001FB8C                            
0001FB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB8C                            
0001FB8C                            
0001FB8C                            Obj09_Jump:
0001FB8C 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001FB90 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001FB94 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001FB96 1038 F780                  		move.b	(v_ssangle).w,d0
0001FB9A 0200 00FC                  		andi.b	#$FC,d0
0001FB9E 4400                       		neg.b	d0
0001FBA0 0400 0040                  		subi.b	#$40,d0
0001FBA4 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FBAA C3FC 0680                  		muls.w	#$680,d1
0001FBAE E081                       		asr.l	#8,d1
0001FBB0 3141 0010                  		move.w	d1,obVelX(a0)
0001FBB4 C1FC 0680                  		muls.w	#$680,d0
0001FBB8 E080                       		asr.l	#8,d0
0001FBBA 3140 0012                  		move.w	d0,obVelY(a0)
0001FBBE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FBCE                            
0001FBCE                            Obj09_NoJump:
0001FBCE 4E75                       		rts	
0001FBD0                            ; End of function Obj09_Jump
0001FBD0                            
0001FBD0                            
0001FBD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBD0                            
0001FBD0                            
0001FBD0                            nullsub_2:
0001FBD0 4E75                       		rts	
0001FBD2                            ; End of function nullsub_2
0001FBD2                            
0001FBD2                            ; ===========================================================================
0001FBD2                            ; ---------------------------------------------------------------------------
0001FBD2                            ; unused subroutine to limit Sonic's upward vertical speed
0001FBD2                            ; ---------------------------------------------------------------------------
0001FBD2 323C FC00                  		move.w	#-$400,d1
0001FBD6 B268 0012                  		cmp.w	obVelY(a0),d1
0001FBDA 6F00                       		ble.s	locret_1BBB4
0001FBDC 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FBE0 0200 0070                  		andi.b	#btnABC,d0
0001FBE4 6600                       		bne.s	locret_1BBB4
0001FBE6 3141 0012                  		move.w	d1,obVelY(a0)
0001FBEA                            
0001FBEA                            locret_1BBB4:
0001FBEA 4E75                       		rts	
0001FBEC                            ; ---------------------------------------------------------------------------
0001FBEC                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001FBEC                            ; ---------------------------------------------------------------------------
0001FBEC                            
0001FBEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBEC                            
0001FBEC                            
0001FBEC                            SS_FixCamera:
0001FBEC 3428 000C                  		move.w	obY(a0),d2
0001FBF0 3628 0008                  		move.w	obX(a0),d3
0001FBF4 3038 F700                  		move.w	(v_screenposx).w,d0
0001FBF8 0443 00A0                  		subi.w	#$A0,d3
0001FBFC 6500                       		bcs.s	loc_1BBCE
0001FBFE 9043                       		sub.w	d3,d0
0001FC00 9178 F700                  		sub.w	d0,(v_screenposx).w
0001FC04                            
0001FC04                            loc_1BBCE:
0001FC04 3038 F704                  		move.w	(v_screenposy).w,d0
0001FC08 0442 0070                  		subi.w	#$70,d2
0001FC0C 6500                       		bcs.s	locret_1BBDE
0001FC0E 9042                       		sub.w	d2,d0
0001FC10 9178 F704                  		sub.w	d0,(v_screenposy).w
0001FC14                            
0001FC14                            locret_1BBDE:
0001FC14 4E75                       		rts	
0001FC16                            ; End of function SS_FixCamera
0001FC16                            
0001FC16                            ; ===========================================================================
0001FC16                            
0001FC16                            Obj09_ExitStage:
0001FC16 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001FC1C 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001FC22 6600                       		bne.s	loc_1BBF4
0001FC24 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FC2A                            
0001FC2A                            loc_1BBF4:
0001FC2A 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001FC30 6D00                       		blt.s	loc_1BC12
0001FC32 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001FC38 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001FC3E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FC42 317C 003C 0038             		move.w	#$3C,$38(a0)
0001FC48                            
0001FC48                            loc_1BC12:
0001FC48 3038 F780                  		move.w	(v_ssangle).w,d0
0001FC4C D078 F782                  		add.w	(v_ssrotate).w,d0
0001FC50 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FC54 4EB9 0001 68F2             		jsr	(Sonic_Animate).l
0001FC5A 4EB9 0001 6ED8             		jsr	(Sonic_LoadGfx).l
0001FC60 6100 FF8A                  		bsr.w	SS_FixCamera
0001FC64 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001FC6A                            ; ===========================================================================
0001FC6A                            
0001FC6A                            Obj09_Exit2:
0001FC6A 5368 0038                  		subq.w	#1,$38(a0)
0001FC6E 6600                       		bne.s	loc_1BC40
0001FC70 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FC76                            
0001FC76                            loc_1BC40:
0001FC76 4EB9 0001 68F2             		jsr	(Sonic_Animate).l
0001FC7C 4EB9 0001 6ED8             		jsr	(Sonic_LoadGfx).l
0001FC82 6100 FF68                  		bsr.w	SS_FixCamera
0001FC86 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0001FC8C                            
0001FC8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC8C                            
0001FC8C                            
0001FC8C                            Obj09_Fall:
0001FC8C 2428 000C                  		move.l	obY(a0),d2
0001FC90 2628 0008                  		move.l	obX(a0),d3
0001FC94 1038 F780                  		move.b	(v_ssangle).w,d0
0001FC98 0200 00FC                  		andi.b	#$FC,d0
0001FC9C 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FCA2 3828 0010                  		move.w	obVelX(a0),d4
0001FCA6 48C4                       		ext.l	d4
0001FCA8 E184                       		asl.l	#8,d4
0001FCAA C1FC 002A                  		muls.w	#$2A,d0
0001FCAE D084                       		add.l	d4,d0
0001FCB0 3828 0012                  		move.w	obVelY(a0),d4
0001FCB4 48C4                       		ext.l	d4
0001FCB6 E184                       		asl.l	#8,d4
0001FCB8 C3FC 002A                  		muls.w	#$2A,d1
0001FCBC D284                       		add.l	d4,d1
0001FCBE D680                       		add.l	d0,d3
0001FCC0 6100 0000                  		bsr.w	sub_1BCE8
0001FCC4 6700                       		beq.s	loc_1BCB0
0001FCC6 9680                       		sub.l	d0,d3
0001FCC8 7000                       		moveq	#0,d0
0001FCCA 3140 0010                  		move.w	d0,obVelX(a0)
0001FCCE 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FCD4 D481                       		add.l	d1,d2
0001FCD6 6100 0000                  		bsr.w	sub_1BCE8
0001FCDA 6700                       		beq.s	loc_1BCC6
0001FCDC 9481                       		sub.l	d1,d2
0001FCDE 7200                       		moveq	#0,d1
0001FCE0 3141 0012                  		move.w	d1,obVelY(a0)
0001FCE4 4E75                       		rts	
0001FCE6                            ; ===========================================================================
0001FCE6                            
0001FCE6                            loc_1BCB0:
0001FCE6 D481                       		add.l	d1,d2
0001FCE8 6100 0000                  		bsr.w	sub_1BCE8
0001FCEC 6700                       		beq.s	loc_1BCD4
0001FCEE 9481                       		sub.l	d1,d2
0001FCF0 7200                       		moveq	#0,d1
0001FCF2 3141 0012                  		move.w	d1,obVelY(a0)
0001FCF6 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FCFC                            
0001FCFC                            loc_1BCC6:
0001FCFC E080                       		asr.l	#8,d0
0001FCFE E081                       		asr.l	#8,d1
0001FD00 3140 0010                  		move.w	d0,obVelX(a0)
0001FD04 3141 0012                  		move.w	d1,obVelY(a0)
0001FD08 4E75                       		rts	
0001FD0A                            ; ===========================================================================
0001FD0A                            
0001FD0A                            loc_1BCD4:
0001FD0A E080                       		asr.l	#8,d0
0001FD0C E081                       		asr.l	#8,d1
0001FD0E 3140 0010                  		move.w	d0,obVelX(a0)
0001FD12 3141 0012                  		move.w	d1,obVelY(a0)
0001FD16 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FD1C 4E75                       		rts	
0001FD1E                            ; End of function Obj09_Fall
0001FD1E                            
0001FD1E                            
0001FD1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD1E                            
0001FD1E                            
0001FD1E                            sub_1BCE8:
0001FD1E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FD24 7800                       		moveq	#0,d4
0001FD26 4842                       		swap	d2
0001FD28 3802                       		move.w	d2,d4
0001FD2A 4842                       		swap	d2
0001FD2C 0644 0044                  		addi.w	#$44,d4
0001FD30 88FC 0018                  		divu.w	#$18,d4
0001FD34 C8FC 0080                  		mulu.w	#$80,d4
0001FD38 D3C4                       		adda.l	d4,a1
0001FD3A 7800                       		moveq	#0,d4
0001FD3C 4843                       		swap	d3
0001FD3E 3803                       		move.w	d3,d4
0001FD40 4843                       		swap	d3
0001FD42 0644 0014                  		addi.w	#$14,d4
0001FD46 88FC 0018                  		divu.w	#$18,d4
0001FD4A D2C4                       		adda.w	d4,a1
0001FD4C 7A00                       		moveq	#0,d5
0001FD4E 1819                       		move.b	(a1)+,d4
0001FD50 6100                       		bsr.s	sub_1BD30
0001FD52 1819                       		move.b	(a1)+,d4
0001FD54 6100                       		bsr.s	sub_1BD30
0001FD56 D2FC 007E                  		adda.w	#$7E,a1
0001FD5A 1819                       		move.b	(a1)+,d4
0001FD5C 6100                       		bsr.s	sub_1BD30
0001FD5E 1819                       		move.b	(a1)+,d4
0001FD60 6100                       		bsr.s	sub_1BD30
0001FD62 4A05                       		tst.b	d5
0001FD64 4E75                       		rts	
0001FD66                            ; End of function sub_1BCE8
0001FD66                            
0001FD66                            
0001FD66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD66                            
0001FD66                            
0001FD66                            sub_1BD30:
0001FD66 6700                       		beq.s	locret_1BD44
0001FD68 0C04 0028                  		cmpi.b	#$28,d4
0001FD6C 6700                       		beq.s	locret_1BD44
0001FD6E 0C04 003A                  		cmpi.b	#$3A,d4
0001FD72 6500                       		bcs.s	loc_1BD46
0001FD74 0C04 004B                  		cmpi.b	#$4B,d4
0001FD78 6400                       		bcc.s	loc_1BD46
0001FD7A                            
0001FD7A                            locret_1BD44:
0001FD7A 4E75                       		rts	
0001FD7C                            ; ===========================================================================
0001FD7C                            
0001FD7C                            loc_1BD46:
0001FD7C 1144 0030                  		move.b	d4,$30(a0)
0001FD80 2149 0032                  		move.l	a1,$32(a0)
0001FD84 7AFF                       		moveq	#-1,d5
0001FD86 4E75                       		rts	
0001FD88                            ; End of function sub_1BD30
0001FD88                            
0001FD88                            
0001FD88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD88                            
0001FD88                            
0001FD88                            Obj09_ChkItems:
0001FD88 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FD8E 7800                       		moveq	#0,d4
0001FD90 3828 000C                  		move.w	obY(a0),d4
0001FD94 0644 0050                  		addi.w	#$50,d4
0001FD98 88FC 0018                  		divu.w	#$18,d4
0001FD9C C8FC 0080                  		mulu.w	#$80,d4
0001FDA0 D3C4                       		adda.l	d4,a1
0001FDA2 7800                       		moveq	#0,d4
0001FDA4 3828 0008                  		move.w	obX(a0),d4
0001FDA8 0644 0020                  		addi.w	#$20,d4
0001FDAC 88FC 0018                  		divu.w	#$18,d4
0001FDB0 D2C4                       		adda.w	d4,a1
0001FDB2 1811                       		move.b	(a1),d4
0001FDB4 6600                       		bne.s	Obj09_ChkCont
0001FDB6 4A28 003A                  		tst.b	$3A(a0)
0001FDBA 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001FDBE 7800                       		moveq	#0,d4
0001FDC0 4E75                       		rts	
0001FDC2                            ; ===========================================================================
0001FDC2                            
0001FDC2                            Obj09_ChkCont:
0001FDC2 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001FDC6 6600                       		bne.s	Obj09_Chk1Up
0001FDC8 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001FDCC 6600                       		bne.s	Obj09_GetCont
0001FDCE 14BC 0001                  		move.b	#1,(a2)
0001FDD2 2549 0004                  		move.l	a1,4(a2)
0001FDD6                            
0001FDD6                            Obj09_GetCont:
0001FDD6 4EB9 0000 B918             		jsr	(CollectRing).l
0001FDDC 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001FDE2 6500                       		bcs.s	Obj09_NoCont
0001FDE4 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001FDEA 6600                       		bne.s	Obj09_NoCont
0001FDEC 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001FDFA                            
0001FDFA                            Obj09_NoCont:
0001FDFA 7800                       		moveq	#0,d4
0001FDFC 4E75                       		rts	
0001FDFE                            ; ===========================================================================
0001FDFE                            
0001FDFE                            Obj09_Chk1Up:
0001FDFE 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001FE02 6600                       		bne.s	Obj09_ChkEmer
0001FE04 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001FE08 6600                       		bne.s	Obj09_Get1Up
0001FE0A 14BC 0003                  		move.b	#3,(a2)
0001FE0E 2549 0004                  		move.l	a1,4(a2)
0001FE12                            
0001FE12                            Obj09_Get1Up:
0001FE12 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001FE16 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001FE24 7800                       		moveq	#0,d4
0001FE26 4E75                       		rts	
0001FE28                            ; ===========================================================================
0001FE28                            
0001FE28                            Obj09_ChkEmer:
0001FE28 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001FE2C 6500                       		bcs.s	Obj09_ChkGhost
0001FE2E 0C04 0040                  		cmpi.b	#$40,d4
0001FE32 6200                       		bhi.s	Obj09_ChkGhost
0001FE34 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001FE38 6600                       		bne.s	Obj09_GetEmer
0001FE3A 14BC 0005                  		move.b	#5,(a2)
0001FE3E 2549 0004                  		move.l	a1,4(a2)
0001FE42                            
0001FE42                            Obj09_GetEmer:
0001FE42 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001FE48 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001FE4A 0404 003B                  		subi.b	#$3B,d4
0001FE4E 7000                       		moveq	#0,d0
0001FE50 1038 FE57                  		move.b	(v_emeralds).w,d0
0001FE54 45F8 FE58                  		lea	(v_emldlist).w,a2
0001FE58 1584 0000                  		move.b	d4,(a2,d0.w)
0001FE5C 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001FE60                            
0001FE60                            Obj09_NoEmer:
0001FE6A 7800                       		moveq	#0,d4
0001FE6C 4E75                       		rts	
0001FE6E                            ; ===========================================================================
0001FE6E                            
0001FE6E                            Obj09_ChkGhost:
0001FE6E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001FE72 6600                       		bne.s	Obj09_ChkGhostTag
0001FE74 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001FE7A                            
0001FE7A                            Obj09_ChkGhostTag:
0001FE7A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001FE7E 6600                       		bne.s	Obj09_NoGhost
0001FE80 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001FE86 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001FE88 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001FE8E                            
0001FE8E                            Obj09_NoGhost:
0001FE8E 78FF                       		moveq	#-1,d4
0001FE90 4E75                       		rts	
0001FE92                            ; ===========================================================================
0001FE92                            
0001FE92                            Obj09_MakeGhostSolid:
0001FE92 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001FE98 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001FE9A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001FEA0 723F                       		moveq	#$3F,d1
0001FEA2                            
0001FEA2                            Obj09_GhostLoop2:
0001FEA2 743F                       		moveq	#$3F,d2
0001FEA4                            
0001FEA4                            Obj09_GhostLoop:
0001FEA4 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001FEA8 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001FEAA 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001FEAE                            
0001FEAE                            Obj09_NoReplace:
0001FEAE 5249                       		addq.w	#1,a1
0001FEB0 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001FEB4 43E9 0040                  		lea	$40(a1),a1
0001FEB8 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001FEBC                            
0001FEBC                            Obj09_GhostNotSolid:
0001FEBC 4228 003A                  		clr.b	$3A(a0)
0001FEC0 7800                       		moveq	#0,d4
0001FEC2 4E75                       		rts	
0001FEC4                            ; End of function Obj09_ChkItems
0001FEC4                            
0001FEC4                            
0001FEC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEC4                            
0001FEC4                            
0001FEC4                            Obj09_ChkItems2:
0001FEC4 1028 0030                  		move.b	$30(a0),d0
0001FEC8 6600                       		bne.s	Obj09_ChkBumper
0001FECA 5328 0036                  		subq.b	#1,$36(a0)
0001FECE 6A00                       		bpl.s	loc_1BEA0
0001FED0 117C 0000 0036             		move.b	#0,$36(a0)
0001FED6                            
0001FED6                            loc_1BEA0:
0001FED6 5328 0037                  		subq.b	#1,$37(a0)
0001FEDA 6A00                       		bpl.s	locret_1BEAC
0001FEDC 117C 0000 0037             		move.b	#0,$37(a0)
0001FEE2                            
0001FEE2                            locret_1BEAC:
0001FEE2 4E75                       		rts	
0001FEE4                            ; ===========================================================================
0001FEE4                            
0001FEE4                            Obj09_ChkBumper:
0001FEE4 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001FEE8 6600                       		bne.s	Obj09_GOAL
0001FEEA 2228 0032                  		move.l	$32(a0),d1
0001FEEE 0481 00FF 0001             		subi.l	#$FF0001,d1
0001FEF4 3401                       		move.w	d1,d2
0001FEF6 0241 007F                  		andi.w	#$7F,d1
0001FEFA C2FC 0018                  		mulu.w	#$18,d1
0001FEFE 0441 0014                  		subi.w	#$14,d1
0001FF02 EE4A                       		lsr.w	#7,d2
0001FF04 0242 007F                  		andi.w	#$7F,d2
0001FF08 C4FC 0018                  		mulu.w	#$18,d2
0001FF0C 0442 0044                  		subi.w	#$44,d2
0001FF10 9268 0008                  		sub.w	obX(a0),d1
0001FF14 9468 000C                  		sub.w	obY(a0),d2
0001FF18 4EB9 0000 3F5C             		jsr	(CalcAngle).l
0001FF1E 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FF24 C3FC F900                  		muls.w	#-$700,d1
0001FF28 E081                       		asr.l	#8,d1
0001FF2A 3141 0010                  		move.w	d1,obVelX(a0)
0001FF2E C1FC F900                  		muls.w	#-$700,d0
0001FF32 E080                       		asr.l	#8,d0
0001FF34 3140 0012                  		move.w	d0,obVelY(a0)
0001FF38 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FF3E 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001FF42 6600                       		bne.s	Obj09_BumpSnd
0001FF44 14BC 0002                  		move.b	#2,(a2)
0001FF48 2028 0032                  		move.l	$32(a0),d0
0001FF4C 5380                       		subq.l	#1,d0
0001FF4E 2540 0004                  		move.l	d0,4(a2)
0001FF52                            
0001FF52                            Obj09_BumpSnd:
0001FF5C                            ; ===========================================================================
0001FF5C                            
0001FF5C                            Obj09_GOAL:
0001FF5C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001FF60 6600                       		bne.s	Obj09_UPblock
0001FF62 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001FF70 4E75                       		rts	
0001FF72                            ; ===========================================================================
0001FF72                            
0001FF72                            Obj09_UPblock:
0001FF72 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001FF76 6600                       		bne.s	Obj09_DOWNblock
0001FF78 4A28 0036                  		tst.b	$36(a0)
0001FF7C 6600 0000                  		bne.w	Obj09_NoGlass
0001FF80 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FF86 0838 0006 F783             		btst	#6,($FFFFF783).w
0001FF8C 6700                       		beq.s	Obj09_UPsnd
0001FF8E E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001FF92 2268 0032                  		movea.l	$32(a0),a1
0001FF96 5389                       		subq.l	#1,a1
0001FF98 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001FF9C                            
0001FF9C                            Obj09_UPsnd:
0001FFA6                            ; ===========================================================================
0001FFA6                            
0001FFA6                            Obj09_DOWNblock:
0001FFA6 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001FFAA 6600                       		bne.s	Obj09_Rblock
0001FFAC 4A28 0036                  		tst.b	$36(a0)
0001FFB0 6600 0000                  		bne.w	Obj09_NoGlass
0001FFB4 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FFBA 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001FFC0 6600                       		bne.s	Obj09_DOWNsnd
0001FFC2 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001FFC6 2268 0032                  		movea.l	$32(a0),a1
0001FFCA 5389                       		subq.l	#1,a1
0001FFCC 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001FFD0                            
0001FFD0                            Obj09_DOWNsnd:
0001FFDA                            ; ===========================================================================
0001FFDA                            
0001FFDA                            Obj09_Rblock:
0001FFDA 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001FFDE 6600                       		bne.s	Obj09_ChkGlass
0001FFE0 4A28 0037                  		tst.b	$37(a0)
0001FFE4 6600 0000                  		bne.w	Obj09_NoGlass
0001FFE8 117C 001E 0037             		move.b	#$1E,$37(a0)
0001FFEE 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001FFF2 6600                       		bne.s	Obj09_RevStage
0001FFF4 14BC 0004                  		move.b	#4,(a2)
0001FFF8 2028 0032                  		move.l	$32(a0),d0
0001FFFC 5380                       		subq.l	#1,d0
0001FFFE 2540 0004                  		move.l	d0,4(a2)
00020002                            
00020002                            Obj09_RevStage:
00020002 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
00020010                            ; ===========================================================================
00020010                            
00020010                            Obj09_ChkGlass:
00020010 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
00020014 6700                       		beq.s	Obj09_Glass	; if yes, branch
00020016 0C00 002E                  		cmpi.b	#$2E,d0
0002001A 6700                       		beq.s	Obj09_Glass
0002001C 0C00 002F                  		cmpi.b	#$2F,d0
00020020 6700                       		beq.s	Obj09_Glass
00020022 0C00 0030                  		cmpi.b	#$30,d0
00020026 6600                       		bne.s	Obj09_NoGlass	; if not, branch
00020028                            
00020028                            Obj09_Glass:
00020028 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0002002C 6600                       		bne.s	Obj09_GlassSnd
0002002E 14BC 0006                  		move.b	#6,(a2)
00020032 2268 0032                  		movea.l	$32(a0),a1
00020036 5389                       		subq.l	#1,a1
00020038 2549 0004                  		move.l	a1,4(a2)
0002003C 1011                       		move.b	(a1),d0
0002003E 5200                       		addq.b	#1,d0		; change glass type when touched
00020040 0C00 0030                  		cmpi.b	#$30,d0
00020044 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
00020046 4200                       		clr.b	d0		; remove the glass block when it's destroyed
00020048                            
00020048                            Obj09_GlassUpdate:
00020048 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0002004C                            
0002004C                            Obj09_GlassSnd:
00020056                            ; ===========================================================================
00020056                            
00020056                            Obj09_NoGlass:
00020056 4E75                       		rts	
00020058                            ; End of function Obj09_ChkItems2
00020058                            ; End of function Obj09_ChkItems2
00020058                            
00020058                            		include	"_incObj\10.asm"
00020058                            ; ---------------------------------------------------------------------------
00020058                            ; Object 10 - After-Image
00020058                            ; ---------------------------------------------------------------------------
00020058                            
00020058                            Obj10:
00020058 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0002005E 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
00020062                            
00020062 7000                             moveq   #0,d0
00020064 1028 0024                        move.b   obRoutine(a0),d0
00020068 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0002006C 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
00020070                            
00020070                            ; ===========================================================================
00020070                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
00020070                            ; ===========================================================================
00020070                            Afterimage_Index:
00020070 0000                             dc.w NoAfterImage-Afterimage_Index
00020072 0000                             dc.w NoAfterImage-Afterimage_Index
00020074 0000                             dc.w NoAfterImage-Afterimage_Index
00020076 0000                             dc.w AfterimageStart-Afterimage_Index
00020078 0000                             dc.w NoAfterImage-Afterimage_Index
0002007A 0000                             dc.w NoAfterImage-Afterimage_Index
0002007C 0000                             dc.w NoAfterImage-Afterimage_Index
0002007E 0000                             dc.w AfterimageLPrio-Afterimage_Index
00020080 0000                             dc.w AfterimageEnd-Afterimage_Index
00020082                            ; ===========================================================================
00020082                            NoAfterImage:
00020082 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
00020086 4E75                             rts
00020088                            ; ===========================================================================
00020088                            AfterimageStart:
00020088 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0002008E 6000                             bra.s   Afterimage_Show
00020090                            ; ===========================================================================
00020090                            AfterimageLPrio:
00020090 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
00020094                            ; ===========================================================================
00020094                            Afterimage_Show:
00020094 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
00020098 4EB9 0000 3CA4                   jsr   (RandomNumber).l         ; get a random number
0002009E 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
000200A2 6600                             bne.s   AfterimageException   ; if is not 0, branch
000200A4 4E75                             rts                        ; if it is 0, then don't show the after-image
000200A6                            
000200A6                            AfterimageException:
000200A6 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
000200AC 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
000200B2 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
000200B8 4EF9 0000 F7A8                   jmp   DisplaySprite
000200BE                            ; ===========================================================================
000200BE                            AfterimageEnd:
000200BE 4EF9 0000 F7E8                   jmp   DeleteObject
000200BE 4EF9 0000 F7E8                   jmp   DeleteObject
000200C4                            
000200C4                            		include	"_inc\AnimateLevelGfx.asm"
000200C4                            ; ---------------------------------------------------------------------------
000200C4                            ; Subroutine to	animate	level graphics
000200C4                            ; ---------------------------------------------------------------------------
000200C4                            
000200C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200C4                            
000200C4                            
000200C4                            AnimateLevelGfx:
000200C4 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000200C8 6600                       		bne.s	@ispaused	; if yes, branch
000200CA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000200D0 6100 0000                  		bsr.w	AniArt_GiantRing
000200D4 7000                       		moveq	#0,d0
000200D6 1038 FE10                  		move.b	(v_zone).w,d0
000200DA D040                       		add.w	d0,d0
000200DC 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
000200E0 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
000200E4                            
000200E4                            	@ispaused:
000200E4 4E75                       		rts	
000200E6                            
000200E6                            ; ===========================================================================
000200E6 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
000200EA 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
000200EE 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
000200F2 0000                       		dc.w AniArt_Ending-AniArt_Index
000200F4                            ; ===========================================================================
000200F4                            ; ---------------------------------------------------------------------------
000200F4                            ; Animated pattern routine - Green Hill
000200F4                            ; ---------------------------------------------------------------------------
000200F4                            
000200F4                            AniArt_GHZ:
000200F4                            
000200F4                            AniArt_GHZ_Waterfall:
000200F4                            
000200F4 =00000008                  @size:		equ 8	; number of tiles per frame
000200F4                            
000200F4 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
000200F8 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
000200FA                            
000200FA 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
00020100 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
00020106 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0002010A 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0002010E 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
00020112 6700                       		beq.s	@isframe0	; branch if frame 0
00020114 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
00020118                            
00020118                            	@isframe0:
00020122 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
00020126 6000 0000                  		bra.w	LoadTiles
0002012A                            ; ===========================================================================
0002012A                            
0002012A                            AniArt_GHZ_Bigflower:
0002012A                            
0002012A =00000010                  @size:		equ 16	; number of tiles per frame
0002012A                            
0002012A 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0002012E 6A00                       		bpl.s	AniArt_GHZ_Smallflower
00020130                            
00020130 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
00020136 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002013C 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
00020140 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
00020144 0240 0001                  		andi.w	#1,d0
00020148 6700                       		beq.s	@isframe0
0002014A 43E9 0200                  		lea	@size*$20(a1),a1
0002014E                            
0002014E                            	@isframe0:
00020158 323C 000F                  		move.w	#@size-1,d1
0002015C 6000 0000                  		bra.w	LoadTiles
00020160                            ; ===========================================================================
00020160                            
00020160                            AniArt_GHZ_Smallflower:
00020160                            
00020160 =0000000C                  @size:		equ 12	; number of tiles per frame
00020160                            
00020160 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
00020164 6A00                       		bpl.s	@end
00020166                            
00020166 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0002016C 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
00020170 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
00020174 0240 0003                  		andi.w	#3,d0		; there are 4 frames
00020178 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0002017C 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
00020180 6600                       		bne.s	@isframe1	; if not, branch
00020182 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
00020188                            
00020188                            	@isframe1:
00020188 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0002018A 3200                       		move.w	d0,d1
0002018C D040                       		add.w	d0,d0
0002018E D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0002019A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000201A0 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000201A4 323C 000B                  		move.w	#@size-1,d1
000201A8 6100 0000                  		bsr.w	LoadTiles
000201AC                            
000201AC                            @end:
000201AC 4E75                       		rts	
000201AE                            
000201AE 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
000201B2                            ; ===========================================================================
000201B2                            ; ---------------------------------------------------------------------------
000201B2                            ; Animated pattern routine - Marble
000201B2                            ; ---------------------------------------------------------------------------
000201B2                            
000201B2                            AniArt_MZ:
000201B2                            
000201B2                            AniArt_MZ_Lava:
000201B2                            
000201B2 =00000008                  @size:		equ 8	; number of tiles per frame
000201B2                            
000201B2 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
000201B6 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
000201B8                            
000201B8 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
000201BE 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
000201C4 7000                       		moveq	#0,d0
000201C6 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000201CA 5200                       		addq.b	#1,d0		; increment frame counter
000201CC 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
000201D0 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
000201D2 7000                       		moveq	#0,d0
000201D4                            
000201D4                            	@frame01or2:
000201D4 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
000201D8 C0FC 0100                  		mulu.w	#@size*$20,d0
000201DC D2C0                       		adda.w	d0,a1		; jump to appropriate tile
000201E8 323C 0007                  		move.w	#@size-1,d1
000201EC 6100 0000                  		bsr.w	LoadTiles
000201F0                            
000201F0                            AniArt_MZ_Magma:
000201F0 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000201F4 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
000201F6                            		
000201F6 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
000201FC 7000                       		moveq	#0,d0
000201FE 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
00020202 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
00020208 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0002020A D8C0                       		adda.w	d0,a4		; jump to appropriate tile
00020216 7600                       		moveq	#0,d3
00020218 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0002021C 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
00020220 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
00020224 343C 0003                  		move.w	#3,d2
00020228                            
00020228                            	@loop:
00020228 3003                       		move.w	d3,d0
0002022A D040                       		add.w	d0,d0
0002022C 0240 001E                  		andi.w	#$1E,d0
00020230 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00020236 3033 0000                  		move.w	(a3,d0.w),d0
0002023A 47F3 0000                  		lea	(a3,d0.w),a3
0002023E 224C                       		movea.l	a4,a1
00020240 323C 001F                  		move.w	#$1F,d1
00020244 4E93                       		jsr	(a3)
00020246 5843                       		addq.w	#4,d3
00020248 51CA FFDE                  		dbf	d2,@loop
0002024C 4E75                       		rts	
0002024E                            ; ===========================================================================
0002024E                            
0002024E                            AniArt_MZ_Torch:
0002024E                            
0002024E =00000006                  @size:		equ 6	; number of tiles per frame
0002024E                            
0002024E 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020252 6A00 0000                  		bpl.w	@end		; branch if not 0
00020256                            		
00020256 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0002025C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
00020262 7000                       		moveq	#0,d0
00020264 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
00020268 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0002026C 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
00020272 C0FC 00C0                  		mulu.w	#@size*$20,d0
00020276 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
00020282 323C 0005                  		move.w	#@size-1,d1
00020286 6000 0000                  		bra.w	LoadTiles
0002028A                            
0002028A                            @end:
0002028A 4E75                       		rts	
0002028C                            ; ===========================================================================
0002028C                            ; ---------------------------------------------------------------------------
0002028C                            ; Animated pattern routine - Scrap Brain
0002028C                            ; ---------------------------------------------------------------------------
0002028C                            
0002028C                            AniArt_SBZ:
0002028C                            
0002028C =0000000C                  @size:		equ 12	; number of tiles per frame
0002028C                            
0002028C 4A38 F7B4                  		tst.b	(v_lani2_frame).w
00020290 6700                       		beq.s	@smokepuff	; branch if counter hits 0
00020292                            		
00020292 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
00020296 6000                       		bra.s	@chk_smokepuff2
00020298                            ; ===========================================================================
00020298                            
00020298                            @smokepuff:
00020298 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0002029C 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0002029E                            		
0002029E 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
000202A4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
000202B4 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000202B8 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
000202BC 0240 0007                  		andi.w	#7,d0
000202C0 6700                       		beq.s	@untilnextpuff	; branch if frame 0
000202C2 5340                       		subq.w	#1,d0
000202C4 C0FC 0180                  		mulu.w	#@size*$20,d0
000202C8 43F1 0000                  		lea	(a1,d0.w),a1
000202CC 323C 000B                  		move.w	#@size-1,d1
000202D0 6000 0000                  		bra.w	LoadTiles
000202D4                            ; ===========================================================================
000202D4                            
000202D4                            @untilnextpuff:
000202D4 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
000202DA                            
000202DA                            @clearsky:
000202DA 323C 0005                  		move.w	#(@size/2)-1,d1
000202DE 6100 0000                  		bsr.w	LoadTiles
000202E2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000202E8 323C 0005                  		move.w	#(@size/2)-1,d1
000202EC 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
000202F0                            ; ===========================================================================
000202F0                            
000202F0                            @chk_smokepuff2:
000202F0 4A38 F7B5                  		tst.b	(v_lani2_time).w
000202F4 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
000202F6                            		
000202F6 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
000202FA 6000                       		bra.s	@end
000202FC                            ; ===========================================================================
000202FC                            
000202FC                            @smokepuff2:
000202FC 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
00020300 6A00                       		bpl.s	@end		; branch if not 0
00020302                            		
00020302 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
00020308 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
00020318 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002031C 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
00020320 0240 0007                  		andi.w	#7,d0
00020324 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
00020326 5340                       		subq.w	#1,d0
00020328 C0FC 0180                  		mulu.w	#@size*$20,d0
0002032C 43F1 0000                  		lea	(a1,d0.w),a1
00020330 323C 000B                  		move.w	#@size-1,d1
00020334 6000 0000                  		bra.w	LoadTiles
00020338                            ; ===========================================================================
00020338                            
00020338                            @untilnextpuff2:
00020338 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0002033E 609A                       		bra.s	@clearsky
00020340                            ; ===========================================================================
00020340                            
00020340                            @end:
00020340 4E75                       		rts	
00020342                            ; ===========================================================================
00020342                            ; ---------------------------------------------------------------------------
00020342                            ; Animated pattern routine - ending sequence
00020342                            ; ---------------------------------------------------------------------------
00020342                            
00020342                            AniArt_Ending:
00020342                            
00020342                            AniArt_Ending_BigFlower:
00020342                            
00020342 =00000010                  @size:		equ 16	; number of tiles per frame
00020342                            
00020342 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
00020346 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
00020348                            		
00020348 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0002034E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00020354 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
00020358 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002035C 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
00020360 0240 0001                  		andi.w	#1,d0		; only 2 frames
00020364 6700                       		beq.s	@isframe0	; branch if frame 0
00020366 43E9 0200                  		lea	@size*$20(a1),a1
0002036A 45EA 0200                  		lea	@size*$20(a2),a2
0002036E                            
0002036E                            	@isframe0:
00020378 323C 000F                  		move.w	#@size-1,d1
0002037C 6100 0000                  		bsr.w	LoadTiles
00020380 224A                       		movea.l	a2,a1
0002038C 323C 000F                  		move.w	#@size-1,d1
00020390 6000 0000                  		bra.w	LoadTiles
00020394                            ; ===========================================================================
00020394                            
00020394                            AniArt_Ending_SmallFlower:
00020394                            
00020394 =0000000C                  @size:		equ 12	; number of tiles per frame
00020394                            
00020394 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020398 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0002039A                            		
0002039A 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
000203A0 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
000203A4 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
000203A8 0240 0007                  		andi.w	#7,d0		; max 8 frames
000203AC 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000203B0 EF48                       		lsl.w	#7,d0		; multiply by $80
000203B2 3200                       		move.w	d0,d1
000203B4 D040                       		add.w	d0,d0
000203B6 D041                       		add.w	d1,d0		; multiply by 3
000203C2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000203C8 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000203CC 323C 000B                  		move.w	#@size-1,d1
000203D0 6000 0000                  		bra.w	LoadTiles
000203D4                            ; ===========================================================================
000203D4 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
000203DC                            ; ===========================================================================
000203DC                            
000203DC                            AniArt_Ending_Flower3:
000203DC                            
000203DC =00000010                  @size:		equ 16	; number of tiles per frame
000203DC                            
000203DC 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
000203E0 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
000203E2                            		
000203E2 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
000203E8 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
000203EC 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
000203F0 0240 0003                  		andi.w	#3,d0		; max 4 frames
000203F4 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000203F8 E148                       		lsl.w	#8,d0		; multiply by $100
000203FA D040                       		add.w	d0,d0		; multiply by 2
00020406 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0002040A 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0002040E 323C 000F                  		move.w	#@size-1,d1
00020412 6000 0000                  		bra.w	LoadTiles
00020416                            ; ===========================================================================
00020416 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0002041A                            ; ===========================================================================
0002041A                            
0002041A                            AniArt_Ending_Flower4:
0002041A                            
0002041A =00000010                  @size:		equ 16	; number of tiles per frame
0002041A                            
0002041A 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0002041E 6A00                       		bpl.s	@end		; branch if not 0
00020420                            		
00020420 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
00020426 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0002042A 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0002042E 0240 0003                  		andi.w	#3,d0
00020432 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
00020436 E148                       		lsl.w	#8,d0		; multiply by $100
00020438 D040                       		add.w	d0,d0		; multiply by 2
00020444 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
00020448 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0002044C 323C 000F                  		move.w	#@size-1,d1
00020450 6000 0000                  		bra.w	LoadTiles
00020454                            ; ===========================================================================
00020454                            
00020454                            @end:
00020454 4E75                       		rts	
00020456                            ; ===========================================================================
00020456                            
00020456                            AniArt_none:
00020456 4E75                       		rts	
00020458                            
00020458                            ; ---------------------------------------------------------------------------
00020458                            ; Subroutine to	transfer graphics to VRAM
00020458                            
00020458                            ; input:
00020458                            ;	a1 = source address
00020458                            ;	a6 = vdp_data_port ($C00000)
00020458                            ;	d1 = number of tiles to load (minus one)
00020458                            ; ---------------------------------------------------------------------------
00020458                            
00020458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020458                            
00020458                            
00020458                            LoadTiles:
00020458 2C99                       		move.l	(a1)+,(a6)
0002045A 2C99                       		move.l	(a1)+,(a6)
0002045C 2C99                       		move.l	(a1)+,(a6)
0002045E 2C99                       		move.l	(a1)+,(a6)
00020460 2C99                       		move.l	(a1)+,(a6)
00020462 2C99                       		move.l	(a1)+,(a6)
00020464 2C99                       		move.l	(a1)+,(a6)
00020466 2C99                       		move.l	(a1)+,(a6)
00020468 51C9 FFEE                  		dbf	d1,LoadTiles
0002046C 4E75                       		rts	
0002046E                            ; End of function LoadTiles
0002046E                            
0002046E                            ; ===========================================================================
0002046E                            ; ---------------------------------------------------------------------------
0002046E                            ; Animated pattern routine - more Marble Zone
0002046E                            ; ---------------------------------------------------------------------------
0002046E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
00020472 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
00020476 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0002047A 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0002047E 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
00020482 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
00020486 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0002048A 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0002048E                            ; ===========================================================================
0002048E                            
0002048E                            loc_1C3EE:
0002048E 2C91                       		move.l	(a1),(a6)
00020490 43E9 0010                  		lea	$10(a1),a1
00020494 51C9 FFF8                  		dbf	d1,loc_1C3EE
00020498 4E75                       		rts	
0002049A                            ; ===========================================================================
0002049A                            
0002049A                            loc_1C3FA:
0002049A 2029 0002                  		move.l	2(a1),d0
0002049E 1029 0001                  		move.b	1(a1),d0
000204A2 E098                       		ror.l	#8,d0
000204A4 2C80                       		move.l	d0,(a6)
000204A6 43E9 0010                  		lea	$10(a1),a1
000204AA 51C9 FFEE                  		dbf	d1,loc_1C3FA
000204AE 4E75                       		rts	
000204B0                            ; ===========================================================================
000204B0                            
000204B0                            loc_1C410:
000204B0 2CA9 0002                  		move.l	2(a1),(a6)
000204B4 43E9 0010                  		lea	$10(a1),a1
000204B8 51C9 FFF6                  		dbf	d1,loc_1C410
000204BC 4E75                       		rts	
000204BE                            ; ===========================================================================
000204BE                            
000204BE                            loc_1C41E:
000204BE 2029 0004                  		move.l	4(a1),d0
000204C2 1029 0003                  		move.b	3(a1),d0
000204C6 E098                       		ror.l	#8,d0
000204C8 2C80                       		move.l	d0,(a6)
000204CA 43E9 0010                  		lea	$10(a1),a1
000204CE 51C9 FFEE                  		dbf	d1,loc_1C41E
000204D2 4E75                       		rts	
000204D4                            ; ===========================================================================
000204D4                            
000204D4                            loc_1C434:
000204D4 2CA9 0004                  		move.l	4(a1),(a6)
000204D8 43E9 0010                  		lea	$10(a1),a1
000204DC 51C9 FFF6                  		dbf	d1,loc_1C434
000204E0 4E75                       		rts	
000204E2                            ; ===========================================================================
000204E2                            
000204E2                            loc_1C442:
000204E2 2029 0006                  		move.l	6(a1),d0
000204E6 1029 0005                  		move.b	5(a1),d0
000204EA E098                       		ror.l	#8,d0
000204EC 2C80                       		move.l	d0,(a6)
000204EE 43E9 0010                  		lea	$10(a1),a1
000204F2 51C9 FFEE                  		dbf	d1,loc_1C442
000204F6 4E75                       		rts	
000204F8                            ; ===========================================================================
000204F8                            
000204F8                            loc_1C458:
000204F8 2CA9 0006                  		move.l	6(a1),(a6)
000204FC 43E9 0010                  		lea	$10(a1),a1
00020500 51C9 FFF6                  		dbf	d1,loc_1C458
00020504 4E75                       		rts	
00020506                            ; ===========================================================================
00020506                            
00020506                            loc_1C466:
00020506 2029 0008                  		move.l	8(a1),d0
0002050A 1029 0007                  		move.b	7(a1),d0
0002050E E098                       		ror.l	#8,d0
00020510 2C80                       		move.l	d0,(a6)
00020512 43E9 0010                  		lea	$10(a1),a1
00020516 51C9 FFEE                  		dbf	d1,loc_1C466
0002051A 4E75                       		rts	
0002051C                            ; ===========================================================================
0002051C                            
0002051C                            loc_1C47C:
0002051C 2CA9 0008                  		move.l	8(a1),(a6)
00020520 43E9 0010                  		lea	$10(a1),a1
00020524 51C9 FFF6                  		dbf	d1,loc_1C47C
00020528 4E75                       		rts	
0002052A                            ; ===========================================================================
0002052A                            
0002052A                            loc_1C48A:
0002052A 2029 000A                  		move.l	$A(a1),d0
0002052E 1029 0009                  		move.b	9(a1),d0
00020532 E098                       		ror.l	#8,d0
00020534 2C80                       		move.l	d0,(a6)
00020536 43E9 0010                  		lea	$10(a1),a1
0002053A 51C9 FFEE                  		dbf	d1,loc_1C48A
0002053E 4E75                       		rts	
00020540                            ; ===========================================================================
00020540                            
00020540                            loc_1C4A0:
00020540 2CA9 000A                  		move.l	$A(a1),(a6)
00020544 43E9 0010                  		lea	$10(a1),a1
00020548 51C9 FFF6                  		dbf	d1,loc_1C4A0
0002054C 4E75                       		rts	
0002054E                            ; ===========================================================================
0002054E                            
0002054E                            loc_1C4AE:
0002054E 2029 000C                  		move.l	$C(a1),d0
00020552 1029 000B                  		move.b	$B(a1),d0
00020556 E098                       		ror.l	#8,d0
00020558 2C80                       		move.l	d0,(a6)
0002055A 43E9 0010                  		lea	$10(a1),a1
0002055E 51C9 FFEE                  		dbf	d1,loc_1C4AE
00020562 4E75                       		rts	
00020564                            ; ===========================================================================
00020564                            
00020564                            loc_1C4C4:
00020564 2CA9 000C                  		move.l	$C(a1),(a6)
00020568 43E9 0010                  		lea	$10(a1),a1
0002056C 51C9 FFF6                  		dbf	d1,loc_1C4C4
00020570 4E75                       		rts	
00020572                            ; ===========================================================================
00020572                            
00020572                            loc_1C4D2:
00020572 2029 000C                  		move.l	$C(a1),d0
00020576 E198                       		rol.l	#8,d0
00020578 1011                       		move.b	0(a1),d0
0002057A 2C80                       		move.l	d0,(a6)
0002057C 43E9 0010                  		lea	$10(a1),a1
00020580 51C9 FFF0                  		dbf	d1,loc_1C4D2
00020584 4E75                       		rts	
00020586                            ; ===========================================================================
00020586                            
00020586                            loc_1C4E8:
00020586 3CA9 000E                  		move.w	$E(a1),(a6)
0002058A 3C91                       		move.w	0(a1),(a6)
0002058C 43E9 0010                  		lea	$10(a1),a1
00020590 51C9 FFF4                  		dbf	d1,loc_1C4E8
00020594 4E75                       		rts	
00020596                            ; ===========================================================================
00020596                            
00020596                            loc_1C4FA:
00020596 2011                       		move.l	0(a1),d0
00020598 1029 000F                  		move.b	$F(a1),d0
0002059C E098                       		ror.l	#8,d0
0002059E 2C80                       		move.l	d0,(a6)
000205A0 43E9 0010                  		lea	$10(a1),a1
000205A4 51C9 FFF0                  		dbf	d1,loc_1C4FA
000205A8 4E75                       		rts	
000205AA                            
000205AA                            ; ---------------------------------------------------------------------------
000205AA                            ; Animated pattern routine - giant ring
000205AA                            ; ---------------------------------------------------------------------------
000205AA                            
000205AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000205AA                            
000205AA                            
000205AA                            AniArt_GiantRing:
000205AA                            
000205AA =0000000E                  @size:		equ 14
000205AA                            
000205AA 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
000205AE 6600                       		bne.s	@loadTiles		; If so, get to work
000205B0 4E75                       		rts	
000205B2                            ; ===========================================================================
000205B2                            ; loc_1C518:
000205B2                            @loadTiles:
000205B2 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
000205B8 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
000205BE 7000                       		moveq	#0,d0
000205C0 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
000205C4 43F1 0000                  		lea	(a1,d0.w),a1
000205C8                            		; Turn VRAM address into VDP command
000205C8 0640 8000                  		addi.w	#$8000,d0
000205CC E588                       		lsl.l	#2,d0
000205CE E448                       		lsr.w	#2,d0
000205D0 0040 4000                  		ori.w	#$4000,d0
000205D4 4840                       		swap	d0
000205D6                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
000205D6 2D40 0004                  		move.l	d0,4(a6)
000205DA                            
000205DA 323C 000D                  		move.w	#@size-1,d1
000205DE 6000 FE78                  		bra.w	LoadTiles
000205E2                            
000205E2                            ; End of function AniArt_GiantRing
000205E2                            ; End of function AniArt_GiantRing
000205E2                            
000205E2                            		include	"_incObj\21 HUD.asm"
000205E2                            ; ---------------------------------------------------------------------------
000205E2                            ; Object 21 - SCORE, TIME, RINGS
000205E2                            ; ---------------------------------------------------------------------------
000205E2                            
000205E2                            HUD:
000205E2 7000                       		moveq	#0,d0
000205E4 1028 0024                  		move.b	obRoutine(a0),d0
000205E8 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
000205EC 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
000205F0                            ; ===========================================================================
000205F0 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
000205F2 0000                       		dc.w HUD_Flash-HUD_Index
000205F4                            ; ===========================================================================
000205F4                            
000205F4                            HUD_Main:	; Routine 0
000205F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000205F8 317C 0090 0008             		move.w	#$90,obX(a0)
000205FE 317C 0108 000A             		move.w	#$108,obScreenY(a0)
00020604 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0002060C 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
00020612 117C 0000 0001             		move.b	#0,obRender(a0)
00020618 317C 0000 0018             		move.w	#0,obPriority(a0)
0002061E                            
0002061E                            HUD_Flash:	; Routine 2
0002061E 7000                       		moveq	#0,d0
00020620 0838 0003 FE05             		btst	#3,(v_framebyte).w
00020626 6600                       		bne.s	@display
00020628 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0002062C 6600                       		bne.s	@norings	; if so, branch
0002062E 5240                       		addq.w	#1,d0		; make ring counter flash red
00020630                            ; ===========================================================================
00020630                            
00020630                            @norings:
00020630 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
00020636 6600                       		bne.s	@display	; if not, branch
00020638 5440                       		addq.w	#2,d0		; make time counter flash red
0002063A                            
0002063A                            	@display:
0002063A 1140 001A                  		move.b	d0,obFrame(a0)
0002063E 4EF9 0000 F7A8             		jmp	DisplaySprite
0002063E 4EF9 0000 F7A8             		jmp	DisplaySprite
00020644                            Map_HUD:	include	"_maps\HUD.asm"
00020644                            ; ---------------------------------------------------------------------------
00020644                            ; Sprite mappings - SCORE, TIME, RINGS
00020644                            ; ---------------------------------------------------------------------------
00020644                            Map_HUD_internal:
00020644 0000                       		dc.w @allyellow-Map_HUD_internal
00020646 0000                       		dc.w @ringred-Map_HUD_internal
00020648 0000                       		dc.w @timered-Map_HUD_internal
0002064A 0000                       		dc.w @allred-Map_HUD_internal
0002064C 0A                         @allyellow:	dc.b $A
0002064D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020652 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020657 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002065C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
00020661 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020666 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0002066B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
00020670 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020675 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0002067A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002067F 00                         		dc.b 0
00020680 0A                         @ringred:	dc.b $A
00020681 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020686 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0002068B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00020690 900D 8010 00               		dc.b $90, $D, $80, $10,	0
00020695 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0002069A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0002069F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
000206A4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000206A9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000206AE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000206B3 00                         		dc.b 0
000206B4 0A                         @timered:	dc.b $A
000206B5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000206BA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000206BF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000206C4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000206C9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000206CE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
000206D3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
000206D8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000206DD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000206E2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000206E7 00                         		dc.b 0
000206E8 0A                         @allred:	dc.b $A
000206E9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000206EE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000206F3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000206F8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000206FD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020702 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00020707 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0002070C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020711 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020716 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002071C 00                         		even
0002071C 00                         		even
0002071C                            
0002071C                            ; ---------------------------------------------------------------------------
0002071C                            ; Add points subroutine
0002071C                            ; ---------------------------------------------------------------------------
0002071C                            
0002071C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002071C                            
0002071C                            
0002071C                            AddPoints:
0002071C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
00020722                            
00020722                            
00020722 47F8 FE26                  			lea     (v_score).w,a3
00020726 D193                       			add.l   d0,(a3)
00020728 223C 000F 423F             			move.l  #999999,d1
0002072E B293                       			cmp.l   (a3),d1 ; is score below 999999?
00020730 6200                       			bhi.s   @belowmax ; if yes, branch
00020732 2681                       			move.l  d1,(a3) ; reset score to 999999
00020734                            		@belowmax:
00020734 2013                       			move.l  (a3),d0
00020736 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0002073A 6500                       			blo.s   @noextralife ; if not, branch
0002073C                            
0002073C 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
00020744 4A38 FFF8                  			tst.b   (v_megadrive).w
00020748 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0002074A 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0002074E 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0002075C                            
0002075C                            @locret_1C6B6:
0002075C                            @noextralife:
0002075C 4E75                       		rts	
0002075E                            ; End of function AddPoints
0002075E                            
0002075E                            		include	"_inc\HUD_Update.asm"
0002075E                            ; ---------------------------------------------------------------------------
0002075E                            ; Subroutine to	update the HUD
0002075E                            ; ---------------------------------------------------------------------------
0002075E                            
0002075E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002075E                            
0002075E                            hudVRAM:	macro loc
0002075E                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0002075E                            		endm
0002075E                            
0002075E                            
0002075E                            HUD_Update:
0002075E 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
00020762 6600 0000                  		bne.w	HudDebug	; if yes, branch
00020766 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0002076A 6700                       		beq.s	@chkrings	; if not, branch
0002076C                            
0002076C 4238 FE1F                  		clr.b	(f_scorecount).w
00020770 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
00020776 2238 FE26                  		move.l	(v_score).w,d1	; load score
0002077A 6100 0000                  		bsr.w	Hud_Score
0002077E                            
0002077E                            	@chkrings:
0002077E 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
00020782 6700                       		beq.s	@chktime	; if not, branch
00020784 6A00                       		bpl.s	@notzero
00020786 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0002078A                            
0002078A                            	@notzero:
0002078A 4238 FE1D                  		clr.b	(f_ringcount).w
0002078E 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
00020794 7200                       		moveq	#0,d1
00020796 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0002079A 6100 0000                  		bsr.w	Hud_Rings
0002079E                            
0002079E                            	@chktime:
0002079E 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
000207A2 6700                       		beq.s	@chklives	; if not, branch
000207A4 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000207A8 6600                       		bne.s	@chklives	; if yes, branch
000207AA 43F8 FE22                  		lea	(v_time).w,a1
000207AE 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
000207B4 6700                       		beq.s	TimeOver	; if yes, branch
000207B6                            
000207B6 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
000207B8 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
000207BC 6500                       		bcs.s	@chklives
000207BE 12BC 0000                  		move.b	#0,(a1)
000207C2 5221                       		addq.b	#1,-(a1)	; increment second counter
000207C4 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
000207C8 6500                       		bcs.s	@updatetime
000207CA 12BC 0000                  		move.b	#0,(a1)
000207CE 5221                       		addq.b	#1,-(a1)	; increment minute counter
000207D0 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
000207D4 6500                       		bcs.s	@updatetime
000207D6 12BC 0009                  		move.b	#9,(a1)		; keep as 9
000207DA                            
000207DA                            	@updatetime:
000207DA 203C 5E40 0003             		hudVRAM	$DE40
000207E0 7200                       		moveq	#0,d1
000207E2 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
000207E6 6100 0000                  		bsr.w	Hud_Mins
000207EA 203C 5EC0 0003             		hudVRAM	$DEC0
000207F0 7200                       		moveq	#0,d1
000207F2 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
000207F6 6100 0000                  		bsr.w	Hud_Secs
000207FA                            
000207FA                            	@chklives:
000207FA 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
000207FE 6700                       		beq.s	@chkbonus	; if not, branch
00020800 4238 FE1C                  		clr.b	(f_lifecount).w
00020804 6100 0000                  		bsr.w	Hud_Lives
00020808                            
00020808                            	@chkbonus:
00020808 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0002080C 6700                       		beq.s	@finish		; if not, branch
0002080E 4238 F7D6                  		clr.b	(f_endactbonus).w
0002081C 7200                       		moveq	#0,d1
0002081E 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
00020822 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020826 7200                       		moveq	#0,d1
00020828 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0002082C 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020830                            
00020830                            	@finish:
00020830 4E75                       		rts	
00020832                            ; ===========================================================================
00020832                            
00020832                            TimeOver:
00020832 4238 FE1E                  		clr.b	(f_timecount).w
00020836 41F8 D000                  		lea	(v_player).w,a0
0002083A 2448                       		movea.l	a0,a2
0002083C 6100 E824                  		bsr.w	KillSonic
00020840 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
00020846 4E75                       		rts	
00020848                            ; ===========================================================================
00020848                            
00020848                            HudDebug:
00020848 6100 0000                  		bsr.w	HudDb_XY
0002084C 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
00020850 6700                       		beq.s	@objcounter	; if not, branch
00020852 6A00                       		bpl.s	@notzero
00020854 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
00020858                            
00020858                            	@notzero:
00020858 4238 FE1D                  		clr.b	(f_ringcount).w
0002085C 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
00020862 7200                       		moveq	#0,d1
00020864 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
00020868 6100 0000                  		bsr.w	Hud_Rings
0002086C                            
0002086C                            	@objcounter:
0002086C 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
00020872 7200                       		moveq	#0,d1
00020874 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
00020878 6100 0000                  		bsr.w	Hud_Secs
0002087C 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
00020880 6700                       		beq.s	@chkbonus	; if not, branch
00020882 4238 FE1C                  		clr.b	(f_lifecount).w
00020886 6100 0000                  		bsr.w	Hud_Lives
0002088A                            
0002088A                            	@chkbonus:
0002088A 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0002088E 6700                       		beq.s	@finish		; if not, branch
00020890 4238 F7D6                  		clr.b	(f_endactbonus).w
0002089E 7200                       		moveq	#0,d1
000208A0 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
000208A4 6100 0000                  		bsr.w	Hud_TimeRingBonus
000208A8 7200                       		moveq	#0,d1
000208AA 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
000208AE 6100 0000                  		bsr.w	Hud_TimeRingBonus
000208B2                            
000208B2                            	@finish:
000208B2 4E75                       		rts	
000208B4                            ; End of function HUD_Update
000208B4                            
000208B4                            ; ---------------------------------------------------------------------------
000208B4                            ; Subroutine to	load "0" on the	HUD
000208B4                            ; ---------------------------------------------------------------------------
000208B4                            
000208B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208B4                            
000208B4                            
000208B4                            Hud_LoadZero:
000208BE 45FA 0000                  		lea	Hud_TilesZero(pc),a2
000208C2 343C 0002                  		move.w	#2,d2
000208C6 6000                       		bra.s	loc_1C83E
000208C8                            ; End of function Hud_LoadZero
000208C8                            
000208C8                            ; ---------------------------------------------------------------------------
000208C8                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
000208C8                            ; ---------------------------------------------------------------------------
000208C8                            
000208C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208C8                            
000208C8                            
000208C8                            Hud_Base:
000208C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000208CE 6100 0000                  		bsr.w	Hud_Lives
000208DC 45FA 0000                  		lea	Hud_TilesBase(pc),a2
000208E0 343C 000E                  		move.w	#$E,d2
000208E4                            
000208E4                            loc_1C83E:
000208E4 43FA 0000                  		lea	Art_Hud(pc),a1
000208E8                            
000208E8                            loc_1C842:
000208E8 323C 000F                  		move.w	#$F,d1
000208EC 101A                       		move.b	(a2)+,d0
000208EE 6B00                       		bmi.s	loc_1C85E
000208F0 4880                       		ext.w	d0
000208F2 EB48                       		lsl.w	#5,d0
000208F4 47F1 0000                  		lea	(a1,d0.w),a3
000208F8                            
000208F8                            loc_1C852:
000208F8 2C9B                       		move.l	(a3)+,(a6)
000208FA 51C9 FFFC                  		dbf	d1,loc_1C852
000208FE                            
000208FE                            loc_1C858:
000208FE 51CA FFE8                  		dbf	d2,loc_1C842
00020902                            
00020902 4E75                       		rts	
00020904                            ; ===========================================================================
00020904                            
00020904                            loc_1C85E:
00020904 2CBC 0000 0000             		move.l	#0,(a6)
0002090A 51C9 FFF8                  		dbf	d1,loc_1C85E
0002090E                            
0002090E 60EE                       		bra.s	loc_1C858
00020910                            ; End of function Hud_Base
00020910                            
00020910                            ; ===========================================================================
00020910 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0002091C FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
00020920                            ; ---------------------------------------------------------------------------
00020920                            ; Subroutine to	load debug mode	numbers	patterns
00020920                            ; ---------------------------------------------------------------------------
00020920                            
00020920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020920                            
00020920                            
00020920                            HudDb_XY:
0002092A 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0002092E 4841                       		swap	d1
00020930 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
00020934 6100                       		bsr.s	HudDb_XY2
00020936 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0002093A 4841                       		swap	d1
0002093C 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
00020940                            ; End of function HudDb_XY
00020940                            
00020940                            
00020940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020940                            
00020940                            
00020940                            HudDb_XY2:
00020940 7C07                       		moveq	#7,d6
00020942 43F9 0000 059E             		lea	(Art_Text).l,a1
00020948                            
00020948                            HudDb_XYLoop:
00020948 E959                       		rol.w	#4,d1
0002094A 3401                       		move.w	d1,d2
0002094C 0242 000F                  		andi.w	#$F,d2
00020950 0C42 000A                  		cmpi.w	#$A,d2
00020954 6500                       		bcs.s	loc_1C8B2
00020956 5E42                       		addq.w	#7,d2
00020958                            
00020958                            loc_1C8B2:
00020958 EB4A                       		lsl.w	#5,d2
0002095A 47F1 2000                  		lea	(a1,d2.w),a3
0002095E 2C9B                       		move.l	(a3)+,(a6)
00020960 2C9B                       		move.l	(a3)+,(a6)
00020962 2C9B                       		move.l	(a3)+,(a6)
00020964 2C9B                       		move.l	(a3)+,(a6)
00020966 2C9B                       		move.l	(a3)+,(a6)
00020968 2C9B                       		move.l	(a3)+,(a6)
0002096A 2C9B                       		move.l	(a3)+,(a6)
0002096C 2C9B                       		move.l	(a3)+,(a6)
0002096E 4841                       		swap	d1
00020970 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00020974                            
00020974 4E75                       		rts	
00020976                            ; End of function HudDb_XY2
00020976                            
00020976                            ; ---------------------------------------------------------------------------
00020976                            ; Subroutine to	load rings numbers patterns
00020976                            ; ---------------------------------------------------------------------------
00020976                            
00020976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020976                            
00020976                            
00020976                            Hud_Rings:
00020976 45F9 0000 0000             		lea	(Hud_100).l,a2
0002097C 7C02                       		moveq	#2,d6
0002097E 6000                       		bra.s	Hud_LoadArt
00020980                            ; End of function Hud_Rings
00020980                            
00020980                            ; ---------------------------------------------------------------------------
00020980                            ; Subroutine to	load score numbers patterns
00020980                            ; ---------------------------------------------------------------------------
00020980                            
00020980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020980                            
00020980                            
00020980                            Hud_Score:
00020980 45F9 0000 0000             		lea	(Hud_100000).l,a2
00020986 7C05                       		moveq	#5,d6
00020988                            
00020988                            Hud_LoadArt:
00020988 7800                       		moveq	#0,d4
0002098A 43FA 0000                  		lea	Art_Hud(pc),a1
0002098E                            
0002098E                            Hud_ScoreLoop:
0002098E 7400                       		moveq	#0,d2
00020990 261A                       		move.l	(a2)+,d3
00020992                            
00020992                            loc_1C8EC:
00020992 9283                       		sub.l	d3,d1
00020994 6500                       		bcs.s	loc_1C8F4
00020996 5242                       		addq.w	#1,d2
00020998 60F8                       		bra.s	loc_1C8EC
0002099A                            ; ===========================================================================
0002099A                            
0002099A                            loc_1C8F4:
0002099A D283                       		add.l	d3,d1
0002099C 4A42                       		tst.w	d2
0002099E 6700                       		beq.s	loc_1C8FE
000209A0 383C 0001                  		move.w	#1,d4
000209A4                            
000209A4                            loc_1C8FE:
000209A4 4A44                       		tst.w	d4
000209A6 6700                       		beq.s	loc_1C92C
000209A8 ED4A                       		lsl.w	#6,d2
000209AA 2D40 0004                  		move.l	d0,4(a6)
000209AE 47F1 2000                  		lea	(a1,d2.w),a3
000209B2 2C9B                       		move.l	(a3)+,(a6)
000209B4 2C9B                       		move.l	(a3)+,(a6)
000209B6 2C9B                       		move.l	(a3)+,(a6)
000209B8 2C9B                       		move.l	(a3)+,(a6)
000209BA 2C9B                       		move.l	(a3)+,(a6)
000209BC 2C9B                       		move.l	(a3)+,(a6)
000209BE 2C9B                       		move.l	(a3)+,(a6)
000209C0 2C9B                       		move.l	(a3)+,(a6)
000209C2 2C9B                       		move.l	(a3)+,(a6)
000209C4 2C9B                       		move.l	(a3)+,(a6)
000209C6 2C9B                       		move.l	(a3)+,(a6)
000209C8 2C9B                       		move.l	(a3)+,(a6)
000209CA 2C9B                       		move.l	(a3)+,(a6)
000209CC 2C9B                       		move.l	(a3)+,(a6)
000209CE 2C9B                       		move.l	(a3)+,(a6)
000209D0 2C9B                       		move.l	(a3)+,(a6)
000209D2                            
000209D2                            loc_1C92C:
000209D2 0680 0040 0000             		addi.l	#$400000,d0
000209D8 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
000209DC                            
000209DC 4E75                       		rts	
000209DE                            
000209DE                            ; End of function Hud_Score
000209DE                            ; End of function Hud_Score
000209DE                            
000209DE                            ; ---------------------------------------------------------------------------
000209DE                            ; Subroutine to	load countdown numbers on the continue screen
000209DE                            ; ---------------------------------------------------------------------------
000209DE                            
000209DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209DE                            
000209DE                            
000209DE                            ContScrCounter:
000209E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000209EE 45F9 0000 0000             		lea	(Hud_10).l,a2
000209F4 7C01                       		moveq	#1,d6
000209F6 7800                       		moveq	#0,d4
000209F8 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
000209FC                            
000209FC                            ContScr_Loop:
000209FC 7400                       		moveq	#0,d2
000209FE 261A                       		move.l	(a2)+,d3
00020A00                            
00020A00                            loc_1C95A:
00020A00 9283                       		sub.l	d3,d1
00020A02 6500                       		blo.s	loc_1C962
00020A04 5242                       		addq.w	#1,d2
00020A06 60F8                       		bra.s	loc_1C95A
00020A08                            ; ===========================================================================
00020A08                            
00020A08                            loc_1C962:
00020A08 D283                       		add.l	d3,d1
00020A0A ED4A                       		lsl.w	#6,d2
00020A0C 47F1 2000                  		lea	(a1,d2.w),a3
00020A10 2C9B                       		move.l	(a3)+,(a6)
00020A12 2C9B                       		move.l	(a3)+,(a6)
00020A14 2C9B                       		move.l	(a3)+,(a6)
00020A16 2C9B                       		move.l	(a3)+,(a6)
00020A18 2C9B                       		move.l	(a3)+,(a6)
00020A1A 2C9B                       		move.l	(a3)+,(a6)
00020A1C 2C9B                       		move.l	(a3)+,(a6)
00020A1E 2C9B                       		move.l	(a3)+,(a6)
00020A20 2C9B                       		move.l	(a3)+,(a6)
00020A22 2C9B                       		move.l	(a3)+,(a6)
00020A24 2C9B                       		move.l	(a3)+,(a6)
00020A26 2C9B                       		move.l	(a3)+,(a6)
00020A28 2C9B                       		move.l	(a3)+,(a6)
00020A2A 2C9B                       		move.l	(a3)+,(a6)
00020A2C 2C9B                       		move.l	(a3)+,(a6)
00020A2E 2C9B                       		move.l	(a3)+,(a6)
00020A30 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00020A34                            
00020A34 4E75                       		rts	
00020A36                            ; End of function ContScrCounter
00020A36                            
00020A36                            ; ===========================================================================
00020A36                            
00020A36                            		include	"_inc\HUD (part 2).asm"
00020A36                            ; ---------------------------------------------------------------------------
00020A36                            ; HUD counter sizes
00020A36                            ; ---------------------------------------------------------------------------
00020A36 0001 86A0                  Hud_100000:	dc.l 100000
00020A3A 0000 2710                  Hud_10000:	dc.l 10000
00020A3E 0000 03E8                  Hud_1000:	dc.l 1000
00020A42 0000 0064                  Hud_100:	dc.l 100
00020A46 0000 000A                  Hud_10:		dc.l 10
00020A4A 0000 0001                  Hud_1:		dc.l 1
00020A4E                            
00020A4E                            ; ---------------------------------------------------------------------------
00020A4E                            ; Subroutine to	load time numbers patterns
00020A4E                            ; ---------------------------------------------------------------------------
00020A4E                            
00020A4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A4E                            
00020A4E                            
00020A4E                            Hud_Mins:
00020A4E 45F9 0002 0A4A             		lea	(Hud_1).l,a2
00020A54 7C00                       		moveq	#0,d6
00020A56 6000                       		bra.s	loc_1C9BA
00020A58                            ; End of function Hud_Mins
00020A58                            
00020A58                            
00020A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A58                            
00020A58                            
00020A58                            Hud_Secs:
00020A58 45F9 0002 0A46             		lea	(Hud_10).l,a2
00020A5E 7C01                       		moveq	#1,d6
00020A60                            
00020A60                            loc_1C9BA:
00020A60 7800                       		moveq	#0,d4
00020A62 43FA 0000                  		lea	Art_Hud(pc),a1
00020A66                            
00020A66                            Hud_TimeLoop:
00020A66 7400                       		moveq	#0,d2
00020A68 261A                       		move.l	(a2)+,d3
00020A6A                            
00020A6A                            loc_1C9C4:
00020A6A 9283                       		sub.l	d3,d1
00020A6C 6500                       		bcs.s	loc_1C9CC
00020A6E 5242                       		addq.w	#1,d2
00020A70 60F8                       		bra.s	loc_1C9C4
00020A72                            ; ===========================================================================
00020A72                            
00020A72                            loc_1C9CC:
00020A72 D283                       		add.l	d3,d1
00020A74 4A42                       		tst.w	d2
00020A76 6700                       		beq.s	loc_1C9D6
00020A78 383C 0001                  		move.w	#1,d4
00020A7C                            
00020A7C                            loc_1C9D6:
00020A7C ED4A                       		lsl.w	#6,d2
00020A7E 2D40 0004                  		move.l	d0,4(a6)
00020A82 47F1 2000                  		lea	(a1,d2.w),a3
00020A86 2C9B                       		move.l	(a3)+,(a6)
00020A88 2C9B                       		move.l	(a3)+,(a6)
00020A8A 2C9B                       		move.l	(a3)+,(a6)
00020A8C 2C9B                       		move.l	(a3)+,(a6)
00020A8E 2C9B                       		move.l	(a3)+,(a6)
00020A90 2C9B                       		move.l	(a3)+,(a6)
00020A92 2C9B                       		move.l	(a3)+,(a6)
00020A94 2C9B                       		move.l	(a3)+,(a6)
00020A96 2C9B                       		move.l	(a3)+,(a6)
00020A98 2C9B                       		move.l	(a3)+,(a6)
00020A9A 2C9B                       		move.l	(a3)+,(a6)
00020A9C 2C9B                       		move.l	(a3)+,(a6)
00020A9E 2C9B                       		move.l	(a3)+,(a6)
00020AA0 2C9B                       		move.l	(a3)+,(a6)
00020AA2 2C9B                       		move.l	(a3)+,(a6)
00020AA4 2C9B                       		move.l	(a3)+,(a6)
00020AA6 0680 0040 0000             		addi.l	#$400000,d0
00020AAC 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00020AB0                            
00020AB0 4E75                       		rts	
00020AB2                            ; End of function Hud_Secs
00020AB2                            
00020AB2                            ; ---------------------------------------------------------------------------
00020AB2                            ; Subroutine to	load time/ring bonus numbers patterns
00020AB2                            ; ---------------------------------------------------------------------------
00020AB2                            
00020AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AB2                            
00020AB2                            
00020AB2                            Hud_TimeRingBonus:
00020AB2 45F9 0002 0A3E             		lea	(Hud_1000).l,a2
00020AB8 7C03                       		moveq	#3,d6
00020ABA 7800                       		moveq	#0,d4
00020ABC 43FA 0000                  		lea	Art_Hud(pc),a1
00020AC0                            
00020AC0                            Hud_BonusLoop:
00020AC0 7400                       		moveq	#0,d2
00020AC2 261A                       		move.l	(a2)+,d3
00020AC4                            
00020AC4                            loc_1CA1E:
00020AC4 9283                       		sub.l	d3,d1
00020AC6 6500                       		bcs.s	loc_1CA26
00020AC8 5242                       		addq.w	#1,d2
00020ACA 60F8                       		bra.s	loc_1CA1E
00020ACC                            ; ===========================================================================
00020ACC                            
00020ACC                            loc_1CA26:
00020ACC D283                       		add.l	d3,d1
00020ACE 4A42                       		tst.w	d2
00020AD0 6700                       		beq.s	loc_1CA30
00020AD2 383C 0001                  		move.w	#1,d4
00020AD6                            
00020AD6                            loc_1CA30:
00020AD6 4A44                       		tst.w	d4
00020AD8 6700                       		beq.s	Hud_ClrBonus
00020ADA ED4A                       		lsl.w	#6,d2
00020ADC 47F1 2000                  		lea	(a1,d2.w),a3
00020AE0 2C9B                       		move.l	(a3)+,(a6)
00020AE2 2C9B                       		move.l	(a3)+,(a6)
00020AE4 2C9B                       		move.l	(a3)+,(a6)
00020AE6 2C9B                       		move.l	(a3)+,(a6)
00020AE8 2C9B                       		move.l	(a3)+,(a6)
00020AEA 2C9B                       		move.l	(a3)+,(a6)
00020AEC 2C9B                       		move.l	(a3)+,(a6)
00020AEE 2C9B                       		move.l	(a3)+,(a6)
00020AF0 2C9B                       		move.l	(a3)+,(a6)
00020AF2 2C9B                       		move.l	(a3)+,(a6)
00020AF4 2C9B                       		move.l	(a3)+,(a6)
00020AF6 2C9B                       		move.l	(a3)+,(a6)
00020AF8 2C9B                       		move.l	(a3)+,(a6)
00020AFA 2C9B                       		move.l	(a3)+,(a6)
00020AFC 2C9B                       		move.l	(a3)+,(a6)
00020AFE 2C9B                       		move.l	(a3)+,(a6)
00020B00                            
00020B00                            loc_1CA5A:
00020B00 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00020B04                            
00020B04 4E75                       		rts	
00020B06                            ; ===========================================================================
00020B06                            
00020B06                            Hud_ClrBonus:
00020B06 7A0F                       		moveq	#$F,d5
00020B08                            
00020B08                            Hud_ClrBonusLoop:
00020B08 2CBC 0000 0000             		move.l	#0,(a6)
00020B0E 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00020B12                            
00020B12 60EC                       		bra.s	loc_1CA5A
00020B14                            ; End of function Hud_TimeRingBonus
00020B14                            
00020B14                            ; ---------------------------------------------------------------------------
00020B14                            ; Subroutine to	load uncompressed lives	counter	patterns
00020B14                            ; ---------------------------------------------------------------------------
00020B14                            
00020B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B14                            
00020B14                            
00020B14                            Hud_Lives:
00020B14 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
00020B1A 7200                       		moveq	#0,d1
00020B1C 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
00020B20 45F9 0002 0A46             		lea	(Hud_10).l,a2
00020B26 7C01                       		moveq	#1,d6
00020B28 7800                       		moveq	#0,d4
00020B2A 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020B2E                            		
00020B2E                            
00020B2E                            Hud_LivesLoop:
00020B2E 2D40 0004                  		move.l	d0,4(a6)
00020B32 7400                       		moveq	#0,d2
00020B34 261A                       		move.l	(a2)+,d3
00020B36                            
00020B36                            loc_1CA90:
00020B36 9283                       		sub.l	d3,d1
00020B38 6500                       		bcs.s	loc_1CA98
00020B3A 5242                       		addq.w	#1,d2
00020B3C 60F8                       		bra.s	loc_1CA90
00020B3E                            ; ===========================================================================
00020B3E                            
00020B3E                            loc_1CA98:
00020B3E D283                       		add.l	d3,d1
00020B40 4A42                       		tst.w	d2
00020B42 6700                       		beq.s	loc_1CAA2
00020B44 383C 0001                  		move.w	#1,d4
00020B48                            
00020B48                            loc_1CAA2:
00020B48 4A44                       		tst.w	d4
00020B4A 6700                       		beq.s	Hud_ClrLives
00020B4C                            
00020B4C                            loc_1CAA6:
00020B4C EB4A                       		lsl.w	#5,d2
00020B4E 47F1 2000                  		lea	(a1,d2.w),a3
00020B52 2C9B                       		move.l	(a3)+,(a6)
00020B54 2C9B                       		move.l	(a3)+,(a6)
00020B56 2C9B                       		move.l	(a3)+,(a6)
00020B58 2C9B                       		move.l	(a3)+,(a6)
00020B5A 2C9B                       		move.l	(a3)+,(a6)
00020B5C 2C9B                       		move.l	(a3)+,(a6)
00020B5E 2C9B                       		move.l	(a3)+,(a6)
00020B60 2C9B                       		move.l	(a3)+,(a6)
00020B62                            
00020B62                            loc_1CABC:
00020B62 0680 0040 0000             		addi.l	#$400000,d0
00020B68 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020B6C                            
00020B6C 4E75                       		rts	
00020B6E                            ; ===========================================================================
00020B6E                            
00020B6E                            Hud_ClrLives:
00020B6E 4A46                       		tst.w	d6
00020B70 67DA                       		beq.s	loc_1CAA6
00020B72 7A07                       		moveq	#7,d5
00020B74                            
00020B74                            Hud_ClrLivesLoop:
00020B74 2CBC 0000 0000             		move.l	#0,(a6)
00020B7A 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020B7E 60E2                       		bra.s	loc_1CABC
00020B80                            ; End of function Hud_Lives
00020B80                            ; End of function Hud_Lives
00020B80                            
00020B80                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020E80                            		even
00020E80                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020FC0                            		even
00020FC0                            
00020FC0                            		include	"_incObj\DebugMode.asm"
00020FC0                            ; ---------------------------------------------------------------------------
00020FC0                            ; When debug mode is currently in use
00020FC0                            ; ---------------------------------------------------------------------------
00020FC0                            
00020FC0                            DebugMode:
00020FC0 7000                       		moveq	#0,d0
00020FC2 1038 FE08                  		move.b	(v_debuguse).w,d0
00020FC6 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020FCA 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020FCE                            ; ===========================================================================
00020FCE 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020FD0 0000                       		dc.w Debug_Action-Debug_Index
00020FD2                            ; ===========================================================================
00020FD2                            
00020FD2                            Debug_Main:	; Routine 0
00020FD2 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020FD6 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020FDC 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020FE2 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020FE8 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020FEE 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020FF4 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020FFA 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00021000 117C 0000 001A             		move.b	#0,obFrame(a0)
00021006 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0002100C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00021012 6600                       		bne.s	@islevel	; if not, branch
00021014                            
00021014 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
0002101A 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
00021020 7006                       		moveq	#6,d0		; use 6th debug	item list
00021022 6000                       		bra.s	@selectlist
00021024                            ; ===========================================================================
00021024                            
00021024                            @islevel:
00021024 7000                       		moveq	#0,d0
00021026 1038 FE10                  		move.b	(v_zone).w,d0
0002102A                            
0002102A                            @selectlist:
0002102A 45F9 0000 0000             		lea	(DebugList).l,a2
00021030 D040                       		add.w	d0,d0
00021032 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021036 3C1A                       		move.w	(a2)+,d6
00021038 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
0002103C 6200                       		bhi.s	@noreset	; if not, branch
0002103E 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00021044                            
00021044                            	@noreset:
00021044 6100 0000                  		bsr.w	Debug_ShowItem
00021048 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002104E 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00021054                            
00021054                            Debug_Action:	; Routine 2
00021054 7006                       		moveq	#6,d0
00021056 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
0002105C 6700                       		beq.s	@isntlevel
0002105E                            
0002105E 7000                       		moveq	#0,d0
00021060 1038 FE10                  		move.b	(v_zone).w,d0
00021064                            
00021064                            	@isntlevel:
00021064 45F9 0000 0000             		lea	(DebugList).l,a2
0002106A D040                       		add.w	d0,d0
0002106C D4F2 0000                  		adda.w	(a2,d0.w),a2
00021070 3C1A                       		move.w	(a2)+,d6
00021072 6100 0000                  		bsr.w	Debug_Control
00021076 4EF9 0000 F7A8             		jmp	(DisplaySprite).l
0002107C                            
0002107C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002107C                            
0002107C                            
0002107C                            Debug_Control:
0002107C 7800                       		moveq	#0,d4
0002107E 323C 0001                  		move.w	#1,d1
00021082 1838 F605                  		move.b	(v_jpadpress1).w,d4
00021086 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
0002108A 6600                       		bne.s	@dirpressed	; if yes, branch
0002108C                            
0002108C 1038 F604                  		move.b	(v_jpadhold1).w,d0
00021090 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00021094 6600                       		bne.s	@dirheld	; if yes, branch
00021096                            
00021096 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002109C 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000210A2 6000 0000                  		bra.w	Debug_ChgItem
000210A6                            ; ===========================================================================
000210A6                            
000210A6                            @dirheld:
000210A6 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000210AA 6600                       		bne.s	loc_1D01C
000210AC 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000210B2 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000210B6 6600                       		bne.s	@dirpressed
000210B8 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000210BE                            
000210BE                            @dirpressed:
000210BE 1838 F604                  		move.b	(v_jpadhold1).w,d4
000210C2                            
000210C2                            loc_1D01C:
000210C2 7200                       		moveq	#0,d1
000210C4 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000210C8 5241                       		addq.w	#1,d1
000210CA 4841                       		swap	d1
000210CC E881                       		asr.l	#4,d1
000210CE 2428 000C                  		move.l	obY(a0),d2
000210D2 2628 0008                  		move.l	obX(a0),d3
000210D6 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000210DA 6700                       		beq.s	loc_1D03C	; if not, branch
000210DC 9481                       		sub.l	d1,d2
000210DE 6400                       		bcc.s	loc_1D03C
000210E0 7400                       		moveq	#0,d2
000210E2                            
000210E2                            loc_1D03C:
000210E2 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000210E6 6700                       		beq.s	loc_1D052	; if not, branch
000210E8 D481                       		add.l	d1,d2
000210EA 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000210F0 6500                       		bcs.s	loc_1D052
000210F2 243C 07FF 0000             		move.l	#$7FF0000,d2
000210F8                            
000210F8                            loc_1D052:
000210F8 0804 0002                  		btst	#bitL,d4
000210FC 6700                       		beq.s	loc_1D05E
000210FE 9681                       		sub.l	d1,d3
00021100 6400                       		bcc.s	loc_1D05E
00021102 7600                       		moveq	#0,d3
00021104                            
00021104                            loc_1D05E:
00021104 0804 0003                  		btst	#bitR,d4
00021108 6700                       		beq.s	loc_1D066
0002110A D681                       		add.l	d1,d3
0002110C                            
0002110C                            loc_1D066:
0002110C 2142 000C                  		move.l	d2,obY(a0)
00021110 2143 0008                  		move.l	d3,obX(a0)
00021114                            
00021114                            Debug_ChgItem:
00021114 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
0002111A 6700                       		beq.s	@createitem	; if not, branch
0002111C 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00021122 6700                       		beq.s	@nextitem	; if not, branch
00021124 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00021128 6400                       		bcc.s	@display
0002112A DD38 FE06                  		add.b	d6,(v_debugitem).w
0002112E 6000                       		bra.s	@display
00021130                            ; ===========================================================================
00021130                            
00021130                            @nextitem:
00021130 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00021136 6700                       		beq.s	@createitem	; if not, branch
00021138 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
0002113C BC38 FE06                  		cmp.b	(v_debugitem).w,d6
00021140 6200                       		bhi.s	@display
00021142 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00021148                            
00021148                            	@display:
00021148 6000 0000                  		bra.w	Debug_ShowItem
0002114C                            ; ===========================================================================
0002114C                            
0002114C                            @createitem:
0002114C 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00021152 6700                       		beq.s	@backtonormal	; if not, branch
00021154 4EB9 0000 FD42             		jsr	(FindFreeObj).l
0002115A 6600                       		bne.s	@backtonormal
0002115C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00021162 3368 000C 000C             		move.w	obY(a0),obY(a1)
00021168 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002116C 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00021172 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00021178 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
0002117E 7000                       		moveq	#0,d0
00021180 1038 FE06                  		move.b	(v_debugitem).w,d0
00021184 E748                       		lsl.w	#3,d0
00021186 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
0002118C 4E75                       		rts	
0002118E                            ; ===========================================================================
0002118E                            
0002118E                            @backtonormal:
0002118E 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00021194 6700                       		beq.s	@stayindebug	; if not, branch
00021196 7000                       		moveq	#0,d0
00021198 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0002119C 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000211A4 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000211AA 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000211AE 3140 000A                  		move.w	d0,obX+2(a0)
000211B2 3140 000E                  		move.w	d0,obY+2(a0)
000211B6 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000211BC 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000211C2 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000211C8 6600                       		bne.s	@stayindebug	; if not, branch
000211CA                            
000211CA 4278 F780                  		clr.w	(v_ssangle).w
000211CE 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000211D4 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000211DC 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000211E2 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000211E8 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000211EE 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000211F4                            
000211F4                            	@stayindebug:
000211F4 4E75                       		rts	
000211F6                            ; End of function Debug_Control
000211F6                            
000211F6                            
000211F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000211F6                            
000211F6                            
000211F6                            Debug_ShowItem:
000211F6 7000                       		moveq	#0,d0
000211F8 1038 FE06                  		move.b	(v_debugitem).w,d0
000211FC E748                       		lsl.w	#3,d0
000211FE 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
00021204 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
0002120A 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
00021210 4E75                       		rts	
00021212                            ; End of function Debug_ShowItem
00021212                            ; End of function Debug_ShowItem
00021212                            		include	"_inc\DebugList.asm"
00021212                            ; ---------------------------------------------------------------------------
00021212                            ; Debug	mode item lists
00021212                            ; ---------------------------------------------------------------------------
00021212                            DebugList:
00021212 0000                       	dc.w @GHZ-DebugList
00021214 0000                       	dc.w @LZ-DebugList
00021216 0000                       	dc.w @MZ-DebugList
00021218 0000                       	dc.w @SLZ-DebugList
0002121A 0000                       	dc.w @SYZ-DebugList
0002121C 0000                       	dc.w @SBZ-DebugList
0002121E 0000                       	dc.w @Ending-DebugList
00021220                            
00021220                            dbug:	macro map,object,subtype,frame,vram
00021220                            	dc.l map+(object<<24)
00021220                            	dc.b subtype,frame
00021220                            	dc.w vram
00021220                            	endm
00021220                            
00021220                            @GHZ:
00021220 0000                       	dc.w (@GHZend-@GHZ-2)/8
00021222                            
00021222                            ;		mappings	object		subtype	frame	VRAM setting
00021222 2500 BDB0 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
0002122A 2600 C56E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021232 1F00 B190 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002123A 2200 B61A 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021242 2B00 CD10 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
0002124A 3600 F14E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021252 1800 990C 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
0002125A 3B00 F274 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00021262 4001 1962 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
0002126A 4100 FFD4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021272 4201 01FE 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
0002127A 4401 0512 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00021282 7901 ACFE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002128A 4B00 BE00 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00021292 7D01 AEC0 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
0002129A                            	@GHZend:
0002129A                            
0002129A                            @LZ:
0002129A 0000                       	dc.w (@LZend-@LZ-2)/8
0002129C                            
0002129C                            ;		mappings	object		subtype	frame	VRAM setting
0002129C 2500 BDB0 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000212A4 2600 C56E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000212AC 4100 FFD4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000212B4 2C00 CDB6 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000212BC 2D00 CFA2 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000212C4 1601 4324 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000212CC 1601 4324 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000212D4 3300 E420 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000212DC 3200 DFE0 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000212E4 3600 F14E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000212EC 5201 23FA 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000212F4 6101 454C 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000212FC 6101 454C 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
00021304 6101 454C 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
0002130C 6201 46A0 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
00021314 6101 454C 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
0002131C 6101 454C 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
00021324 6301 4A02 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
0002132C 6001 426E 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
00021334 6401 4D50 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
0002133C 6501 4ED8 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
00021344 6501 4ED8 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
0002134C 0B01 36BA 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
00021354 0C01 378A 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
0002135C 7901 ACFE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021364                            	@LZend:
00021364                            
00021364                            @MZ:
00021364 0000                       	dc.w (@MZend-@MZ-2)/8
00021366                            
00021366                            ;		mappings	object		subtype	frame	VRAM setting
00021366 2500 BDB0 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002136E 2600 C56E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021376 2200 B61A 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002137E 3600 F14E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021386 4100 FFD4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002138E 1300 D4B0 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00021396 4601 0BCA 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
0002139E 6E01 9D96 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000213A6 6A01 9706 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000213AE 3300 E420 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000213B6 1E00 A8A8 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000213BE 5101 2120 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000213C6 5201 23A4 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000213CE 5300 9F4E 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000213D6 5401 14C8 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000213DE 5501 2598 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000213E6 7801 A96A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000213EE 7901 ACFE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000213F6                            	@MZend:
000213F6                            
000213F6                            @SLZ:
000213F6 0000                       	dc.w (@SLZend-@SLZ-2)/8
000213F8                            
000213F8                            ;		mappings	object		subtype	frame	VRAM setting
000213F8 2500 BDB0 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021400 2600 C56E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021408 5901 30E2 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
00021410 5300 9F4E 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00021418 1800 996A 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
00021420 5A01 321C 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00021428 5B01 33D4 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
00021430 5D01 39A8 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00021438 5E01 3D3A 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
00021440 4100 FFD4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021448 1300 D4B0 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
00021450 1C00 A080 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00021458 5F01 3FB8 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00021460 6001 426E 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00021468 7901 ACFE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021470                            	@SLZend:
00021470                            
00021470                            @SYZ:
00021470 0000                       	dc.w (@SYZend-@SYZ-2)/8
00021472                            
00021472                            ;		mappings	object		subtype	frame	VRAM setting
00021472 2500 BDB0 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002147A 2600 C56E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021482 3600 F14E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002148A 4100 FFD4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021492 4301 0464 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
0002149A 1201 0C48 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
000214A2 4701 0DEC 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
000214AA 1F00 B190 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000214B2 2200 B61A 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000214BA 5001 1BF2 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
000214C2 1800 9958 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000214CA 5601 2AA2 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000214D2 3200 DFE0 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000214DA 7801 A96A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000214E2 7901 ACFE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000214EA                            	@SYZend:
000214EA                            
000214EA                            @SBZ:
000214EA 0000                       	dc.w (@SBZend-@SBZ-2)/8
000214EC                            
000214EC                            ;		mappings	object		subtype	frame	VRAM setting
000214EC 2500 BDB0 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000214F4 2600 C56E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000214FC 5F01 3FB8 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00021504 6001 426E 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
0002150C 7801 A96A 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00021514 1501 2E3E 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
0002151C 6701 91F4 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00021524 5201 23A4 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
0002152C 3200 DFE0 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00021534 6901 944E 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
0002153C 6901 94A8 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00021544 6A01 9706 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0002154C 5300 9F4E 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00021554 5201 23A4 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
0002155C 6B01 9AD6 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00021564 2A00 A43A 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
0002156C 6B01 9AD6 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00021574 6A01 9706 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
0002157C 6B01 9AD6 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00021584 6A01 9706 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
0002158C 6B01 9AD6 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00021594 6C01 9CB2 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
0002159C 6D01 08BC 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
000215A4 6D01 08BC 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
000215AC 6E01 9D96 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000215B4 7001 A1E0 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
000215BC 7101 384E 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
000215C4 1E00 A8A8 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000215CC 7901 ACFE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000215D4                            	@SBZend:
000215D4                            
000215D4                            @Ending:
000215D4 0000                       	dc.w (@Endingend-@Ending-2)/8
000215D6                            
000215D6                            ;		mappings	object		subtype	frame	VRAM setting
000215D6 2500 BDB0 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000215DE 2500 BDB0 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000215E6                            	@Endingend:
000215E6                            
000215E6                            	even
000215E6                            	even
000215E6                            		include	"_inc\LevelHeaders.asm"
000215E6                            ; ---------------------------------------------------------------------------
000215E6                            ; Level Headers
000215E6                            ; ---------------------------------------------------------------------------
000215E6                            
000215E6                            LevelHeaders:
000215E6                            
000215E6                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000215E6                            	dc.l (plc1<<24)+lvlgfx
000215E6                            	dc.l (plc2<<24)+sixteen
000215E6                            	dc.l twofivesix
000215E6                            	dc.b 0, music, pal, pal
000215E6                            	endm
000215E6                            
000215E6                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000215E6                            ; music (unused), palette (unused), palette
000215E6                            
000215E6                            ;		1st PLC				2nd PLC				256x256 data			palette
000215E6                            ;				level gfx*			16x16 data			music*
000215E6                            
000215E6 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000215F6 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00021606 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00021616 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00021626 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00021636 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00021646 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00021656                            	even
00021656                            
00021656                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021656                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021656                            		include	"_inc\Pattern Load Cues.asm"
00021656                            ; ---------------------------------------------------------------------------
00021656                            ; Pattern load cues
00021656                            ; ---------------------------------------------------------------------------
00021656                            ArtLoadCues:
00021656                            
00021656 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00021658 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
0002165A 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
0002165C 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
0002165E                            PLC_Levels:
0002165E 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00021660 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00021662 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00021664 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00021666 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00021668 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
0002166A 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
0002166C 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
0002166E 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00021670 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00021672 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00021674 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00021676 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00021678 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
0002167A 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
0002167C 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
0002167E 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00021680                            PLC_Animals:
00021680 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00021682 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00021684 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00021686 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00021688 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
0002168A 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
0002168C 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
0002168E 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00021690 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00021692 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00021694 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00021696 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00021698 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
0002169A 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
0002169C                            
0002169C                            plcm:	macro gfx,vram
0002169C                            	dc.l gfx
0002169C                            	dc.w vram
0002169C                            	endm
0002169C                            
0002169C                            ; ---------------------------------------------------------------------------
0002169C                            ; Pattern load cues - standard block 1
0002169C                            ; ---------------------------------------------------------------------------
0002169C 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
0002169E 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
000216A4 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
000216AA 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
000216B0 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
000216B6                            	PLC_Mainend:
000216B6                            ; ---------------------------------------------------------------------------
000216B6                            ; Pattern load cues - standard block 2
000216B6                            ; ---------------------------------------------------------------------------
000216B6 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
000216B8 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
000216BE                            	PLC_Main2end:
000216BE                            ; ---------------------------------------------------------------------------
000216BE                            ; Pattern load cues - explosion
000216BE                            ; ---------------------------------------------------------------------------
000216BE 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
000216C0 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000216C6                            	PLC_Explodeend:
000216C6                            ; ---------------------------------------------------------------------------
000216C6                            ; Pattern load cues - game/time	over
000216C6                            ; ---------------------------------------------------------------------------
000216C6 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000216C8 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000216CE                            	PLC_GameOverend:
000216CE                            ; ---------------------------------------------------------------------------
000216CE                            ; Pattern load cues - Green Hill
000216CE                            ; ---------------------------------------------------------------------------
000216CE 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000216D0 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000216D6 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000216DC 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000216E2 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
000216E8 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
000216EE 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000216F4 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000216FA 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00021700 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00021706 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002170C 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021712 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021718                            
00021718 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
0002171A 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00021720 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00021726 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
0002172C 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00021732 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00021738 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
0002173E                            	PLC_GHZ2end:
0002173E                            ; ---------------------------------------------------------------------------
0002173E                            ; Pattern load cues - Labyrinth
0002173E                            ; ---------------------------------------------------------------------------
0002173E 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00021740 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00021746 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
0002174C                            		;plcm	Nem_LzBlock2, $3E00	; blocks
0002174C 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00021752 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00021758 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
0002175E 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00021764 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
0002176A 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00021770 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00021776                            
00021776 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00021778 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
0002177E 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00021784                            		;plcm	Nem_LzWheel, $7EC0	; wheel
00021784                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
00021784 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
0002178A 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00021790 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00021796 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0002179C 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
000217A2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000217A8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000217AE 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000217B4                            	PLC_LZ2end:
000217B4                            ; ---------------------------------------------------------------------------
000217B4                            ; Pattern load cues - Marble
000217B4                            ; ---------------------------------------------------------------------------
000217B4 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
000217B6 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
000217BC 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
000217C2 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
000217C8 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000217CE                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
000217CE 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000217D4 0000 0000 8000             		plcm	Nem_Bomb, $8000
000217DA 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
000217E0 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
000217E6 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
000217EC                            
000217EC 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
000217EE 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000217F4 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
000217FA                            		;plcm	Nem_MzSwitch, $A260	; switch
000217FA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021800 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021806 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002180C 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00021812 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00021818                            	PLC_MZ2end:
00021818                            ; ---------------------------------------------------------------------------
00021818                            ; Pattern load cues - Star Light
00021818                            ; ---------------------------------------------------------------------------
00021818 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
0002181A 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00021820 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00021826 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
0002182C 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00021832 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00021838 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
0002183E 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00021844 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002184A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021850 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021856                            
00021856 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00021858 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
0002185E 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00021864 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
0002186A 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00021870 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00021876 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
0002187C                            	PLC_SLZ2end:
0002187C                            ; ---------------------------------------------------------------------------
0002187C                            ; Pattern load cues - Spring Yard
0002187C                            ; ---------------------------------------------------------------------------
0002187C 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
0002187E 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00021884                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00021884                            		;plcm	Nem_SbzDoor1, $5D40	; door
00021884 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
0002188A 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00021890                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00021890 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00021896 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
0002189C 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
000218A2 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
000218A8 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
000218AE 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
000218B4                            
000218B4 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
000218B6                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
000218B6 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
000218BC 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
000218C2 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
000218C8                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
000218C8 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
000218CE                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
000218CE 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000218D4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000218DA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000218E0 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000218E6                            	PLC_SYZ2end:
000218E6                            ; ---------------------------------------------------------------------------
000218E6                            ; Pattern load cues - Scrap Brain
000218E6                            ; ---------------------------------------------------------------------------
000218E6 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
000218E8 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
000218EE                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
000218EE                            		;plcm	Nem_SbzDoor1, $5D00	; door
000218EE                            		;plcm	Nem_Girder, $5E00	; girder
000218EE 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
000218F4 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
000218FA                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
000218FA 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00021900 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00021906 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
0002190C 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00021912                            
00021912 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00021914 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
0002191A 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00021920 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00021926                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00021926 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
0002192C 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00021932 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00021938 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
0002193E 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00021944 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002194A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021950 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021956                            	PLC_SBZ2end:
00021956                            ; ---------------------------------------------------------------------------
00021956                            ; Pattern load cues - title card
00021956                            ; ---------------------------------------------------------------------------
00021956 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00021958 0000 0000 B000             		plcm	Nem_TitleCard, $B000
0002195E                            	PLC_TitleCardend:
0002195E                            ; ---------------------------------------------------------------------------
0002195E                            ; Pattern load cues - act 3 boss
0002195E                            ; ---------------------------------------------------------------------------
0002195E 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021960 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021966 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
0002196C 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021972                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00021972                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00021972 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021978 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
0002197E                            	PLC_Bossend:
0002197E                            ; ---------------------------------------------------------------------------
0002197E                            ; Pattern load cues - act 1/2 signpost
0002197E                            ; ---------------------------------------------------------------------------
0002197E 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00021980 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00021986 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
0002198C 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00021992                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00021992                            	PLC_Signpostend:
00021992                            ; ---------------------------------------------------------------------------
00021992                            ; Pattern load cues - beta special stage warp effect
00021992                            ; ---------------------------------------------------------------------------
00021992                            PLC_Warp:
00021992                            	PLC_Warpend:
00021992                            ; ---------------------------------------------------------------------------
00021992                            ; Pattern load cues - special stage
00021992                            ; ---------------------------------------------------------------------------
00021992 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00021994 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
0002199A 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
000219A0 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
000219A6 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
000219AC 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
000219B2 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
000219B8 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
000219BE 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
000219C4 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
000219CA 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
000219D0 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
000219D6 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
000219DC 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
000219E2 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
000219E8                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
000219E8                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
000219E8                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
000219E8                            	PLC_SpeStageend:
000219E8                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
000219E8                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
000219E8                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
000219E8                            ; ---------------------------------------------------------------------------
000219E8                            ; Pattern load cues - GHZ animals
000219E8                            ; ---------------------------------------------------------------------------
000219E8 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
000219EA 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
000219F0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
000219F6                            	PLC_GHZAnimalsend:
000219F6                            ; ---------------------------------------------------------------------------
000219F6                            ; Pattern load cues - LZ animals
000219F6                            ; ---------------------------------------------------------------------------
000219F6 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
000219F8 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
000219FE 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00021A04                            	PLC_LZAnimalsend:
00021A04                            ; ---------------------------------------------------------------------------
00021A04                            ; Pattern load cues - MZ animals
00021A04                            ; ---------------------------------------------------------------------------
00021A04 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00021A06 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00021A0C 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00021A12                            	PLC_MZAnimalsend:
00021A12                            ; ---------------------------------------------------------------------------
00021A12                            ; Pattern load cues - SLZ animals
00021A12                            ; ---------------------------------------------------------------------------
00021A12 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00021A14 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A1A 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021A20                            	PLC_SLZAnimalsend:
00021A20                            ; ---------------------------------------------------------------------------
00021A20                            ; Pattern load cues - SYZ animals
00021A20                            ; ---------------------------------------------------------------------------
00021A20 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00021A22 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A28 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021A2E                            	PLC_SYZAnimalsend:
00021A2E                            ; ---------------------------------------------------------------------------
00021A2E                            ; Pattern load cues - SBZ animals
00021A2E                            ; ---------------------------------------------------------------------------
00021A2E 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00021A30 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00021A36 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021A3C                            	PLC_SBZAnimalsend:
00021A3C                            ; ---------------------------------------------------------------------------
00021A3C                            ; Pattern load cues - special stage results screen
00021A3C                            ; ---------------------------------------------------------------------------
00021A3C 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021A3E 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00021A44 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021A4A                            	PLC_SpeStResultend:
00021A4A                            ; ---------------------------------------------------------------------------
00021A4A                            ; Pattern load cues - ending sequence
00021A4A                            ; ---------------------------------------------------------------------------
00021A4A 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021A4C 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021A52 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021A58 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021A5E                            		;plcm	Nem_EndFlower, $7400	; flowers
00021A5E 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021A64 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021A6A 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021A70 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00021A76 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021A7C 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021A82 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00021A88 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00021A8E 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00021A94 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00021A9A                            	PLC_Endingend:
00021A9A                            ; ---------------------------------------------------------------------------
00021A9A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00021A9A                            ; ---------------------------------------------------------------------------
00021A9A 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00021A9C 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021AA2 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00021AA8 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021AAE                            	PLC_TryAgainend:
00021AAE                            ; ---------------------------------------------------------------------------
00021AAE                            ; Pattern load cues - Eggman on SBZ 2
00021AAE                            ; ---------------------------------------------------------------------------
00021AAE 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021AB0 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00021AB6 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021ABC 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021AC2                            	PLC_EggmanSBZ2end:
00021AC2                            ; ---------------------------------------------------------------------------
00021AC2                            ; Pattern load cues - final boss
00021AC2                            ; ---------------------------------------------------------------------------
00021AC2 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00021AC4 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00021ACA 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00021AD0 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021AD6 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00021ADC 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021AE2                            	PLC_FZBossend:
00021AE2                            ; ---------------------------------------------------------------------------
00021AE2                            ; Pattern load cues - Eggman
00021AE2                            ; ---------------------------------------------------------------------------
00021AE2 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021AE4 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021AEA 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021AF0 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021AF6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021AFC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021B02 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021B08                            	PLC_Eggend:
00021B08                            		even
00021B08                            ; ---------------------------------------------------------------------------
00021B08                            ; Pattern load cues - Life Icon
00021B08                            ; ---------------------------------------------------------------------------	
00021B08 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
00021B0A 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
00021B10                            	PLC_LifeIcon_end: 
00021B10                            		even	
00021B10                            ; ---------------------------------------------------------------------------
00021B10                            ; Pattern load cues - Life Icon (Future)
00021B10                            ; ---------------------------------------------------------------------------	
00021B10 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
00021B12 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
00021B18                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
00021B18                            		even			
00021B18                            ; ---------------------------------------------------------------------------
00021B18                            ; Pattern load cue IDs
00021B18                            ; ---------------------------------------------------------------------------
00021B18 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00021B18 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00021B18 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00021B18 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00021B18 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00021B18 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00021B18 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00021B18 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00021B18 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00021B18 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00021B18 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00021B18 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00021B18 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00021B18 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00021B18 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00021B18 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00021B18 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00021B18 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00021B18 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00021B18 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00021B18 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00021B18 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00021B18 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00021B18 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00021B18 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00021B18 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00021B18 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00021B18 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00021B18 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00021B18 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00021B18 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00021B18 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00021B18 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
00021B18 =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
00021B18 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B18 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B18                            
00021C00                            			dcb.b	$300,$FF
00021F00                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00022370                            			even
00022370                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002246C                            			even
0002246C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002254C                            		even
0002254C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
000239B8                            		even
000239B8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00025498                            		even
00025498                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
000254CC                            		even
000254CC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000256FE 00                         		even		
000256FE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
000257BC                            		even
000257BC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025C64                            		even
00025C64                            
00025C64                            Map_Sonic:	include	"_maps\Sonic.asm"
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            
00025C64                            SME_wvX4F:	
00025C64 0000 0000                  		dc.w SME_wvX4F_1EE-SME_wvX4F, SME_wvX4F_1EF-SME_wvX4F	
00025C68 0000 0000                  		dc.w SME_wvX4F_204-SME_wvX4F, SME_wvX4F_232-SME_wvX4F	
00025C6C 0000 0000                  		dc.w SME_wvX4F_265-SME_wvX4F, SME_wvX4F_27A-SME_wvX4F	
00025C70 0000 0000                  		dc.w SME_wvX4F_28A-SME_wvX4F, SME_wvX4F_29A-SME_wvX4F	
00025C74 0000 0000                  		dc.w SME_wvX4F_2AF-SME_wvX4F, SME_wvX4F_2BA-SME_wvX4F	
00025C78 0000 0000                  		dc.w SME_wvX4F_2CA-SME_wvX4F, SME_wvX4F_2DA-SME_wvX4F	
00025C7C 0000 0000                  		dc.w SME_wvX4F_2EA-SME_wvX4F, SME_wvX4F_2FF-SME_wvX4F	
00025C80 0000 0000                  		dc.w SME_wvX4F_30F-SME_wvX4F, SME_wvX4F_333-SME_wvX4F	
00025C84 0000 0000                  		dc.w SME_wvX4F_34D-SME_wvX4F, SME_wvX4F_358-SME_wvX4F	
00025C88 0000 0000                  		dc.w SME_wvX4F_368-SME_wvX4F, SME_wvX4F_37D-SME_wvX4F	
00025C8C 0000 0000                  		dc.w SME_wvX4F_388-SME_wvX4F, SME_wvX4F_398-SME_wvX4F	
00025C90 0000 0000                  		dc.w SME_wvX4F_3B2-SME_wvX4F, SME_wvX4F_3CC-SME_wvX4F	
00025C94 0000 0000                  		dc.w SME_wvX4F_3EB-SME_wvX4F, SME_wvX4F_400-SME_wvX4F	
00025C98 0000 0000                  		dc.w SME_wvX4F_410-SME_wvX4F, SME_wvX4F_42A-SME_wvX4F	
00025C9C 0000 0000                  		dc.w SME_wvX4F_43F-SME_wvX4F, SME_wvX4F_44F-SME_wvX4F	
00025CA0 0000 0000                  		dc.w SME_wvX4F_469-SME_wvX4F, SME_wvX4F_47E-SME_wvX4F	
00025CA4 0000 0000                  		dc.w SME_wvX4F_489-SME_wvX4F, SME_wvX4F_494-SME_wvX4F	
00025CA8 0000 0000                  		dc.w SME_wvX4F_4AE-SME_wvX4F, SME_wvX4F_4C3-SME_wvX4F	
00025CAC 0000 0000                  		dc.w SME_wvX4F_4CE-SME_wvX4F, SME_wvX4F_4DE-SME_wvX4F	
00025CB0 0000 0000                  		dc.w SME_wvX4F_4EE-SME_wvX4F, SME_wvX4F_50D-SME_wvX4F	
00025CB4 0000 0000                  		dc.w SME_wvX4F_52C-SME_wvX4F, SME_wvX4F_541-SME_wvX4F	
00025CB8 0000 0000                  		dc.w SME_wvX4F_551-SME_wvX4F, SME_wvX4F_56B-SME_wvX4F	
00025CBC 0000 0000                  		dc.w SME_wvX4F_580-SME_wvX4F, SME_wvX4F_590-SME_wvX4F	
00025CC0 0000 0000                  		dc.w SME_wvX4F_5AA-SME_wvX4F, SME_wvX4F_5B5-SME_wvX4F	
00025CC4 0000 0000                  		dc.w SME_wvX4F_5C0-SME_wvX4F, SME_wvX4F_5CB-SME_wvX4F	
00025CC8 0000 0000                  		dc.w SME_wvX4F_5D6-SME_wvX4F, SME_wvX4F_5E1-SME_wvX4F	
00025CCC 0000 0000                  		dc.w SME_wvX4F_5EC-SME_wvX4F, SME_wvX4F_5F7-SME_wvX4F	
00025CD0 0000 0000                  		dc.w SME_wvX4F_602-SME_wvX4F, SME_wvX4F_617-SME_wvX4F	
00025CD4 0000 0000                  		dc.w SME_wvX4F_627-SME_wvX4F, SME_wvX4F_637-SME_wvX4F	
00025CD8 0000 0000                  		dc.w SME_wvX4F_647-SME_wvX4F, SME_wvX4F_65C-SME_wvX4F	
00025CDC 0000 0000                  		dc.w SME_wvX4F_66C-SME_wvX4F, SME_wvX4F_67C-SME_wvX4F	
00025CE0 0000 0000                  		dc.w SME_wvX4F_68C-SME_wvX4F, SME_wvX4F_697-SME_wvX4F	
00025CE4 0000 0000                  		dc.w SME_wvX4F_6A2-SME_wvX4F, SME_wvX4F_6AD-SME_wvX4F	
00025CE8 0000 0000                  		dc.w SME_wvX4F_6B8-SME_wvX4F, SME_wvX4F_6C3-SME_wvX4F	
00025CEC 0000 0000                  		dc.w SME_wvX4F_6CE-SME_wvX4F, SME_wvX4F_6D9-SME_wvX4F	
00025CF0 0000 0000                  		dc.w SME_wvX4F_6E4-SME_wvX4F, SME_wvX4F_6F9-SME_wvX4F	
00025CF4 0000 0000                  		dc.w SME_wvX4F_709-SME_wvX4F, SME_wvX4F_714-SME_wvX4F	
00025CF8 0000 0000                  		dc.w SME_wvX4F_724-SME_wvX4F, SME_wvX4F_739-SME_wvX4F	
00025CFC 0000 0000                  		dc.w SME_wvX4F_749-SME_wvX4F, SME_wvX4F_754-SME_wvX4F	
00025D00 0000 0000                  		dc.w SME_wvX4F_764-SME_wvX4F, SME_wvX4F_774-SME_wvX4F	
00025D04 0000 0000                  		dc.w SME_wvX4F_784-SME_wvX4F, SME_wvX4F_7B2-SME_wvX4F	
00025D08 0000 0000                  		dc.w SME_wvX4F_7E0-SME_wvX4F, SME_wvX4F_7F0-SME_wvX4F	
00025D0C 0000 0000                  		dc.w SME_wvX4F_800-SME_wvX4F, SME_wvX4F_810-SME_wvX4F	
00025D10 0000 0000                  		dc.w SME_wvX4F_82A-SME_wvX4F, SME_wvX4F_83A-SME_wvX4F	
00025D14 0000 0000                  		dc.w SME_wvX4F_84A-SME_wvX4F, SME_wvX4F_864-SME_wvX4F	
00025D18 0000 0000                  		dc.w SME_wvX4F_87E-SME_wvX4F, SME_wvX4F_893-SME_wvX4F	
00025D1C 0000 0000                  		dc.w SME_wvX4F_8A8-SME_wvX4F, SME_wvX4F_8BD-SME_wvX4F	
00025D20 0000 0000                  		dc.w SME_wvX4F_8D2-SME_wvX4F, SME_wvX4F_8D8-SME_wvX4F	
00025D24 0000 0000                  		dc.w SME_wvX4F_8DE-SME_wvX4F, SME_wvX4F_8E4-SME_wvX4F	
00025D28 0000 0000                  		dc.w SME_wvX4F_8EA-SME_wvX4F, SME_wvX4F_8F0-SME_wvX4F	
00025D2C 0000 0000                  		dc.w SME_wvX4F_8F6-SME_wvX4F, SME_wvX4F_8FC-SME_wvX4F	
00025D30 0000 0000                  		dc.w SME_wvX4F_90C-SME_wvX4F, SME_wvX4F_912-SME_wvX4F	
00025D34 0000 0000                  		dc.w SME_wvX4F_91D-SME_wvX4F, SME_wvX4F_923-SME_wvX4F	
00025D38 0000 0000                  		dc.w SME_wvX4F_92E-SME_wvX4F, SME_wvX4F_934-SME_wvX4F	
00025D3C 0000 0000                  		dc.w SME_wvX4F_949-SME_wvX4F, SME_wvX4F_96D-SME_wvX4F	
00025D40 0000 0000                  		dc.w SME_wvX4F_987-SME_wvX4F, SME_wvX4F_997-SME_wvX4F	
00025D44 0000 0000                  		dc.w SME_wvX4F_9B1-SME_wvX4F, SME_wvX4F_9C6-SME_wvX4F	
00025D48 0000 0000                  		dc.w SME_wvX4F_9DB-SME_wvX4F, SME_wvX4F_9F0-SME_wvX4F	
00025D4C 0000 0000                  		dc.w SME_wvX4F_A1E-SME_wvX4F, SME_wvX4F_A2E-SME_wvX4F	
00025D50 0000 0000                  		dc.w SME_wvX4F_A3E-SME_wvX4F, SME_wvX4F_A4E-SME_wvX4F	
00025D54 0000 0000                  		dc.w SME_wvX4F_A4F-SME_wvX4F, SME_wvX4F_A78-SME_wvX4F	
00025D58 0000 0000                  		dc.w SME_wvX4F_A9C-SME_wvX4F, SME_wvX4F_AB1-SME_wvX4F	
00025D5C 0000 0000                  		dc.w SME_wvX4F_AC1-SME_wvX4F, SME_wvX4F_AD1-SME_wvX4F	
00025D60 0000 0000                  		dc.w SME_wvX4F_AE1-SME_wvX4F, SME_wvX4F_AEC-SME_wvX4F	
00025D64 0000 0000                  		dc.w SME_wvX4F_AFC-SME_wvX4F, SME_wvX4F_B0C-SME_wvX4F	
00025D68 0000 0000                  		dc.w SME_wvX4F_B1C-SME_wvX4F, SME_wvX4F_B2C-SME_wvX4F	
00025D6C 0000 0000                  		dc.w SME_wvX4F_B41-SME_wvX4F, SME_wvX4F_B6A-SME_wvX4F	
00025D70 0000 0000                  		dc.w SME_wvX4F_B7F-SME_wvX4F, SME_wvX4F_B94-SME_wvX4F	
00025D74 0000 0000                  		dc.w SME_wvX4F_BAE-SME_wvX4F, SME_wvX4F_BC8-SME_wvX4F	
00025D78 0000 0000                  		dc.w SME_wvX4F_BD3-SME_wvX4F, SME_wvX4F_BED-SME_wvX4F	
00025D7C 0000 0000                  		dc.w SME_wvX4F_BFD-SME_wvX4F, SME_wvX4F_C17-SME_wvX4F	
00025D80 0000 0000                  		dc.w SME_wvX4F_C22-SME_wvX4F, SME_wvX4F_C32-SME_wvX4F	
00025D84 0000 0000                  		dc.w SME_wvX4F_C42-SME_wvX4F, SME_wvX4F_C52-SME_wvX4F	
00025D88 0000 0000                  		dc.w SME_wvX4F_C5D-SME_wvX4F, SME_wvX4F_C6D-SME_wvX4F	
00025D8C 0000 0000                  		dc.w SME_wvX4F_CA5-SME_wvX4F, SME_wvX4F_CC4-SME_wvX4F	
00025D90 0000 0000                  		dc.w SME_wvX4F_CD4-SME_wvX4F, SME_wvX4F_CF8-SME_wvX4F	
00025D94 0000 0000                  		dc.w SME_wvX4F_D03-SME_wvX4F, SME_wvX4F_D18-SME_wvX4F	
00025D98 0000 0000                  		dc.w SME_wvX4F_D28-SME_wvX4F, SME_wvX4F_D38-SME_wvX4F	
00025D9C 0000 0000                  		dc.w SME_wvX4F_D4D-SME_wvX4F, SME_wvX4F_D53-SME_wvX4F	
00025DA0 0000 0000                  		dc.w SME_wvX4F_D59-SME_wvX4F, SME_wvX4F_D5F-SME_wvX4F	
00025DA4 0000 0000                  		dc.w SME_wvX4F_D65-SME_wvX4F, SME_wvX4F_D70-SME_wvX4F	
00025DA8 0000 0000                  		dc.w SME_wvX4F_D76-SME_wvX4F, SME_wvX4F_D7C-SME_wvX4F	
00025DAC 0000 0000                  		dc.w SME_wvX4F_D82-SME_wvX4F, SME_wvX4F_D92-SME_wvX4F	
00025DB0 0000 0000                  		dc.w SME_wvX4F_DA2-SME_wvX4F, SME_wvX4F_DB2-SME_wvX4F	
00025DB4 0000 0000                  		dc.w SME_wvX4F_DC2-SME_wvX4F, SME_wvX4F_DD2-SME_wvX4F	
00025DB8 0000 0000                  		dc.w SME_wvX4F_DFB-SME_wvX4F, SME_wvX4F_E0B-SME_wvX4F	
00025DBC 0000 0000                  		dc.w SME_wvX4F_E1B-SME_wvX4F, SME_wvX4F_E3F-SME_wvX4F	
00025DC0 0000 0000                  		dc.w SME_wvX4F_E4F-SME_wvX4F, SME_wvX4F_E55-SME_wvX4F	
00025DC4 0000 0000                  		dc.w SME_wvX4F_E5B-SME_wvX4F, SME_wvX4F_E7F-SME_wvX4F	
00025DC8 0000 0000                  		dc.w SME_wvX4F_E8F-SME_wvX4F, SME_wvX4F_E95-SME_wvX4F	
00025DCC 0000 0000                  		dc.w SME_wvX4F_EA0-SME_wvX4F, SME_wvX4F_EAB-SME_wvX4F	
00025DD0 0000 0000                  		dc.w SME_wvX4F_EC5-SME_wvX4F, SME_wvX4F_EE4-SME_wvX4F	
00025DD4 0000 0000                  		dc.w SME_wvX4F_EF9-SME_wvX4F, SME_wvX4F_F09-SME_wvX4F	
00025DD8 0000 0000                  		dc.w SME_wvX4F_F23-SME_wvX4F, SME_wvX4F_F38-SME_wvX4F	
00025DDC 0000 0000                  		dc.w SME_wvX4F_F48-SME_wvX4F, SME_wvX4F_F62-SME_wvX4F	
00025DE0 0000 0000                  		dc.w SME_wvX4F_F72-SME_wvX4F, SME_wvX4F_F78-SME_wvX4F	
00025DE4 0000 0000                  		dc.w SME_wvX4F_F7E-SME_wvX4F, SME_wvX4F_F8E-SME_wvX4F	
00025DE8 0000 0000                  		dc.w SME_wvX4F_F9E-SME_wvX4F, SME_wvX4F_FA4-SME_wvX4F	
00025DEC 0000 0000                  		dc.w SME_wvX4F_FB4-SME_wvX4F, SME_wvX4F_FBF-SME_wvX4F	
00025DF0 0000 0000                  		dc.w SME_wvX4F_FDE-SME_wvX4F, SME_wvX4F_FFD-SME_wvX4F	
00025DF4 0000 0000                  		dc.w SME_wvX4F_1012-SME_wvX4F, SME_wvX4F_1022-SME_wvX4F	
00025DF8 0000 0000                  		dc.w SME_wvX4F_103C-SME_wvX4F, SME_wvX4F_1051-SME_wvX4F	
00025DFC 0000 0000                  		dc.w SME_wvX4F_1061-SME_wvX4F, SME_wvX4F_107B-SME_wvX4F	
00025E00 0000 0000                  		dc.w SME_wvX4F_108B-SME_wvX4F, SME_wvX4F_10A5-SME_wvX4F	
00025E04 0000 0000                  		dc.w SME_wvX4F_10BA-SME_wvX4F, SME_wvX4F_10CF-SME_wvX4F	
00025E08 0000 0000                  		dc.w SME_wvX4F_10DA-SME_wvX4F, SME_wvX4F_10E5-SME_wvX4F	
00025E0C 0000 0000                  		dc.w SME_wvX4F_10F0-SME_wvX4F, SME_wvX4F_10FB-SME_wvX4F	
00025E10 0000 0000                  		dc.w SME_wvX4F_1106-SME_wvX4F, SME_wvX4F_1116-SME_wvX4F	
00025E14 0000 0000                  		dc.w SME_wvX4F_1126-SME_wvX4F, SME_wvX4F_114A-SME_wvX4F	
00025E18 0000 0000                  		dc.w SME_wvX4F_1155-SME_wvX4F, SME_wvX4F_1160-SME_wvX4F	
00025E1C 0000 0000                  		dc.w SME_wvX4F_116B-SME_wvX4F, SME_wvX4F_1176-SME_wvX4F	
00025E20 0000 0000                  		dc.w SME_wvX4F_1186-SME_wvX4F, SME_wvX4F_119B-SME_wvX4F	
00025E24 0000 0000                  		dc.w SME_wvX4F_119C-SME_wvX4F, SME_wvX4F_119D-SME_wvX4F	
00025E28 0000 0000                  		dc.w SME_wvX4F_11AD-SME_wvX4F, SME_wvX4F_11BD-SME_wvX4F	
00025E2C 0000 0000                  		dc.w SME_wvX4F_11BE-SME_wvX4F, SME_wvX4F_11BF-SME_wvX4F	
00025E30 0000 0000                  		dc.w SME_wvX4F_11CA-SME_wvX4F, SME_wvX4F_11D0-SME_wvX4F	
00025E34 0000 0000                  		dc.w SME_wvX4F_11DB-SME_wvX4F, SME_wvX4F_11E6-SME_wvX4F	
00025E38 0000 0000                  		dc.w SME_wvX4F_11F1-SME_wvX4F, SME_wvX4F_11FC-SME_wvX4F	
00025E3C 0000 0000                  		dc.w SME_wvX4F_1216-SME_wvX4F, SME_wvX4F_1230-SME_wvX4F	
00025E40 0000 0000                  		dc.w SME_wvX4F_123B-SME_wvX4F, SME_wvX4F_1246-SME_wvX4F	
00025E44 0000 0000                  		dc.w SME_wvX4F_1251-SME_wvX4F, SME_wvX4F_125C-SME_wvX4F	
00025E48 0000 0000                  		dc.w SME_wvX4F_1267-SME_wvX4F, SME_wvX4F_1272-SME_wvX4F	
00025E4C 0000 0000                  		dc.w SME_wvX4F_127D-SME_wvX4F, SME_wvX4F_1288-SME_wvX4F	
00025E50 0000                       		dc.w SME_wvX4F_1293-SME_wvX4F	
00025E52 00                         SME_wvX4F_1EE:	dc.b 0	
00025E53 04                         SME_wvX4F_1EF:	dc.b 4	
00025E54 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E59 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00025E5E 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00025E63 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025E68 09                         SME_wvX4F_204:	dc.b 9	
00025E69 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E6E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025E73 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025E78 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025E7D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025E82 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025E87 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025E8C FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025E91 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025E96 0A                         SME_wvX4F_232:	dc.b $A	
00025E97 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E9C 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025EA1 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025EA6 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025EAB FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025EB0 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025EB5 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00025EBA F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025EBF F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00025EC4 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00025EC9 04                         SME_wvX4F_265:	dc.b 4	
00025ECA EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025ECF F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025ED4 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025ED9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025EDE 03                         SME_wvX4F_27A:	dc.b 3	
00025EDF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EE4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EE9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EEE 03                         SME_wvX4F_28A:	dc.b 3	
00025EEF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EF4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EF9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EFE 04                         SME_wvX4F_29A:	dc.b 4	
00025EFF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025F04 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025F09 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00025F0E 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025F13 02                         SME_wvX4F_2AF:	dc.b 2	
00025F14 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F19 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00025F1E 03                         SME_wvX4F_2BA:	dc.b 3	
00025F1F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F24 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F29 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F2E 03                         SME_wvX4F_2CA:	dc.b 3	
00025F2F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F34 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F39 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F3E 03                         SME_wvX4F_2DA:	dc.b 3	
00025F3F F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F44 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025F49 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00025F4E 04                         SME_wvX4F_2EA:	dc.b 4	
00025F4F 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025F54 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025F59 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00025F5E F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00025F63 03                         SME_wvX4F_2FF:	dc.b 3	
00025F64 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025F69 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00025F6E 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025F73 07                         SME_wvX4F_30F:	dc.b 7	
00025F74 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025F79 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025F7E 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025F83 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025F88 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025F8D EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025F92 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025F97 05                         SME_wvX4F_333:	dc.b 5	
00025F98 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025F9D F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025FA2 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025FA7 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025FAC F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025FB1 02                         SME_wvX4F_34D:	dc.b 2	
00025FB2 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025FB7 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025FBC 03                         SME_wvX4F_358:	dc.b 3	
00025FBD F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00025FC2 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025FC7 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00025FCC 04                         SME_wvX4F_368:	dc.b 4	
00025FCD EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00025FD2 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025FD7 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025FDC 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00025FE1 02                         SME_wvX4F_37D:	dc.b 2	
00025FE2 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025FE7 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025FEC 03                         SME_wvX4F_388:	dc.b 3	
00025FED ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00025FF2 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025FF7 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025FFC 05                         SME_wvX4F_398:	dc.b 5	
00025FFD FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026002 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026007 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
0002600C ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00026011 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00026016 05                         SME_wvX4F_3B2:	dc.b 5	
00026017 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002601C EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026021 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026026 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
0002602B 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026030 06                         SME_wvX4F_3CC:	dc.b 6	
00026031 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026036 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002603B FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026040 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026045 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
0002604A F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002604F 04                         SME_wvX4F_3EB:	dc.b 4	
00026050 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026055 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002605A FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002605F 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026064 03                         SME_wvX4F_400:	dc.b 3	
00026065 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
0002606A ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002606F 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026074 05                         SME_wvX4F_410:	dc.b 5	
00026075 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002607A EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002607F FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026084 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026089 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002608E 04                         SME_wvX4F_42A:	dc.b 4	
0002608F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026094 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026099 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002609E 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000260A3 03                         SME_wvX4F_43F:	dc.b 3	
000260A4 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000260A9 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000260AE 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000260B3 05                         SME_wvX4F_44F:	dc.b 5	
000260B4 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000260B9 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000260BE FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000260C3 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000260C8 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000260CD 04                         SME_wvX4F_469:	dc.b 4	
000260CE F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000260D3 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000260D8 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000260DD 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000260E2 02                         SME_wvX4F_47E:	dc.b 2	
000260E3 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000260E8 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000260ED 02                         SME_wvX4F_489:	dc.b 2	
000260EE F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000260F3 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000260F8 05                         SME_wvX4F_494:	dc.b 5	
000260F9 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000260FE F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00026103 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00026108 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
0002610D F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00026112 04                         SME_wvX4F_4AE:	dc.b 4	
00026113 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00026118 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
0002611D FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00026122 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00026127 02                         SME_wvX4F_4C3:	dc.b 2	
00026128 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
0002612D F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
00026132 03                         SME_wvX4F_4CE:	dc.b 3	
00026133 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00026138 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
0002613D FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
00026142 03                         SME_wvX4F_4DE:	dc.b 3	
00026143 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00026148 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
0002614D F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00026152 06                         SME_wvX4F_4EE:	dc.b 6	
00026153 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026158 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002615D F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026162 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026167 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002616C FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026171 06                         SME_wvX4F_50D:	dc.b 6	
00026172 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026177 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002617C EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026181 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026186 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002618B 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026190 04                         SME_wvX4F_52C:	dc.b 4	
00026191 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026196 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002619B EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000261A0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000261A5 03                         SME_wvX4F_541:	dc.b 3	
000261A6 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000261AB F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000261B0 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000261B5 05                         SME_wvX4F_551:	dc.b 5	
000261B6 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000261BB EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000261C0 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000261C5 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000261CA 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000261CF 04                         SME_wvX4F_56B:	dc.b 4	
000261D0 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000261D5 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000261DA EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000261DF 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000261E4 03                         SME_wvX4F_580:	dc.b 3	
000261E5 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000261EA 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000261EF EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000261F4 05                         SME_wvX4F_590:	dc.b 5	
000261F5 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000261FA EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000261FF F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026204 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026209 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002620E 02                         SME_wvX4F_5AA:	dc.b 2	
0002620F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026214 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026219 02                         SME_wvX4F_5B5:	dc.b 2	
0002621A FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002621F EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00026224 02                         SME_wvX4F_5C0:	dc.b 2	
00026225 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002622A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002622F 02                         SME_wvX4F_5CB:	dc.b 2	
00026230 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026235 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002623A 02                         SME_wvX4F_5D6:	dc.b 2	
0002623B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026240 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026245 02                         SME_wvX4F_5E1:	dc.b 2	
00026246 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002624B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026250 02                         SME_wvX4F_5EC:	dc.b 2	
00026251 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026256 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002625B 02                         SME_wvX4F_5F7:	dc.b 2	
0002625C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026261 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026266 04                         SME_wvX4F_602:	dc.b 4	
00026267 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002626C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026271 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026276 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002627B 03                         SME_wvX4F_617:	dc.b 3	
0002627C F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
00026281 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00026286 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
0002628B 03                         SME_wvX4F_627:	dc.b 3	
0002628C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026291 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026296 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002629B 03                         SME_wvX4F_637:	dc.b 3	
0002629C FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262A1 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262A6 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262AB 04                         SME_wvX4F_647:	dc.b 4	
000262AC EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262B1 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262B6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262BB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262C0 03                         SME_wvX4F_65C:	dc.b 3	
000262C1 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262C6 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262CB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262D0 03                         SME_wvX4F_66C:	dc.b 3	
000262D1 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262D6 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262DB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262E0 03                         SME_wvX4F_67C:	dc.b 3	
000262E1 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000262E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262EB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262F0 02                         SME_wvX4F_68C:	dc.b 2	
000262F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000262F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000262FB 02                         SME_wvX4F_697:	dc.b 2	
000262FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026301 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026306 02                         SME_wvX4F_6A2:	dc.b 2	
00026307 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002630C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026311 02                         SME_wvX4F_6AD:	dc.b 2	
00026312 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026317 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002631C 02                         SME_wvX4F_6B8:	dc.b 2	
0002631D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026322 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026327 02                         SME_wvX4F_6C3:	dc.b 2	
00026328 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002632D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026332 02                         SME_wvX4F_6CE:	dc.b 2	
00026333 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026338 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002633D 02                         SME_wvX4F_6D9:	dc.b 2	
0002633E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026343 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026348 04                         SME_wvX4F_6E4:	dc.b 4	
00026349 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002634E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026353 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026358 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002635D 03                         SME_wvX4F_6F9:	dc.b 3	
0002635E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00026363 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026368 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002636D 02                         SME_wvX4F_709:	dc.b 2	
0002636E F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026373 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026378 03                         SME_wvX4F_714:	dc.b 3	
00026379 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002637E 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026383 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00026388 04                         SME_wvX4F_724:	dc.b 4	
00026389 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002638E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026393 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026398 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002639D 03                         SME_wvX4F_739:	dc.b 3	
0002639E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263A3 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263A8 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263AD 02                         SME_wvX4F_749:	dc.b 2	
000263AE F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000263B3 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000263B8 03                         SME_wvX4F_754:	dc.b 3	
000263B9 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263BE 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263C3 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263C8 03                         SME_wvX4F_764:	dc.b 3	
000263C9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263CE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263D3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263D8 03                         SME_wvX4F_774:	dc.b 3	
000263D9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263DE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263E3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263E8 09                         SME_wvX4F_784:	dc.b 9	
000263E9 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000263EE F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000263F3 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000263F8 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000263FD 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026402 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026407 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002640C F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00026411 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026416 09                         SME_wvX4F_7B2:	dc.b 9	
00026417 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002641C F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00026421 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00026426 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002642B 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026430 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026435 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002643A F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002643F F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026444 03                         SME_wvX4F_7E0:	dc.b 3	
00026445 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
0002644A 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002644F EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00026454 03                         SME_wvX4F_7F0:	dc.b 3	
00026455 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
0002645A EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002645F EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00026464 03                         SME_wvX4F_800:	dc.b 3	
00026465 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
0002646A EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002646F 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00026474 05                         SME_wvX4F_810:	dc.b 5	
00026475 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
0002647A 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002647F F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00026484 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00026489 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002648E 03                         SME_wvX4F_82A:	dc.b 3	
0002648F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00026494 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00026499 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002649E 03                         SME_wvX4F_83A:	dc.b 3	
0002649F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000264A4 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000264A9 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000264AE 05                         SME_wvX4F_84A:	dc.b 5	
000264AF 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000264B4 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000264B9 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000264BE ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264C3 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264C8 05                         SME_wvX4F_864:	dc.b 5	
000264C9 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000264CE 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000264D3 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000264D8 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264DD ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264E2 04                         SME_wvX4F_87E:	dc.b 4	
000264E3 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000264E8 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000264ED E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000264F2 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000264F7 04                         SME_wvX4F_893:	dc.b 4	
000264F8 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000264FD 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00026502 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00026507 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
0002650C 04                         SME_wvX4F_8A8:	dc.b 4	
0002650D EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00026512 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00026517 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
0002651C 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00026521 04                         SME_wvX4F_8BD:	dc.b 4	
00026522 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00026527 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
0002652C F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00026531 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00026536 01                         SME_wvX4F_8D2:	dc.b 1	
00026537 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002653C 01                         SME_wvX4F_8D8:	dc.b 1	
0002653D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026542 01                         SME_wvX4F_8DE:	dc.b 1	
00026543 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026548 01                         SME_wvX4F_8E4:	dc.b 1	
00026549 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002654E 01                         SME_wvX4F_8EA:	dc.b 1	
0002654F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026554 01                         SME_wvX4F_8F0:	dc.b 1	
00026555 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002655A 01                         SME_wvX4F_8F6:	dc.b 1	
0002655B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026560 03                         SME_wvX4F_8FC:	dc.b 3	
00026561 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00026566 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
0002656B F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00026570 01                         SME_wvX4F_90C:	dc.b 1	
00026571 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026576 02                         SME_wvX4F_912:	dc.b 2	
00026577 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
0002657C F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00026581 01                         SME_wvX4F_91D:	dc.b 1	
00026582 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026587 02                         SME_wvX4F_923:	dc.b 2	
00026588 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0002658D 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00026592 01                         SME_wvX4F_92E:	dc.b 1	
00026593 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026598 04                         SME_wvX4F_934:	dc.b 4	
00026599 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002659E FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000265A3 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265A8 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000265AD 07                         SME_wvX4F_949:	dc.b 7	
000265AE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000265B3 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000265B8 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000265BD F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000265C2 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000265C7 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000265CC FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000265D1 05                         SME_wvX4F_96D:	dc.b 5	
000265D2 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000265D7 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000265DC ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000265E1 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265E6 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000265EB 03                         SME_wvX4F_987:	dc.b 3	
000265EC F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000265F1 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000265F6 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000265FB 05                         SME_wvX4F_997:	dc.b 5	
000265FC F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00026601 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00026606 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
0002660B 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00026610 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00026615 04                         SME_wvX4F_9B1:	dc.b 4	
00026616 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
0002661B F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00026620 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00026625 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
0002662A 04                         SME_wvX4F_9C6:	dc.b 4	
0002662B F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00026630 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00026635 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
0002663A 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002663F 04                         SME_wvX4F_9DB:	dc.b 4	
00026640 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00026645 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002664A F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002664F EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00026654 09                         SME_wvX4F_9F0:	dc.b 9	
00026655 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
0002665A EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002665F F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00026664 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00026669 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002666E F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00026673 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00026678 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002667D FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00026682 03                         SME_wvX4F_A1E:	dc.b 3	
00026683 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00026688 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002668D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00026692 03                         SME_wvX4F_A2E:	dc.b 3	
00026693 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00026698 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002669D EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
000266A2 03                         SME_wvX4F_A3E:	dc.b 3	
000266A3 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
000266A8 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
000266AD F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
000266B2 00                         SME_wvX4F_A4E:	dc.b 0	
000266B3 08                         SME_wvX4F_A4F:	dc.b 8	
000266B4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000266B9 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000266BE F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000266C3 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000266C8 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000266CD 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000266D2 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000266D7 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000266DC 07                         SME_wvX4F_A78:	dc.b 7	
000266DD E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000266E2 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000266E7 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000266EC F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000266F1 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000266F6 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000266FB 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00026700 04                         SME_wvX4F_A9C:	dc.b 4	
00026701 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00026706 F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
0002670B E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00026710 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00026715 03                         SME_wvX4F_AB1:	dc.b 3	
00026716 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
0002671B FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00026720 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00026725 03                         SME_wvX4F_AC1:	dc.b 3	
00026726 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002672B FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026730 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026735 03                         SME_wvX4F_AD1:	dc.b 3	
00026736 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002673B 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00026740 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00026745 02                         SME_wvX4F_AE1:	dc.b 2	
00026746 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
0002674B F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00026750 03                         SME_wvX4F_AEC:	dc.b 3	
00026751 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026756 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
0002675B FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00026760 03                         SME_wvX4F_AFC:	dc.b 3	
00026761 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026766 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
0002676B 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00026770 03                         SME_wvX4F_B0C:	dc.b 3	
00026771 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00026776 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
0002677B 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00026780 03                         SME_wvX4F_B1C:	dc.b 3	
00026781 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026786 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002678B 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026790 04                         SME_wvX4F_B2C:	dc.b 4	
00026791 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00026796 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
0002679B 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
000267A0 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000267A5 08                         SME_wvX4F_B41:	dc.b 8	
000267A6 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
000267AB F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
000267B0 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
000267B5 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
000267BA F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
000267BF F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
000267C4 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
000267C9 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000267CE 04                         SME_wvX4F_B6A:	dc.b 4	
000267CF F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267D4 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267D9 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267DE F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267E3 04                         SME_wvX4F_B7F:	dc.b 4	
000267E4 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267E9 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267EE F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267F3 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267F8 05                         SME_wvX4F_B94:	dc.b 5	
000267F9 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267FE F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00026803 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026808 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
0002680D 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00026812 05                         SME_wvX4F_BAE:	dc.b 5	
00026813 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00026818 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
0002681D 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026822 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00026827 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
0002682C 02                         SME_wvX4F_BC8:	dc.b 2	
0002682D ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026832 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026837 05                         SME_wvX4F_BD3:	dc.b 5	
00026838 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
0002683D ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00026842 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00026847 ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
0002684C ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00026851 03                         SME_wvX4F_BED:	dc.b 3	
00026852 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00026857 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002685C 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026861 05                         SME_wvX4F_BFD:	dc.b 5	
00026862 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00026867 F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
0002686C F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00026871 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00026876 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
0002687B 02                         SME_wvX4F_C17:	dc.b 2	
0002687C ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026881 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026886 03                         SME_wvX4F_C22:	dc.b 3	
00026887 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002688C 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026891 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026896 03                         SME_wvX4F_C32:	dc.b 3	
00026897 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002689C 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
000268A1 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
000268A6 03                         SME_wvX4F_C42:	dc.b 3	
000268A7 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
000268AC 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
000268B1 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
000268B6 02                         SME_wvX4F_C52:	dc.b 2	
000268B7 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000268BC FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
000268C1 03                         SME_wvX4F_C5D:	dc.b 3	
000268C2 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
000268C7 E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
000268CC F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000268D1 0B                         SME_wvX4F_C6D:	dc.b $B	
000268D2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268D7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268DC 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000268E1 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000268E6 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000268EB F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000268F0 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000268F5 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000268FA 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000268FF 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00026904 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00026909 06                         SME_wvX4F_CA5:	dc.b 6	
0002690A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002690F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00026914 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00026919 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
0002691E 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00026923 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00026928 03                         SME_wvX4F_CC4:	dc.b 3	
00026929 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
0002692E FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00026933 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00026938 07                         SME_wvX4F_CD4:	dc.b 7	
00026939 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
0002693E 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00026943 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00026948 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
0002694D F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00026952 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00026957 F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
0002695C 02                         SME_wvX4F_CF8:	dc.b 2	
0002695D F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00026962 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00026967 04                         SME_wvX4F_D03:	dc.b 4	
00026968 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0002696D F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00026972 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00026977 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
0002697C 03                         SME_wvX4F_D18:	dc.b 3	
0002697D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026982 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00026987 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002698C 03                         SME_wvX4F_D28:	dc.b 3	
0002698D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026992 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00026997 F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
0002699C 04                         SME_wvX4F_D38:	dc.b 4	
0002699D 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
000269A2 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
000269A7 F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
000269AC F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
000269B1 01                         SME_wvX4F_D4D:	dc.b 1	
000269B2 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269B7 01                         SME_wvX4F_D53:	dc.b 1	
000269B8 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269BD 01                         SME_wvX4F_D59:	dc.b 1	
000269BE F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269C3 01                         SME_wvX4F_D5F:	dc.b 1	
000269C4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269C9 02                         SME_wvX4F_D65:	dc.b 2	
000269CA F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
000269CF F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
000269D4 01                         SME_wvX4F_D70:	dc.b 1	
000269D5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269DA 01                         SME_wvX4F_D76:	dc.b 1	
000269DB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269E0 01                         SME_wvX4F_D7C:	dc.b 1	
000269E1 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000269E6 03                         SME_wvX4F_D82:	dc.b 3	
000269E7 E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
000269EC 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
000269F1 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
000269F6 03                         SME_wvX4F_D92:	dc.b 3	
000269F7 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
000269FC E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
00026A01 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A06 03                         SME_wvX4F_DA2:	dc.b 3	
00026A07 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00026A0C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A11 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A16 03                         SME_wvX4F_DB2:	dc.b 3	
00026A17 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00026A1C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A21 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A26 03                         SME_wvX4F_DC2:	dc.b 3	
00026A27 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00026A2C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A31 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A36 08                         SME_wvX4F_DD2:	dc.b 8	
00026A37 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00026A3C 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00026A41 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00026A46 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00026A4B 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00026A50 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00026A55 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00026A5A E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00026A5F 03                         SME_wvX4F_DFB:	dc.b 3	
00026A60 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A65 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A6A E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
00026A6F 03                         SME_wvX4F_E0B:	dc.b 3	
00026A70 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A75 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A7A E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
00026A7F 07                         SME_wvX4F_E1B:	dc.b 7	
00026A80 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A85 F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
00026A8A F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
00026A8F EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
00026A94 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026A99 E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
00026A9E E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
00026AA3 03                         SME_wvX4F_E3F:	dc.b 3	
00026AA4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026AA9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026AAE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026AB3 01                         SME_wvX4F_E4F:	dc.b 1	
00026AB4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00026AB9 01                         SME_wvX4F_E55:	dc.b 1	
00026ABA FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00026ABF 07                         SME_wvX4F_E5B:	dc.b 7	
00026AC0 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
00026AC5 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
00026ACA 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
00026ACF FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
00026AD4 FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
00026AD9 FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
00026ADE FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
00026AE3 03                         SME_wvX4F_E7F:	dc.b 3	
00026AE4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026AE9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026AEE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026AF3 01                         SME_wvX4F_E8F:	dc.b 1	
00026AF4 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00026AF9 02                         SME_wvX4F_E95:	dc.b 2	
00026AFA FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
00026AFF FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
00026B04 02                         SME_wvX4F_EA0:	dc.b 2	
00026B05 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026B0A 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026B0F 05                         SME_wvX4F_EAB:	dc.b 5	
00026B10 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026B15 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026B1A FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026B1F 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00026B24 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026B29 06                         SME_wvX4F_EC5:	dc.b 6	
00026B2A ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026B2F ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026B34 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026B39 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026B3E FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00026B43 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00026B48 04                         SME_wvX4F_EE4:	dc.b 4	
00026B49 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026B4E EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026B53 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026B58 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026B5D 03                         SME_wvX4F_EF9:	dc.b 3	
00026B5E ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00026B63 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00026B68 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026B6D 05                         SME_wvX4F_F09:	dc.b 5	
00026B6E EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026B73 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00026B78 FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026B7D 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026B82 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00026B87 04                         SME_wvX4F_F23:	dc.b 4	
00026B88 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026B8D EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026B92 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00026B97 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00026B9C 03                         SME_wvX4F_F38:	dc.b 3	
00026B9D ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00026BA2 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00026BA7 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00026BAC 05                         SME_wvX4F_F48:	dc.b 5	
00026BAD ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00026BB2 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00026BB7 FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00026BBC FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00026BC1 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00026BC6 03                         SME_wvX4F_F62:	dc.b 3	
00026BC7 EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
00026BCC FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
00026BD1 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
00026BD6 01                         SME_wvX4F_F72:	dc.b 1	
00026BD7 EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
00026BDC 01                         SME_wvX4F_F78:	dc.b 1	
00026BDD F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00026BE2 03                         SME_wvX4F_F7E:	dc.b 3	
00026BE3 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00026BE8 F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
00026BED F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
00026BF2 03                         SME_wvX4F_F8E:	dc.b 3	
00026BF3 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
00026BF8 FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
00026BFD 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026C02 01                         SME_wvX4F_F9E:	dc.b 1	
00026C03 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026C08 03                         SME_wvX4F_FA4:	dc.b 3	
00026C09 FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
00026C0E F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026C13 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026C18 02                         SME_wvX4F_FB4:	dc.b 2	
00026C19 EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
00026C1E F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026C23 06                         SME_wvX4F_FBF:	dc.b 6	
00026C24 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026C29 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00026C2E F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026C33 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026C38 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00026C3D FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026C42 06                         SME_wvX4F_FDE:	dc.b 6	
00026C43 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C48 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00026C4D EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026C52 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026C57 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00026C5C 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026C61 04                         SME_wvX4F_FFD:	dc.b 4	
00026C62 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C67 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00026C6C EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00026C71 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026C76 03                         SME_wvX4F_1012:	dc.b 3	
00026C77 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00026C7C F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00026C81 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00026C86 05                         SME_wvX4F_1022:	dc.b 5	
00026C87 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026C8C EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00026C91 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00026C96 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00026C9B 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00026CA0 04                         SME_wvX4F_103C:	dc.b 4	
00026CA1 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026CA6 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00026CAB EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00026CB0 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00026CB5 03                         SME_wvX4F_1051:	dc.b 3	
00026CB6 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00026CBB 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00026CC0 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00026CC5 05                         SME_wvX4F_1061:	dc.b 5	
00026CC6 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026CCB EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00026CD0 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026CD5 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026CDA 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00026CDF 03                         SME_wvX4F_107B:	dc.b 3	
00026CE0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026CE5 1008 000C F0               		dc.b $10, 8, 0, $C, $F0	
00026CEA 0800 000F F0               		dc.b 8, 0, 0, $F, $F0	
00026CEF 05                         SME_wvX4F_108B:	dc.b 5	
00026CF0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026CF5 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026CFA 1004 000E F8               		dc.b $10, 4, 0, $E, $F8	
00026CFF F004 0010 F8               		dc.b $F0, 4, 0, $10, $F8	
00026D04 1000 0012 08               		dc.b $10, 0, 0, $12, 8	
00026D09 04                         SME_wvX4F_10A5:	dc.b 4	
00026D0A F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026D0F 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026D14 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
00026D19 F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
00026D1E 04                         SME_wvX4F_10BA:	dc.b 4	
00026D1F F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026D24 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026D29 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
00026D2E F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
00026D33 02                         SME_wvX4F_10CF:	dc.b 2	
00026D34 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D39 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D3E 02                         SME_wvX4F_10DA:	dc.b 2	
00026D3F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D44 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D49 02                         SME_wvX4F_10E5:	dc.b 2	
00026D4A F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D4F E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D54 02                         SME_wvX4F_10F0:	dc.b 2	
00026D55 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D5A E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D5F 02                         SME_wvX4F_10FB:	dc.b 2	
00026D60 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00026D65 F80F 0004 F0               		dc.b $F8, $F, 0, 4, $F0	
00026D6A 03                         SME_wvX4F_1106:	dc.b 3	
00026D6B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D70 F00C 0010 F0               		dc.b $F0, $C, 0, $10, $F0	
00026D75 F002 0014 E8               		dc.b $F0, 2, 0, $14, $E8	
00026D7A 03                         SME_wvX4F_1116:	dc.b 3	
00026D7B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D80 F008 0010 F0               		dc.b $F0, 8, 0, $10, $F0	
00026D85 F002 0013 E8               		dc.b $F0, 2, 0, $13, $E8	
00026D8A 07                         SME_wvX4F_1126:	dc.b 7	
00026D8B F00A 0000 E8               		dc.b $F0, $A, 0, 0, $E8	
00026D90 F000 0009 00               		dc.b $F0, 0, 0, 9, 0	
00026D95 F803 000A 00               		dc.b $F8, 3, 0, $A, 0	
00026D9A 0800 000E 08               		dc.b 8, 0, 0, $E, 8	
00026D9F 0000 000F 08               		dc.b 0, 0, 0, $F, 8	
00026DA4 1000 0010 08               		dc.b $10, 0, 0, $10, 8	
00026DA9 0804 0011 F0               		dc.b 8, 4, 0, $11, $F0	
00026DAE 02                         SME_wvX4F_114A:	dc.b 2	
00026DAF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DB4 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DB9 02                         SME_wvX4F_1155:	dc.b 2	
00026DBA F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DBF E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DC4 02                         SME_wvX4F_1160:	dc.b 2	
00026DC5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DCA E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DCF 02                         SME_wvX4F_116B:	dc.b 2	
00026DD0 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DD5 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DDA 03                         SME_wvX4F_1176:	dc.b 3	
00026DDB F802 0000 10               		dc.b $F8, 2, 0, 0, $10	
00026DE0 F80F 0003 F0               		dc.b $F8, $F, 0, 3, $F0	
00026DE5 F008 0013 00               		dc.b $F0, 8, 0, $13, 0	
00026DEA 04                         SME_wvX4F_1186:	dc.b 4	
00026DEB F00F 0000 F8               		dc.b $F0, $F, 0, 0, $F8	
00026DF0 100C 0010 F0               		dc.b $10, $C, 0, $10, $F0	
00026DF5 0001 0014 F0               		dc.b 0, 1, 0, $14, $F0	
00026DFA F800 0016 F0               		dc.b $F8, 0, 0, $16, $F0	
00026DFF 00                         SME_wvX4F_119B:	dc.b 0	
00026E00 00                         SME_wvX4F_119C:	dc.b 0	
00026E01 03                         SME_wvX4F_119D:	dc.b 3	
00026E02 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026E07 F803 000C 08               		dc.b $F8, 3, 0, $C, 8	
00026E0C 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00026E11 03                         SME_wvX4F_11AD:	dc.b 3	
00026E12 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026E17 080D 000C F0               		dc.b 8, $D, 0, $C, $F0	
00026E1C F801 0014 08               		dc.b $F8, 1, 0, $14, 8	
00026E21 00                         SME_wvX4F_11BD:	dc.b 0	
00026E22 00                         SME_wvX4F_11BE:	dc.b 0	
00026E23 02                         SME_wvX4F_11BF:	dc.b 2	
00026E24 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0	
00026E29 F40F 0004 F0               		dc.b $F4, $F, 0, 4, $F0	
00026E2E 01                         SME_wvX4F_11CA:	dc.b 1	
00026E2F F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E34 02                         SME_wvX4F_11D0:	dc.b 2	
00026E35 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E3A E40D 0010 F0               		dc.b $E4, $D, 0, $10, $F0	
00026E3F 02                         SME_wvX4F_11DB:	dc.b 2	
00026E40 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E45 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E4A 02                         SME_wvX4F_11E6:	dc.b 2	
00026E4B E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E50 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E55 02                         SME_wvX4F_11F1:	dc.b 2	
00026E56 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E5B 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E60 05                         SME_wvX4F_11FC:	dc.b 5	
00026E61 0209 0000 00               		dc.b 2, 9, 0, 0, 0	
00026E66 E207 0006 F0               		dc.b $E2, 7, 0, 6, $F0	
00026E6B EA06 000E 00               		dc.b $EA, 6, 0, $E, 0	
00026E70 E200 0014 00               		dc.b $E2, 0, 0, $14, 0	
00026E75 0200 0015 F8               		dc.b 2, 0, 0, $15, $F8	
00026E7A 05                         SME_wvX4F_1216:	dc.b 5	
00026E7B E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E80 020C 000C F0               		dc.b 2, $C, 0, $C, $F0	
00026E85 0201 0010 10               		dc.b 2, 1, 0, $10, $10	
00026E8A 0A04 0012 00               		dc.b $A, 4, 0, $12, 0	
00026E8F EA02 0014 08               		dc.b $EA, 2, 0, $14, 8	
00026E94 02                         SME_wvX4F_1230:	dc.b 2	
00026E95 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E9A 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E9F 02                         SME_wvX4F_123B:	dc.b 2	
00026EA0 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EA5 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EAA 02                         SME_wvX4F_1246:	dc.b 2	
00026EAB E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EB0 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EB5 02                         SME_wvX4F_1251:	dc.b 2	
00026EB6 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EBB 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EC0 02                         SME_wvX4F_125C:	dc.b 2	
00026EC1 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EC6 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026ECB 02                         SME_wvX4F_1267:	dc.b 2	
00026ECC E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026ED1 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026ED6 02                         SME_wvX4F_1272:	dc.b 2	
00026ED7 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EDC 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EE1 02                         SME_wvX4F_127D:	dc.b 2	
00026EE2 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EE7 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EEC 02                         SME_wvX4F_1288:	dc.b 2	
00026EED E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026EF2 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026EF7 02                         SME_wvX4F_1293:	dc.b 2	
00026EF8 E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026EFD 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026F02                            		even
00026F02                            		even
00026F02                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026F02                            ; --------------------------------------------------------------------------------
00026F02                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026F02                            
00026F02                            SME_I2OLA:	
00026F02 0000 0000                  		dc.w SME_I2OLA_1EE-SME_I2OLA, SME_I2OLA_1EF-SME_I2OLA	
00026F06 0000 0000                  		dc.w SME_I2OLA_1F8-SME_I2OLA, SME_I2OLA_20B-SME_I2OLA	
00026F0A 0000 0000                  		dc.w SME_I2OLA_220-SME_I2OLA, SME_I2OLA_229-SME_I2OLA	
00026F0E 0000 0000                  		dc.w SME_I2OLA_230-SME_I2OLA, SME_I2OLA_237-SME_I2OLA	
00026F12 0000 0000                  		dc.w SME_I2OLA_240-SME_I2OLA, SME_I2OLA_245-SME_I2OLA	
00026F16 0000 0000                  		dc.w SME_I2OLA_24C-SME_I2OLA, SME_I2OLA_253-SME_I2OLA	
00026F1A 0000 0000                  		dc.w SME_I2OLA_25A-SME_I2OLA, SME_I2OLA_263-SME_I2OLA	
00026F1E 0000 0000                  		dc.w SME_I2OLA_26A-SME_I2OLA, SME_I2OLA_279-SME_I2OLA	
00026F22 0000 0000                  		dc.w SME_I2OLA_284-SME_I2OLA, SME_I2OLA_28B-SME_I2OLA	
00026F26 0000 0000                  		dc.w SME_I2OLA_292-SME_I2OLA, SME_I2OLA_29B-SME_I2OLA	
00026F2A 0000 0000                  		dc.w SME_I2OLA_2A0-SME_I2OLA, SME_I2OLA_2A7-SME_I2OLA	
00026F2E 0000 0000                  		dc.w SME_I2OLA_2B2-SME_I2OLA, SME_I2OLA_2BD-SME_I2OLA	
00026F32 0000 0000                  		dc.w SME_I2OLA_2CA-SME_I2OLA, SME_I2OLA_2D3-SME_I2OLA	
00026F36 0000 0000                  		dc.w SME_I2OLA_2DA-SME_I2OLA, SME_I2OLA_2E5-SME_I2OLA	
00026F3A 0000 0000                  		dc.w SME_I2OLA_2EE-SME_I2OLA, SME_I2OLA_2F5-SME_I2OLA	
00026F3E 0000 0000                  		dc.w SME_I2OLA_300-SME_I2OLA, SME_I2OLA_309-SME_I2OLA	
00026F42 0000 0000                  		dc.w SME_I2OLA_30E-SME_I2OLA, SME_I2OLA_313-SME_I2OLA	
00026F46 0000 0000                  		dc.w SME_I2OLA_31E-SME_I2OLA, SME_I2OLA_327-SME_I2OLA	
00026F4A 0000 0000                  		dc.w SME_I2OLA_32C-SME_I2OLA, SME_I2OLA_333-SME_I2OLA	
00026F4E 0000 0000                  		dc.w SME_I2OLA_33A-SME_I2OLA, SME_I2OLA_347-SME_I2OLA	
00026F52 0000 0000                  		dc.w SME_I2OLA_354-SME_I2OLA, SME_I2OLA_35D-SME_I2OLA	
00026F56 0000 0000                  		dc.w SME_I2OLA_364-SME_I2OLA, SME_I2OLA_36F-SME_I2OLA	
00026F5A 0000 0000                  		dc.w SME_I2OLA_378-SME_I2OLA, SME_I2OLA_37F-SME_I2OLA	
00026F5E 0000 0000                  		dc.w SME_I2OLA_38A-SME_I2OLA, SME_I2OLA_38F-SME_I2OLA	
00026F62 0000 0000                  		dc.w SME_I2OLA_394-SME_I2OLA, SME_I2OLA_399-SME_I2OLA	
00026F66 0000 0000                  		dc.w SME_I2OLA_39E-SME_I2OLA, SME_I2OLA_3A3-SME_I2OLA	
00026F6A 0000 0000                  		dc.w SME_I2OLA_3A8-SME_I2OLA, SME_I2OLA_3AD-SME_I2OLA	
00026F6E 0000 0000                  		dc.w SME_I2OLA_3B2-SME_I2OLA, SME_I2OLA_3BB-SME_I2OLA	
00026F72 0000 0000                  		dc.w SME_I2OLA_3C2-SME_I2OLA, SME_I2OLA_3C9-SME_I2OLA	
00026F76 0000 0000                  		dc.w SME_I2OLA_3D0-SME_I2OLA, SME_I2OLA_3D9-SME_I2OLA	
00026F7A 0000 0000                  		dc.w SME_I2OLA_3E0-SME_I2OLA, SME_I2OLA_3E7-SME_I2OLA	
00026F7E 0000 0000                  		dc.w SME_I2OLA_3EE-SME_I2OLA, SME_I2OLA_3F3-SME_I2OLA	
00026F82 0000 0000                  		dc.w SME_I2OLA_3F8-SME_I2OLA, SME_I2OLA_3FD-SME_I2OLA	
00026F86 0000 0000                  		dc.w SME_I2OLA_402-SME_I2OLA, SME_I2OLA_407-SME_I2OLA	
00026F8A 0000 0000                  		dc.w SME_I2OLA_40C-SME_I2OLA, SME_I2OLA_411-SME_I2OLA	
00026F8E 0000 0000                  		dc.w SME_I2OLA_416-SME_I2OLA, SME_I2OLA_41F-SME_I2OLA	
00026F92 0000 0000                  		dc.w SME_I2OLA_426-SME_I2OLA, SME_I2OLA_42B-SME_I2OLA	
00026F96 0000 0000                  		dc.w SME_I2OLA_432-SME_I2OLA, SME_I2OLA_43B-SME_I2OLA	
00026F9A 0000 0000                  		dc.w SME_I2OLA_442-SME_I2OLA, SME_I2OLA_447-SME_I2OLA	
00026F9E 0000 0000                  		dc.w SME_I2OLA_44E-SME_I2OLA, SME_I2OLA_455-SME_I2OLA	
00026FA2 0000 0000                  		dc.w SME_I2OLA_45C-SME_I2OLA, SME_I2OLA_46F-SME_I2OLA	
00026FA6 0000 0000                  		dc.w SME_I2OLA_482-SME_I2OLA, SME_I2OLA_489-SME_I2OLA	
00026FAA 0000 0000                  		dc.w SME_I2OLA_490-SME_I2OLA, SME_I2OLA_497-SME_I2OLA	
00026FAE 0000 0000                  		dc.w SME_I2OLA_4A2-SME_I2OLA, SME_I2OLA_4A9-SME_I2OLA	
00026FB2 0000 0000                  		dc.w SME_I2OLA_4B0-SME_I2OLA, SME_I2OLA_4BB-SME_I2OLA	
00026FB6 0000 0000                  		dc.w SME_I2OLA_4C6-SME_I2OLA, SME_I2OLA_4CF-SME_I2OLA	
00026FBA 0000 0000                  		dc.w SME_I2OLA_4D8-SME_I2OLA, SME_I2OLA_4E1-SME_I2OLA	
00026FBE 0000 0000                  		dc.w SME_I2OLA_4EA-SME_I2OLA, SME_I2OLA_4ED-SME_I2OLA	
00026FC2 0000 0000                  		dc.w SME_I2OLA_4F0-SME_I2OLA, SME_I2OLA_4F3-SME_I2OLA	
00026FC6 0000 0000                  		dc.w SME_I2OLA_4F6-SME_I2OLA, SME_I2OLA_4F9-SME_I2OLA	
00026FCA 0000 0000                  		dc.w SME_I2OLA_4FC-SME_I2OLA, SME_I2OLA_4FF-SME_I2OLA	
00026FCE 0000 0000                  		dc.w SME_I2OLA_506-SME_I2OLA, SME_I2OLA_509-SME_I2OLA	
00026FD2 0000 0000                  		dc.w SME_I2OLA_50E-SME_I2OLA, SME_I2OLA_511-SME_I2OLA	
00026FD6 0000 0000                  		dc.w SME_I2OLA_516-SME_I2OLA, SME_I2OLA_519-SME_I2OLA	
00026FDA 0000 0000                  		dc.w SME_I2OLA_522-SME_I2OLA, SME_I2OLA_531-SME_I2OLA	
00026FDE 0000 0000                  		dc.w SME_I2OLA_53C-SME_I2OLA, SME_I2OLA_543-SME_I2OLA	
00026FE2 0000 0000                  		dc.w SME_I2OLA_54E-SME_I2OLA, SME_I2OLA_557-SME_I2OLA	
00026FE6 0000 0000                  		dc.w SME_I2OLA_560-SME_I2OLA, SME_I2OLA_569-SME_I2OLA	
00026FEA 0000 0000                  		dc.w SME_I2OLA_57C-SME_I2OLA, SME_I2OLA_583-SME_I2OLA	
00026FEE 0000 0000                  		dc.w SME_I2OLA_58A-SME_I2OLA, SME_I2OLA_591-SME_I2OLA	
00026FF2 0000 0000                  		dc.w SME_I2OLA_592-SME_I2OLA, SME_I2OLA_5A3-SME_I2OLA	
00026FF6 0000 0000                  		dc.w SME_I2OLA_5B2-SME_I2OLA, SME_I2OLA_5BB-SME_I2OLA	
00026FFA 0000 0000                  		dc.w SME_I2OLA_5C2-SME_I2OLA, SME_I2OLA_5C9-SME_I2OLA	
00026FFE 0000 0000                  		dc.w SME_I2OLA_5D0-SME_I2OLA, SME_I2OLA_5D3-SME_I2OLA	
00027002 0000 0000                  		dc.w SME_I2OLA_5DA-SME_I2OLA, SME_I2OLA_5E1-SME_I2OLA	
00027006 0000 0000                  		dc.w SME_I2OLA_5E8-SME_I2OLA, SME_I2OLA_5EF-SME_I2OLA	
0002700A 0000 0000                  		dc.w SME_I2OLA_5F8-SME_I2OLA, SME_I2OLA_609-SME_I2OLA	
0002700E 0000 0000                  		dc.w SME_I2OLA_612-SME_I2OLA, SME_I2OLA_61B-SME_I2OLA	
00027012 0000 0000                  		dc.w SME_I2OLA_626-SME_I2OLA, SME_I2OLA_631-SME_I2OLA	
00027016 0000 0000                  		dc.w SME_I2OLA_636-SME_I2OLA, SME_I2OLA_641-SME_I2OLA	
0002701A 0000 0000                  		dc.w SME_I2OLA_648-SME_I2OLA, SME_I2OLA_653-SME_I2OLA	
0002701E 0000 0000                  		dc.w SME_I2OLA_658-SME_I2OLA, SME_I2OLA_65F-SME_I2OLA	
00027022 0000 0000                  		dc.w SME_I2OLA_666-SME_I2OLA, SME_I2OLA_66D-SME_I2OLA	
00027026 0000 0000                  		dc.w SME_I2OLA_672-SME_I2OLA, SME_I2OLA_679-SME_I2OLA	
0002702A 0000 0000                  		dc.w SME_I2OLA_690-SME_I2OLA, SME_I2OLA_69D-SME_I2OLA	
0002702E 0000 0000                  		dc.w SME_I2OLA_6A4-SME_I2OLA, SME_I2OLA_6B3-SME_I2OLA	
00027032 0000 0000                  		dc.w SME_I2OLA_6B8-SME_I2OLA, SME_I2OLA_6C1-SME_I2OLA	
00027036 0000 0000                  		dc.w SME_I2OLA_6C8-SME_I2OLA, SME_I2OLA_6CF-SME_I2OLA	
0002703A 0000 0000                  		dc.w SME_I2OLA_6D8-SME_I2OLA, SME_I2OLA_6DB-SME_I2OLA	
0002703E 0000 0000                  		dc.w SME_I2OLA_6DE-SME_I2OLA, SME_I2OLA_6E1-SME_I2OLA	
00027042 0000 0000                  		dc.w SME_I2OLA_6E4-SME_I2OLA, SME_I2OLA_6E7-SME_I2OLA	
00027046 0000 0000                  		dc.w SME_I2OLA_6EA-SME_I2OLA, SME_I2OLA_6ED-SME_I2OLA	
0002704A 0000 0000                  		dc.w SME_I2OLA_6F0-SME_I2OLA, SME_I2OLA_6F7-SME_I2OLA	
0002704E 0000 0000                  		dc.w SME_I2OLA_6FE-SME_I2OLA, SME_I2OLA_705-SME_I2OLA	
00027052 0000 0000                  		dc.w SME_I2OLA_70C-SME_I2OLA, SME_I2OLA_713-SME_I2OLA	
00027056 0000 0000                  		dc.w SME_I2OLA_724-SME_I2OLA, SME_I2OLA_72B-SME_I2OLA	
0002705A 0000 0000                  		dc.w SME_I2OLA_732-SME_I2OLA, SME_I2OLA_741-SME_I2OLA	
0002705E 0000 0000                  		dc.w SME_I2OLA_748-SME_I2OLA, SME_I2OLA_74B-SME_I2OLA	
00027062 0000 0000                  		dc.w SME_I2OLA_750-SME_I2OLA, SME_I2OLA_75F-SME_I2OLA	
00027066 0000 0000                  		dc.w SME_I2OLA_766-SME_I2OLA, SME_I2OLA_769-SME_I2OLA	
0002706A 0000 0000                  		dc.w SME_I2OLA_76E-SME_I2OLA, SME_I2OLA_773-SME_I2OLA	
0002706E 0000 0000                  		dc.w SME_I2OLA_77E-SME_I2OLA, SME_I2OLA_78B-SME_I2OLA	
00027072 0000 0000                  		dc.w SME_I2OLA_794-SME_I2OLA, SME_I2OLA_79B-SME_I2OLA	
00027076 0000 0000                  		dc.w SME_I2OLA_7A6-SME_I2OLA, SME_I2OLA_7AF-SME_I2OLA	
0002707A 0000 0000                  		dc.w SME_I2OLA_7B6-SME_I2OLA, SME_I2OLA_7C1-SME_I2OLA	
0002707E 0000 0000                  		dc.w SME_I2OLA_7C8-SME_I2OLA, SME_I2OLA_7CB-SME_I2OLA	
00027082 0000 0000                  		dc.w SME_I2OLA_7CE-SME_I2OLA, SME_I2OLA_7D5-SME_I2OLA	
00027086 0000 0000                  		dc.w SME_I2OLA_7DC-SME_I2OLA, SME_I2OLA_7DF-SME_I2OLA	
0002708A 0000 0000                  		dc.w SME_I2OLA_7E6-SME_I2OLA, SME_I2OLA_7EB-SME_I2OLA	
0002708E 0000 0000                  		dc.w SME_I2OLA_7F8-SME_I2OLA, SME_I2OLA_805-SME_I2OLA	
00027092 0000 0000                  		dc.w SME_I2OLA_80E-SME_I2OLA, SME_I2OLA_815-SME_I2OLA	
00027096 0000 0000                  		dc.w SME_I2OLA_820-SME_I2OLA, SME_I2OLA_829-SME_I2OLA	
0002709A 0000 0000                  		dc.w SME_I2OLA_830-SME_I2OLA, SME_I2OLA_83B-SME_I2OLA	
0002709E 0000 0000                  		dc.w SME_I2OLA_842-SME_I2OLA, SME_I2OLA_84D-SME_I2OLA	
000270A2 0000 0000                  		dc.w SME_I2OLA_856-SME_I2OLA, SME_I2OLA_85F-SME_I2OLA	
000270A6 0000 0000                  		dc.w SME_I2OLA_864-SME_I2OLA, SME_I2OLA_869-SME_I2OLA	
000270AA 0000 0000                  		dc.w SME_I2OLA_86E-SME_I2OLA, SME_I2OLA_873-SME_I2OLA	
000270AE 0000 0000                  		dc.w SME_I2OLA_878-SME_I2OLA, SME_I2OLA_87F-SME_I2OLA	
000270B2 0000 0000                  		dc.w SME_I2OLA_886-SME_I2OLA, SME_I2OLA_895-SME_I2OLA	
000270B6 0000 0000                  		dc.w SME_I2OLA_89A-SME_I2OLA, SME_I2OLA_89F-SME_I2OLA	
000270BA 0000 0000                  		dc.w SME_I2OLA_8A4-SME_I2OLA, SME_I2OLA_8A9-SME_I2OLA	
000270BE 0000 0000                  		dc.w SME_I2OLA_8B0-SME_I2OLA, SME_I2OLA_8B9-SME_I2OLA	
000270C2 0000 0000                  		dc.w SME_I2OLA_8BA-SME_I2OLA, SME_I2OLA_8BB-SME_I2OLA	
000270C6 0000 0000                  		dc.w SME_I2OLA_8C2-SME_I2OLA, SME_I2OLA_8C9-SME_I2OLA	
000270CA 0000 0000                  		dc.w SME_I2OLA_8CA-SME_I2OLA, SME_I2OLA_8CB-SME_I2OLA	
000270CE 0000 0000                  		dc.w SME_I2OLA_8D0-SME_I2OLA, SME_I2OLA_8D3-SME_I2OLA	
000270D2 0000 0000                  		dc.w SME_I2OLA_8D8-SME_I2OLA, SME_I2OLA_8DD-SME_I2OLA	
000270D6 0000 0000                  		dc.w SME_I2OLA_8E2-SME_I2OLA, SME_I2OLA_8E7-SME_I2OLA	
000270DA 0000 0000                  		dc.w SME_I2OLA_8F2-SME_I2OLA, SME_I2OLA_8FD-SME_I2OLA	
000270DE 0000 0000                  		dc.w SME_I2OLA_902-SME_I2OLA, SME_I2OLA_907-SME_I2OLA	
000270E2 0000 0000                  		dc.w SME_I2OLA_90C-SME_I2OLA, SME_I2OLA_911-SME_I2OLA	
000270E6 0000 0000                  		dc.w SME_I2OLA_916-SME_I2OLA, SME_I2OLA_91B-SME_I2OLA	
000270EA 0000 0000                  		dc.w SME_I2OLA_920-SME_I2OLA, SME_I2OLA_925-SME_I2OLA	
000270EE 0000                       		dc.w SME_I2OLA_92A-SME_I2OLA	
000270F0 00                         SME_I2OLA_1EE:	dc.b 0	
000270F1 0420 0070 0320 0B20 0E     SME_I2OLA_1EF:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000270FA 0920 0020 0B20 0E10 0300+  SME_I2OLA_1F8:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
0002710D 0A20 0020 0B20 0E10 0300+  SME_I2OLA_20B:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00027122 04B6 C606 D200 0920 0E     SME_I2OLA_220:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
0002712B 0350 1150 1720 0E          SME_I2OLA_229:	dc.b 3, $50, $11, $50, $17, $20, $E	
00027132 0350 2050 1720 0E          SME_I2OLA_230:	dc.b 3, $50, $20, $50, $17, $20, $E	
00027139 0450 2050 1710 2700 0E     SME_I2OLA_237:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00027142 02B6 D316 DF               SME_I2OLA_240:	dc.b 2, $B6, $D3, $16, $DF	
00027147 0356 E126 E736 EA          SME_I2OLA_245:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
0002714E 0356 E126 E736 EE          SME_I2OLA_24C:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00027155 03B6 F226 FE27 01          SME_I2OLA_253:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
0002715C 0420 0B20 0E87 0A07 13     SME_I2OLA_25A:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00027165 0380 2920 0B20 0E          SME_I2OLA_263:	dc.b 3, $80, $29, $20, $B, $20, $E	
0002716C 0750 3A50 4010 4600 3530+  SME_I2OLA_26A:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
0002717B 05B0 4800 3530 3600 3400+  SME_I2OLA_279:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00027186 0380 5A57 0400 09          SME_I2OLA_284:	dc.b 3, $80, $5A, $57, 4, 0, 9	
0002718D 03F7 1437 2407 28          SME_I2OLA_28B:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00027194 0450 5450 6350 6910 6F     SME_I2OLA_292:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
0002719D 0250 54B0 71               SME_I2OLA_29B:	dc.b 2, $50, $54, $B0, $71	
000271A2 0357 0457 2907 2F          SME_I2OLA_2A0:	dc.b 3, $57, 4, $57, $29, 7, $2F	
000271A9 0530 7D50 8100 3310 3430+  SME_I2OLA_2A7:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
000271B4 0550 8750 8D20 9350 9600+  SME_I2OLA_2B2:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
000271BF 0650 8710 9D30 9F50 A330+  SME_I2OLA_2BD:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000271CC 0450 AE10 B470 B620 BE     SME_I2OLA_2CA:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000271D5 03F9 7539 8539 89          SME_I2OLA_2D3:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000271DC 0550 C130 C770 CB20 D310+  SME_I2OLA_2DA:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000271E7 0450 C110 D870 DA20 E2     SME_I2OLA_2E5:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000271F0 03F9 8D39 9D39 A1          SME_I2OLA_2EE:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000271F7 0550 8710 9D00 9370 E520+  SME_I2OLA_2F5:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00027202 0470 F050 F810 FE51 00     SME_I2OLA_300:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
0002720B 0270 F0B1 06               SME_I2OLA_309:	dc.b 2, $70, $F0, $B1, 6	
00027210 0281 1858 F9               SME_I2OLA_30E:	dc.b 2, $81, $18, $58, $F9	
00027215 0508 FF39 0009 04B9 0529+  SME_I2OLA_313:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00027220 0451 1251 2111 2751 29     SME_I2OLA_31E:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00027229 0251 12B1 2F               SME_I2OLA_327:	dc.b 2, $51, $12, $B1, $2F	
0002722E 0329 1479 1719 1F          SME_I2OLA_32C:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00027235 0370 F001 0681 3B          SME_I2OLA_333:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
0002723C 0651 4411 4A11 4C81 4E01+  SME_I2OLA_33A:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00027249 0651 4421 5911 5C11 5E81+  SME_I2OLA_347:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00027256 0451 6911 6F81 7111 7A     SME_I2OLA_354:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002725F 03F9 A529 B529 B8          SME_I2OLA_35D:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00027266 0551 7C21 8211 8571 8721+  SME_I2OLA_364:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027271 0451 7C11 9281 9411 9D     SME_I2OLA_36F:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002727A 03F9 BB29 CB19 CE          SME_I2OLA_378:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027281 0551 4481 9F11 5E11 A801+  SME_I2OLA_37F:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002728C 0251 AAB1 B0               SME_I2OLA_38A:	dc.b 2, $51, $AA, $B1, $B0	
00027291 02B7 3057 3C               SME_I2OLA_38F:	dc.b 2, $B7, $30, $57, $3C	
00027296 0250 54B1 BC               SME_I2OLA_394:	dc.b 2, $50, $54, $B1, $BC	
0002729B 0257 3CB7 42               SME_I2OLA_399:	dc.b 2, $57, $3C, $B7, $42	
000272A0 0251 AAB1 C8               SME_I2OLA_39E:	dc.b 2, $51, $AA, $B1, $C8	
000272A5 0257 3CB7 4E               SME_I2OLA_3A3:	dc.b 2, $57, $3C, $B7, $4E	
000272AA 0250 54B1 D4               SME_I2OLA_3A8:	dc.b 2, $50, $54, $B1, $D4	
000272AF 0257 3CB7 5A               SME_I2OLA_3AD:	dc.b 2, $57, $3C, $B7, $5A	
000272B4 0451 E011 E6B1 E801 F4     SME_I2OLA_3B2:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
000272BD 03F8 7128 8128 84          SME_I2OLA_3BB:	dc.b 3, $F8, $71, $28, $81, $28, $84	
000272C4 0351 F511 FBB1 FD          SME_I2OLA_3C2:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
000272CB 03B8 BD78 C901 F4          SME_I2OLA_3C9:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000272D2 0451 E012 09B2 0B01 F4     SME_I2OLA_3D0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000272DB 03B8 D178 DD01 F4          SME_I2OLA_3D9:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000272E2 0351 F511 FBB2 17          SME_I2OLA_3E0:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000272E9 0378 E5B8 ED01 F4          SME_I2OLA_3E7:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000272F0 0252 23B2 29               SME_I2OLA_3EE:	dc.b 2, $52, $23, $B2, $29	
000272F5 0258 87B8 8D               SME_I2OLA_3F3:	dc.b 2, $58, $87, $B8, $8D	
000272FA 0251 12B2 35               SME_I2OLA_3F8:	dc.b 2, $51, $12, $B2, $35	
000272FF 0258 87B8 99               SME_I2OLA_3FD:	dc.b 2, $58, $87, $B8, $99	
00027304 0252 23B2 41               SME_I2OLA_402:	dc.b 2, $52, $23, $B2, $41	
00027309 0258 87B8 A5               SME_I2OLA_407:	dc.b 2, $58, $87, $B8, $A5	
0002730E 0251 12B2 4D               SME_I2OLA_40C:	dc.b 2, $51, $12, $B2, $4D	
00027313 0258 87B8 B1               SME_I2OLA_411:	dc.b 2, $58, $87, $B8, $B1	
00027318 0452 5912 5FB2 6102 6D     SME_I2OLA_416:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00027321 03B9 2129 2D59 30          SME_I2OLA_41F:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00027328 0272 6EB2 76               SME_I2OLA_426:	dc.b 2, $72, $6E, $B2, $76	
0002732D 03B9 3629 4259 45          SME_I2OLA_42B:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00027334 0452 5912 82B2 8402 6D     SME_I2OLA_432:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002733D 03B9 4B29 5759 5A          SME_I2OLA_43B:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00027344 0272 6EB2 90               SME_I2OLA_442:	dc.b 2, $72, $6E, $B2, $90	
00027349 03B9 6029 6C59 6F          SME_I2OLA_447:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00027350 03B4 EE24 FA54 FD          SME_I2OLA_44E:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00027357 03B5 0325 0F55 12          SME_I2OLA_455:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002735E 0925 1E55 2105 3715 1815+  SME_I2OLA_45C:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00027371 0925 2D55 3005 3615 2715+  SME_I2OLA_46F:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00027384 03F6 6416 7436 76          SME_I2OLA_482:	dc.b 3, $F6, $64, $16, $74, $36, $76	
0002738B 03B6 8176 8D16 95          SME_I2OLA_489:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00027392 03F5 3835 4805 4C          SME_I2OLA_490:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00027399 05B5 4D35 5915 5D15 5F25+  SME_I2OLA_497:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000273A4 03B5 6425 7055 73          SME_I2OLA_4A2:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000273AB 03B5 7925 8555 88          SME_I2OLA_4A9:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000273B2 0555 9425 9A05 AD55 8E55+  SME_I2OLA_4B0:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000273BD 0525 A355 A605 AC55 9D55+  SME_I2OLA_4BB:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000273C8 04B5 BA25 C625 C925 CC     SME_I2OLA_4C6:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000273D1 04B5 AE25 CF25 D225 D5     SME_I2OLA_4CF:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000273DA 04F5 D825 E805 EB05 EC     SME_I2OLA_4D8:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000273E3 04F5 ED25 FD16 0016 02     SME_I2OLA_4E1:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000273EC 01F2 9C                    SME_I2OLA_4EA:	dc.b 1, $F2, $9C	
000273EF 01F6 2B                    SME_I2OLA_4ED:	dc.b 1, $F6, $2B	
000273F2 01F2 AC                    SME_I2OLA_4F0:	dc.b 1, $F2, $AC	
000273F5 01F6 3B                    SME_I2OLA_4F3:	dc.b 1, $F6, $3B	
000273F8 01F2 BC                    SME_I2OLA_4F6:	dc.b 1, $F2, $BC	
000273FB 01F6 4B                    SME_I2OLA_4F9:	dc.b 1, $F6, $4B	
000273FE 01F2 CC                    SME_I2OLA_4FC:	dc.b 1, $F2, $CC	
00027401 0386 5B36 7A26 7E          SME_I2OLA_4FF:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00027408 01F2 DC                    SME_I2OLA_506:	dc.b 1, $F2, $DC	
0002740B 02B2 EC22 F8               SME_I2OLA_509:	dc.b 2, $B2, $EC, $22, $F8	
00027410 01F2 FB                    SME_I2OLA_50E:	dc.b 1, $F2, $FB	
00027413 02B3 0B23 17               SME_I2OLA_511:	dc.b 2, $B3, $B, $23, $17	
00027418 01F3 1A                    SME_I2OLA_516:	dc.b 1, $F3, $1A	
0002741B 0453 2AB3 3018 1508 17     SME_I2OLA_519:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00027424 0753 3C73 4213 4A03 4C08+  SME_I2OLA_522:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00027433 0528 1BB8 1E28 2A18 2D08+  SME_I2OLA_531:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002743E 03B8 3038 3C18 40          SME_I2OLA_53C:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00027445 05B4 8834 9413 FD03 FF0A+  SME_I2OLA_543:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
00027450 0427 6627 6927 6C20 0E     SME_I2OLA_54E:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00027459 0413 4D73 4F23 5703 5A     SME_I2OLA_557:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00027462 0423 5B23 5EF3 6108 42     SME_I2OLA_560:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
0002746B 0928 5338 5678 4303 6408+  SME_I2OLA_569:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
0002747E 03B3 7173 7D00 71          SME_I2OLA_57C:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00027485 03F8 5B18 6B38 6D          SME_I2OLA_583:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
0002748C 03F8 0138 113A CE          SME_I2OLA_58A:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00027493 00                         SME_I2OLA_591:	dc.b 0	
00027494 0839 E219 EF29 E619 E919+  SME_I2OLA_592:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000274A5 0739 E219 EF29 E619 E919+  SME_I2OLA_5A3:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000274B4 0439 E289 E619 EF59 F1     SME_I2OLA_5B2:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000274BD 0373 9D03 A533 A6          SME_I2OLA_5BB:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000274C4 0373 8533 8D23 91          SME_I2OLA_5C2:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000274CB 0376 9736 9F06 A3          SME_I2OLA_5C9:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000274D2 0183 94                    SME_I2OLA_5D0:	dc.b 1, $83, $94	
000274D5 0376 9736 9F06 A3          SME_I2OLA_5D3:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000274DC 0373 8533 8D23 91          SME_I2OLA_5DA:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000274E3 0373 9D03 A533 A6          SME_I2OLA_5E1:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000274EA 0373 AA33 B223 B6          SME_I2OLA_5E8:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000274F1 04B3 B903 C603 C503 C7     SME_I2OLA_5EF:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000274FA 0856 1113 C303 C503 C613+  SME_I2OLA_5F8:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
0002750B 04B3 DA33 E603 EA03 EB     SME_I2OLA_609:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00027514 04B3 C833 D403 D803 D9     SME_I2OLA_612:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
0002751D 0583 EC13 F553 F713 FD03+  SME_I2OLA_61B:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00027528 0584 0014 0953 F713 FD03+  SME_I2OLA_626:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00027533 0284 0B74 14               SME_I2OLA_631:	dc.b 2, $84, $B, $74, $14	
00027538 0534 9824 9C34 9F34 A304+  SME_I2OLA_636:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00027543 0384 1C24 2514 28          SME_I2OLA_641:	dc.b 3, $84, $1C, $24, $25, $14, $28	
0002754A 0504 A834 A934 AD34 B124+  SME_I2OLA_648:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00027555 0284 2A74 33               SME_I2OLA_653:	dc.b 2, $84, $2A, $74, $33	
0002755A 03B7 DF17 EB27 ED          SME_I2OLA_658:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00027561 0384 1C24 3B14 3E          SME_I2OLA_65F:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00027568 03B7 F017 FC27 FE          SME_I2OLA_666:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
0002756F 0254 40B4 46               SME_I2OLA_66D:	dc.b 2, $54, $40, $B4, $46	
00027574 0374 5214 5AB4 5C          SME_I2OLA_672:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
0002757B 0B74 6814 7004 7924 7504+  SME_I2OLA_679:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00027592 0674 7A14 7054 8204 7924+  SME_I2OLA_690:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
0002759F 0354 C9B4 CF10 6D          SME_I2OLA_69D:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000275A6 0714 C334 C514 BE04 BD14+  SME_I2OLA_6A4:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000275B5 02F4 DB24 EB               SME_I2OLA_6B3:	dc.b 2, $F4, $DB, $24, $EB	
000275BA 04B6 A416 B026 B206 B1     SME_I2OLA_6B8:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000275C3 03B6 B516 C126 C3          SME_I2OLA_6C1:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000275CA 03B9 D129 DD19 E0          SME_I2OLA_6C8:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000275D1 0427 6F37 7237 7627 7A     SME_I2OLA_6CF:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000275DA 01F7 7E                    SME_I2OLA_6D8:	dc.b 1, $F7, $7E	
000275DD 01F7 8E                    SME_I2OLA_6DB:	dc.b 1, $F7, $8E	
000275E0 01F7 9E                    SME_I2OLA_6DE:	dc.b 1, $F7, $9E	
000275E3 01F7 AE                    SME_I2OLA_6E1:	dc.b 1, $F7, $AE	
000275E6 01F7 BE                    SME_I2OLA_6E4:	dc.b 1, $F7, $BE	
000275E9 01FA 08                    SME_I2OLA_6E7:	dc.b 1, $FA, 8	
000275EC 01FA BD                    SME_I2OLA_6EA:	dc.b 1, $FA, $BD	
000275EF 01BA 18                    SME_I2OLA_6ED:	dc.b 1, $BA, $18	
000275F2 03FA 243A 341A 38          SME_I2OLA_6F0:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000275F9 035A 46BA 3A0A 4C          SME_I2OLA_6F7:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
00027600 03BA 4D5A 590A 5F          SME_I2OLA_6FE:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
00027607 03BA 605A 6C0A 72          SME_I2OLA_705:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
0002760E 03BA 735A 7F0A 85          SME_I2OLA_70C:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
00027615 085A 7F0A 852A 781A 7C0A+  SME_I2OLA_713:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
00027626 0320 0EFA 8C3A 9C          SME_I2OLA_724:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
0002762D 0320 0EFA A02A B0          SME_I2OLA_72B:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
00027634 0720 0E2A 912A 952A 980A+  SME_I2OLA_732:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00027643 0350 3A50 4010 46          SME_I2OLA_741:	dc.b 3, $50, $3A, $50, $40, $10, $46	
0002764A 01B0 48                    SME_I2OLA_748:	dc.b 1, $B0, $48	
0002764D 0280 5A00 09               SME_I2OLA_74B:	dc.b 2, $80, $5A, 0, 9	
00027652 0707 2817 1617 1A27 1D07+  SME_I2OLA_750:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
00027661 0350 6350 6910 6F          SME_I2OLA_75F:	dc.b 3, $50, $63, $50, $69, $10, $6F	
00027668 01B0 71                    SME_I2OLA_766:	dc.b 1, $B0, $71	
0002766B 0257 2907 2F               SME_I2OLA_769:	dc.b 2, $57, $29, 7, $2F	
00027670 0230 7D50 81               SME_I2OLA_76E:	dc.b 2, $30, $7D, $50, $81	
00027675 0550 8750 8D20 9350 9600+  SME_I2OLA_773:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027680 0650 8710 9D30 9F50 A330+  SME_I2OLA_77E:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
0002768D 0450 AE10 B470 B620 BE     SME_I2OLA_78B:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00027696 03F9 7539 8539 89          SME_I2OLA_794:	dc.b 3, $F9, $75, $39, $85, $39, $89	
0002769D 0550 C130 C770 CB20 D310+  SME_I2OLA_79B:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000276A8 0450 C110 D870 DA20 E2     SME_I2OLA_7A6:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000276B1 03F9 8D39 9D39 A1          SME_I2OLA_7AF:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000276B8 0550 8710 9D00 9370 E520+  SME_I2OLA_7B6:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000276C3 0350 F810 FE51 00          SME_I2OLA_7C1:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
000276CA 01B1 06                    SME_I2OLA_7C8:	dc.b 1, $B1, 6	
000276CD 0181 18                    SME_I2OLA_7CB:	dc.b 1, $81, $18	
000276D0 0308 FF89 0B29 01          SME_I2OLA_7CE:	dc.b 3, 8, $FF, $89, $B, $29, 1	
000276D7 0351 2111 2751 29          SME_I2OLA_7D5:	dc.b 3, $51, $21, $11, $27, $51, $29	
000276DE 01B1 2F                    SME_I2OLA_7DC:	dc.b 1, $B1, $2F	
000276E1 0319 1F09 1639 1B          SME_I2OLA_7DF:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
000276E8 0201 0681 3B               SME_I2OLA_7E6:	dc.b 2, 1, 6, $81, $3B	
000276ED 0651 4411 4A11 4C81 4E01+  SME_I2OLA_7EB:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000276FA 0651 4421 5911 5C11 5E81+  SME_I2OLA_7F8:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00027707 0451 6911 6F81 7111 7A     SME_I2OLA_805:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00027710 03F9 A529 B529 B8          SME_I2OLA_80E:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00027717 0551 7C21 8211 8571 8721+  SME_I2OLA_815:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027722 0451 7C11 9281 9411 9D     SME_I2OLA_820:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002772B 03F9 BB29 CB19 CE          SME_I2OLA_829:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027732 0551 4481 9F11 5E11 A801+  SME_I2OLA_830:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002773D 03BA D32A DF0A E2          SME_I2OLA_83B:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
00027744 05BA E31A EF1A F11A F30A+  SME_I2OLA_842:	dc.b 5, $BA, $E3, $1A, $EF, $1A, $F1, $1A, $F3, $A, $F5	
0002774F 04BA F61B 022B 042B 07     SME_I2OLA_84D:	dc.b 4, $BA, $F6, $1B, 2, $2B, 4, $2B, 7	
00027758 04BB 0A1B 162B 182B 1B     SME_I2OLA_856:	dc.b 4, $BB, $A, $1B, $16, $2B, $18, $2B, $1B	
00027761 02FB 1E7B 2E               SME_I2OLA_85F:	dc.b 2, $FB, $1E, $7B, $2E	
00027766 02FB 367B 46               SME_I2OLA_864:	dc.b 2, $FB, $36, $7B, $46	
0002776B 02FB 1E7B 2E               SME_I2OLA_869:	dc.b 2, $FB, $1E, $7B, $2E	
00027770 02FB 367B 46               SME_I2OLA_86E:	dc.b 2, $FB, $36, $7B, $46	
00027775 023B 4EFB 52               SME_I2OLA_873:	dc.b 2, $3B, $4E, $FB, $52	
0002777A 03FB 623B 722B 76          SME_I2OLA_878:	dc.b 3, $FB, $62, $3B, $72, $2B, $76	
00027781 03FB 792B 892B 8C          SME_I2OLA_87F:	dc.b 3, $FB, $79, $2B, $89, $2B, $8C	
00027788 078B 970B 8F3B 900B 960B+  SME_I2OLA_886:	dc.b 7, $8B, $97, $B, $8F, $3B, $90, $B, $96, $B, $95, $B, $94, $1B, $A0	
00027797 02FB 1E7B 2E               SME_I2OLA_895:	dc.b 2, $FB, $1E, $7B, $2E	
0002779C 02FB 367B 46               SME_I2OLA_89A:	dc.b 2, $FB, $36, $7B, $46	
000277A1 02FB 1E7B 2E               SME_I2OLA_89F:	dc.b 2, $FB, $1E, $7B, $2E	
000277A6 02FB 367B 46               SME_I2OLA_8A4:	dc.b 2, $FB, $36, $7B, $46	
000277AB 032D 23FD 132D 26          SME_I2OLA_8A9:	dc.b 3, $2D, $23, $FD, $13, $2D, $26	
000277B2 04FD 293D 391D 3D0D 3F     SME_I2OLA_8B0:	dc.b 4, $FD, $29, $3D, $39, $1D, $3D, $D, $3F	
000277BB 00                         SME_I2OLA_8B9:	dc.b 0	
000277BC 00                         SME_I2OLA_8BA:	dc.b 0	
000277BD 03BD 403D 4C5D 50          SME_I2OLA_8BB:	dc.b 3, $BD, $40, $3D, $4C, $5D, $50	
000277C4 03BD 567D 621D 6A          SME_I2OLA_8C2:	dc.b 3, $BD, $56, $7D, $62, $1D, $6A	
000277CB 00                         SME_I2OLA_8C9:	dc.b 0	
000277CC 00                         SME_I2OLA_8CA:	dc.b 0	
000277CD 023B A2FB A6               SME_I2OLA_8CB:	dc.b 2, $3B, $A2, $FB, $A6	
000277D2 01FB B6                    SME_I2OLA_8D0:	dc.b 1, $FB, $B6	
000277D5 02FB C67B D6               SME_I2OLA_8D3:	dc.b 2, $FB, $C6, $7B, $D6	
000277DA 02FB DE7B EE               SME_I2OLA_8D8:	dc.b 2, $FB, $DE, $7B, $EE	
000277DF 02FB F67C 06               SME_I2OLA_8DD:	dc.b 2, $FB, $F6, $7C, 6	
000277E4 02FC 0E7C 1E               SME_I2OLA_8E2:	dc.b 2, $FC, $E, $7C, $1E	
000277E9 055C 267C 2C5C 340C 3A0C+  SME_I2OLA_8E7:	dc.b 5, $5C, $26, $7C, $2C, $5C, $34, $C, $3A, $C, $3B	
000277F4 05BC 3C3C 481C 4C1C 4E2C+  SME_I2OLA_8F2:	dc.b 5, $BC, $3C, $3C, $48, $1C, $4C, $1C, $4E, $2C, $50	
000277FF 02BC 535C 5F               SME_I2OLA_8FD:	dc.b 2, $BC, $53, $5C, $5F	
00027804 02BC 655C 71               SME_I2OLA_902:	dc.b 2, $BC, $65, $5C, $71	
00027809 02BC 775C 83               SME_I2OLA_907:	dc.b 2, $BC, $77, $5C, $83	
0002780E 02BC 895C 95               SME_I2OLA_90C:	dc.b 2, $BC, $89, $5C, $95	
00027813 02BC 9B5C A7               SME_I2OLA_911:	dc.b 2, $BC, $9B, $5C, $A7	
00027818 02BC AD5C B9               SME_I2OLA_916:	dc.b 2, $BC, $AD, $5C, $B9	
0002781D 02BC BF5C CB               SME_I2OLA_91B:	dc.b 2, $BC, $BF, $5C, $CB	
00027822 02BC D15C DD               SME_I2OLA_920:	dc.b 2, $BC, $D1, $5C, $DD	
00027827 02FC E37C F3               SME_I2OLA_925:	dc.b 2, $FC, $E3, $7C, $F3	
0002782C 02FC FB7D 0B               SME_I2OLA_92A:	dc.b 2, $FC, $FB, $7D, $B	
00027832 00                         		even
00027832 00                         		even
00027832                            
00027832                            ; ---------------------------------------------------------------------------
00027832                            ; Uncompressed graphics	- Sonic
00027832                            ; ---------------------------------------------------------------------------
00027832                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004EFD2                            		even
0004EFD2                            ; ---------------------------------------------------------------------------
0004EFD2                            ; Compressed graphics - various
0004EFD2                            ; ---------------------------------------------------------------------------
0004EFD2                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004FC92                            		even
0004FC92                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
00050952                            		even
00050952                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
00051612                            		even
00051612                            Art_Shield:	incbin	"artunc\Shield.bin"
000522D2                            		even
000522D2                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
000526D2                            		even
000526D2                            
000526D2                            Map_SSWalls:	include	"_maps\SS Walls.asm"
000526D2                            ; ---------------------------------------------------------------------------
000526D2                            ; Sprite mappings - walls of the special stage
000526D2                            ; ---------------------------------------------------------------------------
000526D2                            Map_SSWalls_internal:
000526D2 0000                       		dc.w byte_2C584-Map_SSWalls_internal
000526D4 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
000526D6 0000                       		dc.w byte_2C590-Map_SSWalls_internal
000526D8 0000                       		dc.w byte_2C596-Map_SSWalls_internal
000526DA 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
000526DC 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000526DE 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000526E0 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000526E2 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000526E4 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000526E6 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000526E8 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000526EA 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000526EC 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000526EE 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000526F0 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000526F2 01                         byte_2C584:	dc.b 1
000526F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000526F8 01                         byte_2C58A:	dc.b 1
000526F9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000526FE 01                         byte_2C590:	dc.b 1
000526FF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00052704 01                         byte_2C596:	dc.b 1
00052705 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0005270A 01                         byte_2C59C:	dc.b 1
0005270B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00052710 01                         byte_2C5A2:	dc.b 1
00052711 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00052716 01                         byte_2C5A8:	dc.b 1
00052717 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0005271C 01                         byte_2C5AE:	dc.b 1
0005271D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00052722 01                         byte_2C5B4:	dc.b 1
00052723 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00052728 01                         byte_2C5BA:	dc.b 1
00052729 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0005272E 01                         byte_2C5C0:	dc.b 1
0005272F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00052734 01                         byte_2C5C6:	dc.b 1
00052735 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0005273A 01                         byte_2C5CC:	dc.b 1
0005273B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00052740 01                         byte_2C5D2:	dc.b 1
00052741 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00052746 01                         byte_2C5D8:	dc.b 1
00052747 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0005274C 01                         byte_2C5DE:	dc.b 1
0005274D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00052752                            		even
00052752                            		even
00052752                            
00052752                            ; ---------------------------------------------------------------------------
00052752                            ; Compressed graphics - special stage
00052752                            ; ---------------------------------------------------------------------------
00052752                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005308A                            		even
0005308A                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
000531BE                            		even
000531BE                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00053E4E                            		even
00053E4E                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0005414E                            		even
0005414E                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00054642                            		even
00054642                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
00054730                            		even
00054730                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
00054800                            		even
00054800                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000548F6                            		even
000548F6                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00054954                            		even
00054954                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000549E6                            		even
000549E6                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
00054AA8                            		even
00054AA8                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00054B76                            		even
00054B76                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00054C42                            		even
00054C42                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00054D0A                            		even
00054D0A                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00054DD4                            		even
00054DD4                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00054EA4                            		even
00054EA4                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00055098                            		even
00055098                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
00055200                            		even
00055200                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000552B0                            		even
000552B0                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005538A                            		even
0005538A                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0005540E                            		even
0005540E                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0005558C                            		even
0005558C                            ; ---------------------------------------------------------------------------
0005558C                            ; Compressed graphics - GHZ stuff
0005558C                            ; ---------------------------------------------------------------------------
0005558C                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000555EE                            		even
000555EE                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00055708                            		even
00055708                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00055826                            		even
00055826                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
0005586E                            		even
0005586E                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00055A0C                            		even
00055A0C                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00055A88                            		even
00055A88                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00055C9C                            		even
00055C9C                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00055DC8                            		even
00055DC8                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00055F1C                            		even
00055F1C                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00055FCC                            		even
00055FCC                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0005602C                            		even
0005602C                            ; ---------------------------------------------------------------------------
0005602C                            ; Compressed graphics - LZ stuff
0005602C                            ; ---------------------------------------------------------------------------
0005602C                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00056104                            		even
00056104                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000568F8                            		even
000568F8                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00056A8A 00                         		even
00056A8A                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00056BF4                            		even
00056BF4                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00057234 00                         		even
00057234                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000572D6 00                         		even
000572D6                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00057350 00                         		even
00057350                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000574B6 00                         		even
000574B6                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0005753C 00                         		even
0005753C                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000576A8                            		even
000576A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00057B8A                            		even
00057B8A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00057CFA                            		even
00057CFA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00057FB2                            		even
00057FB2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000580F8                            		even
000580F8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00058222                            		even
00058222                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000583A2 00                         		even
000583A2                            ; ---------------------------------------------------------------------------
000583A2                            ; Compressed graphics - MZ stuff
000583A2                            ; ---------------------------------------------------------------------------
000583A2                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00058630                            		even
00058630                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000586EE                            		even
000586EE                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000587C6                            		even
000587C6                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
0005881A                            		even
0005881A                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00058B38 00                         		even
00058B38                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
0005944E                            		even
0005944E                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000595BC                            		even
000595BC                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00059644                            		even
00059644                            ; ---------------------------------------------------------------------------
00059644                            ; Compressed graphics - SLZ stuff
00059644                            ; ---------------------------------------------------------------------------
00059644                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00059880                            		even
00059880                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
000599C6                            		even
000599C6                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00059C0A                            		even
00059C0A                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00059CA6 00                         		even
00059CA6                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00059D88                            		even
00059D88                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00059F6A                            		even
00059F6A                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
0005A076                            		even
0005A076                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0005A11A                            		even
0005A11A                            ; ---------------------------------------------------------------------------
0005A11A                            ; Compressed graphics - SYZ stuff
0005A11A                            ; ---------------------------------------------------------------------------
0005A11A                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
0005A2AA                            		even
0005A2AA                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0005A30C                            		even
0005A30C                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0005A428 00                         		even
0005A428                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005A6B6                            		even
0005A6B6                            ; ---------------------------------------------------------------------------
0005A6B6                            ; Compressed graphics - SBZ stuff
0005A6B6                            ; ---------------------------------------------------------------------------
0005A6B6                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0005A70A                            		even
0005A70A                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
0005A9A6                            		even
0005A9A6                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005AB96                            		even
0005AB96                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
0005AD34                            		even
0005AD34                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005B064                            		even
0005B064                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005B242                            		even
0005B242                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005B29A                            		even
0005B29A                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005B44C 00                         		even
0005B44C                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005B568                            		even
0005B568                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005B6F6                            		even
0005B6F6                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005B790                            		even
0005B790                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005B7E8                            		even
0005B7E8                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005B8E4                            		even
0005B8E4                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005B9FA                            		even
0005B9FA                            ; ---------------------------------------------------------------------------
0005B9FA                            ; Compressed graphics - enemies
0005B9FA                            ; ---------------------------------------------------------------------------
0005B9FA                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005BE42 00                         		even
0005BE42                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005C332 00                         		even
0005C332                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005C616 00                         		even
0005C616                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005C9D6                            		even
0005C9D6                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005CBBE                            		even
0005CBBE                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005D2EC 00                         		even
0005D2EC                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005D574 00                         		even
0005D574                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005D810 00                         		even
0005D810                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005DDE4                            		even
0005DDE4                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005E076                            		even
0005E076                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005E6C0 00                         		even
0005E6C0                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005EAFC                            		even
0005EAFC                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005EE0A 00                         		even
0005EE0A                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005F06A                            		even
0005F06A                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005F368                            		even
0005F368                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005F594 00                         		even
0005F594                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005F722                            		even
0005F722                            ; ---------------------------------------------------------------------------
0005F722                            ; Compressed graphics - various
0005F722                            ; ---------------------------------------------------------------------------
0005F722                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005FD70 00                         		even
0005FD70                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005FEE8 00                         		even
0005FEE8                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0006000A 00                         		even
0006000A                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
00060112 00                         		even
00060112                            Nem_Ring:	incbin	"artnem\Rings.bin"
00060266 00                         		even
00060266                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
000606F4                            		even
000606F4                            Nem_Explode:	incbin	"artnem\Explosion.bin"
00060D68                            		even
00060D68                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
00060E02 00                         		even
00060E02                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060F94                            		even
00060F94                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
000610B2 00                         		even
000610B2                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0006119E                            		even
0006119E                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
00061716                            		even
00061716                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
00061800                            		even
00061800                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00061974                            		even
00061974                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
00061CFC 00                         		even
00061CFC                            ; ---------------------------------------------------------------------------
00061CFC                            ; Compressed graphics - continue screen
00061CFC                            ; ---------------------------------------------------------------------------
00061CFC                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00061FD0 00                         		even
00061FD0                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006226A 00                         		even
0006226A                            ; ---------------------------------------------------------------------------
0006226A                            ; Compressed graphics - animals
0006226A                            ; ---------------------------------------------------------------------------
0006226A                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
000623C2                            		even
000623C2                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0006251E                            		even
0006251E                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0006269A                            		even
0006269A                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
000627B6                            		even
000627B6                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
00062930                            		even
00062930                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
00062A6A                            		even
00062A6A                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
00062BC6                            		even
00062BC6                            ; ---------------------------------------------------------------------------
00062BC6                            ; Compressed graphics - primary patterns and block mappings
00062BC6                            ; ---------------------------------------------------------------------------
00062BC6                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
000635A2                            		even
000635A2                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00064EF2                            		even
00064EF2                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00066474                            		even
00066474                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
0006886E                            		even
0006886E                            Blk16_TS:	incbin	"map16\TS.bin"
00068AF2                            		even
00068AF2                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00069C30                            		even
00069C30                            Blk256_TS:	incbin	"map256\TS.bin"
0006A7DE                            		even
0006A7DE                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006B97C                            		even
0006B97C                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006EE24                            		even
0006EE24                            Blk256_LZ:	incbin	"map256\LZ.bin"
00072346                            		even
00072346                            Blk16_MZ:	incbin	"map16\MZ.bin"
00072B34                            		even
00072B34                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000755C4                            		even
000755C4                            		incbin	"map256\MZ (JP1).bin"
000776FE                            		even
000776FE                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00077D80                            		even
00077D80                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007B7EA                            		even
0007B7EA                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007DBF4                            		even
0007DBF4                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007E098                            		even
0007E098                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0007F870                            		even
0007F870                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0007FBDA                            		even
0007FBDA                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
000807D4                            		even
000807D4                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00083016                            		even
00083016                            		incbin	"map256\SBZ (JP1).bin"
00083BA2                            		even
00083BA2                            ; ---------------------------------------------------------------------------
00083BA2                            ; Compressed graphics - bosses and ending sequence
00083BA2                            ; ---------------------------------------------------------------------------
00083BA2                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
0008440A                            		even
0008440A                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000846F4                            		even
000846F4                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00084F78                            		even
00084F78                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
000857B6 00                         		even
000857B6                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00085F84 00                         		even
00085F84                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
000864AC                            		even
000864AC                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000865CC                            		even
000865CC                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000867D4 00                         		even
000867D4                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00087ABE 00                         		even
00087ABE                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00088402                            		even
00088402                            		even
00088402                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00088992                            		even
00088992                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00088C1A                            		even
00088C1A                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008929E                            		even
0008929E                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00089602                            		even
00089602                            
00089602 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00089642                            ; ---------------------------------------------------------------------------
00089642                            ; Collision data
00089642                            ; ---------------------------------------------------------------------------
00089642                            AngleMap:	incbin	"collide\Angle Map.bin"
00089742                            		even
00089742                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008A742                            		even
0008A742                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008B742                            		even
0008B742                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008B8F0 00                         		even
0008B8F0                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008BB94                            		even
0008BB94                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008BD38 00                         		even
0008BD38                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008BF2C                            		even
0008BF2C                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008C006                            		even
0008C006                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008C1D6                            		even
0008C1D6                            ; ---------------------------------------------------------------------------
0008C1D6                            ; Special Stage layouts
0008C1D6                            ; ---------------------------------------------------------------------------
0008C1D6                            SS_1:		incbin	"sslayout\1.bin"
0008C450                            		even
0008C450                            SS_2:		incbin	"sslayout\2.bin"
0008C862                            		even
0008C862                            SS_3:		incbin	"sslayout\3.bin"
0008CBBE                            		even
0008CBBE                            SS_4:		incbin	"sslayout\4.bin"
0008D098                            		even
0008D098                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008D548                            			even
0008D548                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008D83A                            		even
0008D83A                            ; ---------------------------------------------------------------------------
0008D83A                            ; Animated uncompressed graphics
0008D83A                            ; ---------------------------------------------------------------------------
0008D83A                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008DA3A                            		even
0008DA3A                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008DE3A                            		even
0008DE3A                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008E2BA                            		even
0008E2BA                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008E5BA                            		even
0008E5BA                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008EBBA                            		even
0008EBBA                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0008EEBA                            		even
0008EEBA                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0008F93A                            		even
0008F93A                            
0008F93A                            ; ---------------------------------------------------------------------------
0008F93A                            ; Level	layout index
0008F93A                            ; ---------------------------------------------------------------------------
0008F93A                            Level_Index:
0008F93A                            		; GHZ
0008F93A 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0008F940 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0008F946 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0008F94C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0008F952                            		; LZ
0008F952 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0008F958 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0008F95E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0008F964 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0008F96A                            		; MZ
0008F96A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0008F970 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0008F976 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0008F97C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0008F982                            		; SLZ
0008F982 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F988 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F98E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F994 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0008F99A                            		; SYZ
0008F99A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0008F9A0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0008F9A6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0008F9AC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0008F9B2                            		; SBZ
0008F9B2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0008F9B8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0008F9BE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0008F9C4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0008F9CA                            		; Ending
0008F9CA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008F9D0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008F9D6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008F9DC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008F9E2                            
0008F9E2                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0008FC14                            		even
0008FC14 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0008FC18                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0008FD52                            		even
0008FD52 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0008FD56                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0008FE78                            		even
0008FE78                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0008FEB6                            		even
0008FEB6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0008FEBA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0008FEBE                            
0008FEBE                            Level_LZ1:	incbin	"levels\lz1.bin"
0008FF80                            		even
0008FF80                            Level_LZbg:	incbin	"levels\lzbg.bin"
00090082                            		even
00090082 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00090086                            Level_LZ2:	incbin	"levels\lz2.bin"
00090120                            		even
00090120 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00090124                            Level_LZ3:	incbin	"levels\lz3.bin"
0009023E                            		even
0009023E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00090242                            Level_SBZ3:	incbin	"levels\sbz3.bin"
000902FC                            		even
000902FC 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00090300                            
00090300                            Level_MZ1:	incbin	"levels\mz1.bin"
000903F2                            		even
000903F2                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
00090514                            		even
00090514                            Level_MZ2:	incbin	"levels\mz2.bin"
00090636                            		even
00090636                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
00090758                            		even
00090758 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009075C                            Level_MZ3:	incbin	"levels\mz3.bin"
000907F6                            		even
000907F6                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
00090918                            		even
00090918 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009091C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00090920                            
00090920                            Level_SLZ1:	incbin	"levels\slz1.bin"
00090A32                            		even
00090A32                            Level_SLZbg:	incbin	"levels\slzbg.bin"
00090AAC                            		even
00090AAC                            Level_SLZ2:	incbin	"levels\slz2.bin"
00090B9C                            		even
00090B9C                            Level_SLZ3:	incbin	"levels\slz3.bin"
00090CB6                            		even
00090CB6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00090CBA                            
00090CBA                            Level_SYZ1:	incbin	"levels\syz1.bin"
00090DBE                            		even
00090DBE                            		incbin	"levels\syzbg (JP1).bin"
00090DF8                            		even
00090DF8 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00090DFC                            Level_SYZ2:	incbin	"levels\syz2.bin"
00090F00                            		even
00090F00 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00090F04                            Level_SYZ3:	incbin	"levels\syz3.bin"
0009105E 00                         		even
0009105E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00091062 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00091066                            
00091066                            Level_SBZ1:	incbin	"levels\sbz1.bin"
00091188                            		even
00091188                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
000911C6                            		even
000911C6                            Level_SBZ2:	incbin	"levels\sbz2.bin"
00091308                            		even
00091308                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
00091472                            		even
00091472 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00091476 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009147A                            Level_End:	incbin	"levels\ending.bin"
000914AA 00                         		even
000914AA 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000914AE                            
000914AE                            
000914AE                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000920EE                            		even
000920EE                            
00092100                            
00092100                            ; ---------------------------------------------------------------------------
00092100                            ; Sprite locations index
00092100                            ; ---------------------------------------------------------------------------
00092100                            ObjPos_Index:
00092100                            		; GHZ
00092100 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092104 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092108 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009210C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092110                            		; LZ
00092110 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092114 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092118 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009211C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092120                            		; MZ
00092120 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092124 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092128 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009212C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092130                            		; SLZ
00092130 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092134 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092138 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009213C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092140                            		; SYZ
00092140 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092144 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092148 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009214C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092150                            		; SBZ
00092150 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092154 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092158 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009215C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092160                            		; Ending
00092160 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092164 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092168 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009216C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092170                            		; --- Put extra object data here. ---
00092170                            ObjPosLZPlatform_Index:
00092170 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00092174 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00092178 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009217C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00092180                            ObjPosSBZPlatform_Index:
00092180 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00092184 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00092188 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009218C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00092190 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00092196                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
0009283E                            		even
0009283E                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00092E5C                            		even
00092E5C                            		incbin	"objpos\ghz3 (JP1).bin"
0009346E                            		even
0009346E                            		incbin	"objpos\lz1 (JP1).bin"
000934A4                            		even
000934A4                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000937E6                            		even
000937E6                            		incbin	"objpos\lz3 (JP1).bin"
00093DAA                            		even
00093DAA                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00094314                            		even
00094314                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00094346                            		even
00094346                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00094378                            		even
00094378                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000943AA                            		even
000943AA                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000943DC                            		even
000943DC                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00094426                            		even
00094426                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00094464                            		even
00094464                            		incbin	"objpos\mz1 (JP1).bin"
00094A5E                            		even
00094A5E                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00095088                            		even
00095088                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00095376                            		even
00095376                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000958BC                            		even
000958BC                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00095D2A                            		even
00095D2A                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
0009630C                            		even
0009630C                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00096558                            		even
00096558                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
000967B6                            		even
000967B6                            		incbin	"objpos\syz3 (JP1).bin"
000967E6                            		even
000967E6                            		incbin	"objpos\sbz1 (JP1).bin"
0009682E                            		even
0009682E                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00096858                            		even
00096858                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00096894                            		even
00096894                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
000968C6                            		even
000968C6                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
000968F8                            		even
000968F8                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
0009692A                            		even
0009692A                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
0009695C                            		even
0009695C                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
0009698E                            		even
0009698E                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
000969C6                            		even
000969C6                            ObjPos_End:	incbin	"objpos\ending.bin"
00096B22                            		even
00096B22 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00096B28                            
00096B28                            		dcb.b $63C,$FF
00097164                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00097164                            
00097164                            SoundDriver:	include "s1.sounddriver.asm"
00097164                            ; ---------------------------------------------------------------------------
00097164                            ; Modified (early?) SMPS 68k Type 1b
00097164                            ; ---------------------------------------------------------------------------
00097164                            ; Go_SoundTypes:
00097164 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00097168                            ; Go_SoundD0:
00097168 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
0009716C 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00097170 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00097174                            ; off_719A0:
00097174 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00097178 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
0009717C                            ; ---------------------------------------------------------------------------
0009717C                            ; PSG instruments used in music
0009717C                            ; ---------------------------------------------------------------------------
0009717C                            PSG_Index:
0009717C 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00097188 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00097194 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000971A0                            PSG1:		incbin	"sound/psg/psg1.bin"
000971B7                            PSG2:		incbin	"sound/psg/psg2.bin"
000971BE                            PSG3:		incbin	"sound/psg/psg3.bin"
000971CF                            PSG4:		incbin	"sound/psg/psg4.bin"
000971DA                            PSG6:		incbin	"sound/psg/psg6.bin"
000971E9                            PSG5:		incbin	"sound/psg/psg5.bin"
00097213                            PSG7:		incbin	"sound/psg/psg7.bin"
0009722F                            PSG8:		incbin	"sound/psg/psg8.bin"
00097257                            PSG9:		incbin	"sound/psg/psg9.bin"
00097268                            ; ---------------------------------------------------------------------------
00097268                            ; New tempos for songs during speed shoes
00097268                            ; ---------------------------------------------------------------------------
00097268                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00097268                            ; tempos while speed shoes are active. If you don't want that, you should add
00097268                            ; their "correct" sped-up main tempos to the list.
00097268                            ; byte_71A94:
00097268                            SpeedUpIndex:
00097268 07                         		dc.b 7		; GHZ
00097269 72                         		dc.b $72	; LZ
0009726A 73                         		dc.b $73	; MZ
0009726B 26                         		dc.b $26	; SLZ
0009726C 15                         		dc.b $15	; SYZ
0009726D 08                         		dc.b 8		; SBZ
0009726E FF                         		dc.b $FF	; Invincibility
0009726F 05                         		dc.b 5		; Extra Life
00097270                            		;dc.b ?		; Special Stage
00097270                            		;dc.b ?		; Title Screen
00097270                            		;dc.b ?		; Ending
00097270                            		;dc.b ?		; Boss
00097270                            		;dc.b ?		; FZ
00097270                            		;dc.b ?		; Sonic Got Through
00097270                            		;dc.b ?		; Game Over
00097270                            		;dc.b ?		; Continue Screen
00097270                            		;dc.b ?		; Credits
00097270                            		;dc.b ?		; Drowning
00097270                            		;dc.b ?		; Get Emerald
00097270                            
00097270                            ; ---------------------------------------------------------------------------
00097270                            ; Music	Pointers
00097270                            ; ---------------------------------------------------------------------------
00097270                            MusicIndex:
00097270 0000 0000                  ptr_mus81:	dc.l Music81
00097274 0000 0000                  ptr_mus82:	dc.l Music82
00097278 0000 0000                  ptr_mus83:	dc.l Music83
0009727C 0000 0000                  ptr_mus84:	dc.l Music84
00097280 0000 0000                  ptr_mus85:	dc.l Music85
00097284 0000 0000                  ptr_mus86:	dc.l Music86
00097288 0000 0000                  ptr_mus87:	dc.l Music87
0009728C 0000 0000                  ptr_mus88:	dc.l Music88
00097290 0000 0000                  ptr_mus89:	dc.l Music89
00097294 0000 0000                  ptr_mus8A:	dc.l Music8A
00097298 0000 0000                  ptr_mus8B:	dc.l Music8B
0009729C 0000 0000                  ptr_mus8C:	dc.l Music8C
000972A0 0000 0000                  ptr_mus8D:	dc.l Music8D
000972A4 0000 0000                  ptr_mus8E:	dc.l Music8E
000972A8 0000 0000                  ptr_mus8F:	dc.l Music8F
000972AC 0000 0000                  ptr_mus90:	dc.l Music90
000972B0 0000 0000                  ptr_mus91:	dc.l Music91
000972B4 0000 0000                  ptr_mus92:	dc.l Music92
000972B8 0000 0000                  ptr_mus93:	dc.l Music93
000972BC 0000 0000                  ptr_mus94:	dc.l Music94
000972C0 0000 0000                  ptr_mus95:	dc.l Music95
000972C4 0000 0000                  ptr_mus96:	dc.l Music96
000972C8 0000 0000                  ptr_mus97:	dc.l Music97
000972CC 0000 0000                  ptr_mus98:	dc.l Music98
000972D0 0000 0000                  ptr_mus99:	dc.l Music99
000972D4 0000 0000                  ptr_mus9A:	dc.l Music9A
000972D8 0000 0000                  ptr_mus9B:	dc.l Music9B
000972DC 0000 0000                  ptr_mus9C:	dc.l Music9C
000972E0                            ptr_musend
000972E0                            ; ---------------------------------------------------------------------------
000972E0                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000972E0                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000972E0                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000972E0                            ; any music or SFX can override it (as long as it can override whatever was
000972E0                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000972E0                            ; will only override special SFX and music will only override music.
000972E0                            ; ---------------------------------------------------------------------------
000972E0                            ; SoundTypes:
000972E0                            SoundPriorities:
000972E0 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
000972EF 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000972FF 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0009730F 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0009731F 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0009732F 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
0009733F 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00097344                            
00097344                            ; ---------------------------------------------------------------------------
00097344                            ; Subroutine to update music more than once per frame
00097344                            ; (Called by horizontal & vert. interrupts)
00097344                            ; ---------------------------------------------------------------------------
00097344                            
00097344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097344                            
00097344                            ; sub_71B4C:
00097344                            UpdateMusic:
00097344 33FC 0100 00A1 1100        		stopZ80
0009734C 4E71                       		nop	
0009734E 4E71                       		nop	
00097350 4E71                       		nop	
00097352                            ; loc_71B5A:
00097352                            @updateloop:
00097352 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
0009735A 66F6                       		bne.s	@updateloop			; If so, wait
0009735C                            
0009735C 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00097364 6700                       		beq.s	@driverinput			; Branch if yes
00097366 33FC 0000 00A1 1100        		startZ80
0009736E 4E71                       		nop	
00097370 4E71                       		nop	
00097372 4E71                       		nop	
00097374 4E71                       		nop	
00097376 4E71                       		nop	
00097378 60CA                       		bra.s	UpdateMusic
0009737A                            ; ===========================================================================
0009737A                            ; loc_71B82:
0009737A                            @driverinput:
0009737A 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00097380 422E 000E                  		clr.b	f_voice_selector(a6)
00097384 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00097388 6600 0000                  		bne.w	PauseMusic			; if yes, branch
0009738C 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00097390 6600                       		bne.s	@skipdelay
00097392 4EBA 0000                  		jsr	TempoWait(pc)
00097396                            ; loc_71B9E:
00097396                            @skipdelay:
00097396 102E 0004                  		move.b	v_fadeout_counter(a6),d0
0009739A 6700                       		beq.s	@skipfadeout
0009739C 4EBA 0000                  		jsr	DoFadeOut(pc)
000973A0                            ; loc_71BA8:
000973A0                            @skipfadeout:
000973A0 4A2E 0024                  		tst.b	f_fadein_flag(a6)
000973A4 6700                       		beq.s	@skipfadein
000973A6 4EBA 0000                  		jsr	DoFadeIn(pc)
000973AA                            ; loc_71BB2:
000973AA                            @skipfadein:
000973AA                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
000973AA 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
000973AE 6700                       		beq.s	@nosndinput		; if not, branch
000973B0 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000973B4                            ; loc_71BBC:
000973B4                            @nosndinput:
000973B4 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000973BA 6700                       		beq.s	@nonewsound		; If yes, branch
000973BC 4EBA 0000                  		jsr	PlaySoundID(pc)
000973C0                            ; loc_71BC8:
000973C0                            @nonewsound:
000973C0 4A38 C901                  		tst.b	($FFFFC901).w
000973C4 6700                       		beq.s	@cont
000973C6 5338 C901                  		subq.b	#1,($FFFFC901).w
000973CA                            		
000973CA                            @cont:
000973CA 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000973CE 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000973D0 6A00                       		bpl.s	@dacdone		; Branch if not
000973D2 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000973D6                            ; loc_71BD4:
000973D6                            @dacdone:
000973D6 422E 0008                  		clr.b	f_updating_dac(a6)
000973DA 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000973DC                            ; loc_71BDA:
000973DC                            @bgmfmloop:
000973DC DAFC 0030                  		adda.w	#TrackSz,a5
000973E0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000973E2 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000973E4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000973E8                            ; loc_71BE6:
000973E8                            @bgmfmnext:
000973E8 51CF FFF2                  		dbf	d7,@bgmfmloop
000973EC                            
000973EC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
000973EE                            ; loc_71BEC:
000973EE                            @bgmpsgloop:
000973EE DAFC 0030                  		adda.w	#TrackSz,a5
000973F2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000973F4 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
000973F6 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000973FA                            ; loc_71BF8:
000973FA                            @bgmpsgnext:
000973FA 51CF FFF2                  		dbf	d7,@bgmpsgloop
000973FE                            
000973FE 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00097404 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00097406                            ; loc_71C04:
00097406                            @sfxfmloop:
00097406 DAFC 0030                  		adda.w	#TrackSz,a5
0009740A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009740C 6A00                       		bpl.s	@sfxfmnext		; Branch if not
0009740E 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00097412                            ; loc_71C10:
00097412                            @sfxfmnext:
00097412 51CF FFF2                  		dbf	d7,@sfxfmloop
00097416                            
00097416 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00097418                            ; loc_71C16:
00097418                            @sfxpsgloop:
00097418 DAFC 0030                  		adda.w	#TrackSz,a5
0009741C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009741E 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00097420 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00097424                            ; loc_71C22:
00097424                            @sfxpsgnext:
00097424 51CF FFF2                  		dbf	d7,@sfxpsgloop
00097428                            		
00097428 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
0009742E DAFC 0030                  		adda.w	#TrackSz,a5
00097432 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097434 6A00                       		bpl.s	@specfmdone		; Branch if not
00097436 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0009743A                            ; loc_71C38:
0009743A                            @specfmdone:
0009743A DAFC 0030                  		adda.w	#TrackSz,a5
0009743E 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00097440 6A00                       		bpl.s	DoStartZ80		; Branch if not
00097442 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00097446                            ; loc_71C44:
00097446                            DoStartZ80:
00097446 33FC 0000 00A1 1100        		startZ80
0009744E 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00097454 6700                       		beq.s @end ; if not, branch
00097456 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
0009745C 6600                       		bne.s @end ; if not, branch
0009745E 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00097464 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00097468                            
00097468                            	@end:
00097468 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
0009746C 4E75                       		rts
0009746E                            ; End of function UpdateMusic
0009746E                            
0009746E                            
0009746E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009746E                            
0009746E                            ; sub_71C4E: UpdateDAC:
0009746E                            DACUpdateTrack:
0009746E 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00097472 6600                       		bne.s	@locret				; Return if not
00097474 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
0009747A                            ;DACDoNext:
0009747A 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
0009747E                            ; loc_71C5E:
0009747E                            @sampleloop:
0009747E 7A00                       		moveq	#0,d5
00097480 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00097482 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00097486 6500                       		blo.s	@notcoord	; Branch if not
00097488 4EBA 0000                  		jsr	CoordFlag(pc)
0009748C 60F0                       		bra.s	@sampleloop
0009748E                            ; ===========================================================================
0009748E                            ; loc_71C6E:
0009748E                            @notcoord:
0009748E 4A05                       		tst.b	d5			; Is it a sample?
00097490 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00097492 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00097496 1A1C                       		move.b	(a4)+,d5		; Get another byte
00097498 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
0009749A 534C                       		subq.w	#1,a4			; Put byte back
0009749C 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
000974A2 6000                       		bra.s	@gotsampleduration
000974A4                            ; ===========================================================================
000974A4                            ; loc_71C84:
000974A4                            @gotduration:
000974A4 4EBA 0000                  		jsr	SetDuration(pc)
000974A8                            ; loc_71C88:
000974A8                            @gotsampleduration:
000974A8 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
000974AC 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000974B0 6600                       		bne.s	@locret			; Return if yes
000974B2 7000                       		moveq	#0,d0
000974B4 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
000974B8 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
000974BC 6700                       		beq.s	@locret			; Return if yes
000974BE 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
000974C2 6600                       		bne.s	@timpani		; Various timpani
000974C4 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
000974CA                            ; locret_71CAA:
000974CA                            @locret:
000974CA 4E75                       		rts	
000974CC                            ; ===========================================================================
000974CC                            ; loc_71CAC:
000974CC                            @timpani:
000974CC 0400 0088                  		subi.b	#$88,d0		; Convert into an index
000974D0 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
000974D4                            		; Warning: this affects the raw pitch of sample $83, meaning it will
000974D4                            		; use this value from then on.
000974D4 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
000974DA 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
000974E2 4E75                       		rts	
000974E4                            ; End of function DACUpdateTrack
000974E4                            
000974E4                            ; ===========================================================================
000974E4                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
000974E4                            ; Also, $8C-$8D are so slow you may want to skip them.
000974E4                            ; byte_71CC4:
000974E4 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
000974EA                            
000974EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000974EA                            
000974EA                            ; sub_71CCA:
000974EA                            FMUpdateTrack:
000974EA 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
000974EE 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
000974F0 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000974F4 4EBA 0000                  		jsr	FMDoNext(pc)
000974F8 4EBA 0000                  		jsr	FMPrepareNote(pc)
000974FC 6000 0000                  		bra.w	FMNoteOn
00097500                            ; ===========================================================================
00097500                            ; loc_71CE0:
00097500                            @notegoing:
00097500 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00097504 4EBA 0000                  		jsr	DoModulation(pc)
00097508 6000 0000                  		bra.w	FMUpdateFreq
0009750C                            ; End of function FMUpdateTrack
0009750C                            
0009750C                            
0009750C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009750C                            
0009750C                            ; sub_71CEC:
0009750C                            FMDoNext:
0009750C 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00097510 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00097514                            ; loc_71CF4:
00097514                            @noteloop:
00097514 7A00                       		moveq	#0,d5
00097516 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00097518 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
0009751C 6500                       		blo.s	@gotnote	; Branch if not
0009751E 4EBA 0000                  		jsr	CoordFlag(pc)
00097522 60F0                       		bra.s	@noteloop
00097524                            ; ===========================================================================
00097524                            ; loc_71D04:
00097524                            @gotnote:
00097524 4EBA 0000                  		jsr	FMNoteOff(pc)
00097528 4A05                       		tst.b	d5		; Is this a note?
0009752A 6A00                       		bpl.s	@gotduration	; Branch if not
0009752C 4EBA 0000                  		jsr	FMSetFreq(pc)
00097530 1A1C                       		move.b	(a4)+,d5	; Get another byte
00097532 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00097534 534C                       		subq.w	#1,a4		; Otherwise, put it back
00097536 6000 0000                  		bra.w	FinishTrackUpdate
0009753A                            ; ===========================================================================
0009753A                            ; loc_71D1A:
0009753A                            @gotduration:
0009753A 4EBA 0000                  		jsr	SetDuration(pc)
0009753E 6000 0000                  		bra.w	FinishTrackUpdate
00097542                            ; End of function FMDoNext
00097542                            
00097542                            
00097542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097542                            
00097542                            ; sub_71D22:
00097542                            FMSetFreq:
00097542 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00097546 6700                       		beq.s	TrackSetRest
00097548 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
0009754C 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00097550 E34D                       		lsl.w	#1,d5
00097552 41FA 0000                  		lea	FMFrequencies(pc),a0
00097556 3C30 5000                  		move.w	(a0,d5.w),d6
0009755A 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
0009755E 4E75                       		rts	
00097560                            ; End of function FMSetFreq
00097560                            
00097560                            
00097560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097560                            
00097560                            ; sub_71D40:
00097560                            SetDuration:
00097560 1005                       		move.b	d5,d0
00097562 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00097566                            ; loc_71D46:
00097566                            @multloop:
00097566 5301                       		subq.b	#1,d1
00097568 6700                       		beq.s	@donemult
0009756A D005                       		add.b	d5,d0
0009756C 60F8                       		bra.s	@multloop
0009756E                            ; ===========================================================================
0009756E                            ; loc_71D4E:
0009756E                            @donemult:
0009756E 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00097572 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00097576 4E75                       		rts	
00097578                            ; End of function SetDuration
00097578                            
00097578                            ; ===========================================================================
00097578                            ; loc_71D58:
00097578                            TrackSetRest:
00097578 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009757C 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00097580                            
00097580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097580                            
00097580                            ; sub_71D60:
00097580                            FinishTrackUpdate:
00097580 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00097584 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
0009758A 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
0009758E 6600                       		bne.s	@locret				; If so, branch
00097590 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00097596 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
0009759A 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
0009759E 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
000975A0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
000975A4 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
000975A8 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
000975AC 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
000975B0 1018                       		move.b	(a0)+,d0			; Get steps
000975B2 E208                       		lsr.b	#1,d0				; Halve them
000975B4 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
000975B8 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
000975BC                            ; locret_71D9C:
000975BC                            @locret:
000975BC 4E75                       		rts	
000975BE                            ; End of function FinishTrackUpdate
000975BE                            
000975BE                            
000975BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000975BE                            
000975BE                            ; sub_71D9E: NoteFillUpdate
000975BE                            NoteTimeoutUpdate:
000975BE 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
000975C2 6700                       		beq.s	@locret
000975C4 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
000975C8 6600                       		bne.s	@locret				; Return if it hasn't expired
000975CA 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
000975CE 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
000975D2 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
000975D6 4EBA 0000                  		jsr	FMNoteOff(pc)
000975DA 584F                       		addq.w	#4,sp				; Do not return to caller
000975DC 4E75                       		rts	
000975DE                            ; ===========================================================================
000975DE                            ; loc_71DBE:
000975DE                            @psgnoteoff:
000975DE 4EBA 0000                  		jsr	PSGNoteOff(pc)
000975E2 584F                       		addq.w	#4,sp		; Do not return to caller
000975E4                            ; locret_71DC4:
000975E4                            @locret:
000975E4 4E75                       		rts	
000975E6                            ; End of function NoteTimeoutUpdate
000975E6                            
000975E6                            
000975E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000975E6                            
000975E6                            ; sub_71DC6:
000975E6                            DoModulation:
000975E6 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
000975E8 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
000975EC 6700                       		beq.s	@locret				; Return if not
000975EE 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
000975F2 6700                       		beq.s	@waitdone			; If yes, branch
000975F4 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
000975F8 4E75                       		rts	
000975FA                            ; ===========================================================================
000975FA                            ; loc_71DDA:
000975FA                            @waitdone:
000975FA 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
000975FE 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00097600 4E75                       		rts	
00097602                            ; ===========================================================================
00097602                            ; loc_71DE2:
00097602                            @updatemodulation:
00097602 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00097606 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
0009760C 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00097610 6600                       		bne.s	@calcfreq			; If nonzero, branch
00097612 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00097618 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
0009761C 4E75                       		rts	
0009761E                            ; ===========================================================================
0009761E                            ; loc_71DFE:
0009761E                            @calcfreq:
0009761E 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00097622 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00097626 4886                       		ext.w	d6
00097628 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
0009762C 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00097630 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00097634 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00097636                            ; locret_71E16:
00097636                            @locret:
00097636 4E75                       		rts	
00097638                            ; End of function DoModulation
00097638                            
00097638                            
00097638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097638                            
00097638                            ; sub_71E18:
00097638                            FMPrepareNote:
00097638 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
0009763C 6600                       		bne.s	locret_71E48		; Return if so
0009763E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00097642 6700                       		beq.s	FMSetRest		; Branch if zero
00097644                            ; loc_71E24:
00097644                            FMUpdateFreq:
00097644 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00097648 4880                       		ext.w	d0
0009764A DC40                       		add.w	d0,d6			; Add note frequency
0009764C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00097650 6600                       		bne.s	locret_71E48		; Return if so
00097652 3206                       		move.w	d6,d1
00097654 E049                       		lsr.w	#8,d1
00097656 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
0009765A 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009765E 1206                       		move.b	d6,d1
00097660 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00097664 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00097668                            ; locret_71E48:
00097668                            locret_71E48:
00097668 4E75                       		rts	
0009766A                            ; ===========================================================================
0009766A                            ; loc_71E4A:
0009766A                            FMSetRest:
0009766A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009766E 4E75                       		rts	
00097670                            ; End of function FMPrepareNote
00097670                            
00097670                            ; ===========================================================================
00097670                            ; loc_71E50:
00097670                            PauseMusic:
00097670 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00097672 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00097678 6700 0000                  		beq.w	@unpausedallfm
0009767C 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00097682 7602                       		moveq	#2,d3
00097684 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00097688 7200                       		moveq	#0,d1		; No panning, AMS or FMS
0009768A                            ; loc_71E6A:
0009768A                            @killpanloop:
0009768A 4EBA 0000                  		jsr	WriteFMI(pc)
0009768E 4EBA 0000                  		jsr	WriteFMII(pc)
00097692 5200                       		addq.b	#1,d0
00097694 51CB FFF4                  		dbf	d3,@killpanloop
00097698                            
00097698 7602                       		moveq	#2,d3
0009769A 7028                       		moveq	#$28,d0		; Key on/off register
0009769C                            ; loc_71E7C:
0009769C                            @noteoffloop:
0009769C 1203                       		move.b	d3,d1		; FM1, FM2, FM3
0009769E 4EBA 0000                  		jsr	WriteFMI(pc)
000976A2 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000976A4 4EBA 0000                  		jsr	WriteFMI(pc)
000976A8 51CB FFF2                  		dbf	d3,@noteoffloop
000976AC                            
000976AC 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000976B0 6000 FD94                  		bra.w	DoStartZ80
000976B4                            ; ===========================================================================
000976B4                            ; loc_71E94:
000976B4                            @unpausemusic:
000976B4 422E 0003                  		clr.b	f_pausemusic(a6)
000976B8 7630                       		moveq	#TrackSz,d3
000976BA 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000976BE 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000976C0                            ; loc_71EA0:
000976C0                            @bgmfmloop:
000976C0 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000976C4 6700                       		beq.s	@bgmfmnext		; Branch if not
000976C6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000976CA 6600                       		bne.s	@bgmfmnext		; Branch if yes
000976CC 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000976D0 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000976D4 4EBA 0000                  		jsr	WriteFMIorII(pc)
000976D8                            ; loc_71EB8:
000976D8                            @bgmfmnext:
000976D8 DAC3                       		adda.w	d3,a5
000976DA 51CC FFE4                  		dbf	d4,@bgmfmloop
000976DE                            
000976DE 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
000976E2 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
000976E4                            ; loc_71EC4:
000976E4                            @sfxfmloop:
000976E4 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000976E8 6700                       		beq.s	@sfxfmnext		; Branch if not
000976EA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000976EE 6600                       		bne.s	@sfxfmnext		; Branch if yes
000976F0 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000976F4 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000976F8 4EBA 0000                  		jsr	WriteFMIorII(pc)
000976FC                            ; loc_71EDC:
000976FC                            @sfxfmnext:
000976FC DAC3                       		adda.w	d3,a5
000976FE 51CC FFE4                  		dbf	d4,@sfxfmloop
00097702                            
00097702 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00097706 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
0009770A 6700                       		beq.s	@unpausedallfm		; Branch if not
0009770C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00097710 6600                       		bne.s	@unpausedallfm		; Branch if yes
00097712 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00097716 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
0009771A 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009771E                            ; loc_71EFE:
0009771E                            @unpausedallfm:
0009771E 6000 FD26                  		bra.w	DoStartZ80
00097722                            
00097722                            ; ---------------------------------------------------------------------------
00097722                            ; Subroutine to	play a sound or	music track
00097722                            ; ---------------------------------------------------------------------------
00097722                            
00097722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097722                            
00097722                            ; Sound_Play:
00097722                            CycleSoundQueue:
00097722 2079 0009 7164             		movea.l	(Go_SoundPriorities).l,a0
00097728 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
0009772C 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
0009772E 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00097730                            ; loc_71F12:
00097730                            @inputloop:
00097730 1011                       		move.b	(a1),d0			; move track number to d0
00097732 1200                       		move.b	d0,d1
00097734 4219                       		clr.b	(a1)+			; Clear entry
00097736 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
0009773A 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
0009773C 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00097742 6700                       		beq.s	@havesound		; If yes, branch
00097744 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00097748 6000                       		bra.s	@nextinput
0009774A                            ; ===========================================================================
0009774A                            ; loc_71F2C:
0009774A                            @havesound:
0009774A 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
0009774E 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00097752 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00097754 6500                       		blo.s	@nextinput		; Branch if yes
00097756 1602                       		move.b	d2,d3			; Store new priority
00097758 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
0009775C                            ; loc_71F3E:
0009775C                            @nextinput:
0009775C 51CC FFD2                  		dbf	d4,@inputloop
00097760                            
00097760 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00097762 6B00                       		bmi.s	@locret
00097764 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00097766                            ; locret_71F4A:
00097766                            @locret:
00097766 4E75                       		rts	
00097768                            ; End of function CycleSoundQueue
00097768                            
00097768                            
00097768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097768                            
00097768                            ; Sound_ChkValue:
00097768                            PlaySoundID:
00097768 7E00                       		moveq	#0,d7
0009776A 1E2E 0009                  		move.b	v_sound_id(a6),d7
0009776E 6700 0000                  		beq.w	StopAllSound
00097772 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00097774 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
0009777A                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
0009777A                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
0009777A                            		; See LevSel_NoCheat for more.
0009777A 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
0009777E 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00097782 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00097786 6500 0000                  		blo.w	@locret			; Return if yes
0009778A 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
0009778E 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00097792 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00097796 6500 0000                  		blo.w	@locret			; Return if yes
0009779A 0C07 00D1                  		cmpi.b	#$D1,d7
0009779E 6500 0000                  		bcs.w	Sound_PlaySpecial
000977A2 0C07 00DF                  		cmp.b	#$DF,d7
000977A6 6F00 0000                  		ble.w	Sound_D1toDF
000977AA 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000977AE 6500 0000                  		blo.w	@locret			; Return if yes
000977B2 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000977B6 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000977B8                            ; locret_71F8C:
000977B8                            @locret:
000977B8 4E75                       		rts	
000977BA                            ; ===========================================================================
000977BA                            
000977BA                            Sound_E0toE4:
000977BA 0407 00E0                  		subi.b	#flg__First,d7
000977BE E54F                       		lsl.w	#2,d7
000977C0 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000977C4                            ; ===========================================================================
000977C4                            
000977C4                            Sound_ExIndex:
000977C4 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000977C8 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000977CC 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
000977D0 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
000977D4 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
000977D8                            ptr_flgend
000977D8                            ; ===========================================================================
000977D8                            ; ---------------------------------------------------------------------------
000977D8                            ; Play "Say-gaa" PCM sound
000977D8                            ; ---------------------------------------------------------------------------
000977D8                            ; Sound_E1: PlaySega:
000977D8                            PlaySegaSound:
000977D8 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
000977E0 33FC 0000 00A1 1100        		startZ80
000977E8 323C 0011                  		move.w	#$11,d1
000977EC                            ; loc_71FC0:
000977EC                            @busyloop_outer:
000977EC 303C FFFF                  		move.w	#-1,d0
000977F0                            ; loc_71FC4:
000977F0                            @busyloop:
000977F0 4E71                       		nop	
000977F2 51C8 FFFC                  		dbf	d0,@busyloop
000977F6                            
000977F6 51C9 FFF4                  		dbf	d1,@busyloop_outer
000977FA                            
000977FA 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000977FC 4E75                       		rts	
000977FE                            ; ===========================================================================
000977FE                            ; ---------------------------------------------------------------------------
000977FE                            ; Play music track $81-$9F
000977FE                            ; ---------------------------------------------------------------------------
000977FE                            ; Sound_81to9F:
000977FE                            Sound_PlayBGM:
000977FE 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00097802 6600                       		bne.s	@bgmnot1up		; if not, branch
00097804 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00097808 6600 0000                  		bne.w	@locdblret		; if yes, branch
0009780C 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00097810 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00097812                            ; loc_71FE6:
00097812                            @clearsfxloop:
00097812 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097816 DAFC 0030                  		adda.w	#TrackSz,a5
0009781A 51C8 FFF6                  		dbf	d0,@clearsfxloop
0009781E                            
0009781E 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00097822 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00097824                            ; loc_71FF8:
00097824                            @cleartrackplayloop:
00097824 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00097828 DAFC 0030                  		adda.w	#TrackSz,a5
0009782C 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00097830                            
00097830 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00097832 204E                       		movea.l	a6,a0
00097834 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00097838 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
0009783C                            ; loc_72012:
0009783C                            @backupramloop:
0009783C 22D8                       		move.l	(a0)+,(a1)+
0009783E 51C8 FFFC                  		dbf	d0,@backupramloop
00097842                            
00097842 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00097848 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
0009784A 6000                       		bra.s	@bgm_loadMusic
0009784C                            ; ===========================================================================
0009784C                            ; loc_72024:
0009784C                            @bgmnot1up:
0009784C 422E 0027                  		clr.b	f_1up_playing(a6)
00097850 422E 0026                  		clr.b	v_fadein_counter(a6)
00097854                            ; loc_7202C:
00097854                            @bgm_loadMusic:
00097854 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00097858 2879 0009 7174             		movea.l	(Go_SpeedUpIndex).l,a4
0009785E 0407 0081                  		subi.b	#bgm__First,d7
00097862 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00097868 2879 0009 716C             		movea.l	(Go_MusicIndex).l,a4
0009786E E54F                       		lsl.w	#2,d7
00097870 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00097874 7000                       		moveq	#0,d0
00097876 3014                       		move.w	(a4),d0			; load voice pointer
00097878 D08C                       		add.l	a4,d0			; It is a relative pointer
0009787A 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
0009787E 102C 0005                  		move.b	5(a4),d0		; load tempo
00097882 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00097886                            		;tst.b	f_speedup(a6)
00097886                            		;beq.s	@nospeedshoes
00097886                            		;move.b	v_speeduptempo(a6),d0
00097886                            ; loc_72068:
00097886                            ;@nospeedshoes:
00097886 1D40 0002                  		move.b	d0,v_main_tempo(a6)
0009788A 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
0009788E 7200                       		moveq	#0,d1
00097890 264C                       		movea.l	a4,a3
00097892 5C4C                       		addq.w	#6,a4			; Point past header
00097894 7E00                       		moveq	#0,d7
00097896 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
0009789A 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
0009789E 5307                       		subq.b	#1,d7
000978A0 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
000978A4 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
000978A8 7C30                       		moveq	#TrackSz,d6
000978AA 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
000978AE 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
000978B2 45FA 0000                  		lea	FMDACInitBytes(pc),a2
000978B6                            ; loc_72098:
000978B6                            @bmg_fmloadloop:
000978B6 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000978BA 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000978BE 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000978C2 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000978C6 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
000978CA 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000978CE 7000                       		moveq	#0,d0
000978D0 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
000978D2 D08B                       		add.l	a3,d0				; Relative pointer
000978D4 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
000978D8 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
000978DC D2C6                       		adda.w	d6,a1
000978DE 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
000978E2                            		
000978E2 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000978E8 6600                       		bne.s	@silencefm6
000978EA 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000978EC 7200                       		moveq	#0,d1		; Disable DAC
000978EE 4EBA 0000                  		jsr	WriteFMI(pc)
000978F2 6000 0000                  		bra.w	@bgm_fmdone
000978F6                            ; ===========================================================================
000978F6                            ; loc_720D8:
000978F6                            @silencefm6:
000978F6 7028                       		moveq	#$28,d0		; Key on/off register
000978F8 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000978FA 4EBA 0000                  		jsr	WriteFMI(pc)
000978FE 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00097902 727F                       		moveq	#$7F,d1		; Total silence
00097904 4EBA 0000                  		jsr	WriteFMII(pc)
00097908 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
0009790C 727F                       		moveq	#$7F,d1		; Total silence
0009790E 4EBA 0000                  		jsr	WriteFMII(pc)
00097912 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00097916 727F                       		moveq	#$7F,d1		; Total silence
00097918 4EBA 0000                  		jsr	WriteFMII(pc)
0009791C 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00097920 727F                       		moveq	#$7F,d1		; Total silence
00097922 4EBA 0000                  		jsr	WriteFMII(pc)
00097926 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
0009792A 123C 00C0                  		move.b	#$C0,d1		; Stereo
0009792E 4EBA 0000                  		jsr	WriteFMII(pc)
00097932                            ; loc_72114:
00097932                            @bgm_fmdone:
00097932 7E00                       		moveq	#0,d7
00097934 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00097938 6700                       		beq.s	@bgm_psgdone	; branch if zero
0009793A 5307                       		subq.b	#1,d7
0009793C 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00097940 45FA 0000                  		lea	PSGInitBytes(pc),a2
00097944                            ; loc_72126:
00097944                            @bgm_psgloadloop:
00097944 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00097948 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0009794C 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00097950 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00097954 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00097958 7000                       		moveq	#0,d0
0009795A 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
0009795C D08B                       		add.l	a3,d0				; Relative pointer
0009795E 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00097962 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00097966 101C                       		move.b	(a4)+,d0			; load redundant byte
00097968 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
0009796C D2C6                       		adda.w	d6,a1
0009796E 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00097972                            ; loc_72154:
00097972                            @bgm_psgdone:
00097972 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00097976 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00097978                            ; loc_7215A:
00097978                            @sfxstoploop:
00097978 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
0009797A 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
0009797E 7000                       		moveq	#0,d0
00097980 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00097984 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00097986 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00097988 E508                       		lsl.b	#2,d0			; Convert to index
0009798A 6000                       		bra.s	@gotchannelindex
0009798C                            ; ===========================================================================
0009798C                            ; loc_7216E:
0009798C                            @sfxpsgchannel:
0009798C E608                       		lsr.b	#3,d0		; Convert to index
0009798E                            ; loc_72170:
0009798E                            @gotchannelindex:
0009798E 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00097992 2070 0000                  		movea.l	(a0,d0.w),a0
00097996 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
0009799A                            ; loc_7217C:
0009799A                            @sfxnext:
0009799A D2C6                       		adda.w	d6,a1
0009799C 51CF FFDA                  		dbf	d7,@sfxstoploop
000979A0                            
000979A0 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000979A4 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
000979A6 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000979AC                            ; loc_7218E:
000979AC                            @checkspecialpsg:
000979AC 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000979B0 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
000979B2 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000979B8                            ; loc_7219A:
000979B8                            @sendfmnoteoff:
000979B8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000979BC 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000979BE                            ; loc_721A0:
000979BE                            @fmnoteoffloop:
000979BE 4EBA 0000                  		jsr	FMNoteOff(pc)
000979C2 DAC6                       		adda.w	d6,a5
000979C4 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000979C8 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000979CA                            ; loc_721AC:
000979CA                            @psgnoteoffloop:
000979CA 4EBA 0000                  		jsr	PSGNoteOff(pc)
000979CE DAC6                       		adda.w	d6,a5
000979D0 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
000979D4                            ; loc_721B6:
000979D4                            @locdblret:
000979D4 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
000979D6 4E75                       		rts	
000979D8                            ; ===========================================================================
000979D8                            ; byte_721BA:
000979D8 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000979E0 00                         		even
000979E0                            ; byte_721C2:
000979E0 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000979E4 00                         		even
000979E4                            ; ===========================================================================
000979E4                            ; ---------------------------------------------------------------------------
000979E4                            ; Play Spin Dash sound effect
000979E4                            ; ---------------------------------------------------------------------------
000979E4                            Sound_D1toDF:
000979E4 4A2E 0027                  		tst.b	$27(a6)
000979E8 6600 0000                  		bne.w	loc_722C6
000979EC 4A2E 0004                  		tst.b	4(a6)
000979F0 6600 0000                  		bne.w	loc_722C6
000979F4 4A2E 0024                  		tst.b	$24(a6)
000979F8 6600 0000                  		bne.w	loc_722C6
000979FC 4238 C900                  		clr.b	($FFFFC900).w
00097A00 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00097A04 6600                       		bne.s	@cont3	; if not, branch
00097A06 3F00                       		move.w	d0,-(sp)
00097A08 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00097A0C 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00097A10 6600                       		bne.s	@cont1		; if it is, branch
00097A12 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00097A16                            		
00097A16                            @cont1:
00097A16 5200                       		addq.b	#1,d0
00097A18 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00097A1C 6400                       		bcc.s	@cont2		; if it has, branch
00097A1E 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00097A22                            		
00097A22                            @cont2:
00097A22 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00097A28 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00097A2E 301F                       		move.w	(sp)+,d0
00097A30                            		
00097A30                            @cont3:	
00097A30 2079 0009 7170             		movea.l	(Go_SoundIndex).l,a0
00097A36 0407 00A0                  		sub.b	#$A0,d7
00097A3A 6000                       		bra.s	SoundEffects_Common
00097A3C                            ; ---------------------------------------------------------------------------
00097A3C                            ; Play normal sound effect
00097A3C                            ; ---------------------------------------------------------------------------
00097A3C                            ; Sound_A0toCF:
00097A3C                            Sound_PlaySFX:
00097A3C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00097A40 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00097A44 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097A48 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00097A4C 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00097A50 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00097A54 4238 C900                  		clr.b	($FFFFC900).w
00097A58 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00097A5C 6600                       		bne.s	Sound_notB5		; if not, branch
00097A5E 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00097A62 6600                       		bne.s	loc_721EE		; Branch if not
00097A64 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00097A68                            
00097A68                            loc_721EE:
00097A68 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00097A6E                            
00097A6E                            Sound_notB5:
00097A6E 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00097A72 6600                       		bne.s	Sound_notA7		; if not, branch
00097A74 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00097A78 6600 0000                  		bne.w	locret_722C4			; Return if not
00097A7C 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00097A82                            		
00097A82                            Sound_notA7:
00097A82 2079 0009 7170             		movea.l	(Go_SoundIndex).l,a0
00097A88 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00097A8C                            
00097A8C                            SoundEffects_Common:		
00097A8C E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00097A8E 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00097A92 224B                       		movea.l	a3,a1
00097A94 7200                       		moveq	#0,d1
00097A96 3219                       		move.w	(a1)+,d1		; Voice pointer
00097A98 D28B                       		add.l	a3,d1			; Relative pointer
00097A9A 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00097A9C                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00097A9C                            		; index entry is above $3F will cause a crash. This is actually the same way that
00097A9C                            		; this bug is fixed in Ristar's driver.
00097A9C 7E00                       		moveq	#0,d7	
00097A9E 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00097AA0 5307                       		subq.b	#1,d7
00097AA2 7C30                       		moveq	#TrackSz,d6
00097AA4                            
00097AA4                            loc_72228:
00097AA4 7600                       		moveq	#0,d3
00097AA6 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00097AAA 1803                       		move.b	d3,d4
00097AAC 6B00                       		bmi.s	loc_72244	; Branch if PSG
00097AAE 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00097AB0 E54B                       		lsl.w	#2,d3
00097AB2 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00097AB6 2A75 3000                  		movea.l	(a5,d3.w),a5
00097ABA 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00097ABE 6000                       		bra.s	loc_7226E
00097AC0                            ; ===========================================================================
00097AC0                            
00097AC0                            loc_72244:
00097AC0 E64B                       		lsr.w	#3,d3
00097AC2 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00097AC6 2A75 3000                  		movea.l	(a5,d3.w),a5
00097ACA 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00097ACE 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00097AD2 6600                       		bne.s	loc_7226E	; Branch if not
00097AD4 1004                       		move.b	d4,d0
00097AD6 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00097ADA 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097AE0 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00097AE4 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097AEA                            
00097AEA                            loc_7226E:
00097AEA 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00097AEE 2A75 3000                  		movea.l	(a5,d3.w),a5
00097AF2 244D                       		movea.l	a5,a2
00097AF4 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00097AF6                            
00097AF6                            loc_72276:
00097AF6 429A                       		clr.l	(a2)+
00097AF8 51C8 FFFC                  		dbf	d0,loc_72276
00097AFC                            
00097AFC 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00097AFE 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00097B02 7000                       		moveq	#0,d0
00097B04 3019                       		move.w	(a1)+,d0			; Track data pointer
00097B06 D08B                       		add.l	a3,d0				; Relative pointer
00097B08 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00097B0C 3B59 0008                  		move.w	(a1)+,8(a5)
00097B10 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00097B14 6700                       		beq.s	@cont		; if not, branch
00097B16 3F00                       		move.w	d0,-(sp)
00097B18 1038 C902                  		move.b	($FFFFC902).w,d0
00097B1C D12D 0008                  		add.b	d0,8(a5)
00097B20 301F                       		move.w	(sp)+,d0
00097B22                            		
00097B22                            @cont:
00097B22 1B7C 0001 000E             		move.b	#1,$E(a5)
00097B28 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00097B2C 4A04                       		tst.b	d4				; Is this a PSG channel?
00097B2E 6B00                       		bmi.s	loc_722A8		; Branch if yes
00097B30 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097B36 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00097B3A                            
00097B3A                            loc_722A8:
00097B3A 51CF FF68                  		dbf	d7,loc_72228
00097B3E                            
00097B3E 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00097B42 6A00                       		bpl.s	loc_722B8				; Branch if not
00097B44 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097B4A                            
00097B4A                            loc_722B8:
00097B4A 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00097B4E 6A00                       		bpl.s	locret_722C4						; Branch if not
00097B50 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097B56                            
00097B56                            locret_722C4:
00097B56 4E75                       		rts	
00097B58                            ; ===========================================================================
00097B58                            
00097B58                            loc_722C6:
00097B58 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00097B5A 4E75                       		rts	
00097B5C                            ; ===========================================================================
00097B5C                            ; ---------------------------------------------------------------------------
00097B5C                            ; RAM addresses for FM and PSG channel variables used by the SFX
00097B5C                            ; ---------------------------------------------------------------------------
00097B5C                            ; dword_722CC: BGMChannelRAM:
00097B5C                            SFX_BGMChannelRAM:
00097B5C 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00097B60 0000 0000                  		dc.l 0
00097B64 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00097B68 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00097B6C 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00097B70 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00097B74 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00097B78 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00097B7C                            ; dword_722EC: SFXChannelRAM:
00097B7C                            SFX_SFXChannelRAM:
00097B7C 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00097B80 0000 0000                  		dc.l 0
00097B84 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097B88 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00097B8C 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00097B90 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00097B94 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00097B98 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00097B9C                            ; ===========================================================================
00097B9C                            ; ---------------------------------------------------------------------------
00097B9C                            ; Play GHZ waterfall sound
00097B9C                            ; ---------------------------------------------------------------------------
00097B9C                            ; Sound_D0toDF:
00097B9C                            Sound_PlaySpecial:
00097B9C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00097BA0 6600 0000                  		bne.w	@locret			; Return if so
00097BA4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097BA8 6600 0000                  		bne.w	@locret			; Exit if it is
00097BAC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00097BB0 6600 0000                  		bne.w	@locret			; Exit if it is
00097BB4 2079 0009 7168             		movea.l	(Go_SpecSoundIndex).l,a0
00097BBA 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00097BBE E54F                       		lsl.w	#2,d7
00097BC0 2670 7000                  		movea.l	(a0,d7.w),a3
00097BC4 224B                       		movea.l	a3,a1
00097BC6 7000                       		moveq	#0,d0
00097BC8 3019                       		move.w	(a1)+,d0			; Voice pointer
00097BCA D08B                       		add.l	a3,d0				; Relative pointer
00097BCC 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00097BD0 1A19                       		move.b	(a1)+,d5			; Dividing timing
00097BD2                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00097BD2                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00097BD2 7E00                       		moveq	#0,d7	
00097BD4 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00097BD6 5307                       		subq.b	#1,d7
00097BD8 7C30                       		moveq	#TrackSz,d6
00097BDA                            ; loc_72348:
00097BDA                            @sfxloadloop:
00097BDA 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00097BDE 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00097BE0 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097BE6 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097BEA 6000                       		bra.s	@sfxinitpsg
00097BEC                            ; ===========================================================================
00097BEC                            ; loc_7235A:
00097BEC                            @sfxoverridepsg:
00097BEC 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097BF2 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00097BF6                            ; loc_72364:
00097BF6                            @sfxinitpsg:
00097BF6 244D                       		movea.l	a5,a2
00097BF8 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00097BFA                            ; loc_72368:
00097BFA                            @clearsfxtrackram:
00097BFA 429A                       		clr.l	(a2)+
00097BFC 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00097C00                            
00097C00 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00097C02 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00097C06 7000                       		moveq	#0,d0
00097C08 3019                       		move.w	(a1)+,d0			; Track data pointer
00097C0A D08B                       		add.l	a3,d0				; Relative pointer
00097C0C 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00097C10 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00097C14 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00097C1A 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00097C1E 4A04                       		tst.b	d4				; Is this a PSG channel?
00097C20 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00097C22 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097C28                            ; loc_72396:
00097C28                            @sfxpsginitdone:
00097C28 51CF FFB0                  		dbf	d7,@sfxloadloop
00097C2C                            
00097C2C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00097C30 6A00                       		bpl.s	@doneoverride					; Branch if not
00097C32 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097C38                            ; loc_723A6:
00097C38                            @doneoverride:
00097C38 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00097C3C 6A00                       		bpl.s	@locret						; Branch if not
00097C3E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097C44 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00097C48 13C4 00C0 0011             		move.b	d4,(psg_input).l
00097C4E 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00097C52 13C4 00C0 0011             		move.b	d4,(psg_input).l
00097C58                            ; locret_723C6:
00097C58                            @locret:
00097C58 4E75                       		rts	
00097C5A                            ; End of function PlaySoundID
00097C5A                            
00097C5A                            ; ===========================================================================
00097C5A                            ; ---------------------------------------------------------------------------
00097C5A                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00097C5A                            ; ---------------------------------------------------------------------------
00097C5A                            ; The first block would have been used for overriding the music tracks
00097C5A                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00097C5A                            ; The third block would be used to set up the Special SFX
00097C5A                            ; The second block, however, is for the SFX tracks, which have a higher priority
00097C5A                            ; and would be checked for if they're currently playing
00097C5A                            ; If they are, then the third block would be used again, this time to mark
00097C5A                            ; the new tracks as 'currently playing'
00097C5A                            
00097C5A                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00097C5A                            
00097C5A                            ; BGMFM4PSG3RAM:
00097C5A                            ;SpecSFX_BGMChannelRAM:
00097C5A 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00097C5E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00097C62                            ; SFXFM4PSG3RAM:
00097C62                            ;SpecSFX_SFXChannelRAM:
00097C62 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097C66 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00097C6A                            ; SpecialSFXFM4PSG3RAM:
00097C6A                            ;SpecSFX_SpecSFXChannelRAM:
00097C6A 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00097C6E 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00097C72                            
00097C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097C72                            
00097C72                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00097C72                            StopSFX:
00097C72 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00097C74 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00097C78 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00097C7A                            ; loc_723EA:
00097C7A                            @trackloop:
00097C7A 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00097C7C 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00097C80 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00097C84 7600                       		moveq	#0,d3
00097C86 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00097C8A 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00097C8C 4EBA 0000                  		jsr	FMNoteOff(pc)
00097C90 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00097C94 6600                       		bne.s	@getfmpointer					; Branch if not
00097C96 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00097C9A 6A00                       		bpl.s	@getfmpointer					; Branch if not
00097C9C                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00097C9C                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00097C9C                            		; is playing its sound!
00097C9C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097CA0 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00097CA4 6000                       		bra.s	@gotfmpointer
00097CA6                            ; ===========================================================================
00097CA6                            ; loc_72416:
00097CA6                            @getfmpointer:
00097CA6 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00097CA8 E50B                       		lsl.b	#2,d3
00097CAA 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00097CAE 264D                       		movea.l	a5,a3
00097CB0 2A70 3000                  		movea.l	(a0,d3.w),a5
00097CB4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00097CB8                            ; loc_72428:
00097CB8                            @gotfmpointer:
00097CB8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097CBC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097CC0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097CC4 4EBA 0000                  		jsr	SetVoice(pc)
00097CC8 2A4B                       		movea.l	a3,a5
00097CCA 6000                       		bra.s	@nexttrack
00097CCC                            ; ===========================================================================
00097CCC                            ; loc_7243C:
00097CCC                            @trackpsg:
00097CCC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00097CD0 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00097CD4 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00097CD8 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00097CDA 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00097CDE 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00097CE0 E60B                       		lsr.b	#3,d3
00097CE2 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00097CE6 2070 3000                  		movea.l	(a0,d3.w),a0
00097CEA                            ; loc_7245A:
00097CEA                            @gotpsgpointer:
00097CEA 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097CEE 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00097CF2 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00097CF8 6600                       		bne.s	@nexttrack			; Branch if not
00097CFA 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00097D02                            ; loc_72472:
00097D02                            @nexttrack:
00097D02 DAFC 0030                  		adda.w	#TrackSz,a5
00097D06 51CF FF72                  		dbf	d7,@trackloop
00097D0A                            
00097D0A 4E75                       		rts	
00097D0C                            ; End of function StopSFX
00097D0C                            
00097D0C                            
00097D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097D0C                            
00097D0C                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00097D0C                            StopSpecialSFX:
00097D0C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097D10 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D12 6A00                       		bpl.s	@fadedfm		; Branch if not
00097D14 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097D18 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00097D1C 6600                       		bne.s	@fadedfm		; Branch if not
00097D1E 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00097D22 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00097D26 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097D2A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097D2E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D30 6A00                       		bpl.s	@fadedfm		; Branch if not
00097D32 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00097D36 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097D3A 4EBA 0000                  		jsr	SetVoice(pc)
00097D3E                            ; loc_724AE:
00097D3E                            @fadedfm:
00097D3E 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00097D42 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D44 6A00                       		bpl.s	@fadedpsg		; Branch if not
00097D46 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097D4A 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00097D4E 6600                       		bne.s	@fadedpsg		; Return if not
00097D50 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00097D54 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00097D58 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097D5C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097D60 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D62 6A00                       		bpl.s	@fadedpsg		; Return if not
00097D64 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00097D6A 6600                       		bne.s	@fadedpsg			; Return if not
00097D6C 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00097D74                            ; locret_724E4:
00097D74                            @fadedpsg:
00097D74 4E75                       		rts	
00097D76                            ; End of function StopSpecialSFX
00097D76                            
00097D76                            ; ===========================================================================
00097D76                            ; ---------------------------------------------------------------------------
00097D76                            ; Fade out music
00097D76                            ; ---------------------------------------------------------------------------
00097D76                            ; Sound_E0:
00097D76                            FadeOutMusic:
00097D76 4EBA FEFA                  		jsr	StopSFX(pc)
00097D7A 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00097D7E 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00097D84 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00097D8A 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00097D8E 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00097D92 4E75                       		rts	
00097D94                            
00097D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097D94                            
00097D94                            ; sub_72504:
00097D94                            DoFadeOut:
00097D94 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00097D98 6700                       		beq.s	@continuefade		; Branch if yes
00097D9A 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00097D9E 4E75                       		rts	
00097DA0                            ; ===========================================================================
00097DA0                            ; loc_72510:
00097DA0                            @continuefade:
00097DA0 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00097DA4 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00097DA8 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00097DAE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097DB2 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097DB4                            ; loc_72524:
00097DB4                            @fmloop:
00097DB4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097DB6 6A00                       		bpl.s	@nextfm			; Branch if not
00097DB8 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00097DBC 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00097DBE 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097DC2 6000                       		bra.s	@nextfm
00097DC4                            ; ===========================================================================
00097DC4                            ; loc_72534:
00097DC4                            @sendfmtl:
00097DC4 4EBA 0000                  		jsr	SendVoiceTL(pc)
00097DC8                            ; loc_72538:
00097DC8                            @nextfm:
00097DC8 DAFC 0030                  		adda.w	#TrackSz,a5
00097DCC 51CF FFE6                  		dbf	d7,@fmloop
00097DD0                            
00097DD0 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00097DD2                            ; loc_72542:
00097DD2                            @psgloop:
00097DD2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097DD4 6A00                       		bpl.s	@nextpsg		; branch if not
00097DD6 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00097DDA 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00097DE0 6500                       		blo.s	@sendpsgvol		; Branch if not
00097DE2 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097DE6 6000                       		bra.s	@nextpsg
00097DE8                            ; ===========================================================================
00097DE8                            ; loc_72558:
00097DE8                            @sendpsgvol:
00097DE8 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00097DEC 4EBA 0000                  		jsr	SetPSGVolume(pc)
00097DF0                            ; loc_72560:
00097DF0                            @nextpsg:
00097DF0 DAFC 0030                  		adda.w	#TrackSz,a5
00097DF4 51CF FFDC                  		dbf	d7,@psgloop
00097DF8                            
00097DF8 4E75                       		rts	
00097DFA                            ; End of function DoFadeOut
00097DFA                            
00097DFA                            
00097DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097DFA                            
00097DFA                            ; sub_7256A:
00097DFA                            FMSilenceAll:
00097DFA 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00097DFC 7028                       		moveq	#$28,d0		; FM key on/off register
00097DFE                            ; loc_7256E:
00097DFE                            @noteoffloop:
00097DFE 1203                       		move.b	d3,d1
00097E00 4EBA 0000                  		jsr	WriteFMI(pc)
00097E04 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00097E06 4EBA 0000                  		jsr	WriteFMI(pc)
00097E0A 51CB FFF2                  		dbf	d3,@noteoffloop
00097E0E                            
00097E0E 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00097E10 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00097E12 7802                       		moveq	#2,d4		; ... for all 3 channels...
00097E14                            ; loc_72584:
00097E14                            @channelloop:
00097E14 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00097E16                            ; loc_72586:
00097E16                            @channeltlloop:
00097E16 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00097E1A 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00097E1E 5840                       		addq.w	#4,d0		; Next TL operator
00097E20 51CB FFF4                  		dbf	d3,@channeltlloop
00097E24                            
00097E24 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00097E28 51CC FFEA                  		dbf	d4,@channelloop
00097E2C                            
00097E2C 4E75                       		rts	
00097E2E                            ; End of function FMSilenceAll
00097E2E                            
00097E2E                            ; ===========================================================================
00097E2E                            ; ---------------------------------------------------------------------------
00097E2E                            ; Stop music
00097E2E                            ; ---------------------------------------------------------------------------
00097E2E                            ; Sound_E4: StopSoundAndMusic:
00097E2E                            StopAllSound:
00097E2E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00097E30 123C 0080                  		move.b	#$80,d1		; Enable DAC
00097E34 4EBA 0000                  		jsr	WriteFMI(pc)
00097E38 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00097E3A 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00097E3C 4EBA 0000                  		jsr	WriteFMI(pc)
00097E40 204E                       		movea.l	a6,a0
00097E42                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00097E42                            		; Remove the '-$10' to fix this.
00097E42 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00097E46                            ; loc_725B6:
00097E46                            @clearramloop:
00097E46 4298                       		clr.l	(a0)+
00097E48 51C8 FFFC                  		dbf	d0,@clearramloop
00097E4C                            
00097E4C 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097E52 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00097E56 6000 0000                  		bra.w	PSGSilenceAll
00097E5A                            
00097E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097E5A                            
00097E5A                            ; sub_725CA:
00097E5A                            InitMusicPlayback:
00097E5A 204E                       		movea.l	a6,a0
00097E5C                            		; Save several values
00097E5C 1216                       		move.b	v_sndprio(a6),d1
00097E5E 142E 0027                  		move.b	f_1up_playing(a6),d2
00097E62 162E 002A                  		move.b	f_speedup(a6),d3
00097E66 182E 0026                  		move.b	v_fadein_counter(a6),d4
00097E6A                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00097E6A 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00097E6E 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00097E72                            ; loc_725E4:
00097E72                            @clearramloop:
00097E72 4298                       		clr.l	(a0)+
00097E74 51C8 FFFC                  		dbf	d0,@clearramloop
00097E78                            
00097E78                            		; Restore the values saved above
00097E78 1C81                       		move.b	d1,v_sndprio(a6)
00097E7A 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00097E7E 1D43 002A                  		move.b	d3,f_speedup(a6)
00097E82 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00097E86 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00097E8A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097E90                            		; DANGER! This silences ALL channels, even the ones being used
00097E90                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00097E90                            		; doesn't affect SFX channels, either.
00097E90                            		; This should be replaced with an 'rts'.
00097E90 4EBA FF68                  		jsr	FMSilenceAll(pc)
00097E94 6000 0000                  		bra.w	PSGSilenceAll
00097E98                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00097E98                            		; don't do a very good job of setting up the music tracks.
00097E98                            		; Tracks that aren't defined in a music file's header don't have
00097E98                            		; their channels defined, meaning @sendfmnoteoff won't silence
00097E98                            		; hardware properly. In combination with removing the above
00097E98                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00097E98                            		; notes.
00097E98                            		; To fix this, I suggest using this code, instead of an 'rts':
00097E98                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00097E98                            		;lea	FMDACInitBytes(pc),a2
00097E98                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00097E98                            		;bsr.s	@writeloop
00097E98                            		;lea	PSGInitBytes(pc),a2
00097E98                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00097E98                            
00097E98                            ;@writeloop:
00097E98                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00097E98                            		;lea	TrackSz(a1),a1		; Next track
00097E98                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00097E98                            
00097E98                            		;rts
00097E98                            	
00097E98                            ; End of function InitMusicPlayback
00097E98                            
00097E98                            
00097E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097E98                            
00097E98                            ; sub_7260C:
00097E98                            TempoWait:
00097E98 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00097E9E 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00097EA2 7030                       		moveq	#TrackSz,d0
00097EA4 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00097EA6                            ; loc_7261A:
00097EA6                            @tempoloop:
00097EA6 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00097EA8 D0C0                       		adda.w	d0,a0	; Advance to next track
00097EAA 51C9 FFFA                  		dbf	d1,@tempoloop
00097EAE                            
00097EAE 4E75                       		rts	
00097EB0                            ; End of function TempoWait
00097EB0                            
00097EB0                            ; ===========================================================================
00097EB0                            ; ---------------------------------------------------------------------------
00097EB0                            ; Speed	up music
00097EB0                            ; ---------------------------------------------------------------------------
00097EB0                            ; Sound_E2:
00097EB0                            SpeedUpMusic:
00097EB0 4A2E 0027                  		tst.b	f_1up_playing(a6)
00097EB4 6600                       		bne.s	@speedup_1up
00097EB6 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00097EBC 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00097EC2 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00097EC8 4E75                       		rts	
00097ECA                            ; ===========================================================================
00097ECA                            ; loc_7263E:
00097ECA                            @speedup_1up:
00097ECA 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00097ED0 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00097ED6 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00097EDC 4E75                       		rts	
00097EDE                            ; ===========================================================================
00097EDE                            ; ---------------------------------------------------------------------------
00097EDE                            ; Change music back to normal speed
00097EDE                            ; ---------------------------------------------------------------------------
00097EDE                            ; Sound_E3:
00097EDE                            SlowDownMusic:
00097EDE 4A2E 0027                  		tst.b	f_1up_playing(a6)
00097EE2 6600                       		bne.s	@slowdown_1up
00097EE4 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00097EEA 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00097EF0 422E 002A                  		clr.b	f_speedup(a6)
00097EF4 4E75                       		rts	
00097EF6                            ; ===========================================================================
00097EF6                            ; loc_7266A:
00097EF6                            @slowdown_1up:
00097EF6 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00097EFC 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00097F02 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00097F06 4E75                       		rts	
00097F08                            
00097F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097F08                            
00097F08                            ; sub_7267C:
00097F08                            DoFadeIn:
00097F08 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00097F0C 6700                       		beq.s	@continuefade		; Branch if yes
00097F0E 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00097F12 4E75                       		rts	
00097F14                            ; ===========================================================================
00097F14                            ; loc_72688:
00097F14                            @continuefade:
00097F14 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00097F18 6700                       		beq.s	@fadedone		; Branch if yes
00097F1A 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00097F1E 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00097F24 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097F28 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097F2A                            ; loc_7269E:
00097F2A                            @fmloop:
00097F2A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097F2C 6A00                       		bpl.s	@nextfm			; Branch if not
00097F2E 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097F32 4EBA 0000                  		jsr	SendVoiceTL(pc)
00097F36                            ; loc_726AA:
00097F36                            @nextfm:
00097F36 DAFC 0030                  		adda.w	#TrackSz,a5
00097F3A 51CF FFEE                  		dbf	d7,@fmloop
00097F3E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00097F40                            ; loc_726B4:
00097F40                            @psgloop:
00097F40 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097F42 6A00                       		bpl.s	@nextpsg		; Branch if not
00097F44 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097F48 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00097F4C 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00097F50 6500                       		blo.s	@sendpsgvol		; Branch if yes
00097F52 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00097F54                            ; loc_726C8:
00097F54                            @sendpsgvol:
00097F54 4EBA 0000                  		jsr	SetPSGVolume(pc)
00097F58                            ; loc_726CC:
00097F58                            @nextpsg:
00097F58 DAFC 0030                  		adda.w	#TrackSz,a5
00097F5C 51CF FFE2                  		dbf	d7,@psgloop
00097F60 4E75                       		rts	
00097F62                            ; ===========================================================================
00097F62                            ; loc_726D6:
00097F62                            @fadedone:
00097F62 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00097F68 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00097F6C 4E75                       		rts	
00097F6E                            ; End of function DoFadeIn
00097F6E                            
00097F6E                            ; ===========================================================================
00097F6E                            ; loc_726E2:
00097F6E                            FMNoteOn:
00097F6E 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00097F72 6600                       		bne.s	@locret		; Return if so
00097F74 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00097F78 6600                       		bne.s	@locret		; Return if so
00097F7A 7028                       		moveq	#$28,d0		; Note on/off register
00097F7C 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00097F80 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00097F84 6000 0000                  		bra.w	WriteFMI
00097F88                            ; ===========================================================================
00097F88                            ; locret_726FC:
00097F88                            @locret:
00097F88 4E75                       		rts	
00097F8A                            
00097F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097F8A                            
00097F8A                            ; sub_726FE:
00097F8A                            FMNoteOff:
00097F8A 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00097F8E 6600                       		bne.s	locret_72714	; Return if yes
00097F90 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097F94 6600                       		bne.s	locret_72714	; Return if yes
00097F96                            ; loc_7270A:
00097F96                            SendFMNoteOff:
00097F96 7028                       		moveq	#$28,d0		; Note on/off register
00097F98 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00097F9C 6000 0000                  		bra.w	WriteFMI
00097FA0                            ; ===========================================================================
00097FA0                            
00097FA0                            locret_72714:
00097FA0 4E75                       		rts	
00097FA2                            ; End of function FMNoteOff
00097FA2                            
00097FA2                            ; ===========================================================================
00097FA2                            ; loc_72716:
00097FA2                            WriteFMIorIIMain:
00097FA2 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00097FA6 6600                       		bne.s	@locret		; Return if yes
00097FA8 6000 0000                  		bra.w	WriteFMIorII
00097FAC                            ; ===========================================================================
00097FAC                            ; locret_72720:
00097FAC                            @locret:
00097FAC 4E75                       		rts	
00097FAE                            
00097FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FAE                            
00097FAE                            ; sub_72722:
00097FAE                            WriteFMIorII:
00097FAE 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00097FB4 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00097FB6 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00097FBA                            ; End of function WriteFMIorII
00097FBA                            
00097FBA                            
00097FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FBA                            
00097FBA                            ; The reason I think this is an *early* SMPS 68k Type 1b
00097FBA                            ; is because this subroutine is the one from Type 1a:
00097FBA                            ; other Type 1b drivers have a newer, optimised version.
00097FBA                            ; The driver itself is Type 1b, with this odd exception.
00097FBA                            
00097FBA                            ; sub_7272E:
00097FBA                            WriteFMI:
00097FBA 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097FC0 0802 0007                  		btst	#7,d2		; Is FM busy?
00097FC4 66F4                       		bne.s	WriteFMI	; Loop if so
00097FC6 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00097FCC 4E71                       		nop	
00097FCE 4E71                       		nop	
00097FD0 4E71                       		nop	
00097FD2                            ; loc_72746:
00097FD2                            @waitloop:
00097FD2 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097FD8 0802 0007                  		btst	#7,d2		; Is FM busy?
00097FDC 66F4                       		bne.s	@waitloop	; Loop if so
00097FDE                            
00097FDE 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00097FE4 4E75                       		rts	
00097FE6                            ; End of function WriteFMI
00097FE6                            
00097FE6                            ; ===========================================================================
00097FE6                            ; loc_7275A:
00097FE6                            WriteFMIIPart:
00097FE6 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00097FEA 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00097FEE D002                       		add.b	d2,d0			; Add in to destination register
00097FF0                            
00097FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FF0                            
00097FF0                            ; sub_72764:
00097FF0                            WriteFMII:
00097FF0 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097FF6 0802 0007                  		btst	#7,d2		; Is FM busy?
00097FFA 66F4                       		bne.s	WriteFMII	; Loop if so
00097FFC 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00098002 4E71                       		nop	
00098004 4E71                       		nop	
00098006 4E71                       		nop	
00098008                            ; loc_7277C:
00098008                            @waitloop:
00098008 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009800E 0802 0007                  		btst	#7,d2		; Is FM busy?
00098012 66F4                       		bne.s	@waitloop	; Loop if so
00098014                            
00098014 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
0009801A 4E75                       		rts	
0009801C                            ; End of function WriteFMII
0009801C                            
0009801C                            ; ===========================================================================
0009801C                            ; ---------------------------------------------------------------------------
0009801C                            ; FM Note Values: b-0 to a#8
0009801C                            ; ---------------------------------------------------------------------------
0009801C                            ; word_72790: FM_Notes:
0009801C                            FMFrequencies:
0009801C 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00098034 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
0009804C 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00098064 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
0009807C 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00098094 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
000980AC 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
000980C4 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000980DC                            
000980DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000980DC                            
000980DC                            ; sub_72850:
000980DC                            PSGUpdateTrack:
000980DC 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000980E0 6600                       		bne.s	@notegoing
000980E2 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000980E6 4EBA 0000                  		jsr	PSGDoNext(pc)
000980EA 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000980EE 6000 0000                  		bra.w	PSGDoVolFX
000980F2                            ; ===========================================================================
000980F2                            ; loc_72866:
000980F2                            @notegoing:
000980F2 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000980F6 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000980FA 4EBA F4EA                  		jsr	DoModulation(pc)
000980FE 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00098102 4E75                       		rts
00098104                            ; End of function PSGUpdateTrack
00098104                            
00098104                            
00098104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098104                            
00098104                            ; sub_72878:
00098104                            PSGDoNext:
00098104 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00098108 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
0009810C                            ; loc_72880:
0009810C                            @noteloop:
0009810C 7A00                       		moveq	#0,d5
0009810E 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00098110 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00098114 6500                       		blo.s	@gotnote	; Branch if not
00098116 4EBA 0000                  		jsr	CoordFlag(pc)
0009811A 60F0                       		bra.s	@noteloop
0009811C                            ; ===========================================================================
0009811C                            ; loc_72890:
0009811C                            @gotnote:
0009811C 4A05                       		tst.b	d5		; Is it a note?
0009811E 6A00                       		bpl.s	@gotduration	; Branch if not
00098120 4EBA 0000                  		jsr	PSGSetFreq(pc)
00098124 1A1C                       		move.b	(a4)+,d5	; Get another byte
00098126 4A05                       		tst.b	d5		; Is it a duration?
00098128 6A00                       		bpl.s	@gotduration	; Branch if yes
0009812A 534C                       		subq.w	#1,a4		; Put byte back
0009812C 6000 F452                  		bra.w	FinishTrackUpdate
00098130                            ; ===========================================================================
00098130                            ; loc_728A4:
00098130                            @gotduration:
00098130 4EBA F42E                  		jsr	SetDuration(pc)
00098134 6000 F44A                  		bra.w	FinishTrackUpdate
00098138                            ; End of function PSGDoNext
00098138                            
00098138                            
00098138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098138                            
00098138                            ; sub_728AC:
00098138                            PSGSetFreq:
00098138 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
0009813C 6500                       		bcs.s	@restpsg	; If $80, put track at rest
0009813E DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00098142 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00098146 E34D                       		lsl.w	#1,d5
00098148 41FA 0000                  		lea	PSGFrequencies(pc),a0
0009814C 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00098152 6000 F42C                  		bra.w	FinishTrackUpdate
00098156                            ; ===========================================================================
00098156                            ; loc_728CA:
00098156                            @restpsg:
00098156 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009815A 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00098160 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00098164 6000 0000                  		bra.w	PSGNoteOff
00098168                            ; End of function PSGSetFreq
00098168                            
00098168                            
00098168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098168                            
00098168                            ; sub_728DC:
00098168                            PSGDoNoteOn:
00098168 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
0009816C 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
0009816E                            ; End of function PSGDoNoteOn
0009816E                            
0009816E                            
0009816E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009816E                            
0009816E                            ; sub_728E2:
0009816E                            PSGUpdateFreq:
0009816E 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00098172 4880                       		ext.w	d0
00098174 DC40                       		add.w	d0,d6		; Add to frequency
00098176 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0009817A 6600                       		bne.s	@locret		; Return if yes
0009817C 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00098180 6600                       		bne.s	@locret		; Return if yes
00098182 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00098186 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
0009818A 6600                       		bne.s	@notnoise	; Branch if not
0009818C 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00098190                            ; loc_72904:
00098190                            @notnoise:
00098190 3206                       		move.w	d6,d1
00098192 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00098196 8001                       		or.b	d1,d0		; Latch tone data to channel
00098198 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
0009819A 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0009819E 13C0 00C0 0011             		move.b	d0,(psg_input).l
000981A4 13C6 00C0 0011             		move.b	d6,(psg_input).l
000981AA                            ; locret_7291E:
000981AA                            @locret:
000981AA 4E75                       		rts	
000981AC                            ; End of function PSGUpdateFreq
000981AC                            
000981AC                            ; ===========================================================================
000981AC                            ; loc_72920:
000981AC                            PSGSetRest:
000981AC 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
000981B0 4E75                       		rts	
000981B2                            
000981B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000981B2                            
000981B2                            ; sub_72926:
000981B2                            PSGUpdateVolFX:
000981B2 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
000981B6 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
000981BA                            ; loc_7292E:
000981BA                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
000981BA 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
000981BE 7000                       		moveq	#0,d0
000981C0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
000981C4 6700                       		beq.s	SetPSGVolume
000981C6 2079 0009 7178             		movea.l	(Go_PSGIndex).l,a0
000981CC 5340                       		subq.w	#1,d0
000981CE E548                       		lsl.w	#2,d0
000981D0 2070 0000                  		movea.l	(a0,d0.w),a0
000981D4 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
000981D8 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000981DC 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000981E0 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000981E4 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000981E6 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000981EA 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000981EC                            ; loc_72960:
000981EC                            @gotflutter:
000981EC DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000981EE 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000981F2 6500                       		blo.s	SetPSGVolume	; Branch if not
000981F4 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000981F6                            ; End of function PSGUpdateVolFX
000981F6                            
000981F6                            
000981F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000981F6                            
000981F6                            ; sub_7296A:
000981F6                            SetPSGVolume:
000981F6 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000981FA 6600                       		bne.s	locret_7298A	; Return if so
000981FC 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00098200 6600                       		bne.s	locret_7298A	; Return if so
00098202 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00098206 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00098208                            ; loc_7297C:
00098208                            PSGSendVolume:
00098208 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
0009820C 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00098210 13C6 00C0 0011             		move.b	d6,(psg_input).l
00098216                            
00098216                            locret_7298A:
00098216 4E75                       		rts	
00098218                            ; ===========================================================================
00098218                            ; loc_7298C: PSGCheckNoteFill:
00098218                            PSGCheckNoteTimeout:
00098218 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
0009821C 67EA                       		beq.s	PSGSendVolume			; Branch if not
0009821E 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00098222 66E4                       		bne.s	PSGSendVolume			; Branch if not
00098224 4E75                       		rts	
00098226                            ; End of function SetPSGVolume
00098226                            
00098226                            ; ===========================================================================
00098226                            ; loc_7299A: FlutterDone:
00098226                            VolEnvHold:
00098226 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
0009822A 4E75                       		rts	
0009822C                            
0009822C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009822C                            
0009822C                            ; sub_729A0:
0009822C                            PSGNoteOff:
0009822C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00098230 6600                       		bne.s	locret_729B4	; Return if so
00098232                            ; loc_729A6:
00098232                            SendPSGNoteOff:
00098232 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00098236 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
0009823A 13C0 00C0 0011             		move.b	d0,(psg_input).l
00098240                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00098240                            		; risk of music accidentally playing noise because it can't detect if
00098240                            		; the PSG4/noise channel needs muting on track initialisation.
00098240                            		; S&K's driver fixes it by doing this:
00098240 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00098244 6600                       		bne.s	locret_729B4
00098246 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
0009824E                            
0009824E                            locret_729B4:
0009824E 4E75                       		rts	
00098250                            ; End of function PSGNoteOff
00098250                            
00098250                            
00098250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098250                            
00098250                            ; sub_729B6:
00098250                            PSGSilenceAll:
00098250 41F9 00C0 0011             		lea	(psg_input).l,a0
00098256 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
0009825A 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
0009825E 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00098262 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00098266 4E75                       		rts	
00098268                            ; End of function PSGSilenceAll
00098268                            
00098268                            ; ===========================================================================
00098268                            ; word_729CE:
00098268                            PSGFrequencies:
00098268 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00098278 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00098288 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00098298 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
000982A8 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
000982B8 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000982C8 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
000982D8 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
000982E8 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
000982F4                            
000982F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000982F4                            
000982F4                            ; sub_72A5A:
000982F4                            CoordFlag:
000982F4 0445 00E0                  		subi.w	#$E0,d5
000982F8 E54D                       		lsl.w	#2,d5
000982FA 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000982FE                            ; End of function CoordFlag
000982FE                            
000982FE                            ; ===========================================================================
000982FE                            ; loc_72A64:
000982FE                            coordflagLookup:
000982FE 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00098302                            ; ===========================================================================
00098302 6000 0000                  		bra.w	cfDetune		; $E1
00098306                            ; ===========================================================================
00098306 6000 0000                  		bra.w	cfSetCommunication	; $E2
0009830A                            ; ===========================================================================
0009830A 6000 0000                  		bra.w	cfJumpReturn		; $E3
0009830E                            ; ===========================================================================
0009830E 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00098312                            ; ===========================================================================
00098312 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00098316                            ; ===========================================================================
00098316 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
0009831A                            ; ===========================================================================
0009831A 6000 0000                  		bra.w	cfHoldNote		; $E7
0009831E                            ; ===========================================================================
0009831E 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00098322                            ; ===========================================================================
00098322 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00098326                            ; ===========================================================================
00098326 6000 0000                  		bra.w	cfSetTempo		; $EA
0009832A                            ; ===========================================================================
0009832A 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
0009832E                            ; ===========================================================================
0009832E 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00098332                            ; ===========================================================================
00098332 6000 0000                  		bra.w	cfClearPush		; $ED
00098336                            ; ===========================================================================
00098336 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
0009833A                            ; ===========================================================================
0009833A 6000 0000                  		bra.w	cfSetVoice		; $EF
0009833E                            ; ===========================================================================
0009833E 6000 0000                  		bra.w	cfModulation		; $F0
00098342                            ; ===========================================================================
00098342 6000 0000                  		bra.w	cfEnableModulation	; $F1
00098346                            ; ===========================================================================
00098346 6000 0000                  		bra.w	cfStopTrack		; $F2
0009834A                            ; ===========================================================================
0009834A 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
0009834E                            ; ===========================================================================
0009834E 6000 0000                  		bra.w	cfDisableModulation	; $F4
00098352                            ; ===========================================================================
00098352 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00098356                            ; ===========================================================================
00098356 6000 0000                  		bra.w	cfJumpTo		; $F6
0009835A                            ; ===========================================================================
0009835A 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
0009835E                            ; ===========================================================================
0009835E 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00098362                            ; ===========================================================================
00098362 6000 0000                  		bra.w	cfOpF9			; $F9
00098366                            ; ===========================================================================
00098366                            ; loc_72ACC:
00098366                            cfPanningAMSFMS:
00098366 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00098368 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009836C 6B00                       		bmi.s	locret_72AEA		; Return if yes
0009836E 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00098372 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00098376 8200                       		or.b	d0,d1			; Mask in new value
00098378 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0009837C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00098380 6000 FC20                  		bra.w	WriteFMIorIIMain
00098384                            ; ===========================================================================
00098384                            
00098384                            locret_72AEA:
00098384 4E75                       		rts	
00098386                            ; ===========================================================================
00098386                            ; loc_72AEC: cfAlterNotes:
00098386                            cfDetune:
00098386 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
0009838A 4E75                       		rts	
0009838C                            ; ===========================================================================
0009838C                            ; loc_72AF2: cfUnknown1:
0009838C                            cfSetCommunication:
0009838C 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00098390 4E75                       		rts	
00098392                            ; ===========================================================================
00098392                            ; loc_72AF8:
00098392                            cfJumpReturn:
00098392 7000                       		moveq	#0,d0
00098394 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00098398 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0009839C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
000983A4 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
000983A6 5800                       		addq.b	#4,d0			; Actually 'pop' value
000983A8 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
000983AC 4E75                       		rts	
000983AE                            ; ===========================================================================
000983AE                            ; loc_72B14:
000983AE                            cfFadeInToPrevious:
000983AE 204E                       		movea.l	a6,a0
000983B0 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000983B4 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000983B8                            ; loc_72B1E:
000983B8                            @restoreramloop:
000983B8 20D9                       		move.l	(a1)+,(a0)+
000983BA 51C8 FFFC                  		dbf	d0,@restoreramloop
000983BE                            
000983BE 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000983C4 264D                       		movea.l	a5,a3
000983C6 1C3C 0028                  		move.b	#$28,d6
000983CA 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000983CE 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000983D0 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000983D4                            ; loc_72B3A:
000983D4                            @fmloop:
000983D4 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000983D8 6700                       		beq.s	@nextfm		; Branch if not
000983DA 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000983DE DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000983E2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000983E6 6600                       		bne.s	@nextfm		; Branch if yes
000983E8 7000                       		moveq	#0,d0
000983EA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
000983EE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000983F2 4EBA 0000                  		jsr	SetVoice(pc)
000983F6                            ; loc_72B5C:
000983F6                            @nextfm:
000983F6 DAFC 0030                  		adda.w	#TrackSz,a5
000983FA 51CF FFD8                  		dbf	d7,@fmloop
000983FE                            
000983FE 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00098400                            ; loc_72B66:
00098400                            @psgloop:
00098400 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00098404 6700                       		beq.s	@nextpsg	; Branch if not
00098406 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009840A 4EBA FE20                  		jsr	PSGNoteOff(pc)
0009840E DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00098412                            ; loc_72B78:
00098412                            @nextpsg:
00098412 DAFC 0030                  		adda.w	#TrackSz,a5
00098416 51CF FFE8                  		dbf	d7,@psgloop
0009841A                            		
0009841A 2A4B                       		movea.l	a3,a5
0009841C 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00098422 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00098428 422E 0027                  		clr.b	f_1up_playing(a6)
0009842C 33FC 0000 00A1 1100        		startZ80
00098434 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00098436 4E75                       		rts	
00098438                            ; ===========================================================================
00098438                            ; loc_72B9E:
00098438                            cfSetTempoDivider:
00098438 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
0009843C 4E75                       		rts	
0009843E                            ; ===========================================================================
0009843E                            ; loc_72BA4: cfSetVolume:
0009843E                            cfChangeFMVolume:
0009843E 101C                       		move.b	(a4)+,d0		; Get parameter
00098440 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00098444 6000 0000                  		bra.w	SendVoiceTL
00098448                            ; ===========================================================================
00098448                            ; loc_72BAE: cfPreventAttack:
00098448                            cfHoldNote:
00098448 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
0009844C 4E75                       		rts	
0009844E                            ; ===========================================================================
0009844E                            ; loc_72BB4: cfNoteFill
0009844E                            cfNoteTimeout:
0009844E 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00098452 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00098456 4E75                       		rts	
00098458                            ; ===========================================================================
00098458                            ; loc_72BBE: cfAddKey:
00098458                            cfChangeTransposition:
00098458 101C                       		move.b	(a4)+,d0		; Get parameter
0009845A D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
0009845E 4E75                       		rts	
00098460                            ; ===========================================================================
00098460                            ; loc_72BC6:
00098460                            cfSetTempo:
00098460 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00098464 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00098468 4E75                       		rts	
0009846A                            ; ===========================================================================
0009846A                            ; loc_72BD0: cfSetTempoMod:
0009846A                            cfSetTempoDividerAll:
0009846A 41EE 0040                  		lea	v_music_track_ram(a6),a0
0009846E 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00098470 7230                       		moveq	#TrackSz,d1
00098472 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00098474                            ; loc_72BDA:
00098474                            @trackloop:
00098474 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00098478 D0C1                       		adda.w	d1,a0
0009847A 51CA FFF8                  		dbf	d2,@trackloop
0009847E                            
0009847E 4E75                       		rts	
00098480                            ; ===========================================================================
00098480                            ; loc_72BE6: cfChangeVolume:
00098480                            cfChangePSGVolume:
00098480 101C                       		move.b	(a4)+,d0		; Get volume change
00098482 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00098486 4E75                       		rts	
00098488                            ; ===========================================================================
00098488                            ; loc_72BEE:
00098488                            cfClearPush:
00098488 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
0009848C 4E75                       		rts	
0009848E                            ; ===========================================================================
0009848E                            ; loc_72BF4:
0009848E                            cfStopSpecialFM4:
0009848E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00098492 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00098496 4EBA FAF2                  		jsr	FMNoteOff(pc)
0009849A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0009849E 6B00                       		bmi.s	@locexit					; Branch if yes
000984A0 264D                       		movea.l	a5,a3
000984A2 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000984A6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000984AA 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000984AE 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000984B2 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000984B6 4EBA 0000                  		jsr	SetVoice(pc)
000984BA 2A4B                       		movea.l	a3,a5
000984BC                            ; loc_72C22:
000984BC                            @locexit:
000984BC 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
000984BE 4E75                       		rts	
000984C0                            ; ===========================================================================
000984C0                            ; loc_72C26:
000984C0                            cfSetVoice:
000984C0 7000                       		moveq	#0,d0
000984C2 101C                       		move.b	(a4)+,d0		; Get new voice
000984C4 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
000984C8 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
000984CC 6600 0000                  		bne.w	locret_72CAA		; Return if yes
000984D0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
000984D4 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
000984D8 6700                       		beq.s	SetVoice		; If yes, branch
000984DA 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
000984DE 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
000984E2 6B00                       		bmi.s	SetVoice		; If yes, branch
000984E4 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
000984E8                            
000984E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000984E8                            
000984E8                            ; sub_72C4E:
000984E8                            SetVoice:
000984E8 5340                       		subq.w	#1,d0
000984EA 6B00                       		bmi.s	@havevoiceptr
000984EC 323C 0019                  		move.w	#25,d1
000984F0                            ; loc_72C56:
000984F0                            @voicemultiply:
000984F0 D2C1                       		adda.w	d1,a1
000984F2 51C8 FFFC                  		dbf	d0,@voicemultiply
000984F6                            ; loc_72C5C:
000984F6                            @havevoiceptr:
000984F6 1219                       		move.b	(a1)+,d1		; feedback/algorithm
000984F8 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
000984FC 1801                       		move.b	d1,d4
000984FE 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00098502 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00098506 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
0009850A 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
0009850C                            ; loc_72C72:
0009850C                            @sendvoiceloop:
0009850C 101A                       		move.b	(a2)+,d0
0009850E 1219                       		move.b	(a1)+,d1
00098510 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00098514 51CB FFF6                  		dbf	d3,@sendvoiceloop
00098518                            
00098518 7A03                       		moveq	#3,d5
0009851A 0244 0007                  		andi.w	#7,d4			; Get algorithm
0009851E 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00098522 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00098526                            ; loc_72C8C:
00098526                            @sendtlloop:
00098526 101A                       		move.b	(a2)+,d0
00098528 1219                       		move.b	(a1)+,d1
0009852A E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0009852C 6400                       		bcc.s	@sendtl		; Branch if not
0009852E D203                       		add.b	d3,d1		; Include additional attenuation
00098530                            ; loc_72C96:
00098530                            @sendtl:
00098530 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00098534 51CD FFF0                  		dbf	d5,@sendtlloop
00098538                            		
00098538 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
0009853C 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00098540 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00098544                            
00098544                            locret_72CAA:
00098544 4E75                       		rts	
00098546                            ; End of function SetVoice
00098546                            
00098546                            ; ===========================================================================
00098546                            ; byte_72CAC:
00098546 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0009854E                            
0009854E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009854E                            
0009854E                            ; sub_72CB4:
0009854E                            SendVoiceTL:
0009854E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00098552 6600                       		bne.s	@locret		; Return if so
00098554 7000                       		moveq	#0,d0
00098556 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009855A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009855E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00098562 6700                       		beq.s	@gotvoiceptr
00098564                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00098564                            		; of a6!
00098564 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00098568 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009856C 6B00                       		bmi.s	@gotvoiceptr
0009856E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00098572                            ; loc_72CD8:
00098572                            @gotvoiceptr:
00098572 5340                       		subq.w	#1,d0
00098574 6B00                       		bmi.s	@gotvoice
00098576 323C 0019                  		move.w	#25,d1
0009857A                            ; loc_72CE0:
0009857A                            @voicemultiply:
0009857A D2C1                       		adda.w	d1,a1
0009857C 51C8 FFFC                  		dbf	d0,@voicemultiply
00098580                            ; loc_72CE6:
00098580                            @gotvoice:
00098580 D2FC 0015                  		adda.w	#21,a1				; Want TL
00098584 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00098588 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
0009858C 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00098590 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00098594 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00098598 6B00                       		bmi.s	@locret				; If negative, stop
0009859A 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
0009859C                            ; loc_72D02:
0009859C                            @sendtlloop:
0009859C 101A                       		move.b	(a2)+,d0
0009859E 1219                       		move.b	(a1)+,d1
000985A0 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000985A2 6400                       		bcc.s	@senttl		; Branch if not
000985A4 D203                       		add.b	d3,d1		; Include additional attenuation
000985A6 6500                       		bcs.s	@senttl		; Branch on overflow
000985A8 4EBA FA04                  		jsr	WriteFMIorII(pc)
000985AC                            ; loc_72D12:
000985AC                            @senttl:
000985AC 51CD FFEE                  		dbf	d5,@sendtlloop
000985B0                            ; locret_72D16:
000985B0                            @locret:
000985B0 4E75                       		rts	
000985B2                            ; End of function SendVoiceTL
000985B2                            
000985B2                            ; ===========================================================================
000985B2                            ; byte_72D18:
000985B2                            FMInstrumentOperatorTable:
000985B2 30                         		dc.b  $30		; Detune/multiple operator 1
000985B3 38                         		dc.b  $38		; Detune/multiple operator 3
000985B4 34                         		dc.b  $34		; Detune/multiple operator 2
000985B5 3C                         		dc.b  $3C		; Detune/multiple operator 4
000985B6 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
000985B7 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
000985B8 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
000985B9 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
000985BA 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
000985BB 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
000985BC 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
000985BD 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
000985BE 70                         		dc.b  $70		; Secondary decay rate operator 1
000985BF 78                         		dc.b  $78		; Secondary decay rate operator 3
000985C0 74                         		dc.b  $74		; Secondary decay rate operator 2
000985C1 7C                         		dc.b  $7C		; Secondary decay rate operator 4
000985C2 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
000985C3 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
000985C4 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
000985C5 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
000985C6                            FMInstrumentOperatorTable_End
000985C6                            ; byte_72D2C:
000985C6                            FMInstrumentTLTable:
000985C6 40                         		dc.b  $40		; Total level operator 1
000985C7 48                         		dc.b  $48		; Total level operator 3
000985C8 44                         		dc.b  $44		; Total level operator 2
000985C9 4C                         		dc.b  $4C		; Total level operator 4
000985CA                            FMInstrumentTLTable_End
000985CA                            ; ===========================================================================
000985CA                            ; loc_72D30:
000985CA                            cfModulation:
000985CA 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
000985CE 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
000985D2 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
000985D6 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
000985DA 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
000985DE 101C                       		move.b	(a4)+,d0			; Modulation steps...
000985E0 E208                       		lsr.b	#1,d0				; ... divided by 2...
000985E2 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
000985E6 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
000985EA 4E75                       		rts	
000985EC                            ; ===========================================================================
000985EC                            ; loc_72D52:
000985EC                            cfEnableModulation:
000985EC 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
000985F0 4E75                       		rts	
000985F2                            ; ===========================================================================
000985F2                            ; loc_72D58:
000985F2                            cfStopTrack:
000985F2 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000985F6 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000985FA 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000985FE 6B00                       		bmi.s	@stoppsg		; Branch if yes
00098600 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00098604 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00098608 4EBA F980                  		jsr	FMNoteOff(pc)
0009860C 6000                       		bra.s	@stoppedchannel
0009860E                            ; ===========================================================================
0009860E                            ; loc_72D74:
0009860E                            @stoppsg:
0009860E 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00098612                            ; loc_72D78:
00098612                            @stoppedchannel:
00098612 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00098616 6A00 0000                  		bpl.w	@locexit		; Exit if not
0009861A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0009861C 7000                       		moveq	#0,d0
0009861E 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00098622 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00098624 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00098628 264D                       		movea.l	a5,a3
0009862A 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
0009862E 6600                       		bne.s	@getpointer		; Branch if not
00098630 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00098634 6A00                       		bpl.s	@getpointer		; Branch if not
00098636 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0009863A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
0009863E 6000                       		bra.s	@gotpointer
00098640                            ; ===========================================================================
00098640                            ; loc_72DA8:
00098640                            @getpointer:
00098640 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00098642 E508                       		lsl.b	#2,d0
00098644 2A70 0000                  		movea.l	(a0,d0.w),a5
00098648 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009864A 6A00                       		bpl.s	@novoiceupd		; Branch if not
0009864C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00098650                            ; loc_72DB8:
00098650                            @gotpointer:
00098650 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00098654 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098658 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009865C 4EBA FE8A                  		jsr	SetVoice(pc)
00098660                            ; loc_72DC8:
00098660                            @novoiceupd:
00098660 2A4B                       		movea.l	a3,a5
00098662 6000                       		bra.s	@locexit
00098664                            ; ===========================================================================
00098664                            ; loc_72DCC:
00098664                            @getpsgptr:
00098664 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00098668 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
0009866A 6A00                       		bpl.s	@getchannelptr	; Branch if not
0009866C 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00098670 6700                       		beq.s	@gotchannelptr	; Branch if yes
00098672 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00098676 6700                       		beq.s	@gotchannelptr	; Branch if yes
00098678                            ; loc_72DE0:
00098678                            @getchannelptr:
00098678 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
0009867C E608                       		lsr.b	#3,d0
0009867E 2070 0000                  		movea.l	(a0,d0.w),a0
00098682                            ; loc_72DEA:
00098682                            @gotchannelptr:
00098682 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00098686 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
0009868A 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00098690 6600                       		bne.s	@locexit			; Branch if not
00098692 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
0009869A                            ; loc_72E02:
0009869A                            @locexit:
0009869A 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
0009869C 4E75                       		rts	
0009869E                            ; ===========================================================================
0009869E                            ; loc_72E06:
0009869E                            cfSetPSGNoise:
0009869E 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
000986A4 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
000986A8 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
000986AC 6600                       		bne.s	@locret				; Return if yes
000986AE 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000986B6                            ; locret_72E1E:
000986B6                            @locret:
000986B6 4E75                       		rts	
000986B8                            ; ===========================================================================
000986B8                            ; loc_72E20:
000986B8                            cfDisableModulation:
000986B8 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000986BC 4E75                       		rts	
000986BE                            ; ===========================================================================
000986BE                            ; loc_72E26:
000986BE                            cfSetPSGTone:
000986BE 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000986C2 4E75                       		rts	
000986C4                            ; ===========================================================================
000986C4                            ; loc_72E2C:
000986C4                            cfJumpTo:
000986C4 101C                       		move.b	(a4)+,d0	; High byte of offset
000986C6 E148                       		lsl.w	#8,d0		; Shift it into place
000986C8 101C                       		move.b	(a4)+,d0	; Low byte of offset
000986CA D8C0                       		adda.w	d0,a4		; Add to current position
000986CC 534C                       		subq.w	#1,a4		; Put back one byte
000986CE 4E75                       		rts	
000986D0                            ; ===========================================================================
000986D0                            ; loc_72E38:
000986D0                            cfRepeatAtPos:
000986D0 7000                       		moveq	#0,d0
000986D2 101C                       		move.b	(a4)+,d0			; Loop index
000986D4 121C                       		move.b	(a4)+,d1			; Repeat count
000986D6 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
000986DA 6600                       		bne.s	@loopexists			; Branch if yes
000986DC 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
000986E0                            ; loc_72E48:
000986E0                            @loopexists:
000986E0 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
000986E4 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
000986E6 544C                       		addq.w	#2,a4				; Skip target address
000986E8 4E75                       		rts	
000986EA                            ; ===========================================================================
000986EA                            ; loc_72E52:
000986EA                            cfJumpToGosub:
000986EA 7000                       		moveq	#0,d0
000986EC 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
000986F0 5900                       		subq.b	#4,d0				; Add space for another target
000986F2 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
000986F6 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
000986FA 60C8                       		bra.s	cfJumpTo
000986FC                            ; ===========================================================================
000986FC                            ; loc_72E64:
000986FC                            cfOpF9:
000986FC 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00098700 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00098704 4EBA F8B4                  		jsr	WriteFMI(pc)
00098708 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
0009870C 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00098710 6000 F8A8                  		bra.w	WriteFMI
00098714                            ; ===========================================================================
00098714                            
00098714                            Kos_Z80:
00098714                            		incbin	"sound\z80.bin", 0, $15
00098729 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
0009872A                            		incbin	"sound\z80.bin", $16, 6
00098730 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00098731                            		incbin	"sound\z80.bin", $1D, $93
000987C4 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
000987C6                            		incbin	"sound\z80.bin", $B2, 1
000987C7 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
000987C9                            		incbin	"sound\z80.bin", $B5, $16AB
00099E6A                            		even
00099E6A                            
00099E6A                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009B18E 00                         		even
0009B18E                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009CA16                            		even
0009CA16                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A4396 00                         		even
000A4396                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A5BAA 00                         		even
000A5BAA                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A6950                            		even
000A6950                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A7D08                            		even
000A7D08                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A8600 00                         		even
000A8600                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A8600                            extralifejingle_Header:
000A8600                            	smpsHeaderStartSong 1
000A8602 0703                       	smpsHeaderChan      $07, $03
000A8604 0100                       	smpsHeaderTempo     $01, $00
000A8606                            
000A860A 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A860E 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A8612 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A8616 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A861A 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A861E 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A8634                            
000A8634                            ; DAC Data
000A8634                            extralifejingle_DAC:
000A8634 807F 55                    	dc.b	nRst, $7F, $55
000A8637 E4                         	smpsFade
000A8638                            ; PSG1 Data
000A8638                            extralifejingle_PSG1:
000A8638                            ; PSG2 Data
000A8638                            extralifejingle_PSG2:
000A8638                            ; PSG3 Data
000A8638                            extralifejingle_PSG3:
000A8638 F2                         	smpsStop
000A8639                            
000A8639                            ; FM1 Data
000A8639                            extralifejingle_FM1:
000A8639 EF00                       	smpsSetvoice        $00
000A863B E616                       	smpsAlterVol        $16
000A863D E0C0                       	smpsPan             panCenter, $00
000A863F A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A864B AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A864F F2                         	smpsStop
000A8650                            
000A8650                            ; FM2 Data
000A8650                            extralifejingle_FM2:
000A8650 EF01                       	smpsSetvoice        $01
000A8652 E616                       	smpsAlterVol        $16
000A8654 E0C0                       	smpsPan             panCenter, $00
000A8656 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A8662 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A8666 F2                         	smpsStop
000A8667                            
000A8667                            ; FM3 Data
000A8667                            extralifejingle_FM3:
000A8667 EF01                       	smpsSetvoice        $01
000A8669 E616                       	smpsAlterVol        $16
000A866B E0C0                       	smpsPan             panCenter, $00
000A866D AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A8679 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A867D F2                         	smpsStop
000A867E                            
000A867E                            ; FM4 Data
000A867E                            extralifejingle_FM4:
000A867E EF02                       	smpsSetvoice        $02
000A8680 E0C0                       	smpsPan             panCenter, $00
000A8682 8001                       	dc.b	nRst, $01
000A8684 E616                       	smpsAlterVol        $16
000A8686 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A8692 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A8696 F2                         	smpsStop
000A8697                            
000A8697                            ; FM5 Data
000A8697                            extralifejingle_FM5:
000A8697 EF03                       	smpsSetvoice        $03
000A8699 E602                       	smpsAlterVol        $02
000A869B E0C0                       	smpsPan             panCenter, $00
000A869D 8001                       	dc.b	nRst, $01
000A869F EF05                       	smpsSetvoice        $05
000A86A1 E60A                       	smpsAlterVol        $0A
000A86A3 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A86AF B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A86BB 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A86C7 C1C4 80                    	dc.b	nE5, nG5, nRst
000A86CA F2                         	smpsStop
000A86CB                            
000A86CB                            ; FM6 Data
000A86CB                            extralifejingle_FM6:
000A86CB EF04                       	smpsSetvoice        $04
000A86CD E607                       	smpsAlterVol        $07
000A86CF E0C0                       	smpsPan             panCenter, $00
000A86D1 8001                       	dc.b	nRst, $01
000A86D3 EF06                       	smpsSetvoice        $06
000A86D5 E6F9                       	smpsAlterVol        $F9
000A86D7 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A86DE F2                         	smpsStop
000A86DF                            
000A86DF                            extralifejingle_Voices:
000A86DF                            ;	Voice $00
000A86DF                            ;	$3A
000A86DF                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A86DF                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A86DF                            	smpsVcAlgorithm     $02
000A86DF                            	smpsVcFeedback      $07
000A86DF                            	smpsVcUnusedBits    $00
000A86DF                            	smpsVcDetune        $03, $07, $07, $03
000A86DF                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A86DF                            	smpsVcRateScale     $00, $00, $00, $00
000A86DF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A86DF                            	smpsVcAmpMod        $00, $00, $00, $00
000A86DF                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A86DF                            	smpsVcDecayRate2    $00, $00, $00, $00
000A86DF                            	smpsVcDecayLevel    $00, $00, $00, $00
000A86DF                            	smpsVcReleaseRate   $05, $03, $03, $03
000A86F8                            
000A86F8                            ;	Voice $01
000A86F8                            ;	$3A
000A86F8                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A86F8                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A86F8                            	smpsVcAlgorithm     $02
000A86F8                            	smpsVcFeedback      $07
000A86F8                            	smpsVcUnusedBits    $00
000A86F8                            	smpsVcDetune        $03, $07, $07, $03
000A86F8                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A86F8                            	smpsVcRateScale     $00, $00, $00, $00
000A86F8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A86F8                            	smpsVcAmpMod        $00, $00, $00, $00
000A86F8                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A86F8                            	smpsVcDecayRate2    $00, $00, $00, $00
000A86F8                            	smpsVcDecayLevel    $00, $00, $00, $00
000A86F8                            	smpsVcReleaseRate   $05, $03, $03, $03
000A8711                            
000A8711                            ;	Voice $02
000A8711                            ;	$3A
000A8711                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A8711                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A8711                            	smpsVcAlgorithm     $02
000A8711                            	smpsVcFeedback      $07
000A8711                            	smpsVcUnusedBits    $00
000A8711                            	smpsVcDetune        $03, $07, $07, $03
000A8711                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A8711                            	smpsVcRateScale     $00, $00, $00, $00
000A8711                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A8711                            	smpsVcAmpMod        $00, $00, $00, $00
000A8711                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A8711                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8711                            	smpsVcDecayLevel    $00, $00, $00, $00
000A8711                            	smpsVcReleaseRate   $05, $03, $03, $03
000A872A                            
000A872A                            ;	Voice $03
000A872A                            ;	$00
000A872A                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A872A                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A872A                            	smpsVcAlgorithm     $00
000A872A                            	smpsVcFeedback      $00
000A872A                            	smpsVcUnusedBits    $00
000A872A                            	smpsVcDetune        $00, $00, $00, $00
000A872A                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A872A                            	smpsVcRateScale     $00, $00, $00, $00
000A872A                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A872A                            	smpsVcAmpMod        $00, $00, $00, $00
000A872A                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A872A                            	smpsVcDecayRate2    $00, $00, $00, $00
000A872A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A872A                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A8743                            
000A8743                            ;	Voice $04
000A8743                            ;	$03
000A8743                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A8743                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A8743                            	smpsVcAlgorithm     $03
000A8743                            	smpsVcFeedback      $00
000A8743                            	smpsVcUnusedBits    $00
000A8743                            	smpsVcDetune        $03, $04, $04, $06
000A8743                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A8743                            	smpsVcRateScale     $00, $00, $00, $00
000A8743                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A8743                            	smpsVcAmpMod        $00, $00, $00, $00
000A8743                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A8743                            	smpsVcDecayRate2    $06, $04, $00, $01
000A8743                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A8743                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A875C                            
000A875C                            ;	Voice $05
000A875C                            ;	$34
000A875C                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A875C                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A875C                            	smpsVcAlgorithm     $04
000A875C                            	smpsVcFeedback      $06
000A875C                            	smpsVcUnusedBits    $00
000A875C                            	smpsVcDetune        $07, $00, $07, $03
000A875C                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A875C                            	smpsVcRateScale     $00, $01, $00, $02
000A875C                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A875C                            	smpsVcAmpMod        $00, $00, $00, $00
000A875C                            	smpsVcDecayRate1    $08, $07, $07, $14
000A875C                            	smpsVcDecayRate2    $00, $00, $00, $00
000A875C                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A875C                            	smpsVcReleaseRate   $07, $07, $04, $06
000A8775                            
000A8775                            ;	Voice $06
000A8775                            ;	$30
000A8775                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A8775                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A8775                            	smpsVcAlgorithm     $00
000A8775                            	smpsVcFeedback      $06
000A8775                            	smpsVcUnusedBits    $00
000A8775                            	smpsVcDetune        $00, $00, $00, $00
000A8775                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A8775                            	smpsVcRateScale     $01, $00, $00, $02
000A8775                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A8775                            	smpsVcAmpMod        $00, $00, $00, $00
000A8775                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A8775                            	smpsVcDecayRate2    $08, $05, $18, $08
000A8775                            	smpsVcDecayLevel    $01, $00, $00, $06
000A8775                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A878E                            
000A878E                            
000A878E                            		even
000A878E                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000A8FE6 00                         		even
000A8FE6                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000A9506                            		even
000A9506                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000A97C8 00                         		even
000A97C8                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000AA620                            		even
000AA620                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000AA86C 00                         		even
000AA86C                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000AABA2 00                         		even
000AABA2                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000AAD4E 00                         		even
000AAD4E                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000AAF5C 00                         		even
000AAF5C                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AB240 00                         		even
000AB240                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000AB970 00                         		even
000AB970                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000ABA3E                            		even
000ABA3E                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000ABEAC 00                         		even
000ABEAC                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000AC9A2                            		even
000AC9A2                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AD4F8                            		even
000AD4F8                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000AE7FE 00                         		even
000AE7FE                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000AE7FE                            PasswordEntry_Header:
000AE7FE                            	smpsHeaderStartSong 3
000AE800 0603                       	smpsHeaderChan      $06, $03
000AE802 0105                       	smpsHeaderTempo     $01, $05
000AE804                            
000AE808 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000AE80C 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000AE810 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000AE814 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000AE818 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000AE82E                            
000AE82E                            ; FM1 Data
000AE82E                            PasswordEntry_FM1:
000AE82E EF00                       	smpsSetvoice        $00
000AE835                            
000AE835                            PasswordEntry_Jump00:
000AE835 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000AE841 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000AE84D C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000AE859 C918 CB                    	dc.b	nC6, $18, nD6
000AE85C F6FF D7                    	smpsJump            PasswordEntry_Jump00
000AE85F                            
000AE85F                            ; FM2 Data
000AE85F                            PasswordEntry_FM2:
000AE85F EF01                       	smpsSetvoice        $01
000AE861                            
000AE861                            PasswordEntry_Jump03:
000AE861 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000AE86D AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000AE879 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000AE885 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000AE88F F6FF D0                    	smpsJump            PasswordEntry_Jump03
000AE892                            
000AE892                            ; FM3 Data
000AE892                            PasswordEntry_FM3:
000AE892 E080                       	smpsPan             panLeft, $00
000AE894 EF02                       	smpsSetvoice        $02
000AE896                            
000AE896                            PasswordEntry_Jump02:
000AE896 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000AE8A2 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000AE8AE C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000AE8BA C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000AE8C6 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000AE8D2 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000AE8DE BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000AE8EA C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000AE8F6 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000AE902 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE90E BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE916 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000AE919                            
000AE919                            ; FM4 Data
000AE919                            PasswordEntry_FM4:
000AE919 E040                       	smpsPan             panRight, $00
000AE91B EF02                       	smpsSetvoice        $02
000AE91D                            
000AE91D                            PasswordEntry_Jump01:
000AE91D C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000AE929 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000AE935 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000AE941 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000AE94D BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000AE959 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000AE965 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE971 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000AE97D BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000AE989 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AE995 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AE99D F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000AE9A0                            
000AE9A0                            ; FM5 Data
000AE9A0                            PasswordEntry_FM5:
000AE9A0 EF00                       	smpsSetvoice        $00
000AE9A2 E1FB                       	smpsAlterNote       $FB
000AE9A4 800C                       	dc.b	nRst, $0C
000AE9A6 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000AE9A9                            
000AE9A9                            ; PSG1 Data
000AE9A9                            PasswordEntry_PSG1:
000AE9A9 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AE9B5 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000AE9C1 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AE9CD CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000AE9D9 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000AE9E5 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000AE9F1 C810 C408                  	dc.b	nB5, $10, nG5, $08
000AE9F5 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000AE9F8                            
000AE9F8                            ; PSG2 Data
000AE9F8                            PasswordEntry_PSG2:
000AE9F8 E1FF                       	smpsAlterNote       $FF
000AE9FA 800C                       	dc.b	nRst, $0C
000AE9FC F6FF AB                    	smpsJump            PasswordEntry_PSG1
000AE9FF                            
000AE9FF                            ; PSG3 Data
000AE9FF                            PasswordEntry_PSG3:
000AE9FF F502                       	smpsPSGvoice        fTone_02
000AEA01 F3E7                       	smpsPSGform         $E7
000AEA03 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AEA0F C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AEA1B C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000AEA22 F503                       	smpsPSGvoice        fTone_03
000AEA24 C5                         	dc.b	nAb5
000AEA25 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000AEA28                            
000AEA28                            ; DAC Data
000AEA28                            PasswordEntry_DAC:
000AEA28 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AEA34 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AEA3C F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000AEA41 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AEA4D 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000AEA55                            
000AEA55                            PasswordEntry_Loop00:
000AEA55 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AEA61 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AEA69 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000AEA6E 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000AEA7A 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000AEA84 F6FF A2                    	smpsJump            PasswordEntry_DAC
000AEA87                            
000AEA87                            PasswordEntry_Voices:
000AEA87                            ;	Voice $00
000AEA87                            ;	$04
000AEA87                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000AEA87                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000AEA87                            	smpsVcAlgorithm     $04
000AEA87                            	smpsVcFeedback      $00
000AEA87                            	smpsVcUnusedBits    $00
000AEA87                            	smpsVcDetune        $00, $00, $00, $00
000AEA87                            	smpsVcCoarseFreq    $00, $01, $01, $02
000AEA87                            	smpsVcRateScale     $00, $00, $00, $00
000AEA87                            	smpsVcAttackRate    $12, $1F, $10, $1F
000AEA87                            	smpsVcAmpMod        $00, $00, $00, $00
000AEA87                            	smpsVcDecayRate1    $04, $0B, $03, $09
000AEA87                            	smpsVcDecayRate2    $05, $00, $00, $03
000AEA87                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000AEA87                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AEAA0                            
000AEAA0                            ;	Voice $01
000AEAA0                            ;	$39
000AEAA0                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000AEAA0                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000AEAA0                            	smpsVcAlgorithm     $01
000AEAA0                            	smpsVcFeedback      $07
000AEAA0                            	smpsVcUnusedBits    $00
000AEAA0                            	smpsVcDetune        $00, $04, $06, $00
000AEAA0                            	smpsVcCoarseFreq    $00, $00, $01, $03
000AEAA0                            	smpsVcRateScale     $01, $01, $01, $00
000AEAA0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AEAA0                            	smpsVcAmpMod        $00, $00, $00, $00
000AEAA0                            	smpsVcDecayRate1    $09, $09, $11, $10
000AEAA0                            	smpsVcDecayRate2    $00, $00, $00, $06
000AEAA0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000AEAA0                            	smpsVcReleaseRate   $08, $08, $08, $08
000AEAB9                            
000AEAB9                            ;	Voice $02
000AEAB9                            ;	$2C
000AEAB9                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000AEAB9                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000AEAB9                            	smpsVcAlgorithm     $04
000AEAB9                            	smpsVcFeedback      $05
000AEAB9                            	smpsVcUnusedBits    $00
000AEAB9                            	smpsVcDetune        $00, $02, $00, $04
000AEAB9                            	smpsVcCoarseFreq    $00, $03, $00, $01
000AEAB9                            	smpsVcRateScale     $00, $00, $00, $00
000AEAB9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AEAB9                            	smpsVcAmpMod        $00, $00, $00, $00
000AEAB9                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000AEAB9                            	smpsVcDecayRate2    $05, $00, $05, $04
000AEAB9                            	smpsVcDecayLevel    $08, $08, $05, $04
000AEAB9                            	smpsVcReleaseRate   $06, $05, $06, $05
000AEAD2                            
000AEAD2                            
000AEAD2                            		even	
000AEAD2                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000AEAD2                            ToxicLandfill_Header:
000AEAD2                            	smpsHeaderStartSong 1
000AEAD4 0603                       	smpsHeaderChan      $06, $03
000AEAD6 0208                       	smpsHeaderTempo     $02, $08
000AEAD8                            
000AEADC 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000AEAE0 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000AEAE4 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000AEAE8 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000AEAEC 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000AEB02                            
000AEB02                            ; DAC Data
000AEB02                            ToxicLandfill_DAC:
000AEB02 E0C0                       	smpsPan             panCenter, $00
000AEB04 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000AEB10 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000AEB1B                            
000AEB1B                            ToxicLandfill_Loop00:
000AEB1B 82                         	dc.b	dSnare
000AEB1C                            
000AEB1C                            ToxicLandfill_Loop01:
000AEB1C 82                         	dc.b	dSnare
000AEB1D                            
000AEB1D                            ToxicLandfill_Jump00:
000AEB1D 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AEB29 0381 0603                  	dc.b	$03, dKick, $06, $03
000AEB2D F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000AEB32 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000AEB3E 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000AEB46 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000AEB4B                            
000AEB4B                            ToxicLandfill_Loop06:
000AEB4B 82                         	dc.b	dSnare
000AEB4C                            
000AEB4C                            ToxicLandfill_Loop02:
000AEB4C 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AEB50 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000AEB55                            
000AEB55                            ToxicLandfill_Loop03:
000AEB55 8281 81                    	dc.b	dSnare, dKick, dKick
000AEB58 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000AEB5D                            
000AEB5D                            ToxicLandfill_Loop04:
000AEB5D 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AEB61 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000AEB66 8182 81                    	dc.b	dKick, dSnare, dKick
000AEB69                            
000AEB69                            ToxicLandfill_Loop05:
000AEB69 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AEB6E F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000AEB73 0303 03                    	dc.b	$03, $03, $03
000AEB76 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000AEB7B                            
000AEB7B                            ToxicLandfill_Loop08:
000AEB7B 03                         	dc.b	$03
000AEB7C                            
000AEB7C                            ToxicLandfill_Loop07:
000AEB7C 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AEB85 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000AEB8A 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000AEB91 F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000AEB96                            
000AEB96                            ToxicLandfill_Loop0D:
000AEB96 82                         	dc.b	dSnare
000AEB97                            
000AEB97                            ToxicLandfill_Loop09:
000AEB97 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AEB9B F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000AEBA0                            
000AEBA0                            ToxicLandfill_Loop0A:
000AEBA0 8281 81                    	dc.b	dSnare, dKick, dKick
000AEBA3 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000AEBA8                            
000AEBA8                            ToxicLandfill_Loop0B:
000AEBA8 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AEBAC F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000AEBB1 8182 81                    	dc.b	dKick, dSnare, dKick
000AEBB4                            
000AEBB4                            ToxicLandfill_Loop0C:
000AEBB4 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AEBB9 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000AEBBE 0303 03                    	dc.b	$03, $03, $03
000AEBC1 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000AEBC6                            
000AEBC6                            ToxicLandfill_Loop0E:
000AEBC6 03                         	dc.b	$03
000AEBC7                            
000AEBC7                            ToxicLandfill_Loop0F:
000AEBC7 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AEBD3 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000AEBD8 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000AEBDD 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000AEBE9 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000AEBF1 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000AEBF6                            
000AEBF6                            ToxicLandfill_Loop10:
000AEBF6 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AEBFF F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000AEC04 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000AEC0C F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000AEC11 F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000AEC14                            
000AEC14                            ; FM1 Data
000AEC14                            ToxicLandfill_FM1:
000AEC14 E0C0                       	smpsPan             panCenter, $00
000AEC16 EF00                       	smpsSetvoice        $00
000AEC18 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AEC24 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AEC2C                            
000AEC2C                            ToxicLandfill_Loop44:
000AEC2C AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AEC38 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AEC44 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AEC50 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AEC54 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000AEC59                            
000AEC59                            ToxicLandfill_Loop46:
000AEC59 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AEC65 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AEC71 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AEC7D AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AEC85                            
000AEC85                            ToxicLandfill_Loop45:
000AEC85 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AEC89 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000AEC8E AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AEC95 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000AEC9A                            
000AEC9A                            ToxicLandfill_Loop47:
000AEC9A B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AECA6 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000AECAB                            
000AECAB                            ToxicLandfill_Loop48:
000AECAB B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AECB6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000AECBB F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000AECC0                            
000AECC0                            ToxicLandfill_Loop4A:
000AECC0 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AECCC B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AECD8 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AECE4 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AECEC                            
000AECEC                            ToxicLandfill_Loop49:
000AECEC B602 B501                  	dc.b	nF4, $02, nE4, $01
000AECF0 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000AECF5 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AECFC F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000AED01                            
000AED01                            ToxicLandfill_Loop4B:
000AED01 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AED0D 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AED19 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AED25 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AED29 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000AED2E                            
000AED2E                            ToxicLandfill_Loop4C:
000AED2E BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AED39 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000AED3E                            
000AED3E                            ToxicLandfill_Loop4D:
000AED3E BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AED49 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000AED4E F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000AED53 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000AED56                            
000AED56                            ; FM2 Data
000AED56                            ToxicLandfill_FM2:
000AED56 E0C0                       	smpsPan             panCenter, $00
000AED58 EF00                       	smpsSetvoice        $00
000AED5A 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AED66 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AED6E                            
000AED6E                            ToxicLandfill_Loop3A:
000AED6E B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000AED7A 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000AED86 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000AED92 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000AED96 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000AED9B                            
000AED9B                            ToxicLandfill_Loop3C:
000AED9B B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AEDA7 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000AEDB3 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000AEDBF B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000AEDC7                            
000AEDC7                            ToxicLandfill_Loop3B:
000AEDC7 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000AEDCB F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000AEDD0 AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000AEDD7 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000AEDDC                            
000AEDDC                            ToxicLandfill_Loop3D:
000AEDDC AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000AEDE8 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000AEDED                            
000AEDED                            ToxicLandfill_Loop3E:
000AEDED ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000AEDF8 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000AEDFD F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000AEE02                            
000AEE02                            ToxicLandfill_Loop40:
000AEE02 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000AEE0E B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000AEE1A B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AEE26 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000AEE2E                            
000AEE2E                            ToxicLandfill_Loop3F:
000AEE2E BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000AEE32 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000AEE37 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AEE3E F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AEE43                            
000AEE43                            ToxicLandfill_Loop41:
000AEE43 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AEE4F 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AEE5B BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AEE67 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AEE6B F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AEE70 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AEE7C B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AEE88 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AEE94 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AEEA0 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AEEAC 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AEEB2                            
000AEEB2                            ToxicLandfill_Loop42:
000AEEB2 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AEEBD F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AEEC2                            
000AEEC2                            ToxicLandfill_Loop43:
000AEEC2 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AEECD F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AEED2 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AEED7 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AEEE3 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AEEED F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AEEF0                            
000AEEF0                            ; FM3 Data
000AEEF0                            ToxicLandfill_FM3:
000AEEF0 E0C0                       	smpsPan             panCenter, $00
000AEEF2 EF01                       	smpsSetvoice        $01
000AEEF4                            
000AEEF4                            ToxicLandfill_Loop2D:
000AEEF4 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AEF00 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AEF0C 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AEF15 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AEF1A 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AEF26 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AEF32 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AEF3E A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AEF46                            
000AEF46                            ToxicLandfill_Loop2E:
000AEF46 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AEF52 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AEF57 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AEF63 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AEF69 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000AEF6E                            
000AEF6E                            ToxicLandfill_Loop31:
000AEF6E A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AEF73                            
000AEF73                            ToxicLandfill_Loop2F:
000AEF73 9999 A3                    	dc.b	nC2, nC2, nBb2
000AEF76 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000AEF7B 99A3                       	dc.b	nC2, nBb2
000AEF7D                            
000AEF7D                            ToxicLandfill_Loop30:
000AEF7D 99A3 99                    	dc.b	nC2, nBb2, nC2
000AEF80 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000AEF85 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AEF8A F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000AEF8F                            
000AEF8F                            ToxicLandfill_Loop32:
000AEF8F A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AEF9B F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000AEFA0                            
000AEFA0                            ToxicLandfill_Loop33:
000AEFA0 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AEFAA F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000AEFAF F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000AEFB4                            
000AEFB4                            ToxicLandfill_Loop36:
000AEFB4 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AEFB9                            
000AEFB9                            ToxicLandfill_Loop34:
000AEFB9 9999 A3                    	dc.b	nC2, nC2, nBb2
000AEFBC F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000AEFC1 99A3                       	dc.b	nC2, nBb2
000AEFC3                            
000AEFC3                            ToxicLandfill_Loop35:
000AEFC3 99A3 99                    	dc.b	nC2, nBb2, nC2
000AEFC6 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000AEFCB 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AEFD0 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000AEFD5                            
000AEFD5                            ToxicLandfill_Loop37:
000AEFD5 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AEFE1 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000AEFE6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AEFF2 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AEFF8 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000AEFFD                            
000AEFFD                            ToxicLandfill_Loop38:
000AEFFD A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AF008 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000AF00D                            
000AF00D                            ToxicLandfill_Loop39:
000AF00D A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AF017 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000AF01C F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000AF021 F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000AF024                            
000AF024                            ; FM4 Data
000AF024                            ToxicLandfill_FM4:
000AF024 E0C0                       	smpsPan             panCenter, $00
000AF026 EF01                       	smpsSetvoice        $01
000AF028                            
000AF028                            ToxicLandfill_Loop20:
000AF028 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000AF034 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000AF040 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000AF049 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000AF04E 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000AF05A 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000AF066 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000AF072 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000AF077                            
000AF077                            ToxicLandfill_Loop21:
000AF077 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AF083 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000AF088 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AF094 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AF09A F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000AF09F                            
000AF09F                            ToxicLandfill_Loop24:
000AF09F 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AF0A4                            
000AF0A4                            ToxicLandfill_Loop22:
000AF0A4 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AF0A7 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000AF0AC 8D97                       	dc.b	nC1, nBb1
000AF0AE                            
000AF0AE                            ToxicLandfill_Loop23:
000AF0AE 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AF0B1 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000AF0B6 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AF0BB F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000AF0C0                            
000AF0C0                            ToxicLandfill_Loop25:
000AF0C0 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AF0CC F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000AF0D1                            
000AF0D1                            ToxicLandfill_Loop26:
000AF0D1 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AF0DB F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000AF0E0 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000AF0E5                            
000AF0E5                            ToxicLandfill_Loop29:
000AF0E5 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AF0EA                            
000AF0EA                            ToxicLandfill_Loop27:
000AF0EA 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AF0ED F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000AF0F2 8D97                       	dc.b	nC1, nBb1
000AF0F4                            
000AF0F4                            ToxicLandfill_Loop28:
000AF0F4 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AF0F7 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000AF0FC 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AF101 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000AF106                            
000AF106                            ToxicLandfill_Loop2A:
000AF106 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AF112 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000AF117 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AF123 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AF129 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000AF12E                            
000AF12E                            ToxicLandfill_Loop2B:
000AF12E 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AF139 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000AF13E                            
000AF13E                            ToxicLandfill_Loop2C:
000AF13E 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AF148 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000AF14D F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000AF152 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000AF155                            
000AF155                            ; FM5 Data
000AF155                            ToxicLandfill_FM5:
000AF155 E0C0                       	smpsPan             panCenter, $00
000AF157 E6FA                       	smpsAlterVol			-$06		
000AF159 E102                       	smpsDetune			$02	
000AF15B EF00                       	smpsSetvoice        $00
000AF15D 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AF169 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000AF16E                            
000AF16E                            ToxicLandfill_Jump01:
000AF16E E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000AF171                            
000AF171                            ToxicLandfill_Loop11:
000AF171 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AF17D 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AF189 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AF195 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AF199 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000AF19E                            
000AF19E                            ToxicLandfill_Loop13:
000AF19E AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AF1AA A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AF1B6 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AF1C2 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AF1CA                            
000AF1CA                            ToxicLandfill_Loop12:
000AF1CA AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AF1CE F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000AF1D3 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AF1DA F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000AF1DF                            
000AF1DF                            ToxicLandfill_Loop14:
000AF1DF B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AF1EB F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000AF1F0                            
000AF1F0                            ToxicLandfill_Loop15:
000AF1F0 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AF1FB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000AF200 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000AF205                            
000AF205                            ToxicLandfill_Loop17:
000AF205 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AF211 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AF21D AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AF229 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AF231                            
000AF231                            ToxicLandfill_Loop16:
000AF231 B602 B501                  	dc.b	nF4, $02, nE4, $01
000AF235 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000AF23A B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AF241 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000AF246                            
000AF246                            ToxicLandfill_Loop18:
000AF246 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AF252 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AF25E B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AF26A B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AF26E F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000AF273                            
000AF273                            ToxicLandfill_Loop19:
000AF273 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF27E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000AF283                            
000AF283                            ToxicLandfill_Loop1A:
000AF283 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AF28E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000AF293                            
000AF293                            ToxicLandfill_Loop1B:
000AF293 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF29E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000AF2A3 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000AF2AF B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000AF2BB EF02                       	smpsSetvoice        $02
000AF2BD E1FE                       	smpsDetune			-$02
000AF2BF E606                       	smpsAlterVol		$06
000AF2C1                            	
000AF2C1                            ToxicLandfill_Loop1C:
000AF2C1 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000AF2CD F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000AF2D2                            
000AF2D2                            ToxicLandfill_Loop1D:
000AF2D2 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AF2DD F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000AF2E2                            
000AF2E2                            ToxicLandfill_Loop1E:
000AF2E2 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF2ED F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000AF2F2                            
000AF2F2                            ToxicLandfill_Loop1F:
000AF2F2 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AF2FD F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000AF302 EF00                       	smpsSetvoice        $00
000AF304 E102                       	smpsDetune			$02
000AF306 E6FA                       	smpsAlterVol		-$06	
000AF308 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000AF30B                            
000AF30B                            ; PSG1 Data
000AF30B                            ToxicLandfill_PSG1:
000AF30B 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AF310                            
000AF310                            ToxicLandfill_Jump04:
000AF310 80                         	dc.b	nRst
000AF311                            
000AF311                            ToxicLandfill_Loop57:
000AF311 60                         	dc.b	$60
000AF312 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000AF317                            
000AF317                            ToxicLandfill_Loop58:
000AF317 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF323 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000AF328                            
000AF328                            ToxicLandfill_Loop59:
000AF328 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AF333 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000AF338                            
000AF338                            ToxicLandfill_Loop5A:
000AF338 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF343 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000AF348 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AF354 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000AF360                            
000AF360                            ToxicLandfill_Loop5B:
000AF360 6E                         	dc.b	$6E
000AF361 F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000AF366                            
000AF366                            ToxicLandfill_Loop5C:
000AF366 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF372 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000AF377                            
000AF377                            ToxicLandfill_Loop5D:
000AF377 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AF382 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000AF387 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000AF38C                            
000AF38C                            ToxicLandfill_Loop5E:
000AF38C A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF397 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000AF39C A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AF3A8 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000AF3B4 01                         	dc.b	$01
000AF3B5 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000AF3B8                            
000AF3B8                            ; PSG2 Data
000AF3B8                            ToxicLandfill_PSG2:
000AF3B8 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AF3BD                            
000AF3BD                            ToxicLandfill_Jump03:
000AF3BD 80                         	dc.b	nRst
000AF3BE                            
000AF3BE                            ToxicLandfill_Loop50:
000AF3BE 60                         	dc.b	$60
000AF3BF F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000AF3C4 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF3D0 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AF3DC 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF3E8 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AF3F4 9E                         	dc.b	nF2
000AF3F5                            
000AF3F5                            ToxicLandfill_Loop51:
000AF3F5 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF400 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000AF405 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AF411 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000AF41D 0580                       	dc.b	$05, nRst
000AF41F                            
000AF41F                            ToxicLandfill_Loop52:
000AF41F 60                         	dc.b	$60
000AF420 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000AF425 01                         	dc.b	$01
000AF426                            
000AF426                            ToxicLandfill_Loop53:
000AF426 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF432 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AF43E 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF44A A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AF456 9E                         	dc.b	nF2
000AF457 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000AF45C                            
000AF45C                            ToxicLandfill_Loop54:
000AF45C A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF467 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000AF46C                            
000AF46C                            ToxicLandfill_Loop55:
000AF46C A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF477 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000AF47C                            
000AF47C                            ToxicLandfill_Loop56:
000AF47C A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF487 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000AF48C A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AF498 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000AF4A4 01                         	dc.b	$01
000AF4A5 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000AF4A8                            
000AF4A8                            ; PSG3 Data
000AF4A8                            ToxicLandfill_PSG3:
000AF4A8 F3E7                       	smpsPSGform         $E7
000AF4AA 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000AF4B2                            
000AF4B2                            ToxicLandfill_Loop4E:
000AF4B2 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000AF4B7 F501                       	smpsPSGvoice        fTone_01
000AF4B9 0C                         	dc.b	$0C
000AF4BA F502                       	smpsPSGvoice        fTone_02
000AF4BC F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000AF4C1 0603 03                    	dc.b	$06, $03, $03
000AF4C4 F501                       	smpsPSGvoice        fTone_01
000AF4C6 06                         	dc.b	$06
000AF4C7 F502                       	smpsPSGvoice        fTone_02
000AF4C9 03                         	dc.b	$03
000AF4CA F501                       	smpsPSGvoice        fTone_01
000AF4CC 0906 0606                  	dc.b	$09, $06, $06, $06
000AF4D0                            
000AF4D0                            ToxicLandfill_Jump02:
000AF4D0 E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000AF4D8 F502                       	smpsPSGvoice        fTone_02
000AF4DA C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000AF4DE F501                       	smpsPSGvoice        fTone_01
000AF4E0 18                         	dc.b	$18
000AF4E1 F502                       	smpsPSGvoice        fTone_02
000AF4E3 1806                       	dc.b	$18, $06
000AF4E5 F501                       	smpsPSGvoice        fTone_01
000AF4E7 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AF4ED F502                       	smpsPSGvoice        fTone_02
000AF4EF 1818 18                    	dc.b	$18, $18, $18
000AF4F2 F501                       	smpsPSGvoice        fTone_01
000AF4F4 18                         	dc.b	$18
000AF4F5 F502                       	smpsPSGvoice        fTone_02
000AF4F7 1806                       	dc.b	$18, $06
000AF4F9 F501                       	smpsPSGvoice        fTone_01
000AF4FB 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000AF507 F502                       	smpsPSGvoice        fTone_02
000AF509 1818 18                    	dc.b	$18, $18, $18
000AF50C F501                       	smpsPSGvoice        fTone_01
000AF50E 18                         	dc.b	$18
000AF50F F502                       	smpsPSGvoice        fTone_02
000AF511 1806                       	dc.b	$18, $06
000AF513 F501                       	smpsPSGvoice        fTone_01
000AF515 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AF51B F502                       	smpsPSGvoice        fTone_02
000AF51D 1818 18                    	dc.b	$18, $18, $18
000AF520 F501                       	smpsPSGvoice        fTone_01
000AF522 18                         	dc.b	$18
000AF523 F502                       	smpsPSGvoice        fTone_02
000AF525 1806                       	dc.b	$18, $06
000AF527 F501                       	smpsPSGvoice        fTone_01
000AF529 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000AF52E                            
000AF52E                            ToxicLandfill_Loop4F:
000AF52E 59E7                       	dc.b	$59, smpsNoAttack
000AF530 F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000AF535 5A                         	dc.b	$5A
000AF536 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000AF539                            
000AF539                            
000AF539                            ToxicLandfill_Voices:
000AF539                            ;	Voice $00
000AF539                            ;	$29
000AF539                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000AF539                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000AF539                            	smpsVcAlgorithm     $01
000AF539                            	smpsVcFeedback      $05
000AF539                            	smpsVcUnusedBits    $00
000AF539                            	smpsVcDetune        $00, $00, $00, $03
000AF539                            	smpsVcCoarseFreq    $01, $02, $02, $03
000AF539                            	smpsVcRateScale     $00, $00, $00, $00
000AF539                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000AF539                            	smpsVcAmpMod        $00, $00, $00, $00
000AF539                            	smpsVcDecayRate1    $0B, $00, $02, $00
000AF539                            	smpsVcDecayRate2    $03, $00, $02, $03
000AF539                            	smpsVcDecayLevel    $01, $00, $01, $00
000AF539                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000AF552                            	
000AF552                            ;	Voice $01
000AF552                            ;	$18
000AF552                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000AF552                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000AF552                            	smpsVcAlgorithm     $00
000AF552                            	smpsVcFeedback      $03
000AF552                            	smpsVcUnusedBits    $00
000AF552                            	smpsVcDetune        $03, $03, $03, $03
000AF552                            	smpsVcCoarseFreq    $01, $00, $00, $07
000AF552                            	smpsVcRateScale     $02, $00, $03, $02
000AF552                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000AF552                            	smpsVcAmpMod        $00, $00, $00, $00
000AF552                            	smpsVcDecayRate1    $01, $04, $06, $0D
000AF552                            	smpsVcDecayRate2    $05, $03, $0A, $08
000AF552                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000AF552                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF56B                            
000AF56B                            ;	Voice $02
000AF56B                            ;	$2C
000AF56B                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000AF56B                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000AF56B                            	smpsVcAlgorithm     $04
000AF56B                            	smpsVcFeedback      $05
000AF56B                            	smpsVcUnusedBits    $00
000AF56B                            	smpsVcDetune        $03, $03, $07, $07
000AF56B                            	smpsVcCoarseFreq    $04, $04, $08, $02
000AF56B                            	smpsVcRateScale     $00, $00, $00, $00
000AF56B                            	smpsVcAttackRate    $12, $1F, $12, $1F
000AF56B                            	smpsVcAmpMod        $00, $00, $00, $00
000AF56B                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000AF56B                            	smpsVcDecayRate2    $00, $00, $00, $00
000AF56B                            	smpsVcDecayLevel    $01, $00, $01, $00
000AF56B                            	smpsVcReleaseRate   $06, $00, $06, $00
000AF584                            		even			
000AF584                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000AF584                            RRZ2_Header:
000AF584                            	smpsHeaderStartSong 1
000AF586 0603                       	smpsHeaderChan      $06, $03
000AF588 0104                       	smpsHeaderTempo     $01, $04
000AF58A                            
000AF58E 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000AF592 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000AF596 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000AF59A 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000AF59E 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000AF5B4                            
000AF5B4                            ; FM1 Data
000AF5B4                            RRZ2_FM1:
000AF5B4 E0C0                       	smpsPan             panCenter, $00
000AF5BB EF03                       	smpsSetvoice        $03
000AF5BD B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000AF5C9 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000AF5D5 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000AF5E1 B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000AF5ED 8080                       	dc.b	nRst, nRst
000AF5EF EF00                       	smpsSetvoice        $00
000AF5F1 B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000AF5FD B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000AF609 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000AF615 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000AF621 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000AF62D B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000AF639 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000AF645 3280 60                    	dc.b	$32, nRst, $60
000AF648 EF05                       	smpsSetvoice        $05
000AF64A E9F4                       	smpsAlterPitch      $F4
000AF64C B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000AF658 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000AF660 E90C                       	smpsAlterPitch      $0C
000AF662 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000AF66E 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000AF67A 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000AF680 F6FF 32                    	smpsJump            RRZ2_FM1
000AF683                            
000AF683                            ; FM2 Data
000AF683                            RRZ2_FM2:
000AF683 E0C0                       	smpsPan             panCenter, $00
000AF68A EF01                       	smpsSetvoice        $01
000AF68C                            
000AF68C                            RRZ2_Jump02:
000AF68C 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000AF698 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000AF6A4 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000AF6B0 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000AF6BC 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000AF6C8 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000AF6D4 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000AF6E0 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000AF6E8                            
000AF6E8                            RRZ2_Loop07:
000AF6E8 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AF6F4 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AF700 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AF708 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000AF70D                            
000AF70D                            RRZ2_Loop08:
000AF70D 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AF719 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AF725 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AF72D F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000AF732 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000AF73E 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000AF74A 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000AF756 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000AF762 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000AF76E 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000AF77A 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000AF786 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000AF792 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000AF79E A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000AF7AA 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000AF7B6 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000AF7C2 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000AF7CE 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000AF7DA 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AF7E6 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AF7F2 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AF7FE 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AF80A 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AF816 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AF822 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AF82E 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AF83A 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AF846 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AF852 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000AF85E 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AF86A 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AF876 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AF882 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AF88E 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AF89A 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AF8A6 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AF8B2 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AF8BE 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AF8CA 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AF8D6 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000AF8DD F6FD AD                    	smpsJump            RRZ2_Jump02
000AF8E0                            
000AF8E0                            ; FM3 Data
000AF8E0                            RRZ2_FM3:
000AF8E0 E080                       	smpsPan             panLeft, $00
000AF8E7                            
000AF8E7                            RRZ2_Jump01:
000AF8E7 EF02                       	smpsSetvoice        $02
000AF8E9                            
000AF8E9                            RRZ2_Loop05:
000AF8E9 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF8F5 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF901 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF90D 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AF919 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AF91F F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000AF924 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF930 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF93C 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF948 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AF954 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AF95C                            
000AF95C                            RRZ2_Loop06:
000AF95C AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AF968 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AF974 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AF980 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AF98C 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AF998 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AF9A4 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AF9B0 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AF9BB F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000AF9C0 AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AF9CC 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AF9D8 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AF9E4 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AF9F0 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AF9FC B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AFA08 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AFA14 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AFA1F EF05                       	smpsSetvoice        $05
000AFA21 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000AFA2D B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000AFA39 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000AFA45 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000AFA51 B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000AFA5D B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000AFA69 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000AFA6F E6FA                       	smpsAlterVol        $FA
000AFA71 A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000AFA7D 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000AFA89 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AFA95 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000AFAA1 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000AFAAD 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000AFAB9 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000AFAC5 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000AFACF E606                       	smpsAlterVol        $06
000AFAD1 F6FE 14                    	smpsJump            RRZ2_Jump01
000AFAD4                            
000AFAD4                            ; FM4 Data
000AFAD4                            RRZ2_FM4:
000AFAD4 E040                       	smpsPan             panRight, $00
000AFADB                            
000AFADB                            RRZ2_Jump00:
000AFADB EF02                       	smpsSetvoice        $02
000AFADD                            
000AFADD                            RRZ2_Loop03:
000AFADD AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFAE9 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFAF5 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFB01 AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AFB0D ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AFB12 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000AFB17 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFB23 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFB2F 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFB3B AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AFB47 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AFB4D                            
000AFB4D                            RRZ2_Loop04:
000AFB4D A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AFB59 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AFB65 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AFB71 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AFB7D 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AFB89 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AFB95 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AFBA1 A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000AFBAC F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000AFBB1 A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AFBBD 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AFBC9 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AFBD5 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AFBE1 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AFBED A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AFBF9 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AFC05 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000AFC11 EF05                       	smpsSetvoice        $05
000AFC13 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000AFC1F B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000AFC2B 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000AFC37 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000AFC43 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000AFC4F ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000AFC5B B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000AFC67 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000AFC6B E6FA                       	smpsAlterVol        $FA
000AFC6D A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000AFC79 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000AFC85 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AFC91 A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000AFC9D 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000AFCA9 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000AFCB5 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000AFCC1 B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000AFCC9 E606                       	smpsAlterVol        $06
000AFCCB F6FE 0E                    	smpsJump            RRZ2_Jump00
000AFCCE                            
000AFCCE                            ; FM5 Data
000AFCCE                            RRZ2_FM5:
000AFCD3 8010                       	dc.b	nRst, $10
000AFCD5 E101                       	smpsAlterNote       $01
000AFCD7 F6F8 DB                    	smpsJump            RRZ2_FM1
000AFCDA                            
000AFCDA                            ; PSG1 Data
000AFCDA                            RRZ2_PSG1:
000AFCDF F507                       	smpsPSGvoice        stone_1D
000AFCE1 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AFCED 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AFCF9 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AFD05 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AFD11 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AFD17 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000AFD1C B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AFD28 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AFD34 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AFD40 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AFD4C B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AFD54 F507                       	smpsPSGvoice        stone_26
000AFD56 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AFD62 804A                       	dc.b	nRst, $4A
000AFD64                            
000AFD64                            RRZ2_Loop0D:
000AFD64 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000AFD70 804A                       	dc.b	nRst, $4A
000AFD72 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000AFD77 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AFD83 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000AFD8F BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000AFD93                            
000AFD93                            RRZ2_Loop0E:
000AFD93 F507                       	smpsPSGvoice        stone_23
000AFD95 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000AFDA1 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000AFDAD 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000AFDB9 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000AFDC0 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000AFDC5                            
000AFDC5                            RRZ2_Loop0F:
000AFDC5 F507                       	smpsPSGvoice        stone_1D
000AFDC7 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000AFDD3 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000AFDDF 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000AFDEB F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000AFDF0 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFDFC B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AFE08 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AFE14 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AFE20 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFE2C B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AFE38 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000AFE3F F6FE 99                    	smpsJump            RRZ2_PSG1
000AFE42                            
000AFE42                            ; PSG2 Data
000AFE42                            RRZ2_PSG2:
000AFE47 F507                       	smpsPSGvoice        stone_1D
000AFE49                            
000AFE49                            RRZ2_Loop09:
000AFE49 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFE55 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFE61 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFE6D AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AFE79 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AFE7E F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000AFE83 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFE8F 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFE9B 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFEA7 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AFEB3 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AFEB9 F507                       	smpsPSGvoice        stone_26
000AFEBB B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000AFEC7 804A                       	dc.b	nRst, $4A
000AFEC9                            
000AFEC9                            RRZ2_Loop0A:
000AFEC9 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AFED5 804A                       	dc.b	nRst, $4A
000AFED7 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000AFEDC B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AFEE8 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000AFEF4 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000AFEF8                            
000AFEF8                            RRZ2_Loop0B:
000AFEF8 F507                       	smpsPSGvoice        stone_23
000AFEFA B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000AFF06 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000AFF12 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000AFF1E 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000AFF25 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000AFF2A                            
000AFF2A                            RRZ2_Loop0C:
000AFF2A F507                       	smpsPSGvoice        stone_1D
000AFF2C B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000AFF38 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000AFF44 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000AFF50 E760                       	dc.b	smpsNoAttack, $60
000AFF52 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000AFF57 800D                       	dc.b	nRst, $0D
000AFF59 EC02                       	smpsPSGAlterVol     $02
000AFF5B 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFF67 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AFF73 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AFF7F 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AFF8B B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFF97 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AFFA3 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000AFFAB ECFE                       	smpsPSGAlterVol     $FE
000AFFAD F6FE 93                    	smpsJump            RRZ2_PSG2
000AFFB0                            
000AFFB0                            ; PSG3 Data
000AFFB0                            RRZ2_PSG3:
000AFFB0 F3E7                       	smpsPSGform         $E7
000AFFB2 8060 80                    	dc.b	nRst, $60, nRst
000AFFB5 F800 00                    	smpsCall            RRZ2_Call00
000AFFB8 F800 00                    	smpsCall            RRZ2_Call00
000AFFBB F800 00                    	smpsCall            RRZ2_Call01
000AFFBE                            
000AFFBE                            RRZ2_Jump03:
000AFFBE F800 00                    	smpsCall            RRZ2_Call00
000AFFC1 F6FF FB                    	smpsJump            RRZ2_Jump03
000AFFC4                            
000AFFC4                            RRZ2_Call00:
000AFFC4 F502                       	smpsPSGvoice        stone_0F
000AFFC6 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AFFCD F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000AFFD2 E3                         	smpsReturn
000AFFD3                            
000AFFD3                            RRZ2_Call01:
000AFFD3 F502                       	smpsPSGvoice        stone_0F
000AFFD5 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AFFDC F502                       	smpsPSGvoice        stone_0F
000AFFDE B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AFFE5 F502                       	smpsPSGvoice        stone_0F
000AFFE7 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000AFFEE F503                       	smpsPSGvoice        stone_04
000AFFF0 B10C                       	dc.b	nC4, $0C
000AFFF2 F502                       	smpsPSGvoice        stone_0F
000AFFF4 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000AFFF8 E3                         	smpsReturn
000AFFF9                            
000AFFF9                            ; DAC Data
000AFFF9                            RRZ2_DAC:
000AFFF9 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000B0005 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000B0011 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000B001D 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000B0029 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000B0035 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B0041 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000B004D 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B0059 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B0065 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B0071 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B007D 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B0089 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000B008F                            
000B008F                            RRZ2_Loop00:
000B008F 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B009B 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B00A7 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B00B3 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B00BF 80                         	dc.b	nRst
000B00C0 F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000B00C5 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B00D1 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B00DD 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B00E9 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000B00F5 82                         	dc.b	dSnare
000B00F6                            
000B00F6                            RRZ2_Loop01:
000B00F6 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B0102 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B010E 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B011A 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B0126 80                         	dc.b	nRst
000B0127 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000B012C 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000B0138 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000B0144 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000B0150 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000B015C 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000B0168 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000B0174 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000B0180 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B018C 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B0198 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B01A4 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01B0 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01BC 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01C8 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B01D4 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000B01E0 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01EC 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000B01F8 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000B0204 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000B0210 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B021C 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B0228                            
000B0228                            RRZ2_Loop02:
000B0228 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B0234 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B0240 80                         	dc.b	nRst
000B0241 F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B0246 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B0252 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B025E 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B026A 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B026F F6FD 88                    	smpsJump            RRZ2_DAC
000B0272                            
000B0272                            RRZ2_Voices:
000B0272                            ;	Voice $00
000B0272                            ;	$3A
000B0272                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B0272                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B0272                            	smpsVcAlgorithm     $02
000B0272                            	smpsVcFeedback      $07
000B0272                            	smpsVcUnusedBits    $00
000B0272                            	smpsVcDetune        $03, $07, $07, $03
000B0272                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B0272                            	smpsVcRateScale     $00, $01, $01, $02
000B0272                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B0272                            	smpsVcAmpMod        $00, $00, $00, $00
000B0272                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B0272                            	smpsVcDecayRate2    $01, $01, $05, $01
000B0272                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B0272                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B028B                            
000B028B                            ;	Voice $01
000B028B                            ;	$3C
000B028B                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B028B                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B028B                            	smpsVcAlgorithm     $04
000B028B                            	smpsVcFeedback      $07
000B028B                            	smpsVcUnusedBits    $00
000B028B                            	smpsVcDetune        $00, $00, $00, $00
000B028B                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B028B                            	smpsVcRateScale     $00, $00, $00, $00
000B028B                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B028B                            	smpsVcAmpMod        $00, $00, $00, $00
000B028B                            	smpsVcDecayRate1    $05, $12, $03, $11
000B028B                            	smpsVcDecayRate2    $02, $09, $04, $07
000B028B                            	smpsVcDecayLevel    $01, $02, $03, $05
000B028B                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B02A4                            
000B02A4                            ;	Voice $02
000B02A4                            ;	$3A
000B02A4                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B02A4                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B02A4                            	smpsVcAlgorithm     $02
000B02A4                            	smpsVcFeedback      $07
000B02A4                            	smpsVcUnusedBits    $00
000B02A4                            	smpsVcDetune        $03, $01, $00, $07
000B02A4                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B02A4                            	smpsVcRateScale     $02, $02, $03, $02
000B02A4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B02A4                            	smpsVcAmpMod        $00, $00, $00, $00
000B02A4                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B02A4                            	smpsVcDecayRate2    $02, $03, $02, $03
000B02A4                            	smpsVcDecayLevel    $07, $05, $06, $06
000B02A4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B02BD                            
000B02BD                            ;	Voice $03
000B02BD                            ;	$3E
000B02BD                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B02BD                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B02BD                            	smpsVcAlgorithm     $06
000B02BD                            	smpsVcFeedback      $07
000B02BD                            	smpsVcUnusedBits    $00
000B02BD                            	smpsVcDetune        $00, $00, $00, $00
000B02BD                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B02BD                            	smpsVcRateScale     $00, $00, $00, $00
000B02BD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B02BD                            	smpsVcAmpMod        $00, $00, $00, $00
000B02BD                            	smpsVcDecayRate1    $00, $00, $06, $03
000B02BD                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B02BD                            	smpsVcDecayLevel    $00, $00, $00, $01
000B02BD                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B02D6                            
000B02D6                            ;	Voice $04
000B02D6                            ;	$3C
000B02D6                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B02D6                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B02D6                            	smpsVcAlgorithm     $04
000B02D6                            	smpsVcFeedback      $07
000B02D6                            	smpsVcUnusedBits    $00
000B02D6                            	smpsVcDetune        $01, $01, $07, $07
000B02D6                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B02D6                            	smpsVcRateScale     $00, $00, $00, $00
000B02D6                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B02D6                            	smpsVcAmpMod        $00, $00, $00, $00
000B02D6                            	smpsVcDecayRate1    $01, $07, $01, $04
000B02D6                            	smpsVcDecayRate2    $00, $00, $00, $00
000B02D6                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B02D6                            	smpsVcReleaseRate   $08, $07, $08, $07
000B02EF                            
000B02EF                            ;	Voice $05
000B02EF                            ;	$16
000B02EF                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B02EF                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B02EF                            	smpsVcAlgorithm     $06
000B02EF                            	smpsVcFeedback      $02
000B02EF                            	smpsVcUnusedBits    $00
000B02EF                            	smpsVcDetune        $03, $03, $07, $07
000B02EF                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B02EF                            	smpsVcRateScale     $00, $00, $00, $00
000B02EF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B02EF                            	smpsVcAmpMod        $00, $00, $00, $00
000B02EF                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B02EF                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B02EF                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B02EF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0308                            
000B0308                            
000B0308                            		even				
000B0308                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B0EEA                            		even
000B0EEA                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B0EEA                            Tribute_Header:
000B0EEA                            	smpsHeaderStartSong 3
000B0EEC 0603                       	smpsHeaderChan      $06, $03
000B0EEE 0106                       	smpsHeaderTempo     $01, $06
000B0EF0                            
000B0EF4 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B0EF8 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B0EFC 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B0F00 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B0F04 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B0F08                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B0F1A                            
000B0F1A                            ; FM1 Data
000B0F1A                            Tribute_FM1:
000B0F1A EF00                       	smpsSetvoice        $00
000B0F1C F800 00                    	smpsCall            Tribute_Call05
000B0F1F E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0F2B 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B0F37 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B0F3E F800 00                    	smpsCall            Tribute_Call05
000B0F41 E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0F4D 94                         	dc.b	nG1
000B0F4E EA09                       	smpsSetTempoMod     $09
000B0F50 E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0F56                            
000B0F56                            Tribute_Loop05:
000B0F56 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B0F62 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B0F6E 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B0F7A 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B0F86 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B0F92 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B0F9E 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B0FA5 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B0FAA 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B0FB6 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B0FBE F800 00                    	smpsCall            Tribute_Call00
000B0FC1 F2                         	smpsStop
000B0FC2                            
000B0FC2                            Tribute_Call05:
000B0FC2 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B0FCE E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B0FDA 809B                       	dc.b	nRst, nD2
000B0FDC E3                         	smpsReturn
000B0FDD                            
000B0FDD                            Tribute_Call00:
000B0FDD 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B0FE9 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B0FF5 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B0FFA E3                         	smpsReturn
000B0FFB                            
000B0FFB                            ; FM2 Data
000B0FFB                            Tribute_FM2:
000B0FFB EF01                       	smpsSetvoice        $01
000B0FFD B512 B306                  	dc.b	nE4, $12, nD4, $06
000B1001 E60A                       	smpsFMAlterVol      $0A
000B1003 0680                       	dc.b	$06, nRst
000B1005 E6F6                       	smpsFMAlterVol      $F6
000B1007 B8                         	dc.b	nG4
000B1008 E60A                       	smpsFMAlterVol      $0A
000B100A 0680                       	dc.b	$06, nRst
000B100C E6F6                       	smpsFMAlterVol      $F6
000B100E B6B5                       	dc.b	nF4, nE4
000B1010 E60A                       	smpsFMAlterVol      $0A
000B1012 06                         	dc.b	$06
000B1013 E6F6                       	smpsFMAlterVol      $F6
000B1015 B1                         	dc.b	nC4
000B1016 E60A                       	smpsFMAlterVol      $0A
000B1018 06                         	dc.b	$06
000B1019 E6F6                       	smpsFMAlterVol      $F6
000B101B B3                         	dc.b	nD4
000B101C EF02                       	smpsSetvoice        $02
000B101E E918                       	smpsAlterPitch      $18
000B1020 F800 00                    	smpsCall            Tribute_Call04
000B1023 EF01                       	smpsSetvoice        $01
000B1025 E9E8                       	smpsAlterPitch      $E8
000B1027 F800 00                    	smpsCall            Tribute_Call04
000B102A B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B1032 E60A                       	smpsFMAlterVol      $0A
000B1034 06                         	dc.b	$06
000B1035 E6F6                       	smpsFMAlterVol      $F6
000B1037 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B103B E60A                       	smpsFMAlterVol      $0A
000B103D 0680                       	dc.b	$06, nRst
000B103F E6F6                       	smpsFMAlterVol      $F6
000B1041 B8                         	dc.b	nG4
000B1042 E60A                       	smpsFMAlterVol      $0A
000B1044 0680                       	dc.b	$06, nRst
000B1046 E6F6                       	smpsFMAlterVol      $F6
000B1048 B6B5                       	dc.b	nF4, nE4
000B104A E60A                       	smpsFMAlterVol      $0A
000B104C 06                         	dc.b	$06
000B104D E6F6                       	smpsFMAlterVol      $F6
000B104F B1                         	dc.b	nC4
000B1050 E60A                       	smpsFMAlterVol      $0A
000B1052 06                         	dc.b	$06
000B1053 E6F6                       	smpsFMAlterVol      $F6
000B1055 B3                         	dc.b	nD4
000B1056 EF02                       	smpsSetvoice        $02
000B1058 E918                       	smpsAlterPitch      $18
000B105A F800 00                    	smpsCall            Tribute_Call04
000B105D EF01                       	smpsSetvoice        $01
000B105F E9E8                       	smpsAlterPitch      $E8
000B1061 F800 00                    	smpsCall            Tribute_Call04
000B1064 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B106C                            
000B106C                            Tribute_Loop04:
000B106C 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B1070 E60A                       	smpsFMAlterVol      $0A
000B1072 06                         	dc.b	$06
000B1073 E6F6                       	smpsFMAlterVol      $F6
000B1075 B50C                       	dc.b	nE4, $0C
000B1077 E60A                       	smpsFMAlterVol      $0A
000B1079 06                         	dc.b	$06
000B107A E6F6                       	smpsFMAlterVol      $F6
000B107C 06                         	dc.b	$06
000B107D E60A                       	smpsFMAlterVol      $0A
000B107F 06                         	dc.b	$06
000B1080 E6F6                       	smpsFMAlterVol      $F6
000B1082 06                         	dc.b	$06
000B1083 E60A                       	smpsFMAlterVol      $0A
000B1085 06                         	dc.b	$06
000B1086 E6F6                       	smpsFMAlterVol      $F6
000B1088 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B108B F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B1090 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B1094 E60A                       	smpsFMAlterVol      $0A
000B1096 06                         	dc.b	$06
000B1097 E6F6                       	smpsFMAlterVol      $F6
000B1099 B50C                       	dc.b	nE4, $0C
000B109B E60A                       	smpsFMAlterVol      $0A
000B109D 06                         	dc.b	$06
000B109E E6F6                       	smpsFMAlterVol      $F6
000B10A0 06                         	dc.b	$06
000B10A1 E60A                       	smpsFMAlterVol      $0A
000B10A3 06                         	dc.b	$06
000B10A4 E6F6                       	smpsFMAlterVol      $F6
000B10A6 06                         	dc.b	$06
000B10A7 E60A                       	smpsFMAlterVol      $0A
000B10A9 06                         	dc.b	$06
000B10AA E6F6                       	smpsFMAlterVol      $F6
000B10AC B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B10B2 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B10B7 B51E                       	dc.b	nE4, $1E
000B10B9 E60A                       	smpsFMAlterVol      $0A
000B10BB 06                         	dc.b	$06
000B10BC E6F6                       	smpsFMAlterVol      $F6
000B10BE B62A                       	dc.b	nF4, $2A
000B10C0 E60A                       	smpsFMAlterVol      $0A
000B10C2 06                         	dc.b	$06
000B10C3 E6F6                       	smpsFMAlterVol      $F6
000B10C5 B52A                       	dc.b	nE4, $2A
000B10C7 E60A                       	smpsFMAlterVol      $0A
000B10C9 06                         	dc.b	$06
000B10CA E6F6                       	smpsFMAlterVol      $F6
000B10CC B52A                       	dc.b	nE4, $2A
000B10CE E60A                       	smpsFMAlterVol      $0A
000B10D0 06                         	dc.b	$06
000B10D1 E6F6                       	smpsFMAlterVol      $F6
000B10D3 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B10D7 E60A                       	smpsFMAlterVol      $0A
000B10D9 06                         	dc.b	$06
000B10DA E6F6                       	smpsFMAlterVol      $F6
000B10DC B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B10E0 F800 00                    	smpsCall            Tribute_Call03
000B10E3 F2                         	smpsStop
000B10E4                            
000B10E4                            Tribute_Call04:
000B10E4 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B10EA E60A                       	smpsFMAlterVol      $0A
000B10EC 0680                       	dc.b	$06, nRst
000B10EE E6F6                       	smpsFMAlterVol      $F6
000B10F0 B8                         	dc.b	nG4
000B10F1 E60A                       	smpsFMAlterVol      $0A
000B10F3 0680                       	dc.b	$06, nRst
000B10F5 E6F6                       	smpsFMAlterVol      $F6
000B10F7 B6B5                       	dc.b	nF4, nE4
000B10F9 E60A                       	smpsFMAlterVol      $0A
000B10FB 06                         	dc.b	$06
000B10FC E6F6                       	smpsFMAlterVol      $F6
000B10FE B1                         	dc.b	nC4
000B10FF E60A                       	smpsFMAlterVol      $0A
000B1101 06                         	dc.b	$06
000B1102 E6F6                       	smpsFMAlterVol      $F6
000B1104 B3                         	dc.b	nD4
000B1105 E3                         	smpsReturn
000B1106                            
000B1106                            Tribute_Call03:
000B1106 E918                       	smpsAlterPitch      $18
000B1108 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B1111 E60A                       	smpsFMAlterVol      $0A
000B1113 06                         	dc.b	$06
000B1114 E6F6                       	smpsFMAlterVol      $F6
000B1116 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B111D E60A                       	smpsFMAlterVol      $0A
000B111F 06                         	dc.b	$06
000B1120 E6F6                       	smpsFMAlterVol      $F6
000B1122 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B1129 E60A                       	smpsFMAlterVol      $0A
000B112B 06                         	dc.b	$06
000B112C E6F6                       	smpsFMAlterVol      $F6
000B112E E9E8                       	smpsAlterPitch      $E8
000B1130 E3                         	smpsReturn
000B1131                            
000B1131                            ; FM3 Data
000B1131                            Tribute_FM3:
000B1131 EF01                       	smpsSetvoice        $01
000B1133 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B1137 E60A                       	smpsFMAlterVol      $0A
000B1139 0680                       	dc.b	$06, nRst
000B113B E6F6                       	smpsFMAlterVol      $F6
000B113D B3                         	dc.b	nD4
000B113E E60A                       	smpsFMAlterVol      $0A
000B1140 0680                       	dc.b	$06, nRst
000B1142 E6F6                       	smpsFMAlterVol      $F6
000B1144 B1B1                       	dc.b	nC4, nC4
000B1146 E60A                       	smpsFMAlterVol      $0A
000B1148 06                         	dc.b	$06
000B1149 E6F6                       	smpsFMAlterVol      $F6
000B114B AE                         	dc.b	nA3
000B114C E60A                       	smpsFMAlterVol      $0A
000B114E 06                         	dc.b	$06
000B114F E6F6                       	smpsFMAlterVol      $F6
000B1151 B0                         	dc.b	nB3
000B1152 EF02                       	smpsSetvoice        $02
000B1154 E918                       	smpsAlterPitch      $18
000B1156 E080                       	smpsPan             panLeft, $00
000B1158 F800 00                    	smpsCall            Tribute_Call02
000B115B EF01                       	smpsSetvoice        $01
000B115D E9E8                       	smpsAlterPitch      $E8
000B115F E0C0                       	smpsPan             panCenter, $00
000B1161 F800 00                    	smpsCall            Tribute_Call02
000B1164 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B116C E60A                       	smpsFMAlterVol      $0A
000B116E 06                         	dc.b	$06
000B116F E6F6                       	smpsFMAlterVol      $F6
000B1171 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B1175 E60A                       	smpsFMAlterVol      $0A
000B1177 0680                       	dc.b	$06, nRst
000B1179 E6F6                       	smpsFMAlterVol      $F6
000B117B B3                         	dc.b	nD4
000B117C E60A                       	smpsFMAlterVol      $0A
000B117E 0680                       	dc.b	$06, nRst
000B1180 E6F6                       	smpsFMAlterVol      $F6
000B1182 B1B1                       	dc.b	nC4, nC4
000B1184 E60A                       	smpsFMAlterVol      $0A
000B1186 06                         	dc.b	$06
000B1187 E6F6                       	smpsFMAlterVol      $F6
000B1189 AE                         	dc.b	nA3
000B118A E60A                       	smpsFMAlterVol      $0A
000B118C 06                         	dc.b	$06
000B118D E6F6                       	smpsFMAlterVol      $F6
000B118F B0                         	dc.b	nB3
000B1190 EF02                       	smpsSetvoice        $02
000B1192 E918                       	smpsAlterPitch      $18
000B1194 E080                       	smpsPan             panLeft, $00
000B1196 F800 00                    	smpsCall            Tribute_Call02
000B1199 EF01                       	smpsSetvoice        $01
000B119B E9E8                       	smpsAlterPitch      $E8
000B119D E0C0                       	smpsPan             panCenter, $00
000B119F F800 00                    	smpsCall            Tribute_Call02
000B11A2 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B11AA                            
000B11AA                            Tribute_Loop03:
000B11AA 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B11AE E60A                       	smpsFMAlterVol      $0A
000B11B0 06                         	dc.b	$06
000B11B1 E6F6                       	smpsFMAlterVol      $F6
000B11B3 0C                         	dc.b	$0C
000B11B4 E60A                       	smpsFMAlterVol      $0A
000B11B6 06                         	dc.b	$06
000B11B7 E6F6                       	smpsFMAlterVol      $F6
000B11B9 06                         	dc.b	$06
000B11BA E60A                       	smpsFMAlterVol      $0A
000B11BC 06                         	dc.b	$06
000B11BD E6F6                       	smpsFMAlterVol      $F6
000B11BF 06                         	dc.b	$06
000B11C0 E60A                       	smpsFMAlterVol      $0A
000B11C2 06                         	dc.b	$06
000B11C3 E6F6                       	smpsFMAlterVol      $F6
000B11C5 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B11C8 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B11CD 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B11D1 E60A                       	smpsFMAlterVol      $0A
000B11D3 06                         	dc.b	$06
000B11D4 E6F6                       	smpsFMAlterVol      $F6
000B11D6 0C                         	dc.b	$0C
000B11D7 E60A                       	smpsFMAlterVol      $0A
000B11D9 06                         	dc.b	$06
000B11DA E6F6                       	smpsFMAlterVol      $F6
000B11DC 06                         	dc.b	$06
000B11DD E60A                       	smpsFMAlterVol      $0A
000B11DF 06                         	dc.b	$06
000B11E0 E6F6                       	smpsFMAlterVol      $F6
000B11E2 06                         	dc.b	$06
000B11E3 E60A                       	smpsFMAlterVol      $0A
000B11E5 06                         	dc.b	$06
000B11E6 E6F6                       	smpsFMAlterVol      $F6
000B11E8 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B11EF E60A                       	smpsFMAlterVol      $0A
000B11F1 06                         	dc.b	$06
000B11F2 E6F6                       	smpsFMAlterVol      $F6
000B11F4 0C                         	dc.b	$0C
000B11F5 E60A                       	smpsFMAlterVol      $0A
000B11F7 06                         	dc.b	$06
000B11F8 E6F6                       	smpsFMAlterVol      $F6
000B11FA 06                         	dc.b	$06
000B11FB E60A                       	smpsFMAlterVol      $0A
000B11FD 06                         	dc.b	$06
000B11FE E6F6                       	smpsFMAlterVol      $F6
000B1200 06                         	dc.b	$06
000B1201 E60A                       	smpsFMAlterVol      $0A
000B1203 06                         	dc.b	$06
000B1204 E6F6                       	smpsFMAlterVol      $F6
000B1206 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B120C F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B1211 B11E                       	dc.b	nC4, $1E
000B1213 E60A                       	smpsFMAlterVol      $0A
000B1215 06                         	dc.b	$06
000B1216 E6F6                       	smpsFMAlterVol      $F6
000B1218 B12A                       	dc.b	nC4, $2A
000B121A E60A                       	smpsFMAlterVol      $0A
000B121C 06                         	dc.b	$06
000B121D E6F6                       	smpsFMAlterVol      $F6
000B121F B12A                       	dc.b	nC4, $2A
000B1221 E60A                       	smpsFMAlterVol      $0A
000B1223 06                         	dc.b	$06
000B1224 E6F6                       	smpsFMAlterVol      $F6
000B1226 B12A                       	dc.b	nC4, $2A
000B1228 E60A                       	smpsFMAlterVol      $0A
000B122A 06                         	dc.b	$06
000B122B E6F6                       	smpsFMAlterVol      $F6
000B122D B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B1231 E60A                       	smpsFMAlterVol      $0A
000B1233 06                         	dc.b	$06
000B1234 E6F6                       	smpsFMAlterVol      $F6
000B1236 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B123A E9F4                       	smpsAlterPitch      $F4
000B123C F8FE C8                    	smpsCall            Tribute_Call03
000B123F E90C                       	smpsAlterPitch      $0C
000B1241 F2                         	smpsStop
000B1242                            
000B1242                            Tribute_Call02:
000B1242 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B1248 E60A                       	smpsFMAlterVol      $0A
000B124A 0680                       	dc.b	$06, nRst
000B124C E6F6                       	smpsFMAlterVol      $F6
000B124E B3                         	dc.b	nD4
000B124F E60A                       	smpsFMAlterVol      $0A
000B1251 0680                       	dc.b	$06, nRst
000B1253 E6F6                       	smpsFMAlterVol      $F6
000B1255 B1B1                       	dc.b	nC4, nC4
000B1257 E60A                       	smpsFMAlterVol      $0A
000B1259 06                         	dc.b	$06
000B125A E6F6                       	smpsFMAlterVol      $F6
000B125C AE                         	dc.b	nA3
000B125D E60A                       	smpsFMAlterVol      $0A
000B125F 06                         	dc.b	$06
000B1260 E6F6                       	smpsFMAlterVol      $F6
000B1262 B0                         	dc.b	nB3
000B1263 E3                         	smpsReturn
000B1264                            
000B1264                            ; FM4 Data
000B1264                            Tribute_FM4:
000B1264 EF01                       	smpsSetvoice        $01
000B1266 AC12 06                    	dc.b	nG3, $12, $06
000B1269 E60A                       	smpsFMAlterVol      $0A
000B126B 0680                       	dc.b	$06, nRst
000B126D E6F6                       	smpsFMAlterVol      $F6
000B126F AF                         	dc.b	nBb3
000B1270 E60A                       	smpsFMAlterVol      $0A
000B1272 0680                       	dc.b	$06, nRst
000B1274 E6F6                       	smpsFMAlterVol      $F6
000B1276 ACAC                       	dc.b	nG3, nG3
000B1278 E60A                       	smpsFMAlterVol      $0A
000B127A 06                         	dc.b	$06
000B127B E6F6                       	smpsFMAlterVol      $F6
000B127D AA                         	dc.b	nF3
000B127E E60A                       	smpsFMAlterVol      $0A
000B1280 06                         	dc.b	$06
000B1281 E6F6                       	smpsFMAlterVol      $F6
000B1283 AC                         	dc.b	nG3
000B1284 EF02                       	smpsSetvoice        $02
000B1286 E918                       	smpsAlterPitch      $18
000B1288 E040                       	smpsPan             panRight, $00
000B128A F800 00                    	smpsCall            Tribute_Call01
000B128D EF01                       	smpsSetvoice        $01
000B128F E9E8                       	smpsAlterPitch      $E8
000B1291 E0C0                       	smpsPan             panCenter, $00
000B1293 F800 00                    	smpsCall            Tribute_Call01
000B1296 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B129E E60A                       	smpsFMAlterVol      $0A
000B12A0 06                         	dc.b	$06
000B12A1 E6F6                       	smpsFMAlterVol      $F6
000B12A3 AC12 06                    	dc.b	nG3, $12, $06
000B12A6 E60A                       	smpsFMAlterVol      $0A
000B12A8 0680                       	dc.b	$06, nRst
000B12AA E6F6                       	smpsFMAlterVol      $F6
000B12AC AF                         	dc.b	nBb3
000B12AD E60A                       	smpsFMAlterVol      $0A
000B12AF 0680                       	dc.b	$06, nRst
000B12B1 E6F6                       	smpsFMAlterVol      $F6
000B12B3 ACAC                       	dc.b	nG3, nG3
000B12B5 E60A                       	smpsFMAlterVol      $0A
000B12B7 06                         	dc.b	$06
000B12B8 E6F6                       	smpsFMAlterVol      $F6
000B12BA AA                         	dc.b	nF3
000B12BB E60A                       	smpsFMAlterVol      $0A
000B12BD 06                         	dc.b	$06
000B12BE E6F6                       	smpsFMAlterVol      $F6
000B12C0 AC                         	dc.b	nG3
000B12C1 EF02                       	smpsSetvoice        $02
000B12C3 E918                       	smpsAlterPitch      $18
000B12C5 E040                       	smpsPan             panRight, $00
000B12C7 F800 00                    	smpsCall            Tribute_Call01
000B12CA EF01                       	smpsSetvoice        $01
000B12CC E9E8                       	smpsAlterPitch      $E8
000B12CE E0C0                       	smpsPan             panCenter, $00
000B12D0 F800 00                    	smpsCall            Tribute_Call01
000B12D3 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B12DB                            
000B12DB                            Tribute_Loop02:
000B12DB 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B12DF E60A                       	smpsFMAlterVol      $0A
000B12E1 06                         	dc.b	$06
000B12E2 E6F6                       	smpsFMAlterVol      $F6
000B12E4 0C                         	dc.b	$0C
000B12E5 E60A                       	smpsFMAlterVol      $0A
000B12E7 06                         	dc.b	$06
000B12E8 E6F6                       	smpsFMAlterVol      $F6
000B12EA 06                         	dc.b	$06
000B12EB E60A                       	smpsFMAlterVol      $0A
000B12ED 06                         	dc.b	$06
000B12EE E6F6                       	smpsFMAlterVol      $F6
000B12F0 06                         	dc.b	$06
000B12F1 E60A                       	smpsFMAlterVol      $0A
000B12F3 06                         	dc.b	$06
000B12F4 E6F6                       	smpsFMAlterVol      $F6
000B12F6 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B12F9 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B12FE 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B1302 E60A                       	smpsFMAlterVol      $0A
000B1304 06                         	dc.b	$06
000B1305 E6F6                       	smpsFMAlterVol      $F6
000B1307 0C                         	dc.b	$0C
000B1308 E60A                       	smpsFMAlterVol      $0A
000B130A 06                         	dc.b	$06
000B130B E6F6                       	smpsFMAlterVol      $F6
000B130D 06                         	dc.b	$06
000B130E E60A                       	smpsFMAlterVol      $0A
000B1310 06                         	dc.b	$06
000B1311 E6F6                       	smpsFMAlterVol      $F6
000B1313 06                         	dc.b	$06
000B1314 E60A                       	smpsFMAlterVol      $0A
000B1316 06                         	dc.b	$06
000B1317 E6F6                       	smpsFMAlterVol      $F6
000B1319 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B1320 E60A                       	smpsFMAlterVol      $0A
000B1322 06                         	dc.b	$06
000B1323 E6F6                       	smpsFMAlterVol      $F6
000B1325 0C                         	dc.b	$0C
000B1326 E60A                       	smpsFMAlterVol      $0A
000B1328 06                         	dc.b	$06
000B1329 E6F6                       	smpsFMAlterVol      $F6
000B132B 06                         	dc.b	$06
000B132C E60A                       	smpsFMAlterVol      $0A
000B132E 06                         	dc.b	$06
000B132F E6F6                       	smpsFMAlterVol      $F6
000B1331 06                         	dc.b	$06
000B1332 E60A                       	smpsFMAlterVol      $0A
000B1334 06                         	dc.b	$06
000B1335 E6F6                       	smpsFMAlterVol      $F6
000B1337 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B133D F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B1342 AC1E                       	dc.b	nG3, $1E
000B1344 E60A                       	smpsFMAlterVol      $0A
000B1346 06                         	dc.b	$06
000B1347 E6F6                       	smpsFMAlterVol      $F6
000B1349 AD2A                       	dc.b	nAb3, $2A
000B134B E60A                       	smpsFMAlterVol      $0A
000B134D 06                         	dc.b	$06
000B134E E6F6                       	smpsFMAlterVol      $F6
000B1350 AC2A                       	dc.b	nG3, $2A
000B1352 E60A                       	smpsFMAlterVol      $0A
000B1354 06                         	dc.b	$06
000B1355 E6F6                       	smpsFMAlterVol      $F6
000B1357 AE2A                       	dc.b	nA3, $2A
000B1359 E60A                       	smpsFMAlterVol      $0A
000B135B 06                         	dc.b	$06
000B135C E6F6                       	smpsFMAlterVol      $F6
000B135E AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B1362 E60A                       	smpsFMAlterVol      $0A
000B1364 06                         	dc.b	$06
000B1365 E6F6                       	smpsFMAlterVol      $F6
000B1367 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B136D F2                         	smpsStop
000B136E                            
000B136E                            Tribute_Call01:
000B136E AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B1374 E60A                       	smpsFMAlterVol      $0A
000B1376 0680                       	dc.b	$06, nRst
000B1378 E6F6                       	smpsFMAlterVol      $F6
000B137A AF                         	dc.b	nBb3
000B137B E60A                       	smpsFMAlterVol      $0A
000B137D 0680                       	dc.b	$06, nRst
000B137F E6F6                       	smpsFMAlterVol      $F6
000B1381 ACAC                       	dc.b	nG3, nG3
000B1383 E60A                       	smpsFMAlterVol      $0A
000B1385 06                         	dc.b	$06
000B1386 E6F6                       	smpsFMAlterVol      $F6
000B1388 AA                         	dc.b	nF3
000B1389 E60A                       	smpsFMAlterVol      $0A
000B138B 06                         	dc.b	$06
000B138C E6F6                       	smpsFMAlterVol      $F6
000B138E AC                         	dc.b	nG3
000B138F E3                         	smpsReturn
000B1390                            
000B1390                            ; FM5 Data
000B1390                            Tribute_FM5:
000B1390 EF02                       	smpsSetvoice        $02
000B1392                            
000B1392                            Tribute_Jump00:
000B1392 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B139E 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B13AA 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B13B6 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B13C2                            
000B13C2                            Tribute_Loop01:
000B13C2 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B13CE BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B13DA 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B13E6 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B13F2 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B13FE 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B140A B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B140E F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B1413 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B141F 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B142B C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B1437 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B1441 E918                       	smpsAlterPitch      $18
000B1443 F8FB 98                    	smpsCall            Tribute_Call00
000B1446 E9E8                       	smpsAlterPitch      $E8
000B1448 F2                         	smpsStop
000B1449                            
000B1449                            ; FM6 Data
000B1449                            Tribute_FM6:
000B1449 EF02                       	smpsSetvoice        $02
000B144B E040                       	smpsPan             panRight, $00
000B1452 E104                       	smpsAlterNote       $04
000B1454 8006                       	dc.b	nRst, $06
000B1456 F6FF 3A                    	smpsJump            Tribute_Jump00
000B1459                            
000B1459                            ; PSG1 Data
000B1459                            Tribute_PSG1:
000B1459 F505                       	smpsPSGvoice        sTone_09
000B1460 A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B146C E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B147B ECFD                       	smpsPSGAlterVol     $FD
000B147D                            
000B147D                            Tribute_Jump01:
000B147D F505                       	smpsPSGvoice        sTone_09
000B147F F800 00                    	smpsCall            Tribute_Call07
000B1482 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B148E B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B1497 F800 00                    	smpsCall            Tribute_Call07
000B149A E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B14A6 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B14B2 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B14BE B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B14CA 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B14D6 E918                       	smpsAlterPitch      $18
000B14D8 F8FB 03                    	smpsCall            Tribute_Call00
000B14DB E9E8                       	smpsAlterPitch      $E8
000B14DD F2                         	smpsStop
000B14DE                            
000B14DE                            Tribute_Call07:
000B14DE B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B14EA 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B14F6 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B1502 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B150E 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B151A 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B1526 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B152F E3                         	smpsReturn
000B1530                            
000B1530                            ; PSG2 Data
000B1530                            Tribute_PSG2:
000B1530 F505                       	smpsPSGvoice        sTone_09
000B1537 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B1543 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B154D ECFF                       	smpsPSGAlterVol     $FF
000B1554 8006                       	dc.b	nRst, $06
000B1556 F6FF 25                    	smpsJump            Tribute_Jump01
000B1559                            
000B1559                            ; PSG3 Data
000B1559                            Tribute_PSG3:
000B1559 F3E7                       	smpsPSGform         $E7
000B155B F502                       	smpsPSGvoice        sTone_02
000B155D AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B1564 F501                       	smpsPSGvoice        sTone_05
000B1566 0680 18                    	dc.b	$06, nRst, $18
000B1569 F502                       	smpsPSGvoice        sTone_02
000B156B AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B156F F501                       	smpsPSGvoice        sTone_05
000B1571 06                         	dc.b	$06
000B1572 F502                       	smpsPSGvoice        sTone_02
000B1574 06                         	dc.b	$06
000B1575 F501                       	smpsPSGvoice        sTone_05
000B1577 06                         	dc.b	$06
000B1578 F502                       	smpsPSGvoice        sTone_02
000B157A 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B1582 F501                       	smpsPSGvoice        sTone_05
000B1584 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B1589 F502                       	smpsPSGvoice        sTone_02
000B158B 06                         	dc.b	$06
000B158C F501                       	smpsPSGvoice        sTone_05
000B158E 06                         	dc.b	$06
000B158F F502                       	smpsPSGvoice        sTone_02
000B1591 06                         	dc.b	$06
000B1592 F501                       	smpsPSGvoice        sTone_05
000B1594 06                         	dc.b	$06
000B1595 F502                       	smpsPSGvoice        sTone_02
000B1597 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B159B F501                       	smpsPSGvoice        sTone_05
000B159D 06                         	dc.b	$06
000B159E F502                       	smpsPSGvoice        sTone_02
000B15A0 06                         	dc.b	$06
000B15A1 F501                       	smpsPSGvoice        sTone_05
000B15A3 06                         	dc.b	$06
000B15A4 F502                       	smpsPSGvoice        sTone_02
000B15A6 0C                         	dc.b	$0C
000B15A7 F502                       	smpsPSGvoice        sTone_02
000B15A9 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B15B0 F501                       	smpsPSGvoice        sTone_05
000B15B2 06                         	dc.b	$06
000B15B3 F502                       	smpsPSGvoice        sTone_02
000B15B5 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B15BB F501                       	smpsPSGvoice        sTone_05
000B15BD 06                         	dc.b	$06
000B15BE F502                       	smpsPSGvoice        sTone_02
000B15C0 06                         	dc.b	$06
000B15C1 F501                       	smpsPSGvoice        sTone_05
000B15C3 06                         	dc.b	$06
000B15C4 F502                       	smpsPSGvoice        sTone_02
000B15C6 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B15CE F501                       	smpsPSGvoice        sTone_05
000B15D0 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B15D4                            
000B15D4                            Tribute_Loop06:
000B15D4 F800 00                    	smpsCall            Tribute_Call06
000B15D7 800C                       	dc.b	nRst, $0C
000B15D9 F502                       	smpsPSGvoice        sTone_02
000B15DB AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B15E3 F800 00                    	smpsCall            Tribute_Call06
000B15E6 800C                       	dc.b	nRst, $0C
000B15E8 F502                       	smpsPSGvoice        sTone_02
000B15EA AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B15F0 F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B15F5 E718                       	dc.b	smpsNoAttack, $18
000B15F7 F502                       	smpsPSGvoice        sTone_02
000B15F9 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B1605 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B1606 F2                         	smpsStop
000B1607                            
000B1607                            Tribute_Call06:
000B1607 F502                       	smpsPSGvoice        sTone_02
000B1609 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B1611 F501                       	smpsPSGvoice        sTone_05
000B1613 06                         	dc.b	$06
000B1614 F502                       	smpsPSGvoice        sTone_02
000B1616 06                         	dc.b	$06
000B1617 F501                       	smpsPSGvoice        sTone_05
000B1619 0680 0C                    	dc.b	$06, nRst, $0C
000B161C F502                       	smpsPSGvoice        sTone_02
000B161E AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B1627 F502                       	smpsPSGvoice        sTone_02
000B1629 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B1631 F501                       	smpsPSGvoice        sTone_05
000B1633 06                         	dc.b	$06
000B1634 F502                       	smpsPSGvoice        sTone_02
000B1636 06                         	dc.b	$06
000B1637 F501                       	smpsPSGvoice        sTone_05
000B1639 06                         	dc.b	$06
000B163A E3                         	smpsReturn
000B163B                            
000B163B                            ; DAC Data
000B163B                            Tribute_DAC:
000B163B 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B1645 E690                       	smpsFMAlterVol      $90
000B1647 8A0C                       	dc.b	dLowTimpani, $0C
000B1649 E670                       	smpsFMAlterVol      $70
000B164B 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B1653 E6F9                       	smpsFMAlterVol      $F9
000B1655 88                         	dc.b	dHiTimpani
000B1656 E607                       	smpsFMAlterVol      $07
000B1658 8982                       	dc.b	dMidTimpani, dSnare
000B165A E690                       	smpsFMAlterVol      $90
000B165C 8A                         	dc.b	dLowTimpani
000B165D E670                       	smpsFMAlterVol      $70
000B165F 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B166B 06                         	dc.b	$06
000B166C E690                       	smpsFMAlterVol      $90
000B166E 8A0C                       	dc.b	dLowTimpani, $0C
000B1670 E670                       	smpsFMAlterVol      $70
000B1672 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B167C                            
000B167C                            Tribute_Loop00:
000B167C 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B1688 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B168E E6F9                       	smpsFMAlterVol      $F9
000B1690 88                         	dc.b	dHiTimpani
000B1691 E607                       	smpsFMAlterVol      $07
000B1693 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B169F 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B16A6 E607                       	smpsFMAlterVol      $07
000B16A8 88                         	dc.b	dHiTimpani
000B16A9 E6F9                       	smpsFMAlterVol      $F9
000B16AB 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B16B1 F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B16B6 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B16BA E6F9                       	smpsFMAlterVol      $F9
000B16BC 8804                       	dc.b	dHiTimpani, $04
000B16BE E607                       	smpsFMAlterVol      $07
000B16C0 89                         	dc.b	dMidTimpani
000B16C1 E690                       	smpsFMAlterVol      $90
000B16C3 8A                         	dc.b	dLowTimpani
000B16C4 E670                       	smpsFMAlterVol      $70
000B16C6 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B16D2 6081 36                    	dc.b	$60, dKick, $36
000B16D5 E6F9                       	smpsFMAlterVol      $F9
000B16D7 8806                       	dc.b	dHiTimpani, $06
000B16D9 E607                       	smpsFMAlterVol      $07
000B16DB 89                         	dc.b	dMidTimpani
000B16DC E690                       	smpsFMAlterVol      $90
000B16DE 8A                         	dc.b	dLowTimpani
000B16DF E670                       	smpsFMAlterVol      $70
000B16E1 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B16ED 8182                       	dc.b	dKick, dSnare
000B16EF E6F9                       	smpsFMAlterVol      $F9
000B16F1 88                         	dc.b	dHiTimpani
000B16F2 E607                       	smpsFMAlterVol      $07
000B16F4 8982                       	dc.b	dMidTimpani, dSnare
000B16F6 E690                       	smpsFMAlterVol      $90
000B16F8 8A                         	dc.b	dLowTimpani
000B16F9 E670                       	smpsFMAlterVol      $70
000B16FB 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B1702 E690                       	smpsFMAlterVol      $90
000B1704 8A                         	dc.b	dLowTimpani
000B1705 E670                       	smpsFMAlterVol      $70
000B1707 8281                       	dc.b	dSnare, dKick
000B1709 F2                         	smpsStop
000B170A                            
000B170A                            Tribute_Voices:
000B170A                            ;	Voice $00
000B170A                            ;	$3B
000B170A                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B170A                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B170A                            	smpsVcAlgorithm     $03
000B170A                            	smpsVcFeedback      $07
000B170A                            	smpsVcUnusedBits    $00
000B170A                            	smpsVcDetune        $00, $00, $03, $05
000B170A                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B170A                            	smpsVcRateScale     $02, $01, $02, $03
000B170A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B170A                            	smpsVcAmpMod        $00, $00, $00, $00
000B170A                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B170A                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B170A                            	smpsVcDecayLevel    $05, $03, $07, $05
000B170A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1723                            
000B1723                            ;	Voice $01
000B1723                            ;	$3D
000B1723                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B1723                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B1723                            	smpsVcAlgorithm     $05
000B1723                            	smpsVcFeedback      $07
000B1723                            	smpsVcUnusedBits    $00
000B1723                            	smpsVcDetune        $00, $00, $00, $05
000B1723                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B1723                            	smpsVcRateScale     $00, $00, $00, $02
000B1723                            	smpsVcAttackRate    $19, $19, $19, $14
000B1723                            	smpsVcAmpMod        $00, $00, $00, $00
000B1723                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B1723                            	smpsVcDecayRate2    $04, $04, $04, $07
000B1723                            	smpsVcDecayLevel    $01, $01, $01, $03
000B1723                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B173C                            
000B173C                            ;	Voice $02
000B173C                            ;	$1F
000B173C                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B173C                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B173C                            	smpsVcAlgorithm     $07
000B173C                            	smpsVcFeedback      $03
000B173C                            	smpsVcUnusedBits    $00
000B173C                            	smpsVcDetune        $01, $00, $03, $02
000B173C                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B173C                            	smpsVcRateScale     $02, $02, $02, $02
000B173C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B173C                            	smpsVcAmpMod        $00, $00, $00, $00
000B173C                            	smpsVcDecayRate1    $07, $09, $07, $06
000B173C                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B173C                            	smpsVcDecayLevel    $09, $09, $09, $09
000B173C                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B1755                            
000B1755                            
000B1756 00                         		even		
000B1756                            ; ---------------------------------------------------------------------------
000B1756                            ; Sound	effect pointers
000B1756                            ; ---------------------------------------------------------------------------
000B1756                            SoundIndex:
000B1756 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B175A 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B175E 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B1762 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B1766 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B176A 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B176E 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B1772 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B1776 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B177A 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B177E 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B1782 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B1786 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B178A 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B178E 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B1792 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B1796 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B179A 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B179E 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B17A2 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B17A6 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B17AA 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B17AE 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B17B2 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B17B6 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B17BA 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B17BE 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B17C2 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B17C6 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B17CA 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B17CE 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B17D2 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B17D6 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B17DA 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B17DE 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B17E2 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B17E6 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B17EA 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B17EE 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B17F2 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B17F6 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B17FA 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B17FE 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B1802 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B1806 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B180A 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B180E 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B1812 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B1816                            ptr_sndend
000B1816                            ; ---------------------------------------------------------------------------
000B1816                            ; Special sound effect pointers
000B1816                            ; ---------------------------------------------------------------------------
000B1816                            SpecSoundIndex:
000B1816 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B181A 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B181E 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B1822 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B1826 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B182A 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B182E 0000 0000                  ptr_sndD6:	dc.l SoundD6
000B1832                            ptr_specend
000B1832                            SoundA0:	include	"sound/sfx/Jump.asm"
000B1832                            SndA0_Jump_Header:
000B1832                            	smpsHeaderStartSong 1
000B1834 01                         	smpsHeaderTempoSFX  $01
000B1835 01                         	smpsHeaderChanSFX   $01
000B1836                            
000B183C                            
000B183C                            ; PSG2 Data
000B183C                            SndA0_Jump_PSG2:
000B183C F500                       	smpsPSGvoice        $00
000B183E 9E05                       	dc.b	nF2, $05
000B1845 A315                       	dc.b	nBb2, $15
000B1847 F2                         	smpsStop
000B1848                            
000B1848                            ; Song seems to not use any FM voices
000B1848                            SndA0_Jump_Voices:
000B1848                            SndA0_Jump_Voices:
000B1848                            		even
000B1848                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B1872                            		even
000B1872                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B1872                            SndDF_Header:
000B1872                            	smpsHeaderStartSong 3
000B1874 01                         	smpsHeaderTempoSFX  $01
000B1875 01                         	smpsHeaderChanSFX   $01
000B1876                            
000B187C                            
000B187C                            ; FM5 Data
000B187C                            SndDF_FM5:
000B187C EF00                       	smpsSetvoice        $00
000B187E                            
000B187E                            SndDF_Loop00:
000B187E F800 00                    	smpsCall            SndDF_Call00
000B1881 E905                       	smpsAlterPitch $05
000B1883 E608                       	smpsFMAlterVol      $08
000B1885 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B188A E9EC                       	smpsAlterPitch $EC
000B188C E6E0                       	smpsFMAlterVol      $E0
000B188E F2                         	smpsStop
000B188F                            
000B188F                            SndDF_Call00:
000B188F 9902                       	dc.b	nC2, $02
000B1891 E901                       	smpsAlterPitch $01
000B1893 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B1898 E9F6                       	smpsAlterPitch $F6
000B189A E3                         	smpsReturn
000B189B                            
000B189B                            SndDF_Voices:
000B189B                            ;	Voice $00
000B189B                            ;	$07
000B189B                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B189B                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B189B                            	smpsVcAlgorithm     $07
000B189B                            	smpsVcFeedback      $00
000B189B                            	smpsVcUnusedBits    $00
000B189B                            	smpsVcDetune        $00, $00, $00, $00
000B189B                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B189B                            	smpsVcRateScale     $00, $00, $00, $00
000B189B                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B189B                            	smpsVcAmpMod        $00, $00, $00, $00
000B189B                            	smpsVcDecayRate1    $00, $00, $00, $00
000B189B                            	smpsVcDecayRate2    $00, $00, $00, $00
000B189B                            	smpsVcDecayLevel    $01, $01, $01, $01
000B189B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B18B4                            		even
000B18B4                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B18E6                            		even
000B18E6                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B192A 00                         		even
000B192A                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B192A                            SndD2_Header:
000B192A                            	smpsHeaderStartSong 3
000B192C 01                         	smpsHeaderTempoSFX  $01
000B192D 01                         	smpsHeaderChanSFX   $01
000B192E                            
000B1934                            
000B1934                            ; FM4 Data
000B1934                            SndD2_FM4:
000B1934 EF00                       	smpsSetvoice        $00
000B193B C645                       	dc.b	nA5, $45
000B193D F2                         	smpsStop
000B193E                            
000B193E                            SndD2_Voices:
000B193E                            ;	Voice $00
000B193E                            ;	$04
000B193E                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B193E                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B193E                            	smpsVcAlgorithm     $04
000B193E                            	smpsVcFeedback      $00
000B193E                            	smpsVcUnusedBits    $00
000B193E                            	smpsVcDetune        $04, $00, $00, $02
000B193E                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B193E                            	smpsVcRateScale     $00, $00, $00, $00
000B193E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B193E                            	smpsVcAmpMod        $00, $00, $00, $00
000B193E                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B193E                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B193E                            	smpsVcDecayLevel    $00, $01, $00, $01
000B193E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1958 00                         		even
000B1958                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B1988                            		even
000B1988                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B19B8                            		even
000B19B8                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B19EC                            		even
000B19EC                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B19FE                            		even
000B19FE                            SoundAA:	include	"sound/sfx/Splash.asm"
000B19FE                            SndA2_Header:
000B19FE                            	smpsHeaderStartSong 3
000B1A00 01                         	smpsHeaderTempoSFX  $01
000B1A01 02                         	smpsHeaderChanSFX   $02
000B1A02                            
000B1A0E                            
000B1A0E                            ; FM3 Data
000B1A0E                            SndA2_FM3:
000B1A0E EF00                       	smpsSetvoice        $00
000B1A15 8106                       	dc.b	nC0, $06
000B1A17                            
000B1A17                            SndA2_Loop00:
000B1A17 810E                       	dc.b	nC0, $0E
000B1A19 E60E                       	smpsAlterVol      $0E
000B1A1B F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B1A20 F2                         	smpsStop
000B1A21                            
000B1A21                            ; FM4 Data
000B1A21                            SndA2_FM4:
000B1A21 EF01                       	smpsSetvoice        $01
000B1A23 A606 14                    	dc.b	nCs3, $06, $14
000B1A26 F2                         	smpsStop
000B1A27                            
000B1A27                            SndA2_Voices:
000B1A27                            ;	Voice $00
000B1A27                            ;	$F9
000B1A27                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B1A27                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B1A27                            	smpsVcAlgorithm     $01
000B1A27                            	smpsVcFeedback      $07
000B1A27                            	smpsVcUnusedBits    $03
000B1A27                            	smpsVcDetune        $03, $01, $03, $02
000B1A27                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B1A27                            	smpsVcRateScale     $00, $00, $00, $00
000B1A27                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B1A27                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A27                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1A27                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1A27                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1A27                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A40                            
000B1A40                            ;	Voice $01
000B1A40                            ;	$00
000B1A40                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B1A40                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B1A40                            	smpsVcAlgorithm     $00
000B1A40                            	smpsVcFeedback      $00
000B1A40                            	smpsVcUnusedBits    $00
000B1A40                            	smpsVcDetune        $00, $00, $00, $00
000B1A40                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B1A40                            	smpsVcRateScale     $00, $00, $03, $03
000B1A40                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B1A40                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A40                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B1A40                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B1A40                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1A40                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A5A 00                         		even
000B1A5A                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B1A5A                            Sound_3E_Header:
000B1A5A                            	smpsHeaderStartSong 3
000B1A5C 01                         	smpsHeaderTempoSFX  $01
000B1A5D 01                         	smpsHeaderChanSFX   $01
000B1A5E                            
000B1A64                            
000B1A64                            ; FM5 Data
000B1A64                            Sound_3E_3F_40_41_FM5:
000B1A64 EF00                       	smpsSetvoice        $00
000B1A66 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B1A6B F2                         	smpsStop
000B1A6C                            
000B1A6C                            Sound_3E_Voices:
000B1A6C                            ;	Voice $00
000B1A6C                            ;	$0C
000B1A6C                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B1A6C                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B1A6C                            	smpsVcAlgorithm     $04
000B1A6C                            	smpsVcFeedback      $01
000B1A6C                            	smpsVcUnusedBits    $00
000B1A6C                            	smpsVcDetune        $03, $03, $02, $00
000B1A6C                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1A6C                            	smpsVcRateScale     $00, $00, $00, $00
000B1A6C                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B1A6C                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A6C                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B1A6C                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B1A6C                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B1A6C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A85                            
000B1A85                            
000B1A86 00                         		even
000B1A86                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B1ABA                            		even
000B1ABA                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B1AF0                            		even
000B1AF0                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B1AF0                            Sound_70_Header:
000B1AF0                            	smpsHeaderStartSong 3
000B1AF2 01                         	smpsHeaderTempoSFX  $01
000B1AF3 02                         	smpsHeaderChanSFX   $02
000B1AF4                            
000B1B00                            
000B1B00                            ; FM5 Data
000B1B00                            Sound_70_FM5:
000B1B00 EF00                       	smpsSetvoice        $00
000B1B02 8001                       	dc.b	nRst, $01
000B1B09 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B1B0D F2                         	smpsStop
000B1B0E                            
000B1B0E                            ; PSG3 Data
000B1B0E                            Sound_70_PSG3:
000B1B0E F500                       	smpsPSGvoice        sTone_0D
000B1B10 800B                       	dc.b	nRst, $0B
000B1B12 F3E7                       	smpsPSGform         $E7
000B1B14 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B1B17                            
000B1B17                            Sound_70_Loop00:
000B1B17 02                         	dc.b	$02
000B1B18 EC01                       	smpsPSGAlterVol     $01
000B1B1A E7                         	dc.b	smpsNoAttack
000B1B1B F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B1B20 F2                         	smpsStop
000B1B21                            
000B1B21                            Sound_70_Voices:
000B1B21                            ;	Voice $00
000B1B21                            ;	$FA
000B1B21                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B1B21                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B1B21                            	smpsVcAlgorithm     $02
000B1B21                            	smpsVcFeedback      $07
000B1B21                            	smpsVcUnusedBits    $03
000B1B21                            	smpsVcDetune        $00, $00, $00, $00
000B1B21                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B1B21                            	smpsVcRateScale     $00, $00, $00, $00
000B1B21                            	smpsVcAttackRate    $13, $0F, $11, $12
000B1B21                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B21                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1B21                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B1B21                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1B21                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B3A                            
000B1B3A                            
000B1B3A                            		even
000B1B3A                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B1B68                            		even
000B1B68                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B1B9A                            		even
000B1B9A                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B1BC6                            		even
000B1BC6                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B1C16                            		even
000B1C16                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B1C60                            		even
000B1C60                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B1CBC                            		even
000B1CBC                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B1CEA                            		even
000B1CEA                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B1CEA                            SpikesSFX_Header:
000B1CEA                            	smpsHeaderStartSong 3
000B1CEC 01                         	smpsHeaderTempoSFX  $01
000B1CED 02                         	smpsHeaderChanSFX   $02
000B1CEE                            
000B1CFA                            
000B1CFA                            ; FM6 Data
000B1CFA                            SndB7_FM3:
000B1CFA EF01                       	smpsSetvoice        $01
000B1D01 B105                       	dc.b	nC4, $05
000B1D03 F1                         	smpsModOn
000B1D04 E10A                       	smpsAlterNote       $0A
000B1D06 E601                       	smpsAlterVol        $01
000B1D08 F2                         	smpsStop
000B1D09                            
000B1D09                            ; FM5 Data
000B1D09                            SndB7_FM5:
000B1D09 8005                       	dc.b	nRst, $05			 
000B1D0B EF00                       	smpsSetvoice        $00
000B1D0D DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B1D13 F2                         	smpsStop
000B1D14                            
000B1D14                            SndB7_Voices:
000B1D14                            ;	Voice $00
000B1D14                            ;	$34
000B1D14                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B1D14                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B1D14                            	smpsVcAlgorithm     $04
000B1D14                            	smpsVcFeedback      $06
000B1D14                            	smpsVcUnusedBits    $00
000B1D14                            	smpsVcDetune        $0D, $00, $00, $00
000B1D14                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B1D14                            	smpsVcRateScale     $00, $00, $00, $00
000B1D14                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1D14                            	smpsVcAmpMod        $00, $00, $00, $00
000B1D14                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B1D14                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B1D14                            	smpsVcDecayLevel    $03, $05, $01, $03
000B1D14                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B1D2D                            
000B1D2D                            ;	Voice $01
000B1D2D                            ;	$FA
000B1D2D                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B1D2D                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B1D2D                            	smpsVcAlgorithm     $02
000B1D2D                            	smpsVcFeedback      $07
000B1D2D                            	smpsVcUnusedBits    $03
000B1D2D                            	smpsVcDetune        $03, $01, $03, $02
000B1D2D                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B1D2D                            	smpsVcRateScale     $00, $00, $00, $00
000B1D2D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1D2D                            	smpsVcAmpMod        $00, $00, $00, $00
000B1D2D                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1D2D                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1D2D                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1D2D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1D46                            		even
000B1D46                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B1D82                            		even
000B1D82                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B1D82                            SndBD_Header:
000B1D82                            	smpsHeaderStartSong 3
000B1D84 01                         	smpsHeaderTempoSFX  $01
000B1D85 01                         	smpsHeaderChanSFX   $01
000B1D86                            
000B1D8C                            
000B1D8C                            ; FM6 Data
000B1D8C                            SndBD_FM3:
000B1D8C EF00                       	smpsSetvoice        $00
000B1D8E                            
000B1D8E                            SndBD_Loop00:
000B1D8E C009                       	dc.b	nEb5, $09
000B1D90 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B1D95 F2                         	smpsStop
000B1D96                            
000B1D96                            SndBD_Voices:
000B1D96                            ;	Voice $00
000B1D96                            ;	$02
000B1D96                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B1D96                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B1D96                            	smpsVcAlgorithm     $02
000B1D96                            	smpsVcFeedback      $00
000B1D96                            	smpsVcUnusedBits    $00
000B1D96                            	smpsVcDetune        $00, $02, $05, $00
000B1D96                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B1D96                            	smpsVcRateScale     $00, $00, $00, $00
000B1D96                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B1D96                            	smpsVcAmpMod        $00, $00, $00, $00
000B1D96                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B1D96                            	smpsVcDecayRate2    $00, $00, $00, $01
000B1D96                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1D96                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1DB0 00                         		even
000B1DB0                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B1DB0                            Sound_59_Header:
000B1DB0                            	smpsHeaderStartSong 3
000B1DB2 01                         	smpsHeaderTempoSFX  $01
000B1DB3 04                         	smpsHeaderChanSFX   $04
000B1DB4                            
000B1DCC                            
000B1DCC                            ; FM3 Data
000B1DCC                            Sound_59_FM3:
000B1DCC E040                       	smpsPan             panRight, $00
000B1DCE 8002                       	dc.b	nRst, $02
000B1DD0 F600 00                    	smpsJump            Sound_59_FM4
000B1DD3                            
000B1DD3                            ; FM5 Data
000B1DD3                            Sound_59_FM5:
000B1DD3 E080                       	smpsPan             panLeft, $00
000B1DD5 8001                       	dc.b	nRst, $01
000B1DD7                            
000B1DD7                            ; FM4 Data
000B1DD7                            Sound_59_FM4:
000B1DD7 EF00                       	smpsSetvoice        $00
000B1DDE 8110                       	dc.b	nC0, $10
000B1DE0 F2                         	smpsStop
000B1DE1                            
000B1DE1                            ; PSG3 Data
000B1DE1                            Sound_59_PSG3:
000B1DE6 F3E7                       	smpsPSGform         $E7
000B1DE8                            
000B1DE8                            Sound_59_Loop00:
000B1DE8 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B1DEB EC03                       	smpsPSGAlterVol     $03
000B1DED F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B1DF2 F2                         	smpsStop
000B1DF3                            
000B1DF3                            Sound_59_Voices:
000B1DF3                            ;	Voice $00
000B1DF3                            ;	$F9
000B1DF3                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B1DF3                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B1DF3                            	smpsVcAlgorithm     $01
000B1DF3                            	smpsVcFeedback      $07
000B1DF3                            	smpsVcUnusedBits    $03
000B1DF3                            	smpsVcDetune        $03, $01, $03, $02
000B1DF3                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B1DF3                            	smpsVcRateScale     $00, $00, $00, $00
000B1DF3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1DF3                            	smpsVcAmpMod        $00, $00, $00, $00
000B1DF3                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1DF3                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1DF3                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1DF3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1E0C                            
000B1E0C                            
000B1E0C                            		even
000B1E0C                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B1E34                            		even
000B1E34                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B1E60                            		even
000B1E60                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B1E60                            Sound_B6_Header:
000B1E60                            	smpsHeaderStartSong 3
000B1E62 01                         	smpsHeaderTempoSFX  $01
000B1E63 02                         	smpsHeaderChanSFX   $02
000B1E64                            
000B1E70                            
000B1E70                            ; FM5 Data
000B1E70                            Sound_B6_FM5:
000B1E70 EF00                       	smpsSetvoice        $00
000B1E77 CD0F                       	dc.b	nE6, $0F
000B1E79 F2                         	smpsStop
000B1E7A                            
000B1E7A                            ; PSG3 Data
000B1E7A                            Sound_B6_PSG3:
000B1E7A F507                       	smpsPSGvoice        sTone_1D
000B1E7C 8006                       	dc.b	nRst, $06
000B1E83 F3E7                       	smpsPSGform         $E7
000B1E85 CD4F                       	dc.b	nE6, $4F
000B1E87 F2                         	smpsStop
000B1E88                            
000B1E88                            Sound_B6_Voices:
000B1E88                            ;	Voice $00
000B1E88                            ;	$3D
000B1E88                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B1E88                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B1E88                            	smpsVcAlgorithm     $05
000B1E88                            	smpsVcFeedback      $07
000B1E88                            	smpsVcUnusedBits    $00
000B1E88                            	smpsVcDetune        $00, $00, $00, $00
000B1E88                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B1E88                            	smpsVcRateScale     $00, $00, $00, $00
000B1E88                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1E88                            	smpsVcAmpMod        $00, $00, $00, $00
000B1E88                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B1E88                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1E88                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1E88                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1EA1                            
000B1EA1                            
000B1EA2 00                         		even
000B1EA2                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B1EF6                            		even
000B1EF6                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B1F30                            		even
000B1F30                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B1FA2                            		even
000B1FA2                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B1FD0                            		even
000B1FD0                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B200A                            		even
000B200A                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B200A                            SndC1_Header:
000B200A                            	smpsHeaderStartSong 3
000B200C 01                         	smpsHeaderTempoSFX  $01
000B200D 01                         	smpsHeaderChanSFX   $01
000B200E                            
000B2014                            
000B2014                            ; FM4 Data
000B2014                            SndC1_FM4:
000B2014 EF00                       	smpsSetvoice        $00
000B2016 D506 40                    	dc.b	nC7, $06, $40
000B2019 F2                         	smpsStop
000B201A                            
000B201A                            SndC1_Voices:
000B201A                            ;	Voice $00
000B201A                            ;	$38
000B201A                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B201A                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B201A                            	smpsVcAlgorithm     $00
000B201A                            	smpsVcFeedback      $07
000B201A                            	smpsVcUnusedBits    $00
000B201A                            	smpsVcDetune        $00, $00, $00, $00
000B201A                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B201A                            	smpsVcRateScale     $00, $00, $00, $00
000B201A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B201A                            	smpsVcAmpMod        $00, $00, $00, $00
000B201A                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B201A                            	smpsVcDecayRate2    $00, $00, $00, $00
000B201A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B201A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2034 00                         		even
000B2034                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B20AE                            		even
000B20AE                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B20D6                            		even
000B20D6                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B20D6                            Sound_B0_Header:
000B20D6                            	smpsHeaderStartSong 3
000B20D8 01                         	smpsHeaderTempoSFX  $01
000B20D9 03                         	smpsHeaderChanSFX   $03
000B20DA                            
000B20EC                            
000B20EC                            ; FM5 Data
000B20EC                            Sound_B0_FM5:
000B20EC EF00                       	smpsSetvoice        $00
000B20EE 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B20F4 F2                         	smpsStop
000B20F5                            
000B20F5                            ; FM4 Data
000B20F5                            Sound_B0_FM4:
000B20F5 EF01                       	smpsSetvoice        $01
000B20F7 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B20FB F2                         	smpsStop
000B20FC                            
000B20FC                            ; FM3 Data
000B20FC                            Sound_B0_FM3:
000B20FC EF02                       	smpsSetvoice        $02
000B20FE 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B2105 F2                         	smpsStop
000B2106                            
000B2106                            Sound_B0_Voices:
000B2106                            ;	Voice $00
000B2106                            ;	$3B
000B2106                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B2106                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B2106                            	smpsVcAlgorithm     $03
000B2106                            	smpsVcFeedback      $07
000B2106                            	smpsVcUnusedBits    $00
000B2106                            	smpsVcDetune        $00, $00, $00, $00
000B2106                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B2106                            	smpsVcRateScale     $02, $00, $00, $00
000B2106                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B2106                            	smpsVcAmpMod        $00, $00, $00, $00
000B2106                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B2106                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2106                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2106                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B211F                            
000B211F                            ;	Voice $01
000B211F                            ;	$04
000B211F                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B211F                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B211F                            	smpsVcAlgorithm     $04
000B211F                            	smpsVcFeedback      $00
000B211F                            	smpsVcUnusedBits    $00
000B211F                            	smpsVcDetune        $04, $07, $07, $03
000B211F                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B211F                            	smpsVcRateScale     $00, $00, $00, $00
000B211F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B211F                            	smpsVcAmpMod        $00, $00, $00, $00
000B211F                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B211F                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B211F                            	smpsVcDecayLevel    $00, $01, $00, $01
000B211F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2138                            
000B2138                            ;	Voice $02
000B2138                            ;	$3C
000B2138                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B2138                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B2138                            	smpsVcAlgorithm     $04
000B2138                            	smpsVcFeedback      $07
000B2138                            	smpsVcUnusedBits    $00
000B2138                            	smpsVcDetune        $00, $00, $00, $00
000B2138                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B2138                            	smpsVcRateScale     $00, $00, $00, $00
000B2138                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B2138                            	smpsVcAmpMod        $00, $00, $00, $00
000B2138                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B2138                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B2138                            	smpsVcDecayLevel    $02, $09, $09, $01
000B2138                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2151                            
000B2151                            
000B2152 00                         		even
000B2152                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B2194                            		even
000B2194                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B21C2                            		even
000B21C2                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B21D4                            		even
000B21D4                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B2202                            		even
000B2202                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B2230                            		even
000B2230                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B227C                            		even
000B227C                            SoundCC:	include	"sound/sfx/Spring.asm"
000B227C                            Spring_Header:
000B227C                            	smpsHeaderStartSong 1
000B227E 01                         	smpsHeaderTempoSFX  $01
000B227F 01                         	smpsHeaderChanSFX   $01
000B2280                            
000B2286                            
000B2286                            ; FM6 Data
000B2286                            Spring_FM6:
000B2286 EF00                       	smpsSetvoice        $00
000B2288 8001                       	dc.b	nRst, $01
000B228F B006                       	dc.b	nB3, $06
000B2291 F4                         	smpsModOff
000B2292 EF01                       	smpsSetvoice        $01
000B2294                            
000B2294                            Spring_Loop00:
000B2294 BD02                       	dc.b	nC5, $02
000B2296 E601                       	smpsAlterVol      $01
000B2298 E7                         	dc.b	smpsNoAttack
000B2299 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B229E F2                         	smpsStop
000B229F                            
000B229F                            Spring_Voices:
000B229F                            ;	Voice $00
000B229F                            ;	$20
000B229F                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B229F                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B229F                            	smpsVcAlgorithm     $00
000B229F                            	smpsVcFeedback      $04
000B229F                            	smpsVcUnusedBits    $00
000B229F                            	smpsVcDetune        $03, $03, $03, $03
000B229F                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B229F                            	smpsVcRateScale     $02, $02, $03, $03
000B229F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B229F                            	smpsVcAmpMod        $00, $00, $00, $00
000B229F                            	smpsVcDecayRate1    $06, $09, $06, $07
000B229F                            	smpsVcDecayRate2    $08, $06, $06, $07
000B229F                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B229F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B22B8                            
000B22B8                            ;	Voice $01
000B22B8                            ;	$20
000B22B8                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B22B8                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B22B8                            	smpsVcAlgorithm     $00
000B22B8                            	smpsVcFeedback      $04
000B22B8                            	smpsVcUnusedBits    $00
000B22B8                            	smpsVcDetune        $03, $03, $03, $03
000B22B8                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B22B8                            	smpsVcRateScale     $02, $02, $02, $02
000B22B8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B22B8                            	smpsVcAmpMod        $00, $00, $00, $00
000B22B8                            	smpsVcDecayRate1    $06, $09, $06, $07
000B22B8                            	smpsVcDecayRate2    $08, $06, $06, $07
000B22B8                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B22B8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B22D2 00                         		even
000B22D2                            SoundCD:	include	"sound/sfx/Beep.asm"
000B22D2                            Snd99_Header:
000B22D2                            	smpsHeaderStartSong 3
000B22D4 01                         	smpsHeaderTempoSFX  $01
000B22D5 01                         	smpsHeaderChanSFX   $01
000B22D6                            
000B22DC                            
000B22DC                            ; FM4 Data
000B22DC                            Snd99_FM4:
000B22DC EF00                       	smpsSetvoice        $00
000B22DE B502                       	dc.b	nE4, $02
000B22E0 F2                         	smpsStop
000B22E1                            
000B22E1                            Snd99_Voices:
000B22E1                            ;	Voice $00
000B22E1                            ;	$07
000B22E1                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B22E1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B22E1                            	smpsVcAlgorithm     $07
000B22E1                            	smpsVcFeedback      $00
000B22E1                            	smpsVcUnusedBits    $00
000B22E1                            	smpsVcDetune        $00, $00, $00, $00
000B22E1                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B22E1                            	smpsVcRateScale     $00, $00, $00, $00
000B22E1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B22E1                            	smpsVcAmpMod        $00, $00, $00, $00
000B22E1                            	smpsVcDecayRate1    $00, $00, $00, $00
000B22E1                            	smpsVcDecayRate2    $00, $00, $00, $00
000B22E1                            	smpsVcDecayLevel    $00, $00, $00, $00
000B22E1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B22FA                            		even
000B22FA                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B2328                            		even
000B2328                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B2328                            SignpostCD_Header:
000B2328                            	smpsHeaderStartSong 3
000B232A 01                         	smpsHeaderTempoSFX  $01
000B232B 02                         	smpsHeaderChanSFX   $02
000B232C                            
000B2338                            
000B2338                            ; FM5 Data
000B2338                            Snd9D_FM5:
000B2338 8004                       	dc.b	nRst, $04
000B233A                            
000B233A                            ; FM4 Data
000B233A                            Snd9D_FM4:
000B233A EF00                       	smpsSetvoice        $00
000B233C                            
000B233C                            Snd9D_Loop00:
000B233C B405                       	dc.b	nEb4, $05
000B233E E604                       	smpsFMAlterVol      $04
000B2340 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B2345 F2                         	smpsStop
000B2346                            
000B2346                            Snd9D_Voices:
000B2346                            ;	Voice $00
000B2346                            ;	$F4
000B2346                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B2346                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B2346                            	smpsVcAlgorithm     $04
000B2346                            	smpsVcFeedback      $06
000B2346                            	smpsVcUnusedBits    $03
000B2346                            	smpsVcDetune        $00, $00, $00, $00
000B2346                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B2346                            	smpsVcRateScale     $00, $00, $00, $00
000B2346                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2346                            	smpsVcAmpMod        $00, $00, $00, $00
000B2346                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B2346                            	smpsVcDecayRate2    $08, $05, $00, $00
000B2346                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B2346                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2360 00                         		even
000B2360                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B239A                            		even
000B239A                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B239A                            Sound_41_Header:
000B239A                            	smpsHeaderStartSong 3
000B239C 01                         	smpsHeaderTempoSFX  $01
000B239D 01                         	smpsHeaderChanSFX   $01
000B239E                            
000B23A4                            	
000B23A4                            Sound41_FM5:
000B23A4 EF00                       	smpsSetvoice        $00
000B23A6 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B23AB F2                         	smpsStop
000B23AC                            
000B23AC                            Sound_41_Voices:
000B23AC                            ;	Voice $00
000B23AC                            ;	$36
000B23AC                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B23AC                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B23AC                            	smpsVcAlgorithm     $06
000B23AC                            	smpsVcFeedback      $06
000B23AC                            	smpsVcUnusedBits    $00
000B23AC                            	smpsVcDetune        $00, $00, $01, $00
000B23AC                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B23AC                            	smpsVcRateScale     $00, $00, $00, $00
000B23AC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B23AC                            	smpsVcAmpMod        $00, $00, $00, $00
000B23AC                            	smpsVcDecayRate1    $00, $00, $00, $00
000B23AC                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B23AC                            	smpsVcDecayLevel    $00, $00, $00, $00
000B23AC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B23C5                            
000B23C5                            
000B23C6 00                         		even
000B23C6                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B23C6                            Snd9B_Header:
000B23C6                            	smpsHeaderStartSong 3
000B23C8 01                         	smpsHeaderTempoSFX  $01
000B23C9 01                         	smpsHeaderChanSFX   $01
000B23CA                            
000B23D0                            
000B23D0                            ; FM5 Data
000B23D0                            Snd9B_FM5:
000B23D0 EF00                       	smpsSetvoice        $00
000B23D2 8001                       	dc.b	nRst, $01
000B23D9 CA25                       	dc.b	nCs6, $25
000B23DB F4                         	smpsModOff
000B23DC                            
000B23DC                            Snd9B_Loop00:
000B23DC E7                         	dc.b	smpsNoAttack
000B23DD E601                       	smpsFMAlterVol      $01
000B23DF D102                       	dc.b	nAb6, $02
000B23E1 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B23E6 F2                         	smpsStop
000B23E7                            
000B23E7                            Snd9B_Voices:
000B23E7                            ;	Voice $00
000B23E7                            ;	$3C
000B23E7                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B23E7                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B23E7                            	smpsVcAlgorithm     $04
000B23E7                            	smpsVcFeedback      $07
000B23E7                            	smpsVcUnusedBits    $00
000B23E7                            	smpsVcDetune        $00, $00, $04, $00
000B23E7                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B23E7                            	smpsVcRateScale     $00, $00, $00, $00
000B23E7                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B23E7                            	smpsVcAmpMod        $00, $00, $00, $00
000B23E7                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B23E7                            	smpsVcDecayRate2    $00, $00, $00, $00
000B23E7                            	smpsVcDecayLevel    $00, $00, $00, $00
000B23E7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2400                            
000B2400                            
000B2400                            		even		
000B2400                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B2498                            		even
000B2498                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B24A4                            		even				
000B24A4                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B24E0                            		even		
000B24E0                            SoundD6:	include	"sound/sfx/Transform.asm"
000B24E0                            Sound_9F_Header:
000B24E0                            	smpsHeaderStartSong 3
000B24E2 01                         	smpsHeaderTempoSFX  $01
000B24E3 02                         	smpsHeaderChanSFX   $02
000B24E4                            
000B24F0                            
000B24F0                            ; FM4 Data
000B24F0                            Sound_9F_FM4:
000B24F0 8003                       	dc.b	nRst, $03
000B24F2                            
000B24F2                            ; FM5 Data
000B24F2                            Sound_9F_FM5:
000B24F2 EF00                       	smpsSetvoice        $00
000B24F9 AE13                       	dc.b	nA3, $13
000B24FB E614                       	smpsFMAlterVol      $14
000B24FD F700 05FF F1               	smpsLoop            $00, $05, Sound_9F_FM5
000B2502 F2                         	smpsStop
000B2503                            
000B2503                            Sound_9F_Voices:
000B2503                            ;	Voice $00
000B2503                            ;	$7A
000B2503                            ;	$1F, $1F, $04, $1F, 	$10, $1F, $18, $10, 	$10, $16, $0C, $00
000B2503                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$42, $16, $11, $80
000B2503                            	smpsVcAlgorithm     $02
000B2503                            	smpsVcFeedback      $07
000B2503                            	smpsVcUnusedBits    $01
000B2503                            	smpsVcDetune        $01, $00, $01, $01
000B2503                            	smpsVcCoarseFreq    $0F, $04, $0F, $0F
000B2503                            	smpsVcRateScale     $00, $00, $00, $00
000B2503                            	smpsVcAttackRate    $10, $18, $1F, $10
000B2503                            	smpsVcAmpMod        $00, $00, $00, $00
000B2503                            	smpsVcDecayRate1    $00, $0C, $16, $10
000B2503                            	smpsVcDecayRate2    $02, $02, $02, $02
000B2503                            	smpsVcDecayLevel    $03, $0F, $02, $02
000B2503                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B251C                            
000B251C                            
000B251C                            		even			
000B251C                            		; Don't let Sega sample cross $8000-byte boundary
000B251C                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 235A                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 2604                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3C98                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 22B4                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3C98                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE20                            ; ============================================================================
000BEE20                            		even
000BEE20                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF320                            		even
000BF320                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4D0                            		even
000BF4D0                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA3A                            		even
000BFA3A                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFABA                            		even
000BFABA                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE6                            		even
000BFAE6                            		even
000BFAE6                            
000BFAE6                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D36A                                        even
0013D36A                            
0013D36A                            Art_Dust:	incbin	artunc\spindust.bin
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ==============================================================
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            ; Debugging modules
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            
0013ECAA                               include   "ErrorHandler.asm"
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handling and debugging modules
0013ECAA                            ; 2016-2017, Vladikcomper
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler functions and calls
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler control flags
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Screen appearence flags
0013ECAA =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECAA =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECAA =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECAA                            
0013ECAA                            ; Advanced execution flags
0013ECAA                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECAA =00000020                  _eh_return		equ	$20
0013ECAA =00000040                  _eh_enter_console	equ	$40
0013ECAA =00000080                  _eh_align_offset	equ	$80
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Errors vector table
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Default screen configuration
0013ECAA =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            BusError:
0013ECAA 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECBC                            
0013ECBC                            AddressError:
0013ECBC 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECD2                            
0013ECD2                            IllegalInstr:
0013ECD2 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEE                            
0013ECEE                            ZeroDivide:
0013ECEE 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED02                            
0013ED02                            ChkInstr:
0013ED02 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED1A                            
0013ED1A                            TrapvInstr:
0013ED1A 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED34                            
0013ED34                            PrivilegeViol:
0013ED34 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED50                            
0013ED50                            Trace:
0013ED50 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5E                            
0013ED5E                            Line1010Emu:
0013ED5E 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED76                            
0013ED76                            Line1111Emu:
0013ED76 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8E                            
0013ED8E                            ErrorExcept:
0013ED8E 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Import error handler global functions
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA6                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA6                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA6                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA6                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA6                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA6                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA6                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA6                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA6                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA6                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA6                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA6                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA6                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA6                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Error handler external functions (compiled only when used)
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Include error handler binary module
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler:
0013EDA6                            	incbin	ErrorHandler.bin
001407BA                            
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; WARNING!
001407BA                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407BA                            ;	Symbol data should be appended here after ROM is compiled
001407BA                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407BA                            ;	to resolve symbol names.
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; ---------------------------------------------------------------
001407BA                            
001407BA                            ; end of 'ROM'
001407BA                            		even
001407BA                            EndOfRom:
001407BA                            
001407BA                            
