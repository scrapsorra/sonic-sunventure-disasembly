00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_TimeOver:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_VHang1:		equ $77
00000000 =00000078                  fr_VHang2:		equ $78
00000000 =00000079                  fr_Blank:		equ $79
00000000 =0000007A                  fr_Blank2:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS
00000000 =FFFFFF94                  v_watersplashposlamp:    equ $FFFFFF94    ; TIS
00000000 =FFFFFF96                  v_tagwaterlamp:	equ $FFFFFF96    ; TIS
00000000                              
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000 =FFFFF5D8                  Super_Sonic_palette =        $FFFFF5D8
00000000 =FFFFF5DC                  Palette_frame =        $FFFFF5DC
00000000 =FFFFF5DE                  Palette_timer =        $FFFFF5DE
00000000 =FFFFF5CD                  Palette_Frame_Count =        $FFFFF5CD
00000000 =FFFFF670                  Super_Sonic_frame_count =    $FFFFF670
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000                            
00000000 =FFFFFFB1                  v_flashtimer:	equ $FFFFFFB1
00000000 =FFFFFFB1                  v_flashtimer:	equ $FFFFFFB1
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            enableSRAM:		macro
00000000                            	move.b  #1,($A130F1).l
00000000                            	endm
00000000                            
00000000                            disableSRAM:	macro
00000000                            	move.b  #0,($A130F1).l
00000000                            	endm
00000000                            	endm
00000000                            	include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000001                  SRAMEnabled:	equ 1	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 5241 F820                  		dc.b 'RA',$F8,$20    ; SRAM type
000001B4 0020 0000                  		dc.l $200000		; SRAM start
000001B8 0020 01FF                  		dc.l $2001FF		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600 0000                  		bne.w	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000218 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021C 4C9D 00E0                  		movem.w	(a5)+,d5-d7
00000220 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000224 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000228 0200 000F                  		andi.b	#$F,d0
0000022C 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022E 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000236                            
00000236                            SkipSecurity:
00000236 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000238 7000                       		moveq	#0,d0	; clear d0
0000023A 2C40                       		movea.l	d0,a6	; clear a6
0000023C 4E66                       		move.l	a6,usp	; set usp to $0
0000023E                            
0000023E 7217                       		moveq	#$17,d1
00000240                            VDPInitLoop:
00000240 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000242 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000244 DA47                       		add.w	d7,d5		; next register
00000246 51C9 FFF8                  		dbf	d1,VDPInitLoop
0000024A                            		
0000024A 289D                       		move.l	(a5)+,(a4)
0000024C 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024E 3287                       		move.w	d7,(a1)		; stop the Z80
00000250 3487                       		move.w	d7,(a2)		; reset	the Z80
00000252                            
00000252                            WaitForZ80:
00000252 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000254 66FC                       		bne.s	WaitForZ80	; if not, branch
00000256                            
00000256 7425                       		moveq	#$25,d2
00000258                            Z80InitLoop:
00000258 10DD                       		move.b	(a5)+,(a0)+
0000025A 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025E                            		
0000025E 3480                       		move.w	d0,(a2)
00000260 3280                       		move.w	d0,(a1)		; start	the Z80
00000262 3487                       		move.w	d7,(a2)		; reset	the Z80
00000264                            
00000264                            ClrRAMLoop:
00000264 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000266 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026C 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026E                            
0000026E 761F                       		moveq	#$1F,d3	; set repeat times
00000270                            ClrCRAMLoop:
00000270 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000272 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000276 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000278                            
00000278 7813                       		moveq	#$13,d4
0000027A                            ClrVSRAMLoop:
0000027A 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027C 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
00000280 7A03                       		moveq	#3,d5
00000282                            
00000282                            PSGInitLoop:
00000282 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000286 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
0000028A 3480                       		move.w	d0,(a2)
0000028C 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
00000290 46FC 2700                  		disable_ints
00000294                            
00000294                            InitSRAM: ; could have been done more cleanly
00000294 13FC 0001 00A1 30F1                enableSRAM
0000029C 41F9 0020 0001                     lea ($200001).l,a0
000002A2                            
000002A2 0148 00DD                          movep.l $DD(a0),d0 ; where the "FUCK" should be
000002A6 223C 4655 434B                     move.l  #"FUCK",d1
000002AC                            
000002AC B280                       		cmp.l   d0,d1 ; reset SRAM if there's no "FUCK"
000002AE 6700                               beq.s   @Continue
000002B0                            
000002B0 117C 0000 0001             		move.b 	#0, $1(a0) ; clear settings
000002B6 117C 0000 0003             		move.b 	#0, $3(a0)
000002BC                            
000002BC 243C 204F 5554                     move.l  #" OUT",d2 ; the rest of the string (lol)
000002C2 263C 5441 204D                     move.l  #"TA M",d3
000002C8 283C 5920 5352                     move.l  #"Y SR",d4
000002CE 2A3C 414D 2020                     move.l  #"AM  ",d5
000002D4                            
000002D4 03C8 00DD                          movep.l d1,$DD(a0) ; save the string
000002D8 05C8 00E5                          movep.l d2,$E5(a0)
000002DC 07C8 00ED                          movep.l d3,$ED(a0)
000002E0 09C8 00F5                          movep.l d4,$F5(a0)
000002E4 0BC8 00FD                          movep.l d5,$FD(a0)
000002E8                            
000002E8                            @Continue:
000002E8 13FC 0000 00A1 30F1                disableSRAM
000002F0                            
000002F0                            SkipSetup:
000002F0 6000                       		bra.s	GameProgram	; begin game
000002F2                            
000002F2                            ; ===========================================================================
000002F2 8000                       SetupValues:	dc.w $8000		; VDP register start number
000002F4 3FFF                       		dc.w $3FFF		; size of RAM/4
000002F6 0100                       		dc.w $100		; VDP register diff
000002F8                            
000002F8 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
000002FC 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
00000300 00A1 1200                  		dc.l z80_reset		; Z80 reset
00000304 00C0 0000                  		dc.l vdp_data_port	; VDP data
00000308 00C0 0004                  		dc.l vdp_control_port	; VDP control
0000030C                            
0000030C 04                         		dc.b 4			; VDP $80 - 8-colour mode
0000030D 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
0000030E 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
0000030F 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
00000310 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
00000311 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
00000312 00                         		dc.b 0			; VDP $86 - unused
00000313 00                         		dc.b 0			; VDP $87 - background colour
00000314 00                         		dc.b 0			; VDP $88 - unused
00000315 00                         		dc.b 0			; VDP $89 - unused
00000316 FF                         		dc.b 255		; VDP $8A - HBlank register
00000317 00                         		dc.b 0			; VDP $8B - full screen scroll
00000318 81                         		dc.b $81		; VDP $8C - 40 cell display
00000319 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
0000031A 00                         		dc.b 0			; VDP $8E - unused
0000031B 01                         		dc.b 1			; VDP $8F - VDP increment
0000031C 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
0000031D 00                         		dc.b 0			; VDP $91 - window h position
0000031E 00                         		dc.b 0			; VDP $92 - window v position
0000031F FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
00000321 0000                       		dc.w 0			; VDP $95/96 - DMA source
00000323 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
00000324 4000 0080                  		dc.l $40000080		; VRAM address 0
00000328                            
00000328 AF                         		dc.b $AF		; xor	a
00000329 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
0000032C 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
0000032F 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
00000332 F9                         		dc.b $F9		; ld	sp,hl
00000333 77                         		dc.b $77		; ld	(hl),a
00000334 EDB0                       		dc.b $ED, $B0		; ldir
00000336 DDE1                       		dc.b $DD, $E1		; pop	ix
00000338 FDE1                       		dc.b $FD, $E1		; pop	iy
0000033A ED47                       		dc.b $ED, $47		; ld	i,a
0000033C ED4F                       		dc.b $ED, $4F		; ld	r,a
0000033E D1                         		dc.b $D1		; pop	de
0000033F E1                         		dc.b $E1		; pop	hl
00000340 F1                         		dc.b $F1		; pop	af
00000341 08                         		dc.b $08		; ex	af,af'
00000342 D9                         		dc.b $D9		; exx
00000343 C1                         		dc.b $C1		; pop	bc
00000344 D1                         		dc.b $D1		; pop	de
00000345 E1                         		dc.b $E1		; pop	hl
00000346 F1                         		dc.b $F1		; pop	af
00000347 F9                         		dc.b $F9		; ld	sp,hl
00000348 F3                         		dc.b $F3		; di
00000349 ED56                       		dc.b $ED, $56		; im1
0000034B 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
0000034D E9                         		dc.b $E9		; jp	(hl)
0000034E                            
0000034E 8104                       		dc.w $8104		; VDP display mode
00000350 8F02                       		dc.w $8F02		; VDP increment
00000352 C000 0000                  		dc.l $C0000000		; CRAM write mode
00000356 4000 0010                  		dc.l $40000010		; VSRAM address 0
0000035A                            
0000035A 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
0000035E                            ; ===========================================================================
0000035E                            
0000035E                            GameProgram:
0000035E 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000364 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000036C 6700                       		beq.s	CheckSumCheck
0000036E 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000376 6700 0000                  		beq.w	GameInit	; if yes, branch
0000037A                            
0000037A                            CheckSumCheck:
0000037A 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000380 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000386 2011                       		move.l	(a1),d0
00000388 7200                       		moveq	#0,d1
0000038A                            
0000038A                            	@loop:
0000038A D258                       		add.w	(a0)+,d1
0000038C B088                       		cmp.l	a0,d0
0000038E 64FA                       		bhs.s	@loop
00000390 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000396 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
00000398 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000039C                            
0000039C                            	CheckSumOk:
0000039C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
000003A0 7E00                       		moveq	#0,d7
000003A2 3C3C 007F                  		move.w	#$7F,d6
000003A6                            	@clearRAM:
000003A6 2CC7                       		move.l	d7,(a6)+
000003A8 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
000003AC                            
000003AC 1039 00A1 0001             		move.b	(z80_version).l,d0
000003B2 0200 00C0                  		andi.b	#$C0,d0
000003B6 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
000003BA 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
000003C2                            
000003C2                            GameInit:
000003C2 4DF9 00FF 0000             		lea	($FF0000).l,a6
000003C8 7E00                       		moveq	#0,d7
000003CA 3C3C 3F7F                  		move.w	#$3F7F,d6
000003CE                            	@clearRAM:
000003CE 2CC7                       		move.l	d7,(a6)+
000003D0 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
000003D4 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
000003DA 6100 0000                  		bsr.w	VDPSetupGame
000003DE 6100 0000                  		bsr.w	SoundDriverLoad
000003E2 6100 0000                  		bsr.w	JoypadInit
000003E6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
000003EC                            
000003EC                            MainGameLoop:
000003EC 4EB9 0000 0000             		jsr		ReadJoypads
000003F2 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
000003F6 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
000003FA 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003FE 4E90                       		jsr		(a0)
00000400 60EA                       		bra.s	MainGameLoop	; loop indefinitely
00000402                            ; ===========================================================================
00000402                            ; ---------------------------------------------------------------------------
00000402                            ; Main game mode array
00000402                            ; ---------------------------------------------------------------------------
00000402                            
00000402                            GameModeArray:
00000402 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
00000406 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
0000040A 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
0000040E 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
00000412 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
00000416 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
0000041A 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
0000041E 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
00000422 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
00000426 4E75                       		rts	
00000428                            ; ===========================================================================
00000428                            
00000428                            CheckSumError:
00000428 6100 0000                  		bsr.w	VDPSetupGame
0000042C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00000436 7E3F                       		moveq	#$3F,d7
00000438                            
00000438                            	@fillred:
00000438 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
00000440 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
00000444                            
00000444                            	@endlessloop:
00000444 60FE                       		bra.s	@endlessloop
00000446                            ; ===========================================================================
00000446                            
00000446                            
00000446                            ; ===========================================================================
00000446                            
00000446                            loc_43A:
00000446 46FC 2700                  		disable_ints
0000044A 544F                       		addq.w	#2,sp
0000044C 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
00000450 544F                       		addq.w	#2,sp
00000452 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
00000458 6100 0000                  		bsr.w	ShowErrorMessage
0000045C 202F 0002                  		move.l	2(sp),d0
00000460 6100 0000                  		bsr.w	ShowErrorValue
00000464 2038 FC40                  		move.l	(v_spbuffer).w,d0
00000468 6100 0000                  		bsr.w	ShowErrorValue
0000046C 6000                       		bra.s	loc_478
0000046E                            ; ===========================================================================
0000046E                            
0000046E                            loc_462:
0000046E 46FC 2700                  		disable_ints
00000472 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
00000478 6100 0000                  		bsr.w	ShowErrorMessage
0000047C 202F 0002                  		move.l	2(sp),d0
00000480 6100 0000                  		bsr.w	ShowErrorValue
00000484                            
00000484                            loc_478:
00000484 6100 0000                  		bsr.w	ErrorWaitForC
00000488 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
0000048E 46FC 2300                  		enable_ints
00000492 4E73                       		rte	
00000494                            
00000494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000494                            
00000494                            
00000494                            ShowErrorMessage:
00000494 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000004A4 41F9 0000 0000             		lea	(Art_Text).l,a0
000004AA 323C 027F                  		move.w	#$27F,d1
000004AE                            	@loadgfx:
000004AE 3C98                       		move.w	(a0)+,(a6)
000004B0 51C9 FFFC                  		dbf	d1,@loadgfx
000004B4                            
000004B4 7000                       		moveq	#0,d0		; clear	d0
000004B6 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
000004BA 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004BE 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 7212                       		moveq	#$12,d1		; number of characters (minus 1)
000004CE                            
000004CE                            	@showchars:
000004CE 7000                       		moveq	#0,d0
000004D0 1018                       		move.b	(a0)+,d0
000004D2 0640 0790                  		addi.w	#$790,d0
000004D6 3C80                       		move.w	d0,(a6)
000004D8 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
000004DC 4E75                       		rts	
000004DE                            ; End of function ShowErrorMessage
000004DE                            
000004DE                            ; ===========================================================================
000004DE 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
000004E2 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
000004E6 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
000004EA 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
000004EE 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
000004F2 0000                       		dc.w @line1111-ErrorText
000004F4 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
00000507 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
0000051A 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
0000052D 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
00000540 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
00000553 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000566 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
00000579 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000058C 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
0000059F 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
000005B2 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
000005C6 00                         		even
000005C6                            
000005C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005C6                            
000005C6                            
000005C6                            ShowErrorValue:
000005C6 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
000005CA 7407                       		moveq	#7,d2
000005CC                            
000005CC                            	@loop:
000005CC E998                       		rol.l	#4,d0
000005CE 6100                       		bsr.s	@shownumber	; display 8 numbers
000005D0 51CA FFFA                  		dbf	d2,@loop
000005D4 4E75                       		rts	
000005D6                            ; End of function ShowErrorValue
000005D6                            
000005D6                            
000005D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D6                            
000005D6                            
000005D6                            @shownumber:
000005D6 3200                       		move.w	d0,d1
000005D8 0241 000F                  		andi.w	#$F,d1
000005DC 0C41 000A                  		cmpi.w	#$A,d1
000005E0 6500                       		blo.s	@chars0to9
000005E2 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
000005E4                            
000005E4                            	@chars0to9:
000005E4 0641 07C0                  		addi.w	#$7C0,d1
000005E8 3C81                       		move.w	d1,(a6)
000005EA 4E75                       		rts	
000005EC                            ; End of function sub_5CA
000005EC                            
000005EC                            
000005EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005EC                            
000005EC                            
000005EC                            ErrorWaitForC:
000005EC 6100 0000                  		bsr.w	ReadJoypads
000005F0 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
000005F6 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005FA 4E75                       		rts	
000005FC                            ; End of function ErrorWaitForC
000005FC                            
000005FC                            ; ===========================================================================
000005FC                            
000005FC                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000B1C                            		even
00000B1C                            
00000B1C                            ; ---------------------------------------------------------------------------
00000B1C                            ; Vertical interrupt
00000B1C                            ; ---------------------------------------------------------------------------
00000B1C                            
00000B1C                            VBlank:
00000B1C 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B20 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000B24 6700                       		beq.s	VBla_00
00000B26 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B2C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000B36 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000B3E 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B44 6700                       		beq.s	@notPAL		; if not, branch
00000B46                            
00000B46 303C 0700                  		move.w	#$700,d0
00000B4A                            	@waitPAL:
00000B4A 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000B4E                            
00000B4E                            	@notPAL:
00000B4E 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000B52 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000B58 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B5E 0240 003E                  		andi.w	#$3E,d0
00000B62 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B66 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B6A                            
00000B6A                            VBla_Music:
00000B6A 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B70                            
00000B70                            VBla_Exit:
00000B70 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B74 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B78 4E73                       		rte	
00000B7A                            ; ===========================================================================
00000B7A 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B7E 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B82 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B86 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B8A 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B8E 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B92 0000                       		dc.w VBla_0C-VBla_Index
00000B94                            ; ===========================================================================
00000B94                            
00000B94                            VBla_00:
00000B94 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B9A 6700                       		beq.s	@islevel
00000B9C 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000BA2 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000BA6                            
00000BA6                            	@islevel:
00000BA6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000BAC 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000BB0                            
00000BB0 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000BB6 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000BBC 6700                       		beq.s	@notPAL		; if not, branch
00000BBE                            
00000BBE 303C 0700                  		move.w	#$700,d0
00000BC2                            	@waitPAL:
00000BC2 51C8 FFFE                  		dbf	d0,@waitPAL
00000BC6                            
00000BC6                            	@notPAL:
00000BC6 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000BCC 33FC 0100 00A1 1100        		stopZ80
00000BD4 0839 0000 00A1 1100 66F6   		waitZ80
00000BDE 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000BE2 6600                       		bne.s	@waterabove 	; if yes, branch
00000BE4                            
00000BE4 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C08 6000                       		bra.s	@waterbelow
00000C0A                            
00000C0A                            @waterabove:
00000C0A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C2E                            
00000C2E                            	@waterbelow:
00000C2E 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C32 33FC 0000 00A1 1100        		startZ80
00000C3A 6000 FF2E                  		bra.w	VBla_Music
00000C3E                            ; ===========================================================================
00000C3E                            
00000C3E                            VBla_02:
00000C3E 6100 0000                  		bsr.w	sub_106E
00000C42                            
00000C42                            VBla_14:
00000C42 4A78 F614                  		tst.w	(v_demolength).w
00000C46 6700 0000                  		beq.w	@end
00000C4A 5378 F614                  		subq.w	#1,(v_demolength).w
00000C4E                            
00000C4E                            	@end:
00000C4E 4E75                       		rts	
00000C50                            ; ===========================================================================
00000C50                            
00000C50                            VBla_04:
00000C50 6100 0000                  		bsr.w	sub_106E
00000C54 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000C58 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C5E 6100 0000                  		bsr.w	sub_1642
00000C62 4A78 F614                  		tst.w	(v_demolength).w
00000C66 6700 0000                  		beq.w	@end
00000C6A 5378 F614                  		subq.w	#1,(v_demolength).w
00000C6E                            
00000C6E                            	@end:
00000C6E 4E75                       		rts	
00000C70                            ; ===========================================================================
00000C70                            
00000C70                            VBla_06:
00000C70 6100 0000                  		bsr.w	sub_106E
00000C74 4E75                       		rts	
00000C76                            ; ===========================================================================
00000C76                            
00000C76                            VBla_10:
00000C76 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C7C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C80                            
00000C80                            VBla_08:
00000C80 33FC 0100 00A1 1100        		stopZ80
00000C88 0839 0000 00A1 1100 66F6   		waitZ80
00000C92 6100 0000                  		bsr.w	ReadJoypads
00000C96 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C9A 6600                       		bne.s	@waterabove
00000C9C                            
00000C9C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000CC0 6000                       		bra.s	@waterbelow
00000CC2                            
00000CC2                            @waterabove:
00000CC2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000CE6                            
00000CE6                            	@waterbelow:
00000CE6 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000CEA                            
00000CEA 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000D0E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D32 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D38                            
00000D38                            	@nochg:
00000D38 33FC 0000 00A1 1100        		startZ80
00000D40 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000D46 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000D4C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000D52 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000D58 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D5E 6400                       		bhs.s	Demo_Time
00000D60 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D66 588F                       		addq.l	#4,sp
00000D68 6000 FE06                  		bra.w	VBla_Exit
00000D6C                            
00000D6C                            ; ---------------------------------------------------------------------------
00000D6C                            ; Subroutine to	run a demo for an amount of time
00000D6C                            ; ---------------------------------------------------------------------------
00000D6C                            
00000D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D6C                            
00000D6C                            
00000D6C                            Demo_Time:
00000D6C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D70 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D76 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D7C 6100 0000                  		bsr.w	ProcessDPLC2
00000D80 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D84 6700 0000                  		beq.w	@end		; if not, branch
00000D88 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D8C                            
00000D8C                            	@end:
00000D8C 4E75                       		rts	
00000D8E                            ; End of function Demo_Time
00000D8E                            
00000D8E                            ; ===========================================================================
00000D8E                            
00000D8E                            VBla_0A:
00000D8E 33FC 0100 00A1 1100        		stopZ80
00000D96 0839 0000 00A1 1100 66F6   		waitZ80
00000DA0 6100 0000                  		bsr.w	ReadJoypads
00000DA4 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000DC8 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000DEC 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E10 33FC 0000 00A1 1100        		startZ80
00000E18 6100 0000                  		bsr.w	PalCycle_SS
00000E1C 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E22                            
00000E22                            	@nochg:
00000E22 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000E26 6700 0000                  		beq.w	@end	; if not, return
00000E2A 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000E2E                            
00000E2E                            	@end:
00000E2E 4E75                       		rts	
00000E30                            ; ===========================================================================
00000E30                            
00000E30                            VBla_0C:
00000E30 33FC 0100 00A1 1100        		stopZ80
00000E38 0839 0000 00A1 1100 66F6   		waitZ80
00000E42 6100 0000                  		bsr.w	ReadJoypads
00000E46 4A38 F64E                  		tst.b	(f_wtr_state).w
00000E4A 6600                       		bne.s	@waterabove
00000E4C                            
00000E4C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E70 6000                       		bra.s	@waterbelow
00000E72                            
00000E72                            @waterabove:
00000E72 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E96                            
00000E96                            	@waterbelow:
00000E96 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E9A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EBE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000EE2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EE8                            
00000EE8                            	@nochg:
00000EE8 33FC 0000 00A1 1100        		startZ80
00000EF0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000EF6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000EFC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000F02 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000F08 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F0C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000F12 4EB9 0000 0000             		jsr	(HUD_Update).l
00000F18 6100 0000                  		bsr.w	sub_1642
00000F1C 4E75                       		rts	
00000F1E                            ; ===========================================================================
00000F1E                            
00000F1E                            VBla_0E:
00000F1E 6100 0000                  		bsr.w	sub_106E
00000F22 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F26 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000F2C 4E75                       		rts	
00000F2E                            ; ===========================================================================
00000F2E                            
00000F2E                            VBla_12:
00000F2E 6100 0000                  		bsr.w	sub_106E
00000F32 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000F36 6000 0000                  		bra.w	sub_1642
00000F3A                            ; ===========================================================================
00000F3A                            
00000F3A                            VBla_16:
00000F3A 33FC 0100 00A1 1100        		stopZ80
00000F42 0839 0000 00A1 1100 66F6   		waitZ80
00000F4C 6100 0000                  		bsr.w	ReadJoypads
00000F50 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F74 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F98 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FBC 33FC 0000 00A1 1100        		startZ80
00000FC4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000FCA                            	@nochg:
00000FCA 4A78 F614                  		tst.w	(v_demolength).w
00000FCE 6700 0000                  		beq.w	@end
00000FD2 5378 F614                  		subq.w	#1,(v_demolength).w
00000FD6                            
00000FD6                            	@end:
00000FD6 4E75                       		rts	
00000FD8                            
00000FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FD8                            
00000FD8                            
00000FD8                            sub_106E:
00000FD8 33FC 0100 00A1 1100        		stopZ80
00000FE0 0839 0000 00A1 1100 66F6   		waitZ80
00000FEA 6100 0000                  		bsr.w	ReadJoypads
00000FEE 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000FF2 6600                       		bne.s	@waterabove	; if yes, branch
00000FF4 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00001018 6000                       		bra.s	@waterbelow
0000101A                            
0000101A                            	@waterabove:
0000101A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
0000103E                            
0000103E                            	@waterbelow:
0000103E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001062 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001086 33FC 0000 00A1 1100        		startZ80
0000108E 4E75                       		rts	
00001090                            ; End of function sub_106E
00001090                            
00001090                            ; ---------------------------------------------------------------------------
00001090                            ; Horizontal interrupt
00001090                            ; ---------------------------------------------------------------------------
00001090                            
00001090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001090                            
00001090                            
00001090                            HBlank:
00001090 46FC 2700                  		disable_ints
00001094 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00001098 6700                       		beq.s	@nochg		; if not, branch
0000109A 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
000010A0 48E7 00C0                  		movem.l	a0-a1,-(sp)
000010A4 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010AA 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
000010AE 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
000010B6 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
000010B8 2298                       		move.l	(a0)+,(a1)
000010BA 2298                       		move.l	(a0)+,(a1)
000010BC 2298                       		move.l	(a0)+,(a1)
000010BE 2298                       		move.l	(a0)+,(a1)
000010C0 2298                       		move.l	(a0)+,(a1)
000010C2 2298                       		move.l	(a0)+,(a1)
000010C4 2298                       		move.l	(a0)+,(a1)
000010C6 2298                       		move.l	(a0)+,(a1)
000010C8 2298                       		move.l	(a0)+,(a1)
000010CA 2298                       		move.l	(a0)+,(a1)
000010CC 2298                       		move.l	(a0)+,(a1)
000010CE 2298                       		move.l	(a0)+,(a1)
000010D0 2298                       		move.l	(a0)+,(a1)
000010D2 2298                       		move.l	(a0)+,(a1)
000010D4 2298                       		move.l	(a0)+,(a1)
000010D6 2298                       		move.l	(a0)+,(a1)
000010D8 2298                       		move.l	(a0)+,(a1)
000010DA 2298                       		move.l	(a0)+,(a1)
000010DC 2298                       		move.l	(a0)+,(a1)
000010DE 2298                       		move.l	(a0)+,(a1)
000010E0 2298                       		move.l	(a0)+,(a1)
000010E2 2298                       		move.l	(a0)+,(a1)
000010E4 2298                       		move.l	(a0)+,(a1)
000010E6 2298                       		move.l	(a0)+,(a1)
000010E8 2298                       		move.l	(a0)+,(a1)
000010EA 2298                       		move.l	(a0)+,(a1)
000010EC 2298                       		move.l	(a0)+,(a1)
000010EE 2298                       		move.l	(a0)+,(a1)
000010F0 2298                       		move.l	(a0)+,(a1)
000010F2 2298                       		move.l	(a0)+,(a1)
000010F4 2298                       		move.l	(a0)+,(a1)
000010F6 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
000010FC 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001100 4A38 F64F                  		tst.b	($FFFFF64F).w
00001104 6600                       		bne.s	loc_119E
00001106                            
00001106                            	@nochg:
00001106 4E73                       		rte	
00001108                            ; ===========================================================================
00001108                            
00001108                            loc_119E:
00001108 4238 F64F                  		clr.b	($FFFFF64F).w
0000110C 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001110 6100 FC5A                  		bsr.w	Demo_Time
00001114 4EB9 0000 0000             		jsr	(UpdateMusic).l
0000111A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
0000111E 4E73                       		rte	
00001120                            ; End of function HBlank
00001120                            
00001120                            ; ---------------------------------------------------------------------------
00001120                            ; Subroutine to	initialise joypads
00001120                            ; ---------------------------------------------------------------------------
00001120                            
00001120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001120                            
00001120                            
00001120                            JoypadInit:
00001120 33FC 0100 00A1 1100        		stopZ80
00001128 0839 0000 00A1 1100 66F6   		waitZ80
00001132 7040                       		moveq	#$40,d0
00001134 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000113A 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001140 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00001146 33FC 0000 00A1 1100        		startZ80
0000114E 4E75                       		rts	
00001150                            ; End of function JoypadInit
00001150                            
00001150                            ; ---------------------------------------------------------------------------
00001150                            ; Subroutine to	read joypad input, and send it to the RAM
00001150                            ; ---------------------------------------------------------------------------
00001150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001150                            
00001150                            
00001150                            ReadJoypads:
00001150 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
00001154 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
0000115A 6100                       		bsr.s	@read		; do the first joypad
0000115C 5449                       		addq.w	#2,a1		; do the second	joypad
0000115E                            
0000115E                            	@read:
0000115E 12BC 0000                  		move.b	#0,(a1)
00001162 4E71                       		nop	
00001164 4E71                       		nop	
00001166 1011                       		move.b	(a1),d0
00001168 E508                       		lsl.b	#2,d0
0000116A 0200 00C0                  		andi.b	#$C0,d0
0000116E 12BC 0040                  		move.b	#$40,(a1)
00001172 4E71                       		nop	
00001174 4E71                       		nop	
00001176 1211                       		move.b	(a1),d1
00001178 0201 003F                  		andi.b	#$3F,d1
0000117C 8001                       		or.b	d1,d0
0000117E 4600                       		not.b	d0
00001180 1210                       		move.b	(a0),d1
00001182 B101                       		eor.b	d0,d1
00001184 10C0                       		move.b	d0,(a0)+
00001186 C200                       		and.b	d0,d1
00001188 10C1                       		move.b	d1,(a0)+
0000118A 4E75                       		rts	
0000118C                            ; End of function ReadJoypads
0000118C                            
0000118C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000118C                            
0000118C                            
0000118C                            VDPSetupGame:
0000118C 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001192 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00001198 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000119E 7E12                       		moveq	#$12,d7
000011A0                            
000011A0                            	@setreg:
000011A0 309A                       		move.w	(a2)+,(a0)
000011A2 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000011A6                            
000011A6 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000011AC 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
000011B0 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
000011B6 7000                       		moveq	#0,d0
000011B8 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000011C2 3E3C 003F                  		move.w	#$3F,d7
000011C6                            
000011C6                            	@clrCRAM:
000011C6 3280                       		move.w	d0,(a1)
000011C8 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
000011CC                            
000011CC 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011D0 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011D4 2F01                       		move.l	d1,-(sp)
000011D6 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
000011F8                            
000011F8                            	@waitforDMA:
000011F8 3215                       		move.w	(a5),d1
000011FA 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011FE 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001200                            
00001200 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00001204 221F                       		move.l	(sp)+,d1
00001206 4E75                       		rts	
00001208                            ; End of function VDPSetupGame
00001208                            
00001208                            ; ===========================================================================
00001208 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
0000120A 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
0000120C 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
0000120E 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001210 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001212 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00001214 8600                       		dc.w $8600		; unused
00001216 8700                       		dc.w $8700		; set background colour (palette entry 0)
00001218 8800                       		dc.w $8800		; unused
0000121A 8900                       		dc.w $8900		; unused
0000121C 8A00                       		dc.w $8A00		; default H.interrupt register
0000121E 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001220 8C81                       		dc.w $8C81		; 40-cell display mode
00001222 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00001224 8E00                       		dc.w $8E00		; unused
00001226 8F02                       		dc.w $8F02		; set VDP increment size
00001228 9001                       		dc.w $9001		; 64-cell hscroll size
0000122A 9100                       		dc.w $9100		; window horizontal position
0000122C 9200                       		dc.w $9200		; window vertical position
0000122E                            
0000122E                            ; ---------------------------------------------------------------------------
0000122E                            ; Subroutine to	clear the screen
0000122E                            ; ---------------------------------------------------------------------------
0000122E                            
0000122E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000122E                            
0000122E                            
0000122E                            ClearScreen:
0000122E 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
00001250                            
00001250                            	@wait1:
00001250 3215                       		move.w	(a5),d1
00001252 0801 0001                  		btst	#1,d1
00001256 66F8                       		bne.s	@wait1
00001258                            
00001258 3ABC 8F02                  		move.w	#$8F02,(a5)
0000125C 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
0000127E                            
0000127E                            	@wait2:
0000127E 3215                       		move.w	(a5),d1
00001280 0801 0001                  		btst	#1,d1
00001284 66F8                       		bne.s	@wait2
00001286                            
00001286 3ABC 8F02                  		move.w	#$8F02,(a5)
0000128A 42B8 F616                  		clr.l	(v_scrposy_dup).w
0000128E 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001292                            
00001292 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001296 7000                       		moveq	#0,d0
00001298 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000129C                            
0000129C                            	@clearsprites:
0000129C 22C0                       		move.l	d0,(a1)+
0000129E 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000012A2                            
000012A2 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000012A6 7000                       		moveq	#0,d0
000012A8 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
000012AC                            
000012AC                            	@clearhscroll:
000012AC 22C0                       		move.l	d0,(a1)+
000012AE 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
000012B2 4E75                       		rts	
000012B4                            ; End of function ClearScreen
000012B4                            
000012B4                            ; ---------------------------------------------------------------------------
000012B4                            ; Subroutine to	load the sound driver
000012B4                            ; ---------------------------------------------------------------------------
000012B4                            
000012B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012B4                            
000012B4                            
000012B4                            SoundDriverLoad:
000012B4 4E71                       		nop	
000012B6 33FC 0100 00A1 1100        		stopZ80
000012BE 33FC 0100 00A1 1200        		resetZ80
000012C6 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000012CC 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
000012D2 6100 0000                  		bsr.w	KosDec		; decompress
000012D6 33FC 0000 00A1 1200        		resetZ80a
000012DE 4E71                       		nop	
000012E0 4E71                       		nop	
000012E2 4E71                       		nop	
000012E4 4E71                       		nop	
000012E6 33FC 0100 00A1 1200        		resetZ80
000012EE 33FC 0000 00A1 1100        		startZ80
000012F6 4E75                       		rts	
000012F8                            ; End of function SoundDriverLoad
000012F8                            
000012F8                            		include	"_incObj\sub PlaySound.asm"
000012F8                            ; ---------------------------------------------------------------------------
000012F8                            ; Subroutine to	play a music track
000012F8                            
000012F8                            ; input:
000012F8                            ;	d0 = track to play
000012F8                            ; ---------------------------------------------------------------------------
000012F8                            
000012F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012F8                            
000012F8                            
000012F8                            PlaySound:
000012F8 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
000012FC 4E75                       		rts	
000012FE                            ; End of function PlaySound
000012FE                            
000012FE                            ; ---------------------------------------------------------------------------
000012FE                            ; Subroutine to	play a sound effect
000012FE                            ; ---------------------------------------------------------------------------
000012FE                            
000012FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012FE                            
000012FE                            
000012FE                            PlaySound_Special:
000012FE 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001302 4E75                       		rts	
00001304                            ; End of function PlaySound_Special
00001304                            
00001304                            ; ===========================================================================
00001304                            ; ---------------------------------------------------------------------------
00001304                            ; Unused sound/music subroutine
00001304                            ; ---------------------------------------------------------------------------
00001304                            
00001304                            PlaySound_Unused:
00001304 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
00001308 4E75                       		rts	
00001308 4E75                       		rts	
0000130A                            		include	"_inc\PauseGame.asm"
0000130A                            ; ---------------------------------------------------------------------------
0000130A                            ; Subroutine to	pause the game
0000130A                            ; ---------------------------------------------------------------------------
0000130A                            
0000130A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000130A                            
0000130A                            
0000130A                            PauseGame:
0000130A 4E71                       		nop	
0000130C 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001310 6700                       		beq.s	Unpause		; if not, branch
00001312 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00001316 6600                       		bne.s	Pause_StopGame	; if yes, branch
00001318 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
0000131E 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001320                            
00001320                            Pause_StopGame:
00001320 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00001326 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
0000132C                            
0000132C                            Pause_Loop:
0000132C 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001332 6100 0000                  		bsr.w	WaitForVBla
00001336 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
0000133A 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000133C 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001342 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001344 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
0000134A 4E71                       		nop	
0000134C 6000                       		bra.s	Pause_EndMusic
0000134E                            ; ===========================================================================
0000134E                            
0000134E                            Pause_ChkBC:
0000134E 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
00001354 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001356 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0000135C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000135E                            
0000135E                            Pause_ChkStart:
0000135E 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001364 67C6                       		beq.s	Pause_Loop	; if not, branch
00001366                            
00001366                            Pause_EndMusic:
00001366 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000136C                            
0000136C                            Unpause:
0000136C 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001372                            
00001372                            Pause_DoNothing:
00001372 4E75                       		rts	
00001374                            ; ===========================================================================
00001374                            
00001374                            Pause_SlowMo:
00001374 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000137A 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001380 4E75                       		rts	
00001382                            ; End of function PauseGame
00001382                            ; End of function PauseGame
00001382                            
00001382                            ; ---------------------------------------------------------------------------
00001382                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001382                            
00001382                            ; input:
00001382                            ;	a1 = tile map address
00001382                            ;	d0 = VRAM address
00001382                            ;	d1 = width (cells)
00001382                            ;	d2 = height (cells)
00001382                            ; ---------------------------------------------------------------------------
00001382                            
00001382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001382                            
00001382                            
00001382                            TilemapToVRAM:
00001382 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00001388 283C 0080 0000             		move.l	#$800000,d4
0000138E                            
0000138E                            	Tilemap_Line:
0000138E 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001392 3601                       		move.w	d1,d3
00001394                            
00001394                            	Tilemap_Cell:
00001394 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001396 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000139A D084                       		add.l	d4,d0		; goto next line
0000139C 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000013A0 4E75                       		rts	
000013A2                            ; End of function TilemapToVRAM
000013A2                            
000013A2                            		include	"_inc\Nemesis Decompression.asm"
000013A2                            ; ==============================================================================
000013A2                            ; ------------------------------------------------------------------------------
000013A2                            ; Nemesis decompression routine
000013A2                            ; ------------------------------------------------------------------------------
000013A2                            ; Optimized by vladikcomper
000013A2                            ; ------------------------------------------------------------------------------
000013A2                             
000013A2                            NemDec_RAM:
000013A2 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000013A6 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000013AA 6000                           bra.s   NemDec_Main
000013AC                             
000013AC                            ; ------------------------------------------------------------------------------
000013AC                            NemDec:
000013AC 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000013B0 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
000013B6 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
000013BA                             
000013BA                            NemDec_Main:
000013BA 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
000013BE 3418                           move.w  (a0)+,d2        ; get number of patterns
000013C0 6A00                           bpl.s   @0          ; are we in Mode 0?
000013C2 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
000013C6 E74A                       @0  lsl.w   #3,d2
000013C8 3A42                           movea.w d2,a5
000013CA 7607                           moveq   #7,d3
000013CC 7400                           moveq   #0,d2
000013CE 7800                           moveq   #0,d4
000013D0 6100 0000                      bsr.w   NemDec_BuildCodeTable
000013D4 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
000013D6 E145                           asl.w   #8,d5           ; shift up by a byte
000013D8 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
000013DA 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
000013DE 6100                           bsr.s   NemDec2
000013E0 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
000013E4 4E75                           rts
000013E6                             
000013E6                            ; ---------------------------------------------------------------------------
000013E6                            ; Part of the Nemesis decompressor, processes the actual compressed data
000013E6                            ; ---------------------------------------------------------------------------
000013E6                             
000013E6                            NemDec2:
000013E6 3E06                           move.w  d6,d7
000013E8 5147                           subq.w  #8,d7           ; get shift value
000013EA 3205                           move.w  d5,d1
000013EC EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
000013EE 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
000013F2 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
000013F4 0241 00FF                      andi.w  #$FF,d1
000013F8 D241                           add.w   d1,d1
000013FA 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013FE 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001402 6400                           bcc.s   @0          ; if not, branch
00001404 5046                           addq.w  #8,d6
00001406 E145                           asl.w   #8,d5
00001408 1A18                           move.b  (a0)+,d5        ; read next byte
0000140A 1231 1001                  @0  move.b  1(a1,d1.w),d1
0000140E 3001                           move.w  d1,d0
00001410 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001414 0240 00F0                      andi.w  #$F0,d0
00001418                             
00001418                            NemDec_GetRepeatCount:
00001418 E848                           lsr.w   #4,d0           ; get repeat count
0000141A                             
0000141A                            NemDec_WritePixel:
0000141A E98C                           lsl.l   #4,d4           ; shift up by a nybble
0000141C 8801                           or.b    d1,d4           ; write pixel
0000141E 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001422 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001424                            ; ---------------------------------------------------------------------------
00001424                             
00001424                            NemPCD_NewRow:
00001424 7800                           moveq   #0,d4           ; reset row
00001426 7607                           moveq   #7,d3           ; reset nybble counter
00001428                             
00001428                            NemDec_WritePixelLoop:
00001428 51C8 FFF0                      dbf d0,NemDec_WritePixel
0000142C 60B8                           bra.s   NemDec2
0000142E                            ; ---------------------------------------------------------------------------
0000142E                             
0000142E                            NemDec_InlineData:
0000142E 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001430 0C46 0009                      cmpi.w  #9,d6
00001434 6400                           bcc.s   @0
00001436 5046                           addq.w  #8,d6
00001438 E145                           asl.w   #8,d5
0000143A 1A18                           move.b  (a0)+,d5
0000143C 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000143E 3205                           move.w  d5,d1
00001440 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001442 3001                           move.w  d1,d0
00001444 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001448 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000144C 0C46 0009                      cmpi.w  #9,d6
00001450 64C6                           bcc.s   NemDec_GetRepeatCount
00001452 5046                           addq.w  #8,d6
00001454 E145                           asl.w   #8,d5
00001456 1A18                           move.b  (a0)+,d5
00001458 60BE                           bra.s   NemDec_GetRepeatCount
0000145A                             
0000145A                            ; ---------------------------------------------------------------------------
0000145A                            ; Subroutines to output decompressed entry
0000145A                            ; Selected depending on current decompression mode
0000145A                            ; ---------------------------------------------------------------------------
0000145A                             
0000145A                            NemPCD_WriteRowToVDP:
0000145A                            loc_1502:
0000145A 2884                           move.l  d4,(a4)         ; write 8-pixel row
0000145C 534D                           subq.w  #1,a5
0000145E 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001460 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001462 4E75                           rts
00001464                            ; ---------------------------------------------------------------------------
00001464                             
00001464                            NemPCD_WriteRowToVDP_XOR:
00001464 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001466 2882                           move.l  d2,(a4)         ; and write the result
00001468 534D                           subq.w  #1,a5
0000146A 380D                           move.w  a5,d4
0000146C 66B6                           bne.s   NemPCD_NewRow
0000146E 4E75                           rts
00001470                            ; ---------------------------------------------------------------------------
00001470                             
00001470                            NemDec_WriteRowToRAM:
00001470 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001472 534D                           subq.w  #1,a5
00001474 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001476 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
00001478 4E75                           rts
0000147A                            ; ---------------------------------------------------------------------------
0000147A                             
0000147A                            NemDec_WriteRowToRAM_XOR:
0000147A B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000147C 28C2                           move.l  d2,(a4)+        ; and write the result
0000147E 534D                           subq.w  #1,a5
00001480 380D                           move.w  a5,d4
00001482 66A0                           bne.s   NemPCD_NewRow
00001484 4E75                           rts
00001486                             
00001486                            ; ---------------------------------------------------------------------------
00001486                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001486                            ; ---------------------------------------------------------------------------
00001486                             
00001486                            NemDec_BuildCodeTable:
00001486 1018                           move.b  (a0)+,d0        ; read first byte
00001488                             
00001488                            @ChkEnd:
00001488 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000148C 6600                           bne.s   @NewPalIndex        ; if not, branch
0000148E 4E75                           rts
00001490                            ; ---------------------------------------------------------------------------
00001490                             
00001490                            @NewPalIndex:
00001490 3E00                           move.w  d0,d7
00001492                             
00001492                            @ItemLoop:
00001492 1018                           move.b  (a0)+,d0        ; read next byte
00001494 6BF2                           bmi.s   @ChkEnd         ; ~~
00001496 1200                           move.b  d0,d1
00001498 0247 000F                      andi.w  #$F,d7          ; get palette index
0000149C 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000014A0 8E41                           or.w    d1,d7           ; combine the two
000014A2 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000014A6 1200                           move.b  d0,d1
000014A8 E149                           lsl.w   #8,d1
000014AA 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000014AC 7208                           moveq   #8,d1
000014AE 9240                           sub.w   d0,d1           ; is the code 8 bits long?
000014B0 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
000014B2 1018                           move.b  (a0)+,d0        ; get code
000014B4 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
000014B6 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
000014BA 60D6                           bra.s   @ItemLoop       ; repeat
000014BC                            ; ---------------------------------------------------------------------------
000014BC                             
000014BC                            @ItemShortCode:
000014BC 1018                           move.b  (a0)+,d0        ; get code
000014BE E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
000014C0 D040                           add.w   d0,d0           ; get index into code table
000014C2 7A01                           moveq   #1,d5
000014C4 E36D                           lsl.w   d1,d5
000014C6 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
000014C8 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
000014CC                             
000014CC                            @ItemShortCodeLoop:
000014CC 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
000014CE 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
000014D2 60BE                           bra.s   @ItemLoop
000014D2 60BE                           bra.s   @ItemLoop
000014D4                            
000014D4                              
000014D4                                pusho	; buffer local label symbol config
000014D4                                opt ws+  ; change local label symbol to '.'
000014D4                            
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; MACRO ResetDMAQueue
000014D4                            ; Clears the DMA queue, discarding all previously-queued DMAs.
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
000014D4                            ; Performs all queued DMA transfers and clears the DMA queue.
000014D4                            ;
000014D4                            ; Output:
000014D4                            ; 	a1,a5	trashed
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; ROUTINE InitDMAQueue
000014D4                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
000014D4                            ; Must be called before the queue is used, and the queue expects that only it
000014D4                            ; write to this region of RAM.
000014D4                            ;
000014D4                            ; Output:
000014D4                            ; 	a0,d0,d1	trashed
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
000014D4                            ; Queues a DMA with parameters given in registers.
000014D4                            ;
000014D4                            ; Options:
000014D4                            ; 	AssumeSourceAddressInBytes (default 1)
000014D4                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
000014D4                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
000014D4                            ; 	Use128kbSafeDMA (default 0)
000014D4                            ; 	UseVIntSafeDMA (default 0)
000014D4                            ; Input:
000014D4                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
000014D4                            ; 		set to 0)
000014D4                            ; 	d2	Destination address
000014D4                            ; 	d3	Transfer length (in words)
000014D4                            ; Output:
000014D4                            ; 	d0,d1,d2,d3,a1	trashed
000014D4                            ;
000014D4                            ; With the default settings, runs in:
000014D4                            ; * 48(11/0) cycles if queue is full (DMA discarded)
000014D4                            ; * 184(29/9) cycles otherwise (DMA queued)
000014D4                            ;
000014D4                            ; With Use128kbSafeDMA = 1, runs in:
000014D4                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
000014D4                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
000014D4                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
000014D4                            ;   fills the queue (second piece is discarded)
000014D4                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
000014D4                            ;   space for both pieces (both pieces queued)
000014D4                            ;
000014D4                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
000014D4                            ;
000014D4                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
000014D4                            ; but only if the DMA is not entirely discarded. However, all callers must be
000014D4                            ; edited to make sure the adresss given is correct.
000014D4                            ;
000014D4                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
000014D4                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
000014D4                            ; discarded. However, all callers must be edited to make sure the adresss given
000014D4                            ; in the correct form. You can use the dmaSource function for that.
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ; MACRO QueueStaticDMA
000014D4                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
000014D4                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
000014D4                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
000014D4                            ;
000014D4                            ; Options:
000014D4                            ; 	UseVIntSafeDMA (default 0)
000014D4                            ; Input:
000014D4                            ; 	Source address (in bytes), transfer length (in bytes), destination address
000014D4                            ; Output:
000014D4                            ; 	d0,a1	trashed
000014D4                            ;
000014D4                            ; With the default settings, runs in:
000014D4                            ; * 32(7/0) cycles if queue is full (DMA discarded)
000014D4                            ; * 122(21/8) cycles otherwise (DMA queued)
000014D4                            ;
000014D4                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
000014D4                            ; ===========================================================================
000014D4                            ; option: AssumeSourceAddressInBytes
000014D4                            ;
000014D4                            ; This option makes the function work as a drop-in replacement of the original
000014D4                            ; functions. If you modify all callers to supply a position in words instead of
000014D4                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
000014D4 =00000001                  AssumeSourceAddressInBytes = 1
000014D4                            ; ===========================================================================
000014D4                            ; option: AssumeSourceAddressIsRAMSafe
000014D4                            ;
000014D4                            ; This option (which is disabled by default) makes the DMA queue assume that the
000014D4                            ; source address is given to the function in a way that makes them safe to use
000014D4                            ; with RAM sources. You need to edit all callers to ensure this.
000014D4                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
000014D4 =00000000                  AssumeSourceAddressIsRAMSafe = 0
000014D4                            ; ===========================================================================
000014D4                            ; option: UseRAMSourceSafeDMA
000014D4                            ;
000014D4                            ; This option (which is enabled by default) makes source addresses in RAM safe
000014D4                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
000014D4                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
000014D4 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
000014D4                            ; ===========================================================================
000014D4                            ; option: Use128kbSafeDMA
000014D4                            ;
000014D4                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
000014D4                            ; disabled by default because you can simply align the art in ROM and avoid the
000014D4                            ; issue altogether. It is here so that you have a high-performance routine to do
000014D4                            ; the job in situations where you can't align it in ROM.
000014D4 =00000001                  Use128kbSafeDMA = 1
000014D4                            ; ===========================================================================
000014D4                            ; option UseVIntSafeDMA
000014D4                            ;
000014D4                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
000014D4                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
000014D4                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
000014D4                            ; KosM decoder) prevent these by masking off interrupts before calling and then
000014D4                            ; restore interrupts after.
000014D4 =00000000                  UseVIntSafeDMA = 0
000014D4                            ; ===========================================================================
000014D4                            
000014D4                            
000014D4                            ; Convenience macros, for increased maintainability of the code.
000014D4 =00000027                  DMA = %100111
000014D4 =00000021                  VRAM = %100001
000014D4                            ; Like vdpComm, but starting from an address contained in a register
000014D4 =00000001                  vdpCommReg_defined = 1
000014D4                            vdpCommReg macro reg,type,rwd,clr
000014D4                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
000014D4                            	if ((\type&\rwd)&3)<>0
000014D4                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
000014D4                            	endif
000014D4                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
000014D4                            	swap	\reg								; Put all bits in proper places
000014D4                            	if \clr <> 0
000014D4                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
000014D4                            	endif
000014D4                            	if ((\type&\rwd)&$FC)=$20
000014D4                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
000014D4                            	elseif ((\type&\rwd)&$FC)<>0
000014D4                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
000014D4                            	endif
000014D4                            	endm
000014D4                            ; ---------------------------------------------------------------------------
000014D4 =00000001                  intMacros_defined = 1
000014D4                            enableInts macro
000014D4                            	move	#$2300,sr
000014D4                            	endm
000014D4                            
000014D4                            disableInts macro
000014D4                            	move	#$2700,sr
000014D4                            	endm
000014D4                            ; ---------------------------------------------------------------------------
000014D4 =00000001                  DMAEntry_defined = 1
000014D4                                    rsreset
000014D4 =00000000                  DMAEntry.Reg94:		rs.b	1
000014D4                            			  
000014D4 =00000001                  DMAEntry.Size:      rs.b    0
000014D4 =00000001                  DMAEntry.SizeH:		rs.b	1
000014D4 =00000002                  DMAEntry.Reg93:		rs.b	1
000014D4 =00000003                  DMAEntry.Source:    rs.b    0
000014D4 =00000003                  DMAEntry.SizeL:		rs.b	1
000014D4 =00000004                  DMAEntry.Reg97:		rs.b	1
000014D4 =00000005                  DMAEntry.SrcH:		rs.b	1
000014D4 =00000006                  DMAEntry.Reg96:		rs.b	1
000014D4 =00000007                  DMAEntry.SrcM:		rs.b	1
000014D4 =00000008                  DMAEntry.Reg95:		rs.b	1
000014D4 =00000009                  DMAEntry.SrcL:		rs.b	1
000014D4 =0000000A                  DMAEntry.Command:	rs.l	1
000014D4 =0000000E                  DMAEntry.len:   rs.w    0
000014D4                            ; ---------------------------------------------------------------------------
000014D4 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            						
000014D4                            										   
000014D4                            									   
000014D4                            	  
000014D4                            																			 
000014D4                            							  
000014D4 =00000001                  QueueStaticDMA_defined = 1
000014D4                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
000014D4                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
000014D4                            ; crosses a 128kB boundary, or has size 0.
000014D4                            QueueStaticDMA macro src,length,dest
000014D4                                local   len
000014D4                            		if ((\src)&1)<>0
000014D4                            			inform 3,"DMA queued from odd source \1!"
000014D4                            		endif
000014D4                            		if ((\length)&1)<>0
000014D4                            			inform 3,"DMA an odd number of bytes \2!"
000014D4                            		endif
000014D4                            		if (\length)=0
000014D4                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
000014D4                            		endif
000014D4                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
000014D4                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
000014D4                            		endif
000014D4                            	  
000014D4                            	if UseVIntSafeDMA=1
000014D4                            		move.w	sr,-(sp)										; Save current interrupt mask
000014D4                            		disableInts												; Mask off interrupts
000014D4                            	endif ; UseVIntSafeDMA=1
000014D4                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014D4                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
000014D4                            	beq.s	.done												; Return if there's no more room in the buffer
000014D4                            	len: = ((length>>1)&$7FFF)
000014D4                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
000014D4                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
000014D4                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
000014D4                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
000014D4                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
000014D4                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
000014D4                            .done:
000014D4                            	if UseVIntSafeDMA=1
000014D4                            		move.w	(sp)+,sr										; Restore interrupts to previous state
000014D4                            	endif ;UseVIntSafeDMA=1
000014D4                            	endm
000014D4                            
000014D4                                
000014D4                            
000014D4                            ; ---------------------------------------------------------------------------
000014D4                            ResetDMAQueue: macro
000014D4                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
000014D4                            	endm
000014D4                            ; ===========================================================================
000014D4                            
000014D4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014D4                            
000014D4                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
000014D4                            Add_To_DMA_Queue:
000014D4                            QueueDMATransfer:
000014D4 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014D8 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
000014DC 6700                       	beq.s	.done											; Return if there's no more room in the buffer
000014DE                            
000014DE E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
000014E0 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
000014E4 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
000014E8 7000                       	moveq	#0,d0											; We need a zero on d0
000014EA                            
000014EA                            		; Detect if transfer crosses 128KB boundary
000014EA                            		; Using sub+sub instead of move+add handles the following edge cases:
000014EA                            		; (1) d3.w = 0 => 128kB transfer
000014EA                            		;   (a) d1.w = 0 => no carry, don't split the DMA
000014EA                            		;   (b) d1.w != 0 => carry, need to split the DMA
000014EA                            		; (2) d3.w != 0
000014EA                            		;   (a) if there is carry on d1.w + d3.w
000014EA                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
000014EA                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
000014EA                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
000014EA                            		; The reason this works is that carry on d1.w + d3.w means that
000014EA                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
000014EA                            		; d1.w + d3.w > $10000.
000014EA 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
000014EC 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
000014EE 6500                       		bcs.s	.doubletransfer								; Branch if yes
000014F0                            	; It does not cross a 128kB boundary. So just finish writing it.
000014F0 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
000014F4                            
000014F4                            .finishxfer:
000014F4                            	; Command to specify destination address and begin DMA
000014F4 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001500 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
00001504 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
00001506 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
0000150A                            
0000150A                            .done:
0000150A 4E75                       	rts
0000150C                            ; ---------------------------------------------------------------------------
0000150C                            .doubletransfer:
0000150C                            		; We need to split the DMA into two parts, since it crosses a 128kB block
0000150C D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
0000150E 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001512                            
00001512 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
00001516 67DC                       		beq.s	.finishxfer									; Branch if not
00001518                            
00001518                            		; Get second transfer's source, destination, and length
00001518 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
0000151A D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
0000151C D040                       		add.w	d0,d0										; Convert to number of bytes
0000151E D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001520                            
00001520                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001520                            		; clear it. There is, unfortunately, no faster way to clear it than this.
0000152E 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001532                            
00001532                            		; Do second transfer
00001532 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001536 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
0000153A                            
0000153A                            		; Command to specify destination address and begin DMA
00001544 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
00001548 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
0000154A                            
0000154A 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
0000154E 4E75                       		rts
00001550                            ; End of function QueueDMATransfer
00001550                            ; ===========================================================================
00001550                            
00001550                            ; ---------------------------------------------------------------------------
00001550                            ; Subroutine for issuing all VDP commands that were queued
00001550                            ; (by earlier calls to QueueDMATransfer)
00001550                            ; Resets the queue when it's done
00001550                            ; ---------------------------------------------------------------------------
00001550                            
00001550                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001550                            
00001550                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
00001550                            Process_DMA_Queue:
00001550                            ProcessDMAQueue:
00001550 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001554 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
00001558                            ; ---------------------------------------------------------------------------
00001558                            .jump_table:
00001558 4E75                       	rts
0000155A                            	rept 6
0000155A                            		trap	#0											; Just in case
0000155A 4E40 4E40 4E40 4E40 4E40+  	endr
00001566                            ; ---------------------------------------------------------------------------
00001566 =00000001                      c: = 1
00001566                            	rept QueueSlotCount
00001566                            		lea	(vdp_control_port).l,a5
00001566                            		lea	(VDP_Command_Buffer).w,a1
00001566                            		if c<>QueueSlotCount
00001566                            			bra.w	.jump0 - c*8
00001566                            		endif
00001566                                c: = c + 1
0000165E                            ; ---------------------------------------------------------------------------
0000165E                            	rept QueueSlotCount
0000165E                            		move.l	(a1)+,(a5)									; Transfer length
0000165E                            		move.l	(a1)+,(a5)									; Source address high
0000165E                            		move.l	(a1)+,(a5)									; Source address low + destination high
0000165E                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
0000165E 2A99 2A99 2A99 3A99 2A99+  	endr
000016EE                            
000016EE                            .jump0:
000016EE 31FC C800 C8FC             	ResetDMAQueue
000016F4 4E75                       	rts
000016F6                            ; End of function ProcessDMAQueue
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            ; ---------------------------------------------------------------------------
000016F6                            ; Subroutine for initializing the DMA queue.
000016F6                            ; ---------------------------------------------------------------------------
000016F6                            
000016F6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000016F6                            
000016F6                            InitDMAQueue:
000016F6 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
000016FA 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
000016FC 223C 9397 9695             	move.l	#$93979695,d1
00001702 =00000000                      c: = 0
00001702                            	rept QueueSlotCount
00001702                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001702                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001702                                c: = c + DMAEntry.len
00001702 1080 03C8 0002 1140 000E+  	endr
00001790                            
00001790 31FC C800 C8FC             	ResetDMAQueue
00001796 4E75                       	rts
00001798                            ; End of function ProcessDMAQueue
00001798                            ; ===========================================================================
00001798                            
00001798                            
00001798                                popo	; buffer local label symbol config
00001798                            
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; ARGUMENTS
00001798                            ; d0 = index of PLC list
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; LoadPLC:
00001798                            AddPLC:
00001798 48E7 0060                  		movem.l	a1-a2,-(sp)
0000179C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017A2 D040                       		add.w	d0,d0
000017A4 3031 0000                  		move.w	(a1,d0.w),d0
000017A8 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
000017AC 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
000017B0                            
000017B0                            	@findspace:
000017B0 4A92                       		tst.l	(a2)		; is space available in RAM?
000017B2 6700                       		beq.s	@copytoRAM	; if yes, branch
000017B4 5C4A                       		addq.w	#6,a2		; if not, try next space
000017B6 60F8                       		bra.s	@findspace
000017B8                            ; ===========================================================================
000017B8                            
000017B8                            @copytoRAM:
000017B8 3019                       		move.w	(a1)+,d0	; get length of PLC
000017BA 6B00                       		bmi.s	@skip
000017BC                            
000017BC                            	@loop:
000017BC 24D9                       		move.l	(a1)+,(a2)+
000017BE 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000017C0 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
000017C4                            
000017C4                            	@skip:
000017C4 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
000017C8 4E75                       		rts	
000017CA                            ; End of function AddPLC
000017CA                            
000017CA                            
000017CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CA                            ; Queue pattern load requests, but clear the PLQ first
000017CA                            
000017CA                            ; ARGUMENTS
000017CA                            ; d0 = index of PLC list (see ArtLoadCues)
000017CA                            
000017CA                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
000017CA                            ;	  (or hacker) is responsible for making sure that no more than
000017CA                            ;	  16 load requests are copied into the buffer.
000017CA                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
000017CA                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
000017CA                            
000017CA                            ; LoadPLC2:
000017CA                            NewPLC:
000017CA 48E7 0060                  		movem.l	a1-a2,-(sp)
000017CE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017D4 D040                       		add.w	d0,d0
000017D6 3031 0000                  		move.w	(a1,d0.w),d0
000017DA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
000017DE 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
000017E0 45F8 F680                  		lea	(v_plc_buffer).w,a2
000017E4 3019                       		move.w	(a1)+,d0	; get length of PLC
000017E6 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
000017E8                            
000017E8                            	@loop:
000017E8 24D9                       		move.l	(a1)+,(a2)+
000017EA 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000017EC 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
000017F0                            
000017F0                            	@skip:
000017F0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017F4 4E75                       		rts	
000017F6                            ; End of function NewPLC
000017F6                            
000017F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017F6                            
000017F6                            ; ---------------------------------------------------------------------------
000017F6                            ; Subroutine to	clear the pattern load cues
000017F6                            ; ---------------------------------------------------------------------------
000017F6                            
000017F6                            ; Clear the pattern load queue ($FFF680 - $FFF700)
000017F6                            
000017F6                            
000017F6                            ClearPLC:
000017F6 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
000017FA 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
000017FC                            
000017FC                            	@loop:
000017FC 429A                       		clr.l	(a2)+
000017FE 51C8 FFFC                  		dbf	d0,@loop
00001802 4E75                       		rts	
00001804                            ; End of function ClearPLC
00001804                            
00001804                            ; ---------------------------------------------------------------------------
00001804                            ; Subroutine to	use graphics listed in a pattern load cue
00001804                            ; ---------------------------------------------------------------------------
00001804                            
00001804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001804                            
00001804                            
00001804                            RunPLC:
00001804 4AB8 F680                  		tst.l	(v_plc_buffer).w
00001808 6700                       		beq.s	Rplc_Exit
0000180A 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000180E 6600                       		bne.s	Rplc_Exit
00001810 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001814 47F9 0000 145A             		lea	(NemPCD_WriteRowToVDP).l,a3
0000181A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000181E 3418                       		move.w	(a0)+,d2
00001820 6A00                       		bpl.s	loc_160E
00001822 D6FC 000A                  		adda.w	#$A,a3
00001826                            
00001826                            loc_160E:
00001826 0242 7FFF                  		andi.w	#$7FFF,d2
0000182A 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
0000182E 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001832 1A18                       		move.b	(a0)+,d5
00001834 E145                       		asl.w	#8,d5
00001836 1A18                       		move.b	(a0)+,d5
00001838 7C10                       		moveq	#$10,d6
0000183A 7000                       		moveq	#0,d0
0000183C 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001840 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001844 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001848 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000184C 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001850 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001854 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001858                            
00001858                            Rplc_Exit:
00001858 4E75                       		rts	
0000185A                            ; End of function RunPLC
0000185A                            
0000185A                            
0000185A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185A                            
0000185A                            
0000185A                            sub_1642:
0000185A 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000185E 6700 0000                  		beq.w	locret_16DA
00001862 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001868 7000                       		moveq	#0,d0
0000186A 3038 F684                  		move.w	($FFFFF684).w,d0
0000186E 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001874 6000                       		bra.s	loc_1676
00001876                            ; End of function sub_1642
00001876                            
00001876                            
00001876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001876                            
00001876                            
00001876                            ; sub_165E:
00001876                            ProcessDPLC2:
00001876 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000187A 6700                       		beq.s	locret_16DA
0000187C 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001882 7000                       		moveq	#0,d0
00001884 3038 F684                  		move.w	($FFFFF684).w,d0
00001888 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000188E                            
0000188E                            loc_1676:
0000188E 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001894 E588                       		lsl.l	#2,d0
00001896 E448                       		lsr.w	#2,d0
00001898 0040 4000                  		ori.w	#$4000,d0
0000189C 4840                       		swap	d0
0000189E 2880                       		move.l	d0,(a4)
000018A0 594C                       		subq.w	#4,a4
000018A2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000018A6 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
000018AA 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018AE 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018B2 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018B6 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018BA 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018BE 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000018C2                            
000018C2                            loc_16AA:
000018C2 3A7C 0008                  		movea.w	#8,a5
000018C6 6100 FB5C                  		bsr.w	NemPCD_NewRow
000018CA 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
000018CE 6700                       		beq.s	loc_16DC
000018D0 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018D4 66EC                       		bne.s	loc_16AA
000018D6 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000018DA 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000018DE 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018E2 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018E6 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018EA 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018EE 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018F2                            
000018F2                            locret_16DA:
000018F2 4E75                       		rts	
000018F4                            ; ===========================================================================
000018F4                            
000018F4                            loc_16DC:
000018F4 41F8 F680                  		lea	(v_plc_buffer).w,a0
000018F8 7015                       		moveq	#$15,d0
000018FA                            
000018FA                            loc_16E2:
000018FA 20E8 0006                  		move.l	6(a0),(a0)+
000018FE 51C8 FFFA                  		dbf	d0,loc_16E2
00001902 4E75                       		rts	
00001904                            ; End of function ProcessDPLC2
00001904                            
00001904                            ; ---------------------------------------------------------------------------
00001904                            ; Subroutine to	execute	the pattern load cue
00001904                            ; ---------------------------------------------------------------------------
00001904                            
00001904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001904                            
00001904                            
00001904                            QuickPLC:
00001904 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000190A D040                       		add.w	d0,d0
0000190C 3031 0000                  		move.w	(a1,d0.w),d0
00001910 43F1 0000                  		lea	(a1,d0.w),a1
00001914 3219                       		move.w	(a1)+,d1	; get length of PLC
00001916                            
00001916                            	Qplc_Loop:
00001916 2059                       		movea.l	(a1)+,a0	; get art pointer
00001918 7000                       		moveq	#0,d0
0000191A 3019                       		move.w	(a1)+,d0	; get VRAM address
0000191C E588                       		lsl.l	#2,d0
0000191E E448                       		lsr.w	#2,d0
00001920 0040 4000                  		ori.w	#$4000,d0
00001924 4840                       		swap	d0
00001926 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000192C 6100 FA7E                  		bsr.w	NemDec		; decompress
00001930 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001934 4E75                       		rts	
00001936                            ; End of function QuickPLC
00001936                            
00001936                            		include	"_inc\Enigma Decompression.asm"
00001936                            ; ---------------------------------------------------------------------------
00001936                            ; Enigma decompression algorithm
00001936                            
00001936                            ; input:
00001936                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001936                            ;	a0 = source address
00001936                            ;	a1 = destination address
00001936                            
00001936                            ; usage:
00001936                            ;	lea	(source).l,a0
00001936                            ;	lea	(destination).l,a1
00001936                            ;	move.w	#arttile,d0
00001936                            ;	bsr.w	EniDec
00001936                            
00001936                            ; See http://www.segaretro.org/Enigma_compression for format description
00001936                            ; ---------------------------------------------------------------------------
00001936                            
00001936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001936                            
00001936                            
00001936                            EniDec:
00001936 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000193A 3640                       		movea.w	d0,a3		; store starting art tile
0000193C 1018                       		move.b	(a0)+,d0
0000193E 4880                       		ext.w	d0
00001940 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001942 1818                       		move.b	(a0)+,d4
00001944 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001946 3458                       		movea.w	(a0)+,a2
00001948 D4CB                       		adda.w	a3,a2		; store incremental copy word
0000194A 3858                       		movea.w	(a0)+,a4
0000194C D8CB                       		adda.w	a3,a4		; store literal copy word
0000194E 1A18                       		move.b	(a0)+,d5
00001950 E145                       		asl.w	#8,d5
00001952 1A18                       		move.b	(a0)+,d5	; get first word in format list
00001954 7C10                       		moveq	#16,d6		; initial shift value
00001956                            ; loc_173E:
00001956                            Eni_Loop:
00001956 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
00001958 3E06                       		move.w	d6,d7
0000195A 9E40                       		sub.w	d0,d7
0000195C 3205                       		move.w	d5,d1
0000195E EE69                       		lsr.w	d7,d1
00001960 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001964 3401                       		move.w	d1,d2		; and copy it
00001966 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000196A 6400                       		bhs.s	@sevenbitentry
0000196C 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
0000196E E24A                       		lsr.w	#1,d2
00001970                            ; loc_1758:
00001970                            @sevenbitentry:
00001970 6100 0000                  		bsr.w	EniDec_FetchByte
00001974 0242 000F                  		andi.w	#$F,d2		; get repeat count
00001978 E849                       		lsr.w	#4,d1
0000197A D241                       		add.w	d1,d1
0000197C 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001980                            ; End of function EniDec
00001980                            
00001980                            ; ===========================================================================
00001980                            ; loc_1768:
00001980                            EniDec_00:
00001980 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001982 524A                       		addq.w	#1,a2		; increment it
00001984 51CA FFFA                  		dbf	d2,@loop	; repeat
00001988 60CC                       		bra.s	Eni_Loop
0000198A                            ; ===========================================================================
0000198A                            ; loc_1772:
0000198A                            EniDec_01:
0000198A 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000198C 51CA FFFC                  		dbf	d2,@loop	; repeat
00001990 60C4                       		bra.s	Eni_Loop
00001992                            ; ===========================================================================
00001992                            ; loc_177A:
00001992                            EniDec_100:
00001992 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001996                            ; loc_177E:
00001996 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001998 51CA FFFC                  		dbf	d2,@loop	; repeat
0000199C                            
0000199C 60B8                       		bra.s	Eni_Loop
0000199E                            ; ===========================================================================
0000199E                            ; loc_1786:
0000199E                            EniDec_101:
0000199E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000019A2                            ; loc_178A:
000019A2 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000019A4 5241                       		addq.w	#1,d1		; increment
000019A6 51CA FFFA                  		dbf	d2,@loop	; repeat
000019AA                            
000019AA 60AA                       		bra.s	Eni_Loop
000019AC                            ; ===========================================================================
000019AC                            ; loc_1794:
000019AC                            EniDec_110:
000019AC 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000019B0                            ; loc_1798:
000019B0 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000019B2 5341                       		subq.w	#1,d1		; decrement
000019B4 51CA FFFA                  		dbf	d2,@loop	; repeat
000019B8                            
000019B8 609C                       		bra.s	Eni_Loop
000019BA                            ; ===========================================================================
000019BA                            ; loc_17A2:
000019BA                            EniDec_111:
000019BA 0C42 000F                  		cmpi.w	#$F,d2
000019BE 6700                       		beq.s	EniDec_Done
000019C0                            ; loc_17A8:
000019C0 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
000019C4 32C1                       		move.w	d1,(a1)+	; copy it
000019C6 51CA FFF8                  		dbf	d2,@loop	; and repeat
000019CA                            
000019CA 608A                       		bra.s	Eni_Loop
000019CC                            ; ===========================================================================
000019CC                            ; loc_17B4:
000019CC                            EniDec_Index:
000019CC 60B2                       		bra.s	EniDec_00
000019CE 60B0                       		bra.s	EniDec_00
000019D0 60B8                       		bra.s	EniDec_01
000019D2 60B6                       		bra.s	EniDec_01
000019D4 60BC                       		bra.s	EniDec_100
000019D6 60C6                       		bra.s	EniDec_101
000019D8 60D2                       		bra.s	EniDec_110
000019DA 60DE                       		bra.s	EniDec_111
000019DC                            ; ===========================================================================
000019DC                            ; loc_17C4:
000019DC                            EniDec_Done:
000019DC 5348                       		subq.w	#1,a0		; go back by one byte
000019DE 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
000019E2 6600                       		bne.s	@notnewbyte	; if not, branch
000019E4 5348                       		subq.w	#1,a0		; and another one if needed
000019E6                            ; loc_17CE:
000019E6                            @notnewbyte:
000019E6 3008                       		move.w	a0,d0
000019E8 E248                       		lsr.w	#1,d0		; are we on an odd byte?
000019EA 6400                       		bcc.s	@evenbyte	; if not, branch
000019EC 5248                       		addq.w	#1,a0		; ensure we're on an even byte
000019EE                            ; loc_17D6:
000019EE                            @evenbyte:
000019EE 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019F2 4E75                       		rts	
000019F4                            
000019F4                            ; ---------------------------------------------------------------------------
000019F4                            ; Part of the Enigma decompressor
000019F4                            ; Fetches an inline copy value and stores it in d1
000019F4                            ; ---------------------------------------------------------------------------
000019F4                            
000019F4                            ; =============== S U B R O U T I N E =======================================
000019F4                            
000019F4                            ; loc_17DC:
000019F4                            EniDec_FetchInlineValue:
000019F4 360B                       		move.w	a3,d3		; copy starting art tile
000019F6 1204                       		move.b	d4,d1		; copy PCCVH bitfield
000019F8 D201                       		add.b	d1,d1		; is the priority bit set?
000019FA 6400                       		bcc.s	@skippriority	; if not, branch
000019FC 5346                       		subq.w	#1,d6
000019FE 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001A00 6700                       		beq.s	@skippriority	; if not, branch
00001A02 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
00001A06                            ; loc_17EE:
00001A06                            @skippriority:
00001A06 D201                       		add.b	d1,d1		; is the high palette line bit set?
00001A08 6400                       		bcc.s	@skiphighpal	; if not, branch
00001A0A 5346                       		subq.w	#1,d6
00001A0C 0D05                       		btst	d6,d5
00001A0E 6700                       		beq.s	@skiphighpal
00001A10 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001A14                            ; loc_17FC:
00001A14                            @skiphighpal:
00001A14 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001A16 6400                       		bcc.s	@skiplowpal	; if not, branch
00001A18 5346                       		subq.w	#1,d6
00001A1A 0D05                       		btst	d6,d5
00001A1C 6700                       		beq.s	@skiplowpal
00001A1E 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001A22                            ; loc_180A:
00001A22                            @skiplowpal:
00001A22 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001A24 6400                       		bcc.s	@skipyflip	; if not, branch
00001A26 5346                       		subq.w	#1,d6
00001A28 0D05                       		btst	d6,d5
00001A2A 6700                       		beq.s	@skipyflip
00001A2C 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001A30                            ; loc_1818:
00001A30                            @skipyflip:
00001A30 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001A32 6400                       		bcc.s	@skipxflip	; if not, branch
00001A34 5346                       		subq.w	#1,d6
00001A36 0D05                       		btst	d6,d5
00001A38 6700                       		beq.s	@skipxflip
00001A3A 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001A3E                            ; loc_1826:
00001A3E                            @skipxflip:
00001A3E 3205                       		move.w	d5,d1
00001A40 3E06                       		move.w	d6,d7
00001A42 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001A44 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001A46 3C07                       		move.w	d7,d6
00001A48 0646 0010                  		addi.w	#16,d6
00001A4C 4447                       		neg.w	d7		; calculate bit deficit
00001A4E EF69                       		lsl.w	d7,d1		; and make space for that many bits
00001A50 1A10                       		move.b	(a0),d5		; get next byte
00001A52 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
00001A54 DE47                       		add.w	d7,d7
00001A56 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
00001A5A D245                       		add.w	d5,d1		; combine upper bits with lower bits
00001A5C                            ; loc_1844:
00001A5C                            @maskvalue:
00001A5C 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A5E D040                       		add.w	d0,d0
00001A60 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A64 D243                       		add.w	d3,d1		; add starting art tile
00001A66 1A18                       		move.b	(a0)+,d5
00001A68 E14D                       		lsl.w	#8,d5
00001A6A 1A18                       		move.b	(a0)+,d5	; get next word
00001A6C 4E75                       		rts	
00001A6E                            ; ===========================================================================
00001A6E                            ; loc_1856:
00001A6E                            @enoughbits:
00001A6E 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A70 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A72 300D                       		move.w	a5,d0
00001A74 D040                       		add.w	d0,d0
00001A76 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A7A D243                       		add.w	d3,d1	; add starting art tile
00001A7C 300D                       		move.w	a5,d0
00001A7E 6000                       		bra.s	EniDec_FetchByte
00001A80                            ; ===========================================================================
00001A80                            ; loc_1868:
00001A80                            @justenough:
00001A80 7C10                       		moveq	#16,d6	; reset shift value
00001A82 60D8                       		bra.s	@maskvalue
00001A84                            ; ===========================================================================
00001A84                            ; word_186C:
00001A84                            EniDec_Masks:
00001A84 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A8C 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A94 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A9C 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001AA4                            
00001AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA4                            
00001AA4                            ; sub_188C:
00001AA4                            EniDec_FetchByte:
00001AA4 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001AA6 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001AAA 6400                       		bhs.s	@locret	; if not, branch
00001AAC 5046                       		addq.w	#8,d6
00001AAE E145                       		asl.w	#8,d5
00001AB0 1A18                       		move.b	(a0)+,d5
00001AB2                            @locret:
00001AB2 4E75                       		rts	
00001AB4                            ; End of function EniDec_FetchByte
00001AB4                            ; End of function EniDec_FetchByte
00001AB4                            		include	"_inc\Kosinski Decompression.asm"
00001AB4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001AB4                            ; ---------------------------------------------------------------------------
00001AB4                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001AB4                            ; (sometimes called KOZINSKI decompression)
00001AB4                            ;
00001AB4                            ; ARGUMENTS:
00001AB4                            ; a0 = source address
00001AB4                            ; a1 = destination address
00001AB4                            ;
00001AB4                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001AB4                            ; New faster version by written by vladikcomper, with additional improvements by
00001AB4                            ; MarkeyJester and Flamewing
00001AB4                            ; Converted to ASM68K by Beta Filter.
00001AB4                            ; ---------------------------------------------------------------------------
00001AB4 =00000001                  Kos_UseLUT: equ 1
00001AB4 =00000003                  Kos_LoopUnroll: equ 3
00001AB4 =00000001                  Kos_ExtremeUnrolling: equ 1
00001AB4                            
00001AB4                            Kos_RunBitStream macro
00001AB4                                dbra    d2,@skip\@
00001AB4                                moveq   #7,d2                   ; Set repeat count to 8.
00001AB4                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001AB4                                not.w   d3                      ; Have all 16 bits been used up?
00001AB4                                bne.s   @skip\@                   ; Branch if not.
00001AB4                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001AB4                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001AB4                                if Kos_UseLUT=1
00001AB4                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001AB4                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001AB4                                endif
00001AB4                            @skip\@
00001AB4                                endm
00001AB4                            
00001AB4                            Kos_ReadBit macro
00001AB4                                if Kos_UseLUT=1
00001AB4                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001AB4                                else
00001AB4                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001AB4                                endif
00001AB4                                endm
00001AB4                            ; ===========================================================================
00001AB4                            ; KozDec@193A:
00001AB4                            KosDec:
00001AB4 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001AB6 7000                           moveq   #0,d0
00001AB8 7200                           moveq   #0,d1
00001ABA 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001ABE 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001AC0 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001AC2 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001AC6 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001ACA 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001ACC 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001ACE 6000                           bra.s   @FetchNewCode
00001AD0                            ; ---------------------------------------------------------------------------
00001AD0                            @FetchCodeLoop:
00001AD0                                ; Code 1 (Uncompressed byte).
00001AE8 12D8                           move.b  (a0)+,(a1)+
00001AEA                            
00001AEA                            @FetchNewCode:
00001AEC 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001AEE                            
00001AEE                                ; Codes 00 and 01.
00001AEE 7AFF                           moveq   #-1,d5
00001AF0 4BD1                           lea (a1),a5
00001B0C 6500 0000                      bcs.w   @Code_01
00001B10                            
00001B10                                ; Code 00 (Dictionary ref. short).
00001B2A 6500                           bcs.s   @Copy45
00001B46 6500                           bcs.s   @Copy3
00001B60 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B62 DAC5                           adda.w  d5,a5
00001B64 12DD                           move.b  (a5)+,(a1)+
00001B66 12DD                           move.b  (a5)+,(a1)+
00001B68 6080                           bra.s   @FetchNewCode
00001B6A                            ; ---------------------------------------------------------------------------
00001B6A                            @Copy3:
00001B82 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B84 DAC5                           adda.w  d5,a5
00001B86 12DD                           move.b  (a5)+,(a1)+
00001B88 12DD                           move.b  (a5)+,(a1)+
00001B8A 12DD                           move.b  (a5)+,(a1)+
00001B8C 6000 FF5C                      bra.w   @FetchNewCode
00001B90                            ; ---------------------------------------------------------------------------
00001B90                            @Copy45:
00001BAA 6500                           bcs.s   @Copy5
00001BC4 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001BC6 DAC5                           adda.w  d5,a5
00001BC8 12DD                           move.b  (a5)+,(a1)+
00001BCA 12DD                           move.b  (a5)+,(a1)+
00001BCC 12DD                           move.b  (a5)+,(a1)+
00001BCE 12DD                           move.b  (a5)+,(a1)+
00001BD0 6000 FF18                      bra.w   @FetchNewCode
00001BD4                            ; ---------------------------------------------------------------------------
00001BD4                            @Copy5:
00001BEC 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001BEE DAC5                           adda.w  d5,a5
00001BF0 12DD                           move.b  (a5)+,(a1)+
00001BF2 12DD                           move.b  (a5)+,(a1)+
00001BF4 12DD                           move.b  (a5)+,(a1)+
00001BF6 12DD                           move.b  (a5)+,(a1)+
00001BF8 12DD                           move.b  (a5)+,(a1)+
00001BFA 6000 FEEE                      bra.w   @FetchNewCode
00001BFE                            ; ---------------------------------------------------------------------------
00001BFE                            ; ---------------------------------------------------------------------------
00001BFE                            @Code_01:
00001BFE 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001C00                                ; Code 01 (Dictionary ref. long / special).
00001C18 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001C1A 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001C1C 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001C1E EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001C20 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001C22 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001C24 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001C26                            
00001C26                                ; special mode (extended counter)
00001C26 1818                           move.b  (a0)+,d4                ; Read cnt
00001C28 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001C2A 5304                           subq.b  #1,d4
00001C2C 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001C30                            
00001C30 DAC5                           adda.w  d5,a5
00001C32 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C34 3C04                           move.w  d4,d6
00001C36 4646                           not.w   d6
00001C38 CC47                           and.w   d7,d6
00001C3A DC46                           add.w   d6,d6
00001C3C E64C                           lsr.w   #Kos_LoopUnroll,d4
00001C3E 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001C42                            ; ---------------------------------------------------------------------------
00001C42                            @largecopy:
00001C42                                rept (1<<Kos_LoopUnroll)
00001C42                                move.b  (a5)+,(a1)+
00001C42 12DD 12DD 12DD 12DD 12DD+      endr
00001C52 51CC FFEE                      dbra    d4,@largecopy
00001C56 6000 FE92                      bra.w   @FetchNewCode
00001C5A                            ; ---------------------------------------------------------------------------
00001C5A                            @StreamCopy:
00001C5A DAC5                           adda.w  d5,a5
00001C5C 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C5E BF44                           eor.w   d7,d4
00001C60 D844                           add.w   d4,d4
00001C62 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C66                            ; ---------------------------------------------------------------------------
00001C66                            @mediumcopy:
00001C66                                rept 8
00001C66                                move.b  (a5)+,(a1)+
00001C66 12DD 12DD 12DD 12DD 12DD+      endr
00001C76 6000 FE72                      bra.w   @FetchNewCode
00001C7A                            ; ---------------------------------------------------------------------------
00001C7A                            @Quit:
00001C7A 4E75                           rts                             ; End of function KosDec.
00001C7C                            ; ===========================================================================
00001C7C                            KosDec_ByteMap:
00001C7C 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C8C 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C9C 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001CAC 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001CBC 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001CCC 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001CDC 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001CEC 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001CFC 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001D0C 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001D1C 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001D2C 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001D3C 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001D4C 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001D5C 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D6C 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D7C                            ; ===========================================================================
00001D7C                            ; ===========================================================================
00001D7C                            
00001D7C                            		include	"_inc\PaletteCycle.asm"
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            ; Palette cycling routine loading subroutine
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            
00001D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7C                            
00001D7C                            
00001D7C                            PaletteCycle:
00001D7C 6100 0000                  		bsr.w	PalCycle_SuperSonic	
00001D80 7400                       		moveq	#0,d2
00001D82 7000                       		moveq	#0,d0
00001D84 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D88 D040                       		add.w	d0,d0
00001D8A 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D8E 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D92                            ; End of function PaletteCycle
00001D92                            
00001D92                            ; ===========================================================================
00001D92                            ; ---------------------------------------------------------------------------
00001D92                            ; Palette cycling routines
00001D92                            ; ---------------------------------------------------------------------------
00001D92 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D94 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D96 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D98 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D9A 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D9C 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D9E 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001DA0                            
00001DA0                            
00001DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA0                            
00001DA0                            
00001DA0                            PCycle_Title:
00001DA0 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001DA6 6000                       		bra.s	PCycGHZ_Go
00001DA8                            ; ===========================================================================
00001DA8                            
00001DA8                            PCycle_GHZ:
00001DA8 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001DAE                            
00001DAE                            PCycGHZ_Go:
00001DAE 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001DB2 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001DB4                            
00001DB4 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001DBA 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001DBE 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001DC2 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001DC6 E748                       		lsl.w	#3,d0
00001DC8 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001DCC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DD0 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001DD4                            
00001DD4                            PCycGHZ_Skip:
00001DD4 4E75                       		rts	
00001DD6                            ; End of function PCycle_GHZ
00001DD6                            
00001DD6                            
00001DD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DD6                            
00001DD6                            
00001DD6                            PCycle_LZ:
00001DD6                            ; Waterfalls
00001DD6 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001DDA 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001DDC                            
00001DDC 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001DE2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DE6 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001DEA 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001DEE E748                       		lsl.w	#3,d0
00001DF0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001DF6 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001DFC 6600                       		bne.s	PCycLZ_NotSBZ3
00001DFE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001E04                            
00001E04                            	PCycLZ_NotSBZ3:
00001E04 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001E08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E0C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E10 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001E14 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E18 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E1C                            
00001E1C                            PCycLZ_Skip1:
00001E1C                            ; Conveyor belts
00001E1C                            		;move.w	(v_framecount).w,d0
00001E1C                            		;andi.w	#7,d0
00001E1C                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001E1C                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001E1C                            		;moveq	#1,d1
00001E1C                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001E1C                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001E1C                            		;neg.w	d1
00001E1C                            
00001E1C                            	;PCycLZ_NoRev:
00001E1C                            		;move.w	(v_pal_buffer).w,d0
00001E1C                            		;andi.w	#3,d0
00001E1C                            		;add.w	d1,d0
00001E1C                            		;cmpi.w	#3,d0
00001E1C                            		;bcs.s	loc_1A0A
00001E1C                            		;move.w	d0,d1
00001E1C                            		;moveq	#0,d0
00001E1C                            		;tst.w	d1
00001E1C                            		;bpl.s	loc_1A0A
00001E1C                            		;moveq	#2,d0
00001E1C                            
00001E1C                            ;loc_1A0A:
00001E1C                            		;move.w	d0,(v_pal_buffer).w
00001E1C                            		;add.w	d0,d0
00001E1C                            		;move.w	d0,d1
00001E1C                            		;add.w	d0,d0
00001E1C                            		;add.w	d1,d0
00001E1C                            		;lea	(Pal_LZCyc2).l,a0
00001E1C                            		;lea	(v_pal_dry+$76).w,a1
00001E1C                            		;move.l	(a0,d0.w),(a1)+
00001E1C                            		;move.w	4(a0,d0.w),(a1)
00001E1C                            		;lea	(Pal_LZCyc3).l,a0
00001E1C                            		;lea	(v_pal_water+$76).w,a1
00001E1C                            		;move.l	(a0,d0.w),(a1)+
00001E1C                            		;move.w	4(a0,d0.w),(a1)
00001E1C                            
00001E1C                            ;PCycLZ_Skip2:
00001E1C 4E75                       		rts	
00001E1E                            ; End of function PCycle_LZ
00001E1E                            
00001E1E                            ; ===========================================================================
00001E1E 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001E26                            ; ===========================================================================
00001E26                            
00001E26                            PCycle_MZ:
00001E26 4E75                       		rts	
00001E28                            
00001E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E28                            
00001E28                            
00001E28                            PalCycle_SLZ:
00001E28 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E2C 6A00                       		bpl.s	locret_1A80
00001E2E 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001E34 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E38 5240                       		addq.w	#1,d0
00001E3A 0C40 0006                  		cmpi.w	#6,d0
00001E3E 6500                       		bcs.s	loc_1A60
00001E40 7000                       		moveq	#0,d0
00001E42                            
00001E42                            loc_1A60:
00001E42 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E46 3200                       		move.w	d0,d1
00001E48 D241                       		add.w	d1,d1
00001E4A D041                       		add.w	d1,d0
00001E4C D040                       		add.w	d0,d0
00001E4E 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001E54 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001E58 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001E5C 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E62                            
00001E62                            locret_1A80:
00001E62 4E75                       		rts	
00001E64                            ; End of function PalCycle_SLZ
00001E64                            
00001E64                            
00001E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E64                            
00001E64                            
00001E64                            PalCycle_SYZ:
00001E64 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E68 6A00                       		bpl.s	locret_1AC6
00001E6A 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E70 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E74 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E78 0240 0003                  		andi.w	#3,d0
00001E7C E548                       		lsl.w	#2,d0
00001E7E 3200                       		move.w	d0,d1
00001E80 D040                       		add.w	d0,d0
00001E82 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E88 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E90 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E94 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E9A 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E9E 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001EA2 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001EA8                            
00001EA8                            locret_1AC6:
00001EA8 4E75                       		rts	
00001EAA                            ; End of function PalCycle_SYZ
00001EAA                            
00001EAA                            
00001EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAA                            
00001EAA                            
00001EAA                            PalCycle_SBZ:
00001EAA 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001EB0 4A38 FE11                  		tst.b	(v_act).w
00001EB4 6700                       		beq.s	loc_1ADA
00001EB6 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001EBC                            
00001EBC                            loc_1ADA:
00001EBC 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001EC0 321A                       		move.w	(a2)+,d1
00001EC2                            
00001EC2                            loc_1AE0:
00001EC2 5311                       		subq.b	#1,(a1)
00001EC4 6B00                       		bmi.s	loc_1AEA
00001EC6 5489                       		addq.l	#2,a1
00001EC8 5C8A                       		addq.l	#6,a2
00001ECA 6000                       		bra.s	loc_1B06
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1AEA:
00001ECC 12DA                       		move.b	(a2)+,(a1)+
00001ECE 1011                       		move.b	(a1),d0
00001ED0 5200                       		addq.b	#1,d0
00001ED2 B01A                       		cmp.b	(a2)+,d0
00001ED4 6500                       		bcs.s	loc_1AF6
00001ED6 7000                       		moveq	#0,d0
00001ED8                            
00001ED8                            loc_1AF6:
00001ED8 12C0                       		move.b	d0,(a1)+
00001EDA 0240 000F                  		andi.w	#$F,d0
00001EDE D040                       		add.w	d0,d0
00001EE0 305A                       		movea.w	(a2)+,a0
00001EE2 365A                       		movea.w	(a2)+,a3
00001EE4 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001EE8                            
00001EE8                            loc_1B06:
00001EE8 51C9 FFD8                  		dbf	d1,loc_1AE0
00001EEC 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001EF0 6A00                       		bpl.s	locret_1B64
00001EF2 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001EF8 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001EFE 4A38 FE11                  		tst.b	(v_act).w
00001F02 6700                       		beq.s	loc_1B2E
00001F04 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001F0A 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001F10                            
00001F10                            loc_1B2E:
00001F10 72FF                       		moveq	#-1,d1
00001F12 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001F16 6700                       		beq.s	loc_1B38
00001F18 4441                       		neg.w	d1
00001F1A                            
00001F1A                            loc_1B38:
00001F1A 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001F1E 0240 0003                  		andi.w	#3,d0
00001F22 D041                       		add.w	d1,d0
00001F24 0C40 0003                  		cmpi.w	#3,d0
00001F28 6500                       		bcs.s	loc_1B52
00001F2A 3200                       		move.w	d0,d1
00001F2C 7000                       		moveq	#0,d0
00001F2E 4A41                       		tst.w	d1
00001F30 6A00                       		bpl.s	loc_1B52
00001F32 7002                       		moveq	#2,d0
00001F34                            
00001F34                            loc_1B52:
00001F34 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001F38 D040                       		add.w	d0,d0
00001F3A 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001F3E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001F42 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001F46                            
00001F46                            locret_1B64:
00001F46 4E75                       		rts	
00001F48                            ; End of function PalCycle_SBZ
00001F48                            
00001F48                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001F48                            
00001F48                            ; sub_213E:
00001F48                            PalCycle_SuperSonic:
00001F48 7000                       		moveq	#0,d0
00001F4A 1038 F5D8                  		move.b	(Super_Sonic_palette).w,d0
00001F4E 6700                       		beq.s	PalCycle_SuperSonic_return	; rts	; return, if Sonic isn't super
00001F50 6B00 0000                  		bmi.w	PalCycle_SuperSonic_normal	; branch, if fade-in is done
00001F54 5300                       		subq.b	#1,d0
00001F56 6600                       		bne.s	PalCycle_SuperSonic_revert	; branch for values greater than 1
00001F58                            
00001F58                            		; fade from Sonic's to Super Sonic's palette
00001F58                            		; run frame timer
00001F58 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F5C 6A00                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F5E 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F64                            
00001F64                            		; increment palette frame and update Sonic's palette
00001F64 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F6A 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F6E 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; 1 palette entry = 1 word, Sonic uses 4 shades of blue
00001F72 0C78 0030 F5DC             		cmpi.w	#$30,(Palette_frame).w	; has palette cycle reached the 6th frame?
00001F78 6500                       		blo.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F7A 11FC 00FF F5D8             		move.b	#-1,(Super_Sonic_palette).w	; mark fade-in as done
00001F80 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w ; unfreeze Sonic	
00001F86 6000                       		bra.s		PalCycle_SuperSonic_palettes
00001F88                            
00001F88                            PalCycle_SuperSonic_return:
00001F88 4E75                       		rts
00001F8A                            ; ===========================================================================
00001F8A                            ; loc_2188:
00001F8A                            PalCycle_SuperSonic_revert:	; runs the fade in transition backwards
00001F8A                            		; run frame timer
00001F8A 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F8E 6AF8                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F90 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F96                            
00001F96                            		; decrement palette frame and update Sonic's palette
00001F96 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F9C 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001FA0 5178 F5DC                  		subq.w	#8,(Palette_frame).w	; previous frame
00001FA4 6400                       		bcc.s	PalCycle_SuperSonic_palettes			; branch, if it isn't the first frame
00001FA6 31FC 0000 F5DC             		move.w	#0,(Palette_frame).w
00001FAC 11FC 0000 F5D8             		move.b	#0,(Super_Sonic_palette).w	; stop palette cycle
00001FB2                            
00001FB2                            PalCycle_SuperSonic_palettes:
00001FB2 43F8 FB04                  		lea	(v_pal_dry+4).w,a1
00001FB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001FBA 22B0 0004                  		move.l	4(a0,d0.w),(a1)	
00001FBE 4E75                       		rts
00001FC0                            ; ===========================================================================
00001FC0                            ; loc_21E6:
00001FC0                            PalCycle_SuperSonic_normal:
00001FC0                            		; run frame timer
00001FC0 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001FC4 6AC2                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001FC6 11FC 0007 F5DE             		move.b	#7,(Palette_timer).w
00001FCC                            
00001FCC                            		; increment palette frame and update Sonic's palette
00001FCC 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001FD2 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001FD6 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; next frame
00001FDA 0C78 0078 F5DC             		cmpi.w	#$78,(Palette_frame).w	; is it the last frame?
00001FE0 63D0                       		bls.s	PalCycle_SuperSonic_palettes			; if not, branch
00001FE2 31FC 0030 F5DC             		move.w	#$30,(Palette_frame).w	; reset frame counter (Super Sonic's normal palette cycle starts at $30. Everything before that is for the palette fade)
00001FE8 60C8                       		bra.s	PalCycle_SuperSonic_palettes
00001FEA 4E75                       		rts
00001FEC                            ; End of function PalCycle_SuperSonic
00001FEC                            
00001FEC                            
00001FEC                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
00001FEC                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
0000206C                            
0000206C                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
0000208C                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
000020AC                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
000020CC                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
000020DE                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
000020F0                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00002158                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
0000217C                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
0000219C                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
000021AC                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
000021CC                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
000021DC                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
000021FC                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
0000220C                            
0000220C                            		include	"_inc\SBZ Palette Scripts.asm"
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            ; Scrap Brain Zone palette cycling script
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            
0000220C                            mSBZp:	macro duration,colors,paladdress,ramaddress
0000220C                            	dc.b duration, colors
0000220C                            	dc.w paladdress, ramaddress
0000220C                            	endm
0000220C                            
0000220C                            ; duration in frames, number of colors, palette address, RAM address
0000220C                            
0000220C                            Pal_SBZCycList1:
0000220C 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
0000220E 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002214 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000221A 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00002220 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00002226 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
0000222C 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00002232 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002238 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000223E 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002244                            end_SBZCycList1:
00002244                            	even
00002244                            
00002244                            Pal_SBZCycList2:
00002244 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002246 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000224C 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002252 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002258 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
0000225E 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002264 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000226A 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002270                            end_SBZCycList2:
00002270                            	even
00002270                            	even
00002270                            
00002270                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00002280                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00002290                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
000022A0                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
000022AC                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
000022BC                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
000022CC                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000022EC                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000022F6                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002306                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
00002312                            ; ---------------------------------------------------------------------------
00002312                            ; Subroutine to	fade in from black
00002312                            ; ---------------------------------------------------------------------------
00002312                            
00002312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002312                            
00002312                            
00002312                            PaletteFadeIn:
00002312 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002318                            
00002318                            PalFadeIn_Alt:				; start position and size are already set
00002318 7000                       		moveq	#0,d0
0000231A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000231E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002322 D0C0                       		adda.w	d0,a0
00002324 7200                       		moveq	#cBlack,d1
00002326 1038 F627                  		move.b	(v_pfade_size).w,d0
0000232A                            
0000232A                            	@fill:
0000232A 30C1                       		move.w	d1,(a0)+
0000232C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
00002330                            
00002330 383C 0015                  		move.w	#$15,d4
00002334                            
00002334                            	@mainloop:
00002334 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000233A 6100 0000                  		bsr.w	WaitForVBla
0000233E 6100                       		bsr.s	FadeIn_FromBlack
00002340 6100 F4C2                  		bsr.w	RunPLC
00002344 51CC FFEE                  		dbf	d4,@mainloop
00002348 4E75                       		rts	
0000234A                            ; End of function PaletteFadeIn
0000234A                            
0000234A                            
0000234A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234A                            
0000234A                            
0000234A                            FadeIn_FromBlack:
0000234A 7000                       		moveq	#0,d0
0000234C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002350 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002354 1038 F626                  		move.b	(v_pfade_start).w,d0
00002358 D0C0                       		adda.w	d0,a0
0000235A D2C0                       		adda.w	d0,a1
0000235C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002360                            
00002360                            	@addcolour:
00002360 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002362 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002366                            
00002366 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000236C 6600                       		bne.s	@exit		; if not, branch
0000236E                            
0000236E 7000                       		moveq	#0,d0
00002370 41F8 FA80                  		lea	(v_pal_water).w,a0
00002374 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002378 1038 F626                  		move.b	(v_pfade_start).w,d0
0000237C D0C0                       		adda.w	d0,a0
0000237E D2C0                       		adda.w	d0,a1
00002380 1038 F627                  		move.b	(v_pfade_size).w,d0
00002384                            
00002384                            	@addcolour2:
00002384 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002386 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
0000238A                            
0000238A                            @exit:
0000238A 4E75                       		rts	
0000238C                            ; End of function FadeIn_FromBlack
0000238C                            
0000238C                            
0000238C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000238C                            
0000238C                            
0000238C                            FadeIn_AddColour:
0000238C                            @addblue:
0000238C 3419                       		move.w	(a1)+,d2
0000238E 3610                       		move.w	(a0),d3
00002390 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002392 6700                       		beq.s	@next		; if yes, branch
00002394 3203                       		move.w	d3,d1
00002396 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000239A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000239C 6200                       		bhi.s	@addgreen	; if yes, branch
0000239E 30C1                       		move.w	d1,(a0)+	; update palette
000023A0 4E75                       		rts	
000023A2                            ; ===========================================================================
000023A2                            
000023A2                            @addgreen:
000023A2 3203                       		move.w	d3,d1
000023A4 0641 0020                  		addi.w	#$20,d1		; increase green value
000023A8 B242                       		cmp.w	d2,d1
000023AA 6200                       		bhi.s	@addred
000023AC 30C1                       		move.w	d1,(a0)+	; update palette
000023AE 4E75                       		rts	
000023B0                            ; ===========================================================================
000023B0                            
000023B0                            @addred:
000023B0 5458                       		addq.w	#2,(a0)+	; increase red value
000023B2 4E75                       		rts	
000023B4                            ; ===========================================================================
000023B4                            
000023B4                            @next:
000023B4 5448                       		addq.w	#2,a0		; next colour
000023B6 4E75                       		rts	
000023B8                            ; End of function FadeIn_AddColour
000023B8                            
000023B8                            
000023B8                            ; ---------------------------------------------------------------------------
000023B8                            ; Subroutine to fade out to black
000023B8                            ; ---------------------------------------------------------------------------
000023B8                            
000023B8                            
000023B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023B8                            
000023B8                            
000023B8                            PaletteFadeOut:
000023B8 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000023BE 383C 0015                  		move.w	#$15,d4
000023C2                            
000023C2                            	@mainloop:
000023C2 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000023C8 6100 0000                  		bsr.w	WaitForVBla
000023CC 6100                       		bsr.s	FadeOut_ToBlack
000023CE 6100 F434                  		bsr.w	RunPLC
000023D2 51CC FFEE                  		dbf	d4,@mainloop
000023D6 4E75                       		rts	
000023D8                            ; End of function PaletteFadeOut
000023D8                            
000023D8                            
000023D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023D8                            
000023D8                            
000023D8                            FadeOut_ToBlack:
000023D8 7000                       		moveq	#0,d0
000023DA 41F8 FB00                  		lea	(v_pal_dry).w,a0
000023DE 1038 F626                  		move.b	(v_pfade_start).w,d0
000023E2 D0C0                       		adda.w	d0,a0
000023E4 1038 F627                  		move.b	(v_pfade_size).w,d0
000023E8                            
000023E8                            	@decolour:
000023E8 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000023EA 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000023EE                            
000023EE 7000                       		moveq	#0,d0
000023F0 41F8 FA80                  		lea	(v_pal_water).w,a0
000023F4 1038 F626                  		move.b	(v_pfade_start).w,d0
000023F8 D0C0                       		adda.w	d0,a0
000023FA 1038 F627                  		move.b	(v_pfade_size).w,d0
000023FE                            
000023FE                            	@decolour2:
000023FE 6100                       		bsr.s	FadeOut_DecColour
00002400 51C8 FFFC                  		dbf	d0,@decolour2
00002404 4E75                       		rts	
00002406                            ; End of function FadeOut_ToBlack
00002406                            
00002406                            
00002406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002406                            
00002406                            
00002406                            FadeOut_DecColour:
00002406                            @dered:
00002406 3410                       		move.w	(a0),d2
00002408 6700                       		beq.s	@next
0000240A 3202                       		move.w	d2,d1
0000240C 0241 000E                  		andi.w	#$E,d1
00002410 6700                       		beq.s	@degreen
00002412 5558                       		subq.w	#2,(a0)+	; decrease red value
00002414 4E75                       		rts	
00002416                            ; ===========================================================================
00002416                            
00002416                            @degreen:
00002416 3202                       		move.w	d2,d1
00002418 0241 00E0                  		andi.w	#$E0,d1
0000241C 6700                       		beq.s	@deblue
0000241E 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002422 4E75                       		rts	
00002424                            ; ===========================================================================
00002424                            
00002424                            @deblue:
00002424 3202                       		move.w	d2,d1
00002426 0241 0E00                  		andi.w	#$E00,d1
0000242A 6700                       		beq.s	@next
0000242C 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002430 4E75                       		rts	
00002432                            ; ===========================================================================
00002432                            
00002432                            @next:
00002432 5448                       		addq.w	#2,a0
00002434 4E75                       		rts	
00002436                            ; End of function FadeOut_DecColour
00002436                            
00002436                            ; ---------------------------------------------------------------------------
00002436                            ; Subroutine to	fade in from white (Special Stage)
00002436                            ; ---------------------------------------------------------------------------
00002436                            
00002436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002436                            
00002436                            
00002436                            PaletteWhiteIn:
00002436 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000243C 7000                       		moveq	#0,d0
0000243E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002442 1038 F626                  		move.b	(v_pfade_start).w,d0
00002446 D0C0                       		adda.w	d0,a0
00002448 323C 0EEE                  		move.w	#cWhite,d1
0000244C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002450                            
00002450                            	@fill:
00002450 30C1                       		move.w	d1,(a0)+
00002452 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002456                            
00002456 383C 0015                  		move.w	#$15,d4
0000245A                            
0000245A                            	@mainloop:
0000245A 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002460 6100 0000                  		bsr.w	WaitForVBla
00002464 6100                       		bsr.s	WhiteIn_FromWhite
00002466 6100 F39C                  		bsr.w	RunPLC
0000246A 51CC FFEE                  		dbf	d4,@mainloop
0000246E 4E75                       		rts	
00002470                            ; End of function PaletteWhiteIn
00002470                            
00002470                            
00002470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002470                            
00002470                            
00002470                            WhiteIn_FromWhite:
00002470 7000                       		moveq	#0,d0
00002472 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002476 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000247A 1038 F626                  		move.b	(v_pfade_start).w,d0
0000247E D0C0                       		adda.w	d0,a0
00002480 D2C0                       		adda.w	d0,a1
00002482 1038 F627                  		move.b	(v_pfade_size).w,d0
00002486                            
00002486                            	@decolour:
00002486 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002488 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000248C                            
0000248C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002492 6600                       		bne.s	@exit		; if not, branch
00002494 7000                       		moveq	#0,d0
00002496 41F8 FA80                  		lea	(v_pal_water).w,a0
0000249A 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000249E 1038 F626                  		move.b	(v_pfade_start).w,d0
000024A2 D0C0                       		adda.w	d0,a0
000024A4 D2C0                       		adda.w	d0,a1
000024A6 1038 F627                  		move.b	(v_pfade_size).w,d0
000024AA                            
000024AA                            	@decolour2:
000024AA 6100                       		bsr.s	WhiteIn_DecColour
000024AC 51C8 FFFC                  		dbf	d0,@decolour2
000024B0                            
000024B0                            	@exit:
000024B0 4E75                       		rts	
000024B2                            ; End of function WhiteIn_FromWhite
000024B2                            
000024B2                            
000024B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024B2                            
000024B2                            
000024B2                            WhiteIn_DecColour:
000024B2                            @deblue:
000024B2 3419                       		move.w	(a1)+,d2
000024B4 3610                       		move.w	(a0),d3
000024B6 B642                       		cmp.w	d2,d3
000024B8 6700                       		beq.s	@next
000024BA 3203                       		move.w	d3,d1
000024BC 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000024C0 6500                       		blo.s	@degreen
000024C2 B242                       		cmp.w	d2,d1
000024C4 6500                       		blo.s	@degreen
000024C6 30C1                       		move.w	d1,(a0)+
000024C8 4E75                       		rts	
000024CA                            ; ===========================================================================
000024CA                            
000024CA                            @degreen:
000024CA 3203                       		move.w	d3,d1
000024CC 0441 0020                  		subi.w	#$20,d1		; decrease green value
000024D0 6500                       		blo.s	@dered
000024D2 B242                       		cmp.w	d2,d1
000024D4 6500                       		blo.s	@dered
000024D6 30C1                       		move.w	d1,(a0)+
000024D8 4E75                       		rts	
000024DA                            ; ===========================================================================
000024DA                            
000024DA                            @dered:
000024DA 5558                       		subq.w	#2,(a0)+	; decrease red value
000024DC 4E75                       		rts	
000024DE                            ; ===========================================================================
000024DE                            
000024DE                            @next:
000024DE 5448                       		addq.w	#2,a0
000024E0 4E75                       		rts	
000024E2                            ; End of function WhiteIn_DecColour
000024E2                            
000024E2                            ; ---------------------------------------------------------------------------
000024E2                            ; Subroutine to fade to white (Special Stage)
000024E2                            ; ---------------------------------------------------------------------------
000024E2                            
000024E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024E2                            
000024E2                            
000024E2                            PaletteWhiteOut:
000024E2 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000024E8 383C 0015                  		move.w	#$15,d4
000024EC                            
000024EC                            	@mainloop:
000024EC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000024F2 6100 0000                  		bsr.w	WaitForVBla
000024F6 6100                       		bsr.s	WhiteOut_ToWhite
000024F8 6100 F30A                  		bsr.w	RunPLC
000024FC 51CC FFEE                  		dbf	d4,@mainloop
00002500 4E75                       		rts	
00002502                            ; End of function PaletteWhiteOut
00002502                            
00002502                            
00002502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002502                            
00002502                            
00002502                            WhiteOut_ToWhite:
00002502 7000                       		moveq	#0,d0
00002504 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002508 1038 F626                  		move.b	(v_pfade_start).w,d0
0000250C D0C0                       		adda.w	d0,a0
0000250E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002512                            
00002512                            	@addcolour:
00002512 6100                       		bsr.s	WhiteOut_AddColour
00002514 51C8 FFFC                  		dbf	d0,@addcolour
00002518                            
00002518 7000                       		moveq	#0,d0
0000251A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000251E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002522 D0C0                       		adda.w	d0,a0
00002524 1038 F627                  		move.b	(v_pfade_size).w,d0
00002528                            
00002528                            	@addcolour2:
00002528 6100                       		bsr.s	WhiteOut_AddColour
0000252A 51C8 FFFC                  		dbf	d0,@addcolour2
0000252E 4E75                       		rts	
00002530                            ; End of function WhiteOut_ToWhite
00002530                            
00002530                            
00002530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002530                            
00002530                            
00002530                            WhiteOut_AddColour:
00002530                            @addred:
00002530 3410                       		move.w	(a0),d2
00002532 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002536 6700                       		beq.s	@next
00002538 3202                       		move.w	d2,d1
0000253A 0241 000E                  		andi.w	#$E,d1
0000253E 0C41 000E                  		cmpi.w	#cRed,d1
00002542 6700                       		beq.s	@addgreen
00002544 5458                       		addq.w	#2,(a0)+	; increase red value
00002546 4E75                       		rts	
00002548                            ; ===========================================================================
00002548                            
00002548                            @addgreen:
00002548 3202                       		move.w	d2,d1
0000254A 0241 00E0                  		andi.w	#$E0,d1
0000254E 0C41 00E0                  		cmpi.w	#cGreen,d1
00002552 6700                       		beq.s	@addblue
00002554 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002558 4E75                       		rts	
0000255A                            ; ===========================================================================
0000255A                            
0000255A                            @addblue:
0000255A 3202                       		move.w	d2,d1
0000255C 0241 0E00                  		andi.w	#$E00,d1
00002560 0C41 0E00                  		cmpi.w	#cBlue,d1
00002564 6700                       		beq.s	@next
00002566 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000256A 4E75                       		rts	
0000256C                            ; ===========================================================================
0000256C                            
0000256C                            @next:
0000256C 5448                       		addq.w	#2,a0
0000256E 4E75                       		rts	
00002570                            ; End of function WhiteOut_AddColour
00002570                            
00002570                            ; ---------------------------------------------------------------------------
00002570                            ; Palette cycling routine - Sega logo
00002570                            ; ---------------------------------------------------------------------------
00002570                            
00002570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002570                            
00002570                            
00002570                            PalCycle_Sega:
00002570 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002574 6600                       		bne.s	loc_206A
00002576 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000257A 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002580 7205                       		moveq	#5,d1
00002582 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002586                            
00002586                            loc_2020:
00002586 6A00                       		bpl.s	loc_202A
00002588 5448                       		addq.w	#2,a0
0000258A 5341                       		subq.w	#1,d1
0000258C 5440                       		addq.w	#2,d0
0000258E 60F6                       		bra.s	loc_2020
00002590                            ; ===========================================================================
00002590                            
00002590                            loc_202A:
00002590 3400                       		move.w	d0,d2
00002592 0242 001E                  		andi.w	#$1E,d2
00002596 6600                       		bne.s	loc_2034
00002598 5440                       		addq.w	#2,d0
0000259A                            
0000259A                            loc_2034:
0000259A 0C40 0060                  		cmpi.w	#$60,d0
0000259E 6400                       		bhs.s	loc_203E
000025A0 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000025A4                            
000025A4                            loc_203E:
000025A4 5440                       		addq.w	#2,d0
000025A6 51C9 FFE8                  		dbf	d1,loc_202A
000025AA                            
000025AA 3038 F632                  		move.w	(v_pcyc_num).w,d0
000025AE 5440                       		addq.w	#2,d0
000025B0 3400                       		move.w	d0,d2
000025B2 0242 001E                  		andi.w	#$1E,d2
000025B6 6600                       		bne.s	loc_2054
000025B8 5440                       		addq.w	#2,d0
000025BA                            
000025BA                            loc_2054:
000025BA 0C40 0064                  		cmpi.w	#$64,d0
000025BE 6D00                       		blt.s	loc_2062
000025C0 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
000025C6 70F4                       		moveq	#-$C,d0
000025C8                            
000025C8                            loc_2062:
000025C8 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000025CC 7001                       		moveq	#1,d0
000025CE 4E75                       		rts	
000025D0                            ; ===========================================================================
000025D0                            
000025D0                            loc_206A:
000025D0 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000025D4 6A00                       		bpl.s	loc_20BC
000025D6 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000025DC 3038 F632                  		move.w	(v_pcyc_num).w,d0
000025E0 0640 000C                  		addi.w	#$C,d0
000025E4 0C40 0030                  		cmpi.w	#$30,d0
000025E8 6500                       		blo.s	loc_2088
000025EA 7000                       		moveq	#0,d0
000025EC 4E75                       		rts	
000025EE                            ; ===========================================================================
000025EE                            
000025EE                            loc_2088:
000025EE 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000025F2 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000025F8 41F0 0000                  		lea	(a0,d0.w),a0
000025FC 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
00002600 22D8                       		move.l	(a0)+,(a1)+
00002602 22D8                       		move.l	(a0)+,(a1)+
00002604 3298                       		move.w	(a0)+,(a1)
00002606 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000260A 7000                       		moveq	#0,d0
0000260C 722C                       		moveq	#$2C,d1
0000260E                            
0000260E                            loc_20A8:
0000260E 3400                       		move.w	d0,d2
00002610 0242 001E                  		andi.w	#$1E,d2
00002614 6600                       		bne.s	loc_20B2
00002616 5440                       		addq.w	#2,d0
00002618                            
00002618                            loc_20B2:
00002618 3390 0000                  		move.w	(a0),(a1,d0.w)
0000261C 5440                       		addq.w	#2,d0
0000261E 51C9 FFEE                  		dbf	d1,loc_20A8
00002622                            
00002622                            loc_20BC:
00002622 7001                       		moveq	#1,d0
00002624 4E75                       		rts	
00002626                            ; End of function PalCycle_Sega
00002626                            
00002626                            ; ===========================================================================
00002626                            
00002626                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002632                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002662                            
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Subroutines to load palettes
00002662                            
00002662                            ; input:
00002662                            ;	d0 = index number for palette
00002662                            ; ---------------------------------------------------------------------------
00002662                            
00002662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002662                            
00002662                            
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Subroutines to load pallets
00002662                            ; ---------------------------------------------------------------------------
00002662                            
00002662                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002662                            
00002662                            PalLoad1:
00002662 1238 FE11                  		move.b ($FFFFFE11),d1
00002666 43F9 0000 0000             		lea (PalPointers).l,a1
0000266C 0C01 0000                  		cmp.b #0,d1
00002670 6700 0000                  		beq.w PalLoad1_Continue
00002674 43F9 0000 0000             		lea (PalPointers2).l,a1
0000267A 0C01 0001                  		cmp.b #1,d1
0000267E 6700 0000                  		beq.w PalLoad1_Continue
00002682 43F9 0000 0000             		lea (PalPointers3).l,a1
00002688                            
00002688                            PalLoad1_Continue:
00002688 E748                       		lsl.w #3,d0
0000268A D2C0                       		adda.w d0,a1
0000268C 2459                       		movea.l (a1)+,a2
0000268E 3659                       		movea.w (a1)+,a3
00002690 D6FC 0080                  		adda.w #$80,a3
00002694 3E19                       		move.w (a1)+,d7
00002696                            
00002696                            loc_2110:
00002696 26DA                       		move.l (a2)+,(a3)+
00002698 51CF FFFC                  		dbf d7,loc_2110
0000269C 4E75                       		rts
0000269E                             ; End of function PalLoad1
0000269E                            
0000269E                            
0000269E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000269E                            
0000269E                            PalLoad2:
0000269E 1238 FE11                  		move.b ($FFFFFE11),d1
000026A2 43F9 0000 0000             		lea (PalPointers).l,a1
000026A8 0C01 0000                  		cmp.b #0,d1
000026AC 6700 0000                  		beq.w PalLoad2_Continue
000026B0 43F9 0000 0000             		lea (PalPointers2).l,a1
000026B6 0C01 0001                  		cmp.b #1,d1
000026BA 6700 0000                  		beq.w PalLoad2_Continue
000026BE 43F9 0000 0000             		lea (PalPointers3).l,a1
000026C4                            
000026C4                            
000026C4                            PalLoad2_Continue:
000026C4 E748                       		lsl.w #3,d0
000026C6 D2C0                       		adda.w d0,a1
000026C8 2459                       		movea.l (a1)+,a2
000026CA 3659                       		movea.w (a1)+,a3
000026CC 3E19                       		move.w (a1)+,d7
000026CE                            
000026CE                            loc_2128:
000026CE 26DA                       		move.l (a2)+,(a3)+
000026D0 51CF FFFC                  		dbf d7,loc_2128
000026D4 4E75                       		rts
000026D6                            ; End of function PalLoad2
000026D6                            
000026D6                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000026D6                            
000026D6                            
000026D6                            PalLoad_Loop: ;Quick load - TIS
000026D6                                    
000026D6 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000026D8 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000026DC 4E75                               rts
000026DE                            
000026DE                            ; ---------------------------------------------------------------------------
000026DE                            ; Underwater pallet loading subroutine
000026DE                            ; ---------------------------------------------------------------------------
000026DE                            
000026DE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026DE                            
000026DE                            PalLoad3_Water:
000026DE 1238 FE11                  		move.b ($FFFFFE11),d1
000026E2 43F9 0000 0000             		lea (PalPointers).l,a1
000026E8 0C01 0000                  		cmp.b #0,d1
000026EC 6700 0000                  		beq.w PalLoad3_Continue
000026F0 43F9 0000 0000             		lea (PalPointers2).l,a1
000026F6 0C01 0001                  		cmp.b #1,d1
000026FA 6700 0000                  		beq.w PalLoad3_Continue
000026FE 43F9 0000 0000             		lea (PalPointers3).l,a1
00002704                            
00002704                            PalLoad3_Continue:
00002704 E748                       		lsl.w #3,d0
00002706 D2C0                       		adda.w d0,a1
00002708 2459                       		movea.l (a1)+,a2
0000270A 3659                       		movea.w (a1)+,a3
0000270C 96FC 0080                  		suba.w #$80,a3
00002710 3E19                       		move.w (a1)+,d7
00002712                            
00002712                            loc_2144:
00002712 26DA                       		move.l (a2)+,(a3)+
00002714 51CF FFFC                  		dbf d7,loc_2144
00002718 4E75                       		rts
0000271A                            ; End of function PalLoad3_Water
0000271A                            
0000271A                            
0000271A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000271A                            
0000271A                            
0000271A                            PalLoad4_Water:
0000271A 1238 FE11                  		move.b ($FFFFFE11),d1
0000271E 43F9 0000 0000             		lea (PalPointers).l,a1
00002724 0C01 0000                  		cmp.b #0,d1
00002728 6700 0000                  		beq.w PalLoad4_Continue
0000272C 43F9 0000 0000             		lea (PalPointers2).l,a1
00002732 0C01 0001                  		cmp.b #1,d1
00002736 6700 0000                  		beq.w PalLoad4_Continue
0000273A 43F9 0000 0000             		lea (PalPointers3).l,a1
00002740                            
00002740                            PalLoad4_Continue:
00002740 E748                       		lsl.w #3,d0
00002742 D2C0                       		adda.w d0,a1
00002744 2459                       		movea.l (a1)+,a2
00002746 3659                       		movea.w (a1)+,a3
00002748 96FC 0100                  		suba.w #$100,a3
0000274C 3E19                       		move.w (a1)+,d7
0000274E                            loc_2160:
0000274E 26DA                       		move.l (a2)+,(a3)+
00002750 51CF FFFC                  		dbf d7,loc_2160
00002754 4E75                       		rts
00002756                             ; End of function PalLoad4_Water
00002756                            
00002756                            ; ===========================================================================
00002756                            
00002756                            		include	"_inc\Palette Pointers.asm"
00002756                            ; ---------------------------------------------------------------------------
00002756                            ; Palette pointers
00002756                            ; ---------------------------------------------------------------------------
00002756                            
00002756                            palp:	macro paladdress,ramaddress,colors
00002756                            	dc.l paladdress
00002756                            	dc.w ramaddress, (colors>>1)-1
00002756                            	endm
00002756                            
00002756                            PalPointers:
00002756                            
00002756                            ; palette address, RAM address, colors
00002756                            
00002756 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000275E 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002766 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000276E 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002776                            Pal_Levels:
00002776 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
0000277E 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002786 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
0000278E 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002796 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
0000279E 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000027A6 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000027AE 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000027B6 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000027BE 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000027C6 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000027CE 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000027D6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000027DE 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000027E6 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000027EE 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000027F6 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027FE 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002806 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
0000280E 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002816 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
0000281E 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002826 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
0000282E 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002836 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
0000283E 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002846 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
0000284E 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002856 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
0000285E 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002866 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
0000286E 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002876 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
0000287E 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002886 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
0000288E 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002896 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
0000289E 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000028A6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000028AE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000028B6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
000028BE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
000028C6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
000028CE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
000028D6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
000028DE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
000028E6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
000028EE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
000028F6                            			even
000028F6                            
000028F6                            PalPointers2:
000028F6                            
000028F6                            ; palette address, RAM address, colors
000028F6                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000028F6 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028FE 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002906 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000290E 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002916                            Pal_Levels_2:
00002916 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
0000291E 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
00002926 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
0000292E 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
00002936 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
0000293E 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002946 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000294E 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002956 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000295E 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002966 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000296E 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002976 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
0000297E 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002986 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
0000298E 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002996 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
0000299E 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000029A6 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000029AE 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000029B6 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000029BE 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000029C6 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000029CE 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000029D6 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000029DE 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
000029E6 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000029EE 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000029F6 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029FE 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002A06 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002A0E 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002A16 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002A1E 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002A26 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002A2E 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002A36 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002A3E 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002A46 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002A4E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002A56 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A5E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A66 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A6E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A76 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A7E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A86 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A8E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A96                            			even
00002A96                            			
00002A96                            PalPointers3:
00002A96                            			
00002A96                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002A96 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002A9E 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002AA6 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002AAE 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002AB6                            Pal_Levels_3:
00002AB6 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002ABE 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002AC6 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002ACE 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002AD6 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002ADE 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002AE6 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002AEE 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002AF6 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002AFE 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002B06 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002B0E 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002B16 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002B1E 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002B26 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002B2E 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002B36 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002B3E 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002B46 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002B4E 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002B56 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002B5E 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002B66 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002B6E 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002B76 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002B7E 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002B86 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002B8E 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002B96 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002B9E 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002BA6 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002BAE 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002BB6 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002BBE 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002BC6 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002BCE 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002BD6 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002BDE 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002BE6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002BEE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002BF6 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002BFE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002C06 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002C0E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002C16 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002C1E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002C26 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002C2E 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002C36                            			even
00002C36                            
00002C36                            
00002C36 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002C36 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002C36 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002C36 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002C36 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002C36 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002C36 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002C36 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002C36 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002C36 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002C36 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002C36 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002C36 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002C36 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002C36 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002C36 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002C36 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002C36 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002C36 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002C36 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002C36 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002C36 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002C36 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002C36 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002C36 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002C36 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002C36 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002C36 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002C36 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002C36 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002C36 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002C36 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002C36 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002C36 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002C36 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002C36 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002C36 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002C36 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002C36 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002C36 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002C36 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002C36 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002C36 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002C36 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002C36 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002C36 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002C36 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002C36 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002C36 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002C36 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002C36 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002C36 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002C36 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002C36 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002C36 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002C36 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002C36 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002C36 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002C36 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002C36 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002C36 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002C36 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002C36 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002C36 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002C36 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002C36 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002C36 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002C36                            		
00002C36                            		;include	"_inc\Palette Pointers2.asm"
00002C36                            		
00002C36                            		;include	"_inc\Palette Pointers3.asm"
00002C36                            		
00002C36                            
00002C36                            ; ---------------------------------------------------------------------------
00002C36                            ; Palette data
00002C36                            ; ---------------------------------------------------------------------------
00002C36                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002CB6                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002D36                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002DB6                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002DD6                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002E36                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002E96                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002EF6                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002F56                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002FB6                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00003016                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00003096                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00003116                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003196                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
000031F6                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00003256                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
000032B6                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003316                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003376                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
000033D6                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
00003436                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003496                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
000034F6                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
00003556                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
000035B6                            Pal_Special:	incbin	"palette\Special Stage.bin"
00003636                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003696                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003716                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
00003736                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
00003756                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003776                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000037F6                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
00003836                            Pal_Ending:	incbin	"palette\Ending.bin"
000038B6                            Pal_Options:	incbin	"palette\Options.bin"
00003936                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
00003956                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003976                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003996                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
000039B6                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
000039D6                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
000039F6                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003A16                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
00003A36                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
00003A56                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003A76                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003A96                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003AB6                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003AD6                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003AF6                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003B16                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003B36                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003B56                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003B76                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003B96                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003BB6                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003BD6                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003BF6                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003C16                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003C36                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003C56                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003C76                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003C96                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003CB6                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003CD6                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003CF6                            ; ---------------------------------------------------------------------------
00003CF6                            ; Subroutine to	wait for VBlank routines to complete
00003CF6                            ; ---------------------------------------------------------------------------
00003CF6                            
00003CF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CF6                            
00003CF6                            
00003CF6                            WaitForVBla:
00003CF6 46FC 2300                  		enable_ints
00003CFA                            
00003CFA                            	@wait:
00003CFA 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003CFE 66FA                       		bne.s	@wait		; if not, branch
00003D00 4E75                       		rts	
00003D02                            ; End of function WaitForVBla
00003D02                            
00003D02                            		include	"_incObj\sub RandomNumber.asm"
00003D02                            ; ---------------------------------------------------------------------------
00003D02                            ; Subroutine to	generate a pseudo-random number	in d0
00003D02                            ; ---------------------------------------------------------------------------
00003D02                            
00003D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D02                            
00003D02                            
00003D02                            RandomNumber:
00003D02 2238 F636                  		move.l	(v_random).w,d1
00003D06 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003D08 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003D0E                            
00003D0E                            	@scramble:
00003D0E 2001                       		move.l	d1,d0
00003D10 E581                       		asl.l	#2,d1
00003D12 D280                       		add.l	d0,d1
00003D14 E781                       		asl.l	#3,d1
00003D16 D280                       		add.l	d0,d1
00003D18 3001                       		move.w	d1,d0
00003D1A 4841                       		swap	d1
00003D1C D041                       		add.w	d1,d0
00003D1E 3200                       		move.w	d0,d1
00003D20 4841                       		swap	d1
00003D22 21C1 F636                  		move.l	d1,(v_random).w
00003D26 4E75                       		rts	
00003D26 4E75                       		rts	
00003D28                            		include	"_incObj\sub CalcSine.asm"
00003D28                            ; ---------------------------------------------------------------------------
00003D28                            ; Subroutine calculate a sine
00003D28                            
00003D28                            ; input:
00003D28                            ;	d0 = angle
00003D28                            
00003D28                            ; output:
00003D28                            ;	d0 = sine
00003D28                            ;	d1 = cosine
00003D28                            ; ---------------------------------------------------------------------------
00003D28                            
00003D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D28                            
00003D28                            
00003D28                            CalcSine:
00003D28 0240 00FF                          andi.w  #$FF,d0
00003D2C 5040                               addq.w  #8,d0
00003D2E D040                               add.w   d0,d0
00003D30 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003D34 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003D38 4E75                               rts
00003D3A                            ; End of function CalcSine
00003D3A                            
00003D3A                            ; ===========================================================================
00003D3A                            
00003D3A                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003FBA                            
00003FBA                            ; ===========================================================================
00003FBA                            ; ===========================================================================
00003FBA                            		include	"_incObj\sub CalcAngle.asm"
00003FBA                            ; ---------------------------------------------------------------------------
00003FBA                            ; Subroutine calculate an angle
00003FBA                            
00003FBA                            ; input:
00003FBA                            ;	d1 = x-axis distance
00003FBA                            ;	d2 = y-axis distance
00003FBA                            
00003FBA                            ; output:
00003FBA                            ;	d0 = angle
00003FBA                            ; ---------------------------------------------------------------------------
00003FBA                            
00003FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FBA                            
00003FBA                            
00003FBA                            CalcAngle:
00003FBA 48E7 1800                  		movem.l	d3-d4,-(sp)
00003FBE 7600                       		moveq	#0,d3
00003FC0 7800                       		moveq	#0,d4
00003FC2 3601                       		move.w	d1,d3
00003FC4 3802                       		move.w	d2,d4
00003FC6 8843                       		or.w	d3,d4
00003FC8 6700                       		beq.s	loc_2D04
00003FCA 3802                       		move.w	d2,d4
00003FCC 4A43                       		tst.w	d3
00003FCE 6A00 0000                  		bpl.w	loc_2CC2
00003FD2 4443                       		neg.w	d3
00003FD4                            
00003FD4                            loc_2CC2:
00003FD4 4A44                       		tst.w	d4
00003FD6 6A00 0000                  		bpl.w	loc_2CCA
00003FDA 4444                       		neg.w	d4
00003FDC                            
00003FDC                            loc_2CCA:
00003FDC B843                       		cmp.w	d3,d4
00003FDE 6400 0000                  		bcc.w	loc_2CDC
00003FE2 E18C                       		lsl.l	#8,d4
00003FE4 88C3                       		divu.w	d3,d4
00003FE6 7000                       		moveq	#0,d0
00003FE8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003FEC 6000                       		bra.s	loc_2CE6
00003FEE                            ; ===========================================================================
00003FEE                            
00003FEE                            loc_2CDC:
00003FEE E18B                       		lsl.l	#8,d3
00003FF0 86C4                       		divu.w	d4,d3
00003FF2 7040                       		moveq	#$40,d0
00003FF4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003FF8                            
00003FF8                            loc_2CE6:
00003FF8 4A41                       		tst.w	d1
00003FFA 6A00 0000                  		bpl.w	loc_2CF2
00003FFE 4440                       		neg.w	d0
00004000 0640 0080                  		addi.w	#$80,d0
00004004                            
00004004                            loc_2CF2:
00004004 4A42                       		tst.w	d2
00004006 6A00 0000                  		bpl.w	loc_2CFE
0000400A 4440                       		neg.w	d0
0000400C 0640 0100                  		addi.w	#$100,d0
00004010                            
00004010                            loc_2CFE:
00004010 4CDF 0018                  		movem.l	(sp)+,d3-d4
00004014 4E75                       		rts	
00004016                            ; ===========================================================================
00004016                            
00004016                            loc_2D04:
00004016 303C 0040                  		move.w	#$40,d0
0000401A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000401E 4E75                       		rts	
00004020                            ; End of function CalcAngle
00004020                            
00004020                            ; ===========================================================================
00004020                            
00004020                            Angle_Data:	incbin	"misc\angles.bin"
00004122                            
00004122                            ; ===========================================================================
00004122                            ; ===========================================================================
00004122                            
00004122                            ; ---------------------------------------------------------------------------
00004122                            ; Sega screen
00004122                            ; ---------------------------------------------------------------------------
00004122                            
00004122                            GM_Sega:
0000412A 6100 D6CA                  		bsr.w	ClearPLC
0000412E 6100 E288                  		bsr.w	PaletteFadeOut
00004132 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004138 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
0000413C 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004140 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004144 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00004148 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
0000414C 4238 F64E                  		clr.b	(f_wtr_state).w
00004150 46FC 2700                  		disable_ints
00004154 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004158 0200 00BF                  		andi.b	#$BF,d0
0000415C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004162 6100 D0CA                  		bsr.w	ClearScreen
00004170 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004176 6100 D234                  		bsr.w	NemDec
0000417A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004180 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004186 303C 0000                  		move.w	#0,d0
0000418A 6100 D7AA                  		bsr.w	EniDec
0000418E                            
0000418E 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
000041A2 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
000041B6                            
000041B6 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000041BA 6B00                       			bmi.s   @loadpal
000041BC 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
000041D0                            
000041D0                            	@loadpal:
000041D0 7000                       		moveq	#palid_SegaBG,d0
000041D2 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
000041D6 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
000041DC 7E3F                               moveq    #$3F,d7
000041DE                             
000041DE                                .loop:
000041DE 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
000041E2 51CF FFFA                          dbf        d7,.loop
000041E6 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
000041EA 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
000041F0 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
000041F6 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
000041FC 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00004202 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004206 0000 0040                  		ori.b	#$40,d0
0000420A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004210                            
00004210                            Sega_WaitPal:
00004210 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004216 6100 FADE                  		bsr.w	WaitForVBla
0000421A 6100 E354                  		bsr.w	PalCycle_Sega
0000421E 66F0                       		bne.s	Sega_WaitPal
00004220                            
00004228 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
0000422E 6100 FAC6                  		bsr.w	WaitForVBla
00004232 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004238                            
00004238                            Sega_WaitEnd:
00004238 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
0000423E 6100 FAB6                  		bsr.w	WaitForVBla
00004242 4A78 F614                  		tst.w	(v_demolength).w
00004246 6700                       		beq.s	Sega_GotoTitle
00004248 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000424E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00004250                            
00004250                            Sega_GotoTitle:
00004250 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004256 4E75                       		rts	
00004258                            ; ===========================================================================
00004258                            
00004258                            ; ---------------------------------------------------------------------------
00004258                            ; Title	screen
00004258                            ; ---------------------------------------------------------------------------
00004258                            
00004258                            GM_Title:
00004260 6100 D594                  		bsr.w	ClearPLC
00004264 6100 E152                  		bsr.w	PaletteFadeOut
00004268 46FC 2700                  		disable_ints
0000426C 6100 D046                  		bsr.w	SoundDriverLoad
00004270 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004276 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000427A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000427E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004282 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004286 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000428A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000428E 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00004292 4238 F64E                  		clr.b	(f_wtr_state).w
00004296 6100 CF96                  		bsr.w	ClearScreen
0000429A                            		;jsr		SHC2022 
0000429A                            
0000429A 43F8 D000                  		lea	(v_objspace).w,a1
0000429E 7000                       		moveq	#0,d0
000042A0 323C 07FF                  		move.w	#$7FF,d1
000042A4                            
000042A4                            	Tit_ClrObj1:
000042A4 22C0                       		move.l	d0,(a1)+
000042A6 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
000042AA                            
000042AA 6100 E066                  		bsr.w	PaletteFadeIn
000042AE 46FC 2700                  		disable_ints
000042BC 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000042C2 6100 D0E8                  		bsr.w	NemDec
000042D0 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000042D6 6100 D0D4                  		bsr.w	NemDec
000042E4 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
000042EA 6100 D0C0                  		bsr.w 	NemDec
000042EE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042FC 4BF9 0000 05FC             		lea	(Art_Text).l,a5	; load level select font
00004302 323C 028F                  		move.w	#$28F,d1
00004306                            
00004306                            	Tit_LoadText:
00004306 3C9D                       		move.w	(a5)+,(a6)
00004308 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
0000430C                            
0000430C 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
00004312 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00004318 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
0000431E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00004324 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
0000432A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
00004330 6100 0000                  		bsr.w	LevelSizeLoad
00004334 6100 0000                  		bsr.w	DeformLayers
00004338 43F8 B000                  		lea	(v_16x16).w,a1
0000433C 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
00004342 303C 0000                  		move.w	#0,d0
00004346 6100 D5EE                  		bsr.w	EniDec
0000434A 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
00004350 43F9 00FF 0000             		lea	(v_256x256).l,a1
00004356 6100 D75C                  		bsr.w	KosDec
0000435A 6100 0000                  		bsr.w	LevelLayoutLoad
0000435E 6100 E058                  		bsr.w	PaletteFadeOut
00004362 46FC 2700                  		disable_ints
00004366 6100 CEC6                  		bsr.w	ClearScreen
0000436A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004370 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004376 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000437A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000437E 343C 6000                  		move.w	#$6000,d2
00004382 6100 0000                  		bsr.w	DrawChunks
00004386 43F9 00FF 0000             		lea	($FF0000).l,a1
0000438C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004392 303C 0000                  		move.w	#0,d0
00004396 6100 D59E                  		bsr.w	EniDec
0000439A                            
0000439A 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
000043AE                            
000043B8 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
000043BE 6100 CFEC                  		bsr.w	NemDec
000043C2 7001                       		moveq	#palid_Title,d0	; load title screen palette
000043C4 6100 E29C                  		bsr.w	PalLoad1
000043D0 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
000043D6 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
000043DC 43F8 D080                  		lea	(v_objspace+$80).w,a1
000043E0 7000                       		moveq	#0,d0
000043E2 323C 0007                  		move.w	#7,d1
000043E6                            
000043E6                            	Tit_ClrObj2:
000043E6 22C0                       		move.l	d0,(a1)+
000043E8 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
000043EC                            
000043EC 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
000043F2 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
000043F8 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
000043FC                            
000043FC 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004400 6A00                       			bpl.s   @isjap		; if yes, branch
00004402                            
00004402 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004408 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0000440E                            	@isjap:
0000440E 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
00004414 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
0000441A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004420 6100 0000                  		bsr.w	DeformLayers
00004424 4EB9 0000 0000             		jsr	(BuildSprites).l
0000442A 7000                       		moveq	#plcid_Main,d0
0000442C 6100 D39C                  		bsr.w	NewPLC
00004430 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00004436 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
0000443C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004440 0000 0040                  		ori.b	#$40,d0
00004444 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000444A 6100 DEC6                  		bsr.w	PaletteFadeIn
0000444E                            
0000444E                            Tit_MainLoop:
0000444E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004454 6100 F8A0                  		bsr.w	WaitForVBla
00004458 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000445E 6100 0000                  		bsr.w	DeformLayers
00004462 4EB9 0000 0000             		jsr	(BuildSprites).l
00004468 6100 D936                  		bsr.w	PCycle_Title
0000446C 6100 D396                  		bsr.w	RunPLC
00004470 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004474 5440                       		addq.w	#2,d0
00004476 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000447A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000447E 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004480                            
00004480 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004486 4E75                       		rts	
00004488                            ; ===========================================================================
00004488                            
00004488                            Tit_ChkRegion:
00004488 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000448C 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000448E                            
0000448E 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004494 6000                       		bra.s	Tit_EnterCheat
00004496                            
00004496                            	Tit_RegionJap:
00004496 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000449C                            
0000449C                            Tit_EnterCheat:
0000449C 3038 FFE4                  		move.w	(v_title_dcount).w,d0
000044A0 D0C0                       		adda.w	d0,a0
000044A2 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
000044A6 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
000044AA B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000044AC 6600                       		bne.s	Tit_ResetCheat	; if not, branch
000044AE 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
000044B2 4A00                       		tst.b	d0
000044B4 6600                       		bne.s	Tit_CountC
000044B6 41F8 FFE0                  		lea	(f_levselcheat).w,a0
000044BA 3238 FFE6                  		move.w	(v_title_ccount).w,d1
000044BE E249                       		lsr.w	#1,d1
000044C0 0241 0003                  		andi.w	#3,d1
000044C4 6700                       		beq.s	Tit_PlayRing
000044C6 4A38 FFF8                  		tst.b	(v_megadrive).w
000044CA 6A00                       		bpl.s	Tit_PlayRing
000044CC 7201                       		moveq	#1,d1
000044CE 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
000044D2                            
000044D2                            	Tit_PlayRing:
000044D2 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000044E0 6000                       		bra.s	Tit_CountC
000044E2                            ; ===========================================================================
000044E2                            
000044E2                            Tit_ResetCheat:
000044E2 4A00                       		tst.b	d0
000044E4 6700                       		beq.s	Tit_CountC
000044E6 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
000044EC 6700                       		beq.s	Tit_CountC
000044EE 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
000044F4                            
000044F4                            Tit_CountC:
000044F4 1038 F605                  		move.b	(v_jpadpress1).w,d0
000044F8 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
000044FC 6700                       		beq.s	loc_3230	; if not, branch
000044FE 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
00004502                            		
00004502                            loc_3230:
00004502 4A78 F614                  		tst.w	(v_demolength).w
00004506 6700 0000                  		beq.w	GotoDemo
0000450A 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
00004510 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
00004514                            
00004514                            Tit_ChkLevSel:
00004514 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00004518 6700 0000                  		beq.w	@cont	; if not, play level
0000451C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
00004522 6700 0000                  		beq.w	@cont	; if not, play level
00004526 6000 0000                  		bra.w	Tit_LevelSelect
0000452A                            
0000452A                            	@cont:		
0000452A 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
00004530 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
00004534 7400                       		moveq	#0,d2
00004536 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
0000453A D442                       		add.w	d2,d2            ; multiply by 2
0000453C 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
00004540 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
00004544                            
00004544                            ; ===========================================================================
00004544                            Tit_Menu_Choice:
00004544 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
00004546 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
00004548                            ; ===========================================================================
00004548                            
00004548                            Menu_Options:
00004548 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
0000454E 4E75                       		rts
00004550                            
00004550                            Tit_LevelSelect:	
00004550 7002                       		moveq	#palid_LevelSel,d0
00004552 6100 E14A                  		bsr.w	PalLoad2	; load level select palette
00004556 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000455A 7000                       		moveq	#0,d0
0000455C 323C 00DF                  		move.w	#$DF,d1
00004560                            
00004560                            	Tit_ClrScroll1:
00004560 22C0                       		move.l	d0,(a1)+
00004562 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004566                            
00004566 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
0000456A 46FC 2700                  		disable_ints
0000456E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000457E 323C 03FF                  		move.w	#$3FF,d1
00004582                            
00004582                            	Tit_ClrScroll2:
00004582 2C80                       		move.l	d0,(a6)
00004584 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004588                            
00004588 6100 0000                  		bsr.w	LevSelTextLoad
0000458C                            
0000458C                            ; ---------------------------------------------------------------------------
0000458C                            ; Level	Select
0000458C                            ; ---------------------------------------------------------------------------
0000458C                            
0000458C                            LevelSelect:
0000458C 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004592 6100 F762                  		bsr.w	WaitForVBla
00004596 6100 0000                  		bsr.w	LevSelControls
0000459A 6100 D268                  		bsr.w	RunPLC
0000459E 4AB8 F680                  		tst.l	(v_plc_buffer).w
000045A2 66E8                       		bne.s	LevelSelect
000045A4 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000045AA 67E0                       		beq.s	LevelSelect	; if not, branch
000045AC 3038 FF82                  		move.w	(v_levselitem).w,d0
000045B0 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000045B4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000045B6 3038 FF84                  		move.w	(v_levselsound).w,d0
000045BA 0640 0080                  		addi.w	#$80,d0
000045BE                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
000045BE                            		;beq.s	LevSel_Ending	; if yes, branch
000045BE                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
000045BE                            		;beq.s	LevSel_Credits	; if yes, branch
000045BE                            
000045BE                            LevSel_PlaySnd:
000045BE 6100 CD3E                  		bsr.w	PlaySound_Special
000045C2 60C8                       		bra.s	LevelSelect
000045C4                            ; ===========================================================================
000045C4                            
000045C4                            LevSel_Ending:
000045C4 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000045CA 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000045D0 4E75                       		rts	
000045D2                            ; ===========================================================================
000045D2                            
000045D2                            LevSel_Credits:
000045D2 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000045E0 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000045E6 4E75                       		rts	
000045E8                            ; ===========================================================================
000045E8                            
000045E8                            LevSel_Level_SS:
000045E8 D040                       		add.w	d0,d0
000045EA 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000045EE 6B00 FF9C                  		bmi.w	LevelSelect
000045F2 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000045F6 6600                       		bne.s	LevSel_Level	; if not, branch
000045F8 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045FE 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00004602 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004608 7000                       		moveq	#0,d0
0000460A 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000460E 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004612 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004616 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000461E 4E75                       		rts	
00004620                            ; ===========================================================================
00004620                            
00004620                            LevSel_Level:
00004620 0240 3FFF                  		andi.w	#$3FFF,d0
00004624 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004628                            
00004628                            PlayLevel:
00004628 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000462E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004634 7000                       		moveq	#0,d0
00004636 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000463A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000463E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004642 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
00004646 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
0000464A 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
0000464E 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00004652 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
00004658 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004668 4E75                       		rts	
0000466A                            ; ===========================================================================
0000466A                            ; ---------------------------------------------------------------------------
0000466A                            ; Level	select - level pointers
0000466A                            ; ---------------------------------------------------------------------------
0000466A                            		; correct level order
0000466A 0000                       		dc.b id_GHZ, 0
0000466C 0001                       		dc.b id_GHZ, 1
0000466E 0002                       		dc.b id_GHZ, 2
00004670 0200                       		dc.b id_MZ, 0
00004672 0201                       		dc.b id_MZ, 1
00004674 0202                       		dc.b id_MZ, 2
00004676 0400                       		dc.b id_SYZ, 0
00004678 0401                       		dc.b id_SYZ, 1
0000467A 0402                       		dc.b id_SYZ, 2
0000467C 0100                       		dc.b id_LZ, 0
0000467E 0101                       		dc.b id_LZ, 1
00004680 0102                       		dc.b id_LZ, 2
00004682 0300                       		dc.b id_SLZ, 0
00004684 0301                       		dc.b id_SLZ, 1
00004686 0302                       		dc.b id_SLZ, 2
00004688 0500                       		dc.b id_SBZ, 0
0000468A 0501                       		dc.b id_SBZ, 1
0000468C 0103                       		dc.b id_LZ, 3
0000468E 0502                       		dc.b id_SBZ, 2
00004690 0700                       		dc.b id_SS, 0		; Special Stage
00004692 8000                       		dc.w $8000		; Sound Test
00004694                            		even
00004694                            ; ---------------------------------------------------------------------------
00004694                            ; Level	select codes
00004694                            ; ---------------------------------------------------------------------------
00004694 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
0000469C                            		even
0000469C                            
0000469C 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000046A2                            		even
000046A2                            ; ===========================================================================
000046A2                            
000046A2                            ; ---------------------------------------------------------------------------
000046A2                            ; Demo mode
000046A2                            ; ---------------------------------------------------------------------------
000046A2                            
000046A2                            GotoDemo:
000046A2 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000046A8                            
000046A8                            loc_33B6:
000046A8 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000046AE 6100 F646                  		bsr.w	WaitForVBla
000046B2 6100 0000                  		bsr.w	DeformLayers
000046B6 6100 D6C4                  		bsr.w	PaletteCycle
000046BA 6100 D148                  		bsr.w	RunPLC
000046BE 3038 D008                  		move.w	(v_objspace+obX).w,d0
000046C2 5440                       		addq.w	#2,d0
000046C4 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000046C8 0C40 1C00                  		cmpi.w	#$1C00,d0
000046CC 6500                       		blo.s	loc_33E4
000046CE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000046D4 4E75                       		rts	
000046D6                            ; ===========================================================================
000046D6                            
000046D6                            loc_33E4:
000046D6 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000046DC 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
000046E0 4A78 F614                  		tst.w	(v_demolength).w
000046E4 6600 FFC2                  		bne.w	loc_33B6
000046F0 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000046F4 0240 0007                  		andi.w	#7,d0
000046F8 D040                       		add.w	d0,d0
000046FA 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000046FE 31C0 FE10                  		move.w	d0,(v_zone).w
00004702 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004706 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
0000470C 6500                       		blo.s	loc_3422	; if yes, branch
0000470E 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004714                            
00004714                            loc_3422:
00004714 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
0000471A 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00004720 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004724 6600                       		bne.s	Demo_Level	; if not, branch
00004726 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000472C 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00004730 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004734                            
00004734                            Demo_Level:
00004734 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000473A 7000                       		moveq	#0,d0
0000473C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004740 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004744 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004748 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004750 4E75                       		rts	
00004752                            ; ===========================================================================
00004752                            ; ---------------------------------------------------------------------------
00004752                            ; Levels used in demos
00004752                            ; ---------------------------------------------------------------------------
00004752                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
0000475A                            		even
0000475A                            
0000475A                            ; ---------------------------------------------------------------------------
0000475A                            ; Subroutine to	change what you're selecting in the level select
0000475A                            ; ---------------------------------------------------------------------------
0000475A                            
0000475A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000475A                            
0000475A                            
0000475A                            LevSelControls:
0000475A 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000475E 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004762 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004764 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
00004768 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000476A                            
0000476A                            LevSel_UpDown:
0000476A 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004770 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004774 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004778 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000477A 3038 FF82                  		move.w	(v_levselitem).w,d0
0000477E 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004782 6700                       		beq.s	LevSel_Down	; if not, branch
00004784 5340                       		subq.w	#1,d0		; move up 1 selection
00004786 6400                       		bhs.s	LevSel_Down
00004788 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000478A                            
0000478A                            LevSel_Down:
0000478A 0801 0001                  		btst	#bitDn,d1	; is down pressed?
0000478E 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004790 5240                       		addq.w	#1,d0		; move down 1 selection
00004792 0C40 0015                  		cmpi.w	#$15,d0
00004796 6500                       		blo.s	LevSel_Refresh
00004798 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000479A                            
0000479A                            LevSel_Refresh:
0000479A 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
0000479E 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000047A2 4E75                       		rts	
000047A4                            ; ===========================================================================
000047A4                            
000047A4                            LevSel_SndTest:
000047A4 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
000047AA 6600                       		bne.s	LevSel_NoMove	; if not, branch
000047AC 1238 F605                  		move.b	(v_jpadpress1).w,d1
000047B0 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
000047B4 6700                       		beq.s	LevSel_NoMove	; if not, branch
000047B6 3038 FF84                  		move.w	(v_levselsound).w,d0
000047BA 0801 0002                  		btst	#bitL,d1	; is left pressed?
000047BE 6700                       		beq.s	LevSel_Right	; if not, branch
000047C0 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000047C2 6400                       		bhs.s	LevSel_Right
000047C4 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
000047C6                            
000047C6                            LevSel_Right:
000047C6 0801 0003                  		btst	#bitR,d1	; is right pressed?
000047CA 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000047CC 5240                       		addq.w	#1,d0		; add 1	to sound test
000047CE 0C40 0056                  		cmpi.w	#$56,d0
000047D2 6500                       		blo.s	LevSel_Refresh2
000047D4 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
000047D6                            
000047D6                            LevSel_Refresh2:
000047D6 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000047DA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000047DE                            
000047DE                            LevSel_NoMove:
000047DE 4E75                       		rts	
000047E0                            ; End of function LevSelControls
000047E0                            
000047E0                            ; ---------------------------------------------------------------------------
000047E0                            ; Subroutine to load level select text
000047E0                            ; ---------------------------------------------------------------------------
000047E0                            
000047E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047E0                            
000047E0                            
000047E0                            LevSelTextLoad:
000047E0                            
000047E0 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000047E0                            					; $E210 is a VRAM address
000047E0                            
000047E0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000047E6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000047EC 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000047F2 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000047F6 7214                       		moveq	#$14,d1		; number of lines of text
000047F8                            
000047F8                            	LevSel_DrawAll:
000047F8 2D44 0004                  		move.l	d4,4(a6)
000047FC 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004800 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004806 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
0000480A                            
0000480A 7000                       		moveq	#0,d0
0000480C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004810 3200                       		move.w	d0,d1
00004812 283C 6210 0003             		move.l	#textpos,d4
00004818 EF48                       		lsl.w	#7,d0
0000481A 4840                       		swap	d0
0000481C D880                       		add.l	d0,d4
0000481E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004824 E749                       		lsl.w	#3,d1
00004826 3001                       		move.w	d1,d0
00004828 D241                       		add.w	d1,d1
0000482A D240                       		add.w	d0,d1
0000482C D2C1                       		adda.w	d1,a1
0000482E 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00004832 2D44 0004                  		move.l	d4,4(a6)
00004836 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
0000483A 363C E680                  		move.w	#$E680,d3
0000483E 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
00004844 6600                       		bne.s	LevSel_DrawSnd
00004846 363C C680                  		move.w	#$C680,d3
0000484A                            
0000484A                            LevSel_DrawSnd:
00004854 3038 FF84                  		move.w	(v_levselsound).w,d0
00004858 0640 0080                  		addi.w	#$80,d0
0000485C 1400                       		move.b	d0,d2
0000485E E808                       		lsr.b	#4,d0
00004860 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004864 1002                       		move.b	d2,d0
00004866 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000486A 4E75                       		rts	
0000486C                            ; End of function LevSelTextLoad
0000486C                            
0000486C                            
0000486C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000486C                            
0000486C                            
0000486C                            LevSel_ChgSnd:
0000486C 0240 000F                  		andi.w	#$F,d0
00004870 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004874 6500                       		blo.s	LevSel_Numb	; if not, branch
00004876 5E00                       		addi.b	#7,d0		; use alpha characters
00004878                            
00004878                            	LevSel_Numb:
00004878 D043                       		add.w	d3,d0
0000487A 3C80                       		move.w	d0,(a6)
0000487C 4E75                       		rts	
0000487E                            ; End of function LevSel_ChgSnd
0000487E                            
0000487E                            
0000487E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000487E                            
0000487E                            
0000487E                            LevSel_ChgLine:
0000487E 7417                       		moveq	#$17,d2		; number of characters per line
00004880                            
00004880                            	LevSel_LineLoop:
00004880 7000                       		moveq	#0,d0
00004882 1019                       		move.b	(a1)+,d0	; get character
00004884 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004886 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000488A 51CA FFF4                  		dbf	d2,LevSel_LineLoop
0000488E 4E75                       		rts	
00004890                            
00004890                            
00004890                            	LevSel_CharOk:
00004890 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004892 3C80                       		move.w	d0,(a6)		; send to VRAM
00004894 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004898 4E75                       		rts	
0000489A                            ; End of function LevSel_ChgLine
0000489A                            
0000489A                            ; ===========================================================================
0000489A                            ; ---------------------------------------------------------------------------
0000489A                            ; Level	select menu text
0000489A                            ; ---------------------------------------------------------------------------
0000489A                            		incbin	"misc\Level Select Text (JP1).bin"
00004A92                            		even
00004A92                            ; ---------------------------------------------------------------------------
00004A92                            ; Music	playlist
00004A92                            ; ---------------------------------------------------------------------------
00004A92                            MusicList:
00004A92 00                         			dc.b bgm_GHZ    ; GHZ1
00004A93 00                                 	dc.b bgm_LZ    ; GHZ2
00004A94 00                                 	dc.b bgm_Stop   ; GHZ3
00004A95 00                                 	dc.b bgm_LZ    ; GHZ4
00004A96 00                                 	dc.b bgm_Stop    ; LZ1
00004A97 00                                 	dc.b bgm_Stop   ; LZ2
00004A98 00                                 	dc.b bgm_Stop    ; LZ3
00004A99 00                                 	dc.b bgm_SBZ3    ; LZ4
00004A9A 00                                 	dc.b bgm_MZ    ; MZ1
00004A9B 00                                 	dc.b bgm_SBZ    ; MZ2
00004A9C 00                                 	dc.b bgm_RRZ2   ; MZ3
00004A9D 00                                 	dc.b bgm_SBZ    ; MZ4
00004A9E 00                                 	dc.b bgm_LZ    ; SLZ1
00004A9F 00                                 	dc.b bgm_LZ    ; SLZ2
00004AA0 00                                 	dc.b bgm_LZ    ; SLZ3
00004AA1 00                                 	dc.b bgm_LZ    ; SLZ4
00004AA2 00                                 	dc.b bgm_SYZ    ; SYZ1
00004AA3 00                                 	dc.b bgm_SLZ    ; SYZ2
00004AA4 00                                 	dc.b bgm_SLZ    ; SYZ3
00004AA5 00                                 	dc.b bgm_SLZ    ; SYZ4
00004AA6 00                                 	dc.b bgm_SBZ    ; SBZ1
00004AA7 00                                 	dc.b bgm_SBZ    ; SBZ2
00004AA8 00                                 	dc.b bgm_FZ		; SBZ3
00004AA9 00                                 	dc.b bgm_SBZ    ; SBZ4
00004AAA 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAB 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAC 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAD 00                                 	dc.b bgm_GHZ    ; GHZ1
00004AAE                                    	even
00004AAE                            ; ===========================================================================
00004AAE                            
00004AAE                            ; ---------------------------------------------------------------------------
00004AAE                            ; Level
00004AAE                            ; ---------------------------------------------------------------------------
00004AAE                            
00004AAE                            GM_Level:
00004AAE 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004AB4 4A78 FFF0                  		tst.w	(f_demo).w
00004AB8 6B00                       		bmi.s	Level_NoMusicFade
00004AC2                            
00004AC2                            	Level_NoMusicFade:
00004AC2 6100 CD32                  		bsr.w	ClearPLC
00004AC6 6100 D8F0                  		bsr.w	PaletteFadeOut
00004ACA 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004ACE 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004AD0 46FC 2700                  		disable_ints
00004ADE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004AE4 6100 C8C6                  		bsr.w	NemDec
00004AE8 46FC 2300                  		enable_ints
00004AEC 7000                       		moveq	#0,d0
00004AEE 1038 FE10                  		move.b	(v_zone).w,d0
00004AF2 E948                       		lsl.w	#4,d0
00004AF4 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004AFA 45F2 0000                  		lea	(a2,d0.w),a2
00004AFE 7000                       		moveq	#0,d0
00004B00 1012                       		move.b	(a2),d0
00004B02 6700                       		beq.s	loc_37FC
00004B04 6100 CC92                  		bsr.w	AddPLC		; load level patterns
00004B08                            
00004B08                            loc_37FC:
00004B08 7000                       		moveq	#plcid_Main2,d0
00004B0A 6100 CC8C                  		bsr.w	AddPLC		; load standard	patterns
00004B0E 4EB9 0000 0000             		jsr		LoadLifeIcon
00004B14                            		
00004B14                            Level_ClrRam:
00004B14 43F8 D000                  		lea	(v_objspace).w,a1
00004B18 7000                       		moveq	#0,d0
00004B1A 323C 07FF                  		move.w	#$7FF,d1
00004B1E                            
00004B1E                            	Level_ClrObjRam:
00004B1E 22C0                       		move.l	d0,(a1)+
00004B20 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004B24                            
00004B24 43F8 F628                  		lea	($FFFFF628).w,a1
00004B28 7000                       		moveq	#0,d0
00004B2A 323C 0015                  		move.w	#$15,d1
00004B2E                            
00004B2E                            	Level_ClrVars1:
00004B2E 22C0                       		move.l	d0,(a1)+
00004B30 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004B34                            
00004B34 43F8 F700                  		lea	(v_screenposx).w,a1
00004B38 7000                       		moveq	#0,d0
00004B3A 323C 003F                  		move.w	#$3F,d1
00004B3E                            
00004B3E                            	Level_ClrVars2:
00004B3E 22C0                       		move.l	d0,(a1)+
00004B40 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004B44                            
00004B44 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004B48 7000                       		moveq	#0,d0
00004B4A 323C 0047                  		move.w	#$47,d1
00004B4E                            
00004B4E                            	Level_ClrVars3:
00004B4E 22C0                       		move.l	d0,(a1)+
00004B50 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004B54                            
00004B54 46FC 2700                  		disable_ints
00004B58 6100 C6D4                  		bsr.w	ClearScreen
00004B5C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004B62 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004B66 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004B6A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004B6E 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004B72 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004B76 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004B7A 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004B7E 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004B84 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004B88                            
00004B88 31FC C800 C8FC             		ResetDMAQueue	
00004B8E                            		
00004B8E 4EB9 0000 0000             		jsr 	LoadSRAMConfig
00004B94                            
00004B94 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B9A 6600                       		bne.s	Level_LoadPal	; if not, branch
00004B9C                            
00004B9C 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004BA0 7000                       		moveq	#0,d0
00004BA2 1038 FE11                  		move.b	(v_act).w,d0
00004BA6 D040                       		add.w	d0,d0
00004BA8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004BAE 3031 0000                  		move.w	(a1,d0.w),d0
00004BB2 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004BB6 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004BBA 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004BBE 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004BC2 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004BC6 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004BCC                            
00004BCC                            Level_LoadPal:
00004BCC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004BD2 46FC 2300                  		move	#$2300,sr
00004BD6 4EB9 0000 0000             		jsr		LoadPlayerPal
00004BDC 6100 DAC0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004BE0 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004BE6 6600                       		bne.s	Level_GetBgm	; if not, branch
00004BE8 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004BEE 6100 DAEE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004BF2 4A38 FE30                  		tst.b	($FFFFFE30).w
00004BF6 6700                       		beq.s	Level_GetBgm
00004BF8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004BFE                            
00004BFE                            	Level_GetBgm:
00004BFE 4A78 FFF0                  		tst.w	(f_demo).w
00004C02 6B00                               	bmi.s	Level_SkipTtlCard
00004C04 7000                               	moveq	#0,d0
00004C06 3038 FE10                  		move.w	(v_zone).w,d0
00004C0A E418                       		ror.b	#2,d0
00004C0C EC48                       		lsr.w   #6,d0
00004C0E 43F9 0000 4A92                     	lea	(MusicList).l,a1 ; load    music playlist
00004C14 1031 0000                          	move.b	(a1,d0.w),d0
00004C18 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004C1C 6100 C6DA                          	bsr.w	PlaySound    ; play music
00004C20 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004C26                            
00004C26                            
00004C26                            Level_TtlCardLoop:
00004C26 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004C2C 6100 F0C8                  		bsr.w	WaitForVBla
00004C30 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C36 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C3C 6100 CBC6                  		bsr.w	RunPLC
00004C40 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004C44 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004C48 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004C4A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004C4E 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004C50 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004C56                            
00004C56                            	Level_SkipTtlCard:
00004C56 4EB9 0000 0000             		jsr		LoadPlayerPal
00004C5C 6100 DA04                  		bsr.w	PalLoad1	; load Sonic's palette
00004C60 6100 0000                  		bsr.w	LevelSizeLoad
00004C64 6100 0000                  		bsr.w	DeformLayers
00004C68 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004C6E 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004C72 6100 0000                  		bsr.w	LoadTilesFromStart
00004C76 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004C7C 6100 0000                  		bsr.w	ColIndexLoad
00004C80 6100 0000                  		bsr.w	LZWaterFeatures
00004C84 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004C8A 4A78 FFF0                  		tst.w	(f_demo).w
00004C8E 6B00                       		bmi.s	Level_ChkDebug
00004C90 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004C96                            
00004C96                            Level_ChkDebug:
00004C96 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004C9A 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C9C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004CA2 6700                       		beq.s	Level_ChkWater	; if not, branch
00004CA4 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004CAA                            
00004CAA                            Level_ChkWater:
00004CAA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004CB0 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004CB6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004CBC 6600                       		bne.s	Level_LoadObj	; if not, branch
00004CBE 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004CC4 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004CCA 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004CD0 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004CD6                            
00004CD6                            Level_LoadObj:
00004CD6 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004CDC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004CE2 4EB9 0000 0000             		jsr	(BuildSprites).l
00004CE8 7000                       		moveq	#0,d0
00004CEA 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004CEE 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004CF0 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004CF4 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004CF8 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004CFC 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
00004D02                            
00004D02                            	Level_SkipClr:
00004D02 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004D06 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004D0A 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004D0E 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004D12 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004D16 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004D1A 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004D1E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004D22 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004D26 31C0 FE02                  		move.w	d0,(f_restart).w
00004D2A 31C0 FE04                  		move.w	d0,(v_framecount).w
00004D2E 6100 0000                  		bsr.w	OscillateNumInit
00004D32 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004D38 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004D3E 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004D44 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004D4A 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004D50 7000                       		moveq	#0,d0
00004D52 1038 FE10                  		move.b	(v_zone).w,d0
00004D56 E548                       		lsl.w	#2,d0
00004D58 2271 0000                  		movea.l	(a1,d0.w),a1
00004D5C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004D60 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004D62 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004D68 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004D6C 5340                       		subq.w	#1,d0
00004D6E E548                       		lsl.w	#2,d0
00004D70 2271 0000                  		movea.l	(a1,d0.w),a1
00004D74                            
00004D74                            Level_Demo:
00004D74 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004D7A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004D7E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004D84 4A78 FFF0                  		tst.w	(f_demo).w
00004D88 6A00                       		bpl.s	Level_ChkWaterPal
00004D8A 31FC 021C F614             		move.w	#540,(v_demolength).w
00004D90 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004D96 6600                       		bne.s	Level_ChkWaterPal
00004D98 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004D9E                            
00004D9E                            Level_ChkWaterPal:
00004D9E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004DA4 6600                       		bne.s	Level_Delay	; if not, branch
00004DA6 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004DA8 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004DAE 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004DB0 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004DB2                            
00004DB2                            	Level_WtrNotSbz:
00004DB2 6100 D966                  		bsr.w	PalLoad4_Water
00004DB6                            
00004DB6                            Level_Delay:
00004DB6 323C 0003                  		move.w	#3,d1
00004DBA                            
00004DBA                            	Level_DelayLoop:
00004DBA 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004DC0 6100 EF34                  		bsr.w	WaitForVBla
00004DC4 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004DC8                            
00004DC8 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004DCE 6100 D548                  		bsr.w	PalFadeIn_Alt
00004DD2 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004DD6 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004DD8 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004DDC 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004DE0 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004DE4 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004DE8 6000                       		bra.s	Level_StartGame
00004DEA                            ; ===========================================================================
00004DEA                            
00004DEA                            Level_ClrCardArt:
00004DEA 7000                       		moveq	#plcid_Explode,d0
00004DEC 4EB9 0000 1798             		jsr	(AddPLC).l	; load explosion gfx
00004DF2 7000                       		moveq	#0,d0
00004DF4 1038 FE10                  		move.b	(v_zone).w,d0
00004DF8 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004DFC 4EB9 0000 1798             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004E02                            
00004E02                            Level_StartGame:
00004E02 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004E08                            
00004E08                            ; ---------------------------------------------------------------------------
00004E08                            ; Main level loop (when	all title card and loading sequences are finished)
00004E08                            ; ---------------------------------------------------------------------------
00004E08                            
00004E08                            Level_MainLoop:
00004E08 6100 C500                  		bsr.w	PauseGame
00004E0C 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004E12 6100 EEE2                  		bsr.w	WaitForVBla
00004E16 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004E1A 6100 0000                  		bsr.w	MoveSonicInDemo
00004E1E 6100 0000                  		bsr.w	LZWaterFeatures
00004E22 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004E28 4A78 FE02                  			tst.w   (f_restart).w
00004E2C 6600 FC80                  			bne     GM_Level
00004E30 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004E34 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004E36 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004E3C 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004E3E                            
00004E3E                            	Level_DoScroll:
00004E3E 6100 0000                  		bsr.w	DeformLayers
00004E42                            
00004E42                            	Level_SkipScroll:
00004E42 4EB9 0000 0000             		jsr	(BuildSprites).l
00004E48 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004E4E 6100 CF2C                  		bsr.w	PaletteCycle
00004E52 6100 C9B0                  		bsr.w	RunPLC
00004E56 6100 0000                  		bsr.w	OscillateNumDo
00004E5A 6100 0000                  		bsr.w	SynchroAnimate
00004E5E 6100 0000                  		bsr.w	SignpostArtLoad
00004E62                            
00004E62 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E68 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004E6A                            
00004E6A 4A38 FFB1                  		tst.b	(v_flashtimer).w ; is white flash counter empty?
00004E6E 6700                       		beq.s	@Continue	; if yes, branch
00004E70                            		
00004E70 5338 FFB1                  		subq.b	#1,(v_flashtimer).w	; sub 1 from counter
00004E74 0C38 0001 FFB1             		cmpi.b	#1,(v_flashtimer).w	; sub 1 from counter
00004E7A 6C00                       		bge.s	@Continue	; is counter now empty? if not, branch
00004E7C                            		
00004E7C 49F8 FA80                  		lea	($FFFFFA80).w,a4	; load palette location to a4
00004E80 47F8 CA00                  		lea	($FFFFCA00).w,a3	; load backed up palette to a3
00004E84 3A3C 007F                  		move.w	#$007F,d5		; set d3 to $7F (+1 for the first run)
00004E88                            
00004E88                            @RestorePalette:
00004E88 38DB                       		move.w	(a3)+,(a4)+		; set new palette palette
00004E8A 51CD FFFC                  		dbf	d5,@RestorePalette	; loop
00004E8E                            
00004E8E                            @Continue:
00004E8E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004E94 6700 FF72                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004E98 4E75                       		rts	
00004E9A                            ; ===========================================================================
00004E9A                            
00004E9A                            Level_ChkDemo:
00004E9A 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004E9E 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004EA0 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004EA4 6700                       		beq.s	Level_EndDemo	; if not, branch
00004EA6 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004EAC 6700 FF5A                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004EB0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004EB6 4E75                       		rts	
00004EB8                            ; ===========================================================================
00004EB8                            
00004EB8                            Level_EndDemo:
00004EB8 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004EBE 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004EC0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004EC6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004ECA 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004ECC 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004ED2                            
00004ED2                            Level_FadeDemo:
00004ED2 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004ED8 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004EDE 4278 F794                  		clr.w	(v_palchgspeed).w
00004EE2                            
00004EE2                            	Level_FDLoop:
00004EE2 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004EE8 6100 EE0C                  		bsr.w	WaitForVBla
00004EEC 6100 0000                  		bsr.w	MoveSonicInDemo
00004EF0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004EF6 4EB9 0000 0000             		jsr	(BuildSprites).l
00004EFC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004F02 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004F06 6A00                       		bpl.s	loc_3BC8
00004F08 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004F0E 6100 D4C8                  		bsr.w	FadeOut_ToBlack
00004F12                            
00004F12                            loc_3BC8:
00004F12 4A78 F614                  		tst.w	(v_demolength).w
00004F16 66CA                       		bne.s	Level_FDLoop
00004F18 4E75                       		rts	
00004F1A                            ; ===========================================================================
00004F1A                            
00004F1A                            		include	"_inc\LZWaterFeatures.asm"
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            ; Subroutine to	do special water effects in Labyrinth Zone
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            
00004F1A                            LZWaterFeatures:
00004F1A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004F20 6600                       		bne.s	@notlabyrinth	; if not, branch
00004F22 4A38 F744                  			tst.b   (f_nobgscroll).w
00004F26 6600                       			bne.s	@setheight
00004F28 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004F2E 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004F30                            
00004F30 6100 0000                  		bsr.w	LZWindTunnels
00004F34 6100 0000                  		bsr.w	LZWaterSlides
00004F38 6100 0000                  		bsr.w	LZDynamicWater
00004F3C                            
00004F3C                            @setheight:
00004F3C 4238 F64E                  		clr.b	(f_wtr_state).w
00004F40 7000                       		moveq	#0,d0
00004F42 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004F46 E248                       		lsr.w	#1,d0
00004F48 D078 F648                  		add.w	(v_waterpos2).w,d0
00004F4C 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004F50 3038 F646                  		move.w	(v_waterpos1).w,d0
00004F54 9078 F704                  		sub.w	(v_screenposy).w,d0
00004F58 6400                       		bcc.s	@isbelow
00004F5A 4A40                       		tst.w	d0
00004F5C 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004F5E                            
00004F5E 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004F64 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004F6A                            
00004F6A                            	@isbelow:
00004F6A 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004F6E 6500                       		bcs.s	@isvisible	; if yes, branch
00004F70 303C 00DF                  		move.w	#223,d0
00004F74                            
00004F74                            	@isvisible:
00004F74 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004F78                            
00004F78                            @notlabyrinth:
00004F78 4E75                       		rts	
00004F7A                            ; ===========================================================================
00004F7A                            ; ---------------------------------------------------------------------------
00004F7A                            ; Initial water heights
00004F7A                            ; ---------------------------------------------------------------------------
00004F7A 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004F7C 0328                       		dc.w $328	; Labyrinth 2
00004F7E 0900                       		dc.w $900	; Labyrinth 3
00004F80 0228                       		dc.w $228	; Scrap Brain 3
00004F82                            		even
00004F82                            ; ===========================================================================
00004F82                            
00004F82                            ; ---------------------------------------------------------------------------
00004F82                            ; Labyrinth dynamic water routines
00004F82                            ; ---------------------------------------------------------------------------
00004F82                            
00004F82                            LZDynamicWater:
00004F82 7000                       		moveq	#0,d0
00004F84 1038 FE11                  		move.b	(v_act).w,d0
00004F88 D040                       		add.w	d0,d0
00004F8A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004F8E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004F92 7200                       		moveq	#0,d1
00004F94 1238 F64C                  		move.b	(f_water).w,d1
00004F98 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004F9C 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004FA0 6700                       		beq.s	@exit		; if water level is correct, branch
00004FA2 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004FA4 4441                       		neg.w	d1		; set water to move up instead
00004FA6                            
00004FA6                            	@movewater:
00004FA6 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004FAA                            
00004FAA                            	@exit:
00004FAA 4E75                       		rts	
00004FAC                            ; ===========================================================================
00004FAC 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004FAE 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004FB0 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004FB2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004FB4                            ; ===========================================================================
00004FB4                            
00004FB4                            DynWater_LZ1:
00004FB4 4E75                       		rts	
00004FB6                            ; ===========================================================================
00004FB6                            
00004FB6                            DynWater_LZ2:
00004FB6 3038 F700                  		move.w	(v_screenposx).w,d0
00004FBA 323C 0328                  		move.w	#$328,d1
00004FBE 0C40 0500                  		cmpi.w	#$500,d0
00004FC2 6500                       		bcs.s	@setwater
00004FC4 323C 03C8                  		move.w	#$3C8,d1
00004FC8 0C40 0B00                  		cmpi.w	#$B00,d0
00004FCC 6500                       		bcs.s	@setwater
00004FCE 323C 0428                  		move.w	#$428,d1
00004FD2                            
00004FD2                            	@setwater:
00004FD2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004FD6 4E75                       		rts	
00004FD8                            ; ===========================================================================
00004FD8                            
00004FD8                            DynWater_LZ3:
00004FD8 3038 F700                  		move.w	(v_screenposx).w,d0
00004FDC 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004FE0 6600                       		bne.s	@routine2
00004FE2                            
00004FE2 323C 0900                  		move.w	#$900,d1
00004FE6 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004FEA 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004FEC 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004FF2 6500                       		bcs.s	@setwaterlz3
00004FF4 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004FFA 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004FFC                            
00004FFC 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00005000 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00005006 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00005014                            
00005014                            	@setwaterlz3:
00005014 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005018 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
0000501C 4E75                       		rts	
0000501E                            ; ===========================================================================
0000501E                            
0000501E                            @routine2:
0000501E 5302                       		subq.b	#1,d2
00005020 6600                       		bne.s	@routine3
00005022 323C 04C8                  		move.w	#$4C8,d1
00005026 0C40 0770                  		cmpi.w	#$770,d0
0000502A 6500                       		bcs.s	@setwater2
0000502C 323C 0308                  		move.w	#$308,d1
00005030 0C40 1400                  		cmpi.w	#$1400,d0
00005034 6500                       		bcs.s	@setwater2
00005036 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
0000503C 6700                       		beq.s	@sonicislow
0000503E 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00005044 6400                       		bcc.s	@sonicislow	; if yes, branch
00005046 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
0000504C 6400                       		bcc.s	@setwater2
0000504E                            
0000504E                            @sonicislow:
0000504E 323C 0508                  		move.w	#$508,d1
00005052 31C1 F648                  		move.w	d1,(v_waterpos2).w
00005056 0C40 1770                  		cmpi.w	#$1770,d0
0000505A 6500                       		bcs.s	@setwater2
0000505C 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00005062                            
00005062                            	@setwater2:
00005062 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005066 4E75                       		rts	
00005068                            ; ===========================================================================
00005068                            
00005068                            @routine3:
00005068 5302                       		subq.b	#1,d2
0000506A 6600                       		bne.s	@routine4
0000506C 323C 0508                  		move.w	#$508,d1
00005070 0C40 1860                  		cmpi.w	#$1860,d0
00005074 6500                       		bcs.s	@setwater3
00005076 323C 0188                  		move.w	#$188,d1
0000507A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000507E 6400                       		bcc.s	@loc_3DC6
00005080 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00005084 6600                       		bne.s	@setwater3
00005086                            
00005086                            	@loc_3DC6:
00005086 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
0000508C                            
0000508C                            	@setwater3:
0000508C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005090 4E75                       		rts	
00005092                            ; ===========================================================================
00005092                            
00005092                            @routine4:
00005092 5302                       		subq.b	#1,d2
00005094 6600                       		bne.s	@routine5
00005096 323C 0188                  		move.w	#$188,d1
0000509A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000509E 6500                       		bcs.s	@setwater4
000050A0 323C 0900                  		move.w	#$900,d1
000050A4 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000050A8 6500                       		bcs.s	@setwater4
000050AA 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
000050B0 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
000050B6 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
000050BC 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
000050C2 4E75                       		rts	
000050C4                            ; ===========================================================================
000050C4                            
000050C4                            @setwater4:
000050C4 31C1 F64A                  		move.w	d1,(v_waterpos3).w
000050C8 31C1 F648                  		move.w	d1,(v_waterpos2).w
000050CC 4E75                       		rts	
000050CE                            ; ===========================================================================
000050CE                            
000050CE                            @routine5:
000050CE 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
000050D2 6500                       		bcs.s	@dontset	; if not, branch
000050D4 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
000050DA                            
000050DA                            	@dontset:
000050DA 4E75                       		rts	
000050DC                            ; ===========================================================================
000050DC                            
000050DC                            DynWater_SBZ3:
000050DC                            	;	move.w	#$228,d1
000050DC                            	;	cmpi.w	#$F00,(v_screenposx).w
000050DC                            	;	bcs.s	@setwater
000050DC                            	;	move.w	#$4C8,d1
000050DC                            
000050DC                            	;@setwater:
000050DC                            		;move.w	d1,(v_waterpos3).w
000050DC 4E75                       		rts
000050DE                            
000050DE                            ; ---------------------------------------------------------------------------
000050DE                            ; Labyrinth Zone "wind tunnels"	subroutine
000050DE                            ; ---------------------------------------------------------------------------
000050DE                            
000050DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050DE                            
000050DE                            
000050DE                            LZWindTunnels:
000050DE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000050E2 6600 0000                  		bne.w	@quit	; if yes, branch
000050E6 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
000050EC 7000                       		moveq	#0,d0
000050EE 1038 FE11                  		move.b	(v_act).w,d0	; get act number
000050F2 E748                       		lsl.w	#3,d0		; multiply by 8
000050F4 D4C0                       		adda.w	d0,a2		; add to address for data
000050F6 7200                       		moveq	#0,d1
000050F8 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
000050FC 6600                       		bne.s	@notact1	; if not, branch
000050FE 7201                       		moveq	#1,d1
00005100 514A                       		subq.w	#8,a2		; use different data for act 1
00005102                            
00005102                            	@notact1:
00005102 43F8 D000                  		lea	(v_player).w,a1
00005106                            
00005106                            @chksonic:
00005106 3029 0008                  		move.w	obX(a1),d0
0000510A B052                       		cmp.w	(a2),d0
0000510C 6500 0000                  		bcs.w	@chknext
00005110 B06A 0004                  		cmp.w	4(a2),d0
00005114 6400 0000                  		bcc.w	@chknext
00005118 3429 000C                  		move.w	obY(a1),d2
0000511C B46A 0002                  		cmp.w	2(a2),d2
00005120 6500                       		bcs.s	@chknext
00005122 B46A 0006                  		cmp.w	6(a2),d2
00005126 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00005128 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000512C 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00005130 6600                       		bne.s	@skipsound	; if not, branch
0000513C                            
0000513C                            	@skipsound:
0000513C 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00005140 6600 0000                  		bne.w	@quit	; if yes, branch
00005144 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
0000514A 6400                       		bcc.s	@clrquit	; if yes, branch
0000514C 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00005152 0440 0080                  		subi.w	#$80,d0
00005156 B052                       		cmp.w	(a2),d0
00005158 6400                       		bcc.s	@movesonic
0000515A 7002                       		moveq	#2,d0
0000515C 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00005162 6600                       		bne.s	@notact2	; if not, branch
00005164 4440                       		neg.w	d0
00005166                            
00005166                            	@notact2:
00005166 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
0000516A                            
0000516A                            @movesonic:
0000516A 5869 0008                  		addq.w	#4,obX(a1)
0000516E 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00005174 337C 0000 0012             		move.w	#0,obVelY(a1)
0000517A 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00005180 08E9 0001 0022             		bset	#1,obStatus(a1)
00005186 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
0000518C 6700                       		beq.s	@down		; if not, branch
0000518E 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00005192                            
00005192                            	@down:
00005192 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00005198 6700                       		beq.s	@end		; if not, branch
0000519A 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
0000519E                            
0000519E                            	@end:
0000519E 4E75                       		rts	
000051A0                            ; ===========================================================================
000051A0                            
000051A0                            @chknext:
000051A0 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
000051A2 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
000051A6 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
000051AA 6700                       		beq.s	@quit		; if yes, branch
000051AC 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
000051B2                            
000051B2                            @clrquit:
000051B2 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
000051B6                            
000051B6                            @quit:
000051B6 4E75                       		rts	
000051B8                            ; End of function LZWindTunnels
000051B8                            
000051B8                            ; ===========================================================================
000051B8                            
000051B8                            		;    left, top,  right, bottom boundaries
000051B8 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
000051C0 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
000051C8 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
000051D0 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
000051D8 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
000051E0                            		even
000051E0                            
000051E0                            ; ---------------------------------------------------------------------------
000051E0                            ; Labyrinth Zone water slide subroutine
000051E0                            ; ---------------------------------------------------------------------------
000051E0                            
000051E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051E0                            
000051E0                            
000051E0                            LZWaterSlides:
000051E0 43F8 D000                  		lea	(v_player).w,a1
000051E4 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
000051EA 6600                       		bne.s	loc_3F6A	; if not, branch
000051EC 3029 000C                  		move.w	obY(a1),d0
000051F0 E248                       		lsr.w	#1,d0
000051F2 0240 0380                  		andi.w	#$380,d0
000051F6 1229 0008                  		move.b	obX(a1),d1
000051FA 0241 007F                  		andi.w	#$7F,d1
000051FE D041                       		add.w	d1,d0
00005200 45F8 A400                  		lea	(v_lvllayout).w,a2
00005204 1032 0000                  		move.b	(a2,d0.w),d0
00005208 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
0000520C 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
0000520E                            
0000520E                            loc_3F62:
0000520E B022                       		cmp.b	-(a2),d0
00005210 57C9 FFFC                  		dbeq	d1,loc_3F62
00005214 6700                       		beq.s	LZSlide_Move
00005216                            
00005216                            loc_3F6A:
00005216 4A38 F7CA                  		tst.b	(f_jumponly).w
0000521A 6700                       		beq.s	locret_3F7A
0000521C 337C 0005 003E             		move.w	#5,$3E(a1)
00005222 4238 F7CA                  		clr.b	(f_jumponly).w
00005226                            
00005226                            locret_3F7A:
00005226 4E75                       		rts	
00005228                            ; ===========================================================================
00005228                            
00005228                            LZSlide_Move:
00005228 0C41 0003                  		cmpi.w	#3,d1
0000522C 6400                       		bcc.s	loc_3F84
0000522E 4E71                       		nop	
00005230                            
00005230                            loc_3F84:
00005230 08A9 0000 0022             		bclr	#0,obStatus(a1)
00005236 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
0000523A 1340 0020                  		move.b	d0,obInertia(a1)
0000523E 6A00                       		bpl.s	loc_3F9A
00005240 08E9 0000 0022             		bset	#0,obStatus(a1)
00005246                            
00005246                            loc_3F9A:
00005246 4229 0021                  		clr.b	obInertia+1(a1)
0000524A 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00005250 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00005256 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000525A 0200 001F                  		andi.b	#$1F,d0
0000525E 6600                       		bne.s	locret_3FBE
0000526A                            
0000526A                            locret_3FBE:
0000526A 4E75                       		rts	
0000526C                            ; End of function LZWaterSlides
0000526C                            
0000526C                            ; ===========================================================================
0000526C                            ; byte_3FC0:
0000526C                            Slide_Speeds:
0000526C 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00005274 00                         		even
00005274                            
00005274                            Slide_Chunks:
00005274 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00005275                            ; byte_3FCF
00005275                            Slide_Chunks_End
00005276 00                         		even
00005276 00                         		even
00005276                            		include	"_inc\MoveSonicInDemo.asm"
00005276                            ; ---------------------------------------------------------------------------
00005276                            ; Subroutine to	move Sonic in demo mode
00005276                            ; ---------------------------------------------------------------------------
00005276                            
00005276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005276                            
00005276                            
00005276                            MoveSonicInDemo:
00005276 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000527A 6600                       		bne.s	MDemo_On	; if yes, branch
0000527C 4E75                       		rts	
0000527E                            ; ===========================================================================
0000527E                            
0000527E                            ; This is an unused subroutine for recording a demo
0000527E                            
0000527E                            DemoRecorder:
0000527E 43F9 0008 0000             		lea	($80000).l,a1
00005284 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005288 D2C0                       		adda.w	d0,a1
0000528A 1038 F604                  		move.b	(v_jpadhold1).w,d0
0000528E B011                       		cmp.b	(a1),d0
00005290 6600                       		bne.s	@next
00005292 5229 0001                  		addq.b	#1,1(a1)
00005296 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000529C 6700                       		beq.s	@next
0000529E 4E75                       		rts	
000052A0                            
000052A0                            	@next:
000052A0 1340 0002                  		move.b	d0,2(a1)
000052A4 137C 0000 0003             		move.b	#0,3(a1)
000052AA 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
000052AE 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
000052B4 4E75                       		rts	
000052B6                            ; ===========================================================================
000052B6                            
000052B6                            MDemo_On:
000052B6 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
000052BA 6A00                       		bpl.s	@dontquit	; if not, branch
000052BC 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
000052C0 6B00                       		bmi.s	@dontquit	; if yes, branch
000052C2 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000052C8                            
000052C8                            	@dontquit:
000052C8 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
000052CE 7000                       		moveq	#0,d0
000052D0 1038 FE10                  		move.b	(v_zone).w,d0
000052D4 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
000052DA 6600                       		bne.s	@notspecial	; if not, branch
000052DC 7006                       		moveq	#6,d0		; use demo #6
000052DE                            
000052DE                            	@notspecial:
000052DE E548                       		lsl.w	#2,d0
000052E0 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
000052E4 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
000052E8 6A00                       		bpl.s	@notcredits	; if not, branch
000052EA 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
000052F0 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000052F4 5340                       		subq.w	#1,d0
000052F6 E548                       		lsl.w	#2,d0
000052F8 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
000052FC                            
000052FC                            	@notcredits:
000052FC 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005300 D2C0                       		adda.w	d0,a1
00005302 1011                       		move.b	(a1),d0
00005304 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005308 1200                       		move.b	d0,d1
0000530A 7400                       			moveq	#0,d2
0000530C B500                       		eor.b	d2,d0
0000530E 10C1                       		move.b	d1,(a0)+
00005310 C001                       		and.b	d1,d0
00005312 10C0                       		move.b	d0,(a0)+
00005314 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005318 6400                       		bcc.s	@end
0000531A 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005320 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005324                            
00005324                            	@end:
00005324 4E75                       		rts	
00005326                            ; End of function MoveSonicInDemo
00005326                            
00005326                            ; ===========================================================================
00005326                            ; ---------------------------------------------------------------------------
00005326                            ; Demo sequence	pointers
00005326                            ; ---------------------------------------------------------------------------
00005326 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
0000532A 0000 0000                  		dc.l Demo_GHZ
0000532E 0000 0000                  		dc.l Demo_MZ
00005332 0000 0000                  		dc.l Demo_MZ
00005336 0000 0000                  		dc.l Demo_SYZ
0000533A 0000 0000                  		dc.l Demo_SYZ
0000533E 0000 0000                  		dc.l Demo_SS
00005342 0000 0000                  		dc.l Demo_SS
00005346                            
00005346 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
0000534A 0000 0000                  		dc.l Demo_EndMZ
0000534E 0000 0000                  		dc.l Demo_EndSYZ
00005352 0000 0000                  		dc.l Demo_EndLZ
00005356 0000 0000                  		dc.l Demo_EndSLZ
0000535A 0000 0000                  		dc.l Demo_EndSBZ1
0000535E 0000 0000                  		dc.l Demo_EndSBZ2
00005362 0000 0000                  		dc.l Demo_EndGHZ2
00005366                            
00005366 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005376 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005386 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005396                            		even
00005396                            		even
00005396                            
00005396                            ; ---------------------------------------------------------------------------
00005396                            ; Collision index pointer loading subroutine
00005396                            ; ---------------------------------------------------------------------------
00005396                            
00005396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005396                            
00005396                            
00005396                            ColIndexLoad:
00005396 7000                       		moveq	#0,d0
00005398 1038 FE10                  		move.b	(v_zone).w,d0
0000539C E548                       		lsl.w	#2,d0
0000539E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
000053A4 4E75                       		rts	
000053A6                            ; End of function ColIndexLoad
000053A6                            
000053A6                            ; ===========================================================================
000053A6                            ; ---------------------------------------------------------------------------
000053A6                            ; Collision index pointers
000053A6                            ; ---------------------------------------------------------------------------
000053A6 0000 0000                  ColPointers:	dc.l Col_GHZ
000053AA 0000 0000                  		dc.l Col_LZ
000053AE 0000 0000                  		dc.l Col_MZ
000053B2 0000 0000                  		dc.l Col_SLZ
000053B6 0000 0000                  		dc.l Col_SYZ
000053BA 0000 0000                  		dc.l Col_SBZ
000053BE                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
000053BE                            
000053BE                            		include	"_inc\Oscillatory Routines.asm"
000053BE                            ; ---------------------------------------------------------------------------
000053BE                            ; Oscillating number subroutines
000053BE                            ; ---------------------------------------------------------------------------
000053BE                            
000053BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053BE                            
000053BE                            ; Initialise the values
000053BE                            
000053BE                            OscillateNumInit:
000053BE 43F8 FE5E                  		lea	(v_oscillate).w,a1
000053C2 45F9 0000 0000             		lea	(@baselines).l,a2
000053C8 7220                       		moveq	#$20,d1
000053CA                            
000053CA                            	@loop:
000053CA 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
000053CC 51C9 FFFC                  		dbf	d1,@loop
000053D0 4E75                       		rts	
000053D2                            
000053D2                            
000053D2                            ; ===========================================================================
000053D2 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
000053D4 0080 0000                  		dc.w $80, 0
000053D8 0080 0000                  		dc.w $80, 0
000053DC 0080 0000                  		dc.w $80, 0
000053E0 0080 0000                  		dc.w $80, 0
000053E4 0080 0000                  		dc.w $80, 0
000053E8 0080 0000                  		dc.w $80, 0
000053EC 0080 0000                  		dc.w $80, 0
000053F0 0080 0000                  		dc.w $80, 0
000053F4 0080 0000                  		dc.w $80, 0
000053F8 50F0 011E                  		dc.w $50F0, $11E
000053FC 2080 00B4                  		dc.w $2080, $B4
00005400 3080 010E                  		dc.w $3080, $10E
00005404 5080 01C2                  		dc.w $5080, $1C2
00005408 7080 0276                  		dc.w $7080, $276
0000540C 0080 0000                  		dc.w $80, 0
00005410 0080 0000                  		dc.w $80, 0
00005414                            		even
00005414                            
00005414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005414                            
00005414                            ; Oscillate values
00005414                            
00005414                            OscillateNumDo:
00005414 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
0000541A 6400                       		bcc.s	@end		; if yes, branch
0000541C 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005420 45F9 0000 0000             		lea	(@settings).l,a2
00005426 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005428 720F                       		moveq	#$F,d1
0000542A                            
0000542A                            @loop:
0000542A 341A                       		move.w	(a2)+,d2	; get frequency
0000542C 381A                       		move.w	(a2)+,d4	; get amplitude
0000542E 0303                       		btst	d1,d3		; check oscillation direction
00005430 6600                       		bne.s	@down		; branch if 1
00005432                            
00005432                            	@up:
00005432 3029 0002                  		move.w	2(a1),d0	; get current rate
00005436 D042                       		add.w	d2,d0		; add frequency
00005438 3340 0002                  		move.w	d0,2(a1)
0000543C D151                       		add.w	d0,0(a1)	; add rate to value
0000543E B811                       		cmp.b	0(a1),d4
00005440 6200                       		bhi.s	@next
00005442 03C3                       		bset	d1,d3
00005444 6000                       		bra.s	@next
00005446                            
00005446                            	@down:
00005446 3029 0002                  		move.w	2(a1),d0
0000544A 9042                       		sub.w	d2,d0
0000544C 3340 0002                  		move.w	d0,2(a1)
00005450 D151                       		add.w	d0,0(a1)
00005452 B811                       		cmp.b	0(a1),d4
00005454 6300                       		bls.s	@next
00005456 0383                       		bclr	d1,d3
00005458                            
00005458                            	@next:
00005458 5849                       		addq.w	#4,a1
0000545A 51C9 FFCE                  		dbf	d1,@loop
0000545E 31C3 FE5E                  		move.w	d3,(v_oscillate).w
00005462                            
00005462                            @end:
00005462 4E75                       		rts	
00005464                            ; End of function OscillateNumDo
00005464                            
00005464                            ; ===========================================================================
00005464 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
00005468 0002 0018                  		dc.w 2,	$18
0000546C 0002 0020                  		dc.w 2,	$20
00005470 0002 0030                  		dc.w 2,	$30
00005474 0004 0020                  		dc.w 4,	$20
00005478 0008 0008                  		dc.w 8,	8
0000547C 0008 0040                  		dc.w 8,	$40
00005480 0004 0040                  		dc.w 4,	$40
00005484 0002 0050                  		dc.w 2,	$50
00005488 0002 0050                  		dc.w 2,	$50
0000548C 0002 0020                  		dc.w 2,	$20
00005490 0003 0030                  		dc.w 3,	$30
00005494 0005 0050                  		dc.w 5,	$50
00005498 0007 0070                  		dc.w 7,	$70
0000549C 0002 0010                  		dc.w 2,	$10
000054A0 0002 0010                  		dc.w 2,	$10
000054A4                            		even
000054A4                            		even
000054A4                            
000054A4                            ; ---------------------------------------------------------------------------
000054A4                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
000054A4                            ; ---------------------------------------------------------------------------
000054A4                            
000054A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000054A4                            
000054A4                            
000054A4                            SynchroAnimate:
000054A4                            
000054A4                            ; Used for GHZ spiked log
000054A4                            Sync1:
000054A4 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
000054A8 6A00                       		bpl.s	Sync2		; if not, branch
000054AA 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
000054B0 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
000054B4 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
000054BA                            
000054BA                            ; Used for rings and giant rings
000054BA                            Sync2:
000054BA 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
000054BE 6A00                       		bpl.s	Sync3
000054C0 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
000054C6 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
000054CA 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
000054D0                            
000054D0                            ; Used for nothing
000054D0                            Sync3:
000054D0 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
000054D4 6A00                       		bpl.s	Sync4
000054D6 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
000054DC 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
000054E0 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
000054E6 6500                       		blo.s	Sync4
000054E8 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
000054EE                            
000054EE                            ; Used for bouncing rings
000054EE                            Sync4:
000054EE 4A38 FEC6                  		tst.b	(v_ani3_time).w
000054F2 6700                       		beq.s	SyncEnd
000054F4 7000                       		moveq	#0,d0
000054F6 1038 FEC6                  		move.b	(v_ani3_time).w,d0
000054FA D078 FEC8                  		add.w	(v_ani3_buf).w,d0
000054FE 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00005502 EF58                       		rol.w	#7,d0
00005504 0240 0003                  		andi.w	#3,d0
00005508 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
0000550C 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005510                            
00005510                            SyncEnd:
00005510 4E75                       		rts	
00005512                            ; End of function SynchroAnimate
00005512                            
00005512                            ; ---------------------------------------------------------------------------
00005512                            ; End-of-act signpost pattern loading subroutine
00005512                            ; ---------------------------------------------------------------------------
00005512                            
00005512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005512                            
00005512                            
00005512                            SignpostArtLoad:
00005512 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005516 6600 0000                  		bne.w	@exit		; if yes, branch
0000551A 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005520 6700                       		beq.s	@exit		; if yes, branch
00005522                            
00005522 3038 F700                  		move.w	(v_screenposx).w,d0
00005526 3238 F72A                  		move.w	(v_limitright2).w,d1
0000552A 0441 0100                  		subi.w	#$100,d1
0000552E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005530 6D00                       		blt.s	@exit		; if not, branch
00005532 4A38 FE1E                  		tst.b	(f_timecount).w
00005536 6700                       		beq.s	@exit
00005538 B278 F728                  		cmp.w	(v_limitleft2).w,d1
0000553C 6700                       		beq.s	@exit
0000553E 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
00005542 7000                       		moveq	#plcid_Signpost,d0
00005544 6000 C284                  		bra.w	NewPLC		; load signpost	patterns
00005548                            
00005548                            	@exit:
00005548 4E75                       		rts	
0000554A                            ; End of function SignpostArtLoad
0000554A                            
0000554A                            ; ===========================================================================
0000554A                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
000055CA                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000056FA                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
0000577A                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
0000587A                            ; ===========================================================================
0000587A                            
0000587A                            ; ---------------------------------------------------------------------------
0000587A                            ; Special Stage
0000587A                            ; ---------------------------------------------------------------------------
0000587A                            
0000587A                            GM_Special:
00005882 6100 CC5E                  		bsr.w	PaletteWhiteOut
00005886 46FC 2700                  		disable_ints
0000588A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005890 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005894 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005898 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
0000589E 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
000058A2 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000058A6 0200 00BF                  		andi.b	#$BF,d0
000058AA 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000058B0 6100 B97C                  		bsr.w	ClearScreen
000058B4 46FC 2300                  		enable_ints
000058B8 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
000058DA                            
000058DA                            	SS_WaitForDMA:
000058DA 3215                       		move.w	(a5),d1		; read control port ($C00004)
000058DC 0801 0001                  		btst	#1,d1		; is DMA running?
000058E0 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
000058E2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000058E6 6100 0000                  		bsr.w	SS_BGLoad
000058EA 7000                       		moveq	#plcid_SpecialStage,d0
000058EC 6100 C016                  		bsr.w	QuickPLC	; load special stage patterns
000058F0                            
000058F0 43F8 D000                  		lea	(v_objspace).w,a1
000058F4 7000                       		moveq	#0,d0
000058F6 323C 07FF                  		move.w	#$7FF,d1
000058FA                            	SS_ClrObjRam:
000058FA 22C0                       		move.l	d0,(a1)+
000058FC 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005900                            
00005900 43F8 F700                  		lea	(v_screenposx).w,a1
00005904 7000                       		moveq	#0,d0
00005906 323C 003F                  		move.w	#$3F,d1
0000590A                            	SS_ClrRam1:
0000590A 22C0                       		move.l	d0,(a1)+
0000590C 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005910                            
00005910 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00005914 7000                       		moveq	#0,d0
00005916 323C 0027                  		move.w	#$27,d1
0000591A                            	SS_ClrRam2:
0000591A 22C0                       		move.l	d0,(a1)+
0000591C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005920                            
00005920 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00005924 7000                       		moveq	#0,d0
00005926 323C 007F                  		move.w	#$7F,d1
0000592A                            	SS_ClrNemRam:
0000592A 22C0                       		move.l	d0,(a1)+
0000592C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005930                            
00005930 4238 F64E                  		clr.b	(f_wtr_state).w
00005934 4278 FE02                  		clr.w	(f_restart).w
00005938 700A                       		moveq	#palid_Special,d0
0000593A 6100 CD26                  		bsr.w	PalLoad1	; load special stage palette
0000593E 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005944 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
0000594C 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
00005954 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
0000595A 6100 0000                  		bsr.w	PalCycle_SS
0000595E 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
00005962 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
00005970 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00005976 43F9 0000 5326             		lea	(DemoDataPtr).l,a1
0000597C 7006                       		moveq	#6,d0
0000597E E548                       		lsl.w	#2,d0
00005980 2271 0000                  		movea.l	(a1,d0.w),a1
00005984 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
0000598A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000598E 4278 FE20                  		clr.w	(v_rings).w
00005992 4238 FE1B                  		clr.b	(v_lifecount).w
00005996 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
0000599C 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000059A2 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000059A6 6700                       		beq.s	SS_NoDebug	; if not, branch
000059A8 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
000059AE 6700                       		beq.s	SS_NoDebug	; if not, branch
000059B0 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000059B6                            
000059B6                            	SS_NoDebug:
000059B6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000059BA 0000 0040                  		ori.b	#$40,d0
000059BE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000059C4 6100 CA70                  		bsr.w	PaletteWhiteIn
000059C8                            
000059C8                            ; ---------------------------------------------------------------------------
000059C8                            ; Main Special Stage loop
000059C8                            ; ---------------------------------------------------------------------------
000059C8                            
000059C8                            SS_MainLoop:
000059C8 6100 B940                  		bsr.w	PauseGame
000059CC 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
000059D2 6100 E322                  		bsr.w	WaitForVBla
000059D6 6100 F89E                  		bsr.w	MoveSonicInDemo
000059DA 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000059E0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059E6 4EB9 0000 0000             		jsr	(BuildSprites).l
000059EC 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000059F2 6100 0000                  		bsr.w	SS_BGAnimate
000059F6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000059FA 6700                       		beq.s	SS_ChkEnd	; if not, branch
000059FC 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005A00 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00005A04                            
00005A04                            	SS_ChkEnd:
00005A04 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005A0A 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005A0E                            
00005A0E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005A12 6600 0000                  		bne.w	SS_ToLevel
00005A16 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005A1C 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005A22 6500                       		blo.s	SS_Finish	; if not, branch
00005A24 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005A28                            
00005A28                            SS_Finish:
00005A28 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005A2E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005A34 4278 F794                  		clr.w	(v_palchgspeed).w
00005A38                            
00005A38                            	SS_FinLoop:
00005A38 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005A3E 6100 E2B6                  		bsr.w	WaitForVBla
00005A42 6100 F832                  		bsr.w	MoveSonicInDemo
00005A46 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005A4C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005A52 4EB9 0000 0000             		jsr	(BuildSprites).l
00005A58 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005A5E 6100 0000                  		bsr.w	SS_BGAnimate
00005A62 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005A66 6A00                       		bpl.s	loc_47D4
00005A68 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00005A6E 6100 CA92                  		bsr.w	WhiteOut_ToWhite
00005A72                            
00005A72                            loc_47D4:
00005A72 4A78 F614                  		tst.w	(v_demolength).w
00005A76 66C0                       		bne.s	SS_FinLoop
00005A78                            
00005A78 46FC 2700                  		disable_ints
00005A7C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A82 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005A86 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005A8A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005A8E 6100 B79E                  		bsr.w	ClearScreen
00005A9C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005AA2 6100 B908                  		bsr.w	NemDec
00005AA6 4EB9 0000 0000             		jsr	(Hud_Base).l
00005AAC 31FC C800 C8FC             		ResetDMAQueue	
00005AB2 46FC 2300                  		enable_ints
00005AB6 7011                       		moveq	#palid_SSResult,d0
00005AB8 6100 CBE4                  		bsr.w	PalLoad2	; load results screen palette
00005ABC 7000                       		moveq	#plcid_Main,d0
00005ABE 6100 BD0A                  		bsr.w	NewPLC
00005AC2 7000                       		moveq	#plcid_SSResult,d0
00005AC4 6100 BCD2                  		bsr.w	AddPLC		; load results screen patterns
00005AC8 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005ACE 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005AD4 3038 FE20                  		move.w	(v_rings).w,d0
00005AD8 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005ADC 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005AEA                            
00005AEA 43F8 D000                  		lea	(v_objspace).w,a1
00005AEE 7000                       		moveq	#0,d0
00005AF0 323C 07FF                  		move.w	#$7FF,d1
00005AF4                            	SS_EndClrObjRam:
00005AF4 22C0                       		move.l	d0,(a1)+
00005AF6 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005AFA                            
00005AFA 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005B00                            
00005B00                            SS_NormalExit:
00005B00 6100 B808                  		bsr.w	PauseGame
00005B04 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005B0A 6100 E1EA                  		bsr.w	WaitForVBla
00005B0E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005B14 4EB9 0000 0000             		jsr	(BuildSprites).l
00005B1A 6100 BCE8                  		bsr.w	RunPLC
00005B1E 4A78 FE02                  		tst.w	(f_restart).w
00005B22 67DC                       		beq.s	SS_NormalExit
00005B24 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005B28 66D6                       		bne.s	SS_NormalExit
00005B32 6100 C9AE                  		bsr.w	PaletteWhiteOut
00005B36 4E75                       		rts	
00005B38                            ; ===========================================================================
00005B38                            
00005B38                            SS_ToSegaScreen:
00005B38 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005B3E 4E75                       		rts
00005B40                            
00005B40 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005B46 67F0                       		beq.s	SS_ToSegaScreen
00005B48 4E75                       		rts
00005B4A                            
00005B4A                            ; ---------------------------------------------------------------------------
00005B4A                            ; Special stage	background loading subroutine
00005B4A                            ; ---------------------------------------------------------------------------
00005B4A                            
00005B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B4A                            
00005B4A                            
00005B4A                            SS_BGLoad:
00005B4A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B50 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005B56 303C 4051                  		move.w	#$4051,d0
00005B5A 6100 BDDA                  		bsr.w	EniDec
00005B5E 263C 5000 0001             		move.l	#$50000001,d3
00005B64 45F9 00FF 0080             		lea	($FF0080).l,a2
00005B6A 7E06                       		moveq	#6,d7
00005B6C                            
00005B6C                            loc_48BE:
00005B6C 2003                       		move.l	d3,d0
00005B6E 7C03                       		moveq	#3,d6
00005B70 7800                       		moveq	#0,d4
00005B72 0C47 0003                  		cmpi.w	#3,d7
00005B76 6400                       		bhs.s	loc_48CC
00005B78 7801                       		moveq	#1,d4
00005B7A                            
00005B7A                            loc_48CC:
00005B7A 7A07                       		moveq	#7,d5
00005B7C                            
00005B7C                            loc_48CE:
00005B7C 224A                       		movea.l	a2,a1
00005B7E 0A04 0001                  		eori.b	#1,d4
00005B82 6600                       		bne.s	loc_48E2
00005B84 0C47 0006                  		cmpi.w	#6,d7
00005B88 6600                       		bne.s	loc_48F2
00005B8A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B90                            
00005B90                            loc_48E2:
00005B90 48E7 F800                  		movem.l	d0-d4,-(sp)
00005B94 7207                       		moveq	#7,d1
00005B96 7407                       		moveq	#7,d2
00005B98 6100 B7E8                  		bsr.w	TilemapToVRAM
00005B9C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005BA0                            
00005BA0                            loc_48F2:
00005BA0 0680 0010 0000             		addi.l	#$100000,d0
00005BA6 51CD FFD4                  		dbf	d5,loc_48CE
00005BAA 0680 0380 0000             		addi.l	#$3800000,d0
00005BB0 0A04 0001                  		eori.b	#1,d4
00005BB4 51CE FFC4                  		dbf	d6,loc_48CC
00005BB8 0683 1000 0000             		addi.l	#$10000000,d3
00005BBE 6A00                       		bpl.s	loc_491C
00005BC0 4843                       		swap	d3
00005BC2 0683 0000 C000             		addi.l	#$C000,d3
00005BC8 4843                       		swap	d3
00005BCA                            
00005BCA                            loc_491C:
00005BCA D4FC 0080                  		adda.w	#$80,a2
00005BCE 51CF FF9C                  		dbf	d7,loc_48BE
00005BD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00005BD8 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005BDE 303C 4000                  		move.w	#$4000,d0
00005BE2 6100 BD52                  		bsr.w	EniDec
00005BE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00005BEC 203C 4000 0003             		move.l	#$40000003,d0
00005BF2 723F                       		moveq	#$3F,d1
00005BF4 741F                       		moveq	#$1F,d2
00005BF6 6100 B78A                  		bsr.w	TilemapToVRAM
00005BFA 43F9 00FF 0000             		lea	($FF0000).l,a1
00005C00 203C 5000 0003             		move.l	#$50000003,d0
00005C06 723F                       		moveq	#$3F,d1
00005C08 743F                       		moveq	#$3F,d2
00005C0A 6100 B776                  		bsr.w	TilemapToVRAM
00005C0E 4E75                       		rts	
00005C10                            ; End of function SS_BGLoad
00005C10                            
00005C10                            ; ---------------------------------------------------------------------------
00005C10                            ; Palette cycling routine - special stage
00005C10                            ; ---------------------------------------------------------------------------
00005C10                            
00005C10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C10                            
00005C10                            
00005C10                            PalCycle_SS:
00005C10 4A78 F63A                  		tst.w	(f_pause).w
00005C14 6600                       		bne.s	locret_49E6
00005C16 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005C1A 6A00                       		bpl.s	locret_49E6
00005C1C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005C22 3038 F79A                  		move.w	(v_palss_num).w,d0
00005C26 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005C2A 0240 001F                  		andi.w	#$1F,d0
00005C2E E548                       		lsl.w	#2,d0
00005C30 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005C36 D0C0                       		adda.w	d0,a0
00005C38 1018                       		move.b	(a0)+,d0
00005C3A 6A00                       		bpl.s	loc_4992
00005C3C 303C 01FF                  		move.w	#$1FF,d0
00005C40                            
00005C40                            loc_4992:
00005C40 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005C44 7000                       		moveq	#0,d0
00005C46 1018                       		move.b	(a0)+,d0
00005C48 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005C4C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005C52 43F1 0000                  		lea	(a1,d0.w),a1
00005C56 303C 8200                  		move.w	#-$7E00,d0
00005C5A 1019                       		move.b	(a1)+,d0
00005C5C 3C80                       		move.w	d0,(a6)
00005C5E 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005C62 303C 8400                  		move.w	#-$7C00,d0
00005C66 1018                       		move.b	(a0)+,d0
00005C68 3C80                       		move.w	d0,(a6)
00005C6A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005C74 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005C7C 7000                       		moveq	#0,d0
00005C7E 1018                       		move.b	(a0)+,d0
00005C80 6B00                       		bmi.s	loc_49E8
00005C82 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005C88 D2C0                       		adda.w	d0,a1
00005C8A 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005C8E 24D9                       		move.l	(a1)+,(a2)+
00005C90 24D9                       		move.l	(a1)+,(a2)+
00005C92 24D9                       		move.l	(a1)+,(a2)+
00005C94                            
00005C94                            locret_49E6:
00005C94 4E75                       		rts	
00005C96                            ; ===========================================================================
00005C96                            
00005C96                            loc_49E8:
00005C96 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005C9A 0C40 008A                  		cmpi.w	#$8A,d0
00005C9E 6500                       		blo.s	loc_49F4
00005CA0 5241                       		addq.w	#1,d1
00005CA2                            
00005CA2                            loc_49F4:
00005CA2 C2FC 002A                  		mulu.w	#$2A,d1
00005CA6 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005CAC D2C1                       		adda.w	d1,a1
00005CAE 0240 007F                  		andi.w	#$7F,d0
00005CB2 0880 0000                  		bclr	#0,d0
00005CB6 6700                       		beq.s	loc_4A18
00005CB8 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005CBC 24D1                       		move.l	(a1),(a2)+
00005CBE 24E9 0004                  		move.l	4(a1),(a2)+
00005CC2 24E9 0008                  		move.l	8(a1),(a2)+
00005CC6                            
00005CC6                            loc_4A18:
00005CC6 D2FC 000C                  		adda.w	#$C,a1
00005CCA 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005CCE 0C40 000A                  		cmpi.w	#$A,d0
00005CD2 6500                       		blo.s	loc_4A2E
00005CD4 0440 000A                  		subi.w	#$A,d0
00005CD8 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005CDC                            
00005CDC                            loc_4A2E:
00005CDC 3200                       		move.w	d0,d1
00005CDE D040                       		add.w	d0,d0
00005CE0 D041                       		add.w	d1,d0
00005CE2 D2C0                       		adda.w	d0,a1
00005CE4 24D9                       		move.l	(a1)+,(a2)+
00005CE6 34D9                       		move.w	(a1)+,(a2)+
00005CE8 4E75                       		rts	
00005CEA                            ; End of function PalCycle_SS
00005CEA                            
00005CEA                            ; ===========================================================================
00005CEA 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005CFA                            
00005CFA 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005D0A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005D1A FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005D2A 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005D3A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005D4A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005D5A FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005D6A                            		even
00005D6A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005D78                            		even
00005D78                            
00005D78                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005DC0                            		even
00005DC0                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005E92                            		even
00005E92                            
00005E92                            ; ---------------------------------------------------------------------------
00005E92                            ; Subroutine to	make the special stage background animated
00005E92                            ; ---------------------------------------------------------------------------
00005E92                            
00005E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E92                            
00005E92                            
00005E92                            SS_BGAnimate:
00005E92 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005E96 6600                       		bne.s	loc_4BF6
00005E98 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005E9E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005EA4                            
00005EA4                            loc_4BF6:
00005EA4 0C40 0008                  		cmpi.w	#8,d0
00005EA8 6400                       		bhs.s	loc_4C4E
00005EAA 0C40 0006                  		cmpi.w	#6,d0
00005EAE 6600                       		bne.s	loc_4C10
00005EB0 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005EB4 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005EB8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005EBE                            
00005EBE                            loc_4C10:
00005EBE 7000                       		moveq	#0,d0
00005EC0 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005EC4 4440                       		neg.w	d0
00005EC6 4840                       		swap	d0
00005EC8 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005ECE 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005ED2 7609                       		moveq	#9,d3
00005ED4                            
00005ED4                            loc_4C26:
00005ED4 302B 0002                  		move.w	2(a3),d0
00005ED8 6100 DE4E                  		bsr.w	CalcSine
00005EDC 7400                       		moveq	#0,d2
00005EDE 1419                       		move.b	(a1)+,d2
00005EE0 C1C2                       		muls.w	d2,d0
00005EE2 E080                       		asr.l	#8,d0
00005EE4 36C0                       		move.w	d0,(a3)+
00005EE6 1419                       		move.b	(a1)+,d2
00005EE8 4882                       		ext.w	d2
00005EEA D55B                       		add.w	d2,(a3)+
00005EEC 51CB FFE6                  		dbf	d3,loc_4C26
00005EF0 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005EF4 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005EFA 6000                       		bra.s	loc_4C7E
00005EFC                            ; ===========================================================================
00005EFC                            
00005EFC                            loc_4C4E:
00005EFC 0C40 000C                  		cmpi.w	#$C,d0
00005F00 6600                       		bne.s	loc_4C74
00005F02 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005F06 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005F0A 243C 0001 8000             		move.l	#$18000,d2
00005F10 7206                       		moveq	#6,d1
00005F12                            
00005F12                            loc_4C64:
00005F12 2013                       		move.l	(a3),d0
00005F14 9082                       		sub.l	d2,d0
00005F16 26C0                       		move.l	d0,(a3)+
00005F18 0482 0000 2000             		subi.l	#$2000,d2
00005F1E 51C9 FFF2                  		dbf	d1,loc_4C64
00005F22                            
00005F22                            loc_4C74:
00005F22 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005F26 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005F2C                            
00005F2C                            loc_4C7E:
00005F2C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005F30 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005F34 4440                       		neg.w	d0
00005F36 4840                       		swap	d0
00005F38 7600                       		moveq	#0,d3
00005F3A 161A                       		move.b	(a2)+,d3
00005F3C 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005F40 4442                       		neg.w	d2
00005F42 0242 00FF                  		andi.w	#$FF,d2
00005F46 E54A                       		lsl.w	#2,d2
00005F48                            
00005F48                            loc_4C9A:
00005F48 301B                       		move.w	(a3)+,d0
00005F4A 544B                       		addq.w	#2,a3
00005F4C 7200                       		moveq	#0,d1
00005F4E 121A                       		move.b	(a2)+,d1
00005F50 5341                       		subq.w	#1,d1
00005F52                            
00005F52                            loc_4CA4:
00005F52 2380 2000                  		move.l	d0,(a1,d2.w)
00005F56 5842                       		addq.w	#4,d2
00005F58 0242 03FC                  		andi.w	#$3FC,d2
00005F5C 51C9 FFF4                  		dbf	d1,loc_4CA4
00005F60 51CB FFE6                  		dbf	d3,loc_4C9A
00005F64 4E75                       		rts	
00005F66                            ; End of function SS_BGAnimate
00005F66                            
00005F66                            ; ===========================================================================
00005F66 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005F72                            		even
00005F72 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005F7A                            		even
00005F7A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005F8E                            		even
00005F8E                            
00005F8E                            ; ===========================================================================
00005F8E                            
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            ; Continue screen
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            
00005F8E                            GM_Continue:
00005F8E 6100 C428                  		bsr.w	PaletteFadeOut
00005F92 46FC 2700                  		disable_ints
00005F96 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005F9A 0200 00BF                  		andi.b	#$BF,d0
00005F9E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005FA4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005FAA 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005FAE 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005FB2 6100 B27A                  		bsr.w	ClearScreen
00005FB6 31FC C800 C8FC             		ResetDMAQueue
00005FBC 43F8 D000                  		lea	(v_objspace).w,a1
00005FC0 7000                       		moveq	#0,d0
00005FC2 323C 07FF                  		move.w	#$7FF,d1
00005FC6                            	Cont_ClrObjRam:
00005FC6 22C0                       		move.l	d0,(a1)+
00005FC8 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005FCC                            
00005FD6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005FDC 6100 B3CE                  		bsr.w	NemDec
00005FEA 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005FF0 6100 B3BA                  		bsr.w	NemDec
00005FFE 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00006004 6100 B3A6                  		bsr.w	NemDec
00006008 720A                       		moveq	#10,d1
0000600A 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00006010 7012                       		moveq	#palid_Continue,d0
00006012 6100 C64E                  		bsr.w	PalLoad1	; load continue	screen palette
0000601E 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00006024 42B8 F700                  		clr.l	(v_screenposx).w
00006028 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00006030 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00006036 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
0000603C 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00006042 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00006048 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
0000604E 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00006054 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
0000605A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006060 4EB9 0000 0000             		jsr	(BuildSprites).l
00006066 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000606A 0000 0040                  		ori.b	#$40,d0
0000606E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006074 6100 C29C                  		bsr.w	PaletteFadeIn
00006078                            
00006078                            ; ---------------------------------------------------------------------------
00006078                            ; Continue screen main loop
00006078                            ; ---------------------------------------------------------------------------
00006078                            
00006078                            Cont_MainLoop:
00006078 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
0000607E 6100 DC76                  		bsr.w	WaitForVBla
00006082 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006088 6400                       		bhs.s	loc_4DF2
0000608A 46FC 2700                  		disable_ints
0000608E 3238 F614                  		move.w	(v_demolength).w,d1
00006092 82FC 003C                  		divu.w	#$3C,d1
00006096 0281 0000 000F             		andi.l	#$F,d1
0000609C 4EB9 0000 0000             		jsr	(ContScrCounter).l
000060A2 46FC 2300                  		enable_ints
000060A6                            
000060A6                            loc_4DF2:
000060A6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000060AC 4EB9 0000 0000             		jsr	(BuildSprites).l
000060B2 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
000060B8 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
000060BA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000060C0 64B6                       		bhs.s	Cont_MainLoop
000060C2 4A78 F614                  		tst.w	(v_demolength).w
000060C6 6600 FFB0                  		bne.w	Cont_MainLoop
000060CA 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
000060D0 4E75                       		rts	
000060D2                            ; ===========================================================================
000060D2                            
000060D2                            Cont_GotoLevel:
000060D2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000060D8 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000060DE 7000                       		moveq	#0,d0
000060E0 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000060E4 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000060E8 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000060EC 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
000060F0 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
000060F4 4E75                       		rts	
000060F6                            ; ===========================================================================
000060F6                            
000060F6                            		include	"_incObj\80 Continue Screen Elements.asm"
000060F6                            ; ---------------------------------------------------------------------------
000060F6                            ; Object 80 - Continue screen elements
000060F6                            ; ---------------------------------------------------------------------------
000060F6                            
000060F6                            ContScrItem:
000060F6 7000                       		moveq	#0,d0
000060F8 1028 0024                  		move.b	$24(a0),d0
000060FC 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00006100 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00006104                            ; ===========================================================================
00006104 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00006106 0000                       		dc.w CSI_Display-CSI_Index
00006108 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
0000610A 0000                       		dc.w CSI_ChkDel-CSI_Index
0000610C                            ; ===========================================================================
0000610C                            
0000610C                            CSI_Main:	; Routine 0
0000610C 5428 0024                  		addq.b	#2,obRoutine(a0)
00006110 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006118 317C 8500 0002             		move.w	#$8500,obGfx(a0)
0000611E 117C 0000 0001             		move.b	#0,obRender(a0)
00006124 117C 003C 0014             		move.b	#$3C,obActWid(a0)
0000612A 317C 0120 0008             		move.w	#$120,obX(a0)
00006130 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00006136 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
0000613C                            
0000613C                            CSI_Display:	; Routine 2
0000613C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006142                            ; ===========================================================================
00006142                            
00006142                            	CSI_MiniSonicPos:
00006142 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00006154 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00006160                            
00006160                            CSI_MakeMiniSonic:
00006160                            		; Routine 4
00006160 2248                       		movea.l	a0,a1
00006162 45F9 0000 6142             		lea	(CSI_MiniSonicPos).l,a2
00006168 7200                       		moveq	#0,d1
0000616A 1238 FE18                  		move.b	(v_continues).w,d1
0000616E 5501                       		subq.b	#2,d1
00006170 6400                       		bcc.s	CSI_MoreThan1
00006172 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00006178                            
00006178                            	CSI_MoreThan1:
00006178 7601                       		moveq	#1,d3
0000617A 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
0000617E 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00006180                            
00006180 7600                       		moveq	#0,d3
00006182 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00006184                            
00006184                            	CSI_FewerThan16:
00006184 1401                       		move.b	d1,d2
00006186 0202 0001                  		andi.b	#1,d2
0000618A                            
0000618A                            CSI_MiniSonicLoop:
0000618A 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
0000618E 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00006192 4A02                       		tst.b	d2		; do you have an even number of continues?
00006194 6700                       		beq.s	CSI_Even	; if yes, branch
00006196 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
0000619C                            
0000619C                            	CSI_Even:
0000619C 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
000061A2 137C 0006 001A             		move.b	#6,obFrame(a1)
000061A8 137C 0006 0024             		move.b	#6,obRoutine(a1)
000061AE 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
000061B6 337C 8551 0002             		move.w	#$8551,obGfx(a1)
000061BC 137C 0000 0001             		move.b	#0,obRender(a1)
000061C2 43E9 0040                  		lea	$40(a1),a1
000061C6 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
000061CA                            
000061CA 43E9 FFC0                  		lea	-$40(a1),a1
000061CE 1343 0028                  		move.b	d3,obSubtype(a1)
000061D2                            
000061D2                            CSI_ChkDel:	; Routine 6
000061D2 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
000061D6 6700                       		beq.s	CSI_Animate	; if yes, branch
000061D8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
000061DE 6500                       		bcs.s	CSI_Animate	; if not, branch
000061E0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000061E4 0200 0001                  		andi.b	#1,d0
000061E8 6600                       		bne.s	CSI_Animate
000061EA 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
000061EE 6600                       		bne.s	CSI_Delete	; if yes, goto delete
000061F0 4E75                       		rts	
000061F2                            
000061F2                            CSI_Animate:
000061F2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000061F6 0200 000F                  		andi.b	#$F,d0
000061FA 6600                       		bne.s	CSI_Display2
000061FC 0868 0000 001A             		bchg	#0,obFrame(a0)
00006202                            
00006202                            	CSI_Display2:
00006202 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006208                            ; ===========================================================================
00006208                            
00006208                            CSI_Delete:
00006208 4EF9 0000 0000             		jmp	(DeleteObject).l
00006208 4EF9 0000 0000             		jmp	(DeleteObject).l
0000620E                            		include	"_incObj\81 Continue Screen Sonic.asm"
0000620E                            ; ---------------------------------------------------------------------------
0000620E                            ; Object 81 - Sonic on the continue screen
0000620E                            ; ---------------------------------------------------------------------------
0000620E                            
0000620E                            ContSonic:
0000620E 7000                       		moveq	#0,d0
00006210 1028 0024                  		move.b	obRoutine(a0),d0
00006214 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00006218 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
0000621C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006222                            ; ===========================================================================
00006222 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00006224 0000                       		dc.w CSon_ChkLand-CSon_Index
00006226 0000                       		dc.w CSon_Animate-CSon_Index
00006228 0000                       		dc.w CSon_Run-CSon_Index
0000622A                            ; ===========================================================================
0000622A                            
0000622A                            CSon_Main:	; Routine 0
0000622A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000622E 317C 00A0 0008             		move.w	#$A0,obX(a0)
00006234 317C 00C0 000C             		move.w	#$C0,obY(a0)
0000623A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006242 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006248 117C 0004 0001             		move.b	#4,obRender(a0)
0000624E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006254 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
0000625A 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00006260                            
00006260                            CSon_ChkLand:	; Routine 2
00006260 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00006266 6600                       		bne.s	CSon_ShowFall	; if not, branch
00006268                            
00006268 5428 0024                  		addq.b	#2,obRoutine(a0)
0000626C 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00006270 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006278 317C 8500 0002             		move.w	#$8500,obGfx(a0)
0000627E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00006284 6000                       		bra.s	CSon_Animate
00006286                            
00006286                            CSon_ShowFall:
00006286 4EB9 0000 0000             		jsr	(SpeedToPos).l
0000628C 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006292 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006298                            ; ===========================================================================
00006298                            
00006298                            CSon_Animate:	; Routine 4
00006298 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
0000629C 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
0000629E 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
000062A4 4EF9 0000 0000             		jmp	(AnimateSprite).l
000062AA                            
000062AA                            CSon_GetUp:
000062AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000062AE 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000062B6 317C 0780 0002             		move.w	#$780,obGfx(a0)
000062BC 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
000062C2 4268 0020                  		clr.w	obInertia(a0)
000062C6 5168 000C                  		subq.w	#8,obY(a0)
000062D2                            
000062D2                            CSon_Run:	; Routine 6
000062D2 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
000062D8 6600                       		bne.s	CSon_AddInertia	; if too low, branch
000062DA 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
000062E0 6000                       		bra.s	CSon_ShowRun
000062E2                            
000062E2                            CSon_AddInertia:
000062E2 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
000062E8                            
000062E8                            CSon_ShowRun:
000062E8 4EB9 0000 0000             		jsr	(SpeedToPos).l
000062EE 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000062F4 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000062F4 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000062FA                            		include	"_anim\Continue Screen Sonic.asm"
000062FA                            ; ---------------------------------------------------------------------------
000062FA                            ; Animation script - Sonic on the continue screen
000062FA                            ; ---------------------------------------------------------------------------
000062FA 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
000062FC 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
00006306                            		even
00006306                            		even
00006306                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00006306                            ; --------------------------------------------------------------------------------
00006306                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006306                            ; --------------------------------------------------------------------------------
00006306                            
00006306                            SME_phED7:	
00006306 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
0000630A 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
0000630E 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
00006312 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
00006316 0B                         SME_phED7_10:	dc.b $B	
00006317 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
0000631C F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006321 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
00006326 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
0000632B F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
00006330 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
00006335 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
0000633A F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
0000633F 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
00006344 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
00006349 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
0000634E 03                         SME_phED7_48:	dc.b 3	
0000634F 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
00006354 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006359 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000635E 03                         SME_phED7_58:	dc.b 3	
0000635F 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
00006364 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006369 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000636E 03                         SME_phED7_68:	dc.b 3	
0000636F 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
00006374 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006379 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000637E 02                         SME_phED7_78:	dc.b 2	
0000637F 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
00006384 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006389 01                         SME_phED7_83:	dc.b 1	
0000638A 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000638F 01                         SME_phED7_89:	dc.b 1	
00006390 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006395 01                         SME_phED7_8F:	dc.b 1	
00006396 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
0000639C 00                         		even
0000639C 00                         		even
0000639C                            
0000639C                            ; ===========================================================================
0000639C                            ; ---------------------------------------------------------------------------
0000639C                            ; Ending sequence in Green Hill	Zone
0000639C                            ; ---------------------------------------------------------------------------
0000639C                            
0000639C                            GM_Ending:
000063A4 6100 C012                  		bsr.w	PaletteFadeOut
000063A8                            
000063A8 43F8 D000                  		lea	(v_objspace).w,a1
000063AC 7000                       		moveq	#0,d0
000063AE 323C 07FF                  		move.w	#$7FF,d1
000063B2                            	End_ClrObjRam:
000063B2 22C0                       		move.l	d0,(a1)+
000063B4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000063B8                            
000063B8 43F8 F628                  		lea	($FFFFF628).w,a1
000063BC 7000                       		moveq	#0,d0
000063BE 323C 0015                  		move.w	#$15,d1
000063C2                            	End_ClrRam1:
000063C2 22C0                       		move.l	d0,(a1)+
000063C4 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
000063C8                            
000063C8 43F8 F700                  		lea	(v_screenposx).w,a1
000063CC 7000                       		moveq	#0,d0
000063CE 323C 003F                  		move.w	#$3F,d1
000063D2                            	End_ClrRam2:
000063D2 22C0                       		move.l	d0,(a1)+
000063D4 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000063D8                            
000063D8 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000063DC 7000                       		moveq	#0,d0
000063DE 323C 0047                  		move.w	#$47,d1
000063E2                            	End_ClrRam3:
000063E2 22C0                       		move.l	d0,(a1)+
000063E4 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000063E8                            
000063E8 46FC 2700                  		disable_ints
000063EC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000063F0 0200 00BF                  		andi.b	#$BF,d0
000063F4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000063FA 6100 AE32                  		bsr.w	ClearScreen
000063FE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006404 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006408 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000640C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006410 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006414 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006418 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000641C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006420 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006426 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000642A 31FC 001E FE14             		move.w	#30,(v_air).w
00006430 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006436 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
0000643C 6700                       		beq.s	End_LoadData	; if yes, branch
0000643E 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006444                            
00006444                            End_LoadData:
00006444 7000                       		moveq	#plcid_Ending,d0
00006446 6100 B4BC                  		bsr.w	QuickPLC	; load ending sequence patterns
0000644A 4EB9 0000 0000             		jsr	(Hud_Base).l
00006450 6100 0000                  		bsr.w	LevelSizeLoad
00006454 6100 0000                  		bsr.w	DeformLayers
00006458 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000645E 6100 0000                  		bsr.w	LevelDataLoad
00006462 6100 0000                  		bsr.w	LoadTilesFromStart
00006466 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000646E 46FC 2300                  		enable_ints
00006472 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006478 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000647C 6100 B636                  		bsr.w	KosDec
00006480 4EB9 0000 0000             		jsr		LoadPlayerPal
00006486 6100 C1DA                  		bsr.w	PalLoad1	; load Sonic's palette
00006492 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006498 6700                       		beq.s	End_LoadSonic	; if not, branch
0000649A 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000064A0                            
000064A0                            End_LoadSonic:
000064A0 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000064A6 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
000064AC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
000064B2 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
000064B8 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
000064BE 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000064C4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000064CA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000064D0 4EB9 0000 0000             		jsr	(BuildSprites).l
000064D6 7000                       		moveq	#0,d0
000064D8 31C0 FE20                  		move.w	d0,(v_rings).w
000064DC 21C0 FE22                  		move.l	d0,(v_time).w
000064E0 11C0 FE1B                  		move.b	d0,(v_lifecount).w
000064E4 11C0 FE2C                  		move.b	d0,(v_shield).w
000064E8 11C0 FE2D                  		move.b	d0,(v_invinc).w
000064EC 11C0 FE2E                  		move.b	d0,(v_shoes).w
000064F0 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000064F4 31C0 FE08                  		move.w	d0,(v_debuguse).w
000064F8 31C0 FE02                  		move.w	d0,(f_restart).w
000064FC 31C0 FE04                  		move.w	d0,(v_framecount).w
00006500 6100 EEBC                  		bsr.w	OscillateNumInit
00006504 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
0000650A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006510 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006516 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000651C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006522 6100 D7D2                  		bsr.w	WaitForVBla
00006526 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000652A 0000 0040                  		ori.b	#$40,d0
0000652E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006534 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000653A 6100 BDD6                  		bsr.w	PaletteFadeIn
0000653E                            
0000653E                            ; ---------------------------------------------------------------------------
0000653E                            ; Main ending sequence loop
0000653E                            ; ---------------------------------------------------------------------------
0000653E                            
0000653E                            End_MainLoop:
0000653E 6100 ADCA                  		bsr.w	PauseGame
00006542 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006548 6100 D7AC                  		bsr.w	WaitForVBla
0000654C 5278 FE04                  		addq.w	#1,(v_framecount).w
00006550 6100 0000                  		bsr.w	End_MoveSonic
00006554 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000655A 6100 0000                  		bsr.w	DeformLayers
0000655E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006564 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000656A 6100 B810                  		bsr.w	PaletteCycle
0000656E 6100 EEA4                  		bsr.w	OscillateNumDo
00006572 6100 EF30                  		bsr.w	SynchroAnimate
00006576 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
0000657C 6700                       		beq.s	End_ChkEmerald	; if yes, branch
0000657E                            
0000657E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
00006584 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
0000658A 4E75                       		rts	
0000658C                            ; ===========================================================================
0000658C                            
0000658C                            End_ChkEmerald:
0000658C 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006590 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
00006594                            
00006594 4278 FE02                  		clr.w	(f_restart).w
00006598 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000659E 4278 F794                  		clr.w	(v_palchgspeed).w
000065A2                            
000065A2                            	End_AllEmlds:
000065A2 6100 AD66                  		bsr.w	PauseGame
000065A6 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000065AC 6100 D748                  		bsr.w	WaitForVBla
000065B0 5278 FE04                  		addq.w	#1,(v_framecount).w
000065B4 6100 0000                  		bsr.w	End_MoveSonic
000065B8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000065BE 6100 0000                  		bsr.w	DeformLayers
000065C2 4EB9 0000 0000             		jsr	(BuildSprites).l
000065C8 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000065CE 6100 EE44                  		bsr.w	OscillateNumDo
000065D2 6100 EED0                  		bsr.w	SynchroAnimate
000065D6 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000065DA 6A00                       		bpl.s	End_SlowFade
000065DC 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000065E2 6100 BF1E                  		bsr.w	WhiteOut_ToWhite
000065E6                            
000065E6                            	End_SlowFade:
000065E6 4A78 FE02                  		tst.w	(f_restart).w
000065EA 6700 FFB6                  		beq.w	End_AllEmlds
000065EE 4278 FE02                  		clr.w	(f_restart).w
000065F2 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000065F8 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000065FE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00006604 47F8 F700                  		lea	(v_screenposx).w,a3
00006608 49F8 A400                  		lea	(v_lvllayout).w,a4
0000660C 343C 4000                  		move.w	#$4000,d2
00006610 6100 0000                  		bsr.w	DrawChunks
00006614 7015                       		moveq	#palid_Ending,d0
00006616 6100 C04A                  		bsr.w	PalLoad1	; load ending palette
0000661A 6100 BE1A                  		bsr.w	PaletteWhiteIn
0000661E 6000 FF1E                  		bra.w	End_MainLoop
00006622                            
00006622                            ; ---------------------------------------------------------------------------
00006622                            ; Subroutine controlling Sonic on the ending sequence
00006622                            ; ---------------------------------------------------------------------------
00006622                            
00006622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006622                            
00006622                            
00006622                            End_MoveSonic:
00006622 1038 F7D7                  		move.b	(v_sonicend).w,d0
00006626 6600                       		bne.s	End_MoveSon2
00006628 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
0000662E 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006630                            
00006630 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006634 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
0000663A 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006640 4E75                       		rts	
00006642                            ; ===========================================================================
00006642                            
00006642                            End_MoveSon2:
00006642 5500                       		subq.b	#2,d0
00006644 6600                       		bne.s	End_MoveSon3
00006646 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
0000664C 6500                       		blo.s	End_MoveSonExit	; if not, branch
0000664E                            
0000664E 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006652 7000                       		moveq	#0,d0
00006654 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006658 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
0000665C 31C0 D020                  		move.w	d0,(v_player+obInertia).w
00006660 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
00006666 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
0000666C 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
00006672 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
00006678 4E75                       		rts	
0000667A                            ; ===========================================================================
0000667A                            
0000667A                            End_MoveSon3:
0000667A 5500                       		subq.b	#2,d0
0000667C 6600                       		bne.s	End_MoveSonExit
0000667E 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006682 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006688 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
0000668E 4278 D024                  		clr.w	(v_player+obRoutine).w
00006692                            
00006692                            End_MoveSonExit:
00006692 4E75                       		rts	
00006694                            ; End of function End_MoveSonic
00006694                            
00006694                            ; ===========================================================================
00006694                            
00006694                            		include	"_incObj\87 Ending Sequence Sonic.asm"
00006694                            ; ---------------------------------------------------------------------------
00006694                            ; Object 87 - Sonic on ending sequence
00006694                            ; ---------------------------------------------------------------------------
00006694                            
00006694                            EndSonic:
00006694 7000                       		moveq	#0,d0
00006696 1028 0025                  		move.b	ob2ndRout(a0),d0
0000669A 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
0000669E 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
000066A2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000066A8                            ; ===========================================================================
000066A8 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
000066AC 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
000066B0 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
000066B4 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
000066B8 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000066BC                            
000066BC =00000030                  eson_time:	equ $30	; time to wait between events
000066BC                            ; ===========================================================================
000066BC                            
000066BC                            ESon_Main:	; Routine 0
000066BC 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000066C2 6700                       		beq.s	ESon_Main2	; if yes, branch
000066C4 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
000066CA 317C 00D8 0030             		move.w	#216,eson_time(a0)
000066D0 4E75                       		rts	
000066D2                            ; ===========================================================================
000066D2                            
000066D2                            ESon_Main2:
000066D2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066D6 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000066DE 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000066E4 117C 0004 0001             		move.b	#4,obRender(a0)
000066EA 4228 0022                  		clr.b	obStatus(a0)
000066EE 317C 0100 0018             		move.w	#$100,obPriority(a0)
000066F4 117C 0000 001A             		move.b	#0,obFrame(a0)
000066FA 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006700                            
00006700                            ESon_MakeEmeralds:
00006700                            		; Routine 2
00006700 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
00006704 6600                       		bne.s	ESon_Wait
00006706 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000670A 317C 0001 001C             		move.w	#1,obAnim(a0)
00006710 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
00006716                            
00006716                            	ESon_Wait:
00006716 4E75                       		rts	
00006718                            ; ===========================================================================
00006718                            
00006718                            Obj87_LookUp:	; Routine 6
00006718 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006720 6600                       		bne.s	locret_5480
00006722 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006728 317C 005A 0030             		move.w	#90,eson_time(a0)
0000672E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006732                            
00006732                            locret_5480:
00006732 4E75                       		rts	
00006734                            ; ===========================================================================
00006734                            
00006734                            Obj87_ClrObjRam:
00006734                            		; Routine 8
00006734 5368 0030                  		subq.w	#1,eson_time(a0)
00006738 6600                       		bne.s	ESon_Wait2
0000673A 43F8 D400                  		lea	(v_objspace+$400).w,a1
0000673E 323C 00FF                  		move.w	#$FF,d1
00006742                            
00006742                            Obj87_ClrLoop:
00006742 4299                       		clr.l	(a1)+
00006744 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006748 31FC 0001 FE02             		move.w	#1,(f_restart).w
0000674E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006752 117C 0001 001C             		move.b	#1,obAnim(a0)
00006758 317C 003C 0030             		move.w	#60,eson_time(a0)
0000675E                            
0000675E                            ESon_Wait2:
0000675E 4E75                       		rts	
00006760                            ; ===========================================================================
00006760                            
00006760                            Obj87_MakeLogo:	; Routine $C
00006760 5368 0030                  		subq.w	#1,eson_time(a0)
00006764 6600                       		bne.s	ESon_Wait3
00006766 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000676A 317C 00B4 0030             		move.w	#180,eson_time(a0)
00006770 117C 0002 001C             		move.b	#2,obAnim(a0)
00006776 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000677C                            
0000677C                            ESon_Wait3:
0000677C 4E75                       		rts	
0000677E                            ; ===========================================================================
0000677E                            
0000677E                            Obj87_Animate:	; Rountine 4, $A, $E, $12
0000677E 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
00006784 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000678A                            ; ===========================================================================
0000678A                            
0000678A                            Obj87_Leap:	; Routine $10
0000678A 5368 0030                  		subq.w	#1,eson_time(a0)
0000678E 6600                       		bne.s	ESon_Wait4
00006790 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006794 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
0000679C 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000067A2 117C 0004 0001             		move.b	#4,obRender(a0)
000067A8 4228 0022                  		clr.b	obStatus(a0)
000067AC 317C 0100 0018             		move.w	#$100,obPriority(a0)
000067B2 117C 0005 001A             		move.b	#5,obFrame(a0)
000067B8 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000067BE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000067C4 60B8                       		bra.s	Obj87_Animate
000067C6                            ; ===========================================================================
000067C6                            
000067C6                            ESon_Wait4:
000067C6 4E75                       		rts	
000067C6 4E75                       		rts	
000067C8                            		include "_anim\Ending Sequence Sonic.asm"
000067C8                            ; ---------------------------------------------------------------------------
000067C8                            ; Animation script - Sonic on the ending sequence
000067C8                            ; ---------------------------------------------------------------------------
000067C8 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
000067CA 0000                       		dc.w byte_552A-AniScript_ESon
000067CC 0000                       		dc.w byte_5534-AniScript_ESon
000067CE 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000067DC 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000067E6 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000067EE                            		even
000067EE                            		even
000067EE                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            ; Object 88 - chaos emeralds on	the ending sequence
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            
000067EE                            EndChaos:
000067EE 7000                       		moveq	#0,d0
000067F0 1028 0024                  		move.b	obRoutine(a0),d0
000067F4 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000067F8 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000067FC 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006802                            ; ===========================================================================
00006802 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
00006804 0000                       		dc.w ECha_Move-ECha_Index
00006806                            
00006806 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
00006806 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
00006806 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
00006806 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
00006806                            ; ===========================================================================
00006806                            
00006806                            ECha_Main:	; Routine 0
00006806 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
0000680C 6700                       		beq.s	ECha_CreateEms
0000680E 588F                       		addq.l	#4,sp
00006810 4E75                       		rts	
00006812                            ; ===========================================================================
00006812                            
00006812                            ECha_CreateEms:
00006812 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006818 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
0000681E 2248                       		movea.l	a0,a1
00006820 7600                       		moveq	#0,d3
00006822 7401                       		moveq	#1,d2
00006824 7205                       		moveq	#5,d1
00006826                            
00006826                            	ECha_LoadLoop:
00006826 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
0000682A 5429 0024                  		addq.b	#2,obRoutine(a1)
0000682E 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
00006836 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
0000683C 137C 0004 0001             		move.b	#4,obRender(a1)
00006842 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006848 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
0000684E 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
00006854 1342 001C                  		move.b	d2,obAnim(a1)
00006858 1342 001A                  		move.b	d2,obFrame(a1)
0000685C 5202                       		addq.b	#1,d2
0000685E 1343 0026                  		move.b	d3,obAngle(a1)
00006862 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
00006866 43E9 0040                  		lea	$40(a1),a1
0000686A 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
0000686E                            
0000686E                            ECha_Move:	; Routine 2
0000686E 3028 003E                  		move.w	echa_angle(a0),d0
00006872 D168 0026                  		add.w	d0,obAngle(a0)
00006876 1028 0026                  		move.b	obAngle(a0),d0
0000687A 4EB9 0000 3D28             		jsr	(CalcSine).l
00006880 7800                       		moveq	#0,d4
00006882 1828 003C                  		move.b	echa_radius(a0),d4
00006886 C3C4                       		muls.w	d4,d1
00006888 E081                       		asr.l	#8,d1
0000688A C1C4                       		muls.w	d4,d0
0000688C E080                       		asr.l	#8,d0
0000688E D268 0038                  		add.w	echa_origX(a0),d1
00006892 D068 003A                  		add.w	echa_origY(a0),d0
00006896 3141 0008                  		move.w	d1,obX(a0)
0000689A 3140 000C                  		move.w	d0,obY(a0)
0000689E                            
0000689E                            	ECha_Expand:
0000689E 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
000068A4 6700                       		beq.s	ECha_Rotate
000068A6 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
000068AC                            
000068AC                            	ECha_Rotate:
000068AC 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
000068B2 6700                       		beq.s	ECha_Rise
000068B4 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000068BA                            
000068BA                            	ECha_Rise:
000068BA 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000068C0 6700                       		beq.s	ECha_End
000068C2 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000068C6                            
000068C6                            ECha_End:
000068C6 4E75                       		rts	
000068C6 4E75                       		rts	
000068C8                            		include	"_incObj\89 Ending Sequence STH.asm"
000068C8                            ; ---------------------------------------------------------------------------
000068C8                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000068C8                            ; ---------------------------------------------------------------------------
000068C8                            
000068C8                            EndSTH:
000068C8 7000                       		moveq	#0,d0
000068CA 1028 0024                  		move.b	$24(a0),d0
000068CE 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
000068D2 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
000068D6 4EF9 0000 0000             		jmp	(DisplaySprite).l
000068DC                            ; ===========================================================================
000068DC 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000068DE 0000                       		dc.w ESth_Move-ESth_Index
000068E0 0000                       		dc.w ESth_GotoCredits-ESth_Index
000068E2                            
000068E2 =00000030                  esth_time:	equ $30		; time until exit
000068E2                            ; ===========================================================================
000068E2                            
000068E2                            ESth_Main:	; Routine 0
000068E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000068E6 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000068EC 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000068F2 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000068FA 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006900 117C 0000 0001             		move.b	#0,obRender(a0)
00006906 317C 0000 0018             		move.w	#0,obPriority(a0)
0000690C                            
0000690C                            ESth_Move:	; Routine 2
0000690C 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006912 6700                       		beq.s	ESth_Delay	; if yes, branch
00006914 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
0000691A 4E75                       		rts
0000691C                            
0000691C                            ESth_Delay:
0000691C 5428 0024                  		addq.b	#2,obRoutine(a0)
00006920 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
00006926                            
00006926                            ESth_GotoCredits:
00006926                            		; Routine 4
00006926 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
0000692A 6A00                       		bpl.s	ESth_Wait
0000692C 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006932                            
00006932                            	ESth_Wait:
00006932 4E75                       		rts
00006934                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
00006934                            ; --------------------------------------------------------------------------------
00006934                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006934                            ; --------------------------------------------------------------------------------
00006934                            
00006934                            SME_6jV7R:	
00006934 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
00006938 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
0000693C 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
00006940 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
00006944 02                         SME_6jV7R_10:	dc.b 2	
00006945 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
0000694A 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0000694F 03                         SME_6jV7R_1B:	dc.b 3	
00006950 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
00006955 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
0000695A 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0000695F 02                         SME_6jV7R_2B:	dc.b 2	
00006960 EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
00006965 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
0000696A 04                         SME_6jV7R_36:	dc.b 4	
0000696B F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
00006970 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006975 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
0000697A EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
0000697F 04                         SME_6jV7R_4B:	dc.b 4	
00006980 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
00006985 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
0000698A E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
0000698F EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
00006994 03                         SME_6jV7R_60:	dc.b 3	
00006995 EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
0000699A EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
0000699F 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
000069A4 07                         SME_6jV7R_70:	dc.b 7	
000069A5 B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
000069AA BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
000069AF BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
000069B4 CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
000069B9 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
000069BE E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
000069C3 EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
000069C8 18                         SME_6jV7R_94:	dc.b $18	
000069C9 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
000069CE 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
000069D3 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
000069D8 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
000069DD A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
000069E2 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
000069E7 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
000069EC A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
000069F1 B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
000069F6 B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
000069FB A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
00006A00 C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
00006A05 C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
00006A0A B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
00006A0F B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
00006A14 D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
00006A19 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
00006A1E D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
00006A23 E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
00006A28 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
00006A2D D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
00006A32 E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
00006A37 F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
00006A3C F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
00006A42 00                         		even
00006A42 00                         		even
00006A42                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006A42                            ; --------------------------------------------------------------------------------
00006A42                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006A42                            ; --------------------------------------------------------------------------------
00006A42                            
00006A42                            SME_0ZTmS:	
00006A42 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006A46 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
00006A4A 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006A4E 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006A50 01                         SME_0ZTmS_E:	dc.b 1	
00006A51 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00006A56 01                         SME_0ZTmS_14:	dc.b 1	
00006A57 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006A5C 01                         SME_0ZTmS_1A:	dc.b 1	
00006A5D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006A62 01                         SME_0ZTmS_20:	dc.b 1	
00006A63 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
00006A68 01                         SME_0ZTmS_26:	dc.b 1	
00006A69 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006A6E 01                         SME_0ZTmS_2C:	dc.b 1	
00006A6F F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006A74 01                         SME_0ZTmS_32:	dc.b 1	
00006A75 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
00006A7A                            		even
00006A7A                            		even
00006A7A                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
00006A7A                            ; --------------------------------------------------------------------------------
00006A7A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006A7A                            ; --------------------------------------------------------------------------------
00006A7A                            
00006A7A                            SME_WuUDZ:	
00006A7A 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
00006A7C 03                         SME_WuUDZ_2:	dc.b 3	
00006A7D F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
00006A82 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
00006A87 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
00006A8C                            		even
00006A8C                            		even
00006A8C                            
00006A8C                            ; ===========================================================================
00006A8C                            ; ---------------------------------------------------------------------------
00006A8C                            ; Credits ending sequence
00006A8C                            ; ---------------------------------------------------------------------------
00006A8C                            
00006A8C                            GM_Credits:
00006A8C                            		
00006A8C 6100 AD68                  		bsr.w	ClearPLC
00006A90 6100 B926                  		bsr.w	PaletteFadeOut
00006A94 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006A9A 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006A9E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006AA2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006AA6 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006AAA 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006AAE 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006AB2 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006AB6 4238 F64E                  		clr.b	(f_wtr_state).w
00006ABA 6100 A772                  		bsr.w	ClearScreen
00006ABE                            
00006ABE 43F8 D000                  		lea	(v_objspace).w,a1
00006AC2 7000                       		moveq	#0,d0
00006AC4 323C 07FF                  		move.w	#$7FF,d1
00006AC8                            	TryAg_ClrObjRam:
00006AC8 22C0                       		move.l	d0,(a1)+
00006ACA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006ACE                            
00006ACE 7000                       		moveq	#plcid_TryAgain,d0
00006AD0 6100 AE32                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006AD4                            
00006AD4 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006AD8 7000                       		moveq	#0,d0
00006ADA 323C 001F                  		move.w	#$1F,d1
00006ADE                            	TryAg_ClrPal:
00006ADE 22C0                       		move.l	d0,(a1)+
00006AE0 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006AE4                            
00006AE4 7015                       		moveq	#palid_Ending,d0
00006AE6 6100 BB7A                  		bsr.w	PalLoad1	; load ending palette
00006AEA 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006AEE 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006AF4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006AFA 4EB9 0000 0000             		jsr	(BuildSprites).l
00006B00 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006B06 6100 B80A                  		bsr.w	PaletteFadeIn
00006B0A                            
00006B0A                            ; ---------------------------------------------------------------------------
00006B0A                            ; "TRY AGAIN" and "END"	screen main loop
00006B0A                            ; ---------------------------------------------------------------------------
00006B0A                            TryAg_MainLoop:
00006B0A 6100 A7FE                  		bsr.w	PauseGame
00006B0E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006B14 6100 D1E0                  		bsr.w	WaitForVBla
00006B18 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006B1E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006B24 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006B2A 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006B2C 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006B30 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006B32 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006B38 67D0                       		beq.s	TryAg_MainLoop
00006B3A                            
00006B3A                            TryAg_Exit:
00006B3A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006B40 4E75                       		rts	
00006B42                            
00006B42                            ; ===========================================================================
00006B42                            
00006B42                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006B42                            ; ---------------------------------------------------------------------------
00006B42                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006B42                            ; ---------------------------------------------------------------------------
00006B42                            
00006B42                            EndEggman:
00006B42 7000                       		moveq	#0,d0
00006B44 1028 0024                  		move.b	obRoutine(a0),d0
00006B48 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006B4C 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006B50 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006B56                            ; ===========================================================================
00006B56 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006B58 0000                       		dc.w EEgg_Animate-EEgg_Index
00006B5A 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006B5C 0000                       		dc.w EEgg_Wait-EEgg_Index
00006B5E                            
00006B5E =00000030                  eegg_time:	equ $30		; time between juggle motions
00006B5E                            ; ===========================================================================
00006B5E                            
00006B5E                            EEgg_Main:	; Routine 0
00006B5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00006B62 317C 0120 0008             		move.w	#$120,obX(a0)
00006B68 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006B6E 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006B76 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006B7C 117C 0000 0001             		move.b	#0,obRender(a0)
00006B82 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006B88 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006B8E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006B94 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006B96                            
00006B96 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006B9C 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006BA2 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006BA8 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006BAE                            
00006BAE                            EEgg_Animate:	; Routine 2
00006BAE 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006BB4 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006BBA                            ; ===========================================================================
00006BBA                            
00006BBA                            EEgg_Juggle:	; Routine 4
00006BBA 5428 0024                  		addq.b	#2,obRoutine(a0)
00006BBE 7002                       		moveq	#2,d0
00006BC0 0828 0000 001C             		btst	#0,obAnim(a0)
00006BC6 6700                       		beq.s	@noflip
00006BC8 4440                       		neg.w	d0
00006BCA                            
00006BCA                            	@noflip:
00006BCA 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006BCE 7205                       		moveq	#5,d1
00006BD0                            
00006BD0                            @emeraldloop:
00006BD0 1340 003E                  		move.b	d0,$3E(a1)
00006BD4 3400                       		move.w	d0,d2
00006BD6 E742                       		asl.w	#3,d2
00006BD8 D529 0026                  		add.b	d2,obAngle(a1)
00006BDC 43E9 0040                  		lea	$40(a1),a1
00006BE0 51C9 FFEE                  		dbf	d1,@emeraldloop
00006BE4 5228 001A                  		addq.b	#1,obFrame(a0)
00006BE8 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006BEE                            
00006BEE                            EEgg_Wait:	; Routine 6
00006BEE 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006BF2 6A00                       		bpl.s	@nochg		; branch if time remains
00006BF4 0868 0000 001C             		bchg	#0,obAnim(a0)
00006BFA 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006C00                            
00006C00                            	@nochg:
00006C00 4E75                       		rts	
00006C00 4E75                       		rts	
00006C02                            		include "_anim\Try Again & End Eggman.asm"
00006C02                            ; ---------------------------------------------------------------------------
00006C02                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006C02                            ; ---------------------------------------------------------------------------
00006C02 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006C04 0000                       		dc.w @tryagain2-Ani_EEgg
00006C06 0000                       		dc.w @end-Ani_EEgg
00006C08 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006C0C 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006C10 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006C22                            		even
00006C22                            		even
00006C22                            		include	"_incObj\8C Try Again Emeralds.asm"
00006C22                            ; ---------------------------------------------------------------------------
00006C22                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006C22                            ; ---------------------------------------------------------------------------
00006C22                            
00006C22                            TryChaos:
00006C22 7000                       		moveq	#0,d0
00006C24 1028 0024                  		move.b	obRoutine(a0),d0
00006C28 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006C2C 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006C30 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006C36                            ; ===========================================================================
00006C36 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006C38 0000                       		dc.w TCha_Move-TCha_Index
00006C3A                            ; ===========================================================================
00006C3A                            
00006C3A                            TCha_Main:	; Routine 0
00006C3A 2248                       		movea.l	a0,a1
00006C3C 7400                       		moveq	#0,d2
00006C3E 7600                       		moveq	#0,d3
00006C40 7205                       		moveq	#5,d1
00006C42 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006C46                            
00006C46                            @makeemerald:
00006C46 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006C4A 5429 0024                  		addq.b	#2,obRoutine(a1)
00006C4E 237C 0000 6A42 0004        		move.l	#Map_ECha,obMap(a1)
00006C56 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006C5C 137C 0000 0001             		move.b	#0,obRender(a1)
00006C62 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006C68 337C 0104 0008             		move.w	#$104,obX(a1)
00006C6E 337C 0120 0038             		move.w	#$120,$38(a1)
00006C74 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006C7A 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006C80 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006C86 47F8 FE58                  		lea	(v_emldlist).w,a3
00006C8A                            
00006C8A                            	@chkemerald:
00006C8A 7000                       		moveq	#0,d0
00006C8C 1038 FE57                  		move.b	(v_emeralds).w,d0
00006C90 5340                       		subq.w	#1,d0
00006C92 6500                       		bcs.s	@loc_5B42
00006C94                            
00006C94                            	@chkloop:
00006C94 B433 0000                  		cmp.b	(a3,d0.w),d2
00006C98 6600                       		bne.s	@notgot
00006C9A 5202                       		addq.b	#1,d2
00006C9C 60EC                       		bra.s	@chkemerald
00006C9E                            ; ===========================================================================
00006C9E                            
00006C9E                            	@notgot:
00006C9E 51C8 FFF4                  		dbf	d0,@chkloop
00006CA2                            
00006CA2                            @loc_5B42:
00006CA2 1342 001A                  		move.b	d2,obFrame(a1)
00006CA6 5229 001A                  		addq.b	#1,obFrame(a1)
00006CAA 5202                       		addq.b	#1,d2
00006CAC 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006CB2 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006CB6 1343 001F                  		move.b	d3,obDelayAni(a1)
00006CBA 0643 000A                  		addi.w	#10,d3
00006CBE 43E9 0040                  		lea	$40(a1),a1
00006CC2 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006CC6                            
00006CC6                            TCha_Move:	; Routine 2
00006CC6 4A68 003E                  		tst.w	$3E(a0)
00006CCA 6700                       		beq.s	locret_5BBA
00006CCC 4A28 001E                  		tst.b	obTimeFrame(a0)
00006CD0 6700                       		beq.s	loc_5B78
00006CD2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006CD6 6600                       		bne.s	loc_5B80
00006CD8                            
00006CD8                            loc_5B78:
00006CD8 3028 003E                  		move.w	$3E(a0),d0
00006CDC D168 0026                  		add.w	d0,obAngle(a0)
00006CE0                            
00006CE0                            loc_5B80:
00006CE0 1028 0026                  		move.b	obAngle(a0),d0
00006CE4 6700                       		beq.s	loc_5B8C
00006CE6 0C00 0080                  		cmpi.b	#$80,d0
00006CEA 6600                       		bne.s	loc_5B96
00006CEC                            
00006CEC                            loc_5B8C:
00006CEC 4268 003E                  		clr.w	$3E(a0)
00006CF0 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006CF6                            
00006CF6                            loc_5B96:
00006CF6 4EB9 0000 3D28             		jsr	(CalcSine).l
00006CFC 7800                       		moveq	#0,d4
00006CFE 1828 003C                  		move.b	$3C(a0),d4
00006D02 C3C4                       		muls.w	d4,d1
00006D04 E081                       		asr.l	#8,d1
00006D06 C1C4                       		muls.w	d4,d0
00006D08 E080                       		asr.l	#8,d0
00006D0A D268 0038                  		add.w	$38(a0),d1
00006D0E D068 003A                  		add.w	$3A(a0),d0
00006D12 3141 0008                  		move.w	d1,obX(a0)
00006D16 3140 000A                  		move.w	d0,obScreenY(a0)
00006D1A                            
00006D1A                            locret_5BBA:
00006D1A 4E75                       		rts	
00006D1A 4E75                       		rts	
00006D1C                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006D1C                            ; ---------------------------------------------------------------------------
00006D1C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006D1C                            ; ---------------------------------------------------------------------------
00006D1C                            Map_EEgg_internal:
00006D1C 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006D1E 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006D20 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006D22 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006D24 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006D26 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006D28 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006D2A 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006D2C 08                         M_EEgg_Try1:	dc.b 8
00006D2D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006D32 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006D37 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006D3C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006D41 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D46 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D4B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D50 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D55 08                         M_EEgg_Try2:	dc.b 8
00006D56 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006D5B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006D60 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006D65 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006D6A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006D6F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006D74 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D79 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D7E 08                         M_EEgg_Try3:	dc.b 8
00006D7F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006D84 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006D89 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006D8E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006D93 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D98 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D9D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006DA2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006DA7 08                         M_EEgg_Try4:	dc.b 8
00006DA8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006DAD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006DB2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006DB7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006DBC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006DC1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006DC6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006DCB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006DD0 0C                         M_EEgg_End1:	dc.b $C
00006DD1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006DD6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006DDB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006DE0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006DE5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006DEA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006DEF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006DF4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006DF9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006DFE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006E03 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006E08 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006E0D 0A                         M_EEgg_End2:	dc.b $A
00006E0E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006E13 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006E18 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006E1D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006E22 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006E27 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006E2C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006E31 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006E36 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006E3B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006E40 0A                         M_EEgg_End3:	dc.b $A
00006E41 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006E46 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006E4B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006E50 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006E55 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006E5A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006E5F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006E64 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006E69 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006E6E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006E73 0C                         M_EEgg_End4:	dc.b $C
00006E74 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006E79 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006E7E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006E83 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006E88 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006E8D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006E92 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006E97 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006E9C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006EA1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006EA6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006EAB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006EB0                            		even
00006EB0                            		even
00006EB0                            
00006EB0                            ; ---------------------------------------------------------------------------
00006EB0                            ; Ending sequence demos
00006EB0                            ; ---------------------------------------------------------------------------
00006EB0                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006EDE                            		even
00006EDE                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006F1E                            		even
00006F1E                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006F4E                            		even
00006F4E                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006F7E                            		even
00006F7E                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006F9E                            		even
00006F9E                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006FBE                            		even
00006FBE                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006FEE                            		even
00006FEE                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
0000701E                            		even
0000701E                            
0000701E                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
0000701E                            ; ---------------------------------------------------------------------------
0000701E                            ; Subroutine to	load level boundaries and start	locations
0000701E                            ; ---------------------------------------------------------------------------
0000701E                            
0000701E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000701E                            
0000701E                            
0000701E                            LevelSizeLoad:
0000701E 7000                       		moveq	#0,d0
00007020 11C0 F740                  		move.b	d0,($FFFFF740).w
00007024 11C0 F741                  		move.b	d0,($FFFFF741).w
00007028 11C0 F746                  		move.b	d0,($FFFFF746).w
0000702C 11C0 F748                  		move.b	d0,($FFFFF748).w
00007030 11C0 F742                  		move.b	d0,(v_dle_routine).w
00007034 3038 FE10                  		move.w	(v_zone).w,d0
00007038 ED08                       		lsl.b	#6,d0
0000703A E848                       		lsr.w	#4,d0
0000703C 3200                       		move.w	d0,d1
0000703E D040                       		add.w	d0,d0
00007040 D041                       		add.w	d1,d0
00007042 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00007046 3018                       		move.w	(a0)+,d0
00007048 31C0 F730                  		move.w	d0,($FFFFF730).w
0000704C 2018                       		move.l	(a0)+,d0
0000704E 21C0 F728                  		move.l	d0,(v_limitleft2).w
00007052 21C0 F720                  		move.l	d0,(v_limitleft1).w
00007056 2018                       		move.l	(a0)+,d0
00007058 21C0 F72C                  		move.l	d0,(v_limittop2).w
0000705C 21C0 F724                  		move.l	d0,(v_limittop1).w
00007060 3038 F728                  		move.w	(v_limitleft2).w,d0
00007064 0640 0240                  		addi.w	#$240,d0
00007068 31C0 F732                  		move.w	d0,(v_limitleft3).w
0000706C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00007072 3018                       		move.w	(a0)+,d0
00007074 31C0 F73E                  		move.w	d0,(v_lookshift).w
00007078 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
0000707E 6000 0000                  		bra.w	LevSz_ChkLamp
00007082                            
00007082                            ; ===========================================================================
00007082                            ; ---------------------------------------------------------------------------
00007082                            ; Level size array
00007082                            ; ---------------------------------------------------------------------------
00007082                            LevelSizeArray:
00007082                            		; GHZ
00007082 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
0000708E 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
0000709A 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
000070A6 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
000070B2                            		; LZ
000070B2 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
000070BE 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
000070CA 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
000070D6 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
000070E2                            		; MZ
000070E2 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
000070EE 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
000070FA 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00007106 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00007112                            		; SLZ
00007112 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
0000711E 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
0000712A 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00007136 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00007142                            		; SYZ
00007142 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
0000714E 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
0000715A 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00007166 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00007172                            		; SBZ
00007172 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
0000717E 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
0000718A 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00007196 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
000071A2                            		; Ending
000071A2 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
000071AE 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
000071BA 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
000071C6 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
000071D2                            
000071D2                            ; ---------------------------------------------------------------------------
000071D2                            ; Ending start location array
000071D2                            ; ---------------------------------------------------------------------------
000071D2                            EndingStLocArray:
000071D2                            		include	"_inc\Start Location Array - Ending.asm"
000071D2                            ; ---------------------------------------------------------------------------
000071D2                            ; Ending start location array
000071D2                            ; ---------------------------------------------------------------------------
000071D2                            
000071D2                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
000071D6                            		incbin	"startpos\mz2 (Credits demo).bin"
000071DA                            		incbin	"startpos\syz3 (Credits demo).bin"
000071DE                            		incbin	"startpos\lz3 (Credits demo).bin"
000071E2                            		incbin	"startpos\slz3 (Credits demo).bin"
000071E6                            		incbin	"startpos\sbz1 (Credits demo).bin"
000071EA                            		incbin	"startpos\sbz2 (Credits demo).bin"
000071EE                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
000071F2                            		even
000071F2                            		even
000071F2                            
000071F2                            ; ===========================================================================
000071F2                            
000071F2                            LevSz_ChkLamp:
000071F2 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
000071F6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000071F8                            
000071F8 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
000071FE 3238 D008                  		move.w	(v_player+obX).w,d1
00007202 3038 D00C                  		move.w	(v_player+obY).w,d0
00007206 6000                       		bra.s	LevSz_SkipStartPos
00007208                            ; ===========================================================================
00007208                            
00007208                            LevSz_StartLoc:
00007208 3038 FE10                  		move.w	(v_zone).w,d0
0000720C ED08                       		lsl.b	#6,d0
0000720E E848                       		lsr.w	#4,d0
00007210 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00007214 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00007218 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000721A                            
0000721A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000721E 5340                       		subq.w	#1,d0
00007220 E548                       		lsl.w	#2,d0
00007222 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007226                            
00007226                            LevSz_SonicPos:
00007226 7200                       		moveq	#0,d1
00007228 3219                       		move.w	(a1)+,d1
0000722A 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
0000722E 7000                       		moveq	#0,d0
00007230 3011                       		move.w	(a1),d0
00007232 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00007236                            
00007236                            SetScreen:
00007236                            	LevSz_SkipStartPos:
00007236 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
0000723A 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
0000723E 743F                       		moveq #63,d2 ; begin a 64-step loop 
00007240                            @looppoint: 
00007240 34C1                       		move.w d1,(a2)+ ; fill in X 
00007242 34C0                       		move.w d0,(a2)+ ; fill in Y 
00007244 51CA FFFA                  		dbf d2,@looppoint ; loop	
00007248 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
0000724C 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
0000724E 7200                       		moveq	#0,d1
00007250                            
00007250                            	SetScr_WithinLeft:
00007250 3438 F72A                  		move.w	(v_limitright2).w,d2
00007254 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00007256 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00007258 3202                       		move.w	d2,d1
0000725A                            
0000725A                            	SetScr_WithinRight:
0000725A 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
0000725E                            
0000725E 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00007262 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00007264 7000                       		moveq	#0,d0
00007266                            
00007266                            	SetScr_WithinTop:
00007266 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
0000726A 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
0000726C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00007270                            
00007270                            	SetScr_WithinBottom:
00007270 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00007274 6100 0000                  		bsr.w	BgScrollSpeed
00007278 7000                       		moveq	#0,d0
0000727A 1038 FE10                  		move.b	(v_zone).w,d0
0000727E E508                       		lsl.b	#2,d0
00007280 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00007286 4E75                       		rts
00007288                            ; ===========================================================================
00007288                            ; ---------------------------------------------------------------------------
00007288                            ; Sonic start location array
00007288                            ; ---------------------------------------------------------------------------
00007288                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007288                            ; ---------------------------------------------------------------------------
00007288                            ; Sonic start location array
00007288                            ; ---------------------------------------------------------------------------
00007288                            
00007288                            		incbin	"startpos\ghz1.bin"
0000728C                            		incbin	"startpos\ghz2.bin"
00007290                            		incbin	"startpos\ghz3.bin"
00007294 0080 00A8                  		dc.w	$80,$A8
00007298                            
00007298                            		incbin	"startpos\lz1.bin"
0000729C                            		incbin	"startpos\lz2.bin"
000072A0                            		incbin	"startpos\lz3.bin"
000072A4                            		incbin	"startpos\sbz3.bin"
000072A8                            
000072A8                            		incbin	"startpos\mz1.bin"
000072AC                            		incbin	"startpos\mz2.bin"
000072B0                            		incbin	"startpos\mz3.bin"
000072B4 0080 00A8                  		dc.w	$80,$A8
000072B8                            
000072B8                            		incbin	"startpos\slz1.bin"
000072BC                            		incbin	"startpos\slz2.bin"
000072C0                            		incbin	"startpos\slz3.bin"
000072C4 0080 00A8                  		dc.w	$80,$A8
000072C8                            
000072C8                            		incbin	"startpos\syz1.bin"
000072CC                            		incbin	"startpos\syz2.bin"
000072D0                            		incbin	"startpos\syz3.bin"
000072D4 0080 00A8                  		dc.w	$80,$A8
000072D8                            
000072D8                            		incbin	"startpos\sbz1.bin"
000072DC                            		incbin	"startpos\sbz2.bin"
000072E0                            		incbin	"startpos\fz.bin"
000072E4 0080 00A8                  		dc.w	$80,$A8
000072E8                            
000072E8                            
000072E8                            		incbin	"startpos\end1.bin"
000072EC                            		incbin	"startpos\end2.bin"
000072F0 0080 00A8                  		dc.w	$80,$A8
000072F4 0080 00A8                  		dc.w	$80,$A8
000072F8                            
000072F8                            		even
000072F8                            		even
000072F8                            
000072F8                            ; ---------------------------------------------------------------------------
000072F8                            ; Which	256x256	tiles contain loops or roll-tunnels
000072F8                            ; ---------------------------------------------------------------------------
000072F8                            
000072F8                            LoopTileNums:
000072F8                            
000072F8                            ; 		loop	loop	tunnel	tunnel
000072F8                            
000072F8 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
000072FC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007300 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007304 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007308 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000730C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007310 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007314                            
00007314                            		even
00007314                            
00007314                            ; ---------------------------------------------------------------------------
00007314                            ; Subroutine to	set scroll speed of some backgrounds
00007314                            ; ---------------------------------------------------------------------------
00007314                            
00007314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007314                            
00007314                            
00007314                            BgScrollSpeed:
00007314 4A38 FE30                  		tst.b	(v_lastlamp).w
00007318 6600                       		bne.s	loc_6206
0000731A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000731E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007322 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007326 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000732A 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
0000732E                            
0000732E                            loc_6206:
0000732E 7400                       		moveq	#0,d2
00007330 1438 FE10                  		move.b	(v_zone).w,d2
00007334 D442                       		add.w	d2,d2
00007336 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000733A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000733E                            ; End of function BgScrollSpeed
0000733E                            
0000733E                            ; ===========================================================================
0000733E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007342 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007346 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000734A 0000                       		dc.w BgScroll_End-BgScroll_Index
0000734C                            ; ===========================================================================
0000734C                            
0000734C                            BgScroll_GHZ:
0000734C 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007350 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007354 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007358 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000735C 45F8 A800                  		lea	($FFFFA800).w,a2
00007360 429A                       		clr.l	(a2)+
00007362 429A                       		clr.l	(a2)+
00007364 429A                       		clr.l	(a2)+
00007366 4E75                       		rts
00007368                            ; ===========================================================================
00007368                            
00007368                            BgScroll_LZ:
00007368 E280                       		asr.l	#1,d0
0000736A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000736E 4E75                       		rts	
00007370                            ; ===========================================================================
00007370                            
00007370                            BgScroll_MZ:
00007370 4E75                       		rts	
00007372                            ; ===========================================================================
00007372                            
00007372                            BgScroll_SLZ:
00007372 E280                       		asr.l	#1,d0
00007374 0640 00C0                  		addi.w	#$C0,d0
00007378 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000737C 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007380 4E75                       		rts	
00007382                            ; ===========================================================================
00007382                            
00007382                            BgScroll_SYZ:
00007382 E980                       		asl.l	#4,d0
00007384 2400                       		move.l	d0,d2
00007386 E380                       		asl.l	#1,d0
00007388 D082                       		add.l	d2,d0
0000738A E080                       		asr.l	#8,d0
0000738C 5240                       		addq.w	#1,d0
0000738E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007392 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007396 4E75                       		rts	
00007398                            ; ===========================================================================
00007398                            
00007398                            BgScroll_SBZ:
00007398 0240 07F8                  		andi.w	#$7F8,d0
0000739C E640                       		asr.w	#3,d0
0000739E 5240                       		addq.w	#1,d0
000073A0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000073A4 4E75                       		rts	
000073A6                            ; ===========================================================================
000073A6                            
000073A6                            BgScroll_End:
000073A6 3038 F700                  		move.w	(v_screenposx).w,d0
000073AA E240                       		asr.w	#1,d0
000073AC 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
000073B0 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
000073B4 E440                       		asr.w	#2,d0
000073B6 3200                       		move.w	d0,d1
000073B8 D040                       		add.w	d0,d0
000073BA D041                       		add.w	d1,d0
000073BC 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
000073C0 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000073C4 42B8 F714                  		clr.l	(v_bg2screenposy).w
000073C8 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000073CC 45F8 A800                  		lea	($FFFFA800).w,a2
000073D0 429A                       		clr.l	(a2)+
000073D2 429A                       		clr.l	(a2)+
000073D4 429A                       		clr.l	(a2)+
000073D6 4E75                       		rts
000073D6 4E75                       		rts
000073D8                            		include	"_inc\DeformLayers (JP1).asm"
000073D8                            ; ---------------------------------------------------------------------------
000073D8                            ; Background layer deformation subroutines
000073D8                            ; ---------------------------------------------------------------------------
000073D8                            
000073D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073D8                            
000073D8                            
000073D8                            DeformLayers:
000073D8 4A38 F744                  		tst.b	(f_nobgscroll).w
000073DC 6700                       		beq.s	@bgscroll
000073DE 4E75                       		rts	
000073E0                            ; ===========================================================================
000073E0                            
000073E0                            	@bgscroll:
000073E0 4278 F754                  		clr.w	(v_fg_scroll_flags).w
000073E4 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
000073E8 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
000073EC 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
000073F0 6100 0000                  		bsr.w	ScrollHoriz
000073F4 6100 0000                  		bsr.w	ScrollVertical
000073F8 6100 0000                  		bsr.w	DynamicLevelEvents
000073FC 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007402 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007408 7000                       		moveq	#0,d0
0000740A 1038 FE10                  		move.b	(v_zone).w,d0
0000740E D040                       		add.w	d0,d0
00007410 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007414 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007418                            ; End of function DeformLayers
00007418                            
00007418                            ; ===========================================================================
00007418                            ; ---------------------------------------------------------------------------
00007418                            ; Offset index for background layer deformation	code
00007418                            ; ---------------------------------------------------------------------------
00007418 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000741C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007420 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007424 0000                       		dc.w Deform_GHZ-Deform_Index
00007426                            ; ---------------------------------------------------------------------------
00007426                            ; Green	Hill Zone background layer deformation code
00007426                            ; ---------------------------------------------------------------------------
00007426                            
00007426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007426                            
00007426                            
00007426                            Deform_GHZ:
00007426                            	;cmpi.b    #id_Title,(v_gamemode).w
00007426                            	;beq.w    Deform_Title
00007426                            
00007426                            ;Deform_GHZ_Stage:
00007426                            	; block 3 - distant mountains
00007426 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000742A 48C4                       		ext.l	d4
0000742C EB84                       		asl.l	#5,d4
0000742E 2204                       		move.l	d4,d1
00007430 E384                       		asl.l	#1,d4
00007432 D881                       		add.l	d1,d4
00007434 7C00                       		moveq	#0,d6
00007436 6100 0000                  		bsr.w	BGScroll_Block3
0000743A                            	; block 2 - hills & waterfalls
0000743A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000743E 48C4                       		ext.l	d4
00007440 EF84                       		asl.l	#7,d4
00007442 7C00                       		moveq	#0,d6
00007444 6100 0000                  		bsr.w	BGScroll_Block2
00007448                            	; calculate Y position
00007448 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000744C 3038 F704                  		move.w	(v_screenposy).w,d0
00007450 0240 07FF                  		andi.w	#$7FF,d0
00007454 EA48                       		lsr.w	#5,d0
00007456 4440                       		neg.w	d0
00007458 0640 0020                  		addi.w	#$20,d0
0000745C 6A00                       		bpl.s	@limitY
0000745E 7000                       		moveq	#0,d0
00007460                            	@limitY:
00007460 3800                       		move.w	d0,d4
00007462 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00007466 3038 F700                  		move.w	(v_screenposx).w,d0
0000746A 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007470 6600                       		bne.s	@notTitle
00007472 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007474                            	@notTitle:
00007474 4440                       		neg.w	d0
00007476 4840                       		swap	d0
00007478                            	; auto-scroll clouds
00007478 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000747C 069A 0001 0000             		addi.l	#$10000,(a2)+
00007482 069A 0000 C000             		addi.l	#$C000,(a2)+
00007488 069A 0000 8000             		addi.l	#$8000,(a2)+
0000748E                            	; calculate background scroll	
0000748E 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
00007492 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007496 4440                       		neg.w	d0
00007498 323C 001F                  		move.w	#$1F,d1
0000749C 9244                       		sub.w	d4,d1
0000749E 6500                       		bcs.s	@gotoCloud2
000074A0                            	@cloudLoop1:		; upper cloud (32px)
000074A0 22C0                       		move.l	d0,(a1)+
000074A2 51C9 FFFC                  		dbf	d1,@cloudLoop1
000074A6                            
000074A6                            	@gotoCloud2:
000074A6 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000074AA D078 F718                  		add.w	(v_bg3screenposx).w,d0
000074AE 4440                       		neg.w	d0
000074B0 323C 000F                  		move.w	#$F,d1
000074B4                            	@cloudLoop2:		; middle cloud (16px)
000074B4 22C0                       		move.l	d0,(a1)+
000074B6 51C9 FFFC                  		dbf	d1,@cloudLoop2
000074BA                            
000074BA 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
000074BE D078 F718                  		add.w	(v_bg3screenposx).w,d0
000074C2 4440                       		neg.w	d0
000074C4 323C 000F                  		move.w	#$F,d1
000074C8                            	@cloudLoop3:		; lower cloud (16px)
000074C8 22C0                       		move.l	d0,(a1)+
000074CA 51C9 FFFC                  		dbf	d1,@cloudLoop3
000074CE                            
000074CE 323C 002F                  		move.w	#$2F,d1
000074D2 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000074D6 4440                       		neg.w	d0
000074D8                            	@mountainLoop:		; distant mountains (48px)
000074D8 22C0                       		move.l	d0,(a1)+
000074DA 51C9 FFFC                  		dbf	d1,@mountainLoop
000074DE                            
000074DE 323C 0027                  		move.w	#$27,d1
000074E2 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000074E6 4440                       		neg.w	d0
000074E8                            	@hillLoop:			; hills & waterfalls (40px)
000074E8 22C0                       		move.l	d0,(a1)+
000074EA 51C9 FFFC                  		dbf	d1,@hillLoop
000074EE                            
000074EE 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000074F2 3438 F700                  		move.w	(v_screenposx).w,d2
000074F6 9440                       		sub.w	d0,d2
000074F8 48C2                       		ext.l	d2
000074FA E182                       		asl.l	#8,d2
000074FC 85FC 0068                  		divs.w	#$68,d2
00007500 48C2                       		ext.l	d2
00007502 E182                       		asl.l	#8,d2
00007504 7600                       		moveq	#0,d3
00007506 3600                       		move.w	d0,d3
00007508 323C 0047                  		move.w	#$47,d1
0000750C D244                       		add.w	d4,d1
0000750E                            	@waterLoop:			; water deformation
0000750E 3003                       		move.w	d3,d0
00007510 4440                       		neg.w	d0
00007512 22C0                       		move.l	d0,(a1)+
00007514 4843                       		swap	d3
00007516 D682                       		add.l	d2,d3
00007518 4843                       		swap	d3
0000751A 51C9 FFF2                  		dbf	d1,@waterLoop
0000751E 4E75                       		rts
00007520                            ; End of function Deform_GHZ
00007520                            
00007520                            Deform_Title:
00007520 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007524 48C4                       		ext.l	d4
00007526 EB84                       		asl.l	#5,d4
00007528 2204                       		move.l	d4,d1
0000752A E384                       		asl.l	#1,d4
0000752C D881                       		add.l	d1,d4
0000752E 7A00                       		moveq	#0,d5
00007530 6100 0000                  		bsr.w	BGScroll_Block1
00007534 6100 0000                  		bsr.w	BGScroll_Block3
00007538 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000753C 3038 F704                  		move.w	(v_screenposy).w,d0
00007540 0240 07FF                  		andi.w	#$7FF,d0
00007544 EA48                       		lsr.w	#5,d0
00007546 4440                       		neg.w	d0
00007548 0640 0026                  		addi.w	#$26,d0
0000754C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007550 3800                       		move.w	d0,d4
00007552 6100 0000                  		bsr.w	BGScroll_Block3
00007556 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000755C 323C 006F                  		move.w	#$6F,d1
00007560 9244                       		sub.w	d4,d1
00007562 3038 F700                  		move.w	(v_screenposx).w,d0
00007566 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000756C 6600                       		bne.s	loc_633C
0000756E 7000                       		moveq	#0,d0
00007570                            
00007570                            loc_633C:
00007570 4440                       		neg.w	d0
00007572 4840                       		swap	d0
00007574 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007578 4440                       		neg.w	d0
0000757A                            
0000757A                            loc_6346:
0000757A 22C0                       		move.l	d0,(a1)+
0000757C 51C9 FFFC                  		dbf	d1,loc_6346
00007580 323C 0027                  		move.w	#$27,d1
00007584 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007588 4440                       		neg.w	d0
0000758A                            
0000758A                            loc_6356:
0000758A 22C0                       		move.l	d0,(a1)+
0000758C 51C9 FFFC                  		dbf	d1,loc_6356
00007590 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007594 0640 0000                  		addi.w	#0,d0
00007598 3438 F700                  		move.w	(v_screenposx).w,d2
0000759C 0642 FE00                  		addi.w	#-$200,d2
000075A0 9440                       		sub.w	d0,d2
000075A2 48C2                       		ext.l	d2
000075A4 E182                       		asl.l	#8,d2
000075A6 85FC 0068                  		divs.w	#$68,d2
000075AA 48C2                       		ext.l	d2
000075AC E182                       		asl.l	#8,d2
000075AE 7600                       		moveq	#0,d3
000075B0 3600                       		move.w	d0,d3
000075B2 323C 0047                  		move.w	#$47,d1
000075B6 D244                       		add.w	d4,d1
000075B8                            
000075B8                            loc_6384:
000075B8 3003                       		move.w	d3,d0
000075BA 4440                       		neg.w	d0
000075BC 22C0                       		move.l	d0,(a1)+
000075BE 4843                       		swap	d3
000075C0 D682                       		add.l	d2,d3
000075C2 4843                       		swap	d3
000075C4 51C9 FFF2                  		dbf	d1,loc_6384
000075C8 4E75                       		rts	
000075CA                            
000075CA                            ; ===========================================================================
000075CA                            ; ---------------------------------------------------------------------------
000075CA                            ; Labyrinth Zone background layer deformation code
000075CA                            ; ---------------------------------------------------------------------------
000075CA                            
000075CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075CA                            
000075CA                            
000075CA                            Deform_LZ:
000075CA                            	; plain background scroll
000075CA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075CE 48C4                       		ext.l	d4
000075D0 EF84                       		asl.l	#7,d4
000075D2 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000075D6 48C5                       		ext.l	d5
000075D8 EF85                       		asl.l	#7,d5
000075DA 6100 0000                  		bsr.w	BGScroll_XY
000075DE                            
000075DE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000075E4 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
000075EA 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
000075F0 1438 F7D8                  		move.b	(v_lz_deform).w,d2
000075F4 1602                       		move.b	d2,d3
000075F6 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
000075FC                            
000075FC D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007600 0242 00FF                  		andi.w	#$FF,d2
00007604 D678 F704                  		add.w	(v_screenposy).w,d3
00007608 0243 00FF                  		andi.w	#$FF,d3
0000760C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007610 323C 00DF                  		move.w	#$DF,d1
00007614 3038 F700                  		move.w	(v_screenposx).w,d0
00007618 4440                       		neg.w	d0
0000761A 3C00                       		move.w	d0,d6
0000761C 4840                       		swap	d0
0000761E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007622 4440                       		neg.w	d0
00007624 3838 F646                  		move.w	(v_waterpos1).w,d4
00007628 3A38 F704                  		move.w	(v_screenposy).w,d5
0000762C                            	; write normal scroll before meeting water position
0000762C                            	@normalLoop:		
0000762C BA44                       		cmp.w	d4,d5	; is current y >= water y?
0000762E 6C00                       		bge.s	@underwaterLoop	; if yes, branch
00007630 22C0                       		move.l	d0,(a1)+
00007632 5245                       		addq.w	#1,d5
00007634 5202                       		addq.b	#1,d2
00007636 5203                       		addq.b	#1,d3
00007638 51C9 FFF2                  		dbf	d1,@normalLoop
0000763C 4E75                       		rts
0000763E                            	; apply water deformation when underwater
0000763E                            	@underwaterLoop:
0000763E 1833 3000                  		move.b	(a3,d3),d4
00007642 4884                       		ext.w	d4
00007644 D846                       		add.w	d6,d4
00007646 32C4                       		move.w	d4,(a1)+
00007648 1832 2000                  		move.b	(a2,d2),d4
0000764C 4884                       		ext.w	d4
0000764E D840                       		add.w	d0,d4
00007650 32C4                       		move.w	d4,(a1)+
00007652 5202                       		addq.b	#1,d2
00007654 5203                       		addq.b	#1,d3
00007656 51C9 FFE6                  		dbf	d1,@underwaterLoop
0000765A 4E75                       		rts
0000765C                            
0000765C                            Lz_Scroll_Data:
0000765C 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
0000766C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000767C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000768C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000769C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076AC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076BC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076CC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076DC FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
000076EC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076FC 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
0000770C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000771C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000772C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000773C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000774C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000775C                            ; End of function Deform_LZ
0000775C                            
0000775C                            ; ---------------------------------------------------------------------------
0000775C                            ; Marble Zone background layer deformation code
0000775C                            ; ---------------------------------------------------------------------------
0000775C                            
0000775C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000775C                            
0000775C                            
0000775C                            Deform_MZ:
0000775C                            	; block 1 - dungeon interior
0000775C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007760 48C4                       		ext.l	d4
00007762 ED84                       		asl.l	#6,d4
00007764 2204                       		move.l	d4,d1
00007766 E384                       		asl.l	#1,d4
00007768 D881                       		add.l	d1,d4
0000776A 7C02                       		moveq	#2,d6
0000776C 6100 0000                  		bsr.w	BGScroll_Block1
00007770                            	; block 3 - mountains
00007770 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007774 48C4                       		ext.l	d4
00007776 ED84                       		asl.l	#6,d4
00007778 7C06                       		moveq	#6,d6
0000777A 6100 0000                  		bsr.w	BGScroll_Block3
0000777E                            	; block 2 - bushes & antique buildings
0000777E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007782 48C4                       		ext.l	d4
00007784 EF84                       		asl.l	#7,d4
00007786 7C04                       		moveq	#4,d6
00007788 6100 0000                  		bsr.w	BGScroll_Block2
0000778C                            	; calculate y-position of background
0000778C 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007790 3238 F704                  		move.w	(v_screenposy).w,d1
00007794 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007798 6500                       		bcs.s	@noYscroll
0000779A 3401                       		move.w	d1,d2
0000779C D241                       		add.w	d1,d1
0000779E D242                       		add.w	d2,d1
000077A0 E441                       		asr.w	#2,d1
000077A2 D041                       		add.w	d1,d0
000077A4                            	@noYscroll:
000077A4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000077A8 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
000077AC 6100 0000                  		bsr.w	BGScroll_YAbsolute
000077B0 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000077B6                            	; do something with redraw flags
000077B6 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
000077BA 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
000077BE 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
000077C2 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
000077C6 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
000077CA                            	; calculate background scroll buffer
000077CA 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000077CE 3438 F700                  		move.w	(v_screenposx).w,d2
000077D2 4442                       		neg.w	d2
000077D4 3002                       		move.w	d2,d0
000077D6 E440                       		asr.w	#2,d0
000077D8 9042                       		sub.w	d2,d0
000077DA 48C0                       		ext.l	d0
000077DC E780                       		asl.l	#3,d0
000077DE 81FC 0005                  		divs.w	#5,d0
000077E2 48C0                       		ext.l	d0
000077E4 E980                       		asl.l	#4,d0
000077E6 E180                       		asl.l	#8,d0
000077E8 7600                       		moveq	#0,d3
000077EA 3602                       		move.w	d2,d3
000077EC E243                       		asr.w	#1,d3
000077EE 323C 0004                  		move.w	#4,d1
000077F2                            	@cloudLoop:		
000077F2 32C3                       		move.w	d3,(a1)+
000077F4 4843                       		swap	d3
000077F6 D680                       		add.l	d0,d3
000077F8 4843                       		swap	d3
000077FA 51C9 FFF6                  		dbf	d1,@cloudLoop
000077FE                            
000077FE 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007802 4440                       		neg.w	d0
00007804 323C 0001                  		move.w	#1,d1
00007808                            	@mountainLoop:		
00007808 32C0                       		move.w	d0,(a1)+
0000780A 51C9 FFFC                  		dbf	d1,@mountainLoop
0000780E                            
0000780E 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007812 4440                       		neg.w	d0
00007814 323C 0008                  		move.w	#8,d1
00007818                            	@bushLoop:		
00007818 32C0                       		move.w	d0,(a1)+
0000781A 51C9 FFFC                  		dbf	d1,@bushLoop
0000781E                            
0000781E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007822 4440                       		neg.w	d0
00007824 323C 000F                  		move.w	#$F,d1
00007828                            	@interiorLoop:		
00007828 32C0                       		move.w	d0,(a1)+
0000782A 51C9 FFFC                  		dbf	d1,@interiorLoop
0000782E                            
0000782E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007832 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007836 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
0000783A 3400                       		move.w	d0,d2
0000783C 0C40 0100                  		cmpi.w	#$100,d0
00007840 6500                       		bcs.s	@limitY
00007842 303C 0100                  		move.w	#$100,d0
00007846                            	@limitY:
00007846 0240 01F0                  		andi.w	#$1F0,d0
0000784A E648                       		lsr.w	#3,d0
0000784C 45F2 0000                  		lea	(a2,d0),a2
00007850 6000 0000                  		bra.w	Bg_Scroll_X
00007854                            ; End of function Deform_MZ
00007854                            
00007854                            ; ---------------------------------------------------------------------------
00007854                            ; Star Light Zone background layer deformation code
00007854                            ; ---------------------------------------------------------------------------
00007854                            
00007854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007854                            
00007854                            
00007854                            Deform_SLZ:
00007854                            	; vertical scrolling
00007854 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007858 48C5                       		ext.l	d5
0000785A EF85                       		asl.l	#7,d5
0000785C 6100 0000                  		bsr.w	Bg_Scroll_Y
00007860 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007866                            	; calculate background scroll buffer
00007866 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
0000786A 3438 F700                  		move.w	(v_screenposx).w,d2
0000786E 4442                       		neg.w	d2
00007870 3002                       		move.w	d2,d0
00007872 E640                       		asr.w	#3,d0
00007874 9042                       		sub.w	d2,d0
00007876 48C0                       		ext.l	d0
00007878 E980                       		asl.l	#4,d0
0000787A 81FC 001C                  		divs.w	#$1C,d0
0000787E 48C0                       		ext.l	d0
00007880 E980                       		asl.l	#4,d0
00007882 E180                       		asl.l	#8,d0
00007884 7600                       		moveq	#0,d3
00007886 3602                       		move.w	d2,d3
00007888 323C 001B                  		move.w	#$1B,d1
0000788C                            	@starLoop:		
0000788C 32C3                       		move.w	d3,(a1)+
0000788E 4843                       		swap	d3
00007890 D680                       		add.l	d0,d3
00007892 4843                       		swap	d3
00007894 51C9 FFF6                  		dbf	d1,@starLoop
00007898                            
00007898 3002                       		move.w	d2,d0
0000789A E640                       		asr.w	#3,d0
0000789C 3200                       		move.w	d0,d1
0000789E E241                       		asr.w	#1,d1
000078A0 D041                       		add.w	d1,d0
000078A2 323C 0004                  		move.w	#4,d1
000078A6                            	@buildingLoop1:		; distant black buildings
000078A6 32C0                       		move.w	d0,(a1)+
000078A8 51C9 FFFC                  		dbf	d1,@buildingLoop1
000078AC                            
000078AC 3002                       		move.w	d2,d0
000078AE E440                       		asr.w	#2,d0
000078B0 323C 0004                  		move.w	#4,d1
000078B4                            	@buildingLoop2:		; closer buildings
000078B4 32C0                       		move.w	d0,(a1)+
000078B6 51C9 FFFC                  		dbf	d1,@buildingLoop2
000078BA                            
000078BA 3002                       		move.w	d2,d0
000078BC E240                       		asr.w	#1,d0
000078BE 323C 001D                  		move.w	#$1D,d1
000078C2                            	@bottomLoop:		; bottom part of background
000078C2 32C0                       		move.w	d0,(a1)+
000078C4 51C9 FFFC                  		dbf	d1,@bottomLoop
000078C8                            
000078C8 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000078CC 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000078D0 3400                       		move.w	d0,d2
000078D2 0440 00C0                  		subi.w	#$C0,d0
000078D6 0240 03F0                  		andi.w	#$3F0,d0
000078DA E648                       		lsr.w	#3,d0
000078DC 45F2 0000                  		lea	(a2,d0),a2
000078E0                            ;-------------------------------------------------------------------------------
000078E0                            ;-------------------------------------------------------------------------------
000078E0                            Bg_Scroll_X:
000078E0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000078E4 323C 000E                  		move.w	#$E,d1
000078E8 3038 F700                  		move.w	(v_screenposx).w,d0
000078EC 4440                       		neg.w	d0
000078EE 4840                       		swap	d0
000078F0 0242 000F                  		andi.w	#$F,d2
000078F4 D442                       		add.w	d2,d2
000078F6 301A                       		move.w	(a2)+,d0
000078F8 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
000078FC                            	@blockLoop:
000078FC 301A                       		move.w	(a2)+,d0
000078FE                            	@pixelJump:		
000078FE 22C0                       		move.l	d0,(a1)+
00007900 22C0                       		move.l	d0,(a1)+
00007902 22C0                       		move.l	d0,(a1)+
00007904 22C0                       		move.l	d0,(a1)+
00007906 22C0                       		move.l	d0,(a1)+
00007908 22C0                       		move.l	d0,(a1)+
0000790A 22C0                       		move.l	d0,(a1)+
0000790C 22C0                       		move.l	d0,(a1)+
0000790E 22C0                       		move.l	d0,(a1)+
00007910 22C0                       		move.l	d0,(a1)+
00007912 22C0                       		move.l	d0,(a1)+
00007914 22C0                       		move.l	d0,(a1)+
00007916 22C0                       		move.l	d0,(a1)+
00007918 22C0                       		move.l	d0,(a1)+
0000791A 22C0                       		move.l	d0,(a1)+
0000791C 22C0                       		move.l	d0,(a1)+
0000791E 51C9 FFDC                  		dbf	d1,@blockLoop
00007922 4E75                       		rts
00007924                            
00007924                            ; ---------------------------------------------------------------------------
00007924                            ; Spring Yard Zone background layer deformation	code
00007924                            ; ---------------------------------------------------------------------------
00007924                            
00007924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007924                            
00007924                            
00007924                            Deform_SYZ:
00007924                            	; vertical scrolling
00007924 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007928 48C5                       		ext.l	d5
0000792A E985                       		asl.l	#4,d5
0000792C 2205                       		move.l	d5,d1
0000792E E385                       		asl.l	#1,d5
00007930 DA81                       		add.l	d1,d5
00007932 6100 0000                  		bsr.w	Bg_Scroll_Y
00007936 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000793C                            	; calculate background scroll buffer
0000793C 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007940 3438 F700                  		move.w	(v_screenposx).w,d2
00007944 4442                       		neg.w	d2
00007946 3002                       		move.w	d2,d0
00007948 E640                       		asr.w	#3,d0
0000794A 9042                       		sub.w	d2,d0
0000794C 48C0                       		ext.l	d0
0000794E E780                       		asl.l	#3,d0
00007950 81FC 0008                  		divs.w	#8,d0
00007954 48C0                       		ext.l	d0
00007956 E980                       		asl.l	#4,d0
00007958 E180                       		asl.l	#8,d0
0000795A 7600                       		moveq	#0,d3
0000795C 3602                       		move.w	d2,d3
0000795E E243                       		asr.w	#1,d3
00007960 323C 0007                  		move.w	#7,d1
00007964                            	@cloudLoop:		
00007964 32C3                       		move.w	d3,(a1)+
00007966 4843                       		swap	d3
00007968 D680                       		add.l	d0,d3
0000796A 4843                       		swap	d3
0000796C 51C9 FFF6                  		dbf	d1,@cloudLoop
00007970                            
00007970 3002                       		move.w	d2,d0
00007972 E640                       		asr.w	#3,d0
00007974 323C 0004                  		move.w	#4,d1
00007978                            	@mountainLoop:		
00007978 32C0                       		move.w	d0,(a1)+
0000797A 51C9 FFFC                  		dbf	d1,@mountainLoop
0000797E                            
0000797E 3002                       		move.w	d2,d0
00007980 E440                       		asr.w	#2,d0
00007982 323C 0005                  		move.w	#5,d1
00007986                            	@buildingLoop:		
00007986 32C0                       		move.w	d0,(a1)+
00007988 51C9 FFFC                  		dbf	d1,@buildingLoop
0000798C                            
0000798C 3002                       		move.w	d2,d0
0000798E 3202                       		move.w	d2,d1
00007990 E241                       		asr.w	#1,d1
00007992 9041                       		sub.w	d1,d0
00007994 48C0                       		ext.l	d0
00007996 E980                       		asl.l	#4,d0
00007998 81FC 000E                  		divs.w	#$E,d0
0000799C 48C0                       		ext.l	d0
0000799E E980                       		asl.l	#4,d0
000079A0 E180                       		asl.l	#8,d0
000079A2 7600                       		moveq	#0,d3
000079A4 3602                       		move.w	d2,d3
000079A6 E243                       		asr.w	#1,d3
000079A8 323C 000D                  		move.w	#$D,d1
000079AC                            	@bushLoop:		
000079AC 32C3                       		move.w	d3,(a1)+
000079AE 4843                       		swap	d3
000079B0 D680                       		add.l	d0,d3
000079B2 4843                       		swap	d3
000079B4 51C9 FFF6                  		dbf	d1,@bushLoop
000079B8                            
000079B8 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000079BC 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000079C0 3400                       		move.w	d0,d2
000079C2 0240 01F0                  		andi.w	#$1F0,d0
000079C6 E648                       		lsr.w	#3,d0
000079C8 45F2 0000                  		lea	(a2,d0),a2
000079CC 6000 FF12                  		bra.w	Bg_Scroll_X
000079D0                            ; End of function Deform_SYZ
000079D0                            
000079D0                            ; ---------------------------------------------------------------------------
000079D0                            ; Scrap	Brain Zone background layer deformation	code
000079D0                            ; ---------------------------------------------------------------------------
000079D0                            
000079D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079D0                            
000079D0                            
000079D0                            Deform_SBZ:
000079D0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000079D4 48C4                       		ext.l	d4
000079D6 ED84                       		asl.l	#6,d4
000079D8 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000079DC 48C5                       		ext.l	d5
000079DE E985                       		asl.l	#4,d5
000079E0 E385                       		asl.l	#1,d5
000079E2 6100 0000                  		bsr.w	BGScroll_XY
000079E6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000079EC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000079F0 323C 00DF                  		move.w	#223,d1
000079F4 3038 F700                  		move.w	(v_screenposx).w,d0
000079F8 4440                       		neg.w	d0
000079FA 4840                       		swap	d0
000079FC 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007A00 4440                       		neg.w	d0
00007A02                            
00007A02                            loc_6576:
00007A02 22C0                       		move.l	d0,(a1)+
00007A04 51C9 FFFC                  		dbf	d1,loc_6576
00007A08 4E75                       		rts	
00007A0A                            ;-------------------------------------------------------------------------------
00007A0A                            Deform_SBZ2:;loc_68A2:
00007A0A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007A0E 48C4                       		ext.l	d4
00007A10 ED84                       		asl.l	#6,d4
00007A12 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007A16 48C5                       		ext.l	d5
00007A18 E985                       		asl.l	#4,d5
00007A1A E385                       		asl.l	#1,d5
00007A1C 6100 0000                  		bsr.w	BGScroll_XY
00007A20 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007A26 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007A2A 323C 00DF                  		move.w	#223,d1
00007A2E 3038 F700                  		move.w	(v_screenposx).w,d0
00007A32 4440                       		neg.w	d0
00007A34 4840                       		swap	d0
00007A36 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007A3A 4440                       		neg.w	d0
00007A3C                            
00007A3C                            loc_6577:
00007A3C 22C0                       		move.l	d0,(a1)+
00007A3E 51C9 FFFC                  		dbf	d1,loc_6577
00007A42 4E75                       		rts	
00007A44                            
00007A44                            ; ---------------------------------------------------------------------------
00007A44                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007A44                            ; ---------------------------------------------------------------------------
00007A44                            
00007A44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A44                            
00007A44                            
00007A44                            ScrollHoriz:
00007A44 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007A48 6100                       		bsr.s	MoveScreenHoriz
00007A4A 3038 F700                  		move.w	(v_screenposx).w,d0
00007A4E 0240 0010                  		andi.w	#$10,d0
00007A52 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007A56 B300                       		eor.b	d1,d0
00007A58 6600                       		bne.s	@return
00007A5A 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007A60 3038 F700                  		move.w	(v_screenposx).w,d0
00007A64 9044                       		sub.w	d4,d0		; compare new with old screen position
00007A66 6A00                       		bpl.s	@scrollRight
00007A68                            
00007A68 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007A6E 4E75                       		rts	
00007A70                            
00007A70                            	@scrollRight:
00007A70 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007A76                            
00007A76                            	@return:
00007A76 4E75                       		rts	
00007A78                            ; End of function ScrollHoriz
00007A78                            
00007A78                            
00007A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A78                            
00007A78                            MoveScreenHoriz:
00007A78 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007A7C 6700 0000                  		beq.w	@cont		
00007A80 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007A86                            		
00007A86                            	@cont:		
00007A86 3238 C904                  		move.w	($FFFFC904).w,d1
00007A8A 6700                       		beq.s	@cont1
00007A8C 0441 0100                  		sub.w	#$100,d1
00007A90 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A94 7200                       		moveq	#0,d1
00007A96 1238 C904                  		move.b	($FFFFC904).w,d1
00007A9A E509                       		lsl.b	#2,d1
00007A9C 5801                       		addq.b	#4,d1
00007A9E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007AA2 9001                       		sub.b	d1,d0
00007AA4 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007AA8 3031 0000                  		move.w	(a1,d0.w),d0
00007AAC 0240 3FFF                  		and.w	#$3FFF,d0
00007AB0 6000                       		bra.s	@cont2
00007AB2                            		
00007AB2                            @cont1:
00007AB2 3038 D008                  		move.w	($FFFFD008).w,d0
00007AB6                            		
00007AB6                            @cont2:
00007AB6 9078 F700                  		sub.w	($FFFFF700).w,d0
00007ABA 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007ABE 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007AC0 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007AC4 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007AC6 4278 F73A                          clr.w    (v_scrshiftx).w
00007ACA 4E75                               rts 
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            SH_AheadOfMid:
00007ACC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007AD0 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007AD2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007AD6                            
00007AD6                                SH_Ahead16:
00007AD6 D078 F700                          add.w    (v_screenposx).w,d0
00007ADA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ADE 6D00                               blt.s    SH_SetScreen
00007AE0 3038 F72A                          move.w    (v_limitright2).w,d0
00007AE4                            
00007AE4                            SH_SetScreen:
00007AE4 3200                               move.w    d0,d1
00007AE6 9278 F700                          sub.w    (v_screenposx).w,d1
00007AEA E141                               asl.w    #8,d1
00007AEC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007AF0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007AF4 4E75                               rts 
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            SH_BehindMid:
00007AF6 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AFA 6400                       		bcc.s	@cont
00007AFC 303C FFF0                  		move.w	#-$10,d0	
00007B00                            
00007B00                            @cont:
00007B00 D078 F700                  		add.w	(v_screenposx).w,d0
00007B04 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007B08 6EDA                       		bgt.s	SH_SetScreen
00007B0A 3038 F728                  		move.w	(v_limitleft2).w,d0
00007B0E 60D4                       		bra.s	SH_SetScreen
00007B10                            ; End of function MoveScreenHoriz
00007B10                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007B10                            
00007B10                            MoveScreenHorizEXT:
00007B10 3238 C904                  		move.w	($FFFFC904).w,d1
00007B14 6700                       		beq.s	@cont1
00007B16 0441 0100                  		sub.w	#$100,d1
00007B1A 31C1 C904                  		move.w	d1,($FFFFC904).w
00007B1E 7200                       		moveq	#0,d1
00007B20 1238 C904                  		move.b	($FFFFC904).w,d1
00007B24 E509                       		lsl.b	#2,d1
00007B26 5801                       		addq.b	#4,d1
00007B28 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007B2C 9001                       		sub.b	d1,d0
00007B2E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007B32 3031 0000                  		move.w	(a1,d0.w),d0
00007B36 0240 3FFF                  		and.w	#$3FFF,d0
00007B3A 6000                       		bra.s	@cont2
00007B3C                            		
00007B3C                            @cont1:
00007B3C 3038 D008                  		move.w	($FFFFD008).w,d0
00007B40                            		
00007B40                            @cont2:
00007B40 9078 F700                  		sub.w	($FFFFF700).w,d0
00007B44 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007B48 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007B4A 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007B4C 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007B4E                            ; ===========================================================================
00007B4E                            
00007B4E                            SHEXT_ProperlyFramed:
00007B4E 4278 F73A                          clr.w    (v_scrshiftx).w
00007B52 4E75                               rts 
00007B54                            ; ===========================================================================
00007B54                            
00007B54                            SHEXT_AheadOfMid:
00007B54 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007B58 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007B5A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007B5E                            
00007B5E                            SHEXT_Ahead16:
00007B5E D078 F700                          add.w    (v_screenposx).w,d0
00007B62 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007B66 6D00                               blt.s    SHEXT_SetScreen
00007B68 3038 F72A                          move.w    (v_limitright2).w,d0
00007B6C                            
00007B6C                            SHEXT_SetScreen:
00007B6C 3200                               move.w    d0,d1
00007B6E 9278 F700                          sub.w    (v_screenposx).w,d1
00007B72 E141                               asl.w    #8,d1
00007B74 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007B78 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007B7C 4E75                               rts
00007B7E                            
00007B7E                            ; ===========================================================================
00007B7E                            
00007B7E                            SHEXT_BehindMid:
00007B7E 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007B82 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007B84 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007B88                            
00007B88                            SHEXT_Behind16:
00007B88 D078 F700                          add.w    (v_screenposx).w,d0
00007B8C B078 F728                          cmp.w    (v_limitleft2).w,d0
00007B90 6EDA                               bgt.s    SHEXT_SetScreen
00007B92 3038 F728                          move.w    (v_limitleft2).w,d0
00007B96 60D4                               bra.s    SHEXT_SetScreen
00007B98                                  
00007B98                            ; End of function MoveScreenHoriz
00007B98                            
00007B98                            
00007B98                            ; ---------------------------------------------------------------------------
00007B98                            ; Subroutine to	scroll the level vertically as Sonic moves
00007B98                            ; ---------------------------------------------------------------------------
00007B98                            
00007B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B98                            
00007B98                            
00007B98                            ScrollVertical:
00007B98 7200                       		moveq	#0,d1
00007B9A 3038 D00C                  		move.w	(v_player+obY).w,d0
00007B9E 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007BA2 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007BA8 6700                       		beq.s	SV_NotRolling	; if not, branch
00007BAA 5B40                       		subq.w	#5,d0
00007BAC                            
00007BAC                            	SV_NotRolling:
00007BAC 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007BB2 6700                       		beq.s	loc_664A	; if not, branch
00007BB4                            
00007BB4 0640 0020                  		addi.w	#32,d0
00007BB8 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007BBC 6500                       		bcs.s	loc_6696
00007BBE 0440 0040                  		subi.w	#64,d0
00007BC2 6400                       		bcc.s	loc_6696
00007BC4 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007BC8 6600                       		bne.s	loc_66A8
00007BCA 6000                       		bra.s	loc_6656
00007BCC                            ; ===========================================================================
00007BCC                            
00007BCC                            loc_664A:
00007BCC 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007BD0 6600                       		bne.s	loc_665C
00007BD2 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007BD6 6600                       		bne.s	loc_66A8
00007BD8                            
00007BD8                            loc_6656:
00007BD8 4278 F73C                  		clr.w	(v_scrshifty).w
00007BDC 4E75                       		rts	
00007BDE                            ; ===========================================================================
00007BDE                            
00007BDE                            loc_665C:
00007BDE 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007BE4 6600                       		bne.s	loc_6684
00007BE6 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007BEA 6A00                       		bpl.s	loc_666C
00007BEC 4441                       		neg.w	d1
00007BEE                            
00007BEE                            loc_666C:
00007BEE 0C41 0800                  		cmpi.w	#$800,d1
00007BF2 6400                       		bcc.s	loc_6696
00007BF4 323C 0600                  		move.w	#$600,d1
00007BF8 0C40 0006                  		cmpi.w	#6,d0
00007BFC 6E00                       		bgt.s	loc_66F6
00007BFE 0C40 FFFA                  		cmpi.w	#-6,d0
00007C02 6D00                       		blt.s	loc_66C0
00007C04 6000                       		bra.s	loc_66AE
00007C06                            ; ===========================================================================
00007C06                            
00007C06                            loc_6684:
00007C06 323C 0200                  		move.w	#$200,d1
00007C0A 0C40 0002                  		cmpi.w	#2,d0
00007C0E 6E00                       		bgt.s	loc_66F6
00007C10 0C40 FFFE                  		cmpi.w	#-2,d0
00007C14 6D00                       		blt.s	loc_66C0
00007C16 6000                       		bra.s	loc_66AE
00007C18                            ; ===========================================================================
00007C18                            
00007C18                            loc_6696:
00007C18 323C 1000                  		move.w	#$1000,d1
00007C1C 0C40 0010                  		cmpi.w	#$10,d0
00007C20 6E00                       		bgt.s	loc_66F6
00007C22 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C26 6D00                       		blt.s	loc_66C0
00007C28 6000                       		bra.s	loc_66AE
00007C2A                            ; ===========================================================================
00007C2A                            
00007C2A                            loc_66A8:
00007C2A 7000                       		moveq	#0,d0
00007C2C 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007C30                            
00007C30                            loc_66AE:
00007C30 7200                       		moveq	#0,d1
00007C32 3200                       		move.w	d0,d1
00007C34 D278 F704                  		add.w	(v_screenposy).w,d1
00007C38 4A40                       		tst.w	d0
00007C3A 6A00 0000                  		bpl.w	loc_6700
00007C3E 6000 0000                  		bra.w	loc_66CC
00007C42                            ; ===========================================================================
00007C42                            
00007C42                            loc_66C0:
00007C42 4441                       		neg.w	d1
00007C44 48C1                       		ext.l	d1
00007C46 E181                       		asl.l	#8,d1
00007C48 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007C4C 4841                       		swap	d1
00007C4E                            
00007C4E                            loc_66CC:
00007C4E B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007C52 6E00                       		bgt.s	loc_6724
00007C54 0C41 FF00                  		cmpi.w	#-$100,d1
00007C58 6E00                       		bgt.s	loc_66F0
00007C5A 0241 07FF                  		andi.w	#$7FF,d1
00007C5E 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C64 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007C6A 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007C70 6000                       		bra.s	loc_6724
00007C72                            ; ===========================================================================
00007C72                            
00007C72                            loc_66F0:
00007C72 3238 F72C                  		move.w	(v_limittop2).w,d1
00007C76 6000                       		bra.s	loc_6724
00007C78                            ; ===========================================================================
00007C78                            
00007C78                            loc_66F6:
00007C78 48C1                       		ext.l	d1
00007C7A E181                       		asl.l	#8,d1
00007C7C D2B8 F704                  		add.l	(v_screenposy).w,d1
00007C80 4841                       		swap	d1
00007C82                            
00007C82                            loc_6700:
00007C82 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007C86 6D00                       		blt.s	loc_6724
00007C88 0441 0800                  		subi.w	#$800,d1
00007C8C 6500                       		bcs.s	loc_6720
00007C8E 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C94 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007C9A 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007CA0 6000                       		bra.s	loc_6724
00007CA2                            ; ===========================================================================
00007CA2                            
00007CA2                            loc_6720:
00007CA2 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007CA6                            
00007CA6                            loc_6724:
00007CA6 3838 F704                  		move.w	(v_screenposy).w,d4
00007CAA 4841                       		swap	d1
00007CAC 2601                       		move.l	d1,d3
00007CAE 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007CB2 E09B                       		ror.l	#8,d3
00007CB4 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007CB8 21C1 F704                  		move.l	d1,(v_screenposy).w
00007CBC 3038 F704                  		move.w	(v_screenposy).w,d0
00007CC0 0240 0010                  		andi.w	#$10,d0
00007CC4 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007CC8 B300                       		eor.b	d1,d0
00007CCA 6600                       		bne.s	@return
00007CCC 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007CD2 3038 F704                  		move.w	(v_screenposy).w,d0
00007CD6 9044                       		sub.w	d4,d0
00007CD8 6A00                       		bpl.s	@scrollBottom
00007CDA 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007CE0 4E75                       		rts	
00007CE2                            ; ===========================================================================
00007CE2                            
00007CE2                            	@scrollBottom:
00007CE2 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007CE8                            
00007CE8                            	@return:
00007CE8 4E75                       		rts	
00007CEA                            ; End of function ScrollVertical
00007CEA                            
00007CEA                            
00007CEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CEA                            ; Scrolls background and sets redraw flags.
00007CEA                            ; d4 - background x offset * $10000
00007CEA                            ; d5 - background y offset * $10000
00007CEA                            
00007CEA                            BGScroll_XY:
00007CEA 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007CEE 2002                       		move.l	d2,d0
00007CF0 D084                       		add.l	d4,d0
00007CF2 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007CF6 2200                       		move.l	d0,d1
00007CF8 4841                       		swap	d1
00007CFA 0241 0010                  		andi.w	#$10,d1
00007CFE 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007D02 B701                       		eor.b	d3,d1
00007D04 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007D06 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007D0C 9082                       		sub.l	d2,d0	; new - old
00007D0E 6A00                       		bpl.s	@scrollRight
00007D10 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007D16 6000                       		bra.s	BGScroll_YRelative
00007D18                            	@scrollRight:
00007D18 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007D1E                            BGScroll_YRelative:
00007D1E 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007D22 2003                       		move.l	d3,d0
00007D24 D085                       		add.l	d5,d0
00007D26 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007D2A 2200                       		move.l	d0,d1
00007D2C 4841                       		swap	d1
00007D2E 0241 0010                  		andi.w	#$10,d1
00007D32 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D36 B501                       		eor.b	d2,d1
00007D38 6600                       		bne.s	@return
00007D3A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D40 9083                       		sub.l	d3,d0
00007D42 6A00                       		bpl.s	@scrollBottom
00007D44 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007D4A 4E75                       		rts
00007D4C                            	@scrollBottom:
00007D4C 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007D52                            	@return:
00007D52 4E75                       		rts
00007D54                            ; End of function BGScroll_XY
00007D54                            
00007D54                            Bg_Scroll_Y:
00007D54 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007D58 2003                       		move.l	d3,d0
00007D5A D085                       		add.l	d5,d0
00007D5C 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007D60 2200                       		move.l	d0,d1
00007D62 4841                       		swap	d1
00007D64 0241 0010                  		andi.w	#$10,d1
00007D68 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D6C B501                       		eor.b	d2,d1
00007D6E 6600                       		bne.s	@return
00007D70 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D76 9083                       		sub.l	d3,d0
00007D78 6A00                       		bpl.s	@scrollBottom
00007D7A 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007D80 4E75                       		rts
00007D82                            	@scrollBottom:
00007D82 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007D88                            	@return:
00007D88 4E75                       		rts
00007D8A                            
00007D8A                            
00007D8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D8A                            
00007D8A                            
00007D8A                            BGScroll_YAbsolute:
00007D8A 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007D8E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007D92 3200                       		move.w	d0,d1
00007D94 0241 0010                  		andi.w	#$10,d1
00007D98 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D9C B501                       		eor.b	d2,d1
00007D9E 6600                       		bne.s	@return
00007DA0 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007DA6 9043                       		sub.w	d3,d0
00007DA8 6A00                       		bpl.s	@scrollBottom
00007DAA 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007DB0 4E75                       		rts
00007DB2                            	@scrollBottom:
00007DB2 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007DB8                            	@return:
00007DB8 4E75                       		rts
00007DBA                            ; End of function BGScroll_YAbsolute
00007DBA                            
00007DBA                            
00007DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DBA                            ; d6 - bit to set for redraw
00007DBA                            
00007DBA                            BGScroll_Block1:
00007DBA 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007DBE 2002                       		move.l	d2,d0
00007DC0 D084                       		add.l	d4,d0
00007DC2 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007DC6 2200                       		move.l	d0,d1
00007DC8 4841                       		swap	d1
00007DCA 0241 0010                  		andi.w	#$10,d1
00007DCE 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007DD2 B701                       		eor.b	d3,d1
00007DD4 6600                       		bne.s	@return
00007DD6 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007DDC 9082                       		sub.l	d2,d0
00007DDE 6A00                       		bpl.s	@scrollRight
00007DE0 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007DE4 6000                       		bra.s	@return
00007DE6                            	@scrollRight:
00007DE6 5206                       		addq.b	#1,d6
00007DE8 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007DEC                            	@return:
00007DEC 4E75                       		rts
00007DEE                            ; End of function BGScroll_Block1
00007DEE                            
00007DEE                            
00007DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DEE                            
00007DEE                            
00007DEE                            BGScroll_Block2:
00007DEE 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007DF2 2002                       		move.l	d2,d0
00007DF4 D084                       		add.l	d4,d0
00007DF6 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007DFA 2200                       		move.l	d0,d1
00007DFC 4841                       		swap	d1
00007DFE 0241 0010                  		andi.w	#$10,d1
00007E02 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007E06 B701                       		eor.b	d3,d1
00007E08 6600                       		bne.s	@return
00007E0A 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007E10 9082                       		sub.l	d2,d0
00007E12 6A00                       		bpl.s	@scrollRight
00007E14 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007E18 6000                       		bra.s	@return
00007E1A                            	@scrollRight:
00007E1A 5206                       		addq.b	#1,d6
00007E1C 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007E20                            	@return:
00007E20 4E75                       		rts
00007E22                            ;-------------------------------------------------------------------------------
00007E22                            BGScroll_Block3:
00007E22 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007E26 2002                       		move.l	d2,d0
00007E28 D084                       		add.l	d4,d0
00007E2A 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007E2E 2200                       		move.l	d0,d1
00007E30 4841                       		swap	d1
00007E32 0241 0010                  		andi.w	#$10,d1
00007E36 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007E3A B701                       		eor.b	d3,d1
00007E3C 6600                       		bne.s	@return
00007E3E 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007E44 9082                       		sub.l	d2,d0
00007E46 6A00                       		bpl.s	@scrollRight
00007E48 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007E4C 6000                       		bra.s	@return
00007E4E                            	@scrollRight:
00007E4E 5206                       		addq.b	#1,d6
00007E50 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007E54                            	@return:
00007E54 4E75                       		rts
00007E54 4E75                       		rts
00007E56                            
00007E56                            
00007E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E56                            
00007E56                            ; sub_6886:
00007E56                            LoadTilesAsYouMove_BGOnly:
00007E56 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E5C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E62 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007E66 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007E6A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E6E 343C 6000                  		move.w	#$6000,d2
00007E72 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007E76 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007E7A 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007E7E 6000 0000                  		bra.w	DrawBGScrollBlock2
00007E82                            ; End of function sub_6886
00007E82                            
00007E82                            ; ---------------------------------------------------------------------------
00007E82                            ; Subroutine to	display	correct	tiles as you move
00007E82                            ; ---------------------------------------------------------------------------
00007E82                            
00007E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E82                            
00007E82                            
00007E82                            LoadTilesAsYouMove:
00007E82 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E88 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E8E                            		; First, update the background
00007E8E 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007E92 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007E96 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E9A 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007E9E 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007EA2 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007EA6 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007EAA 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007EAE                            		; REV01 added a third scroll block, though, technically,
00007EAE                            		; the RAM for it was already there in REV00
00007EAE 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007EB2 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007EB6 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007EBA                            		; Then, update the foreground
00007EBA 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007EBE 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007EC2 49F8 A400                  		lea	(v_lvllayout).w,a4
00007EC6 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007ECA                            		; The FG's update function is inlined here
00007ECA 4A12                       		tst.b	(a2)
00007ECC 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007ECE 0892 0000                  		bclr	#0,(a2)
00007ED2 6700                       		beq.s	loc_6908
00007ED4                            		; Draw new tiles at the top
00007ED4 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007ED6 7AF0                       		moveq	#-16,d5 ; X coordinate
00007ED8 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EDC 78F0                       		moveq	#-16,d4 ; Y coordinate
00007EDE 7AF0                       		moveq	#-16,d5 ; X coordinate
00007EE0 6100 0000                  		bsr.w	DrawBlocks_LR
00007EE4                            
00007EE4                            loc_6908:
00007EE4 0892 0001                  		bclr	#1,(a2)
00007EE8 6700                       		beq.s	loc_6922
00007EEA                            		; Draw new tiles at the bottom
00007EEA 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007EEE 7AF0                       		moveq	#-16,d5
00007EF0 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EF4 383C 00E0                  		move.w	#224,d4
00007EF8 7AF0                       		moveq	#-16,d5
00007EFA 6100 0000                  		bsr.w	DrawBlocks_LR
00007EFE                            
00007EFE                            loc_6922:
00007EFE 0892 0002                  		bclr	#2,(a2)
00007F02 6700                       		beq.s	loc_6938
00007F04                            		; Draw new tiles on the left
00007F04 78F0                       		moveq	#-16,d4
00007F06 7AF0                       		moveq	#-16,d5
00007F08 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007F0C 78F0                       		moveq	#-16,d4
00007F0E 7AF0                       		moveq	#-16,d5
00007F10 6100 0000                  		bsr.w	DrawBlocks_TB
00007F14                            
00007F14                            loc_6938:
00007F14 0892 0003                  		bclr	#3,(a2)
00007F18 6700                       		beq.s	locret_6952
00007F1A                            		; Draw new tiles on the right
00007F1A 78F0                       		moveq	#-16,d4
00007F1C 3A3C 0140                  		move.w	#320,d5
00007F20 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007F24 78F0                       		moveq	#-16,d4
00007F26 3A3C 0140                  		move.w	#320,d5
00007F2A 6100 0000                  		bsr.w	DrawBlocks_TB
00007F2E                            
00007F2E                            locret_6952:
00007F2E 4E75                       		rts	
00007F30                            ; End of function LoadTilesAsYouMove
00007F30                            
00007F30                            
00007F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F30                            
00007F30                            ; sub_6954:
00007F30                            DrawBGScrollBlock1:
00007F30 4A12                       		tst.b	(a2)
00007F32 6700 0000                  		beq.w	locret_69F2
00007F36 0892 0000                  		bclr	#0,(a2)
00007F3A 6700                       		beq.s	loc_6972
00007F3C                            		; Draw new tiles at the top
00007F3C 78F0                       		moveq	#-16,d4
00007F3E 7AF0                       		moveq	#-16,d5
00007F40 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007F44 78F0                       		moveq	#-16,d4
00007F46 7AF0                       		moveq	#-16,d5
00007F48 6100 0000                  			bsr.w	DrawBlocks_LR
00007F4C                            
00007F4C                            loc_6972:
00007F4C 0892 0001                  		bclr	#1,(a2)
00007F50 6700                       		beq.s	loc_698E
00007F52                            		; Draw new tiles at the top
00007F52 383C 00E0                  		move.w	#224,d4
00007F56 7AF0                       		moveq	#-16,d5
00007F58 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007F5C 383C 00E0                  		move.w	#224,d4
00007F60 7AF0                       		moveq	#-16,d5
00007F62 6100 0000                  			bsr.w	DrawBlocks_LR
00007F66                            
00007F66                            loc_698E:
00007F66 0892 0002                  		bclr	#2,(a2)
00007F6A                            
00007F6A                            
00007F6A 6700                       			beq.s	locj_6D56
00007F6C                            			; Draw new tiles on the left
00007F6C 78F0                       			moveq	#-16,d4
00007F6E 7AF0                       			moveq	#-16,d5
00007F70 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F74 78F0                       			moveq	#-16,d4
00007F76 7AF0                       			moveq	#-16,d5
00007F78 6100 0000                  			bsr.w	DrawBlocks_TB
00007F7C                            	locj_6D56:
00007F7C                            
00007F7C 0892 0003                  			bclr	#3,(a2)
00007F80 6700                       			beq.s	locj_6D70
00007F82                            			; Draw new tiles on the right
00007F82 78F0                       			moveq	#-16,d4
00007F84 3A3C 0140                  			move.w	#320,d5
00007F88 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F8C 78F0                       			moveq	#-16,d4
00007F8E 3A3C 0140                  			move.w	#320,d5
00007F92 6100 0000                  			bsr.w	DrawBlocks_TB
00007F96                            	locj_6D70:
00007F96                            
00007F96 0892 0004                  			bclr	#4,(a2)
00007F9A 6700                       			beq.s	locj_6D88
00007F9C                            			; Draw entire row at the top
00007F9C 78F0                       			moveq	#-16,d4
00007F9E 7A00                       			moveq	#0,d5
00007FA0 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007FA4 78F0                       			moveq	#-16,d4
00007FA6 7A00                       			moveq	#0,d5
00007FA8 7C1F                       			moveq	#(512/16)-1,d6
00007FAA 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007FAE                            	locj_6D88:
00007FAE                            
00007FAE 0892 0005                  			bclr	#5,(a2)
00007FB2 6700                       			beq.s	locret_69F2
00007FB4                            			; Draw entire row at the bottom
00007FB4 383C 00E0                  			move.w	#224,d4
00007FB8 7A00                       			moveq	#0,d5
00007FBA 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007FBE 383C 00E0                  			move.w	#224,d4
00007FC2 7A00                       			moveq	#0,d5
00007FC4 7C1F                       			moveq	#(512/16)-1,d6
00007FC6 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007FCA                            
00007FCA                            locret_69F2:
00007FCA 4E75                       		rts	
00007FCC                            ; End of function DrawBGScrollBlock1
00007FCC                            
00007FCC                            
00007FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FCC                            
00007FCC                            ; Essentially, this draws everything that isn't scroll block 1
00007FCC                            ; sub_69F4:
00007FCC                            DrawBGScrollBlock2:
00007FCC                            
00007FCC 4A12                       			tst.b	(a2)
00007FCE 6700 0000                  			beq.w	locj_6DF2
00007FD2 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007FD8 6700 0000                  			beq.w	Draw_SBz
00007FDC 0892 0000                  			bclr	#0,(a2)
00007FE0 6700                       			beq.s	locj_6DD2
00007FE2                            			; Draw new tiles on the left
00007FE2 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007FE6 7AF0                       			moveq	#-16,d5
00007FE8 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FEC 383C 0070                  			move.w	#224/2,d4
00007FF0 7AF0                       			moveq	#-16,d5
00007FF2 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007FF4 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007FF8                            	locj_6DD2:
00007FF8 0892 0001                  			bclr	#1,(a2)
00007FFC 6700                       			beq.s	locj_6DF2
00007FFE                            			; Draw new tiles on the right
00007FFE 383C 0070                  			move.w	#224/2,d4
00008002 3A3C 0140                  			move.w	#320,d5
00008006 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000800A 383C 0070                  			move.w	#224/2,d4
0000800E 3A3C 0140                  			move.w	#320,d5
00008012 7C02                       			moveq	#3-1,d6
00008014 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008018                            	locj_6DF2:
00008018 4E75                       			rts
0000801A                            ;===============================================================================
0000801A                            	locj_6DF4:
0000801A 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
0000802A 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000803A 0200                       			dc.b $02,$00						
0000803C                            ;===============================================================================
0000803C                            	Draw_SBz:
0000803C 78F0                       			moveq	#-16,d4
0000803E 0892 0000                  			bclr	#0,(a2)
00008042 6600                       			bne.s	locj_6E28
00008044 0892 0001                  			bclr	#1,(a2)
00008048 6700                       			beq.s	locj_6E72
0000804A 383C 00E0                  			move.w	#224,d4
0000804E                            	locj_6E28:
0000804E 41F9 0000 801B             			lea	(locj_6DF4+1).l,a0
00008054 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008058 D044                       			add.w	d4,d0
0000805A 0240 01F0                  			andi.w	#$1F0,d0
0000805E E848                       			lsr.w	#4,d0
00008060 1030 0000                  			move.b	(a0,d0.w),d0
00008064 47F9 0000 0000             			lea	(locj_6FE4).l,a3
0000806A 3673 0000                  			movea.w	(a3,d0.w),a3
0000806E 6700                       			beq.s	locj_6E5E
00008070 7AF0                       			moveq	#-16,d5
00008072 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008076 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000807A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000807E 6100 0000                  			bsr.w	DrawBlocks_LR
00008082 6000                       			bra.s	locj_6E72
00008084                            ;===============================================================================
00008084                            	locj_6E5E:
00008084 7A00                       			moveq	#0,d5
00008086 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000808A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000808E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008092 7C1F                       			moveq	#(512/16)-1,d6
00008094 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008098                            	locj_6E72:
00008098 4A12                       			tst.b	(a2)
0000809A 6600                       			bne.s	locj_6E78
0000809C 4E75                       			rts
0000809E                            ;===============================================================================			
0000809E                            	locj_6E78:
0000809E 78F0                       			moveq	#-16,d4
000080A0 7AF0                       			moveq	#-16,d5
000080A2 1012                       			move.b	(a2),d0
000080A4 0200 00A8                  			andi.b	#$A8,d0
000080A8 6700                       			beq.s	locj_6E8C
000080AA E208                       			lsr.b	#1,d0
000080AC 1480                       			move.b	d0,(a2)
000080AE 3A3C 0140                  			move.w	#320,d5
000080B2                            	locj_6E8C:
000080B2 41F9 0000 801A             			lea	(locj_6DF4).l,a0
000080B8 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000080BC 0240 01F0                  			andi.w	#$1F0,d0
000080C0 E848                       			lsr.w	#4,d0
000080C2 41F0 0000                  			lea	(a0,d0.w),a0
000080C6 6000 0000                  			bra.w	locj_6FEC						
000080CA                            ;===============================================================================
000080CA                            
000080CA                            
000080CA                            	; locj_6EA4:
000080CA                            	DrawBGScrollBlock3:
000080CA 4A12                       			tst.b	(a2)
000080CC 6700 0000                  			beq.w	locj_6EF0
000080D0 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000080D6 6700 0000                  			beq.w	Draw_Mz
000080DA 0892 0000                  			bclr	#0,(a2)
000080DE 6700                       			beq.s	locj_6ED0
000080E0                            			; Draw new tiles on the left
000080E0 383C 0040                  			move.w	#$40,d4
000080E4 7AF0                       			moveq	#-16,d5
000080E6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000080EA 383C 0040                  			move.w	#$40,d4
000080EE 7AF0                       			moveq	#-16,d5
000080F0 7C02                       			moveq	#3-1,d6
000080F2 6100 0000                  			bsr.w	DrawBlocks_TB_2
000080F6                            	locj_6ED0:
000080F6 0892 0001                  			bclr	#1,(a2)
000080FA 6700                       			beq.s	locj_6EF0
000080FC                            			; Draw new tiles on the right
000080FC 383C 0040                  			move.w	#$40,d4
00008100 3A3C 0140                  			move.w	#320,d5
00008104 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008108 383C 0040                  			move.w	#$40,d4
0000810C 3A3C 0140                  			move.w	#320,d5
00008110 7C02                       			moveq	#3-1,d6
00008112 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008116                            	locj_6EF0:
00008116 4E75                       			rts
00008118                            	locj_6EF2:
00008118 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008128 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008138 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008148 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008158 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008168 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008178 0200                       			dc.b $02,$00
0000817A                            ;===============================================================================
0000817A                            	Draw_Mz:
0000817A 78F0                       			moveq	#-16,d4
0000817C 0892 0000                  			bclr	#0,(a2)
00008180 6600                       			bne.s	locj_6F66
00008182 0892 0001                  			bclr	#1,(a2)
00008186 6700                       			beq.s	locj_6FAE
00008188 383C 00E0                  			move.w	#224,d4
0000818C                            	locj_6F66:
0000818C 41F9 0000 8119             			lea	(locj_6EF2+1).l,a0
00008192 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008196 0440 0200                  			subi.w	#$200,d0
0000819A D044                       			add.w	d4,d0
0000819C 0240 07F0                  			andi.w	#$7F0,d0
000081A0 E848                       			lsr.w	#4,d0
000081A2 1030 0000                  			move.b	(a0,d0.w),d0
000081A6 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
000081AA 6700                       			beq.s	locj_6F9A
000081AC 7AF0                       			moveq	#-16,d5
000081AE 48E7 0C00                  			movem.l	d4/d5,-(sp)
000081B2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081B6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000081BA 6100 0000                  			bsr.w	DrawBlocks_LR
000081BE 6000                       			bra.s	locj_6FAE
000081C0                            ;===============================================================================
000081C0                            	locj_6F9A:
000081C0 7A00                       			moveq	#0,d5
000081C2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000081C6 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000081CA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000081CE 7C1F                       			moveq	#(512/16)-1,d6
000081D0 6100 0000                  			bsr.w	DrawBlocks_LR_3
000081D4                            	locj_6FAE:
000081D4 4A12                       			tst.b	(a2)
000081D6 6600                       			bne.s	locj_6FB4
000081D8 4E75                       			rts
000081DA                            ;===============================================================================			
000081DA                            	locj_6FB4:
000081DA 78F0                       			moveq	#-16,d4
000081DC 7AF0                       			moveq	#-16,d5
000081DE 1012                       			move.b	(a2),d0
000081E0 0200 00A8                  			andi.b	#$A8,d0
000081E4 6700                       			beq.s	locj_6FC8
000081E6 E208                       			lsr.b	#1,d0
000081E8 1480                       			move.b	d0,(a2)
000081EA 3A3C 0140                  			move.w	#320,d5
000081EE                            	locj_6FC8:
000081EE 41F9 0000 8118             			lea	(locj_6EF2).l,a0
000081F4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000081F8 0440 0200                  			subi.w	#$200,d0
000081FC 0240 07F0                  			andi.w	#$7F0,d0
00008200 E848                       			lsr.w	#4,d0
00008202 41F0 0000                  			lea	(a0,d0.w),a0
00008206 6000 0000                  			bra.w	locj_6FEC
0000820A                            ;===============================================================================			
0000820A                            	locj_6FE4:
0000820A FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00008212                            	locj_6FEC:
00008212 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008214 2E3C 0080 0000             			move.l	#$800000,d7
0000821A                            	locj_6FF4:			
0000821A 7000                       			moveq	#0,d0
0000821C 1018                       			move.b	(a0)+,d0
0000821E 0112                       			btst	d0,(a2)
00008220 6700                       			beq.s	locj_701C
00008222 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008226 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
0000822A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000822E 6100 0000                  			bsr.w	GetBlockData
00008232 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008236 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000823A 6100 0000                  			bsr.w	DrawBlock
0000823E 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008242                            	locj_701C:
00008242 0644 0010                  			addi.w	#16,d4
00008246 51CE FFD2                  			dbf	d6,locj_6FF4
0000824A 4212                       			clr.b	(a2)
0000824C 4E75                       			rts			
0000824E                            
0000824E                            
0000824E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824E                            
0000824E                            ; Don't be fooled by the name: this function's for drawing from left to right
0000824E                            ; when the camera's moving up or down
0000824E                            ; DrawTiles_LR:
0000824E                            DrawBlocks_LR:
0000824E 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
00008250                            ; DrawTiles_LR_2:
00008250                            DrawBlocks_LR_2:
00008250 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008256 2200                       		move.l	d0,d1
00008258                            
00008258                            	@loop:
00008258 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000825C 6100 0000                  		bsr.w	GetBlockData
00008260 2001                       		move.l	d1,d0
00008262 6100 0000                  		bsr.w	DrawBlock
00008266 5801                       		addq.b	#4,d1		; Two tiles ahead
00008268 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
0000826C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008270 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
00008274 51CE FFE2                  		dbf	d6,@loop
00008278 4E75                       		rts
0000827A                            ; End of function DrawBlocks_LR
0000827A                            
0000827A                            ; DrawTiles_LR_3:
0000827A                            DrawBlocks_LR_3:
0000827A 2E3C 0080 0000             		move.l	#$800000,d7
00008280 2200                       		move.l	d0,d1
00008282                            
00008282                            	@loop:
00008282 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008286 6100 0000                  		bsr.w	GetBlockData_2
0000828A 2001                       		move.l	d1,d0
0000828C 6100 0000                  		bsr.w	DrawBlock
00008290 5801                       		addq.b	#4,d1
00008292 0201 007F                  		andi.b	#$7F,d1
00008296 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000829A 0645 0010                  		addi.w	#16,d5
0000829E 51CE FFE2                  		dbf	d6,@loop
000082A2 4E75                       		rts	
000082A4                            ; End of function DrawBlocks_LR_3
000082A4                            
000082A4                            
000082A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082A4                            
000082A4                            ; Don't be fooled by the name: this function's for drawing from top to bottom
000082A4                            ; when the camera's moving left or right
000082A4                            ; DrawTiles_TB:
000082A4                            DrawBlocks_TB:
000082A4 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
000082A6                            ; DrawTiles_TB_2:
000082A6                            DrawBlocks_TB_2:
000082A6 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000082AC 2200                       		move.l	d0,d1
000082AE                            
000082AE                            	@loop:
000082AE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000082B2 6100 0000                  		bsr.w	GetBlockData
000082B6 2001                       		move.l	d1,d0
000082B8 6100 0000                  		bsr.w	DrawBlock
000082BC 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
000082C0 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000082C4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000082C8 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000082CC 51CE FFE0                  		dbf	d6,@loop
000082D0 4E75                       		rts	
000082D2                            ; End of function DrawBlocks_TB_2
000082D2                            
000082D2                            
000082D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082D2                            
000082D2                            ; Draws a block's worth of tiles
000082D2                            ; Parameters:
000082D2                            ; a0 = Pointer to block metadata (block index and X/Y flip)
000082D2                            ; a1 = Pointer to block
000082D2                            ; a5 = Pointer to VDP command port
000082D2                            ; a6 = Pointer to VDP data port
000082D2                            ; d0 = VRAM command to access plane
000082D2                            ; d2 = VRAM plane A/B specifier
000082D2                            ; d7 = Plane row delta
000082D2                            ; DrawTiles:
000082D2                            DrawBlock:
000082D2 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
000082D4 4840                       		swap	d0
000082D6 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
000082DA 6600                       		bne.s	DrawFlipY
000082DC 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000082E0 6600                       		bne.s	DrawFlipX
000082E2 2A80                       		move.l	d0,(a5)
000082E4 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000082E6 D087                       		add.l	d7,d0		; Next row
000082E8 2A80                       		move.l	d0,(a5)
000082EA 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000082EC 4E75                       		rts	
000082EE                            ; ===========================================================================
000082EE                            
000082EE                            DrawFlipX:
000082EE 2A80                       		move.l	d0,(a5)
000082F0 2819                       		move.l	(a1)+,d4
000082F2 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000082F8 4844                       		swap	d4		; Swap the tiles around
000082FA 2C84                       		move.l	d4,(a6)		; Write top two tiles
000082FC D087                       		add.l	d7,d0		; Next row
000082FE 2A80                       		move.l	d0,(a5)
00008300 2819                       		move.l	(a1)+,d4
00008302 0A84 0800 0800             		eori.l	#$8000800,d4
00008308 4844                       		swap	d4
0000830A 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
0000830C 4E75                       		rts	
0000830E                            ; ===========================================================================
0000830E                            
0000830E                            DrawFlipY:
0000830E 0810 0003                  		btst	#3,(a0)
00008312 6600                       		bne.s	DrawFlipXY
00008314 2A80                       		move.l	d0,(a5)
00008316 2A19                       		move.l	(a1)+,d5
00008318 2819                       		move.l	(a1)+,d4
0000831A 0A84 1000 1000             		eori.l	#$10001000,d4
00008320 2C84                       		move.l	d4,(a6)
00008322 D087                       		add.l	d7,d0
00008324 2A80                       		move.l	d0,(a5)
00008326 0A85 1000 1000             		eori.l	#$10001000,d5
0000832C 2C85                       		move.l	d5,(a6)
0000832E 4E75                       		rts	
00008330                            ; ===========================================================================
00008330                            
00008330                            DrawFlipXY:
00008330 2A80                       		move.l	d0,(a5)
00008332 2A19                       		move.l	(a1)+,d5
00008334 2819                       		move.l	(a1)+,d4
00008336 0A84 1800 1800             		eori.l	#$18001800,d4
0000833C 4844                       		swap	d4
0000833E 2C84                       		move.l	d4,(a6)
00008340 D087                       		add.l	d7,d0
00008342 2A80                       		move.l	d0,(a5)
00008344 0A85 1800 1800             		eori.l	#$18001800,d5
0000834A 4845                       		swap	d5
0000834C 2C85                       		move.l	d5,(a6)
0000834E 4E75                       		rts	
00008350                            ; End of function DrawBlocks
00008350                            
00008350                            ; ===========================================================================
00008350                            ; unused garbage
00008350                            
00008350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008350                            
00008350                            ; Gets address of block at a certain coordinate
00008350                            ; Parameters:
00008350                            ; a4 = Pointer to level layout
00008350                            ; d4 = Relative Y coordinate
00008350                            ; d5 = Relative X coordinate
00008350                            ; Returns:
00008350                            ; a0 = Address of block metadata
00008350                            ; a1 = Address of block
00008350                            ; DrawBlocks:
00008350                            GetBlockData:
00008350 DA53                       			add.w	(a3),d5
00008352                            	GetBlockData_2:
00008352 D86B 0004                  			add.w	4(a3),d4
00008356 43F8 B000                  			lea	(v_16x16).w,a1
0000835A                            		; Turn Y coordinate into index into level layout
0000835A 3604                       		move.w	d4,d3
0000835C E24B                       		lsr.w	#1,d3
0000835E 0243 0380                  		andi.w	#$380,d3
00008362                            		; Turn X coordinate into index into level layout
00008362 E64D                       		lsr.w	#3,d5
00008364 3005                       		move.w	d5,d0
00008366 EA48                       		lsr.w	#5,d0
00008368 0240 007F                  		andi.w	#$7F,d0
0000836C                            		; Get chunk from level layout
0000836C D043                       		add.w	d3,d0
0000836E 76FF                       		moveq	#-1,d3
00008370 1634 0000                  		move.b	(a4,d0.w),d3
00008374 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008376                            		; Turn chunk ID into index into chunk table
00008376 5303                       		subq.b	#1,d3
00008378 0243 007F                  		andi.w	#$7F,d3
0000837C EE5B                       		ror.w	#7,d3
0000837E                            		; Turn Y coordinate into index into chunk
0000837E D844                       		add.w	d4,d4
00008380 0244 01E0                  		andi.w	#$1E0,d4
00008384                            		; Turn X coordinate into index into chunk
00008384 0245 001E                  		andi.w	#$1E,d5
00008388                            		; Get block metadata from chunk
00008388 D644                       		add.w	d4,d3
0000838A D645                       		add.w	d5,d3
0000838C 2043                       		movea.l	d3,a0
0000838E 3610                       		move.w	(a0),d3
00008390                            		; Turn block ID into address
00008390 0243 03FF                  		andi.w	#$3FF,d3
00008394 E74B                       		lsl.w	#3,d3
00008396 D2C3                       		adda.w	d3,a1
00008398                            
00008398                            locret_6C1E:
00008398 4E75                       		rts	
0000839A                            ; End of function GetBlockData
0000839A                            
0000839A                            
0000839A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000839A                            
0000839A                            ; Produces a VRAM plane access command from coordinates
0000839A                            ; Parameters:
0000839A                            ; d4 = Relative Y coordinate
0000839A                            ; d5 = Relative X coordinate
0000839A                            ; Returns VDP command in d0
0000839A                            Calc_VRAM_Pos:
0000839A DA53                       			add.w	(a3),d5
0000839C                            	Calc_VRAM_Pos_2:
0000839C D86B 0004                  			add.w	4(a3),d4
000083A0                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
000083A0                            		; Also note that this wraps the value to the size of the plane:
000083A0                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
000083A0 0244 00F0                  		andi.w	#$F0,d4
000083A4 0245 01F0                  		andi.w	#$1F0,d5
000083A8                            		; Transform the adjusted coordinates into a VDP command
000083A8 E94C                       		lsl.w	#4,d4
000083AA E44D                       		lsr.w	#2,d5
000083AC D845                       		add.w	d5,d4
000083AE 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
000083B0 4840                       		swap	d0
000083B2 3004                       		move.w	d4,d0
000083B4 4E75                       		rts	
000083B6                            ; End of function Calc_VRAM_Pos
000083B6                            
000083B6                            
000083B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083B6                            ; not used
000083B6                            
000083B6                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
000083B6                            ; VRAM layout: the only difference is the high bits of the
000083B6                            ; plane's VRAM address, which are 10 instead of 11.
000083B6                            ; Both the foreground and background are at $C000 and $E000
000083B6                            ; respectively, so this one starting at $8000 makes no sense.
000083B6                            ; sub_6C3C:
000083B6                            Calc_VRAM_Pos_Unknown:
000083B6 D86B 0004                  		add.w	4(a3),d4
000083BA DA53                       		add.w	(a3),d5
000083BC 0244 00F0                  		andi.w	#$F0,d4
000083C0 0245 01F0                  		andi.w	#$1F0,d5
000083C4 E94C                       		lsl.w	#4,d4
000083C6 E44D                       		lsr.w	#2,d5
000083C8 D845                       		add.w	d5,d4
000083CA 7002                       		moveq	#2,d0
000083CC 4840                       		swap	d0
000083CE 3004                       		move.w	d4,d0
000083D0 4E75                       		rts	
000083D2                            ; End of function Calc_VRAM_Pos_Unknown
000083D2                            
000083D2                            ; ---------------------------------------------------------------------------
000083D2                            ; Subroutine to	load tiles as soon as the level	appears
000083D2                            ; ---------------------------------------------------------------------------
000083D2                            
000083D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083D2                            
000083D2                            
000083D2                            LoadTilesFromStart:
000083D2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000083D8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000083DE 47F8 F700                  		lea	(v_screenposx).w,a3
000083E2 49F8 A400                  		lea	(v_lvllayout).w,a4
000083E6 343C 4000                  		move.w	#$4000,d2
000083EA 6100                       		bsr.s	DrawChunks
000083EC 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000083F0 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000083F4 343C 6000                  		move.w	#$6000,d2
000083F8 4A38 FE10                  			tst.b	(v_zone).w
000083FC 6700 0000                  			beq.w	Draw_GHz_Bg
00008400 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008406 6700 0000                  			beq.w	Draw_Mz_Bg
0000840A 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008410 6700 0000                  			beq.w	Draw_SBz_Bg
00008414 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
0000841A 6700 0000                  			beq.w	Draw_GHz_Bg
0000841E                            ; End of function LoadTilesFromStart
0000841E                            
0000841E                            
0000841E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000841E                            
0000841E                            
0000841E                            DrawChunks:
0000841E 78F0                       		moveq	#-16,d4
00008420 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008422                            
00008422                            	@loop:
00008422 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008426 7A00                       		moveq	#0,d5
00008428 3204                       		move.w	d4,d1
0000842A 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000842E 3801                       		move.w	d1,d4
00008430 7A00                       		moveq	#0,d5
00008432 7C1F                       		moveq	#(512/16)-1,d6
00008434 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008438 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000843C 0644 0010                  		addi.w	#16,d4
00008440 51CE FFE0                  		dbf	d6,@loop
00008444 4E75                       		rts	
00008446                            ; End of function DrawChunks
00008446                            
00008446                            	Draw_GHz_Bg:
00008446 7800                       			moveq	#0,d4
00008448 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000844A                            	locj_7224:			
0000844A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000844E 41F9 0000 0000             			lea	(locj_724a),a0
00008454 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008458 D044                       			add.w	d4,d0
0000845A 0240 00F0                  			andi.w	#$F0,d0
0000845E 6100 0000                  			bsr.w	locj_72Ba
00008462 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008466 0644 0010                  			addi.w	#16,d4
0000846A 51CE FFDE                  			dbf	d6,locj_7224
0000846E 4E75                       			rts
00008470                            	locj_724a:
00008470 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
00008480                            ;-------------------------------------------------------------------------------
00008480                            	Draw_Mz_Bg:;locj_725a:
00008480 78F0                       			moveq	#-16,d4
00008482 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008484                            	locj_725E:			
00008484 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008488 41FA FC8F                  			lea	(locj_6EF2+1),a0
0000848C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008490 0440 0200                  			subi.w	#$200,d0
00008494 D044                       			add.w	d4,d0
00008496 0240 07F0                  			andi.w	#$7F0,d0
0000849A 6100 0000                  			bsr.w	locj_72Ba
0000849E 4CDF 0070                  			movem.l	(sp)+,d4-d6
000084A2 0644 0010                  			addi.w	#16,d4
000084A6 51CE FFDC                  			dbf	d6,locj_725E
000084AA 4E75                       			rts
000084AC                            ;-------------------------------------------------------------------------------
000084AC                            	Draw_SBz_Bg:;locj_7288:
000084AC 78F0                       			moveq	#-16,d4
000084AE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000084B0                            	locj_728C:			
000084B0 48E7 0E00                  			movem.l	d4-d6,-(sp)
000084B4 41FA FB65                  			lea	(locj_6DF4+1),a0
000084B8 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000084BC D044                       			add.w	d4,d0
000084BE 0240 01F0                  			andi.w	#$1F0,d0
000084C2 6100 0000                  			bsr.w	locj_72Ba
000084C6 4CDF 0070                  			movem.l	(sp)+,d4-d6
000084CA 0644 0010                  			addi.w	#16,d4
000084CE 51CE FFE0                  			dbf	d6,locj_728C
000084D2 4E75                       			rts
000084D4                            ;-------------------------------------------------------------------------------
000084D4                            	locj_72B2:
000084D4 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000084DC                            	locj_72Ba:
000084DC E848                       			lsr.w	#4,d0
000084DE 1030 0000                  			move.b	(a0,d0.w),d0
000084E2 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000084E6 6700                       			beq.s	locj_72da
000084E8 7AF0                       			moveq	#-16,d5
000084EA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084EE 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000084F2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084F6 6100 FD56                  			bsr.w	DrawBlocks_LR
000084FA 6000                       			bra.s	locj_72EE
000084FC                            	locj_72da:
000084FC 7A00                       			moveq	#0,d5
000084FE 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008502 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008506 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000850A 7C1F                       			moveq	#(512/16)-1,d6
0000850C 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008510                            	locj_72EE:
00008510 4E75                       			rts
00008512                            
00008512                            ; ---------------------------------------------------------------------------
00008512                            ; Subroutine to load basic level data
00008512                            ; ---------------------------------------------------------------------------
00008512                            
00008512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008512                            
00008512                            
00008512                            LevelDataLoad:
00008512 7000                       		moveq	#0,d0
00008514 1038 FE10                  		move.b	(v_zone).w,d0
00008518 E948                       		lsl.w	#4,d0
0000851A 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008520 45F2 0000                  		lea	(a2,d0.w),a2
00008524 2F0A                       		move.l	a2,-(sp)
00008526 588A                       		addq.l	#4,a2
00008528 205A                       		movea.l	(a2)+,a0
0000852A 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000852E 303C 0000                  		move.w	#0,d0
00008532 6100 9402                  		bsr.w	EniDec
00008536 205A                       		movea.l	(a2)+,a0
00008538 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000853E 6100 9574                  		bsr.w	KosDec
00008542 6100 0000                  		bsr.w	LevelLayoutLoad
00008546 301A                       		move.w	(a2)+,d0
00008548 3012                       		move.w	(a2),d0
0000854A 0240 00FF                  		andi.w	#$FF,d0
0000854E 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008554 6600                       		bne.s	@notSBZ3	; if not, branch
00008556 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008558                            
00008558                            	@notSBZ3:
00008558 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000855E 6700                       		beq.s	@isSBZorFZ	; if yes, branch
00008560 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008566 6600                       		bne.s	@normalpal	; if not, branch
00008568                            
00008568                            	@isSBZorFZ:
00008568 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
0000856A                            
0000856A                            	@normalpal:
0000856A 6100 A0F6                  		bsr.w	PalLoad1	; load palette (based on d0)
0000856E 245F                       		movea.l	(sp)+,a2
00008570 584A                       		addq.w	#4,a2		; read number for 2nd PLC
00008572 7000                       		moveq	#0,d0
00008574 1012                       		move.b	(a2),d0
00008576 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008578 6100 921E                  		bsr.w	AddPLC		; load pattern load cues
0000857C                            
0000857C                            	@skipPLC:
0000857C 4E75                       		rts	
0000857E                            ; End of function LevelDataLoad
0000857E                            
0000857E                            ; ---------------------------------------------------------------------------
0000857E                            ; Level	layout loading subroutine
0000857E                            ; ---------------------------------------------------------------------------
0000857E                            
0000857E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000857E                            
0000857E                            
0000857E                            LevelLayoutLoad:
0000857E 47F8 A400                  		lea	(v_lvllayout).w,a3
00008582 323C 01FF                  		move.w	#$1FF,d1
00008586 7000                       		moveq	#0,d0
00008588                            
00008588                            LevLoad_ClrRam:
00008588 26C0                       		move.l	d0,(a3)+
0000858A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
0000858E                            
0000858E 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
00008592 7200                       		moveq	#0,d1
00008594 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008598 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
0000859C 7202                       		moveq	#2,d1
0000859E                            ; End of function LevelLayoutLoad
0000859E                            
0000859E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000859E                            
0000859E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000859E                            
0000859E                            
0000859E                            LevelLayoutLoad2:
0000859E 3038 FE10                  		move.w	(v_zone).w,d0
000085A2 ED08                       		lsl.b	#6,d0
000085A4 EA48                       		lsr.w	#5,d0
000085A6 3400                       		move.w	d0,d2
000085A8 D040                       		add.w	d0,d0
000085AA D042                       		add.w	d2,d0
000085AC D041                       		add.w	d1,d0
000085AE 43F9 0000 0000             		lea	(Level_Index).l,a1
000085B4 3031 0000                  		move.w	(a1,d0.w),d0
000085B8 43F1 0000                  		lea	(a1,d0.w),a1
000085BC 7200                       		moveq	#0,d1
000085BE 3401                       		move.w	d1,d2
000085C0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000085C2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000085C4                            
000085C4                            LevLoad_NumRows:
000085C4 3001                       		move.w	d1,d0
000085C6 204B                       		movea.l	a3,a0
000085C8                            
000085C8                            LevLoad_Row:
000085C8 10D9                       		move.b	(a1)+,(a0)+
000085CA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000085CE 47EB 0080                  		lea	$80(a3),a3	; do next row
000085D2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000085D6 4E75                       		rts	
000085D8                            ; End of function LevelLayoutLoad2
000085D8                            
000085D8                            		include	"_inc\DynamicLevelEvents.asm"
000085D8                            ; ---------------------------------------------------------------------------
000085D8                            ; Dynamic level events
000085D8                            ; ---------------------------------------------------------------------------
000085D8                            
000085D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085D8                            
000085D8                            
000085D8                            DynamicLevelEvents:
000085D8 7000                       		moveq	#0,d0
000085DA 1038 FE10                  		move.b	(v_zone).w,d0
000085DE D040                       		add.w	d0,d0
000085E0 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
000085E4 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000085E8 7202                       		moveq	#2,d1
000085EA 3038 F726                  		move.w	(v_limitbtm1).w,d0
000085EE 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000085F2 6700                       		beq.s	DLE_NoChg	; if not, branch
000085F4 6400                       		bcc.s	loc_6DAC
000085F6                            
000085F6 4441                       		neg.w	d1
000085F8 3038 F704                  		move.w	(v_screenposy).w,d0
000085FC B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008600 6300                       		bls.s	loc_6DA0
00008602 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008606 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
0000860C                            
0000860C                            loc_6DA0:
0000860C D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008610 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008616                            
00008616                            DLE_NoChg:
00008616 4E75                       		rts	
00008618                            ; ===========================================================================
00008618                            
00008618                            loc_6DAC:
00008618 3038 F704                  		move.w	(v_screenposy).w,d0
0000861C 5040                       		addq.w	#8,d0
0000861E B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008622 6500                       		bcs.s	loc_6DC4
00008624 0838 0001 D022             		btst	#1,(v_player+obStatus).w
0000862A 6700                       		beq.s	loc_6DC4
0000862C D241                       		add.w	d1,d1
0000862E D241                       		add.w	d1,d1
00008630                            
00008630                            loc_6DC4:
00008630 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008634 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000863A 4E75                       		rts	
0000863C                            ; End of function DynamicLevelEvents
0000863C                            
0000863C                            ; ===========================================================================
0000863C                            ; ---------------------------------------------------------------------------
0000863C                            ; Offset index for dynamic level events
0000863C                            ; ---------------------------------------------------------------------------
0000863C 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008640 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008644 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008648 0000                       		dc.w DLE_Ending-DLE_Index
0000864A                            ; ===========================================================================
0000864A                            ; ---------------------------------------------------------------------------
0000864A                            ; Green	Hill Zone dynamic level events
0000864A                            ; ---------------------------------------------------------------------------
0000864A                            
0000864A                            DLE_GHZ:
0000864A 7000                       		moveq	#0,d0
0000864C 1038 FE11                  		move.b	(v_act).w,d0
00008650 D040                       		add.w	d0,d0
00008652 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008656 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
0000865A                            ; ===========================================================================
0000865A 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
0000865C 0000                       		dc.w DLE_GHZ2-DLE_GHZx
0000865E 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008660                            ; ===========================================================================
00008660                            
00008660                            DLE_GHZ1:
00008660 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008666 6600                       		bne.s	gohere
00008668 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
0000866E 4E75                       		rts
00008670                            gohere:
00008670 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008676 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
0000867C 6500                       		bcs.s	locret_6E08	; if not, branch
0000867E 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008684                            
00008684                            locret_6E08:
00008684 4E75                       		rts	
00008686                            ; ===========================================================================
00008686                            
00008686                            DLE_GHZ2:
00008686 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000868C 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008692 6500                       		bcs.s	locret_6E3A
00008694 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
0000869A 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000086A0 6500                       		bcs.s	locret_6E3A
000086A2 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000086A8 6500                       		bcs.s	loc_6E9A
000086AA 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
000086B0 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
000086B6 6400                       		bcc.s	loc_6E8F
000086B8 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
000086BE 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000086C4                            
000086C4                            loc_6E8F:
000086C4 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
000086CA 6400                       		bcc.s	loc_6E9A
000086CC                            
000086CC                            locret_6E3A:
000086CC 4E75                       		rts	
000086CE                            ; ===========================================================================
000086CE                            
000086CE                            loc_6E9A:
000086CE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086D4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086D8 4E75                       		rts		
000086DA                            ; ===========================================================================
000086DA                            
000086DA                            DLE_GHZ3:
000086DA 7000                       		moveq	#0,d0
000086DC 1038 F742                  		move.b	(v_dle_routine).w,d0
000086E0 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000086E4 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000086E8                            ; ===========================================================================
000086E8 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
000086EA 0000                       		dc.w DLE_GHZ3boss-off_6E4A
000086EC 0000                       		dc.w DLE_GHZ3end-off_6E4A
000086EE                            ; ===========================================================================
000086EE                            
000086EE                            DLE_GHZ3main:
000086EE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086F4 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000086FA 6500                       		bcs.s	locret_6E96
000086FC 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008702 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008708 6500                       		bcs.s	locret_6E96
0000870A 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008710 6500                       		bcs.s	loc_6E98
00008712 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008718 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
0000871E 6400                       		bcc.s	loc_6E8E
00008720 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008726 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000872C                            
0000872C                            loc_6E8E:
0000872C 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
00008732 6400                       		bcc.s	loc_6E98
00008734                            
00008734                            locret_6E96:
00008734 4E75                       		rts	
00008736                            ; ===========================================================================
00008736                            
00008736                            loc_6E98:
00008736 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000873C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008740 4E75                       		rts	
00008742                            ; ===========================================================================
00008742                            
00008742                            DLE_GHZ3boss:
00008742 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008748 6400                       		bcc.s	loc_6EB0
0000874A 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000874E                            
0000874E                            loc_6EB0:
0000874E 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
00008754 6500                       		bcs.s	locret_6EE8
00008756 6100 0000                  		bsr.w	FindFreeObj
0000875A 6600                       		bne.s	loc_6ED0
0000875C 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008760 337C 2A60 0008             		move.w	#$2A60,obX(a1)
00008766 337C 0280 000C             		move.w	#$280,obY(a1)
0000876C                            
0000876C                            loc_6ED0:
00008774 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000877A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000877E 7000                       		moveq	#plcid_Boss,d0
00008780 6000 9016                  		bra.w	AddPLC		; load boss patterns
00008784                            ; ===========================================================================
00008784                            
00008784                            locret_6EE8:
00008784 4E75                       		rts	
00008786                            ; ===========================================================================
00008786                            
00008786                            DLE_GHZ3end:
00008786 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000878C 4E75                       		rts	
0000878E                            ; ===========================================================================
0000878E                            ; ---------------------------------------------------------------------------
0000878E                            ; Labyrinth Zone dynamic level events
0000878E                            ; ---------------------------------------------------------------------------
0000878E                            
0000878E                            DLE_LZ:
0000878E 7000                       		moveq	#0,d0
00008790 1038 FE11                  		move.b	(v_act).w,d0
00008794 D040                       		add.w	d0,d0
00008796 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
0000879A 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
0000879E                            ; ===========================================================================
0000879E 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
000087A0 0000                       		dc.w DLE_LZ12-DLE_LZx
000087A2 0000                       		dc.w DLE_LZ3-DLE_LZx
000087A4 0000                       		dc.w DLE_SBZ3-DLE_LZx
000087A6                            ; ===========================================================================
000087A6                            
000087A6                            DLE_LZ12:
000087A6 4E75                       		rts	
000087A8                            ; ===========================================================================
000087A8                            
000087A8                            DLE_LZ3:
000087A8 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
000087AC 6700                       		beq.s	loc_6F28	; if not, branch
000087AE 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
000087B2 0C11 0007                  		cmpi.b	#7,(a1)
000087B6 6700                       		beq.s	loc_6F28
000087B8 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000087C4                            
000087C4                            loc_6F28:
000087C4 4A38 F742                  		tst.b	(v_dle_routine).w
000087C8 6600                       		bne.s	locret_6F64
000087CA 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
000087D0 6500                       		bcs.s	locret_6F62
000087D2 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
000087D8 6400                       		bcc.s	locret_6F62
000087DA 6100 0000                  		bsr.w	FindFreeObj
000087DE 6600                       		bne.s	loc_6F4A
000087E0 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
000087E4                            
000087E4                            loc_6F4A:
000087EC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000087F2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087F6 7000                       		moveq	#plcid_Boss,d0
000087F8 6000 8F9E                  		bra.w	AddPLC		; load boss patterns
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            locret_6F62:
000087FC 4E75                       		rts	
000087FE                            ; ===========================================================================
000087FE                            
000087FE                            locret_6F64:
000087FE 4E75                       		rts	
00008800                            ; ===========================================================================
00008800                            
00008800                            DLE_SBZ3:
00008800 4A38 F742                          tst.b	(v_dle_routine).w
00008804 6600                               bne.s   loc_6C28
00008806 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
0000880A 6700                       		beq.s	loc_6C28	; if not, branch
00008814 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
0000881A                            loc_6C28:
0000881A 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008820 6500                       		bcs.s	locret_6F8C
00008822 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008828 6400                       		bcc.s	locret_6F8C	; if not, branch
0000882A 4238 FE30                  		clr.b	(v_lastlamp).w
0000882E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008834 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
0000883A 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008840                            
00008840                            locret_6F8C:
00008840 4E75                       		rts	
00008842                            ; ===========================================================================
00008842                            ; ---------------------------------------------------------------------------
00008842                            ; Marble Zone dynamic level events
00008842                            ; ---------------------------------------------------------------------------
00008842                            
00008842                            DLE_MZ:
00008842 7000                       		moveq	#0,d0
00008844 1038 FE11                  		move.b	(v_act).w,d0
00008848 D040                       		add.w	d0,d0
0000884A 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
0000884E 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008852                            ; ===========================================================================
00008852 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008854 0000                       		dc.w DLE_MZ2-DLE_MZx
00008856 0000                       		dc.w DLE_MZ3-DLE_MZx
00008858                            ; ===========================================================================
00008858                            
00008858                            DLE_MZ1:
00008858 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000885E 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008864 6500                       		bcs.s	locret_6FE8
00008866 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
0000886C                            
0000886C                            locret_6FE8:
0000886C 4E75                       		rts	
0000886E                            
0000886E                            ; ===========================================================================
0000886E                            
0000886E                            DLE_MZ2:
0000886E 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008874 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
0000887A 6500                       		bcs.s	locret_6FE9
0000887C 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008882                            		
00008882                            locret_6FE9:
00008882 4E75                       		rts	
00008884                            ; ===========================================================================
00008884                            
00008884                            DLE_MZ3:
00008884 7000                       		moveq	#0,d0
00008886 1038 F742                  		move.b	(v_dle_routine).w,d0
0000888A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000888E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008892                            ; ===========================================================================
00008892 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008894 0000                       		dc.w DLE_MZ3cutscene-off_7098
00008896 0000                       		dc.w DLE_MZ3boss2-off_7098
00008898 0000                       		dc.w DLE_MZ3end-off_7098
0000889A                            ; ===========================================================================
0000889A                            
0000889A                            DLE_MZ3boss:
0000889A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088A0 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
000088A6 6500                       		bcs.s	locret_70E8
000088A8 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000088AE 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
000088B4 6500                       		bcs.s	locret_70E8
000088B6 6100 0000                  		bsr.w	FindFreeObj
000088BA 6600                       		bne.s	loc_70D0
000088BC 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
000088C0 337C 19F0 0008             		move.w	#$19F0,obX(a1)
000088C6 337C 022C 000C             		move.w	#$22C,obY(a1)
000088CC                            
000088CC                            loc_70D0:
000088D4 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088DA 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088DE 7000                       		moveq	#plcid_Boss,d0
000088E0 6000 8EB6                  		bra.w	AddPLC		; load boss patterns
000088E4                            ; ===========================================================================
000088E4                            
000088E4                            locret_70E8:
000088E4 4E75                       		rts	
000088E6                            		
000088E6                            DLE_MZ3cutscene:
000088E6 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088EC 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
000088F2 6500                       		bcs.s	locret_8298
000088F4 6100 0000                  		bsr.w	FindFreeObj
000088F8 6600                       		bne.s	locret_8298
000088FA 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
000088FE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008902 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008904 6000 8E92                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008908                            ; ===========================================================================
00008908                            
00008908                            locret_8298:
00008908 4E75                       		rts	
0000890A                            ; ===========================================================================
0000890A                            
0000890A                            DLE_MZ3boss2:
0000890A 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008910 6500                       		bcs.s	loc_72C6
00008912 6100 0000                  		bsr.w	FindFreeObj
00008916 6600                       		bne.s	loc_72C0
00008918 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
0000891C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008928                            
00008928                            loc_72C0:
00008928 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000892E                            
0000892E                            loc_72C6:
0000892E 6000                       		bra.s	loc_72D2
00008930                            ; ===========================================================================
00008930                            
00008930                            DLE_MZ3end:
00008930 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008936 6500                       		bcs.s	loc_72D2
00008938 4E75                       		rts	
0000893A                            ; ===========================================================================
0000893A                            
0000893A                            loc_72D2:
0000893A 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008940 4E75                       		rts
00008942                            
00008942                            
00008942                            ; ===========================================================================
00008942                            ; ---------------------------------------------------------------------------
00008942                            ; Star Light Zone dynamic level events
00008942                            ; ---------------------------------------------------------------------------
00008942                            
00008942                            DLE_SLZ:
00008942 7000                       		moveq	#0,d0
00008944 1038 FE11                  		move.b	(v_act).w,d0
00008948 D040                       		add.w	d0,d0
0000894A 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
0000894E 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008952                            ; ===========================================================================
00008952 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008954 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008956 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008958                            ; ===========================================================================
00008958                            
00008958                            DLE_SLZ12:
00008958 4E75                       		rts	
0000895A                            ; ===========================================================================
0000895A                            
0000895A                            DLE_SLZ3:
0000895A 7000                       		moveq	#0,d0
0000895C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008960 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008964 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008968                            ; ===========================================================================
00008968 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
0000896A 0000                       		dc.w DLE_SLZ3boss-off_7118
0000896C 0000                       		dc.w DLE_SLZ3end-off_7118
0000896E                            ; ===========================================================================
0000896E                            
0000896E                            DLE_SLZ3main:
0000896E 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008974 6500                       		bcs.s	locret_7130
00008976 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
0000897C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008980                            
00008980                            locret_7130:
00008980 4E75                       		rts	
00008982                            ; ===========================================================================
00008982                            
00008982                            DLE_SLZ3boss:
00008982 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008988 6500                       		bcs.s	locret_715C
0000898A 6100 0000                  		bsr.w	FindFreeObj
0000898E 6600                       		bne.s	loc_7144
00008990 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008994                            
00008994                            loc_7144:
0000899C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089A2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089A6 7000                       		moveq	#plcid_Boss,d0
000089A8 6000 8DEE                  		bra.w	AddPLC		; load boss patterns
000089AC                            ; ===========================================================================
000089AC                            
000089AC                            locret_715C:
000089AC 4E75                       		rts	
000089AE                            ; ===========================================================================
000089AE                            
000089AE                            DLE_SLZ3end:
000089AE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000089B4 4E75                       		rts
000089B6 4E75                       		rts
000089B8                            ; ===========================================================================
000089B8                            ; ---------------------------------------------------------------------------
000089B8                            ; Spring Yard Zone dynamic level events
000089B8                            ; ---------------------------------------------------------------------------
000089B8                            
000089B8                            DLE_SYZ:
000089B8 7000                       		moveq	#0,d0
000089BA 1038 FE11                  		move.b	(v_act).w,d0
000089BE D040                       		add.w	d0,d0
000089C0 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
000089C4 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
000089C8                            ; ===========================================================================
000089C8 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
000089CA 0000                       		dc.w DLE_SYZ2-DLE_SYZx
000089CC 0000                       		dc.w DLE_SYZ3-DLE_SYZx
000089CE                            ; ===========================================================================
000089CE                            
000089CE                            DLE_SYZ1:
000089CE 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000089D4 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
000089DA 6500                       		bcs.s	locret_71A2
000089DC 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
000089E2 4E75                       		rts	
000089E4                            ; ===========================================================================
000089E4                            
000089E4                            DLE_SYZ2:
000089E4 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000089EA 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
000089F0 6500                       		bcs.s	locret_71A2
000089F2 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
000089F8 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
000089FE 6500                       		bcs.s	locret_71A2
00008A00 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008A06                            
00008A06                            locret_71A2:
00008A06 4E75                       		rts	
00008A08                            ; ===========================================================================
00008A08                            
00008A08                            DLE_SYZ3:
00008A08 7000                       		moveq	#0,d0
00008A0A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A0E 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008A12 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008A16                            ; ===========================================================================
00008A16 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008A18 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008A1A 0000                       		dc.w DLE_SYZ3end-off_71B2
00008A1C                            ; ===========================================================================
00008A1C                            
00008A1C                            DLE_SYZ3main:
00008A1C 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008A22 6500                       		bcs.s	locret_71CE
00008A24 6100 0000                  		bsr.w	FindFreeObj
00008A28 6600                       		bne.s	locret_71CE
00008A2A 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008A2E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A32                            
00008A32                            locret_71CE:
00008A32 4E75                       		rts	
00008A34                            ; ===========================================================================
00008A34                            
00008A34                            DLE_SYZ3boss:
00008A34 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008A3A 6500                       		bcs.s	locret_7200
00008A3C 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008A42 6100 0000                  		bsr.w	FindFreeObj
00008A46 6600                       		bne.s	loc_71EC
00008A48 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008A4C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A50                            
00008A50                            loc_71EC:
00008A58 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A5E 7000                       		moveq	#plcid_Boss,d0
00008A60 6000 8D36                  		bra.w	AddPLC		; load boss patterns
00008A64                            ; ===========================================================================
00008A64                            
00008A64                            locret_7200:
00008A64 4E75                       		rts	
00008A66                            ; ===========================================================================
00008A66                            
00008A66                            DLE_SYZ3end:
00008A66 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008A6C 4E75                       		rts	
00008A6E                            ; ===========================================================================
00008A6E                            ; ---------------------------------------------------------------------------
00008A6E                            ; Scrap	Brain Zone dynamic level events
00008A6E                            ; ---------------------------------------------------------------------------
00008A6E                            
00008A6E                            DLE_SBZ:
00008A6E 7000                       		moveq	#0,d0
00008A70 1038 FE11                  		move.b	(v_act).w,d0
00008A74 D040                       		add.w	d0,d0
00008A76 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008A7A 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008A7E                            ; ===========================================================================
00008A7E 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008A80 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008A82 0000                       		dc.w DLE_FZ-DLE_SBZx
00008A84                            ; ===========================================================================
00008A84                            
00008A84                            DLE_SBZ1:
00008A84 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008A8A 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008A90 6500                       		bcs.s	locret_7242
00008A92 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008A98 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008A9E 6500                       		bcs.s	locret_7242
00008AA0 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008AA6                            
00008AA6                            locret_7242:
00008AA6 4E75                       		rts	
00008AA8                            ; ===========================================================================
00008AA8                            
00008AA8                            DLE_SBZ2:
00008AA8 7000                       		moveq	#0,d0
00008AAA 1038 F742                  		move.b	(v_dle_routine).w,d0
00008AAE 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008AB2 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008AB6                            ; ===========================================================================
00008AB6 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008AB8 0000                       		dc.w DLE_SBZ2boss-off_7252
00008ABA 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008ABC 0000                       		dc.w DLE_SBZ2end-off_7252
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            DLE_SBZ2main:
00008ABE 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008AC4 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008ACA 6500                       		bcs.s	locret_727A
00008ACC 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008AD2 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008AD8 6500                       		bcs.s	locret_727A
00008ADA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ADE                            
00008ADE                            locret_727A:
00008ADE 4E75                       		rts	
00008AE0                            ; ===========================================================================
00008AE0                            
00008AE0                            DLE_SBZ2boss:
00008AE0 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008AE6 6500                       		bcs.s	locret_7298
00008AE8 6100 0000                  		bsr.w	FindFreeObj
00008AEC 6600                       		bne.s	locret_7298
00008AEE 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008AF2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AF6 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008AF8 6000 8C9E                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008AFC                            ; ===========================================================================
00008AFC                            
00008AFC                            locret_7298:
00008AFC 4E75                       		rts	
00008AFE                            ; ===========================================================================
00008AFE                            
00008AFE                            DLE_SBZ2boss2:
00008AFE 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008B04 6500                       		bcs.s	loc_72B6
00008B06 6100 0000                  		bsr.w	FindFreeObj
00008B0A 6600                       		bne.s	loc_72B0
00008B0C 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008B10 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B14                            
00008B14                            loc_72B0:
00008B14 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B1A                            
00008B1A                            loc_72B6:
00008B1A 6000                       		bra.s	loc_72C2
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            DLE_SBZ2end:
00008B1C 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008B22 6500                       		bcs.s	loc_72C2
00008B24 4E75                       		rts	
00008B26                            ; ===========================================================================
00008B26                            
00008B26                            loc_72C2:
00008B26 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008B2C 4E75                       		rts	
00008B2E                            ; ===========================================================================
00008B2E                            
00008B2E                            DLE_FZ:
00008B2E 7000                       		moveq	#0,d0
00008B30 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B34 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008B38 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008B3C                            ; ===========================================================================
00008B3C 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008B40 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008B44 0000                       		dc.w DLE_FZend2-off_72D8
00008B46                            ; ===========================================================================
00008B46                            
00008B46                            DLE_FZmain:
00008B46 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008B4C 6500                       		bcs.s	loc_72F4
00008B4E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B52 7000                       		moveq	#plcid_FZBoss,d0
00008B54 6100 8C42                  		bsr.w	AddPLC		; load FZ boss patterns
00008B58                            
00008B58                            loc_72F4:
00008B58 60CC                       		bra.s	loc_72C2
00008B5A                            ; ===========================================================================
00008B5A                            
00008B5A                            DLE_FZboss:
00008B5A 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008B60 6500                       		bcs.s	loc_7312
00008B62 6100 0000                  		bsr.w	FindFreeObj
00008B66 6600                       		bne.s	loc_7312
00008B68 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008B6C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B70 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B76                            
00008B76                            loc_7312:
00008B76 60AE                       		bra.s	loc_72C2
00008B78                            ; ===========================================================================
00008B78                            
00008B78                            DLE_FZend:
00008B78 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008B7E 6500                       		bcs.s	loc_7320
00008B80 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B84                            
00008B84                            loc_7320:
00008B84 60A0                       		bra.s	loc_72C2
00008B86                            ; ===========================================================================
00008B86                            
00008B86                            locret_7322:
00008B86 4E75                       		rts	
00008B88                            ; ===========================================================================
00008B88                            
00008B88                            DLE_FZend2:
00008B88 609C                       		bra.s	loc_72C2
00008B8A                            ; ===========================================================================
00008B8A                            ; ---------------------------------------------------------------------------
00008B8A                            ; Ending sequence dynamic level events (empty)
00008B8A                            ; ---------------------------------------------------------------------------
00008B8A                            
00008B8A                            DLE_Ending:
00008B8A 4E75                       		rts	
00008B8A 4E75                       		rts	
00008B8C                            
00008B8C                            		include	"_incObj\11 Bridge (part 1).asm"
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Object 11 - GHZ bridge
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            
00008B8C                            Bridge:
00008B8C 7000                       		moveq	#0,d0
00008B8E 1028 0024                  		move.b	obRoutine(a0),d0
00008B92 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008B96 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008B9A                            ; ===========================================================================
00008B9A 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008B9E 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008BA2 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008BA6                            ; ===========================================================================
00008BA6                            
00008BA6                            Bri_Main:	; Routine 0
00008BA6 5428 0024                  		addq.b	#2,obRoutine(a0)
00008BAA 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008BB2 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008BB8 117C 0004 0001             		move.b	#4,obRender(a0)
00008BBE 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008BC4 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008BCA 3428 000C                  		move.w	obY(a0),d2
00008BCE 3628 0008                  		move.w	obX(a0),d3
00008BD2 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008BD4 45E8 0028                  		lea	obSubtype(a0),a2
00008BD8 7200                       		moveq	#0,d1
00008BDA 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008BDC 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008BE0 3001                       		move.w	d1,d0
00008BE2 E248                       		lsr.w	#1,d0
00008BE4 E948                       		lsl.w	#4,d0
00008BE6 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008BE8 5501                       		subq.b	#2,d1
00008BEA 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008BEC                            
00008BEC                            @buildloop:
00008BEC 6100 0000                  		bsr.w	FindFreeObj
00008BF0 6600                       		bne.s	Bri_Action
00008BF2 5228 0028                  		addq.b	#1,obSubtype(a0)
00008BF6 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008BFA 6600                       		bne.s	@notleftmost	; if not, branch
00008BFC                            
00008BFC 0643 0010                  		addi.w	#$10,d3
00008C00 3142 000C                  		move.w	d2,obY(a0)
00008C04 3142 003C                  		move.w	d2,$3C(a0)
00008C08 3A08                       		move.w	a0,d5
00008C0A 0445 D000                  		subi.w	#$D000,d5
00008C0E EC4D                       		lsr.w	#6,d5
00008C10 0245 007F                  		andi.w	#$7F,d5
00008C14 14C5                       		move.b	d5,(a2)+
00008C16 5228 0028                  		addq.b	#1,obSubtype(a0)
00008C1A                            
00008C1A                            	@notleftmost:
00008C1A 3A09                       		move.w	a1,d5
00008C1C 0445 D000                  		subi.w	#$D000,d5
00008C20 EC4D                       		lsr.w	#6,d5
00008C22 0245 007F                  		andi.w	#$7F,d5
00008C26 14C5                       		move.b	d5,(a2)+
00008C28 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008C2E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008C30 3342 000C                  		move.w	d2,obY(a1)
00008C34 3342 003C                  		move.w	d2,$3C(a1)
00008C38 3343 0008                  		move.w	d3,obX(a1)
00008C3C 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008C44 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008C4A 137C 0004 0001             		move.b	#4,obRender(a1)
00008C50 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008C56 137C 0008 0014             		move.b	#8,obActWid(a1)
00008C5C 0643 0010                  		addi.w	#$10,d3
00008C60 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008C64                            
00008C64                            Bri_Action:	; Routine 2
00008C64 6100                       		bsr.s	Bri_Solid
00008C66 4A28 003E                  		tst.b	$3E(a0)
00008C6A 6700                       		beq.s	@display
00008C6C 5928 003E                  		subq.b	#4,$3E(a0)
00008C70 6100 0000                  		bsr.w	Bri_Bend
00008C74                            
00008C74                            	@display:
00008C74 6100 0000                  		bsr.w	DisplaySprite
00008C78 6000 0000                  		bra.w	Bri_ChkDel
00008C7C                            
00008C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C7C                            
00008C7C                            
00008C7C                            Bri_Solid:
00008C7C 7200                       		moveq	#0,d1
00008C7E 1228 0028                  		move.b	obSubtype(a0),d1
00008C82 E749                       		lsl.w	#3,d1
00008C84 3401                       		move.w	d1,d2
00008C86 5041                       		addq.w	#8,d1
00008C88 D442                       		add.w	d2,d2
00008C8A 43F8 D000                  		lea	(v_player).w,a1
00008C8E 4A69 0012                  		tst.w	obVelY(a1)
00008C92 6B00 0000                  		bmi.w	Plat_Exit
00008C96 3029 0008                  		move.w	obX(a1),d0
00008C9A 9068 0008                  		sub.w	obX(a0),d0
00008C9E D041                       		add.w	d1,d0
00008CA0 6B00 0000                  		bmi.w	Plat_Exit
00008CA4 B042                       		cmp.w	d2,d0
00008CA6 6400 0000                  		bcc.w	Plat_Exit
00008CAA 6000                       		bra.s	Plat_NoXCheck
00008CAC                            ; End of function Bri_Solid
00008CAC                            ; End of function Bri_Solid
00008CAC                            
00008CAC                            ; ---------------------------------------------------------------------------
00008CAC                            ; Platform subroutine
00008CAC                            ; ---------------------------------------------------------------------------
00008CAC                            
00008CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CAC                            
00008CAC                            PlatformObject:
00008CAC 43F8 D000                  		lea	(v_player).w,a1
00008CB0 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008CB4 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008CB8                            
00008CB8                            ;		perform x-axis range check
00008CB8 3029 0008                  		move.w	obX(a1),d0
00008CBC 9068 0008                  		sub.w	obX(a0),d0
00008CC0 D041                       		add.w	d1,d0
00008CC2 6B00 0000                  		bmi.w	Plat_Exit
00008CC6 D241                       		add.w	d1,d1
00008CC8 B041                       		cmp.w	d1,d0
00008CCA 6400 0000                  		bhs.w	Plat_Exit
00008CCE                            
00008CCE                            	Plat_NoXCheck:
00008CCE 3028 000C                  		move.w	obY(a0),d0
00008CD2 5140                       		subq.w	#8,d0
00008CD4                            
00008CD4                            Platform3:
00008CD4                            ;		perform y-axis range check
00008CD4 3429 000C                  		move.w	obY(a1),d2
00008CD8 1229 0016                  		move.b	obHeight(a1),d1
00008CDC 4881                       		ext.w	d1
00008CDE D242                       		add.w	d2,d1
00008CE0 5841                       		addq.w	#4,d1
00008CE2 9041                       		sub.w	d1,d0
00008CE4 6200 0000                  		bhi.w	Plat_Exit
00008CE8 0C40 FFF0                  		cmpi.w	#-$10,d0
00008CEC 6500 0000                  		blo.w	Plat_Exit
00008CF0                            
00008CF0 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008CF4 6B00 0000                  		bmi.w	Plat_Exit
00008CF8 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008CFE 6400 0000                  		bhs.w	Plat_Exit
00008D02 D440                       		add.w	d0,d2
00008D04 5642                       		addq.w	#3,d2
00008D06 3342 000C                  		move.w	d2,obY(a1)
00008D0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00008D0E                            
00008D0E                            loc_74AE:
00008D0E 0829 0003 0022             		btst	#3,obStatus(a1)
00008D14 6700                       		beq.s	loc_74DC
00008D16 7000                       		moveq	#0,d0
00008D18 1029 003D                  		move.b	$3D(a1),d0
00008D1C ED48                       		lsl.w	#6,d0
00008D1E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D24 2440                       		movea.l	d0,a2
00008D26 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008D2C 422A 0025                  		clr.b	ob2ndRout(a2)
00008D30 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008D36 6600                       		bne.s	loc_74DC
00008D38 552A 0024                  		subq.b	#2,obRoutine(a2)
00008D3C                            
00008D3C                            loc_74DC:
00008D3C 3008                       		move.w	a0,d0
00008D3E 0440 D000                  		subi.w	#-$3000,d0
00008D42 EC48                       		lsr.w	#6,d0
00008D44 0240 007F                  		andi.w	#$7F,d0
00008D48 1340 003D                  		move.b	d0,$3D(a1)
00008D4C 137C 0000 0026             		move.b	#0,obAngle(a1)
00008D52 337C 0000 0012             		move.w	#0,obVelY(a1)
00008D58 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008D5E 0829 0001 0022             		btst	#1,obStatus(a1)
00008D64 6700                       		beq.s	loc_7512
00008D66 2F08                       		move.l	a0,-(sp)
00008D68 2049                       		movea.l	a1,a0
00008D6A 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008D70 205F                       		movea.l	(sp)+,a0
00008D72                            
00008D72                            loc_7512:
00008D72 08E9 0003 0022             		bset	#3,obStatus(a1)
00008D78 08E8 0003 0022             		bset	#3,obStatus(a0)
00008D7E                            
00008D7E                            Plat_Exit:
00008D7E 4E75                       		rts	
00008D80                            ; End of function PlatformObject
00008D80                            
00008D80                            ; ---------------------------------------------------------------------------
00008D80                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008D80                            ; ---------------------------------------------------------------------------
00008D80                            
00008D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D80                            
00008D80                            
00008D80                            SlopeObject:
00008D80 43F8 D000                  		lea	(v_player).w,a1
00008D84 4A69 0012                  		tst.w	obVelY(a1)
00008D88 6B00 FFF4                  		bmi.w	Plat_Exit
00008D8C 3029 0008                  		move.w	obX(a1),d0
00008D90 9068 0008                  		sub.w	obX(a0),d0
00008D94 D041                       		add.w	d1,d0
00008D96 6BE6                       		bmi.s	Plat_Exit
00008D98 D241                       		add.w	d1,d1
00008D9A B041                       		cmp.w	d1,d0
00008D9C 64E0                       		bhs.s	Plat_Exit
00008D9E 0828 0000 0001             		btst	#0,obRender(a0)
00008DA4 6700                       		beq.s	loc_754A
00008DA6 4640                       		not.w	d0
00008DA8 D041                       		add.w	d1,d0
00008DAA                            
00008DAA                            loc_754A:
00008DAA E248                       		lsr.w	#1,d0
00008DAC 7600                       		moveq	#0,d3
00008DAE 1632 0000                  		move.b	(a2,d0.w),d3
00008DB2 3028 000C                  		move.w	obY(a0),d0
00008DB6 9043                       		sub.w	d3,d0
00008DB8 6000 FF1A                  		bra.w	Platform3
00008DBC                            ; End of function SlopeObject
00008DBC                            
00008DBC                            
00008DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DBC                            
00008DBC                            
00008DBC                            Swing_Solid:
00008DBC 43F8 D000                  		lea	(v_player).w,a1
00008DC0 4A69 0012                  		tst.w	obVelY(a1)
00008DC4 6B00 FFB8                  		bmi.w	Plat_Exit
00008DC8 3029 0008                  		move.w	obX(a1),d0
00008DCC 9068 0008                  		sub.w	obX(a0),d0
00008DD0 D041                       		add.w	d1,d0
00008DD2 6B00 FFAA                  		bmi.w	Plat_Exit
00008DD6 D241                       		add.w	d1,d1
00008DD8 B041                       		cmp.w	d1,d0
00008DDA 6400 FFA2                  		bhs.w	Plat_Exit
00008DDE 3028 000C                  		move.w	obY(a0),d0
00008DE2 9043                       		sub.w	d3,d0
00008DE4 6000 FEEE                  		bra.w	Platform3
00008DE8                            ; End of function Obj15_Solid
00008DE8                            
00008DE8                            ; ===========================================================================
00008DE8                            
00008DE8                            		include	"_incObj\11 Bridge (part 2).asm"
00008DE8                            
00008DE8                            Bri_Platform:	; Routine 4
00008DE8 6100                       		bsr.s	Bri_WalkOff
00008DEA 6100 0000                  		bsr.w	DisplaySprite
00008DEE 6000 0000                  		bra.w	Bri_ChkDel
00008DF2                            
00008DF2                            ; ---------------------------------------------------------------------------
00008DF2                            ; Subroutine allowing Sonic to walk off a bridge
00008DF2                            ; ---------------------------------------------------------------------------
00008DF2                            
00008DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DF2                            
00008DF2                            
00008DF2                            Bri_WalkOff:
00008DF2 7200                       		moveq	#0,d1
00008DF4 1228 0028                  		move.b	obSubtype(a0),d1
00008DF8 E749                       		lsl.w	#3,d1
00008DFA 3401                       		move.w	d1,d2
00008DFC 5041                       		addq.w	#8,d1
00008DFE 6100                       		bsr.s	ExitPlatform2
00008E00 6400                       		bcc.s	locret_75BE
00008E02 E848                       		lsr.w	#4,d0
00008E04 1140 003F                  		move.b	d0,$3F(a0)
00008E08 1028 003E                  		move.b	$3E(a0),d0
00008E0C 0C00 0040                  		cmpi.b	#$40,d0
00008E10 6700                       		beq.s	loc_75B6
00008E12 5828 003E                  		addq.b	#4,$3E(a0)
00008E16                            
00008E16                            loc_75B6:
00008E16 6100 0000                  		bsr.w	Bri_Bend
00008E1A 6100 0000                  		bsr.w	Bri_MoveSonic
00008E1E                            
00008E1E                            locret_75BE:
00008E1E 4E75                       		rts	
00008E20                            ; End of function Bri_WalkOff
00008E20                            ; End of function Bri_WalkOff
00008E20                            
00008E20                            ; ---------------------------------------------------------------------------
00008E20                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008E20                            ; ---------------------------------------------------------------------------
00008E20                            
00008E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E20                            
00008E20                            
00008E20                            ExitPlatform:
00008E20 3401                       		move.w	d1,d2
00008E22                            
00008E22                            ExitPlatform2:
00008E22 D442                       		add.w	d2,d2
00008E24 43F8 D000                  		lea	(v_player).w,a1
00008E28 0829 0001 0022             		btst	#1,obStatus(a1)
00008E2E 6600                       		bne.s	loc_75E0
00008E30 3029 0008                  		move.w	obX(a1),d0
00008E34 9068 0008                  		sub.w	obX(a0),d0
00008E38 D041                       		add.w	d1,d0
00008E3A 6B00                       		bmi.s	loc_75E0
00008E3C B042                       		cmp.w	d2,d0
00008E3E 6500                       		blo.s	locret_75F2
00008E40                            
00008E40                            loc_75E0:
00008E40 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008E46 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008E4C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008E52                            
00008E52                            locret_75F2:
00008E52 4E75                       		rts	
00008E54                            ; End of function ExitPlatform
00008E54                            
00008E54                            		include	"_incObj\11 Bridge (part 3).asm"
00008E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E54                            
00008E54                            
00008E54                            Bri_MoveSonic:
00008E54 7000                       		moveq	#0,d0
00008E56 1028 003F                  		move.b	$3F(a0),d0
00008E5A 1030 0029                  		move.b	$29(a0,d0.w),d0
00008E5E ED48                       		lsl.w	#6,d0
00008E60 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E66 2440                       		movea.l	d0,a2
00008E68 43F8 D000                  		lea	(v_player).w,a1
00008E6C 302A 000C                  		move.w	obY(a2),d0
00008E70 5140                       		subq.w	#8,d0
00008E72 7200                       		moveq	#0,d1
00008E74 1229 0016                  		move.b	obHeight(a1),d1
00008E78 9041                       		sub.w	d1,d0
00008E7A 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008E7E 4E75                       		rts	
00008E80                            ; End of function Bri_MoveSonic
00008E80                            
00008E80                            
00008E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E80                            
00008E80                            
00008E80                            Bri_Bend:
00008E80 1028 003E                  		move.b	$3E(a0),d0
00008E84 6100 AEA2                  		bsr.w	CalcSine
00008E88 3800                       		move.w	d0,d4
00008E8A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008E90 7000                       		moveq	#0,d0
00008E92 1028 0028                  		move.b	obSubtype(a0),d0
00008E96 E948                       		lsl.w	#4,d0
00008E98 7600                       		moveq	#0,d3
00008E9A 1628 003F                  		move.b	$3F(a0),d3
00008E9E 3403                       		move.w	d3,d2
00008EA0 D640                       		add.w	d0,d3
00008EA2 7A00                       		moveq	#0,d5
00008EA4 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008EAA 1A35 3000                  		move.b	(a5,d3.w),d5
00008EAE 0243 000F                  		andi.w	#$F,d3
00008EB2 E94B                       		lsl.w	#4,d3
00008EB4 47F4 3000                  		lea	(a4,d3.w),a3
00008EB8 45E8 0029                  		lea	$29(a0),a2
00008EBC                            
00008EBC                            loc_765C:
00008EBC 7000                       		moveq	#0,d0
00008EBE 101A                       		move.b	(a2)+,d0
00008EC0 ED48                       		lsl.w	#6,d0
00008EC2 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008EC8 2240                       		movea.l	d0,a1
00008ECA 7000                       		moveq	#0,d0
00008ECC 101B                       		move.b	(a3)+,d0
00008ECE 5240                       		addq.w	#1,d0
00008ED0 C0C5                       		mulu.w	d5,d0
00008ED2 C0C4                       		mulu.w	d4,d0
00008ED4 4840                       		swap	d0
00008ED6 D069 003C                  		add.w	$3C(a1),d0
00008EDA 3340 000C                  		move.w	d0,obY(a1)
00008EDE 51CA FFDC                  		dbf	d2,loc_765C
00008EE2 7000                       		moveq	#0,d0
00008EE4 1028 0028                  		move.b	obSubtype(a0),d0
00008EE8 7600                       		moveq	#0,d3
00008EEA 1628 003F                  		move.b	$3F(a0),d3
00008EEE 5203                       		addq.b	#1,d3
00008EF0 9600                       		sub.b	d0,d3
00008EF2 4403                       		neg.b	d3
00008EF4 6B00                       		bmi.s	locret_76CA
00008EF6 3403                       		move.w	d3,d2
00008EF8 E94B                       		lsl.w	#4,d3
00008EFA 47F4 3000                  		lea	(a4,d3.w),a3
00008EFE D6C2                       		adda.w	d2,a3
00008F00 5342                       		subq.w	#1,d2
00008F02 6500                       		bcs.s	locret_76CA
00008F04                            
00008F04                            loc_76A4:
00008F04 7000                       		moveq	#0,d0
00008F06 101A                       		move.b	(a2)+,d0
00008F08 ED48                       		lsl.w	#6,d0
00008F0A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008F10 2240                       		movea.l	d0,a1
00008F12 7000                       		moveq	#0,d0
00008F14 1023                       		move.b	-(a3),d0
00008F16 5240                       		addq.w	#1,d0
00008F18 C0C5                       		mulu.w	d5,d0
00008F1A C0C4                       		mulu.w	d4,d0
00008F1C 4840                       		swap	d0
00008F1E D069 003C                  		add.w	$3C(a1),d0
00008F22 3340 000C                  		move.w	d0,obY(a1)
00008F26 51CA FFDC                  		dbf	d2,loc_76A4
00008F2A                            
00008F2A                            locret_76CA:
00008F2A 4E75                       		rts	
00008F2C                            ; End of function Bri_Bend
00008F2C                            
00008F2C                            ; ===========================================================================
00008F2C                            ; ---------------------------------------------------------------------------
00008F2C                            ; GHZ bridge-bending data
00008F2C                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008F2C                            ; ---------------------------------------------------------------------------
00008F2C                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
0000903C                            		even
0000903C                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
0000913C                            		even
0000913C                            
0000913C                            ; ===========================================================================
0000913C                            
0000913C                            Bri_ChkDel:
0000915A 4E75                       		rts	
0000915C                            ; ===========================================================================
0000915C                            
0000915C                            @deletebridge:
0000915C 7400                       		moveq	#0,d2
0000915E 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00009162 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009164 5302                       		subq.b	#1,d2		; subtract 1
00009166 6500                       		bcs.s	@delparent
00009168                            
00009168                            	@loop:
00009168 7000                       		moveq	#0,d0
0000916A 101A                       		move.b	(a2)+,d0
0000916C ED48                       		lsl.w	#6,d0
0000916E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009174 2240                       		movea.l	d0,a1
00009176 B048                       		cmp.w	a0,d0
00009178 6700                       		beq.s	@skipdel
0000917A 6100 0000                  		bsr.w	DeleteChild
0000917E                            
0000917E                            	@skipdel:
0000917E 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00009182                            
00009182                            @delparent:
00009182 6100 0000                  		bsr.w	DeleteObject
00009186 4E75                       		rts	
00009188                            ; ===========================================================================
00009188                            
00009188                            Bri_Delete:	; Routine 6, 8
00009188 6100 0000                  		bsr.w	DeleteObject
0000918C 4E75                       		rts	
0000918E                            ; ===========================================================================
0000918E                            
0000918E                            Bri_Display:	; Routine $A
0000918E 6100 0000                  		bsr.w	DisplaySprite
00009192 4E75                       		rts	
00009192 4E75                       		rts	
00009194                            Map_Bri:	include	"_maps\Bridge.asm"
00009194                            ; ---------------------------------------------------------------------------
00009194                            ; Sprite mappings - GHZ	bridge
00009194                            ; ---------------------------------------------------------------------------
00009194                            Map_Bri_internal:
00009194 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009196 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009198 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
0000919A 01                         M_Bri_Log:	dc.b 1
0000919B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
000091A0 02                         M_Bri_Stump:	dc.b 2
000091A1 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
000091A6 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000091AB 01                         M_Bri_Rope:	dc.b 1
000091AC FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
000091B2 00                         		even
000091B2 00                         		even
000091B2                            
000091B2                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
000091B2                            ; ---------------------------------------------------------------------------
000091B2                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000091B2                            ;	    - spiked ball on a chain (SBZ)
000091B2                            ; ---------------------------------------------------------------------------
000091B2                            
000091B2                            SwingingPlatform:
000091B2 7000                       		moveq	#0,d0
000091B4 1028 0024                  		move.b	obRoutine(a0),d0
000091B8 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
000091BC 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
000091C0                            ; ===========================================================================
000091C0 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
000091C4 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
000091C8 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
000091CC 0000                       		dc.w Swing_Action-Swing_Index
000091CE                            
000091CE =0000003A                  swing_origX:	equ $3A		; original x-axis position
000091CE =00000038                  swing_origY:	equ $38		; original y-axis position
000091CE                            ; ===========================================================================
000091CE                            
000091CE                            Swing_Main:	; Routine 0
000091CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000091D2 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
000091DA 317C 4380 0002             		move.w	#$4380,obGfx(a0)
000091E0 117C 0004 0001             		move.b	#4,obRender(a0)
000091E6 317C 0180 0018             		move.w	#$180,obPriority(a0)
000091EC 117C 0018 0014             		move.b	#$18,obActWid(a0)
000091F2 117C 0008 0016             		move.b	#8,obHeight(a0)
000091F8 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000091FE 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
00009204 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000920A 6600                       		bne.s	@notSLZ
0000920C                            
0000920C 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
00009214 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
0000921A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009220 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009226 117C 0099 0020             		move.b	#$99,obColType(a0)
0000922C                            
0000922C                            	@notSLZ:
0000922C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009232 6600                       		bne.s	@length
00009234                            
00009234 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
0000923C 317C 0391 0002             		move.w	#$391,obGfx(a0)
00009242 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009248 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000924E 117C 0086 0020             		move.b	#$86,obColType(a0)
00009254 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
0000925A                            
0000925A                            @length:
0000925A 1810                       		move.b	0(a0),d4
0000925C 7200                       		moveq	#0,d1
0000925E 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
00009262 1212                       		move.b	(a2),d1		; move a2 to d1
00009264 3F01                       		move.w	d1,-(sp)
00009266 0241 000F                  		andi.w	#$F,d1
0000926A 14FC 0000                  		move.b	#0,(a2)+
0000926E 3601                       		move.w	d1,d3
00009270 E94B                       		lsl.w	#4,d3
00009272 5003                       		addq.b	#8,d3
00009274 1143 003C                  		move.b	d3,$3C(a0)
00009278 5103                       		subq.b	#8,d3
0000927A 4A28 001A                  		tst.b	obFrame(a0)
0000927E 6700                       		beq.s	@makechain
00009280 5003                       		addq.b	#8,d3
00009282 5341                       		subq.w	#1,d1
00009284                            
00009284                            @makechain:
00009284 6100 0000                  		bsr.w	FindFreeObj
00009288 6600                       		bne.s	@fail
0000928A 5228 0028                  		addq.b	#1,obSubtype(a0)
0000928E 3A09                       		move.w	a1,d5
00009290 0445 D000                  		subi.w	#$D000,d5
00009294 EC4D                       		lsr.w	#6,d5
00009296 0245 007F                  		andi.w	#$7F,d5
0000929A 14C5                       		move.b	d5,(a2)+
0000929C 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000092A2 1284                       		move.b	d4,0(a1)	; load swinging	object
000092A4 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000092AA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000092B0 08A9 0006 0002             		bclr	#6,obGfx(a1)
000092B6 137C 0004 0001             		move.b	#4,obRender(a1)
000092BC 337C 0200 0018             		move.w	#$200,obPriority(a1)
000092C2 137C 0008 0014             		move.b	#8,obActWid(a1)
000092C8 137C 0001 001A             		move.b	#1,obFrame(a1)
000092CE 1343 003C                  		move.b	d3,$3C(a1)
000092D2 0403 0010                  		subi.b	#$10,d3
000092D6 6400                       		bcc.s	@notanchor
000092D8 137C 0002 001A             		move.b	#2,obFrame(a1)
000092DE 337C 0180 0018             		move.w	#$180,obPriority(a1)
000092E4 08E9 0006 0002             		bset	#6,obGfx(a1)
000092EA                            
000092EA                            	@notanchor:
000092EA 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
000092EE                            
000092EE                            	@fail:
000092EE 3A08                       		move.w	a0,d5
000092F0 0445 D000                  		subi.w	#$D000,d5
000092F4 EC4D                       		lsr.w	#6,d5
000092F6 0245 007F                  		andi.w	#$7F,d5
000092FA 14C5                       		move.b	d5,(a2)+
000092FC 317C 4080 0026             		move.w	#$4080,obAngle(a0)
00009302 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009308 321F                       		move.w	(sp)+,d1
0000930A 0801 0004                  		btst	#4,d1		; is object type $1X ?
0000930E 6700                       		beq.s	@not1X	; if not, branch
00009310 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009318 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
0000931E 117C 0001 001A             		move.b	#1,obFrame(a0)
00009324 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000932A 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
00009330                            
00009330                            	@not1X:
00009330 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009336 6700                       		beq.s	Swing_Action	; if yes, branch
00009338                            
00009338                            Swing_SetSolid:	; Routine 2
00009338 7200                       		moveq	#0,d1
0000933A 1228 0014                  		move.b	obActWid(a0),d1
0000933E 7600                       		moveq	#0,d3
00009340 1628 0016                  		move.b	obHeight(a0),d3
00009344 6100 FA76                  		bsr.w	Swing_Solid
00009348                            
00009348                            Swing_Action:	; Routine $C
00009348 6100 0000                  		bsr.w	Swing_Move
0000934C 6100 0000                  		bsr.w	DisplaySprite
00009350 6000 0000                  		bra.w	Swing_ChkDel
00009354                            ; ===========================================================================
00009354                            
00009354                            Swing_Action2:	; Routine 4
00009354 7200                       		moveq	#0,d1
00009356 1228 0014                  		move.b	obActWid(a0),d1
0000935A 6100 FAC4                  		bsr.w	ExitPlatform
0000935E 3F28 0008                  		move.w	obX(a0),-(sp)
00009362 6100 0000                  		bsr.w	Swing_Move
00009366 341F                       		move.w	(sp)+,d2
00009368 7600                       		moveq	#0,d3
0000936A 1628 0016                  		move.b	obHeight(a0),d3
0000936E 5203                       		addq.b	#1,d3
00009370 6100 0000                  		bsr.w	MvSonicOnPtfm
00009374 6100 0000                  		bsr.w	DisplaySprite
00009378 6000 0000                  		bra.w	Swing_ChkDel
0000937C                            
0000937C 4E75                       		rts
0000937C 4E75                       		rts
0000937E                            
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            ; Subroutine to	change Sonic's position with a platform
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            
0000937E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000937E                            
0000937E                            
0000937E                            MvSonicOnPtfm:
0000937E 43F8 D000                  		lea	(v_player).w,a1
00009382 3028 000C                  		move.w	obY(a0),d0
00009386 9043                       		sub.w	d3,d0
00009388 6000                       		bra.s	MvSonic2
0000938A                            ; End of function MvSonicOnPtfm
0000938A                            
0000938A                            ; ---------------------------------------------------------------------------
0000938A                            ; Subroutine to	change Sonic's position with a platform
0000938A                            ; ---------------------------------------------------------------------------
0000938A                            
0000938A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000938A                            
0000938A                            
0000938A                            MvSonicOnPtfm2:
0000938A 43F8 D000                  		lea	(v_player).w,a1
0000938E 3028 000C                  		move.w	obY(a0),d0
00009392 0440 0009                  		subi.w	#9,d0
00009396                            
00009396                            MvSonic2:
00009396 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000939A 6B00                       		bmi.s	locret_7B62
0000939C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000093A2 6400                       		bhs.s	locret_7B62
000093A4 4A78 FE08                  		tst.w	(v_debuguse).w
000093A8 6600                       		bne.s	locret_7B62
000093AA 7200                       		moveq	#0,d1
000093AC 1229 0016                  		move.b	obHeight(a1),d1
000093B0 9041                       		sub.w	d1,d0
000093B2 3340 000C                  		move.w	d0,obY(a1)
000093B6 9468 0008                  		sub.w	obX(a0),d2
000093BA 9569 0008                  		sub.w	d2,obX(a1)
000093BE                            
000093BE                            locret_7B62:
000093BE 4E75                       		rts	
000093C0                            ; End of function MvSonicOnPtfm2
000093C0                            
000093C0                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
000093C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093C0                            
000093C0                            
000093C0                            Swing_Move:
000093C0 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000093C4 323C 0080                  		move.w	#$80,d1
000093C8 0828 0000 0022             		btst	#0,obStatus(a0)
000093CE 6700                       		beq.s	loc_7B78
000093D0 4440                       		neg.w	d0
000093D2 D041                       		add.w	d1,d0
000093D4                            
000093D4                            loc_7B78:
000093D4 6000                       		bra.s	Swing_Move2
000093D6                            ; End of function Swing_Move
000093D6                            
000093D6                            
000093D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093D6                            
000093D6                            
000093D6                            Obj48_Move:
000093D6 4A28 003D                  		tst.b	$3D(a0)
000093DA 6600                       		bne.s	loc_7B9C
000093DC 3028 003E                  		move.w	$3E(a0),d0
000093E0 5040                       		addq.w	#8,d0
000093E2 3140 003E                  		move.w	d0,$3E(a0)
000093E6 D168 0026                  		add.w	d0,obAngle(a0)
000093EA 0C40 0200                  		cmpi.w	#$200,d0
000093EE 6600                       		bne.s	loc_7BB6
000093F0 117C 0001 003D             		move.b	#1,$3D(a0)
000093F6 6000                       		bra.s	loc_7BB6
000093F8                            ; ===========================================================================
000093F8                            
000093F8                            loc_7B9C:
000093F8 3028 003E                  		move.w	$3E(a0),d0
000093FC 5140                       		subq.w	#8,d0
000093FE 3140 003E                  		move.w	d0,$3E(a0)
00009402 D168 0026                  		add.w	d0,obAngle(a0)
00009406 0C40 FE00                  		cmpi.w	#-$200,d0
0000940A 6600                       		bne.s	loc_7BB6
0000940C 117C 0000 003D             		move.b	#0,$3D(a0)
00009412                            
00009412                            loc_7BB6:
00009412 1028 0026                  		move.b	obAngle(a0),d0
00009416                            ; End of function Obj48_Move
00009416                            
00009416                            
00009416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009416                            
00009416                            
00009416                            Swing_Move2:
00009416 6100 A910                  		bsr.w	CalcSine
0000941A 3428 0038                  		move.w	$38(a0),d2
0000941E 3628 003A                  		move.w	$3A(a0),d3
00009422 45E8 0028                  		lea	obSubtype(a0),a2
00009426 7C00                       		moveq	#0,d6
00009428 1C1A                       		move.b	(a2)+,d6
0000942A                            
0000942A                            loc_7BCE:
0000942A 7800                       		moveq	#0,d4
0000942C 181A                       		move.b	(a2)+,d4
0000942E ED4C                       		lsl.w	#6,d4
00009430 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009436 2244                       		movea.l	d4,a1
00009438 7800                       		moveq	#0,d4
0000943A 1829 003C                  		move.b	$3C(a1),d4
0000943E 2A04                       		move.l	d4,d5
00009440 C9C0                       		muls.w	d0,d4
00009442 E084                       		asr.l	#8,d4
00009444 CBC1                       		muls.w	d1,d5
00009446 E085                       		asr.l	#8,d5
00009448 D842                       		add.w	d2,d4
0000944A DA43                       		add.w	d3,d5
0000944C 3344 000C                  		move.w	d4,obY(a1)
00009450 3345 0008                  		move.w	d5,obX(a1)
00009454 51CE FFD4                  		dbf	d6,loc_7BCE
00009458 4E75                       		rts	
0000945A                            ; End of function Swing_Move2
0000945A                            
0000945A                            ; ===========================================================================
0000945A                            
0000945A                            Swing_ChkDel:
00009478 4E75                       		rts	
0000947A                            ; ===========================================================================
0000947A                            
0000947A                            Swing_DelAll:
0000947A 7400                       		moveq	#0,d2
0000947C 45E8 0028                  		lea	obSubtype(a0),a2
00009480 141A                       		move.b	(a2)+,d2
00009482                            
00009482                            Swing_DelLoop:
00009482 7000                       		moveq	#0,d0
00009484 101A                       		move.b	(a2)+,d0
00009486 ED48                       		lsl.w	#6,d0
00009488 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000948E 2240                       		movea.l	d0,a1
00009490 6100 0000                  		bsr.w	DeleteChild
00009494 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009498 4E75                       		rts	
0000949A                            ; ===========================================================================
0000949A                            
0000949A                            Swing_Delete:	; Routine 6, 8
0000949A 6100 0000                  		bsr.w	DeleteObject
0000949E 4E75                       		rts	
000094A0                            ; ===========================================================================
000094A0                            
000094A0                            Swing_Display:	; Routine $A
000094A0 6000 0000                  		bra.w	DisplaySprite
000094A0 6000 0000                  		bra.w	DisplaySprite
000094A4                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
000094A4                            ; ---------------------------------------------------------------------------
000094A4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000094A4                            ; ---------------------------------------------------------------------------
000094A4                            Map_Swing_GHZ_internal:
000094A4 0000                       		dc.w @block-Map_Swing_GHZ_internal
000094A6 0000                       		dc.w @chain-Map_Swing_GHZ_internal
000094A8 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
000094AA 02                         @block:		dc.b 2
000094AB F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000094B0 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000094B5 01                         @chain:		dc.b 1
000094B6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000094BB 01                         @anchor:	dc.b 1
000094BC F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000094C2 00                         		even
000094C2 00                         		even
000094C2                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000094C2                            ; ---------------------------------------------------------------------------
000094C2                            ; Sprite mappings - SLZ	swinging platforms
000094C2                            ; ---------------------------------------------------------------------------
000094C2                            Map_Swing_SLZ_internal:
000094C2 0000                       		dc.w @block-Map_Swing_SLZ_internal
000094C4 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000094C6 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000094C8 08                         @block:		dc.b 8
000094C9 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000094CE F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000094D3 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000094D8 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000094DD 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000094E2 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000094E7 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000094EC 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000094F1 01                         @chain:		dc.b 1
000094F2 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000094F7 01                         @anchor:	dc.b 1
000094F8 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000094FE 00                         		even
000094FE 00                         		even
000094FE                            		include	"_incObj\17 Spiked Pole Helix.asm"
000094FE                            ; ---------------------------------------------------------------------------
000094FE                            ; Object 17 - helix of spikes on a pole	(GHZ)
000094FE                            ; ---------------------------------------------------------------------------
000094FE                            
000094FE                            Helix:
000094FE 7000                       		moveq	#0,d0
00009500 1028 0024                  		move.b	obRoutine(a0),d0
00009504 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009508 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
0000950C                            ; ===========================================================================
0000950C 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
0000950E 0000                       		dc.w Hel_Action-Hel_Index
00009510 0000                       		dc.w Hel_Action-Hel_Index
00009512 0000                       		dc.w Hel_Delete-Hel_Index
00009514 0000                       		dc.w Hel_Display-Hel_Index
00009516                            
00009516 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00009516                            
00009516                            ;		$29-38 are used for child object addresses
00009516                            ; ===========================================================================
00009516                            
00009516                            Hel_Main:	; Routine 0
00009516 5428 0024                  		addq.b	#2,obRoutine(a0)
0000951A 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
00009522 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009528 117C 0007 0022             		move.b	#7,obStatus(a0)
0000952E 117C 0004 0001             		move.b	#4,obRender(a0)
00009534 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000953A 117C 0008 0014             		move.b	#8,obActWid(a0)
00009540 3428 000C                  		move.w	obY(a0),d2
00009544 3628 0008                  		move.w	obX(a0),d3
00009548 1810                       		move.b	0(a0),d4
0000954A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000954E 7200                       		moveq	#0,d1
00009550 1212                       		move.b	(a2),d1		; move helix length to d1
00009552 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009556 3001                       		move.w	d1,d0
00009558 E248                       		lsr.w	#1,d0
0000955A E948                       		lsl.w	#4,d0
0000955C 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
0000955E 5501                       		subq.b	#2,d1
00009560 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
00009562 7C00                       		moveq	#0,d6
00009564                            
00009564                            Hel_Build:
00009564 6100 0000                  		bsr.w	FindFreeObj
00009568 6600                       		bne.s	Hel_Action
0000956A 5228 0028                  		addq.b	#1,obSubtype(a0)
0000956E 3A09                       		move.w	a1,d5
00009570 0445 D000                  		subi.w	#$D000,d5
00009574 EC4D                       		lsr.w	#6,d5
00009576 0245 007F                  		andi.w	#$7F,d5
0000957A 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
0000957C 137C 0008 0024             		move.b	#8,obRoutine(a1)
00009582 1284                       		move.b	d4,0(a1)
00009584 3342 000C                  		move.w	d2,ObY(a1)
00009588 3343 0008                  		move.w	d3,obX(a1)
0000958C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009592 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009598 137C 0004 0001             		move.b	#4,obRender(a1)
0000959E 337C 0180 0018             		move.w	#$180,obPriority(a1)
000095A4 137C 0008 0014             		move.b	#8,obActWid(a1)
000095AA 1346 003E                  		move.b	d6,hel_frame(a1)
000095AE 5206                       		addq.b	#1,d6
000095B0 0206 0007                  		andi.b	#7,d6
000095B4 0643 0010                  		addi.w	#$10,d3
000095B8 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
000095BC 6600                       		bne.s	Hel_NotCentre	; if not, branch
000095BE                            
000095BE 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000095C2 5206                       		addq.b	#1,d6
000095C4 0206 0007                  		andi.b	#7,d6
000095C8 0643 0010                  		addi.w	#$10,d3		; skip to next spike
000095CC 5228 0028                  		addq.b	#1,obSubtype(a0)
000095D0                            
000095D0                            	Hel_NotCentre:
000095D0 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
000095D4                            
000095D4                            Hel_Action:	; Routine 2, 4
000095D4 6100 0000                  		bsr.w	Hel_RotateSpikes
000095D8 6100 0000                  		bsr.w	DisplaySprite
000095DC 6000 0000                  		bra.w	Hel_ChkDel
000095E0                            
000095E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095E0                            
000095E0                            
000095E0                            Hel_RotateSpikes:
000095E0 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
000095E4 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
000095EA D028 003E                  		add.b	hel_frame(a0),d0
000095EE 0200 0007                  		andi.b	#7,d0
000095F2 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000095F6 6600                       		bne.s	locret_7DA6
000095F8 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000095FE                            
000095FE                            locret_7DA6:
000095FE 4E75                       		rts	
00009600                            ; End of function Hel_RotateSpikes
00009600                            
00009600                            ; ===========================================================================
00009600                            
00009600                            Hel_ChkDel:
0000961E 4E75                       		rts	
00009620                            ; ===========================================================================
00009620                            
00009620                            Hel_DelAll:
00009620 7400                       		moveq	#0,d2
00009622 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009626 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009628 5502                       		subq.b	#2,d2
0000962A 6500                       		bcs.s	Hel_Delete
0000962C                            
0000962C                            	Hel_DelLoop:
0000962C 7000                       		moveq	#0,d0
0000962E 101A                       		move.b	(a2)+,d0
00009630 ED48                       		lsl.w	#6,d0
00009632 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009638 2240                       		movea.l	d0,a1		; get child address
0000963A 6100 0000                  		bsr.w	DeleteChild	; delete object
0000963E 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009642                            
00009642                            Hel_Delete:	; Routine 6
00009642 6100 0000                  		bsr.w	DeleteObject
00009646 4E75                       		rts	
00009648                            ; ===========================================================================
00009648                            
00009648                            Hel_Display:	; Routine 8
00009648 6100 FF96                  		bsr.w	Hel_RotateSpikes
0000964C 6000 0000                  		bra.w	DisplaySprite
0000964C 6000 0000                  		bra.w	DisplaySprite
00009650                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009650                            ; ---------------------------------------------------------------------------
00009650                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009650                            ; ---------------------------------------------------------------------------
00009650                            Map_Hel_internal:
00009650 0000                       		dc.w byte_7E08-Map_Hel_internal
00009652 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009654 0000                       		dc.w byte_7E14-Map_Hel_internal
00009656 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009658 0000                       		dc.w byte_7E20-Map_Hel_internal
0000965A 0000                       		dc.w byte_7E26-Map_Hel_internal
0000965C 0000                       		dc.w byte_7E2E-Map_Hel_internal
0000965E 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009660 01                         byte_7E08:	dc.b 1
00009661 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009666 01                         byte_7E0E:	dc.b 1
00009667 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
0000966C 01                         byte_7E14:	dc.b 1
0000966D F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009672 01                         byte_7E1A:	dc.b 1
00009673 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009678 01                         byte_7E20:	dc.b 1
00009679 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
0000967E 01                         byte_7E26:	dc.b 1
0000967F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009684 01                         byte_7E2C:	dc.b 1
00009685 F4                         		dc.b $F4
00009686                            byte_7E2E:	; reads the 0 below	; not visible
00009686 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
0000968A                            		even
0000968A                            		even
0000968A                            		include	"_incObj\18 Platforms.asm"
0000968A                            ; ---------------------------------------------------------------------------
0000968A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000968A                            ; ---------------------------------------------------------------------------
0000968A                            
0000968A                            BasicPlatform:
0000968A 7000                       		moveq	#0,d0
0000968C 1028 0024                  		move.b	obRoutine(a0),d0
00009690 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009694 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009698                            ; ===========================================================================
00009698 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
0000969A 0000                       		dc.w Plat_Solid-Plat_Index
0000969C 0000                       		dc.w Plat_Action2-Plat_Index
0000969E 0000                       		dc.w Plat_Delete-Plat_Index
000096A0 0000                       		dc.w Plat_Action-Plat_Index
000096A2                            ; ===========================================================================
000096A2                            
000096A2                            Plat_Main:	; Routine 0
000096A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000096A6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000096AC 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
000096B4 117C 0020 0014             		move.b	#$20,obActWid(a0)
000096BA 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
000096C0 6600                       		bne.s	@notSYZ
000096C2                            
000096C2 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
000096CA 117C 0020 0014             		move.b	#$20,obActWid(a0)
000096D0                            
000096D0                            	@notSYZ:
000096D0 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000096D6 6600                       		bne.s	@notSLZ
000096D8 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
000096E0 117C 0020 0014             		move.b	#$20,obActWid(a0)
000096E6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000096EC 117C 0003 0028             		move.b	#3,obSubtype(a0)
000096F2                            
000096F2                            	@notSLZ:
000096F2 117C 0004 0001             		move.b	#4,obRender(a0)
000096F8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000096FE 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009704 3168 000C 0034             		move.w	obY(a0),$34(a0)
0000970A 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009710 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009716 7200                       		moveq	#0,d1
00009718 1028 0028                  		move.b	obSubtype(a0),d0
0000971C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009720 6600                       		bne.s	@setframe	; if not, branch
00009722 5201                       		addq.b	#1,d1		; use frame #1
00009724 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
0000972A                            
0000972A                            	@setframe:
0000972A 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
0000972E                            
0000972E                            Plat_Solid:	; Routine 2
0000972E 4A28 0038                  		tst.b	$38(a0)
00009732 6700                       		beq.s	loc_7EE0
00009734 5928 0038                  		subq.b	#4,$38(a0)
00009738                            
00009738                            	loc_7EE0:
00009738 7200                       		moveq	#0,d1
0000973A 1228 0014                  		move.b	obActWid(a0),d1
0000973E 6100 F56C                  		bsr.w	PlatformObject
00009742                            
00009742                            Plat_Action:	; Routine 8
00009742 6100 0000                  		bsr.w	Plat_Move
00009746 6100 0000                  		bsr.w	Plat_Nudge
0000974A 6100 0000                  		bsr.w	DisplaySprite
0000974E 6000 0000                  		bra.w	Plat_ChkDel
00009752                            ; ===========================================================================
00009752                            
00009752                            Plat_Action2:	; Routine 4
00009752 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009758 6700                       		beq.s	loc_7F06
0000975A 5828 0038                  		addq.b	#4,$38(a0)
0000975E                            
0000975E                            	loc_7F06:
0000975E 7200                       		moveq	#0,d1
00009760 1228 0014                  		move.b	obActWid(a0),d1
00009764 6100 F6BA                  		bsr.w	ExitPlatform
00009768 3F28 0008                  		move.w	obX(a0),-(sp)
0000976C 6100 0000                  		bsr.w	Plat_Move
00009770 6100 0000                  		bsr.w	Plat_Nudge
00009774 341F                       		move.w	(sp)+,d2
00009776 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000977A 6100 0000                  		bsr.w	DisplaySprite
0000977E 6000 0000                  		bra.w	Plat_ChkDel
00009782                            
00009782 4E75                       		rts
00009784                            
00009784                            ; ---------------------------------------------------------------------------
00009784                            ; Subroutine to	move platform slightly when you	stand on it
00009784                            ; ---------------------------------------------------------------------------
00009784                            
00009784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009784                            
00009784                            
00009784                            Plat_Nudge:
00009784 1028 0038                  		move.b	$38(a0),d0
00009788 6100 A59E                  		bsr.w	CalcSine
0000978C 323C 0400                  		move.w	#$400,d1
00009790 C1C1                       		muls.w	d1,d0
00009792 4840                       		swap	d0
00009794 D068 002C                  		add.w	$2C(a0),d0
00009798 3140 000C                  		move.w	d0,obY(a0)
0000979C 4E75                       		rts	
0000979E                            ; End of function Plat_Nudge
0000979E                            
0000979E                            ; ---------------------------------------------------------------------------
0000979E                            ; Subroutine to	move platforms
0000979E                            ; ---------------------------------------------------------------------------
0000979E                            
0000979E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000979E                            
0000979E                            
0000979E                            Plat_Move:
0000979E 7000                       		moveq	#0,d0
000097A0 1028 0028                  		move.b	obSubtype(a0),d0
000097A4 0240 000F                  		andi.w	#$F,d0
000097A8 D040                       		add.w	d0,d0
000097AA 323B 0000                  		move.w	@index(pc,d0.w),d1
000097AE 4EFB 1000                  		jmp	@index(pc,d1.w)
000097B2                            ; End of function Plat_Move
000097B2                            
000097B2                            ; ===========================================================================
000097B2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000097B6 0000 0000                  		dc.w @type02-@index, @type03-@index
000097BA 0000 0000                  		dc.w @type04-@index, @type05-@index
000097BE 0000 0000                  		dc.w @type06-@index, @type07-@index
000097C2 0000 0000                  		dc.w @type08-@index, @type00-@index
000097C6 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000097CA 0000                       		dc.w @type0C-@index
000097CC                            ; ===========================================================================
000097CC                            
000097CC                            @type00:
000097CC 4E75                       		rts			; platform 00 doesn't move
000097CE                            ; ===========================================================================
000097CE                            
000097CE                            @type05:
000097CE 3028 0032                  		move.w	$32(a0),d0
000097D2 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097D6 4401                       		neg.b	d1		; reverse platform-motion
000097D8 0601 0040                  		addi.b	#$40,d1
000097DC 6000                       		bra.s	@type01_move
000097DE                            ; ===========================================================================
000097DE                            
000097DE                            @type01:
000097DE 3028 0032                  		move.w	$32(a0),d0
000097E2 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097E6 0401 0040                  		subi.b	#$40,d1
000097EA                            
000097EA                            	@type01_move:
000097EA 4881                       		ext.w	d1
000097EC D041                       		add.w	d1,d0
000097EE 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
000097F2 6000 0000                  		bra.w	@chgmotion
000097F6                            ; ===========================================================================
000097F6                            
000097F6                            @type0C:
000097F6 3028 0034                  		move.w	$34(a0),d0
000097FA 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
000097FE 4401                       		neg.b	d1		; reverse platform-motion
00009800 0601 0030                  		addi.b	#$30,d1
00009804 6000                       		bra.s	@type02_move
00009806                            ; ===========================================================================
00009806                            
00009806                            @type0B:
00009806 3028 0034                  		move.w	$34(a0),d0
0000980A 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000980E 0401 0030                  		subi.b	#$30,d1
00009812 6000                       		bra.s	@type02_move
00009814                            ; ===========================================================================
00009814                            
00009814                            @type06:
00009814 3028 0034                  		move.w	$34(a0),d0
00009818 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000981C 4401                       		neg.b	d1		; reverse platform-motion
0000981E 0601 0040                  		addi.b	#$40,d1
00009822 6000                       		bra.s	@type02_move
00009824                            ; ===========================================================================
00009824                            
00009824                            @type02:
00009824 3028 0034                  		move.w	$34(a0),d0
00009828 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000982C 0401 0040                  		subi.b	#$40,d1
00009830                            
00009830                            	@type02_move:
00009830 4881                       		ext.w	d1
00009832 D041                       		add.w	d1,d0
00009834 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009838 6000 0000                  		bra.w	@chgmotion
0000983C                            ; ===========================================================================
0000983C                            
0000983C                            @type03:
0000983C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009840 6600                       		bne.s	@type03_wait	; if yes, branch
00009842 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009848 6700                       		beq.s	@type03_nomove	; if not, branch
0000984A 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009850                            
00009850                            	@type03_nomove:
00009850 4E75                       		rts	
00009852                            
00009852                            	@type03_wait:
00009852 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009856 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009858 317C 0020 003A             		move.w	#32,$3A(a0)
0000985E 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009862 4E75                       		rts	
00009864                            ; ===========================================================================
00009864                            
00009864                            @type04:
00009864 4A68 003A                  		tst.w	$3A(a0)
00009868 6700                       		beq.s	@loc_8048
0000986A 5368 003A                  		subq.w	#1,$3A(a0)
0000986E 6600                       		bne.s	@loc_8048
00009870 0828 0003 0022             		btst	#3,obStatus(a0)
00009876 6700                       		beq.s	@loc_8042
00009878 08E9 0001 0022             		bset	#1,obStatus(a1)
0000987E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009884 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000988A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009890 4228 0025                  		clr.b	$25(a0)
00009894 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
0000989A                            
0000989A                            	@loc_8042:
0000989A 117C 0008 0024             		move.b	#8,obRoutine(a0)
000098A0                            
000098A0                            	@loc_8048:
000098A0 2628 002C                  		move.l	$2C(a0),d3
000098A4 3028 0012                  		move.w	obVelY(a0),d0
000098A8 48C0                       		ext.l	d0
000098AA E180                       		asl.l	#8,d0
000098AC D680                       		add.l	d0,d3
000098AE 2143 002C                  		move.l	d3,$2C(a0)
000098B2 0668 0038 0012             		addi.w	#$38,obVelY(a0)
000098B8 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000098BC 0640 00E0                  		addi.w	#$E0,d0
000098C0 B068 002C                  		cmp.w	$2C(a0),d0
000098C4 6400                       		bcc.s	@locret_8074
000098C6 117C 0006 0024             		move.b	#6,obRoutine(a0)
000098CC                            
000098CC                            	@locret_8074:
000098CC 4E75                       		rts	
000098CE                            ; ===========================================================================
000098CE                            
000098CE                            @type07:
000098CE 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000098D2 6600                       		bne.s	@type07_wait	; if yes, branch
000098D4 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
000098D8 7000                       		moveq	#0,d0
000098DA 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
000098DE E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000098E0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000098E4 6700                       		beq.s	@type07_nomove	; if not, branch
000098E6 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000098EC                            
000098EC                            	@type07_nomove:
000098EC 4E75                       		rts	
000098EE                            
000098EE                            	@type07_wait:
000098EE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000098F2 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
000098F4 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
000098F8 4E75                       		rts	
000098FA                            ; ===========================================================================
000098FA                            
000098FA                            @type08:
000098FA 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000098FE 3028 0034                  		move.w	$34(a0),d0
00009902 0440 0200                  		subi.w	#$200,d0
00009906 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000990A 6600                       		bne.s	@type08_nostop	; if not, branch
0000990C 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009910                            
00009910                            	@type08_nostop:
00009910 4E75                       		rts	
00009912                            ; ===========================================================================
00009912                            
00009912                            @type0A:
00009912 3028 0034                  		move.w	$34(a0),d0
00009916 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000991A 0401 0040                  		subi.b	#$40,d1
0000991E 4881                       		ext.w	d1
00009920 E241                       		asr.w	#1,d1
00009922 D041                       		add.w	d1,d0
00009924 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009928                            
00009928                            @chgmotion:
00009928 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
0000992E 4E75                       		rts	
00009930                            ; ===========================================================================
00009930                            
00009930                            Plat_ChkDel:
0000994C 4E75                       		rts	
0000994E                            ; ===========================================================================
0000994E                            
0000994E                            Plat_Delete:	; Routine 6
0000994E 6000 0000                  		bra.w	DeleteObject
0000994E 6000 0000                  		bra.w	DeleteObject
00009952                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009952                            ; ---------------------------------------------------------------------------
00009952                            ; Sprite mappings - unused
00009952                            ; ---------------------------------------------------------------------------
00009952                            Map_Plat_Unused_internal:
00009952 0000                       		dc.w @small-Map_Plat_Unused_internal
00009954 0000                       		dc.w @large-Map_Plat_Unused_internal
00009956 02                         @small:		dc.b 2
00009957 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000995C F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009961 0A                         @large:		dc.b $A
00009962 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009967 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000996C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009971 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009976 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000997B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009980 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009985 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000998A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000998F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009994                            		even
00009994                            		even
00009994                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009994                            ; ---------------------------------------------------------------------------
00009994                            ; Sprite mappings - GHZ	platforms
00009994                            ; ---------------------------------------------------------------------------
00009994                            Map_Plat_GHZ_internal:
00009994 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009996 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009998 04                         @small:		dc.b 4
00009999 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000999E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000099A3 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000099A8 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000099AD 0A                         @large:		dc.b $A
000099AE F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000099B3 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000099B8 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000099BD 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000099C2 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000099C7 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000099CC 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000099D1 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000099D6 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000099DB 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000099E0                            		even
000099E0                            		even
000099E0                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
000099E0                            ; ---------------------------------------------------------------------------
000099E0                            ; Sprite mappings - SYZ	platforms
000099E0                            ; ---------------------------------------------------------------------------
000099E0                            Map_Plat_SYZ_internal:
000099E0 0000                       		dc.w @platform-Map_Plat_SYZ_internal
000099E2 03                         @platform:	dc.b 3
000099E3 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000099E8 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000099ED F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000099F2                            		even
000099F2                            		even
000099F2                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
000099F2                            ; ---------------------------------------------------------------------------
000099F2                            ; Sprite mappings - SLZ	platforms
000099F2                            ; ---------------------------------------------------------------------------
000099F2                            Map_Plat_SLZ_internal:
000099F2 0000                       		dc.w @platform-Map_Plat_SLZ_internal
000099F4 02                         @platform:	dc.b 2
000099F5 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000099FA F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009A00 00                         		even
00009A00 00                         		even
00009A00                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009A00                            ; ---------------------------------------------------------------------------
00009A00                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009A00                            ; ---------------------------------------------------------------------------
00009A00                            Map_GBall_internal:
00009A00 0000                       		dc.w @shiny-Map_GBall_internal
00009A02 0000                       		dc.w @check1-Map_GBall_internal
00009A04 0000                       		dc.w @check2-Map_GBall_internal
00009A06 0000                       		dc.w @check3-Map_GBall_internal
00009A08 06                         @shiny:		dc.b 6
00009A09 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009A0E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009A13 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009A18 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009A1D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009A22 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009A27 04                         @check1:	dc.b 4
00009A28 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009A2D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009A32 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009A37 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009A3C 04                         @check2:	dc.b 4
00009A3D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009A42 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009A47 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009A4C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009A51 04                         @check3:	dc.b 4
00009A52 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009A57 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009A5C 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009A61 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009A66                            		even
00009A66                            		even
00009A66                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009A66                            ; ---------------------------------------------------------------------------
00009A66                            ; Object 1A - GHZ collapsing ledge
00009A66                            ; ---------------------------------------------------------------------------
00009A66                            
00009A66                            CollapseLedge:
00009A66 7000                       		moveq	#0,d0
00009A68 1028 0024                  		move.b	obRoutine(a0),d0
00009A6C 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009A70 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009A74                            ; ===========================================================================
00009A74 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009A78 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009A7C 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009A80                            
00009A80 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009A80 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009A80                            ; ===========================================================================
00009A80                            
00009A80                            Ledge_Main:	; Routine 0
00009A80 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A84 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009A8C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A92 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A98 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A9E 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009AA4 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009AAA 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009AB0 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009AB6 08E8 0004 0001             		bset	#4,obRender(a0)
00009ABC                            
00009ABC                            Ledge_Touch:	; Routine 2
00009ABC 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009AC0 6700                       		beq.s	@slope		; if not, branch
00009AC2 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009AC6 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009ACA 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009ACE                            
00009ACE                            	@slope:
00009ACE 323C 0030                  		move.w	#$30,d1
00009AD2 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009AD8 6100 F2A6                  		bsr.w	SlopeObject
00009ADC 6000 0000                  		bra.w	RememberState
00009AE0                            ; ===========================================================================
00009AE0                            
00009AE0                            Ledge_Collapse:	; Routine 4
00009AE0 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009AE4 6700 0000                  		beq.w	loc_847A
00009AE8 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009AEE 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009AF2                            
00009AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AF2                            
00009AF2                            
00009AF2                            Ledge_WalkOff:	; Routine $A
00009AF2 323C 0030                  		move.w	#$30,d1
00009AF6 6100 F328                  		bsr.w	ExitPlatform
00009AFA 323C 0030                  		move.w	#$30,d1
00009AFE 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009B04 3428 0008                  		move.w	obX(a0),d2
00009B08 6100 0000                  		bsr.w	SlopeObject2
00009B0C 6000 0000                  		bra.w	RememberState
00009B10                            ; End of function Ledge_WalkOff
00009B10                            
00009B10                            ; ===========================================================================
00009B10                            
00009B10                            Ledge_Display:	; Routine 6
00009B10 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009B14 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009B16 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009B1A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009B1E 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009B22 6000 0000                  		bra.w	DisplaySprite
00009B26                            ; ===========================================================================
00009B26                            
00009B26                            loc_82D0:
00009B26 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009B2A 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009B2E 43F8 D000                  		lea	(v_player).w,a1
00009B32 0829 0003 0022             		btst	#3,obStatus(a1)
00009B38 6700                       		beq.s	loc_82FC
00009B3A 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009B3E 6600                       		bne.s	locret_8308
00009B40 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009B46 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009B4C 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009B52                            
00009B52                            loc_82FC:
00009B52 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009B58 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009B5E                            
00009B5E                            locret_8308:
00009B5E 4E75                       		rts	
00009B60                            ; ===========================================================================
00009B60                            
00009B60                            Ledge_TimeZero:
00009B60 6100 0000                  		bsr.w	ObjectFall
00009B64 6100 0000                  		bsr.w	DisplaySprite
00009B68 4A28 0001                  		tst.b	obRender(a0)
00009B6C 6A00                       		bpl.s	Ledge_Delete
00009B6E 4E75                       		rts	
00009B70                            ; ===========================================================================
00009B70                            
00009B70                            Ledge_Delete:	; Routine 8
00009B70 6100 0000                  		bsr.w	DeleteObject
00009B74 4E75                       		rts	
00009B74 4E75                       		rts	
00009B76                            		include	"_incObj\53 Collapsing Floors.asm"
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            
00009B76                            CollapseFloor:
00009B76 7000                       		moveq	#0,d0
00009B78 1028 0024                  		move.b	obRoutine(a0),d0
00009B7C 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009B80 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009B84                            ; ===========================================================================
00009B84 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009B88 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009B8C 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009B90                            
00009B90 =00000038                  cflo_timedelay:		equ $38
00009B90 =0000003A                  cflo_collapse_flag:	equ $3A
00009B90                            ; ===========================================================================
00009B90                            
00009B90                            CFlo_Main:	; Routine 0
00009B90 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B94 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009B9C 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009BA2 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009BA8 6600                       		bne.s	@notSLZ
00009BAA                            
00009BAA 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009BB0 5428 001A                  		addq.b	#2,obFrame(a0)
00009BB4                            
00009BB4                            	@notSLZ:
00009BB4 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009BBA 6600                       		bne.s	@notSBZ
00009BBC 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009BC2                            
00009BC2                            	@notSBZ:
00009BC2 0028 0004 0001             		ori.b	#4,obRender(a0)
00009BC8 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009BCE 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009BD4 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009BDA                            
00009BDA                            CFlo_Touch:	; Routine 2
00009BDA 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009BDE 6700                       		beq.s	@solid		; if not, branch
00009BE0 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009BE4 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009BE8 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009BEC                            
00009BEC                            	@solid:
00009BEC 323C 0020                  		move.w	#$20,d1
00009BF0 6100 F0BA                  		bsr.w	PlatformObject
00009BF4 4A28 0028                  		tst.b	obSubtype(a0)
00009BF8 6A00                       		bpl.s	@remstate
00009BFA 0829 0003 0022             		btst	#3,obStatus(a1)
00009C00 6700                       		beq.s	@remstate
00009C02 08A8 0000 0001             		bclr	#0,obRender(a0)
00009C08 3029 0008                  		move.w	obX(a1),d0
00009C0C 9068 0008                  		sub.w	obX(a0),d0
00009C10 6400                       		bcc.s	@remstate
00009C12 08E8 0000 0001             		bset	#0,obRender(a0)
00009C18                            
00009C18                            	@remstate:
00009C18 6000 0000                  		bra.w	RememberState
00009C1C                            ; ===========================================================================
00009C1C                            
00009C1C                            CFlo_Collapse:	; Routine 4
00009C1C 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009C20 6700 0000                  		beq.w	loc_8458
00009C24 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009C2A 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009C2E                            
00009C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C2E                            
00009C2E                            
00009C2E                            CFlo_WalkOff:	; Routine $A
00009C2E 323C 0020                  		move.w	#$20,d1
00009C32 6100 F1EC                  		bsr.w	ExitPlatform
00009C36 3428 0008                  		move.w	obX(a0),d2
00009C3A 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009C3E 6000 0000                  		bra.w	RememberState
00009C42                            ; End of function CFlo_WalkOff
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            CFlo_Display:	; Routine 6
00009C42 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009C46 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009C48 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009C4C 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009C50 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009C54 6000 0000                  		bra.w	DisplaySprite
00009C58                            ; ===========================================================================
00009C58                            
00009C58                            loc_8402:
00009C58 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009C5C 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009C60 43F8 D000                  		lea	(v_player).w,a1
00009C64 0829 0003 0022             		btst	#3,obStatus(a1)
00009C6A 6700                       		beq.s	loc_842E
00009C6C 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009C70 6600                       		bne.s	locret_843A
00009C72 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C78 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009C7E 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009C84                            
00009C84                            loc_842E:
00009C84 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C8A 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009C90                            
00009C90                            locret_843A:
00009C90 4E75                       		rts	
00009C92                            ; ===========================================================================
00009C92                            
00009C92                            CFlo_TimeZero:
00009C92 6100 0000                  		bsr.w	ObjectFall
00009C96 6100 0000                  		bsr.w	DisplaySprite
00009C9A 4A28 0001                  		tst.b	obRender(a0)
00009C9E 6A00                       		bpl.s	CFlo_Delete
00009CA0 4E75                       		rts	
00009CA2                            ; ===========================================================================
00009CA2                            
00009CA2                            CFlo_Delete:	; Routine 8
00009CA2 6100 0000                  		bsr.w	DeleteObject
00009CA6 4E75                       		rts	
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            CFlo_Fragment:
00009CA8 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009CAE                            
00009CAE                            loc_8458:
00009CAE 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009CB4 0828 0000 0028             		btst	#0,obSubtype(a0)
00009CBA 6700                       		beq.s	loc_846C
00009CBC 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009CC2                            
00009CC2                            loc_846C:
00009CC2 7207                       		moveq	#7,d1
00009CC4 5228 001A                  		addq.b	#1,obFrame(a0)
00009CC8 6000                       		bra.s	loc_8486
00009CC8 6000                       		bra.s	loc_8486
00009CCA                            
00009CCA                            ; ===========================================================================
00009CCA                            
00009CCA                            Ledge_Fragment:
00009CCA 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009CD0                            
00009CD0                            loc_847A:
00009CD0 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009CD6 7218                       		moveq	#$18,d1
00009CD8 5428 001A                  		addq.b	#2,obFrame(a0)
00009CDC                            
00009CDC                            loc_8486:
00009CDC 7000                       		moveq	#0,d0
00009CDE 1028 001A                  		move.b	obFrame(a0),d0
00009CE2 D040                       		add.w	d0,d0
00009CE4 2668 0004                  		movea.l	obMap(a0),a3
00009CE8 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009CEC 524B                       		addq.w	#1,a3
00009CEE 08E8 0005 0001             		bset	#5,obRender(a0)
00009CF4 1810                       		move.b	0(a0),d4
00009CF6 1A28 0001                  		move.b	obRender(a0),d5
00009CFA 2248                       		movea.l	a0,a1
00009CFC 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009D02 1284                       		move.b	d4,0(a1)
00009D04 234B 0004                  		move.l	a3,obMap(a1)
00009D08 1345 0001                  		move.b	d5,obRender(a1)
00009D0C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009D12 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009D18 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009D1E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009D24 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009D2A 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009D2E 5341                       		subq.w	#1,d1
00009D30 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009D34 303C 005F                  		move.w	#$5F,d0
00009D38                            ; ===========================================================================
00009D38                            
00009D38                            loc_84AA:
00009D38 4A11                       		tst.b	(a1)
00009D3A 6700                       		beq.s	@cont		
00009D3C 43E9 0040                  		lea		$40(a1),a1
00009D40 51C8 FFF6                  		dbf		d0,loc_84AA	
00009D44 6600                       		bne.s	loc_84F2	
00009D46                            	@cont:
00009D46 5A4B                       		addq.w	#5,a3
00009D48                            
00009D48                            loc_84B2:
00009D48 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009D4E 1284                       		move.b	d4,0(a1)
00009D50 234B 0004                  		move.l	a3,obMap(a1)
00009D54 1345 0001                  		move.b	d5,obRender(a1)
00009D58 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009D5E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009D64 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009D6A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009D70 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009D76 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009D7A 6100 0000                  		bsr.w	DisplaySprite1
00009D7E                            
00009D7E                            loc_84EE:
00009D7E 51C9 FFB8                  		dbf	d1,loc_84AA
00009D82                            
00009D82                            loc_84F2:
00009D82 6100 0000                  		bsr.w	DisplaySprite
00009D90                            ; ===========================================================================
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009D90                            ; ---------------------------------------------------------------------------
00009D90 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009DA0 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009DAA 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009DB2 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009DBA                            
00009DBA                            ; ---------------------------------------------------------------------------
00009DBA                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009DBA                            ; ---------------------------------------------------------------------------
00009DBA                            
00009DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DBA                            
00009DBA                            
00009DBA                            SlopeObject2:
00009DBA 43F8 D000                  		lea	(v_player).w,a1
00009DBE 0829 0003 0022             		btst	#3,obStatus(a1)
00009DC4 6700                       		beq.s	locret_856E
00009DC6 3029 0008                  		move.w	obX(a1),d0
00009DCA 9068 0008                  		sub.w	obX(a0),d0
00009DCE D041                       		add.w	d1,d0
00009DD0 E248                       		lsr.w	#1,d0
00009DD2 0828 0000 0001             		btst	#0,obRender(a0)
00009DD8 6700                       		beq.s	loc_854E
00009DDA 4640                       		not.w	d0
00009DDC D041                       		add.w	d1,d0
00009DDE                            
00009DDE                            loc_854E:
00009DDE 7200                       		moveq	#0,d1
00009DE0 1232 0000                  		move.b	(a2,d0.w),d1
00009DE4 3028 000C                  		move.w	obY(a0),d0
00009DE8 9041                       		sub.w	d1,d0
00009DEA 7200                       		moveq	#0,d1
00009DEC 1229 0016                  		move.b	obHeight(a1),d1
00009DF0 9041                       		sub.w	d1,d0
00009DF2 3340 000C                  		move.w	d0,obY(a1)
00009DF6 9468 0008                  		sub.w	obX(a0),d2
00009DFA 9569 0008                  		sub.w	d2,obX(a1)
00009DFE                            
00009DFE                            locret_856E:
00009DFE 4E75                       		rts	
00009E00                            ; End of function SlopeObject2
00009E00                            
00009E00                            ; ===========================================================================
00009E00                            ; ---------------------------------------------------------------------------
00009E00                            ; Collision data for GHZ collapsing ledge
00009E00                            ; ---------------------------------------------------------------------------
00009E00                            Ledge_SlopeData:
00009E00                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009E30                            		even
00009E30                            
00009E30                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009E30                            ; ---------------------------------------------------------------------------
00009E30                            ; Sprite mappings - GHZ	collapsing ledge
00009E30                            ; ---------------------------------------------------------------------------
00009E30                            Map_Ledge_internal:
00009E30 0000                       		dc.w @left-Map_Ledge_internal
00009E32 0000                       		dc.w @right-Map_Ledge_internal
00009E34 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009E36 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009E38 10                         @left:		dc.b $10
00009E39 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009E3E D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E43 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E48 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E4D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E52 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009E57 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009E5C F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009E61 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E66 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009E6B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009E70 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E75 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009E7A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009E7F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009E84 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E89 10                         @right:		dc.b $10
00009E8A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009E8F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E94 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E99 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E9E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009EA3 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009EA8 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009EAD F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009EB2 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009EB7 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009EBC 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009EC1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009EC6 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009ECB 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009ED0 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009ED5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009EDA 19                         @leftsmash:	dc.b $19
00009EDB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009EE0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009EE5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009EEA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009EEF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009EF4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009EF9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009EFE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009F03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009F08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009F0D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009F12 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009F17 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009F1C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009F21 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009F26 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009F2B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009F30 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009F35 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009F3A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009F3F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009F44 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009F49 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009F4E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009F53 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009F58 19                         @rightsmash:	dc.b $19
00009F59 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009F5E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009F63 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009F68 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009F6D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009F72 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009F77 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009F7C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009F81 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009F86 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009F8B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009F90 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009F95 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009F9A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009F9F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009FA4 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009FA9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009FAE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009FB3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009FB8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009FBD 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009FC2 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009FC7 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009FCC 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009FD1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009FD6                            		even
00009FD6                            		even
00009FD6                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009FD6                            ; --------------------------------------------------------------------------------
00009FD6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009FD6                            ; --------------------------------------------------------------------------------
00009FD6                            
00009FD6                            SME_WNa9T:	
00009FD6 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009FDA 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009FDE 08                         SME_WNa9T_8:	dc.b 8	
00009FDF F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009FE4 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009FE9 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009FEE 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009FF3 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009FF8 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009FFD F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A002 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A007 08                         SME_WNa9T_31:	dc.b 8	
0000A008 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A00D 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
0000A012 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000A017 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
0000A01C F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A021 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A026 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A02B 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A030 04                         SME_WNa9T_5A:	dc.b 4	
0000A031 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0000A036 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
0000A03B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
0000A040 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
0000A045 08                         SME_WNa9T_6F:	dc.b 8	
0000A046 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A04B F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
0000A050 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A055 F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
0000A05A 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
0000A05F 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
0000A064 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
0000A069 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
0000A06E                            		even
0000A06E                            		even
0000A06E                            
0000A06E                            		include	"_incObj\1C Scenery.asm"
0000A06E                            ; ---------------------------------------------------------------------------
0000A06E                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A06E                            ; ---------------------------------------------------------------------------
0000A06E                            
0000A06E                            Scenery:
0000A06E 7000                       		moveq	#0,d0
0000A070 1028 0024                  		move.b	obRoutine(a0),d0
0000A074 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A078 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A07C                            ; ===========================================================================
0000A07C 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A07E 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A080                            ; ===========================================================================
0000A080                            
0000A080                            Scen_Main:	; Routine 0
0000A080 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A084 7000                       		moveq	#0,d0
0000A086 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A08A C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A08E 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A092 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A096 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A09A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A0A0 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A0A4 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A0A8 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A0AC 3028 0018                  		move.w obPriority(a0),d0 
0000A0B0 E248                       		lsr.w #1,d0 
0000A0B2 0240 0380                  		andi.w #$380,d0 
0000A0B6 3140 0018                  		move.w d0,obPriority(a0)		
0000A0BA 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A0BE                            
0000A0BE                            Scen_ChkDel:	; Routine 2
0000A0DC 6000 0000                  		bra.w	DisplaySprite
0000A0E0                            ; ===========================================================================
0000A0E0                            ; ---------------------------------------------------------------------------
0000A0E0                            ; Variables for	object $1C are stored in an array
0000A0E0                            ; ---------------------------------------------------------------------------
0000A0E0 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A0E4 44D8                       		dc.w $44D8		; VRAM setting
0000A0E6 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A0EA 0000 0000                  		dc.l Map_Scen
0000A0EE 44D8                       		dc.w $44D8
0000A0F0 0008 0200                  		dc.b 0,	8, 2, 0
0000A0F4 0000 0000                  		dc.l Map_Scen
0000A0F8 44D8                       		dc.w $44D8
0000A0FA 0008 0200                  		dc.b 0,	8, 2, 0
0000A0FE 0000 9194                  		dc.l Map_Bri
0000A102 438E                       		dc.w $438E
0000A104 0110 0100                  		dc.b 1,	$10, 1,	0
0000A108                            		even
0000A108                            		even
0000A108                            Map_Scen:	include	"_maps\Scenery.asm"
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            ; Sprite mappings - SLZ	lava thrower
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            Map_Scen_internal:
0000A108 0000                       		dc.w byte_8858-Map_Scen_internal
0000A10A 01                         byte_8858:	dc.b 1
0000A10B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A110                            		even
0000A110                            		even
0000A110                            
0000A110                            		include	"_incObj\1D Water Switcher.asm"
0000A110                            ; ----------------------------------------------------------------------------
0000A110                            ; Object 1D - Water Switcher
0000A110                            ; ----------------------------------------------------------------------------
0000A110                            ; Sprite_1FCDC:
0000A110                            WaterSwitcher:
0000A110 7000                       		moveq	#0,d0
0000A112 1028 0024                  		move.b	obRoutine(a0),d0
0000A116 323B 0000                  		move.w	PSwapper_Index(pc,d0.w),d1
0000A11A 4EFB 1000                  		jmp	PSwapper_Index(pc,d1.w) ;TIS Don't Delete if out of range
0000A11E                            	;if DebugPathSwappers
0000A11E                            		;tst.w	(f_debugcheat).w
0000A11E                            		;bne.w	RememberState
0000A11E                            	;endif
0000A11E                            		; like RememberState, but doesn't display (Sonic 2's MarkObjGone3)
0000A11E                            		;out_of_range	@offscreen
0000A11E                            		;rts
0000A11E                            
0000A11E                            	;@offscreen:
0000A11E                            		;lea	(v_objstate).w,a2
0000A11E                            		;moveq	#0,d0
0000A11E                            		;move.b	obRespawnNo(a0),d0
0000A11E                            		;beq.s	@delete
0000A11E                            		;bclr	#7,2(a2,d0.w)
0000A11E                            
0000A11E                            	;@delete:
0000A11E                            		;bra.w	DeleteObject
0000A11E                            ; ===========================================================================
0000A11E                            ; off_1FCF0:
0000A11E                            PSwapper_Index:
0000A11E 0000                       		dc.w PSwapper_Init-PSwapper_Index	; 0
0000A120 0000                       		dc.w PSwapper_MainX-PSwapper_Index	; 2
0000A122 0000                       		dc.w PSwapper_MainY-PSwapper_Index	; 4
0000A124                            ; ===========================================================================
0000A124                            ; loc_1FCF6:
0000A124                            PSwapper_Init:
0000A124 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainX
0000A128 217C 0000 0000 0004        		move.l	#Map_WaterSwitcher,obMap(a0)
0000A130 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000A136 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A13C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A142 117C 0005 0018             		move.b	#5,obPriority(a0)
0000A148 1028 0028                  		move.b	obSubtype(a0),d0
0000A14C 0800 0002                  		btst	#2,d0
0000A150 6700                       		beq.s	PSwapper_Init_CheckX
0000A152                            ;PSwapper_Init_CheckY:
0000A152 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainY
0000A156 0240 0007                  		andi.w	#7,d0
0000A15A 1140 001A                  		move.b	d0,obFrame(a0)
0000A15E 0240 0003                  		andi.w	#3,d0
0000A162 D040                       		add.w	d0,d0
0000A164 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A16A 3228 000C                  		move.w	obY(a0),d1
0000A16E 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A172 B269 000C                  		cmp.w	obY(a1),d1
0000A176 6400 0000                  		bhs.w	PSwapper_MainY
0000A17A 117C 0001 0034             		move.b	#1,$34(a0)
0000A180 6000 0000                  		bra.w	PSwapper_MainY
0000A184                            ; ===========================================================================
0000A184                            word_1FD68:
0000A184 0020                       	dc.w   $20
0000A186 0040                       	dc.w   $40	; 1
0000A188 0080                       	dc.w   $80	; 2
0000A18A 0100                       	dc.w  $100	; 3
0000A18C                            ; ===========================================================================
0000A18C                            ; loc_1FD70:
0000A18C                            PSwapper_Init_CheckX:
0000A18C 0240 0003                  		andi.w	#3,d0
0000A190 1140 001A                  		move.b	d0,obFrame(a0)
0000A194 D040                       		add.w	d0,d0
0000A196 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A19C 3228 0008                  		move.w	obX(a0),d1
0000A1A0 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A1A4 B269 0008                  		cmp.w	obX(a1),d1
0000A1A8 6400                       		bhs.s	@jump
0000A1AA 117C 0001 0034             		move.b	#1,$34(a0)
0000A1B0                            @jump:
0000A1B0                            
0000A1B0                            ; loc_1FDA4:
0000A1B0                            PSwapper_MainX:
0000A1B0 4A78 FE08                  		tst.w	(v_debuguse).w
0000A1B4 6600 0000                  		bne.w	@locret
0000A1B8 3228 0008                  		move.w	obX(a0),d1
0000A1BC 45E8 0034                  		lea	$34(a0),a2
0000A1C0 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A1C4 4A1A                       		tst.b	(a2)+
0000A1C6 6600 0000                  		bne.w	PSwapper_MainX_Alt
0000A1CA B269 0008                  		cmp.w	obX(a1),d1
0000A1CE 6200 0000                  		bhi.w	@locret	;TIS
0000A1D2 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A1D8 3428 000C                  		move.w	obY(a0),d2
0000A1DC 3602                       		move.w	d2,d3
0000A1DE 3828 0032                  		move.w	$32(a0),d4
0000A1E2 9444                       		sub.w	d4,d2
0000A1E4 D644                       		add.w	d4,d3
0000A1E6 3829 000C                  		move.w	obY(a1),d4
0000A1EA B842                       		cmp.w	d2,d4
0000A1EC 6D00                       		blt.s	@locret
0000A1EE B843                       		cmp.w	d3,d4
0000A1F0 6C00                       		bge.s	@locret
0000A1F2 1028 0028                  		move.b	obSubtype(a0),d0
0000A1F6 6A00                       		bpl.s	@jump
0000A1F8 0829 0001 0022             		btst	#1,obStatus(a1)
0000A1FE 6600                       		bne.s	@locret
0000A200                            @jump:
0000A200 0828 0000 0001             		btst	#0,obRender(a0)
0000A206 6600                       		bne.s	@jump2
0000A208 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A20E                            
0000A20E                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A20E                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A20E                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A20E                            		;jsr	Palload_Loop
0000A20E                            
0000A20E                            
0000A20E 0800 0003                  		btst	#3,d0
0000A212 6700                       		beq.s	@jump2
0000A214                            		
0000A214                            
0000A214 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A21A                            
0000A21A                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A21A                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A21A                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A21A                            		;jsr	Palload_Loop
0000A21A                            
0000A21A                            @jump2:
0000A21A 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A220 0800 0005                  		btst	#5,d0
0000A224 6700                       		beq.s	@jump3
0000A226 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A22C                            @jump3:
0000A22C                            	;if DebugPathSwappers
0000A22C                            		;tst.b	(f_debugcheat).w
0000A22C                            		;beq.s	@locret
0000A22C                            		;sfx	sfx_Lamppost,1,0,1
0000A22C                            	;endif
0000A22C                            @locret:
0000A22C 4E75                       		rts
0000A22E                            ; ===========================================================================
0000A22E                            ; loc_1FE38:
0000A22E                            PSwapper_MainX_Alt:
0000A22E B269 0008                  		cmp.w	obX(a1),d1
0000A232 6300                       		bls.s	@locret
0000A234 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A23A 3428 000C                  		move.w	obY(a0),d2
0000A23E 3602                       		move.w	d2,d3
0000A240 3828 0032                  		move.w	$32(a0),d4
0000A244 9444                       		sub.w	d4,d2
0000A246 D644                       		add.w	d4,d3
0000A248 3829 000C                  		move.w	obY(a1),d4
0000A24C B842                       		cmp.w	d2,d4
0000A24E 6D00                       		blt.s	@locret
0000A250 B843                       		cmp.w	d3,d4
0000A252 6C00                       		bge.s	@locret
0000A254 1028 0028                  		move.b	obSubtype(a0),d0
0000A258 6A00                       		bpl.s	@jump
0000A25A 0829 0001 0022             		btst	#1,obStatus(a1)
0000A260 6600                       		bne.s	@locret
0000A262                            @jump:
0000A262 0828 0000 0001             		btst	#0,obRender(a0)
0000A268 6600                       		bne.s	@jump2
0000A26A                            		
0000A26A                            
0000A26A                            
0000A26A 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A270                            
0000A270                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A270                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A270                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A270                            		;jsr	Palload_Loop
0000A270                            
0000A270 0800 0004                  		btst	#4,d0
0000A274 6700                       		beq.s	@jump2
0000A276                            		
0000A276 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A27C                            
0000A27C                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A27C                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A27C                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A27C                            		;jsr	Palload_Loop
0000A27C                            
0000A27C                            @jump2:
0000A27C 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A282 0800 0006                  		btst	#6,d0
0000A286 6700                       		beq.s	@jump3
0000A288 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A28E                            @jump3:
0000A28E                            	;if DebugPathSwappers
0000A28E                            		;tst.b	(f_debugcheat).w
0000A28E                            		;beq.s	@locret
0000A28E                            		;sfx	sfx_Lamppost,1,0,1
0000A28E                            	;endif
0000A28E                            @locret:
0000A28E 4E75                       		rts
0000A290                            ; ===========================================================================
0000A290                            
0000A290                            PSwapper_MainY:
0000A290 4A78 FE08                  		tst.w	(v_debuguse).w
0000A294 6600 0000                  		bne.w	@locret
0000A298 3228 000C                  		move.w	obY(a0),d1
0000A29C 45E8 0034                  		lea	$34(a0),a2
0000A2A0 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A2A4 4A1A                       		tst.b	(a2)+
0000A2A6 6600 0000                  		bne.w	PSwapper_MainY_Alt	;TIS
0000A2AA B269 000C                  		cmp.w	obY(a1),d1
0000A2AE 6200                       		bhi.s	@locret
0000A2B0 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A2B6 3428 0008                  		move.w	obX(a0),d2
0000A2BA 3602                       		move.w	d2,d3
0000A2BC 3828 0032                  		move.w	$32(a0),d4
0000A2C0 9444                       		sub.w	d4,d2
0000A2C2 D644                       		add.w	d4,d3
0000A2C4 3829 0008                  		move.w	obX(a1),d4
0000A2C8 B842                       		cmp.w	d2,d4
0000A2CA 6D00                       		blt.s	@locret
0000A2CC B843                       		cmp.w	d3,d4
0000A2CE 6C00                       		bge.s	@locret
0000A2D0 1028 0028                  		move.b	obSubtype(a0),d0
0000A2D4 6A00                       		bpl.s	@jump
0000A2D6 0829 0001 0022             		btst	#1,obStatus(a1)
0000A2DC 6600                       		bne.s	@locret
0000A2DE                            @jump:
0000A2DE 0828 0000 0001             		btst	#0,obRender(a0)
0000A2E4 6600                       		bne.s	@jump2
0000A2E6                            		
0000A2E6 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A2EC                            
0000A2EC                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2EC                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A2EC                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2EC                            		;jsr	Palload_Loop
0000A2EC                            
0000A2EC 0800 0003                  		btst	#3,d0
0000A2F0 6700                       		beq.s	@jump2
0000A2F2                            		
0000A2F2 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A2F8                            
0000A2F8                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2F8                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A2F8                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2F8                            		;jsr	Palload_Loop
0000A2F8                            
0000A2F8                            @jump2:
0000A2F8 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A2FE 0800 0005                  		btst	#5,d0
0000A302 6700                       		beq.s	@jump3
0000A304 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A30A                            @jump3:
0000A30A                            	;if DebugPathSwappers
0000A30A                            		;tst.b	(f_debugcheat).w
0000A30A                            		;beq.s	@locret
0000A30A                            		;sfx	sfx_Lamppost,1,0,1
0000A30A                            	;endif
0000A30A                            @locret:
0000A30A 4E75                       		rts
0000A30C                            ; ===========================================================================
0000A30C                            ; loc_1FF42:
0000A30C                            PSwapper_MainY_Alt:
0000A30C B269 000C                  		cmp.w	obY(a1),d1
0000A310 6300                       		bls.s	@locret
0000A312 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A318 3428 0008                  		move.w	obX(a0),d2
0000A31C 3602                       		move.w	d2,d3
0000A31E 3828 0032                  		move.w	$32(a0),d4
0000A322 9444                       		sub.w	d4,d2
0000A324 D644                       		add.w	d4,d3
0000A326 3829 0008                  		move.w	obX(a1),d4
0000A32A B842                       		cmp.w	d2,d4
0000A32C 6D00                       		blt.s	@locret
0000A32E B843                       		cmp.w	d3,d4
0000A330 6C00                       		bge.s	@locret
0000A332 1028 0028                  		move.b	obSubtype(a0),d0
0000A336 6A00                       		bpl.s	@jump
0000A338 0829 0001 0022             		btst	#1,obStatus(a1)
0000A33E 6600                       		bne.s	@locret
0000A340                            @jump:
0000A340 0828 0000 0001             		btst	#0,obRender(a0)
0000A346 6600                       		bne.s	@jump2
0000A348                            		
0000A348 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A34E                            
0000A34E                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A34E                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A34E                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A34E                            		;jsr	Palload_Loop
0000A34E                            
0000A34E 0800 0004                  		btst	#4,d0
0000A352 6700                       		beq.s	@jump2
0000A354                            
0000A354                            		
0000A354 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A35A                            
0000A35A                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A35A                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A35A                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A35A                            		;jsr	Palload_Loop
0000A35A                            
0000A35A                            @jump2:
0000A35A 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A360 0800 0006                  		btst	#6,d0
0000A364 6700                       		beq.s	@jump3
0000A366 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A36C                            @jump3:
0000A36C                            	;if DebugPathSwappers
0000A36C                            		;tst.b	(f_debugcheat).w
0000A36C                            		;beq.s	@locret
0000A36C                            		;sfx	sfx_Lamppost,1,0,1
0000A36C                            	;endif
0000A36C                            @locret:
0000A36C 4E75                       		rts
0000A36E                            ; ===========================================================================
0000A36E                            ; -------------------------------------------------------------------------------
0000A36E                            ; sprite mappings
0000A36E                            ; -------------------------------------------------------------------------------
0000A36E                            Map_WaterSwitcher:	include "_maps\WaterSwitcher.asm"
0000A36E                            WaterSwitcher_Map:
0000A36E 0000                       	dc.w	WaterSwitcher_0010-WaterSwitcher
0000A370 0000                       	dc.w	WaterSwitcher_0032-WaterSwitcher
0000A372 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A374 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A376 0000                       	dc.w	WaterSwitcher_0076-WaterSwitcher
0000A378 0000                       	dc.w	WaterSwitcher_0098-WaterSwitcher
0000A37A 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A37C 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A37E                            
0000A37E 04                         WaterSwitcher_0010:	dc.b 4
0000A37F E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A384 F005 0000 F8               	dc.b $F0, 5, 0, 0, $F8
0000A389 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A38E 1005 0000 F8               	dc.b $10, 5, 0, 0, $F8
0000A393                            
0000A393 04                         WaterSwitcher_0032:	dc.b 4
0000A394 C005 0000 F8               	dc.b $C0, 5, 0, 0, $F8
0000A399 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A39E 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A3A3 3005 0000 F8               	dc.b $30, 5, 0, 0, $F8
0000A3A8                            
0000A3A8 04                         WaterSwitcher_0054:	dc.b 4
0000A3A9 8005 0000 F8               	dc.b $80, 5, 0, 0, $F8
0000A3AE E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A3B3 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A3B8 7005 0000 F8               	dc.b $70, 5, 0, 0, $F8
0000A3BD                            
0000A3BD 04                         WaterSwitcher_0076:	dc.b 4
0000A3BE F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A3C3 F805 0000 F0               	dc.b $F8, 5, 0, 0, $F0
0000A3C8 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A3CD F805 0000 10               	dc.b $F8, 5, 0, 0, $10
0000A3D2                            
0000A3D2 04                         WaterSwitcher_0098:	dc.b 4
0000A3D3 F805 0000 C0               	dc.b $F8, 5, 0, 0, $C0
0000A3D8 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A3DD F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A3E2 F805 0000 30               	dc.b $F8, 5, 0, 0, $30
0000A3E7                            
0000A3E7 04                         WaterSwitcher_00BA:	dc.b 4
0000A3E8 F805 0000 80               	dc.b $F8, 5, 0, 0, $80
0000A3ED F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A3F2 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A3F7 F805 0000 70               	dc.b $F8, 5, 0, 0, $70
0000A3FC                            
0000A3FC                            	even
0000A3FC                            	even
0000A3FC                            ; ===========================================================================
0000A3FC                            ; ===========================================================================
0000A3FC                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A3FC                            ; ---------------------------------------------------------------------------
0000A3FC                            ; Sprite mappings - Unused switch thingy
0000A3FC                            ; ---------------------------------------------------------------------------
0000A3FC                            Map_Swi_internal:
0000A3FC 0000                       		dc.w byte_891E-Map_Swi_internal
0000A3FE 04                         byte_891E:	dc.b 4
0000A3FF E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A404 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A409 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A40E 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A414 00                         		even
0000A414 00                         		even
0000A414                            
0000A414                            		include	"_incObj\2A SBZ Small Door.asm"
0000A414                            ; ---------------------------------------------------------------------------
0000A414                            ; Object 2A - small vertical door (SBZ)
0000A414                            ; ---------------------------------------------------------------------------
0000A414                            
0000A414                            AutoDoor:
0000A414 7000                       		moveq	#0,d0
0000A416 1028 0024                  		move.b	obRoutine(a0),d0
0000A41A 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A41E 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A422                            ; ===========================================================================
0000A422 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A424 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A426                            ; ===========================================================================
0000A426                            
0000A426                            ADoor_Main:	; Routine 0
0000A426 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A42A 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A432 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A438 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A43E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A444                            		;move.b	#4,obPriority(a0)
0000A444                            
0000A444                            ADoor_OpenShut:	; Routine 2
0000A444 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A448 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A44C 3038 D008                  		move.w	(v_player+obX).w,d0
0000A450 D041                       		add.w	d1,d0
0000A452 B068 0008                  		cmp.w	obX(a0),d0
0000A456 6500                       		bcs.s	ADoor_Animate
0000A458 9041                       		sub.w	d1,d0
0000A45A 9041                       		sub.w	d1,d0
0000A45C B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A460 6400                       		bcc.s	ADoor_Animate	; close door
0000A462 D041                       		add.w	d1,d0
0000A464 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A468 6400                       		bcc.s	loc_899A	; if yes, branch
0000A46A 0828 0000 0022             		btst	#0,obStatus(a0)
0000A470 6600                       		bne.s	ADoor_Animate
0000A472 6000                       		bra.s	ADoor_Open
0000A474                            ; ===========================================================================
0000A474                            
0000A474                            loc_899A:
0000A474 0828 0000 0022             		btst	#0,obStatus(a0)
0000A47A 6700                       		beq.s	ADoor_Animate
0000A47C                            
0000A47C                            ADoor_Open:
0000A47C 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A482                            
0000A482                            ADoor_Animate:
0000A482 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A488 6100 0000                  		bsr.w	AnimateSprite
0000A48C 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A490 6600                       		bne.s	@remember	; if yes, branch
0000A492 323C 0011                  		move.w	#$11,d1
0000A496 343C 0020                  		move.w	#$20,d2
0000A49A 3602                       		move.w	d2,d3
0000A49C 5243                       		addq.w	#1,d3
0000A49E 3828 0008                  		move.w	obX(a0),d4
0000A4A2 6100 0000                  		bsr.w	SolidObject
0000A4A6                            
0000A4A6                            	@remember:
0000A4A6 6000 0000                  		bra.w	RememberState
0000A4A6 6000 0000                  		bra.w	RememberState
0000A4AA                            		include	"_anim\SBZ Small Door.asm"
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            ; Animation script - doors (SBZ)
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A4AC 0000                       		dc.w @open-Ani_ADoor
0000A4AE 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A4BA 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A4C6                            		even
0000A4C6                            		even
0000A4C6                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A4C6                            ; --------------------------------------------------------------------------------
0000A4C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A4C6                            ; --------------------------------------------------------------------------------
0000A4C6                            
0000A4C6                            SME_YnmwF:	
0000A4C6 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A4CA 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A4CE 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A4D2 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A4D6 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A4D8 02                         SME_YnmwF_12:	dc.b 2	
0000A4D9 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A4DE 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A4E3 02                         SME_YnmwF_1D:	dc.b 2	
0000A4E4 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A4E9 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A4EE 02                         SME_YnmwF_28:	dc.b 2	
0000A4EF D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A4F4 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A4F9 02                         SME_YnmwF_33:	dc.b 2	
0000A4FA D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A4FF 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A504 02                         SME_YnmwF_3E:	dc.b 2	
0000A505 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A50A 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A50F 02                         SME_YnmwF_49:	dc.b 2	
0000A510 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A515 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A51A 02                         SME_YnmwF_54:	dc.b 2	
0000A51B C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A520 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A525 02                         SME_YnmwF_5F:	dc.b 2	
0000A526 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A52B 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A530 02                         SME_YnmwF_6A:	dc.b 2	
0000A531 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A536 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A53C 00                         		even
0000A53C 00                         		even
0000A53C                            
0000A53C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A53C                            
0000A53C                            
0000A53C                            Obj44_SolidWall:
0000A53C 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A540 6700                       		beq.s	loc_8AA8
0000A542 6B00 0000                  		bmi.w	loc_8AC4
0000A546 4A40                       		tst.w	d0
0000A548 6700 0000                  		beq.w	loc_8A92
0000A54C 6B00                       		bmi.s	loc_8A7C
0000A54E 4A69 0010                  		tst.w	obVelX(a1)
0000A552 6B00                       		bmi.s	loc_8A92
0000A554 6000                       		bra.s	loc_8A82
0000A556                            ; ===========================================================================
0000A556                            
0000A556                            loc_8A7C:
0000A556 4A69 0010                  		tst.w	obVelX(a1)
0000A55A 6A00                       		bpl.s	loc_8A92
0000A55C                            
0000A55C                            loc_8A82:
0000A55C 9169 0008                  		sub.w	d0,obX(a1)
0000A560 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A566 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A56C                            
0000A56C                            loc_8A92:
0000A56C 0829 0001 0022             		btst	#1,obStatus(a1)
0000A572 6600                       		bne.s	loc_8AB6
0000A574 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A57A 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A580 4E75                       		rts	
0000A582                            ; ===========================================================================
0000A582                            
0000A582                            loc_8AA8:
0000A582 0828 0005 0022             		btst	#5,obStatus(a0)
0000A588 6700                       		beq.s	locret_8AC2
0000A58A 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A590                            
0000A590                            loc_8AB6:
0000A590 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A596 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A59C                            
0000A59C                            locret_8AC2:
0000A59C 4E75                       		rts	
0000A59E                            ; ===========================================================================
0000A59E                            
0000A59E                            loc_8AC4:
0000A59E 4A69 0012                  		tst.w	obVelY(a1)
0000A5A2 6A00                       		bpl.s	locret_8AD8
0000A5A4 4A43                       		tst.w	d3
0000A5A6 6A00                       		bpl.s	locret_8AD8
0000A5A8 9769 000C                  		sub.w	d3,obY(a1)
0000A5AC 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A5B2                            
0000A5B2                            locret_8AD8:
0000A5B2 4E75                       		rts	
0000A5B4                            ; End of function Obj44_SolidWall
0000A5B4                            
0000A5B4                            
0000A5B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5B4                            
0000A5B4                            
0000A5B4                            Obj44_SolidWall2:
0000A5B4 43F8 D000                  		lea	(v_player).w,a1
0000A5B8 3029 0008                  		move.w	obX(a1),d0
0000A5BC 9068 0008                  		sub.w	obX(a0),d0
0000A5C0 D041                       		add.w	d1,d0
0000A5C2 6B00                       		bmi.s	loc_8B48
0000A5C4 3601                       		move.w	d1,d3
0000A5C6 D643                       		add.w	d3,d3
0000A5C8 B043                       		cmp.w	d3,d0
0000A5CA 6200                       		bhi.s	loc_8B48
0000A5CC 1629 0016                  		move.b	obHeight(a1),d3
0000A5D0 4883                       		ext.w	d3
0000A5D2 D443                       		add.w	d3,d2
0000A5D4 3629 000C                  		move.w	obY(a1),d3
0000A5D8 9668 000C                  		sub.w	obY(a0),d3
0000A5DC D642                       		add.w	d2,d3
0000A5DE 6B00                       		bmi.s	loc_8B48
0000A5E0 3802                       		move.w	d2,d4
0000A5E2 D844                       		add.w	d4,d4
0000A5E4 B644                       		cmp.w	d4,d3
0000A5E6 6400                       		bhs.s	loc_8B48
0000A5E8 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A5EC 6B00                       		bmi.s	loc_8B48
0000A5EE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A5F4 6400                       		bhs.s	loc_8B48
0000A5F6 4A78 FE08                  		tst.w	(v_debuguse).w
0000A5FA 6600                       		bne.s	loc_8B48
0000A5FC 3A00                       		move.w	d0,d5
0000A5FE B240                       		cmp.w	d0,d1
0000A600 6400                       		bhs.s	loc_8B30
0000A602 D241                       		add.w	d1,d1
0000A604 9041                       		sub.w	d1,d0
0000A606 3A00                       		move.w	d0,d5
0000A608 4445                       		neg.w	d5
0000A60A                            
0000A60A                            loc_8B30:
0000A60A 3203                       		move.w	d3,d1
0000A60C B443                       		cmp.w	d3,d2
0000A60E 6400                       		bhs.s	loc_8B3C
0000A610 9644                       		sub.w	d4,d3
0000A612 3203                       		move.w	d3,d1
0000A614 4441                       		neg.w	d1
0000A616                            
0000A616                            loc_8B3C:
0000A616 BA41                       		cmp.w	d1,d5
0000A618 6200                       		bhi.s	loc_8B44
0000A61A 7801                       		moveq	#1,d4
0000A61C 4E75                       		rts	
0000A61E                            ; ===========================================================================
0000A61E                            
0000A61E                            loc_8B44:
0000A61E 78FF                       		moveq	#-1,d4
0000A620 4E75                       		rts	
0000A622                            ; ===========================================================================
0000A622                            
0000A622                            loc_8B48:
0000A622 7800                       		moveq	#0,d4
0000A624 4E75                       		rts	
0000A626                            ; End of function Obj44_SolidWall2
0000A626                            
0000A626                            ; ===========================================================================
0000A626                            
0000A626                            		include	"_incObj\1E Ball Hog.asm"
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            ; Object 1E - Ball Hog enemy (SBZ)
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            
0000A626                            BallHog:
0000A626 7000                       		moveq	#0,d0
0000A628 1028 0024                  		move.b	obRoutine(a0),d0
0000A62C 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A630 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A634                            ; ===========================================================================
0000A634 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A636 0000                       		dc.w Hog_Action-Hog_Index
0000A638                            
0000A638 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A638                            ; ===========================================================================
0000A638                            
0000A638                            Hog_Main:	; Routine 0
0000A638 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A63E 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A644 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A64C 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A652 117C 0004 0001             		move.b	#4,obRender(a0)
0000A658 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A65E 117C 0005 0020             		move.b	#5,obColType(a0)
0000A664 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A66A 6100 0000                  		bsr.w	ObjectFall
0000A66E 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A674 4A41                       		tst.w	d1
0000A676 6A00                       		bpl.s	@floornotfound
0000A678 D368 000C                  		add.w	d1,obY(a0)
0000A67C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A682 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A686                            
0000A686                            	@floornotfound:
0000A686 4E75                       		rts	
0000A688                            ; ===========================================================================
0000A688                            
0000A688                            Hog_Action:	; Routine 2
0000A688 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A68E 6100 0000                  		bsr.w	AnimateSprite
0000A692 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A698 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A69A 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A69E 6700                       		beq.s	@makeball	; if yes, branch
0000A6A0 6000                       		bra.s	@remember
0000A6A2                            ; ===========================================================================
0000A6A2                            
0000A6A2                            @setlaunchflag:
0000A6A2 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A6A6                            
0000A6A6                            @remember:
0000A6A6 6000 0000                  		bra.w	RememberState
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            @makeball:
0000A6AA 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A6B0 6100 0000                  		bsr.w	FindFreeObj
0000A6B4 6600                       		bne.s	@fail
0000A6B6 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A6BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A6C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A6C6 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A6CC 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A6D2 70FC                       		moveq	#-4,d0
0000A6D4 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A6DA 6700                       		beq.s	@noflip		; if not, branch
0000A6DC 4440                       		neg.w	d0
0000A6DE 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A6E2                            
0000A6E2                            	@noflip:
0000A6E2 D169 0008                  		add.w	d0,obX(a1)
0000A6E6 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A6EC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A6F2                            
0000A6F2                            	@fail:
0000A6F2 60B2                       		bra.s	@remember
0000A6F2 60B2                       		bra.s	@remember
0000A6F4                            		include	"_incObj\20 Cannonball.asm"
0000A6F4                            ; ---------------------------------------------------------------------------
0000A6F4                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A6F4                            ; ---------------------------------------------------------------------------
0000A6F4                            
0000A6F4                            Cannonball:
0000A6F4 7000                       		moveq	#0,d0
0000A6F6 1028 0024                  		move.b	obRoutine(a0),d0
0000A6FA 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A6FE 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A702                            ; ===========================================================================
0000A702 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A704 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A706                            
0000A706 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A706                            ; ===========================================================================
0000A706                            
0000A706                            Cbal_Main:	; Routine 0
0000A706 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A70A 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A710 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A718 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A71E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A724 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A72A 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A730 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A736 7000                       		moveq	#0,d0
0000A738 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A73C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A740 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A744 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A74A                            
0000A74A                            Cbal_Bounce:	; Routine 2
0000A74A 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A750 4A68 0012                  		tst.w	obVelY(a0)
0000A754 6B00                       		bmi.s	Cbal_ChkExplode
0000A756 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A75C 4A41                       		tst.w	d1		; has ball hit the floor?
0000A75E 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A760                            
0000A760 D368 000C                  		add.w	d1,obY(a0)
0000A764 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A76A 4A03                       		tst.b	d3
0000A76C 6700                       		beq.s	Cbal_ChkExplode
0000A76E 6B00                       		bmi.s	loc_8CA4
0000A770 4A68 0010                  		tst.w	obVelX(a0)
0000A774 6A00                       		bpl.s	Cbal_ChkExplode
0000A776 4468 0010                  		neg.w	obVelX(a0)
0000A77A 6000                       		bra.s	Cbal_ChkExplode
0000A77C                            ; ===========================================================================
0000A77C                            
0000A77C                            loc_8CA4:
0000A77C 4A68 0010                  		tst.w	obVelX(a0)
0000A780 6B00                       		bmi.s	Cbal_ChkExplode
0000A782 4468 0010                  		neg.w	obVelX(a0)
0000A786                            
0000A786                            Cbal_ChkExplode:
0000A786 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A78A 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A78C                            
0000A78C                            	Cbal_Explode:
0000A78C 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A790 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A794 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A79A 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A79E                            ; ===========================================================================
0000A79E                            
0000A79E                            Cbal_Animate:
0000A79E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A7A2 6A00                       		bpl.s	Cbal_Display
0000A7A4 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A7AA 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A7B0                            
0000A7B0                            Cbal_Display:
0000A7B0 6100 0000                  		bsr.w	DisplaySprite
0000A7B4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A7B8 0640 00E0                  		addi.w	#$E0,d0
0000A7BC B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A7C0 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A7C4 4E75                       		rts	
0000A7C4 4E75                       		rts	
0000A7C6                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A7C6                            ; ---------------------------------------------------------------------------
0000A7C6                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A7C6                            ; ---------------------------------------------------------------------------
0000A7C6                            
0000A7C6                            MissileDissolve:
0000A7C6 7000                       		moveq	#0,d0
0000A7C8 1028 0024                  		move.b	obRoutine(a0),d0
0000A7CC 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A7D0 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A7D4                            ; ===========================================================================
0000A7D4 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A7D6 0000                       		dc.w MDis_Animate-MDis_Index
0000A7D8                            ; ===========================================================================
0000A7D8                            
0000A7D8                            MDis_Main:	; Routine 0
0000A7D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7DC 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A7E4 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A7EA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7F0 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A7F6 117C 0000 0020             		move.b	#0,obColType(a0)
0000A7FC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A802 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A808 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A818                            
0000A818                            MDis_Animate:	; Routine 2
0000A818 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A81C 6A00                       		bpl.s	@display
0000A81E 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A824 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A828 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A82E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A832                            
0000A832                            	@display:
0000A832 6000 0000                  		bra.w	DisplaySprite
0000A836                            ; ===========================================================================
0000A836                            
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            
0000A836                            ExplosionItem:
0000A836 7000                       		moveq	#0,d0
0000A838 1028 0024                  		move.b	obRoutine(a0),d0
0000A83C 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A840 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A844                            ; ===========================================================================
0000A844 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A846 0000                       		dc.w ExItem_Main-ExItem_Index
0000A848 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A84A                            ; ===========================================================================
0000A84A                            
0000A84A                            ExItem_Animal:	; Routine 0
0000A84A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A84E 6100 0000                  		bsr.w	FindFreeObj
0000A852 6600                       		bne.s	ExItem_Main
0000A854 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A858 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A85E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A864 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A86A                            
0000A86A                            ExItem_Main:	; Routine 2
0000A86A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A86E 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A876 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A87C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A882 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A888 117C 0000 0020             		move.b	#0,obColType(a0)
0000A88E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A894 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A89A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A8AA                            
0000A8AA                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A8AA 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A8AE 6A00                       		bpl.s	@display
0000A8B0 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A8B6 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A8BA 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A8C0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A8C4                            
0000A8C4                            	@display:
0000A8C4 6000 0000                  		bra.w	DisplaySprite
0000A8C8                            ; ===========================================================================
0000A8C8                            ; ---------------------------------------------------------------------------
0000A8C8                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A8C8                            ; ---------------------------------------------------------------------------
0000A8C8                            
0000A8C8                            ExplosionBomb:
0000A8C8 7000                       		moveq	#0,d0
0000A8CA 1028 0024                  		move.b	obRoutine(a0),d0
0000A8CE 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A8D2 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A8D6                            ; ===========================================================================
0000A8D6 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A8D8 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A8DA                            ; ===========================================================================
0000A8DA                            
0000A8DA                            ExBom_Main:	; Routine 0
0000A8DA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8DE 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A8E6 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A8EC 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8F2 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A8F8 117C 0000 0020             		move.b	#0,obColType(a0)
0000A8FE 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A904 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A90A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A91A                            		include	"_anim\Ball Hog.asm"
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A                            ; Animation script - doors (SBZ)
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A91C 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A934 00                         		even
0000A934 00                         		even
0000A934                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A934                            ; --------------------------------------------------------------------------------
0000A934                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A934                            ; --------------------------------------------------------------------------------
0000A934                            
0000A934                            SME_ZER01:	
0000A934 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A938 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A93C 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A940 02                         SME_ZER01_C:	dc.b 2	
0000A941 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A946 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A94B 02                         SME_ZER01_17:	dc.b 2	
0000A94C EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A951 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A956 02                         SME_ZER01_22:	dc.b 2	
0000A957 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A95C 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A961 02                         SME_ZER01_2D:	dc.b 2	
0000A962 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A967 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A96C 01                         SME_ZER01_38:	dc.b 1	
0000A96D F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A972 01                         SME_ZER01_3E:	dc.b 1	
0000A973 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A978                            		even
0000A978                            		even
0000A978                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A978                            ; ---------------------------------------------------------------------------
0000A978                            ; Sprite mappings - buzz bomber missile vanishing
0000A978                            ; ---------------------------------------------------------------------------
0000A978                            Map_MisDissolve_internal:
0000A978 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A97A 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A97C 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A97E 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A980 01                         byte_8EAE:	dc.b 1
0000A981 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A986 01                         byte_8EB4:	dc.b 1
0000A987 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A98C 01                         byte_8EBA:	dc.b 1
0000A98D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A992 01                         byte_8EC0:	dc.b 1
0000A993 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A998                            		even
0000A998                            		even
0000A998                            		include	"_maps\Explosions.asm"
0000A998                            ; ---------------------------------------------------------------------------
0000A998                            ; Sprite mappings - explosion from a badnik or monitor
0000A998                            ; ---------------------------------------------------------------------------
0000A998 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A99C 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A9A0 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A9A2 01                         byte_8ED0:	dc.b 1
0000A9A3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A9A8 01                         byte_8ED6:	dc.b 1
0000A9A9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A9AE 01                         byte_8EDC:	dc.b 1
0000A9AF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A9B4 04                         byte_8EE2:	dc.b 4
0000A9B5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A9BA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A9BF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A9C4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A9C9 04                         byte_8EF7:	dc.b 4
0000A9CA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A9CF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A9D4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A9D9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A9DE                            		even
0000A9DE                            ; ---------------------------------------------------------------------------
0000A9DE                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A9DE                            ; ---------------------------------------------------------------------------
0000A9DE FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A9E0 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A9E2 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A9E4 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A9E6 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A9E8 01                         byte_8F16:	dc.b 1
0000A9E9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A9EE 01                         byte_8F1C:	dc.b 1
0000A9EF F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A9F4                            		even
0000A9F4                            		even
0000A9F4                            
0000A9F4                            		include	"_incObj\28 Animals.asm"
0000A9F4                            ; ---------------------------------------------------------------------------
0000A9F4                            ; Object 28 - animals
0000A9F4                            ; ---------------------------------------------------------------------------
0000A9F4                            
0000A9F4                            Animals:
0000A9F4 7000                       		moveq	#0,d0
0000A9F6 1028 0024                  		move.b	obRoutine(a0),d0
0000A9FA 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A9FE 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AA02                            ; ===========================================================================
0000AA02 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AA06 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AA0A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000AA0E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AA12 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000AA16 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000AA1A 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000AA1E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AA22 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AA26 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AA2A 0000                       		dc.w loc_92D6-Anml_Index
0000AA2C                            
0000AA2C 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000AA38                            
0000AA38 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000AA3C 0000 0000                  		dc.l Map_Animal1
0000AA40 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000AA44 0000 0000                  		dc.l Map_Animal2	; mappings address
0000AA48 FE80 FD00                  		dc.w $FE80, $FD00
0000AA4C 0000 0000                  		dc.l Map_Animal1
0000AA50 FEC0 FE80                  		dc.w $FEC0, $FE80
0000AA54 0000 0000                  		dc.l Map_Animal2
0000AA58 FE40 FD00                  		dc.w $FE40, $FD00
0000AA5C 0000 0000                  		dc.l Map_Animal3
0000AA60 FD00 FC00                  		dc.w $FD00, $FC00
0000AA64 0000 0000                  		dc.l Map_Animal2
0000AA68 FD80 FC80                  		dc.w $FD80, $FC80
0000AA6C 0000 0000                  		dc.l Map_Animal3
0000AA70                            
0000AA70 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AA80 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AA90 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AA9C                            
0000AA9C 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AAB0 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AAC4 0000 0000                  		dc.l Map_Animal3
0000AAC8                            
0000AAC8 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AADA 0565 05B3                  		dc.w $565, $5B3
0000AADE                            ; ===========================================================================
0000AADE                            
0000AADE                            Anml_Ending:	; Routine 0
0000AADE 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AAE2 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AAE6 7000                       		moveq	#0,d0
0000AAE8 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AAEC D040                       		add.w	d0,d0		; multiply d0 by 2
0000AAEE 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AAF2 0440 0014                  		subi.w	#$14,d0
0000AAF6 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AAFC D040                       		add.w	d0,d0
0000AAFE 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AB04 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AB08 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AB0E 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AB14 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AB1A 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AB20 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB26 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB2C 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB32 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AB38 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB3E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB44 6000 0000                  		bra.w	DisplaySprite
0000AB48                            ; ===========================================================================
0000AB48                            
0000AB48                            Anml_FromEnemy:
0000AB48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB4C 6100 91B4                  		bsr.w	RandomNumber
0000AB50 0240 0001                  		andi.w	#1,d0
0000AB54 7200                       		moveq	#0,d1
0000AB56 1238 FE10                  		move.b	(v_zone).w,d1
0000AB5A D241                       		add.w	d1,d1
0000AB5C D240                       		add.w	d0,d1
0000AB5E 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AB62 1031 1000                  		move.b	(a1,d1.w),d0
0000AB66 1140 0030                  		move.b	d0,$30(a0)
0000AB6A E748                       		lsl.w	#3,d0
0000AB6C 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AB70 D2C0                       		adda.w	d0,a1
0000AB72 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AB76 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AB7A 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AB7E 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AB84 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AB8A 6700                       		beq.s	loc_90C0	; if yes, branch
0000AB8C 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AB92                            
0000AB92                            loc_90C0:
0000AB92 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB98 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB9E 08E8 0000 0001             		bset	#0,obRender(a0)
0000ABA4 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ABAA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ABB0 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ABB6 117C 0002 001A             		move.b	#2,obFrame(a0)
0000ABBC 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000ABC2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ABC6 6600                       		bne.s	loc_911C
0000ABC8 6100 0000                  		bsr.w	FindFreeObj
0000ABCC 6600                       		bne.s	Anml_Display
0000ABCE 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000ABD2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ABD8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000ABDE 3028 003E                  		move.w	$3E(a0),d0
0000ABE2 E248                       		lsr.w	#1,d0
0000ABE4 1340 001A                  		move.b	d0,obFrame(a1)
0000ABE8                            
0000ABE8                            Anml_Display:
0000ABE8 6000 0000                  		bra.w	DisplaySprite
0000ABEC                            ; ===========================================================================
0000ABEC                            
0000ABEC                            loc_911C:
0000ABEC 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000ABF2 4268 0010                  		clr.w	obVelX(a0)
0000ABF6 6000 0000                  		bra.w	DisplaySprite
0000ABFA                            ; ===========================================================================
0000ABFA                            
0000ABFA                            loc_912A:
0000ABFA 4A28 0001                  		tst.b	obRender(a0)
0000ABFE 6A00 0000                  		bpl.w	DeleteObject
0000AC02 6100 0000                  		bsr.w	ObjectFall
0000AC06 4A68 0012                  		tst.w	obVelY(a0)
0000AC0A 6B00                       		bmi.s	loc_9180
0000AC0C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC12 4A41                       		tst.w	d1
0000AC14 6A00                       		bpl.s	loc_9180
0000AC16 D368 000C                  		add.w	d1,obY(a0)
0000AC1A 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AC20 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC26 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AC2C 1028 0030                  		move.b	$30(a0),d0
0000AC30 D000                       		add.b	d0,d0
0000AC32 5800                       		addq.b	#4,d0
0000AC34 1140 0024                  		move.b	d0,obRoutine(a0)
0000AC38 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AC3C 6700                       		beq.s	loc_9180
0000AC3E 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000AC44 6700                       		beq.s	loc_9180
0000AC46 4468 0010                  		neg.w	obVelX(a0)
0000AC4A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AC50                            
0000AC50                            loc_9180:
0000AC50 6000 0000                  		bra.w	DisplaySprite
0000AC54                            ; ===========================================================================
0000AC54                            
0000AC54                            loc_9184:
0000AC54 6100 0000                  		bsr.w	ObjectFall
0000AC58 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AC5E 4A68 0012                  		tst.w	obVelY(a0)
0000AC62 6B00                       		bmi.s	loc_91AE
0000AC64 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AC6A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC70 4A41                       		tst.w	d1
0000AC72 6A00                       		bpl.s	loc_91AE
0000AC74 D368 000C                  		add.w	d1,obY(a0)
0000AC78 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC7E                            
0000AC7E                            loc_91AE:
0000AC7E 4A28 0028                  		tst.b	obSubtype(a0)
0000AC82 6600                       		bne.s	loc_9224
0000AC84 4A28 0001                  		tst.b	obRender(a0)
0000AC88 6A00 0000                  		bpl.w	DeleteObject
0000AC8C 6000 0000                  		bra.w	DisplaySprite
0000AC90                            ; ===========================================================================
0000AC90                            
0000AC90                            loc_91C0:
0000AC90 6100 0000                  		bsr.w	SpeedToPos
0000AC94 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC9A 4A68 0012                  		tst.w	obVelY(a0)
0000AC9E 6B00                       		bmi.s	loc_91FC
0000ACA0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ACA6 4A41                       		tst.w	d1
0000ACA8 6A00                       		bpl.s	loc_91FC
0000ACAA D368 000C                  		add.w	d1,obY(a0)
0000ACAE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACB4 4A28 0028                  		tst.b	obSubtype(a0)
0000ACB8 6700                       		beq.s	loc_91FC
0000ACBA 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000ACC0 6700                       		beq.s	loc_91FC
0000ACC2 4468 0010                  		neg.w	obVelX(a0)
0000ACC6 0868 0000 0001             		bchg	#0,obRender(a0)
0000ACCC                            
0000ACCC                            loc_91FC:
0000ACCC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ACD0 6A00                       		bpl.s	loc_9212
0000ACD2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ACD8 5228 001A                  		addq.b	#1,obFrame(a0)
0000ACDC 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACE2                            
0000ACE2                            loc_9212:
0000ACE2 4A28 0028                  		tst.b	obSubtype(a0)
0000ACE6 6600                       		bne.s	loc_9224
0000ACE8 4A28 0001                  		tst.b	obRender(a0)
0000ACEC 6A00 0000                  		bpl.w	DeleteObject
0000ACF0 6000 0000                  		bra.w	DisplaySprite
0000ACF4                            ; ===========================================================================
0000ACF4                            
0000ACF4                            loc_9224:
0000ACF4 3028 0008                  		move.w	obX(a0),d0
0000ACF8 9078 D008                  		sub.w	(v_player+obX).w,d0
0000ACFC 6500                       		bcs.s	loc_923C
0000ACFE 0440 0180                  		subi.w	#$180,d0
0000AD02 6A00                       		bpl.s	loc_923C
0000AD04 4A28 0001                  		tst.b	obRender(a0)
0000AD08 6A00 0000                  		bpl.w	DeleteObject
0000AD0C                            
0000AD0C                            loc_923C:
0000AD0C 6000 0000                  		bra.w	DisplaySprite
0000AD10                            ; ===========================================================================
0000AD10                            
0000AD10                            loc_9240:
0000AD10 4A28 0001                  		tst.b	obRender(a0)
0000AD14 6A00 0000                  		bpl.w	DeleteObject
0000AD18 5368 0036                  		subq.w	#1,$36(a0)
0000AD1C 6600 0000                  		bne.w	loc_925C
0000AD20 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AD26 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AD2C                            
0000AD2C                            loc_925C:
0000AD2C 6000 0000                  		bra.w	DisplaySprite
0000AD30                            ; ===========================================================================
0000AD30                            
0000AD30                            loc_9260:
0000AD30 6100 0000                  		bsr.w	sub_9404
0000AD34 6400                       		bcc.s	loc_927C
0000AD36 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD3C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD42 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AD48 6000 FF46                  		bra.w	loc_91C0
0000AD4C                            ; ===========================================================================
0000AD4C                            
0000AD4C                            loc_927C:
0000AD4C 6000 FFA6                  		bra.w	loc_9224
0000AD50                            ; ===========================================================================
0000AD50                            
0000AD50                            loc_9280:
0000AD50 6100 0000                  		bsr.w	sub_9404
0000AD54 6A00                       		bpl.s	loc_92B6
0000AD56 4268 0010                  		clr.w	obVelX(a0)
0000AD5A 4268 0032                  		clr.w	$32(a0)
0000AD5E 6100 0000                  		bsr.w	SpeedToPos
0000AD62 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AD68 6100 0000                  		bsr.w	loc_93C4
0000AD6C 6100 0000                  		bsr.w	loc_93EC
0000AD70 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AD74 6A00                       		bpl.s	loc_92B6
0000AD76 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AD7C 5228 001A                  		addq.b	#1,obFrame(a0)
0000AD80 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AD86                            
0000AD86                            loc_92B6:
0000AD86 6000 FF6C                  		bra.w	loc_9224
0000AD8A                            ; ===========================================================================
0000AD8A                            
0000AD8A                            loc_92BA:
0000AD8A 6100 0000                  		bsr.w	sub_9404
0000AD8E 6A00                       		bpl.s	loc_9310
0000AD90 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD96 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD9C 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000ADA2 6000 FEB0                  		bra.w	loc_9184
0000ADA6                            ; ===========================================================================
0000ADA6                            
0000ADA6                            loc_92D6:
0000ADA6 6100 0000                  		bsr.w	ObjectFall
0000ADAA 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADB0 4A68 0012                  		tst.w	obVelY(a0)
0000ADB4 6B00                       		bmi.s	loc_9310
0000ADB6 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ADBC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADC2 4A41                       		tst.w	d1
0000ADC4 6A00                       		bpl.s	loc_9310
0000ADC6 4628 0029                  		not.b	$29(a0)
0000ADCA 6600                       		bne.s	loc_9306
0000ADCC 4468 0010                  		neg.w	obVelX(a0)
0000ADD0 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADD6                            
0000ADD6                            loc_9306:
0000ADD6 D368 000C                  		add.w	d1,obY(a0)
0000ADDA 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADE0                            
0000ADE0                            loc_9310:
0000ADE0 6000 FF12                  		bra.w	loc_9224
0000ADE4                            ; ===========================================================================
0000ADE4                            
0000ADE4                            loc_9314:
0000ADE4 6100 0000                  		bsr.w	sub_9404
0000ADE8 6A00                       		bpl.s	loc_932E
0000ADEA 4268 0010                  		clr.w	obVelX(a0)
0000ADEE 4268 0032                  		clr.w	$32(a0)
0000ADF2 6100 0000                  		bsr.w	ObjectFall
0000ADF6 6100 0000                  		bsr.w	loc_93C4
0000ADFA 6100 0000                  		bsr.w	loc_93EC
0000ADFE                            
0000ADFE                            loc_932E:
0000ADFE 6000 FEF4                  		bra.w	loc_9224
0000AE02                            ; ===========================================================================
0000AE02                            
0000AE02                            loc_9332:
0000AE02 6100 0000                  		bsr.w	sub_9404
0000AE06 6A00                       		bpl.s	loc_936C
0000AE08 6100 0000                  		bsr.w	ObjectFall
0000AE0C 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE12 4A68 0012                  		tst.w	obVelY(a0)
0000AE16 6B00                       		bmi.s	loc_936C
0000AE18 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE1E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE24 4A41                       		tst.w	d1
0000AE26 6A00                       		bpl.s	loc_936C
0000AE28 4468 0010                  		neg.w	obVelX(a0)
0000AE2C 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE32 D368 000C                  		add.w	d1,obY(a0)
0000AE36 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE3C                            
0000AE3C                            loc_936C:
0000AE3C 6000 FEB6                  		bra.w	loc_9224
0000AE40                            ; ===========================================================================
0000AE40                            
0000AE40                            loc_9370:
0000AE40 6100 0000                  		bsr.w	sub_9404
0000AE44 6A00                       		bpl.s	loc_93C0
0000AE46 6100 0000                  		bsr.w	SpeedToPos
0000AE4A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE50 4A68 0012                  		tst.w	obVelY(a0)
0000AE54 6B00                       		bmi.s	loc_93AA
0000AE56 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE5C 4A41                       		tst.w	d1
0000AE5E 6A00                       		bpl.s	loc_93AA
0000AE60 4628 0029                  		not.b	$29(a0)
0000AE64 6600                       		bne.s	loc_93A0
0000AE66 4468 0010                  		neg.w	obVelX(a0)
0000AE6A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE70                            
0000AE70                            loc_93A0:
0000AE70 D368 000C                  		add.w	d1,obY(a0)
0000AE74 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE7A                            
0000AE7A                            loc_93AA:
0000AE7A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE7E 6A00                       		bpl.s	loc_93C0
0000AE80 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE86 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE8A 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE90                            
0000AE90                            loc_93C0:
0000AE90 6000 FE62                  		bra.w	loc_9224
0000AE94                            ; ===========================================================================
0000AE94                            
0000AE94                            loc_93C4:
0000AE94 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE9A 4A68 0012                  		tst.w	obVelY(a0)
0000AE9E 6B00                       		bmi.s	locret_93EA
0000AEA0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AEA6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AEAC 4A41                       		tst.w	d1
0000AEAE 6A00                       		bpl.s	locret_93EA
0000AEB0 D368 000C                  		add.w	d1,obY(a0)
0000AEB4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEBA                            
0000AEBA                            locret_93EA:
0000AEBA 4E75                       		rts	
0000AEBC                            ; ===========================================================================
0000AEBC                            
0000AEBC                            loc_93EC:
0000AEBC 08E8 0000 0001             		bset	#0,obRender(a0)
0000AEC2 3028 0008                  		move.w	obX(a0),d0
0000AEC6 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AECA 6400                       		bcc.s	locret_9402
0000AECC 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AED2                            
0000AED2                            locret_9402:
0000AED2 4E75                       		rts	
0000AED4                            
0000AED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AED4                            
0000AED4                            
0000AED4                            sub_9404:
0000AED4 3038 D008                  		move.w	(v_player+obX).w,d0
0000AED8 9068 0008                  		sub.w	obX(a0),d0
0000AEDC 0440 00B8                  		subi.w	#$B8,d0
0000AEE0 4E75                       		rts	
0000AEE2                            ; End of function sub_9404
0000AEE2                            ; End of function sub_9404
0000AEE2                            		include	"_incObj\29 Points.asm"
0000AEE2                            ; ---------------------------------------------------------------------------
0000AEE2                            ; Object 29 - points that appear when you destroy something
0000AEE2                            ; ---------------------------------------------------------------------------
0000AEE2                            
0000AEE2                            Points:
0000AEE2 7000                       		moveq	#0,d0
0000AEE4 1028 0024                  		move.b	obRoutine(a0),d0
0000AEE8 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AEEC 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AEF0 6000 0000                  		bra.w	DisplaySprite
0000AEF4                            ; ===========================================================================
0000AEF4 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AEF6 0000                       		dc.w Poi_Slower-Poi_Index
0000AEF8                            ; ===========================================================================
0000AEF8                            
0000AEF8                            Poi_Main:	; Routine 0
0000AEF8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AEFC 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AF04 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AF0A 117C 0004 0001             		move.b	#4,obRender(a0)
0000AF10 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AF16 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AF1C 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AF22                            
0000AF22                            Poi_Slower:	; Routine 2
0000AF22 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AF26 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AF2A 6100 0000                  		bsr.w	SpeedToPos
0000AF2E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AF34 4E75                       		rts	
0000AF34 4E75                       		rts	
0000AF36                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AF36                            ; ---------------------------------------------------------------------------
0000AF36                            ; Sprite mappings - animals
0000AF36                            ; ---------------------------------------------------------------------------
0000AF36                            Map_Animal1_internal:
0000AF36 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AF38 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AF3A 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AF3C 01                         byte_946C:	dc.b 1
0000AF3D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF42 01                         byte_9472:	dc.b 1
0000AF43 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AF48 01                         byte_9478:	dc.b 1
0000AF49 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AF4E                            		even
0000AF4E                            		even
0000AF4E                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AF4E                            ; ---------------------------------------------------------------------------
0000AF4E                            ; Sprite mappings - animals
0000AF4E                            ; ---------------------------------------------------------------------------
0000AF4E                            Map_Animal2_internal:
0000AF4E 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AF50 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AF52 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AF54 01                         byte_9484:	dc.b 1
0000AF55 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF5A 01                         byte_948A:	dc.b 1
0000AF5B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AF60 01                         byte_9490:	dc.b 1
0000AF61 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AF66                            		even
0000AF66                            		even
0000AF66                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            ; Sprite mappings - animals
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            Map_Animal3_internal:
0000AF66 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AF68 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AF6A 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AF6C 01                         byte_949C:	dc.b 1
0000AF6D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF72 01                         byte_94A2:	dc.b 1
0000AF73 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AF78 01                         byte_94A8:	dc.b 1
0000AF79 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AF7E                            		even
0000AF7E                            		even
0000AF7E                            Map_Poi:	include	"_maps\Points.asm"
0000AF7E                            ; --------------------------------------------------------------------------------
0000AF7E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AF7E                            ; --------------------------------------------------------------------------------
0000AF7E                            
0000AF7E                            SME_yDUNR:	
0000AF7E 0000 0000                  		dc.w SME_yDUNR_E-SME_yDUNR, SME_yDUNR_19-SME_yDUNR	
0000AF82 0000 0000                  		dc.w SME_yDUNR_24-SME_yDUNR, SME_yDUNR_2F-SME_yDUNR	
0000AF86 0000 0000                  		dc.w SME_yDUNR_3A-SME_yDUNR, SME_yDUNR_40-SME_yDUNR	
0000AF8A 0000                       		dc.w SME_yDUNR_55-SME_yDUNR	
0000AF8C 02                         SME_yDUNR_E:	dc.b 2	
0000AF8D FC00 0003 FC               		dc.b $FC, 0, 0, 3, $FC	
0000AF92 FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF97 02                         SME_yDUNR_19:	dc.b 2	
0000AF98 FC00 0001 F8               		dc.b $FC, 0, 0, 1, $F8	
0000AF9D FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AFA2 02                         SME_yDUNR_24:	dc.b 2	
0000AFA3 FC00 0002 F8               		dc.b $FC, 0, 0, 2, $F8	
0000AFA8 FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AFAD 02                         SME_yDUNR_2F:	dc.b 2	
0000AFAE FC00 0003 F8               		dc.b $FC, 0, 0, 3, $F8	
0000AFB3 FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AFB8 01                         SME_yDUNR_3A:	dc.b 1	
0000AFB9 FC00 0003 FC               		dc.b $FC, 0, 0, 3, $FC	
0000AFBE 04                         SME_yDUNR_40:	dc.b 4	
0000AFBF FC04 0007 05               		dc.b $FC, 4, 0, 7, 5	
0000AFC4 FC00 0003 F4               		dc.b $FC, 0, 0, 3, $F4	
0000AFC9 FC00 0000 F8               		dc.b $FC, 0, 0, 0, $F8	
0000AFCE FC00 0000 FC               		dc.b $FC, 0, 0, 0, $FC	
0000AFD3 02                         SME_yDUNR_55:	dc.b 2	
0000AFD4 FC08 0003 F4               		dc.b $FC, 8, 0, 3, $F4	
0000AFD9 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AFDE                            		even
0000AFDE                            		even
0000AFDE                            
0000AFDE                            		include	"_incObj\1F Crabmeat.asm"
0000AFDE                            ; ---------------------------------------------------------------------------
0000AFDE                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AFDE                            ; ---------------------------------------------------------------------------
0000AFDE                            
0000AFDE                            Crabmeat:
0000AFDE 7000                       		moveq	#0,d0
0000AFE0 1028 0024                  		move.b	obRoutine(a0),d0
0000AFE4 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AFE8 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AFEC                            ; ===========================================================================
0000AFEC                            Crab_Index:
0000AFEC 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AFEE 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AFF0 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AFF2 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AFF4 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AFF6                            
0000AFF6 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AFF6 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AFF6 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AFF6 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AFF6 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AFF6                            
0000AFF6 =00000030                  crab_timedelay:	equ $30
0000AFF6 =00000032                  crab_mode:	equ $32
0000AFF6                            ; ===========================================================================
0000AFF6                            
0000AFF6                            Crab_Main:	; Routine 0
0000AFF6 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AFFC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B002 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B00A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B010 117C 0004 0001             		move.b	#4,obRender(a0)
0000B016 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B01C 117C 0006 0020             		move.b	#6,obColType(a0)
0000B022 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B028 6100 0000                  		bsr.w	ObjectFall
0000B02C 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B032 4A41                       		tst.w	d1
0000B034 6A00                       		bpl.s	@floornotfound
0000B036 D368 000C                  		add.w	d1,obY(a0)
0000B03A 1143 0026                  		move.b	d3,obAngle(a0)
0000B03E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B044 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B048                            
0000B048                            	@floornotfound:
0000B048 4E75                       		rts	
0000B04A                            ; ===========================================================================
0000B04A                            
0000B04A                            Crab_Action:	; Routine 2
0000B04A 7000                       		moveq	#0,d0
0000B04C 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B050 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B054 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B058 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B05E 6100 0000                  		bsr.w	AnimateSprite
0000B062 6000 0000                  		bra.w	RememberState
0000B066                            ; ===========================================================================
0000B066 0000                       @index:		dc.w @waittofire-@index
0000B068 0000                       		dc.w @walkonfloor-@index
0000B06A                            ; ===========================================================================
0000B06A                            
0000B06A                            @waittofire:
0000B06A 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B06E 6A00                       		bpl.s	@dontmove
0000B070 4A28 0001                  		tst.b	obRender(a0)
0000B074 6A00                       		bpl.s	@movecrab
0000B076 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B07C 6600                       		bne.s	@fire
0000B07E                            
0000B07E                            	@movecrab:
0000B07E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B082 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B088 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B08E 6100 0000                  		bsr.w	Crab_SetAni
0000B092 5600                       		addq.b	#3,d0
0000B094 1140 001C                  		move.b	d0,obAnim(a0)
0000B098 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B09E 6600                       		bne.s	@noflip
0000B0A0 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B0A4                            
0000B0A4                            	@dontmove:
0000B0A4                            	@noflip:
0000B0A4 4E75                       		rts	
0000B0A6                            ; ===========================================================================
0000B0A6                            
0000B0A6                            @fire:
0000B0A6 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B0AC 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B0B2 6100 0000                  		bsr.w	FindFreeObj
0000B0B6 6600                       		bne.s	@failleft
0000B0B8 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B0BC 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B0C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B0C8 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B0CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B0D4 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B0DA                            
0000B0DA                            	@failleft:
0000B0DA 6100 0000                  		bsr.w	FindFreeObj
0000B0DE 6600                       		bne.s	@failright
0000B0E0 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B0E4 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B0EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B0F0 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B0F6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B0FC 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B102                            
0000B102                            	@failright:
0000B102 4E75                       		rts	
0000B104                            ; ===========================================================================
0000B104                            
0000B104                            @walkonfloor:
0000B104 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B108 6B00                       		bmi.s	loc_966E
0000B10A 6100 0000                  		bsr.w	SpeedToPos
0000B10E 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B114 6600                       		bne.s	loc_9654
0000B116 3628 0008                  		move.w	obX(a0),d3
0000B11A 0643 0010                  		addi.w	#$10,d3
0000B11E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B124 6700                       		beq.s	loc_9640
0000B126 0443 0020                  		subi.w	#$20,d3
0000B12A                            
0000B12A                            loc_9640:
0000B12A 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B130 0C41 FFF8                  		cmpi.w	#-8,d1
0000B134 6D00                       		blt.s	loc_966E
0000B136 0C41 000C                  		cmpi.w	#$C,d1
0000B13A 6C00                       		bge.s	loc_966E
0000B13C 4E75                       		rts	
0000B13E                            ; ===========================================================================
0000B13E                            
0000B13E                            loc_9654:
0000B13E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B144 D368 000C                  		add.w	d1,obY(a0)
0000B148 1143 0026                  		move.b	d3,obAngle(a0)
0000B14C 6100 0000                  		bsr.w	Crab_SetAni
0000B150 5600                       		addq.b	#3,d0
0000B152 1140 001C                  		move.b	d0,obAnim(a0)
0000B156 4E75                       		rts	
0000B158                            ; ===========================================================================
0000B158                            
0000B158                            loc_966E:
0000B158 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B15C 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B162 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B168 6100 0000                  		bsr.w	Crab_SetAni
0000B16C 1140 001C                  		move.b	d0,obAnim(a0)
0000B170 4E75                       		rts	
0000B172                            ; ---------------------------------------------------------------------------
0000B172                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B172                            ; ---------------------------------------------------------------------------
0000B172                            
0000B172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B172                            
0000B172                            
0000B172                            Crab_SetAni:
0000B172 7000                       		moveq	#0,d0
0000B174 1628 0026                  		move.b	obAngle(a0),d3
0000B178 6B00                       		bmi.s	loc_96A4
0000B17A 0C03 0006                  		cmpi.b	#6,d3
0000B17E 6500                       		bcs.s	locret_96A2
0000B180 7001                       		moveq	#1,d0
0000B182 0828 0000 0022             		btst	#0,obStatus(a0)
0000B188 6600                       		bne.s	locret_96A2
0000B18A 7002                       		moveq	#2,d0
0000B18C                            
0000B18C                            locret_96A2:
0000B18C 4E75                       		rts	
0000B18E                            ; ===========================================================================
0000B18E                            
0000B18E                            loc_96A4:
0000B18E 0C03 00FA                  		cmpi.b	#-6,d3
0000B192 6200                       		bhi.s	locret_96B6
0000B194 7002                       		moveq	#2,d0
0000B196 0828 0000 0022             		btst	#0,obStatus(a0)
0000B19C 6600                       		bne.s	locret_96B6
0000B19E 7001                       		moveq	#1,d0
0000B1A0                            
0000B1A0                            locret_96B6:
0000B1A0 4E75                       		rts	
0000B1A2                            ; End of function Crab_SetAni
0000B1A2                            
0000B1A2                            ; ===========================================================================
0000B1A2                            
0000B1A2                            Crab_Delete:	; Routine 4
0000B1A2 6100 0000                  		bsr.w	DeleteObject
0000B1A6 4E75                       		rts	
0000B1A8                            ; ===========================================================================
0000B1A8                            ; ---------------------------------------------------------------------------
0000B1A8                            ; Sub-object - missile that the	Crabmeat throws
0000B1A8                            ; ---------------------------------------------------------------------------
0000B1A8                            
0000B1A8                            Crab_BallMain:	; Routine 6
0000B1A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B1AC 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B1B4 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B1BA 117C 0004 0001             		move.b	#4,obRender(a0)
0000B1C0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B1C6 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B1CC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B1D2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B1D8 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B1DE                            
0000B1DE                            Crab_BallMove:	; Routine 8
0000B1DE 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1E4 6100 0000                  		bsr.w	AnimateSprite
0000B1E8 6100 0000                  		bsr.w	ObjectFall
0000B1EC 6100 0000                  		bsr.w	DisplaySprite
0000B1F0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B1F4 0640 00E0                  		addi.w	#$E0,d0
0000B1F8 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B1FC 6500                       		bcs.s	@delete		; if yes, branch
0000B1FE 4E75                       		rts	
0000B200                            
0000B200                            	@delete:
0000B200 6000 0000                  		bra.w	DeleteObject
0000B200 6000 0000                  		bra.w	DeleteObject
0000B204                            		include	"_anim\Crabmeat.asm"
0000B204                            ; ---------------------------------------------------------------------------
0000B204                            ; Animation script - Crabmeat enemy
0000B204                            ; ---------------------------------------------------------------------------
0000B204 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B20A 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B210 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B214 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B218 00                         		even
0000B218 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B21C 00                         		even
0000B21C 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B220 00                         		even
0000B220 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B226 00                         		even
0000B226 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B22C 00                         		even
0000B22C 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B232 00                         		even
0000B232 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B236 00                         		even
0000B236 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B23A                            		even
0000B23A                            		even
0000B23A                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A                            Map_Crab_internal:
0000B23A 0000                       		dc.w @stand-Map_Crab_internal
0000B23C 0000                       		dc.w @walk-Map_Crab_internal
0000B23E 0000                       		dc.w @slope1-Map_Crab_internal
0000B240 0000                       		dc.w @slope2-Map_Crab_internal
0000B242 0000                       		dc.w @firing-Map_Crab_internal
0000B244 0000                       		dc.w @ball1-Map_Crab_internal
0000B246 0000                       		dc.w @ball2-Map_Crab_internal
0000B248 04                         @stand:		dc.b 4
0000B249 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B24E F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B253 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B258 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B25D 04                         @walk:		dc.b 4
0000B25E F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B263 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B268 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B26D 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B272 04                         @slope1:	dc.b 4
0000B273 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B278 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B27D FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B282 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B287 04                         @slope2:	dc.b 4
0000B288 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B28D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B292 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B297 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B29C 06                         @firing:	dc.b 6
0000B29D F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B2A2 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B2A7 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B2AC F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B2B1 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B2B6 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B2BB 01                         @ball1:		dc.b 1
0000B2BC F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B2C1 01                         @ball2:		dc.b 1
0000B2C2 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B2C8 00                         		even
0000B2C8 00                         		even
0000B2C8                            		include	"_incObj\06 Mozzietron.asm"
0000B2C8                            ; ===========================================================================
0000B2C8                            ; ---------------------------------------------------------------------------
0000B2C8                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B2C8                            ; ---------------------------------------------------------------------------
0000B2C8                            
0000B2C8                            Mozzietron:					; XREF: Obj_Index
0000B2C8 7000                       		moveq	#0,d0
0000B2CA 1028 0024                  		move.b	$24(a0),d0
0000B2CE 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B2D2 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B2D6                            ; ===========================================================================
0000B2D6 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B2D8 0000                       		dc.w MozAction-MozIndex
0000B2DA 0000                       		dc.w MozDelete-MozIndex
0000B2DC                            ; ===========================================================================
0000B2DC                            
0000B2DC                            MozMain:				; XREF: MozIndex
0000B2DC 5428 0024                  		addq.b	#2,$24(a0)
0000B2E0 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B2E8 317C 0444 0002             		move.w	#$444,2(a0)
0000B2EE 117C 0004 0001             		move.b	#4,1(a0)
0000B2F4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B2FA 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B300 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B306                            MozAction:				; XREF: MozIndex
0000B306 7000                       		moveq	#0,d0
0000B308 1028 0025                  		move.b	$25(a0),d0
0000B30C 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B310 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B314 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B31A 6100 0000                  		bsr.w	AnimateSprite
0000B31E 6000 0000                  		bra.w	RememberState
0000B322                            ; ===========================================================================
0000B322 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B324 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B326 0000                       		dc.w MozPinned-MozIndex2
0000B328                            ; ===========================================================================
0000B328                            
0000B328                            MozMove:				; XREF: MozIndex2
0000B328 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B32C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B32E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B334 6600                       		bne.s	MozFire	; if yes, branch
0000B336 5428 0025                  		addq.b	#2,$25(a0)
0000B33A 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B340 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B346 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B34C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B352 6600                       		bne.s	locret_986C	; if not, branch
0000B354 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B358                            
0000B358                            locret_986C:
0000B358 4E75                       		rts	
0000B35A                            ; ===========================================================================
0000B35A                            
0000B35A                            MozFire:				; XREF: MozMove
0000B35A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B360 6100 0000                  		bsr.w	ObjectFall
0000B364 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B36A 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B36C 6A00                       		bpl.s   @return ; if yes, branch 
0000B36E 303C 00B6                  		move.w    #$B6,d0
0000B372 4EB9 0000 12FE             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B378 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B37E D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B382 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B386 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B38A                            		@return:
0000B38A 4E75                       	    		rts
0000B38C                            		
0000B38C                            
0000B38C                            ; ===========================================================================
0000B38C                            
0000B38C                            MozPinned:
0000B38C 4E75                               rts
0000B38E                                    
0000B38E                            ; ===========================================================================
0000B38E                            
0000B38E                            MozChkDel:				; XREF: Obj55_DropFly
0000B38E 4A28 0001                  		tst.b	1(a0)
0000B392 6A00 0000                  		bpl.w	DeleteObject
0000B396 4E75                       		rts	
0000B398                            ; ===========================================================================
0000B398                            
0000B398                            MozChkNrSonic:			; XREF: MozIndex2
0000B398                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B398 6B00                       		bmi.s	MozChgDir
0000B39A 6100 0000                  		bsr.w	SpeedToPos
0000B39E 4A28 0034                  		tst.b	$34(a0)
0000B3A2 6600                       		bne.s	locret_992A
0000B3A4 3038 D008                  		move.w	($FFFFD008).w,d0
0000B3A8 9068 0008                  		sub.w	8(a0),d0
0000B3AC 6A00                       		bpl.s	MozSetNrSonic
0000B3AE 4440                       		neg.w	d0
0000B3B0                            
0000B3B0                            MozSetNrSonic:
0000B3B0 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B3B4 6400                       		bcc.s	locret_992A	; if not, branch
0000B3B6 4A28 0001                  		tst.b	1(a0)
0000B3BA 6A00                       		bpl.s	locret_992A
0000B3BC 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B3C2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B3C8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B3CE 6000                       		bra.s	MozStop
0000B3D0                            ; ===========================================================================
0000B3D0                            
0000B3D0                            MozChgDir:				; XREF: MozChkNrSonic
0000B3D0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B3D6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B3DC 317C 003B 0032             		move.w	#59,$32(a0)
0000B3E2                            
0000B3E2                            MozStop:				; XREF: MozSetNrSonic
0000B3E2 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B3E6 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B3EC 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B3F2                            
0000B3F2                            locret_992A:
0000B3F2 4E75                       		rts	
0000B3F4                            ; ===========================================================================
0000B3F4                            
0000B3F4                            MozDelete:				; XREF: MozIndex
0000B3F4 6100 0000                  		bsr.w	DeleteObject
0000B3F8 4E75                       		rts	
0000B3F8 4E75                       		rts	
0000B3FA                            		include	"_incObj\22 Buzz Bomber.asm"
0000B3FA                            ; ===========================================================================
0000B3FA                            ; ---------------------------------------------------------------------------
0000B3FA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B3FA                            ; ---------------------------------------------------------------------------
0000B3FA                            
0000B3FA                            BuzzBomber:
0000B3FA 7000                       		moveq	#0,d0
0000B3FC 1028 0024                  		move.b	obRoutine(a0),d0
0000B400 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B404 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B408                            ; ===========================================================================
0000B408 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B40A 0000                       		dc.w Buzz_Action-Buzz_Index
0000B40C 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B40E                            
0000B40E =00000032                  buzz_timedelay:	equ $32
0000B40E =00000034                  buzz_buzzstatus:	equ $34
0000B40E =0000003C                  buzz_parent:	equ $3C
0000B40E                            ; ===========================================================================
0000B40E                            
0000B40E                            Buzz_Main:	; Routine 0
0000B40E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B412 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B41A 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B420 117C 0004 0001             		move.b	#4,obRender(a0)
0000B426 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B42C 117C 0008 0020             		move.b	#8,obColType(a0)
0000B432 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B438                            
0000B438                            Buzz_Action:	; Routine 2
0000B438 7000                       		moveq	#0,d0
0000B43A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B43E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B442 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B446 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B44C 6100 0000                  		bsr.w	AnimateSprite
0000B450 6000 0000                  		bra.w	RememberState
0000B454                            ; ===========================================================================
0000B454 0000                       @index:		dc.w @move-@index
0000B456 0000                       		dc.w @chknearsonic-@index
0000B458                            ; ===========================================================================
0000B458                            
0000B458                            @move:
0000B458 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B45C 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B45E 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B464 6600                       		bne.s	@fire		; if yes, branch
0000B466 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B46A 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B470 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B476 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B47C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B482 6600                       		bne.s	@noflip		; if not, branch
0000B484 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B488                            
0000B488                            	@noflip:
0000B488 4E75                       		rts	
0000B48A                            ; ===========================================================================
0000B48A                            
0000B48A                            	@fire:
0000B48A 6100 0000                  		bsr.w	FindFreeObj
0000B48E 6600                       		bne.s	@fail
0000B490 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B494 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B49A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B4A0 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B4A6 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B4AC 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B4B2 303C 0018                  		move.w	#$18,d0
0000B4B6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B4BC 6600                       		bne.s	@noflip2	; if not, branch
0000B4BE 4440                       		neg.w	d0
0000B4C0 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B4C4                            
0000B4C4                            	@noflip2:
0000B4C4 D169 0008                  		add.w	d0,obX(a1)
0000B4C8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B4CE 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B4D4 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B4D8 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B4DE 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B4E4 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B4EA                            
0000B4EA                            	@fail:
0000B4EA 4E75                       		rts	
0000B4EC                            ; ===========================================================================
0000B4EC                            
0000B4EC                            @chknearsonic:
0000B4EC 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B4F0 6B00                       		bmi.s	@chgdirection
0000B4F2 6100 0000                  		bsr.w	SpeedToPos
0000B4F6 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B4FA 6600                       		bne.s	@keepgoing
0000B4FC 3038 D008                  		move.w	(v_player+obX).w,d0
0000B500 9068 0008                  		sub.w	obX(a0),d0
0000B504 6A00                       		bpl.s	@isleft
0000B506 4440                       		neg.w	d0
0000B508                            
0000B508                            	@isleft:
0000B508 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B50C 6400                       		bcc.s	@keepgoing	; if not, branch
0000B50E 4A28 0001                  		tst.b	obRender(a0)
0000B512 6A00                       		bpl.s	@keepgoing
0000B514 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B51A 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B520 6000                       		bra.s	@stop
0000B522                            ; ===========================================================================
0000B522                            
0000B522                            	@chgdirection:
0000B522 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B528 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B52E 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B534                            
0000B534                            	@stop:
0000B534 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B538 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B53E 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B544                            
0000B544                            @keepgoing:
0000B544 4E75                       		rts	
0000B546                            ; ===========================================================================
0000B546                            
0000B546                            Buzz_Delete:	; Routine 4
0000B546 6100 0000                  		bsr.w	DeleteObject
0000B54A 4E75                       		rts	
0000B54A 4E75                       		rts	
0000B54C                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B54C                            ; ---------------------------------------------------------------------------
0000B54C                            ; Object 23 - missile that Buzz	Bomber throws
0000B54C                            ; ---------------------------------------------------------------------------
0000B54C                            
0000B54C                            Missile:
0000B54C 7000                       		moveq	#0,d0
0000B54E 1028 0024                  		move.b	obRoutine(a0),d0
0000B552 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B556 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B55A                            ; ===========================================================================
0000B55A 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B55C 0000                       		dc.w Msl_Animate-Msl_Index
0000B55E 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B560 0000                       		dc.w Msl_Delete-Msl_Index
0000B562 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B564                            
0000B564 =0000003C                  msl_parent:	equ $3C
0000B564                            ; ===========================================================================
0000B564                            
0000B564                            Msl_Main:	; Routine 0
0000B564 5368 0032                  		subq.w	#1,$32(a0)
0000B568 6A00                       		bpl.s	Msl_ChkCancel
0000B56A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B56E 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B576 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B57C 117C 0004 0001             		move.b	#4,obRender(a0)
0000B582 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B588 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B58E 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B594 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B598 6700                       		beq.s	Msl_Animate	; if not, branch
0000B59A                            
0000B59A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B5A0 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B5A6 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B5AC 6000                       		bra.s	Msl_Animate2
0000B5AE                            ; ===========================================================================
0000B5AE                            
0000B5AE                            Msl_Animate:	; Routine 2
0000B5AE 6100                       		bsr.s	Msl_ChkCancel
0000B5B0 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B5B6 6100 0000                  		bsr.w	AnimateSprite
0000B5BA 6000 0000                  		bra.w	DisplaySprite
0000B5BE                            
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B5BE                            ; destroyed, and if it has, then cancel	the missile
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5BE                            
0000B5BE                            
0000B5BE                            Msl_ChkCancel:
0000B5BE 2268 003C                  		movea.l	msl_parent(a0),a1
0000B5C2 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B5C6 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B5C8 4E75                       		rts	
0000B5CA                            ; End of function Msl_ChkCancel
0000B5CA                            
0000B5CA                            ; ===========================================================================
0000B5CA                            
0000B5CA                            Msl_FromBuzz:	; Routine 4
0000B5CA 0828 0007 0022             		btst	#7,obStatus(a0)
0000B5D0 6600                       		bne.s	@explode
0000B5D2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B5D8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B5DE 6100 0000                  		bsr.w	SpeedToPos
0000B5E2 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B5E8 6100 0000                  		bsr.w	AnimateSprite
0000B5EC 6100 0000                  		bsr.w	DisplaySprite
0000B5F0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B5F4 0640 00E0                  		addi.w	#$E0,d0
0000B5F8 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B5FC 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B5FE 4E75                       		rts	
0000B600                            ; ===========================================================================
0000B600                            
0000B600                            	@explode:
0000B600 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B604 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B60A 6000 F1BA                  		bra.w	MissileDissolve
0000B60E                            ; ===========================================================================
0000B60E                            
0000B60E                            Msl_Delete:	; Routine 6
0000B60E 6100 0000                  		bsr.w	DeleteObject
0000B612 4E75                       		rts	
0000B614                            ; ===========================================================================
0000B614                            
0000B614                            Msl_FromNewt:	; Routine 8
0000B614 4A28 0001                  		tst.b	obRender(a0)
0000B618 6AF4                       		bpl.s	Msl_Delete
0000B61A 6100 0000                  		bsr.w	SpeedToPos
0000B61E                            
0000B61E                            Msl_Animate2:
0000B61E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B624 6100 0000                  		bsr.w	AnimateSprite
0000B628 6100 0000                  		bsr.w	DisplaySprite
0000B62C 4E75                       		rts	
0000B62C 4E75                       		rts	
0000B62E                            		include	"_anim\Mozzietron.asm"
0000B62E                            ; ---------------------------------------------------------------------------
0000B62E                            ; Animation script - Buzz Bomber enemy
0000B62E                            ; ---------------------------------------------------------------------------
0000B62E 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B630 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B632 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B634 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B638 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B63C 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B644 00                         		even
0000B644 00                         		even
0000B644                            		include	"_anim\Buzz Bomber.asm"
0000B644                            ; ---------------------------------------------------------------------------
0000B644                            ; Animation script - Buzz Bomber enemy
0000B644                            ; ---------------------------------------------------------------------------
0000B644 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B646 0000                       		dc.w @fly2-Ani_Buzz
0000B648 0000                       		dc.w @fires-Ani_Buzz
0000B64A 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B64E 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B652 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B656                            		even
0000B656                            		even
0000B656                            		include	"_anim\Buzz Bomber Missile.asm"
0000B656                            ; ---------------------------------------------------------------------------
0000B656                            ; Animation script - missile that Buzz Bomber throws
0000B656                            ; ---------------------------------------------------------------------------
0000B656 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B658 0000                       		dc.w @missile-Ani_Missile
0000B65A 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B65E 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B662                            		even
0000B662                            		even
0000B662                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B662                            ; --------------------------------------------------------------------------------
0000B662                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B662                            ; --------------------------------------------------------------------------------
0000B662                            
0000B662                            SME_qvHIs:	
0000B662 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B666 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B66A 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B66E 02                         SME_qvHIs_C:	dc.b 2	
0000B66F FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B674 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B679 01                         SME_qvHIs_17:	dc.b 1	
0000B67A F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B67F 02                         SME_qvHIs_1D:	dc.b 2	
0000B680 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B685 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B68A 03                         SME_qvHIs_28:	dc.b 3	
0000B68B DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B690 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B695 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B69A 04                         SME_qvHIs_38:	dc.b 4	
0000B69B E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B6A0 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B6A5 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B6AA F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B6AF 04                         SME_qvHIs_4D:	dc.b 4	
0000B6B0 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B6B5 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B6BA F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B6BF F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B6C4                            		even
0000B6C4                            		even
0000B6C4                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B6C4                            ; --------------------------------------------------------------------------------
0000B6C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B6C4                            ; --------------------------------------------------------------------------------
0000B6C4                            
0000B6C4                            SME_yccqJ:	
0000B6C4 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B6C8 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B6CC 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B6D0 06                         SME_yccqJ_C:	dc.b 6	
0000B6D1 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B6D6 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B6DB 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B6E0 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B6E5 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B6EA EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B6EF 06                         SME_yccqJ_2B:	dc.b 6	
0000B6F0 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B6F5 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B6FA 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B6FF 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B704 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B709 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B70E 06                         SME_yccqJ_4A:	dc.b 6	
0000B70F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B714 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B719 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B71E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B723 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B728 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B72D 06                         SME_yccqJ_69:	dc.b 6	
0000B72E F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B733 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B738 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B73D 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B742 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B747 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B74C 07                         SME_yccqJ_88:	dc.b 7	
0000B74D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B752 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B757 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B75C EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B761 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B766 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B76B EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B770 04                         SME_yccqJ_AC:	dc.b 4	
0000B771 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B776 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B77B 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B780 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B786 00                         		even
0000B786 00                         		even
0000B786                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B786                            ; ---------------------------------------------------------------------------
0000B786                            ; Sprite mappings - missile that Buzz Bomber throws
0000B786                            ; ---------------------------------------------------------------------------
0000B786                            Map_Missile_internal:
0000B786 0000                       		dc.w @Flare1-Map_Missile_internal
0000B788 0000                       		dc.w @Flare2-Map_Missile_internal
0000B78A 0000                       		dc.w @Ball1-Map_Missile_internal
0000B78C 0000                       		dc.w @Ball2-Map_Missile_internal
0000B78E 01                         @Flare1:	dc.b 1
0000B78F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B794 01                         @Flare2:	dc.b 1
0000B795 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B79A 01                         @Ball1:		dc.b 1
0000B79B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B7A0 01                         @Ball2:		dc.b 1
0000B7A1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B7A6                            		even
0000B7A6                            		even
0000B7A6                            
0000B7A6                            		include	"_incObj\25 & 37 Rings.asm"
0000B7A6                            ; ---------------------------------------------------------------------------
0000B7A6                            ; Object 25 - rings
0000B7A6                            ; ---------------------------------------------------------------------------
0000B7A6                            
0000B7A6                            Rings:
0000B7A6 7000                       		moveq	#0,d0
0000B7A8 1028 0024                  		move.b	obRoutine(a0),d0
0000B7AC 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B7B0 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B7B4                            ; ===========================================================================
0000B7B4                            Ring_Index:
0000B7B4 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B7B6 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B7B8 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B7BA 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B7BC 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B7BE 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B7C0 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B7C2 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B7C4 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B7C6                            
0000B7C6 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B7C6 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B7C6 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B7C6 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B7C6 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B7C6 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B7C6 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B7C6 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B7C6 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B7C6                            ; ---------------------------------------------------------------------------
0000B7C6                            ; Distances between rings (format: horizontal, vertical)
0000B7C6                            ; ---------------------------------------------------------------------------
0000B7C6 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B7C8 1800                       		dc.b $18, 0		; horizontal normal
0000B7CA 2000                       		dc.b $20, 0		; horizontal wide
0000B7CC 0010                       		dc.b 0,	$10		; vertical tight
0000B7CE 0018                       		dc.b 0,	$18		; vertical normal
0000B7D0 0020                       		dc.b 0,	$20		; vertical wide
0000B7D2 1010                       		dc.b $10, $10		; diagonal
0000B7D4 1818                       		dc.b $18, $18
0000B7D6 2020                       		dc.b $20, $20
0000B7D8 F010                       		dc.b $F0, $10
0000B7DA E818                       		dc.b $E8, $18
0000B7DC E020                       		dc.b $E0, $20
0000B7DE 1008                       		dc.b $10, 8
0000B7E0 1810                       		dc.b $18, $10
0000B7E2 F008                       		dc.b $F0, 8
0000B7E4 E810                       		dc.b $E8, $10
0000B7E6                            ; ===========================================================================
0000B7E6                            
0000B7E6                            Ring_Main:	; Routine 0
0000B7E6 45F8 FC00                  		lea	(v_objstate).w,a2
0000B7EA 7000                       		moveq	#0,d0
0000B7EC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B7F0 45F2 0002                  		lea	2(a2,d0.w),a2
0000B7F4 1812                       		move.b	(a2),d4
0000B7F6 1228 0028                  		move.b	obSubtype(a0),d1
0000B7FA 1001                       		move.b	d1,d0
0000B7FC 0241 0007                  		andi.w	#7,d1
0000B800 0C41 0007                  		cmpi.w	#7,d1
0000B804 6600                       		bne.s	loc_9B80
0000B806 7206                       		moveq	#6,d1
0000B808                            
0000B808                            	loc_9B80:
0000B808 4841                       		swap	d1
0000B80A 323C 0000                  		move.w	#0,d1
0000B80E E808                       		lsr.b	#4,d0
0000B810 D040                       		add.w	d0,d0
0000B812 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B816 4885                       		ext.w	d5
0000B818 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B81C 4886                       		ext.w	d6
0000B81E 2248                       		movea.l	a0,a1
0000B820 3428 0008                  		move.w	obX(a0),d2
0000B824 3628 000C                  		move.w	obY(a0),d3
0000B828 E20C                       		lsr.b	#1,d4
0000B82A 6500                       		bcs.s	loc_9C02
0000B82C 0892 0007                  		bclr	#7,(a2)
0000B830 6000                       		bra.s	loc_9BBA
0000B832                            ; ===========================================================================
0000B832                            
0000B832                            Ring_MakeRings:
0000B832 4841                       		swap	d1
0000B834 E20C                       		lsr.b	#1,d4
0000B836 6500                       		bcs.s	loc_9C02
0000B838 0892 0007                  		bclr	#7,(a2)
0000B83C 6100 0000                  		bsr.w	FindFreeObj
0000B840 6600                       		bne.s	loc_9C0E
0000B842                            
0000B842                            loc_9BBA:
0000B842 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B846 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B84A 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B84E 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B854 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B858 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B860 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B866 137C 0004 0001             		move.b	#4,obRender(a1)
0000B86C 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B872 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B878 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B87E 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B884 1341 0034                  		move.b	d1,$34(a1)
0000B888                            
0000B888                            loc_9C02:
0000B888 5241                       		addq.w	#1,d1
0000B88A D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B88C D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B88E 4841                       		swap	d1
0000B890 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B894                            
0000B894                            loc_9C0E:
0000B894 0812 0000                  		btst	#0,(a2)
0000B898 6600 0000                  		bne.w	DeleteObject
0000B89C                            
0000B89C                            Ring_Animate:	; Routine 2
0000B89C 4A38 FE2C                  		tst.b	(v_shield).w
0000B8A0 6700                       		beq.s	@skip
0000B8A2 4A28 0001                  		tst.b	obRender(a0)
0000B8A6 6A00                       		bpl.s	@skip
0000B8A8                            		
0000B8A8 43F8 D000                  		lea (v_player).w,a1
0000B8AC                            		
0000B8AC 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B8B0 9068 0008                  		sub.w	obX(a0),d0
0000B8B4 6A00                       		bpl.s	@a1
0000B8B6 4440                       		neg.w	d0
0000B8B8                            		
0000B8B8                            	@a1:
0000B8B8 0C40 0040                  		cmpi.w	#$40,d0
0000B8BC 6200                       		bhi.s	@skip
0000B8BE                            		
0000B8BE 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B8C2 9068 000C                  		sub.w	obY(a0),d0
0000B8C6 6A00                       		bpl.s	@a2
0000B8C8 4440                       		neg.w	d0
0000B8CA                            		
0000B8CA                            	@a2:
0000B8CA 0C40 0040                  		cmpi.w	#$40,d0
0000B8CE 6200                       		bhi.s	@skip
0000B8D0                            		
0000B8D0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B8D6 45F8 FC00                  		lea	(v_objstate).w,a2
0000B8DA 7000                       		moveq	#0,d0
0000B8DC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B8E0 1228 0034                  		move.b	$34(a0),d1
0000B8E4 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B8E8                            		
0000B8E8                            	@skip:
0000B8E8 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B8EE 6100 0000                  		bsr.w	DisplaySprite
0000B90E 4E75                       		rts	
0000B910                            ; ===========================================================================
0000B910                            
0000B910                            Ring_Collect:	; Routine 4
0000B910 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B914 117C 0000 0020             		move.b	#0,obColType(a0)
0000B91A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B920 6100 0000                  		bsr.w	CollectRing
0000B924 45F8 FC00                  		lea	(v_objstate).w,a2
0000B928 7000                       		moveq	#0,d0
0000B92A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B92E 1228 0034                  		move.b	$34(a0),d1
0000B932 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B936                            
0000B936                            Ring_Sparkle:	; Routine 6
0000B936 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B93C 6100 0000                  		bsr.w	AnimateSprite
0000B940 6000 0000                  		bra.w	DisplaySprite
0000B944                            ; ===========================================================================
0000B944                            
0000B944                            Ring_Delete:	; Routine 8
0000B944 6000 0000                  		bra.w	DeleteObject
0000B948                            
0000B948                            Ring_Attract:	; Routine $A
0000B948 4A38 FE2C                  		tst.b	(v_shield).w
0000B94C 6600                       		bne.s	@skip
0000B94E 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B952 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B958 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B95E 6000                       		bra.s	@display
0000B960                            		
0000B960                            	@skip:
0000B960 323C 0030                  		move.w	#$30,d1	; horizontal
0000B964 3038 D008                  		move.w	(v_player+obX).w,d0
0000B968 B068 0008                  		cmp.w	obX(a0),d0
0000B96C 6400                       		bcc.s	@a1
0000B96E 4441                       		neg.w	d1
0000B970 4A68 0010                  		tst.w	obVelX(a0)
0000B974 6B00                       		bmi.s	@a2
0000B976 D241                       		add.w	d1,d1
0000B978 D241                       		add.w	d1,d1
0000B97A 6000                       		bra.s	@a2
0000B97C                            
0000B97C                            	@a1:
0000B97C 4A68 0010                  		tst.w	obVelX(a0)
0000B980 6A00                       		bpl.s	@a2
0000B982 D241                       		add.w	d1,d1
0000B984 D241                       		add.w	d1,d1
0000B986                            
0000B986                            	@a2:
0000B986 D368 0010                  		add.w	d1,obVelX(a0)
0000B98A 323C 0030                  		move.w	#$30,d1	; vertical
0000B98E 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B992 B068 000C                  		cmp.w	obY(a0),d0
0000B996 6400                       		bcc.s	@a3
0000B998 4441                       		neg.w	d1
0000B99A 4A68 0012                  		tst.w	obVelY(a0)
0000B99E 6B00                       		bmi.s	@a4
0000B9A0 D241                       		add.w	d1,d1
0000B9A2 D241                       		add.w	d1,d1
0000B9A4 6000                       		bra.s	@a4
0000B9A6                            
0000B9A6                            	@a3:
0000B9A6 4A68 0012                  		tst.w	obVelY(a0)
0000B9AA 6A00                       		bpl.s	@a4
0000B9AC D241                       		add.w	d1,d1
0000B9AE D241                       		add.w	d1,d1
0000B9B0                            
0000B9B0                            	@a4:
0000B9B0 D368 0012                  		add.w	d1,obVelY(a0)
0000B9B4 6100 0000                  		bsr.w	SpeedToPos
0000B9B8                            		
0000B9B8                            	@display:
0000B9B8 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B9BE 6000 0000                  		bra.w	DisplaySprite
0000B9C2                            
0000B9C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9C2                            
0000B9C2                            
0000B9C2                            CollectRing:
0000B9C2 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B9C6 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B9CC 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B9D0 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B9D6 6500                       		bcs.s	@playsnd	; if yes, branch
0000B9D8 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B9DE 6700                       		beq.s	@got100
0000B9E0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B9E6 6500                       		bcs.s	@playsnd	; if yes, branch
0000B9E8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B9EE 6600                       		bne.s	@playsnd
0000B9F0                            
0000B9F0                            	@got100:
0000B9F0 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B9F4 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B9F8 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B9FC                            		
0000B9FC                            
0000B9FC                            	@playsnd:
0000B9FC 4EF9 0000 12FE             		jmp	(PlaySound_Special).l
0000BA02                            ; End of function CollectRing
0000BA02                            
0000BA02                            ; ===========================================================================
0000BA02                            ; ---------------------------------------------------------------------------
0000BA02                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BA02                            ; ---------------------------------------------------------------------------
0000BA02                            
0000BA02                            RingLoss:
0000BA02 7000                       		moveq	#0,d0
0000BA04 1028 0024                  		move.b	obRoutine(a0),d0
0000BA08 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BA0C 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BA10                            ; ===========================================================================
0000BA10 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BA12 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BA14 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BA16 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BA18 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BA1A                            ; ===========================================================================
0000BA1A                            
0000BA1A                            RLoss_Count:	; Routine 0
0000BA1A 2248                       		movea.l	a0,a1
0000BA1C 7A00                       		moveq	#0,d5
0000BA1E 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BA22 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BA28 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BA2A 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BA2E 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BA34 6700                               beq.s   @cont                       ; if not, branch
0000BA36 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BA3C 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BA3E                            @cont:
0000BA3E BA40                               cmp.w   d0,d5
0000BA40 6500                               bcs.s   @belowmax
0000BA42 3A00                               move.w  d0,d5
0000BA44                            
0000BA44                            @belowmax:
0000BA44 5345                               subq.w  #1,d5
0000BA46 383C 0288                          move.w  #$288,d4
0000BA4A 6000                       		bra.s	@makerings
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            	@loop:
0000BA4C 6100 0000                  		bsr.w	FindFreeObj
0000BA50 6600 0000                  		bne.w	@resetcounter
0000BA54                            
0000BA54                            @makerings:
0000BA54 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BA58 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BA5C 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BA62 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BA68 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BA6E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BA74 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BA7C 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BA82 137C 0004 0001             		move.b	#4,obRender(a1)
0000BA88 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BA8E 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BA94 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BA98 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BA9A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BA9E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BAA2 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BAA4 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BAA6 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BAA8                            @skiphalvingvel:
0000BAA8 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BAAC 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BAB0 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BAB4                            
0000BAB4                            @resetcounter:
0000BAB4 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BABA 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BAC0 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BAC6 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BAC8 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BACC 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BADA                            
0000BADA                            RLoss_Bounce:	; Routine 2
0000BADA 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BAE0 6100 0000                  		bsr.w	SpeedToPos
0000BAE4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BAEA 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BAEE 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BAF0 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BAF4 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BAF8 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BAFA 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BB00                            	@skipbounceslow:
0000BB00 6B00                       		bmi.s	@chkdel
0000BB02 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BB06 D007                       		add.b	d7,d0
0000BB08 0200 0003                  		andi.b	#3,d0
0000BB0C 6600                       		bne.s	@chkdel
0000BB0E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BB14 4A41                       		tst.w	d1
0000BB16 6A00                       		bpl.s	@chkdel
0000BB18 D368 000C                  		add.w	d1,obY(a0)
0000BB1C 3028 0012                  		move.w	obVelY(a0),d0
0000BB20 E440                       		asr.w	#2,d0
0000BB22 9168 0012                  		sub.w	d0,obVelY(a0)
0000BB26 4468 0012                  		neg.w	obVelY(a0)
0000BB2A                            
0000BB2A                            	@chkdel:
0000BB2A 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BB2E 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BB32 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BB36 0640 00E0                  		addi.w	#$E0,d0
0000BB3A B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BB3E 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BB42 4A38 FE2C                  		tst.b	(v_shield).w
0000BB46 6700                       		beq.s	@skip
0000BB48 4A28 0001                  		tst.b	obRender(a0)
0000BB4C 6A00                       		bpl.s	@skip
0000BB4E                            		
0000BB4E 43F8 D000                  		lea (v_player).w,a1
0000BB52                            		
0000BB52 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BB56 9068 0008                  		sub.w	obX(a0),d0
0000BB5A 6A00                       		bpl.s	@a1
0000BB5C 4440                       		neg.w	d0
0000BB5E                            		
0000BB5E                            	@a1:
0000BB5E 0C40 00A0                  		cmpi.w	#$A0,d0
0000BB62 6200                       		bhi.s	@skip
0000BB64                            		
0000BB64 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BB68 9068 000C                  		sub.w	obY(a0),d0
0000BB6C 6A00                       		bpl.s	@a2
0000BB6E 4440                       		neg.w	d0
0000BB70                            		
0000BB70                            	@a2:
0000BB70 0C40 00A0                  		cmpi.w	#$A0,d0
0000BB74 6200                       		bhi.s	@skip
0000BB76                            		
0000BB76 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BB7C 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BB80                            		
0000BB80                            	@skip:		
0000BB80 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BB84 D2FC 0080                          adda.w  #$80,a1
0000BB88 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB8C 6400                               bcc.s   @cont
0000BB8E 5451                               addq.w  #2,(a1)
0000BB90 D2D1                               adda.w  (a1),a1
0000BB92 3288                               move.w  a0,(a1)
0000BB94                            		
0000BB94                            	@cont:
0000BB94 4E75                               rts		
0000BB96                            ; ===========================================================================
0000BB96                            
0000BB96                            RLoss_Collect:	; Routine 4
0000BB96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BB9A 117C 0000 0020             		move.b	#0,obColType(a0)
0000BBA0 6100 FE20                  		bsr.w	CollectRing
0000BBA4                            
0000BBA4                            RLoss_Sparkle:	; Routine 6
0000BBA4 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BBAA 6100 0000                  		bsr.w	AnimateSprite
0000BBAE 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BBB2 0C51 007E                          cmpi.w  #$7E,(a1)
0000BBB6 6400                               bcc.s   @cont
0000BBB8 5451                               addq.w  #2,(a1)
0000BBBA D2D1                               adda.w  (a1),a1
0000BBBC 3288                               move.w  a0,(a1)
0000BBBE                            			
0000BBBE                            	@cont:
0000BBBE 4E75                               rts
0000BBC0                            ; ===========================================================================
0000BBC0                            
0000BBC0                            RLoss_Delete:	; Routine 8
0000BBC0 6000 0000                  		bra.w	DeleteObject
0000BBC4                            
0000BBC4                            ; ----------------------------------------------------------------------------------------------
0000BBC4                            ; Ring Spawn Array 
0000BBC4                            ; ----------------------------------------------------------------------------------------------
0000BBC4                            
0000BBC4 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BBD4 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BBE4 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BBF4 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BC04 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BC14 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BC24 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BC34 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BC44                                            even
0000BC44                            ; ===========================================================================
0000BC44                            ; -------------------------------------------------------------------------------------
0000BC44                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BC44                            ; -------------------------------------------------------------------------------------
0000BC44                            
0000BC44                            SpillRingData_Water:
0000BC44 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BC54 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BC64 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BC74 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BC84 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BC94 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BCA4 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BCB4 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BCC4                                            even
0000BCC4                            ; ===========================================================================				
0000BCC4                            ; ===========================================================================				
0000BCC4                            		include	"_incObj\4B Giant Ring.asm"
0000BCC4                            ; ---------------------------------------------------------------------------
0000BCC4                            ; Object 4B - giant ring for entry to special stage
0000BCC4                            ; ---------------------------------------------------------------------------
0000BCC4                            
0000BCC4                            GiantRing:
0000BCC4 7000                       		moveq	#0,d0
0000BCC6 1028 0024                  		move.b	obRoutine(a0),d0
0000BCCA 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BCCE 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BCD2                            ; ===========================================================================
0000BCD2 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BCD4 0000                       		dc.w GRing_Animate-GRing_Index
0000BCD6 0000                       		dc.w GRing_Collect-GRing_Index
0000BCD8 0000                       		dc.w GRing_Delete-GRing_Index
0000BCDA                            ; ===========================================================================
0000BCDA                            
0000BCDA                            GRing_Main:    ; Routine 0
0000BCDA 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BCE2 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BCE8 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BCEE 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BCF4 4A28 0001                  		tst.b	obRender(a0)
0000BCF8 6A00                       		bpl.s	GRing_Animate
0000BCFA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BD00 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BD04 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BD0A 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BD0C                            
0000BD0C 4E75                       		rts    
0000BD0E                            ; ===========================================================================
0000BD0E                            
0000BD0E                            GRing_Okay:
0000BD0E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD12 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BD18 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BD1E 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BD24                            
0000BD24                            GRing_Animate:	; Routine 2
0000BD24 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BD48 6000 0000                  		bra.w	DisplaySprite
0000BD4C                            ; ===========================================================================
0000BD4C                            
0000BD4C                            GRing_Collect:	; Routine 4
0000BD4C 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BD50 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD56 6100 0000                  		bsr.w	FindFreeObj
0000BD5A 6600 0000                  		bne.w	GRing_PlaySnd
0000BD5E 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BD62 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BD68 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BD6E 2348 003C                  		move.l	a0,$3C(a1)
0000BD72 3038 D008                  		move.w	(v_player+obX).w,d0
0000BD76 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BD7A 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BD7C 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BD82 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BD88 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BD8E                            		
0000BD8E                            GRing_PlaySnd:
0000BD98 608A                       		bra.s	GRing_Animate
0000BD9A                            ; ===========================================================================
0000BD9A                            
0000BD9A                            GRing_Delete:	; Routine 6
0000BD9A 6000 0000                  		bra.w	DeleteObject
0000BD9A 6000 0000                  		bra.w	DeleteObject
0000BD9E                            		include	"_incObj\7C Ring Flash.asm"
0000BD9E                            ; ---------------------------------------------------------------------------
0000BD9E                            ; Object 7C - flash effect when	you collect the	giant ring
0000BD9E                            ; ---------------------------------------------------------------------------
0000BD9E                            
0000BD9E                            RingFlash:
0000BD9E 7000                       		moveq	#0,d0
0000BDA0 1028 0024                  		move.b	obRoutine(a0),d0
0000BDA4 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BDA8 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BDAC                            ; ===========================================================================
0000BDAC 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BDAE 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BDB0 0000                       		dc.w Flash_Delete-Flash_Index
0000BDB2                            ; ===========================================================================
0000BDB2                            
0000BDB2                            Flash_Main:	; Routine 0
0000BDB2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BDB6 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BDBE 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BDC4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BDCA 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BDD0 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BDD6 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BDDC                            
0000BDDC                            Flash_ChkDel:	; Routine 2
0000BDDC 6100                       		bsr.s	Flash_Collect
0000BDFC 6000 0000                  		bra.w	DisplaySprite
0000BE00                            
0000BE00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE00                            
0000BE00                            
0000BE00                            Flash_Collect:
0000BE00 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BE04 6A00                       		bpl.s	locret_9F76
0000BE06 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BE0C 5228 001A                  		addq.b	#1,obFrame(a0)
0000BE10 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BE16 6400                       		bcc.s	Flash_End	; if yes, branch
0000BE18 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BE1E 6600                       		bne.s	locret_9F76	; if not, branch
0000BE20 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BE24 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BE2A 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BE30 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BE36 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BE3A 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BE3E                            
0000BE3E                            locret_9F76:
0000BE3E 4E75                       		rts	
0000BE40                            ; ===========================================================================
0000BE40                            
0000BE40                            Flash_End:
0000BE40 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE44 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BE4A 588F                       		addq.l	#4,sp
0000BE4C 4E75                       		rts	
0000BE4E                            ; End of function Flash_Collect
0000BE4E                            
0000BE4E                            ; ===========================================================================
0000BE4E                            
0000BE4E                            Flash_Delete:	; Routine 4
0000BE4E 6000 0000                  		bra.w	DeleteObject
0000BE4E 6000 0000                  		bra.w	DeleteObject
0000BE52                            
0000BE52                            		include	"_anim\Rings.asm"
0000BE52                            ; ---------------------------------------------------------------------------
0000BE52                            ; Animation script - ring
0000BE52                            ; ---------------------------------------------------------------------------
0000BE52 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BE54 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BE5A                            		even
0000BE5A                            		even
0000BE5A                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BE5A                            ; --------------------------------------------------------------------------------
0000BE5A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BE5A                            ; --------------------------------------------------------------------------------
0000BE5A                            
0000BE5A                            SME_aSMQh:	
0000BE5A 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BE5E 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BE62 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BE66 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BE6A 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BE6E 01                         SME_aSMQh_14:	dc.b 1	
0000BE6F F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BE74 01                         SME_aSMQh_1A:	dc.b 1	
0000BE75 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BE7A 01                         SME_aSMQh_20:	dc.b 1	
0000BE7B F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BE80 01                         SME_aSMQh_26:	dc.b 1	
0000BE81 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BE86 01                         SME_aSMQh_2C:	dc.b 1	
0000BE87 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BE8C 01                         SME_aSMQh_32:	dc.b 1	
0000BE8D F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BE92 01                         SME_aSMQh_38:	dc.b 1	
0000BE93 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BE98 01                         SME_aSMQh_3E:	dc.b 1	
0000BE99 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BE9E 01                         SME_aSMQh_44:	dc.b 1	
0000BE9F F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BEA4 01                         SME_aSMQh_4A:	dc.b 1	
0000BEA5 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BEAA                            		even
0000BEAA                            		even
0000BEAA                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            ; Sprite mappings - giant ring
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            Map_GRing_internal:
0000BEAA 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BEAC 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BEAE 0000                       		dc.w byte_A036-Map_GRing_internal
0000BEB0 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BEB2 0A                         byte_9FDA:	dc.b $A
0000BEB3 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BEB8 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BEBD E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BEC2 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BEC7 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BECC F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BED1 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BED6 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BEDB 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BEE0 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BEE5 08                         byte_A00D:	dc.b 8
0000BEE6 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BEEB E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BEF0 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BEF5 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BEFA F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BEFF 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BF04 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BF09 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BF0E 04                         byte_A036:	dc.b 4
0000BF0F E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BF14 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BF19 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BF1E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BF23 08                         byte_A04B:	dc.b 8
0000BF24 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BF29 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BF2E E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BF33 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BF38 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BF3D 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BF42 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BF47 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BF4C                            		even
0000BF4C                            		even
0000BF4C                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BF4C                            ; ---------------------------------------------------------------------------
0000BF4C                            ; Sprite mappings - flash effect when you collect the giant ring
0000BF4C                            ; ---------------------------------------------------------------------------
0000BF4C                            Map_Flash_internal:
0000BF4C 0000                       		dc.w byte_A084-Map_Flash_internal
0000BF4E 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BF50 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BF52 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BF54 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BF56 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BF58 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BF5A 0000                       		dc.w byte_A103-Map_Flash_internal
0000BF5C 02                         byte_A084:	dc.b 2
0000BF5D E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BF62 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BF67 04                         byte_A08F:	dc.b 4
0000BF68 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BF6D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BF72 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BF77 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BF7C 04                         byte_A0A4:	dc.b 4
0000BF7D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BF82 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BF87 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BF8C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BF91 04                         byte_A0B9:	dc.b 4
0000BF92 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BF97 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BF9C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BFA1 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BFA6 04                         byte_A0CE:	dc.b 4
0000BFA7 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BFAC E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BFB1 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BFB6 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BFBB 04                         byte_A0E3:	dc.b 4
0000BFBC E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BFC1 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BFC6 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BFCB 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BFD0 02                         byte_A0F8:	dc.b 2
0000BFD1 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BFD6 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BFDB 04                         byte_A103:	dc.b 4
0000BFDC E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BFE1 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BFE6 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BFEB 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BFF0                            		even
0000BFF0                            		even
0000BFF0                            		include	"_incObj\26 Monitor.asm"
0000BFF0                            ; ---------------------------------------------------------------------------
0000BFF0                            ; Object 26 - monitors
0000BFF0                            ; ---------------------------------------------------------------------------
0000BFF0                            
0000BFF0                            Monitor:
0000BFF0 7000                       		moveq	#0,d0
0000BFF2 1028 0024                  		move.b	obRoutine(a0),d0
0000BFF6 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BFFA 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BFFE                            ; ===========================================================================
0000BFFE 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C000 0000                       		dc.w Mon_Solid-Mon_Index
0000C002 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C004 0000                       		dc.w Mon_Animate-Mon_Index
0000C006 0000                       		dc.w Mon_Display-Mon_Index
0000C008                            ; ===========================================================================
0000C008                            
0000C008                            Mon_Main:	; Routine 0
0000C008 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C00C 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C012 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C018 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C020 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C026 117C 0004 0001             		move.b	#4,obRender(a0)
0000C02C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C032 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C038 45F8 FC00                  		lea	(v_objstate).w,a2
0000C03C 7000                       		moveq	#0,d0
0000C03E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C042 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C048 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C04E 6700                       		beq.s	@notbroken	; if not, branch
0000C050 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C056 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C05C 4E75                       		rts	
0000C05E                            ; ===========================================================================
0000C05E                            
0000C05E                            	@notbroken:
0000C05E 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C064 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C06A                            
0000C06A                            Mon_Solid:	; Routine 2
0000C06A 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C06E 6700                       		beq.s	@normal		; if not, branch
0000C070 5500                       		subq.b	#2,d0
0000C072 6600                       		bne.s	@fall
0000C074                            
0000C074                            		; 2nd Routine 2
0000C074 7200                       		moveq	#0,d1
0000C076 1228 0014                  		move.b	obActWid(a0),d1
0000C07A 0641 000B                  		addi.w	#$B,d1
0000C07E 6100 CDA0                  		bsr.w	ExitPlatform
0000C082 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C088 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C08C 4228 0025                  		clr.b	ob2ndRout(a0)
0000C090 6000 0000                  		bra.w	Mon_Animate
0000C094                            ; ===========================================================================
0000C094                            
0000C094                            	@ontop:
0000C094 363C 0010                  		move.w	#$10,d3
0000C098 3428 0008                  		move.w	obX(a0),d2
0000C09C 6100 D2E0                  		bsr.w	MvSonicOnPtfm
0000C0A0 6000 0000                  		bra.w	Mon_Animate
0000C0A4                            ; ===========================================================================
0000C0A4                            
0000C0A4                            @fall:		; 2nd Routine 4
0000C0A4 6100 0000                  		bsr.w	ObjectFall
0000C0A8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C0AE 4A41                       		tst.w	d1
0000C0B0 6A00 0000                  		bpl.w	Mon_Animate
0000C0B4 D368 000C                  		add.w	d1,obY(a0)
0000C0B8 4268 0012                  		clr.w	obVelY(a0)
0000C0BC 4228 0025                  		clr.b	ob2ndRout(a0)
0000C0C0 6000 0000                  		bra.w	Mon_Animate
0000C0C4                            ; ===========================================================================
0000C0C4                            
0000C0C4                            @normal:	; 2nd Routine 0
0000C0C4 323C 001A                  		move.w	#$1A,d1
0000C0C8 343C 000F                  		move.w	#$F,d2
0000C0CC 6100 0000                  		bsr.w	Mon_SolidSides
0000C0D0 6700 0000                  		beq.w	loc_A25C
0000C0D4 4A69 0012                  		tst.w	obVelY(a1)
0000C0D8 6B00                       		bmi.s	loc_A20A
0000C0DA 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C0E0 6700                       		beq.s	loc_A25C	; if yes, branch
0000C0E2 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C0E8 6700                       		beq.s	loc_A25C	; if yes, branch
0000C0EA 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C0F0 6700                       		beq.s	loc_A25C	; if yes, branch
0000C0F2                            
0000C0F2                            loc_A20A:
0000C0F2 4A41                       		tst.w	d1
0000C0F4 6A00                       		bpl.s	loc_A220
0000C0F6 9769 000C                  		sub.w	d3,obY(a1)
0000C0FA 6100 CC12                  		bsr.w	loc_74AE
0000C0FE 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C104 6000 0000                  		bra.w	Mon_Animate
0000C108                            ; ===========================================================================
0000C108                            
0000C108                            loc_A220:
0000C108 4A40                       		tst.w	d0
0000C10A 6700 0000                  		beq.w	loc_A246
0000C10E 6B00                       		bmi.s	loc_A230
0000C110 4A69 0010                  		tst.w	obVelX(a1)
0000C114 6B00                       		bmi.s	loc_A246
0000C116 6000                       		bra.s	loc_A236
0000C118                            ; ===========================================================================
0000C118                            
0000C118                            loc_A230:
0000C118 4A69 0010                  		tst.w	obVelX(a1)
0000C11C 6A00                       		bpl.s	loc_A246
0000C11E                            
0000C11E                            loc_A236:
0000C11E 9169 0008                  		sub.w	d0,obX(a1)
0000C122 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C128 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C12E                            
0000C12E                            loc_A246:
0000C12E 0829 0001 0022             		btst	#1,obStatus(a1)
0000C134 6600                       		bne.s	loc_A26A
0000C136 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C13C 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C142 6000                       		bra.s	Mon_Animate
0000C144                            ; ===========================================================================
0000C144                            
0000C144                            loc_A25C:
0000C144 0828 0005 0022             		btst	#5,obStatus(a0)
0000C14A 6700                       		beq.s	Mon_Animate
0000C14C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C152 6700                       		beq.s	loc_A26A	; if so, branch
0000C154 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C15A                            
0000C15A                            loc_A26A:
0000C15A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C160 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C166                            
0000C166                            Mon_Animate:	; Routine 6
0000C166 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C16C 6100 0000                  		bsr.w	AnimateSprite
0000C170                            
0000C170                            Mon_Display:	; Routine 8
0000C170 6100 0000                  		bsr.w	DisplaySprite
0000C192 4E75                       		rts	
0000C194                            ; ===========================================================================
0000C194                            
0000C194                            Mon_BreakOpen:	; Routine 4
0000C194 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C198 117C 0000 0020             		move.b	#0,obColType(a0)
0000C19E 6100 0000                  		bsr.w	FindFreeObj
0000C1A2 6600                       		bne.s	Mon_Explode
0000C1A4 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C1A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C1AE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C1B4 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C1BA                            
0000C1BA                            Mon_Explode:
0000C1BA 6100 0000                  		bsr.w	FindFreeObj
0000C1BE 6600                       		bne.s	@fail
0000C1C0 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C1C4 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C1C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C1CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C1D4                            
0000C1D4                            	@fail:
0000C1D4 45F8 FC00                  		lea	(v_objstate).w,a2
0000C1D8 7000                       		moveq	#0,d0
0000C1DA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C1DE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C1E4 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C1EA 6000 0000                  		bra.w	DisplaySprite
0000C1EA 6000 0000                  		bra.w	DisplaySprite
0000C1EE                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C1EE                            ; ---------------------------------------------------------------------------
0000C1EE                            ; Object 2E - contents of monitors
0000C1EE                            ; ---------------------------------------------------------------------------
0000C1EE                            
0000C1EE                            PowerUp:
0000C1EE 7000                       		moveq	#0,d0
0000C1F0 1028 0024                  		move.b	obRoutine(a0),d0
0000C1F4 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C1F8 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C1FC 6000 0000                  		bra.w	DisplaySprite
0000C200                            ; ===========================================================================
0000C200 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C202 0000                       		dc.w Pow_Move-Pow_Index
0000C204 0000                       		dc.w Pow_Delete-Pow_Index
0000C206                            ; ===========================================================================
0000C206                            
0000C206                            Pow_Main:	; Routine 0
0000C206 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C20A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C210 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C216 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C21C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C222 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C228 7000                       		moveq	#0,d0
0000C22A 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C22E 5400                       		addq.b	#2,d0
0000C230 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C234 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C23A D000                       		add.b	d0,d0
0000C23C D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C240 5249                       		addq.w	#1,a1
0000C242 2149 0004                  		move.l	a1,obMap(a0)
0000C246                            
0000C246                            Pow_Move:	; Routine 2
0000C246 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C24A 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C24E 6100 0000                  		bsr.w	SpeedToPos
0000C252 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C258 4E75                       		rts	
0000C25A                            ; ===========================================================================
0000C25A                            
0000C25A                            Pow_Checks:
0000C25A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C25E 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C264                            
0000C264                            Pow_ChkEggman:
0000C264 1028 001C                  		move.b	obAnim(a0),d0
0000C268 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C26C 6600                       		bne.s	Pow_ChkSonic
0000C26E                            		
0000C26E 4EF9 0000 0000             		jmp	Spik_Hurt
0000C274                            		
0000C274 4E75                       		rts
0000C276                            ; ===========================================================================
0000C276                            
0000C276                            Pow_ChkSonic:
0000C276 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C27A 6600                       		bne.s	Pow_ChkShoes
0000C27C                            
0000C27C                            	ExtraLife:
0000C27C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C280 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C28E                            
0000C28E                            ; ===========================================================================
0000C28E                            
0000C28E                            Pow_ChkShoes:
0000C28E 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C292 6600                       		bne.s	Pow_ChkShield
0000C294 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C29A 6700 0000                  		beq 	Pow_NoMus
0000C29E 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C2A4 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C2AA 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C2B0 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C2B6 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C2BC 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C2C0 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C2C2 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C2C8 6300                       			bls.s	Pow_NoMus
0000C2D4                            ; ===========================================================================
0000C2D4                            
0000C2D4                            Pow_NoMus:
0000C2D4 4E75                       		rts	
0000C2D6                            ; ===========================================================================
0000C2D6                            
0000C2D6                            Pow_ChkShield:
0000C2D6 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000C2DA 6600                               bne.s    Pow_ChkInvinc
0000C2DC                            
0000C2DC 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000C2E2 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C2E8 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C2EE 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C2F4 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C2FA 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C2FE 303C 0000                          move.w    #sfx_Shield,d0
0000C302 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C308                            ; ===========================================================================
0000C308                            
0000C308                            Pow_ChkInvinc:
0000C308 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C30C 6600                       		bne.s	Pow_ChkRings
0000C30E 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C314 6700 0000                  		beq 	Pow_NoMusic
0000C318 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C31E 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C324 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C32A 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C330 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C336 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C33C 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C342 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C348 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C34E 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C354 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C358 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C35A 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C360 6300                       			bls.s	Pow_NoMusic
0000C36C                            ; ===========================================================================
0000C36C                            
0000C36C                            Pow_NoMusic:
0000C36C 4E75                       		rts	
0000C36E                            ; ===========================================================================
0000C36E                            
0000C36E                            Pow_ChkRings:
0000C36E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C372 6600                       		bne.s	Pow_ChkS
0000C374                            
0000C374 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C37A 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C380 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C386 6500                       		bcs.s	Pow_RingSound
0000C388 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C38E 6700 FEEC                  		beq.w	ExtraLife
0000C392 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C398 6500                       		bcs.s	Pow_RingSound
0000C39A 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C3A0 6700 FEDA                  		beq.w	ExtraLife
0000C3A4                            
0000C3A4                            	Pow_RingSound:
0000C3AE                            ; ===========================================================================
0000C3AE                            
0000C3AE                            Pow_ChkS:
0000C3AE 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C3B2 6600                       		bne.s	Pow_ChkSRing
0000C3B4                            
0000C3B4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C3BA 6700                       		beq.s	PowS2	; if yes, branch
0000C3BC 0404 003B                  		subi.b	#$3B,d4
0000C3C0 7000                       		moveq	#0,d0
0000C3C2 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C3C8 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C3CE 6000                       		bra.s	PowSPlay
0000C3D0                            
0000C3D0                            PowS2:
0000C3D0 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C3D6 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C3DC 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C3E2 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C3E8 6500                       		bcs.s	PowSPlay
0000C3EA 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C3F0 6700 FE8A                  		beq.w	ExtraLife
0000C3F4 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C3FA 6500                       		bcs.s	PowSPlay
0000C3FC 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C402 6700 FE78                  		beq.w	ExtraLife	
0000C406                            
0000C406                            PowSPlay:
0000C406 4EB9 0000 0000             		jsr	WhiteFlash
0000C416                            
0000C416                            		
0000C416                            
0000C416                            
0000C416                            Pow_ChkSRing:
0000C416 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C41A 6600                       		bne.s	Pow_ChkRShield
0000C41C                            
0000C41C                            		
0000C41C 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C422 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C428 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C42E 6500                       		bcs.s	Pow_ChkSRingSound
0000C430 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C436 6700 FE44                  		beq.w	ExtraLife
0000C43A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C440 6500                       		bcs.s	Pow_ChkSRingSound
0000C442 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C448 6700 FE32                  		beq.w	ExtraLife	
0000C44C                            
0000C44C                            Pow_ChkSRingSound:
0000C456                            
0000C456                            
0000C456                            Pow_ChkRShield:
0000C456 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C45A 6600                               bne.s    Pow_ChkGShield
0000C45C                            
0000C45C 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C462 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C468 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C46E 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C474 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C47A 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C47E 303C 0000                          move.w    #sfx_FireShield,d0
0000C482 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C488                            
0000C488                            Pow_ChkGShield:
0000C488 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C48C 6600                               bne.s    Pow_ChkSpShield
0000C48E                            
0000C48E 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C494 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C49A 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C4A0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C4A6 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C4AC 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C4B0 303C 0000                          move.w    #sfx_LightningShield,d0
0000C4B4 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C4BA                            
0000C4BA                            Pow_ChkSpShield:
0000C4BA 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C4BE 66FA                               bne.s    Pow_ChkSpShield
0000C4C0                            
0000C4C0 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C4C6 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C4CC 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C4D2 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C4D8 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C4DE 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C4E2 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C4E6 4EF9 0000 12FE                     jmp    (PlaySound_Special).l    ; play shield sound
0000C4EC                            
0000C4EC                            Pow_ChkEnd:
0000C4EC 4E75                       		rts
0000C4EE                            ; ===========================================================================
0000C4EE                            
0000C4EE                            Pow_Delete:	; Routine 4
0000C4EE 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C4F2 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C4F6 4E75                       		rts	
0000C4F6 4E75                       		rts	
0000C4F8                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C4F8                            ; ---------------------------------------------------------------------------
0000C4F8                            ; Subroutine to	make the sides of a monitor solid
0000C4F8                            ; ---------------------------------------------------------------------------
0000C4F8                            
0000C4F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4F8                            
0000C4F8                            
0000C4F8                            Mon_SolidSides:
0000C4F8 43F8 D000                  		lea	(v_player).w,a1
0000C4FC 3029 0008                  		move.w	obX(a1),d0
0000C500 9068 0008                  		sub.w	obX(a0),d0
0000C504 D041                       		add.w	d1,d0
0000C506 6B00                       		bmi.s	loc_A4E6
0000C508 3601                       		move.w	d1,d3
0000C50A D643                       		add.w	d3,d3
0000C50C B043                       		cmp.w	d3,d0
0000C50E 6200                       		bhi.s	loc_A4E6
0000C510 1629 0016                  		move.b	obHeight(a1),d3
0000C514 4883                       		ext.w	d3
0000C516 D443                       		add.w	d3,d2
0000C518 3629 000C                  		move.w	obY(a1),d3
0000C51C 9668 000C                  		sub.w	obY(a0),d3
0000C520 D642                       		add.w	d2,d3
0000C522 6B00                       		bmi.s	loc_A4E6
0000C524 D442                       		add.w	d2,d2
0000C526 B642                       		cmp.w	d2,d3
0000C528 6400                       		bcc.s	loc_A4E6
0000C52A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C52E 6B00                       		bmi.s	loc_A4E6
0000C530 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C536 6400                       		bcc.s	loc_A4E6
0000C538 4A78 FE08                  		tst.w	(v_debuguse).w
0000C53C 6600                       		bne.s	loc_A4E6
0000C53E B240                       		cmp.w	d0,d1
0000C540 6400                       		bcc.s	loc_A4DC
0000C542 D241                       		add.w	d1,d1
0000C544 9041                       		sub.w	d1,d0
0000C546                            
0000C546                            loc_A4DC:
0000C546 0C43 0010                  		cmpi.w	#$10,d3
0000C54A 6500                       		bcs.s	loc_A4EA
0000C54C                            
0000C54C                            loc_A4E2:
0000C54C 7201                       		moveq	#1,d1
0000C54E 4E75                       		rts	
0000C550                            ; ===========================================================================
0000C550                            
0000C550                            loc_A4E6:
0000C550 7200                       		moveq	#0,d1
0000C552 4E75                       		rts	
0000C554                            ; ===========================================================================
0000C554                            
0000C554                            loc_A4EA:
0000C554 7200                       		moveq	#0,d1
0000C556 1228 0014                  		move.b	obActWid(a0),d1
0000C55A 5841                       		addq.w	#4,d1
0000C55C 3401                       		move.w	d1,d2
0000C55E D442                       		add.w	d2,d2
0000C560 D269 0008                  		add.w	obX(a1),d1
0000C564 9268 0008                  		sub.w	obX(a0),d1
0000C568 6BE2                       		bmi.s	loc_A4E2
0000C56A B242                       		cmp.w	d2,d1
0000C56C 64DE                       		bcc.s	loc_A4E2
0000C56E 72FF                       		moveq	#-1,d1
0000C570 4E75                       		rts	
0000C572                            ; End of function Obj26_SolidSides
0000C572                            ; End of function Obj26_SolidSides
0000C572                            		include	"_anim\Monitor.asm"
0000C572                            ; ---------------------------------------------------------------------------
0000C572                            ; Animation script - monitors
0000C572                            ; ---------------------------------------------------------------------------
0000C572 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C578 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C57E 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C584 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C58A 0000                       		dc.w @spshield-Ani_Monitor
0000C58C                            		
0000C58C 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C592 00                         		even
0000C592 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C59E 00                         		even
0000C59E 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C5AA 00                         		even
0000C5AA 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C5B6 00                         		even
0000C5B6 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C5C2 00                         		even
0000C5C2 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C5CE 00                         		even
0000C5CE 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C5DA 00                         		even
0000C5DA 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C5E6 00                         		even
0000C5E6 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C5F2 00                         		even
0000C5F2 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C5FA 00                         		even
0000C5FA 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C606 00                         		even
0000C606 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C612 00                         		even
0000C612 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C61E 00                         		even
0000C61E 00                         		even
0000C61E                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C61E                            ; --------------------------------------------------------------------------------
0000C61E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C61E                            ; --------------------------------------------------------------------------------
0000C61E                            
0000C61E                            SME_0IgQe:	
0000C61E 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C622 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C626 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C62A 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C62E 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C632 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C636 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C63A 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C63C 01                         SME_0IgQe_1E:	dc.b 1	
0000C63D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C642 02                         SME_0IgQe_24:	dc.b 2	
0000C643 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C648 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C64D 02                         SME_0IgQe_2F:	dc.b 2	
0000C64E F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C653 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C658 02                         SME_0IgQe_3A:	dc.b 2	
0000C659 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C65E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C663 02                         SME_0IgQe_45:	dc.b 2	
0000C664 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C669 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C66E 02                         SME_0IgQe_50:	dc.b 2	
0000C66F F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C674 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C679 02                         SME_0IgQe_5B:	dc.b 2	
0000C67A F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C67F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C684 02                         SME_0IgQe_66:	dc.b 2	
0000C685 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C68A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C68F 02                         SME_0IgQe_71:	dc.b 2	
0000C690 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C695 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C69A 02                         SME_0IgQe_7C:	dc.b 2	
0000C69B F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C6A0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6A5 02                         SME_0IgQe_87:	dc.b 2	
0000C6A6 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C6AB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6B0 05                         SME_0IgQe_92:	dc.b 5	
0000C6B1 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C6B6 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C6BB 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C6C0 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C6C5 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C6CA 02                         SME_0IgQe_AC:	dc.b 2	
0000C6CB F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C6D0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6D5 02                         SME_0IgQe_B7:	dc.b 2	
0000C6D6 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C6DB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6E0 02                         SME_0IgQe_C2:	dc.b 2	
0000C6E1 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C6E6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6EC 00                         		even
0000C6EC 00                         		even
0000C6EC                            
0000C6EC                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C6EC                            ; ---------------------------------------------------------------------------
0000C6EC                            ; Object 0E - Sonic on the title screen
0000C6EC                            ; ---------------------------------------------------------------------------
0000C6EC                            
0000C6EC                            TitleSonic:
0000C6EC 7000                       		moveq	#0,d0
0000C6EE 1028 0024                  		move.b	obRoutine(a0),d0
0000C6F2 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C6F6 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C6FA                            ; ===========================================================================
0000C6FA 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C6FC 0000                       		dc.w TSon_Delay-TSon_Index
0000C6FE 0000                       		dc.w TSon_Move-TSon_Index
0000C700 0000                       		dc.w TSon_Animate-TSon_Index
0000C702                            ; ===========================================================================
0000C702                            
0000C702                            TSon_Main:	; Routine 0
0000C702 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C706 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C70C 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C712 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C71A 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C720 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C726 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C72C 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C732 6100 0000                  		bsr.w	AnimateSprite
0000C736                            
0000C736                            TSon_Delay:	;Routine 2
0000C736 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C73A 6A00                       		bpl.s	@wait		; if time remains, branch
0000C73C 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C740 6000 0000                  		bra.w	DisplaySprite
0000C744                            
0000C744                            	@wait:
0000C744 4E75                       		rts	
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            TSon_Move:	; Routine 4
0000C746 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C74A 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C750 6600                       		bne.s	@display	; if not, branch
0000C752 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C756                            
0000C756                            	@display:
0000C756 6000 0000                  		bra.w	DisplaySprite
0000C75A                            
0000C75A 4E75                       		rts	
0000C75C                            ; ===========================================================================
0000C75C                            
0000C75C                            TSon_Animate:	; Routine 6
0000C75C 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C762 6100 0000                  		bsr.w	AnimateSprite
0000C766 6000 0000                  		bra.w	DisplaySprite
0000C76A                            
0000C76A 4E75                       		rts	
0000C76A 4E75                       		rts	
0000C76C                            		include	"_incObj\0F Press Start and TM.asm"
0000C76C                            ; ---------------------------------------------------------------------------
0000C76C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C76C                            ; ---------------------------------------------------------------------------
0000C76C                            
0000C76C                            PSBTM:
0000C76C 7000                       		moveq	#0,d0
0000C76E 1028 0024                  		move.b	obRoutine(a0),d0
0000C772 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C776 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C77A 6000 0000                  		bra.w	DisplaySprite
0000C77E                            ; ===========================================================================
0000C77E 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C780 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C782 0000                       		dc.w PSB_Exit-PSB_Index
0000C784 0000                       		dc.w PSB_Menu-PSB_Index		
0000C786                            ; ===========================================================================
0000C786                            
0000C786                            PSB_Main:	; Routine 0
0000C786 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C78A 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C790 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C796 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C79E 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C7A4 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C7AA 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C7AC                            
0000C7AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C7B0 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C7B6 6600                       		bne.s	PSB_Exit	; if not, branch
0000C7B8                            
0000C7B8 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C7BE 317C 0170 0008             		move.w	#$170,obX(a0)
0000C7C4 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C7CA                            
0000C7CA                            PSB_Exit:	; Routine 4
0000C7CA 4E75                       		rts	
0000C7CC                            ; ===========================================================================
0000C7CC                            
0000C7CC                            PSB_PrsStart:	; Routine 2
0000C7CC 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C7D2 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C7D4 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C7D8 303C 00A1                  		move.w   #$A1,d0 
0000C7DC 4EB8 12FE                  		jsr   PlaySound_Special
0000C7E0 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C7E6 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C7EE 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C7F4 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C7FA 4E75                       		rts
0000C7FC                            
0000C7FC                            PSB_PrsStart_Show:
0000C7FC 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C802 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C806                            
0000C806                            PSB_Menu:
0000C806 7400                             moveq   #0,d2
0000C808 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C80C 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C810 0800 0000                        btst   #0,d0
0000C814 6700                             beq.s   MAIN2
0000C816 5302                             subq.b   #1,d2
0000C818 6400                             bcc.s   MAIN2
0000C81A 143C 0001                        move.b   #1,d2
0000C81E                            
0000C81E                            MAIN2:
0000C81E 0800 0001                        btst   #1,d0
0000C822 6700                             beq.s   MAIN3
0000C824 5202                             addq.b   #1,d2
0000C826 0C02 0002                        cmpi.b   #2,d2
0000C82A 6500                             blo.s   MAIN3
0000C82C 7400                             moveq   #0,d2
0000C82E                            
0000C82E                            MAIN3:
0000C82E 1142 001A                        move.b   d2,$1A(a0)
0000C832 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C836 0200 0003                        andi.b   #3,d0
0000C83A 6700                             beq.s   MAIN4   
0000C83C 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C840 4EB8 12FE                        jsr   PlaySound_Special
0000C844                            
0000C844                            MAIN4:
0000C844 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C84A 6700                             beq.s   MENURTS   ; if not, branch
0000C84C 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C852                            
0000C852                            MENURTS:
0000C852 4E75                             rts															 
0000C854                            ; ===========================================================================
0000C854                            
0000C854                            
0000C854                            Map_TitleMenu:
0000C854                            		include "_maps\Title Screen Menu.asm"		
0000C854                            ; --------------------------------------------------------------------------------
0000C854                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C854                            ; --------------------------------------------------------------------------------
0000C854                            
0000C854                            SME_g2Qfx:	
0000C854 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C858 10                         SME_g2Qfx_6:	dc.b $10	
0000C859 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C85E E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C863 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C868 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C86D E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C872 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C877 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C87C E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C881 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C886 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C88B F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C890 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C895 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C89A F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C89F F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C8A4 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C8A9 10                         SME_g2Qfx_6B:	dc.b $10	
0000C8AA E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C8AF E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C8B4 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C8B9 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C8BE E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C8C3 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C8C8 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C8CD E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C8D2 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C8D7 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C8DC F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C8E1 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C8E6 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C8EB F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C8F0 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C8F5 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C8FA                            		even
0000C8FA                            		even
0000C8FA                            		even
0000C8FA                            
0000C8FA                            		include	"_anim\Title Screen Sonic.asm"
0000C8FA                            ; ---------------------------------------------------------------------------
0000C8FA                            ; Animation script - Sonic on the title screen
0000C8FA                            ; ---------------------------------------------------------------------------
0000C8FA 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C8FC 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C908 00                         		even
0000C908 00                         		even
0000C908                            		include	"_anim\Press Start and TM.asm"
0000C908                            ; ---------------------------------------------------------------------------
0000C908                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C908                            ; ---------------------------------------------------------------------------
0000C908 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C90A 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C90E                            		even
0000C90E                            		even
0000C90E                            
0000C90E                            		include	"_incObj\sub AnimateSprite.asm"
0000C90E                            ; ---------------------------------------------------------------------------
0000C90E                            ; Subroutine to	animate	a sprite using an animation script
0000C90E                            ; ---------------------------------------------------------------------------
0000C90E                            
0000C90E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C90E                            
0000C90E                            
0000C90E                            AnimateSprite:
0000C90E 7000                       		moveq	#0,d0
0000C910 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C914 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C918 6700                       		beq.s	Anim_Run	; if not, branch
0000C91A                            
0000C91A 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C91E 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C924 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C92A                            
0000C92A                            Anim_Run:
0000C92A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C92E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C930 D040                       		add.w	d0,d0
0000C932 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C936 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C93A 7200                       		moveq	#0,d1
0000C93C 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C940 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C944 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C946                            
0000C946                            Anim_Next:
0000C946 1200                       		move.b	d0,d1
0000C948 0200 001F                  		andi.b	#$1F,d0
0000C94C 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C950 1028 0022                  		move.b	obStatus(a0),d0
0000C954 E719                       		rol.b	#3,d1
0000C956 B101                       		eor.b	d0,d1
0000C958 0201 0003                  		andi.b	#3,d1
0000C95C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C962 8328 0001                  		or.b	d1,obRender(a0)
0000C966 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C96A                            
0000C96A                            Anim_Wait:
0000C96A 4E75                       		rts	
0000C96C                            ; ===========================================================================
0000C96C                            
0000C96C                            Anim_End_FF:
0000C96C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C96E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C970 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C976 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C97A 60CA                       		bra.s	Anim_Next
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            Anim_End_FE:
0000C97C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C97E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C980 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C984 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C988 9200                       		sub.b	d0,d1
0000C98A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C98E 60B6                       		bra.s	Anim_Next
0000C990                            ; ===========================================================================
0000C990                            
0000C990                            Anim_End_FD:
0000C990 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C992 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C994 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C99A                            
0000C99A                            Anim_End_FC:
0000C99A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C99C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C99E 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C9A2                            
0000C9A2                            Anim_End_FB:
0000C9A2 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C9A4 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C9A6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C9AC 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C9B0                            
0000C9B0                            Anim_End_FA:
0000C9B0 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C9B2 6600                       		bne.s	Anim_End	; if not, branch
0000C9B4 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C9B8                            
0000C9B8                            Anim_End:
0000C9B8 4E75                       		rts	
0000C9BA                            ; End of function AnimateSprite
0000C9BA                            ; End of function AnimateSprite
0000C9BA                            
0000C9BA                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C9BA                            ; ---------------------------------------------------------------------------
0000C9BA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C9BA                            ; ---------------------------------------------------------------------------
0000C9BA                            Map_PSB_internal:
0000C9BA 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C9BC 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C9BE 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C9C0 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C9C2 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C9C3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C9C8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C9CD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C9D2 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C9D7 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C9DC 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C9E1 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C9E2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9E7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9EC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9F1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9F6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9FB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA00 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA05 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA0A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA0F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA14 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA19 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA1E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA23 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA28 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA2D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA32 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA37 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA3C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA41 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA46 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA4B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA50 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA55 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA5A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA5F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA64 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA69 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA6E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA73 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA78 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CA79 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CA7E                            		even
0000CA7E                            		even
0000CA7E                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CA7E                            ; ---------------------------------------------------------------------------
0000CA7E                            ; Sprite mappings - Sonic on the title screen
0000CA7E                            ; ---------------------------------------------------------------------------
0000CA7E                            Map_TSon_internal:
0000CA7E 0000                       		dc.w byte_A898-Map_TSon_internal
0000CA80 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CA82 0000                       		dc.w byte_A917-Map_TSon_internal
0000CA84 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CA86 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CA88 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CA8A 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CA8C 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CA8E 0A                         byte_A898:	dc.b $A
0000CA8F 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CA94 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CA99 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CA9E 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CAA3 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CAA8 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CAAD 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CAB2 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CAB7 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CABC 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CAC1 0F                         byte_A8CB:	dc.b $F
0000CAC2 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CAC7 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CACC 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CAD1 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CAD6 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CADB 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CAE0 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CAE5 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CAEA 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CAEF 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CAF4 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CAF9 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CAFE 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CB03 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CB08 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CB0D 11                         byte_A917:	dc.b $11
0000CB0E 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CB13 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CB18 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CB1D 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CB22 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CB27 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CB2C 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CB31 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CB36 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CB3B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CB40 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CB45 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CB4A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CB4F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CB54 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CB59 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CB5E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CB63 0D                         byte_A96D:	dc.b $D
0000CB64 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CB69 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CB6E 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CB73 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CB78 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CB7D 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CB82 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CB87 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CB8C 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CB91 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CB96 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CB9B 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CBA0 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CBA5 0B                         byte_A9AF:	dc.b $B
0000CBA6 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CBAB 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CBB0 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CBB5 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CBBA 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CBBF 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CBC4 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CBC9 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CBCE 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CBD3 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CBD8 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CBDD 13                         byte_A9E7:	dc.b $13
0000CBDE 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CBE3 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CBE8 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CBED 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CBF2 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBF7 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBFC 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC01 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC06 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC0B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC10 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC15 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC1A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC1F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC24 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC29 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC2E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC33 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC38 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC3D 15                         byte_AA47:	dc.b $15
0000CC3E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CC43 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CC48 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CC4D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CC52 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC57 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC5C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC61 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC66 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC6B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC70 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC75 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC7A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC7F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC84 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC89 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC8E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC93 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC98 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC9D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CCA2 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CCA7 16                         byte_AAB1:	dc.b $16
0000CCA8 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CCAD 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CCB2 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CCB7 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CCBC 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CCC1 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CCC6 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CCCB 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CCD0 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CCD5 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CCDA 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CCDF 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CCE4 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CCE9 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CCEE 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CCF3 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CCF8 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CCFD 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CD02 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CD07 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CD0C 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CD11 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CD16                            		even
0000CD16                            		even
0000CD16                            
0000CD16                            		include	"_incObj\2B Chopper.asm"
0000CD16                            ; ---------------------------------------------------------------------------
0000CD16                            ; Object 2B - Chopper enemy (GHZ)
0000CD16                            ; ---------------------------------------------------------------------------
0000CD16                            
0000CD16                            Chopper:
0000CD16 7000                       		moveq	#0,d0
0000CD18 1028 0024                  		move.b	obRoutine(a0),d0
0000CD1C 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CD20 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CD24 6000 0000                  		bra.w	RememberState
0000CD28                            ; ===========================================================================
0000CD28 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CD2A 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CD2C                            
0000CD2C =00000030                  chop_origY:	equ $30
0000CD2C                            ; ===========================================================================
0000CD2C                            
0000CD2C                            Chop_Main:	; Routine 0
0000CD2C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD30 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CD38 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CD3E 117C 0004 0001             		move.b	#4,obRender(a0)
0000CD44 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD4A 117C 0009 0020             		move.b	#9,obColType(a0)
0000CD50 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD56 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CD5C 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CD62                            
0000CD62                            Chop_ChgSpeed:	; Routine 2
0000CD62 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CD68 6100 FBA4                  		bsr.w	AnimateSprite
0000CD6C 6100 0000                  		bsr.w	SpeedToPos
0000CD70 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CD76 3028 0030                  		move.w	chop_origY(a0),d0
0000CD7A B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CD7E 6400                       		bcc.s	@chganimation	; if not, branch
0000CD80 3140 000C                  		move.w	d0,obY(a0)
0000CD84 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CD8A                            
0000CD8A                            	@chganimation:
0000CD8A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CD90 0440 00C0                  		subi.w	#$C0,d0
0000CD94 B068 000C                  		cmp.w	obY(a0),d0
0000CD98 6400                       		bcc.s	@nochg
0000CD9A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CDA0 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CDA4 6B00                       		bmi.s	@nochg		; if not, branch
0000CDA6 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CDAC                            
0000CDAC                            	@nochg:
0000CDAC 4E75                       		rts	
0000CDAC 4E75                       		rts	
0000CDAE                            		include	"_anim\Chopper.asm"
0000CDAE                            ; ---------------------------------------------------------------------------
0000CDAE                            ; Animation script - Chopper enemy
0000CDAE                            ; ---------------------------------------------------------------------------
0000CDAE 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CDB0 0000                       		dc.w @fast-Ani_Chop
0000CDB2 0000                       		dc.w @still-Ani_Chop
0000CDB4 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CDB8 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CDBC 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CDC0 00                         		even
0000CDC0 00                         		even
0000CDC0                            Map_Chop:	include	"_maps\Chopper.asm"
0000CDC0                            ; ---------------------------------------------------------------------------
0000CDC0                            ; Sprite mappings - Chopper enemy (GHZ)
0000CDC0                            ; ---------------------------------------------------------------------------
0000CDC0                            Map_Chop_internal:
0000CDC0 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CDC2 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CDC4 01                         @mouthshut:	dc.b 1
0000CDC5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CDCA 01                         @mouthopen:	dc.b 1
0000CDCB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CDD0                            		even
0000CDD0                            		even
0000CDD0                            		include	"_incObj\2C Jaws.asm"
0000CDD0                            ; ---------------------------------------------------------------------------
0000CDD0                            ; Object 2C - Jaws enemy (LZ)
0000CDD0                            ; ---------------------------------------------------------------------------
0000CDD0                            
0000CDD0                            Jaws:
0000CDD0 7000                       		moveq	#0,d0
0000CDD2 1028 0024                  		move.b	obRoutine(a0),d0
0000CDD6 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CDDA 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CDDE                            ; ===========================================================================
0000CDDE 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CDE0 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CDE2                            
0000CDE2 =00000030                  jaws_timecount:	equ $30
0000CDE2 =00000032                  jaws_timedelay:	equ $32
0000CDE2                            ; ===========================================================================
0000CDE2                            
0000CDE2                            Jaws_Main:	; Routine 0
0000CDE2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CDE6 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CDEE 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CDF4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CDFA 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CE00 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE06 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CE0C 7000                       		moveq	#0,d0
0000CE0E 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CE12 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CE14 5340                       		subq.w	#1,d0
0000CE16 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CE1A 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CE1E 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CE24 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CE2A 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CE2C 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CE30                            
0000CE30                            Jaws_Turn:	; Routine 2
0000CE30 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CE34 6A00                       		bpl.s	@animate	; if time remains, branch
0000CE36 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CE3C 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CE40 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CE46 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CE4C                            
0000CE4C                            	@animate:
0000CE4C 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CE52 6100 FABA                  		bsr.w	AnimateSprite
0000CE56 6100 0000                  		bsr.w	SpeedToPos
0000CE5A 6000 0000                  		bra.w	RememberState
0000CE5A 6000 0000                  		bra.w	RememberState
0000CE5E                            		include	"_anim\Jaws.asm"
0000CE5E                            ; ---------------------------------------------------------------------------
0000CE5E                            ; Animation script - Jaws enemy
0000CE5E                            ; ---------------------------------------------------------------------------
0000CE5E 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CE60 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CE66                            		even
0000CE66                            		even
0000CE66                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CE66                            ; --------------------------------------------------------------------------------
0000CE66                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CE66                            ; --------------------------------------------------------------------------------
0000CE66                            
0000CE66                            SME_O5C0c:	
0000CE66 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CE6A 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CE6E 02                         SME_O5C0c_8:	dc.b 2	
0000CE6F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CE74 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CE79 02                         SME_O5C0c_13:	dc.b 2	
0000CE7A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CE7F F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CE84 02                         SME_O5C0c_1E:	dc.b 2	
0000CE85 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CE8A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CE8F 02                         SME_O5C0c_29:	dc.b 2	
0000CE90 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CE95 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CE9A                            		even
0000CE9A                            		even
0000CE9A                            		include	"_incObj\2D Burrobot.asm"
0000CE9A                            ; ---------------------------------------------------------------------------
0000CE9A                            ; Object 2D - Burrobot enemy (LZ)
0000CE9A                            ; ---------------------------------------------------------------------------
0000CE9A                            
0000CE9A                            Burrobot:
0000CE9A 7000                       		moveq	#0,d0
0000CE9C 1028 0024                  		move.b	obRoutine(a0),d0
0000CEA0 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CEA4 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CEA8                            ; ===========================================================================
0000CEA8 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CEAA 0000                       		dc.w Burro_Action-Burro_Index
0000CEAC                            
0000CEAC =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CEAC                            ; ===========================================================================
0000CEAC                            
0000CEAC                            Burro_Main:	; Routine 0
0000CEAC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CEB0 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CEB6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CEBC 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CEC4 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CECA 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CED0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CED6 117C 0005 0020             		move.b	#5,obColType(a0)
0000CEDC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CEE2 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CEE6 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CEEC                            
0000CEEC                            Burro_Action:	; Routine 2
0000CEEC 7000                       		moveq	#0,d0
0000CEEE 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CEF2 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CEF6 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CEFA 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CF00 6100 FA0C                  		bsr.w	AnimateSprite
0000CF04 6000 0000                  		bra.w	RememberState
0000CF08                            ; ===========================================================================
0000CF08 0000                       @index:		dc.w @changedir-@index
0000CF0A 0000                       		dc.w Burro_Move-@index
0000CF0C 0000                       		dc.w Burro_Jump-@index
0000CF0E 0000                       		dc.w Burro_ChkSonic-@index
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            @changedir:
0000CF10 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CF14 6A00                       		bpl.s	@nochg
0000CF16 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CF1A 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CF20 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CF26 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF2C 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CF32 6700                       		beq.s	@nochg
0000CF34 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CF38                            
0000CF38                            	@nochg:
0000CF38 4E75                       		rts	
0000CF3A                            ; ===========================================================================
0000CF3A                            
0000CF3A                            Burro_Move:
0000CF3A 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CF3E 6B00                       		bmi.s	loc_AD84
0000CF40 6100 0000                  		bsr.w	SpeedToPos
0000CF44 0868 0000 0032             		bchg	#0,$32(a0)
0000CF4A 6600                       		bne.s	loc_AD78
0000CF4C 3628 0008                  		move.w	obX(a0),d3
0000CF50 0643 000C                  		addi.w	#$C,d3
0000CF54 0828 0000 0022             		btst	#0,obStatus(a0)
0000CF5A 6600                       		bne.s	loc_AD6A
0000CF5C 0443 0018                  		subi.w	#$18,d3
0000CF60                            
0000CF60                            loc_AD6A:
0000CF60 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CF66 0C41 000C                  		cmpi.w	#$C,d1
0000CF6A 6C00                       		bge.s	loc_AD84
0000CF6C 4E75                       		rts	
0000CF6E                            ; ===========================================================================
0000CF6E                            
0000CF6E                            loc_AD78:
0000CF6E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF74 D368 000C                  		add.w	d1,obY(a0)
0000CF78 4E75                       		rts	
0000CF7A                            ; ===========================================================================
0000CF7A                            
0000CF7A                            loc_AD84:
0000CF7A 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CF80 6700                       		beq.s	loc_ADA4
0000CF82 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF86 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CF8C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CF92 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CF98 4E75                       		rts	
0000CF9A                            ; ===========================================================================
0000CF9A                            
0000CF9A                            loc_ADA4:
0000CF9A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CF9E 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CFA4 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CFAA 4E75                       		rts	
0000CFAC                            ; ===========================================================================
0000CFAC                            
0000CFAC                            Burro_Jump:
0000CFAC 6100 0000                  		bsr.w	SpeedToPos
0000CFB0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CFB6 6B00                       		bmi.s	locret_ADF0
0000CFB8 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CFBE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CFC4 4A41                       		tst.w	d1
0000CFC6 6A00                       		bpl.s	locret_ADF0
0000CFC8 D368 000C                  		add.w	d1,obY(a0)
0000CFCC 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CFD2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CFD8 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CFDE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CFE2 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CFE6                            
0000CFE6                            locret_ADF0:
0000CFE6 4E75                       		rts	
0000CFE8                            ; ===========================================================================
0000CFE8                            
0000CFE8                            Burro_ChkSonic:
0000CFE8 343C 0060                  		move.w	#$60,d2
0000CFEC 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CFF0 6400                       		bcc.s	locret_AE20
0000CFF2 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CFF6 9068 000C                  		sub.w	obY(a0),d0
0000CFFA 6400                       		bcc.s	locret_AE20
0000CFFC 0C40 FF80                  		cmpi.w	#-$80,d0
0000D000 6500                       		bcs.s	locret_AE20
0000D002 4A78 FE08                  		tst.w	(v_debuguse).w
0000D006 6600                       		bne.s	locret_AE20
0000D008 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D00C 3141 0010                  		move.w	d1,obVelX(a0)
0000D010 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D016                            
0000D016                            locret_AE20:
0000D016 4E75                       		rts	
0000D018                            
0000D018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D018                            
0000D018                            
0000D018                            Burro_ChkSonic2:
0000D018 323C 0080                  		move.w	#$80,d1
0000D01C 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D022 3038 D008                  		move.w	(v_player+obX).w,d0
0000D026 9068 0008                  		sub.w	obX(a0),d0
0000D02A 6400                       		bcc.s	loc_AE40
0000D02C 4440                       		neg.w	d0
0000D02E 4441                       		neg.w	d1
0000D030 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D036                            
0000D036                            loc_AE40:
0000D036 B042                       		cmp.w	d2,d0
0000D038 4E75                       		rts	
0000D03A                            ; End of function Burro_ChkSonic2
0000D03A                            ; End of function Burro_ChkSonic2
0000D03A                            		include	"_anim\Burrobot.asm"
0000D03A                            ; ---------------------------------------------------------------------------
0000D03A                            ; Animation script - Burrobot enemy
0000D03A                            ; ---------------------------------------------------------------------------
0000D03A 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D03C 0000                       		dc.w @walk2-Ani_Burro
0000D03E 0000                       		dc.w @digging-Ani_Burro
0000D040 0000                       		dc.w @fall-Ani_Burro
0000D042 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D046 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D04A 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D04E 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D052 00                         		even
0000D052 00                         		even
0000D052                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D052                            ; --------------------------------------------------------------------------------
0000D052                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D052                            ; --------------------------------------------------------------------------------
0000D052                            
0000D052                            SME_Ag_86:	
0000D052 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D056 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D05A 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D05E 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D060 02                         SME_Ag_86_E:	dc.b 2	
0000D061 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D066 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D06B 02                         SME_Ag_86_19:	dc.b 2	
0000D06C EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D071 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D076 02                         SME_Ag_86_24:	dc.b 2	
0000D077 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D07C 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D081 02                         SME_Ag_86_2F:	dc.b 2	
0000D082 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D087 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D08C 02                         SME_Ag_86_3A:	dc.b 2	
0000D08D E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D092 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D097 02                         SME_Ag_86_45:	dc.b 2	
0000D098 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D09D F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D0A2 02                         SME_Ag_86_50:	dc.b 2	
0000D0A3 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D0A8 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D0AE 00                         		even
0000D0AE 00                         		even
0000D0AE                            
0000D0AE                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE                            ; Object 2F - large grass-covered platforms (MZ)
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE                            
0000D0AE                            LargeGrass:
0000D0AE 7000                       		moveq	#0,d0
0000D0B0 1028 0024                  		move.b	obRoutine(a0),d0
0000D0B4 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D0B8 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D0BC                            ; ===========================================================================
0000D0BC 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D0BE 0000                       		dc.w LGrass_Action-LGrass_Index
0000D0C0                            
0000D0C0 =0000002A                  lgrass_origX:	equ $2A
0000D0C0 =0000002C                  lgrass_origY:	equ $2C
0000D0C0                            
0000D0C0 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D0C2 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D0C4 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D0C6 0140                       		dc.b 1,	$40
0000D0C8 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D0CA 0220                       		dc.b 2,	$20
0000D0CC                            ; ===========================================================================
0000D0CC                            
0000D0CC                            LGrass_Main:	; Routine 0
0000D0CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D0D0 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D0D8 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D0DE 117C 0004 0001             		move.b	#4,obRender(a0)
0000D0E4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D0EA 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D0F0 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D0F6 7000                       		moveq	#0,d0
0000D0F8 1028 0028                  		move.b	obSubtype(a0),d0
0000D0FC E448                       		lsr.w	#2,d0
0000D0FE 0240 001C                  		andi.w	#$1C,d0
0000D102 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D106 3019                       		move.w	(a1)+,d0
0000D108 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D10C 214A 0030                  		move.l	a2,$30(a0)
0000D110 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D114 1151 0014                  		move.b	(a1),obActWid(a0)
0000D118 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D11E 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D124 08E8 0004 0001             		bset	#4,1(a0)
0000D12A                            
0000D12A                            LGrass_Action:	; Routine 2
0000D12A 6100 0000                  		bsr.w	LGrass_Types
0000D12E 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D132 6700                       		beq.s	LGrass_Solid
0000D134 7200                       		moveq	#0,d1
0000D136 1228 0014                  		move.b	obActWid(a0),d1
0000D13A 0641 000B                  		addi.w	#$B,d1
0000D13E 6100 BCE0                  		bsr.w	ExitPlatform
0000D142 0829 0003 0022             		btst	#3,obStatus(a1)
0000D148 6600 0000                  		bne.w	LGrass_Slope
0000D14C 4228 0025                  		clr.b	ob2ndRout(a0)
0000D150 6000                       		bra.s	LGrass_Display
0000D152                            ; ===========================================================================
0000D152                            
0000D152                            LGrass_Slope:
0000D152 7200                       		moveq	#0,d1
0000D154 1228 0014                  		move.b	obActWid(a0),d1
0000D158 0641 000B                  		addi.w	#$B,d1
0000D15C 2468 0030                  		movea.l	$30(a0),a2
0000D160 3428 0008                  		move.w	obX(a0),d2
0000D164 6100 CC54                  		bsr.w	SlopeObject2
0000D168 6000                       		bra.s	LGrass_Display
0000D16A                            ; ===========================================================================
0000D16A                            
0000D16A                            LGrass_Solid:
0000D16A 7200                       		moveq	#0,d1
0000D16C 1228 0014                  		move.b	obActWid(a0),d1
0000D170 0641 000B                  		addi.w	#$B,d1
0000D174 343C 0020                  		move.w	#$20,d2
0000D178 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D17E 6600                       		bne.s	loc_AF8E
0000D180 343C 0030                  		move.w	#$30,d2
0000D184                            
0000D184                            loc_AF8E:
0000D184 2468 0030                  		movea.l	$30(a0),a2
0000D188 6100 0000                  		bsr.w	SolidObject2F
0000D18C                            
0000D18C                            LGrass_Display:
0000D18C 6100 0000                  		bsr.w	DisplaySprite
0000D190 6000 0000                  		bra.w	LGrass_ChkDel
0000D194                            
0000D194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D194                            
0000D194                            
0000D194                            LGrass_Types:
0000D194 7000                       		moveq	#0,d0
0000D196 1028 0028                  		move.b	obSubtype(a0),d0
0000D19A 0240 0007                  		andi.w	#7,d0
0000D19E D040                       		add.w	d0,d0
0000D1A0 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D1A4 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D1A8                            ; End of function LGrass_Types
0000D1A8                            
0000D1A8                            ; ===========================================================================
0000D1A8 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D1AA 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D1AC 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D1AE 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D1B0 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D1B2 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D1B4                            ; ===========================================================================
0000D1B4                            
0000D1B4                            LGrass_Type00:
0000D1B4 4E75                       		rts			; type 00 platform doesn't move
0000D1B6                            ; ===========================================================================
0000D1B6                            
0000D1B6                            LGrass_Type01:
0000D1B6 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D1BA 323C 0020                  		move.w	#$20,d1
0000D1BE 6000                       		bra.s	LGrass_Move
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            LGrass_Type02:
0000D1C0 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D1C4 323C 0030                  		move.w	#$30,d1
0000D1C8 6000                       		bra.s	LGrass_Move
0000D1CA                            ; ===========================================================================
0000D1CA                            
0000D1CA                            LGrass_Type03:
0000D1CA 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D1CE 323C 0040                  		move.w	#$40,d1
0000D1D2 6000                       		bra.s	LGrass_Move
0000D1D4                            ; ===========================================================================
0000D1D4                            
0000D1D4                            LGrass_Type04:
0000D1D4 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D1D8 323C 0060                  		move.w	#$60,d1
0000D1DC                            
0000D1DC                            LGrass_Move:
0000D1DC 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D1E2 6700                       		beq.s	loc_AFF2
0000D1E4 4440                       		neg.w	d0
0000D1E6 D041                       		add.w	d1,d0
0000D1E8                            
0000D1E8                            loc_AFF2:
0000D1E8 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D1EC 9240                       		sub.w	d0,d1
0000D1EE 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D1F2 4E75                       		rts	
0000D1F4                            ; ===========================================================================
0000D1F4                            
0000D1F4                            LGrass_Type05:
0000D1F4 1028 0034                  		move.b	$34(a0),d0
0000D1F8 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D1FC 6600                       		bne.s	loc_B010
0000D1FE 5500                       		subq.b	#2,d0
0000D200 6400                       		bcc.s	loc_B01C
0000D202 7000                       		moveq	#0,d0
0000D204 6000                       		bra.s	loc_B01C
0000D206                            ; ===========================================================================
0000D206                            
0000D206                            loc_B010:
0000D206 5800                       		addq.b	#4,d0
0000D208 0C00 0040                  		cmpi.b	#$40,d0
0000D20C 6500                       		bcs.s	loc_B01C
0000D20E 103C 0040                  		move.b	#$40,d0
0000D212                            
0000D212                            loc_B01C:
0000D212 1140 0034                  		move.b	d0,$34(a0)
0000D216 4EB9 0000 3D28             		jsr	(CalcSine).l
0000D21C E848                       		lsr.w	#4,d0
0000D21E 3200                       		move.w	d0,d1
0000D220 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D224 3140 000C                  		move.w	d0,obY(a0)
0000D228 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D22E 6600                       		bne.s	loc_B07A
0000D230 4A28 0035                  		tst.b	$35(a0)
0000D234 6600                       		bne.s	loc_B07A
0000D236 117C 0001 0035             		move.b	#1,$35(a0)
0000D23C 6100 0000                  		bsr.w	FindNextFreeObj
0000D240 6600                       		bne.s	loc_B07A
0000D242 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D246 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D24C 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D252 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D256 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D25A 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D260 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D266 2348 0038                  		move.l	a0,$38(a1)
0000D26A 2448                       		movea.l	a0,a2
0000D26C 6100                       		bsr.s	sub_B09C
0000D26E                            
0000D26E                            loc_B07A:
0000D26E 7400                       		moveq	#0,d2
0000D270 45E8 0036                  		lea	$36(a0),a2
0000D274 141A                       		move.b	(a2)+,d2
0000D276 5302                       		subq.b	#1,d2
0000D278 6500                       		bcs.s	locret_B09A
0000D27A                            
0000D27A                            loc_B086:
0000D27A 7000                       		moveq	#0,d0
0000D27C 101A                       		move.b	(a2)+,d0
0000D27E ED48                       		lsl.w	#6,d0
0000D280 0640 D000                  		addi.w	#$D000,d0
0000D284 3240                       		movea.w	d0,a1
0000D286 3341 003C                  		move.w	d1,$3C(a1)
0000D28A 51CA FFEE                  		dbf	d2,loc_B086
0000D28E                            
0000D28E                            locret_B09A:
0000D28E 4E75                       		rts	
0000D290                            
0000D290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D290                            
0000D290                            
0000D290                            sub_B09C:
0000D290 45EA 0036                  		lea	$36(a2),a2
0000D294 7000                       		moveq	#0,d0
0000D296 1012                       		move.b	(a2),d0
0000D298 5212                       		addq.b	#1,(a2)
0000D29A 45F2 0001                  		lea	1(a2,d0.w),a2
0000D29E 3009                       		move.w	a1,d0
0000D2A0 0440 D000                  		subi.w	#$D000,d0
0000D2A4 EC48                       		lsr.w	#6,d0
0000D2A6 0240 007F                  		andi.w	#$7F,d0
0000D2AA 1480                       		move.b	d0,(a2)
0000D2AC 4E75                       		rts	
0000D2AE                            ; End of function sub_B09C
0000D2AE                            
0000D2AE                            ; ===========================================================================
0000D2AE                            
0000D2AE                            LGrass_ChkDel:
0000D2AE 4A28 0035                  		tst.b	$35(a0)
0000D2B2 6700                       		beq.s	loc_B0C6
0000D2B4 4A28 0001                  		tst.b	obRender(a0)
0000D2B8 6A00                       		bpl.s	LGrass_DelFlames
0000D2BA                            
0000D2BA                            loc_B0C6:
0000D2D8 4E75                       		rts	
0000D2DA                            ; ===========================================================================
0000D2DA                            
0000D2DA                            LGrass_DelFlames:
0000D2DA 7400                       		moveq	#0,d2
0000D2DC                            
0000D2DC                            loc_B0E8:
0000D2DC 45E8 0036                  		lea	$36(a0),a2
0000D2E0 1412                       		move.b	(a2),d2
0000D2E2 421A                       		clr.b	(a2)+
0000D2E4 5302                       		subq.b	#1,d2
0000D2E6 6500                       		bcs.s	locret_B116
0000D2E8                            
0000D2E8                            loc_B0F4:
0000D2E8 7000                       		moveq	#0,d0
0000D2EA 1012                       		move.b	(a2),d0
0000D2EC 421A                       		clr.b	(a2)+
0000D2EE ED48                       		lsl.w	#6,d0
0000D2F0 0640 D000                  		addi.w	#$D000,d0
0000D2F4 3240                       		movea.w	d0,a1
0000D2F6 6100 0000                  		bsr.w	DeleteChild
0000D2FA 51CA FFEC                  		dbf	d2,loc_B0F4
0000D2FE 117C 0000 0035             		move.b	#0,$35(a0)
0000D304 117C 0000 0034             		move.b	#0,$34(a0)
0000D30A                            
0000D30A                            locret_B116:
0000D30A 4E75                       		rts	
0000D30C                            ; ===========================================================================
0000D30C                            ; ---------------------------------------------------------------------------
0000D30C                            ; Collision data for large moving platforms (MZ)
0000D30C                            ; ---------------------------------------------------------------------------
0000D30C                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D358                            		even
0000D358                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D384                            		even
0000D384                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D3D0                            		even
0000D3D0                            		even
0000D3D0                            		include	"_incObj\35 Burning Grass.asm"
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D3D0                            ; (appears when	you walk on sinking platforms)
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0                            
0000D3D0                            GrassFire:
0000D3D0 7000                       		moveq	#0,d0
0000D3D2 1028 0024                  		move.b	obRoutine(a0),d0
0000D3D6 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D3DA 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D3DE                            ; ===========================================================================
0000D3DE 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D3E0 0000                       		dc.w loc_B238-GFire_Index
0000D3E2 0000                       		dc.w GFire_Move-GFire_Index
0000D3E4                            
0000D3E4 =0000002A                  gfire_origX:	equ $2A
0000D3E4                            ; ===========================================================================
0000D3E4                            
0000D3E4                            GFire_Main:	; Routine 0
0000D3E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D3E8 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D3F0 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D3F6 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D3FC 117C 0004 0001             		move.b	#4,obRender(a0)
0000D402 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D408 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D40E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D41E 4A28 0028                  		tst.b	obSubtype(a0)
0000D422 6700                       		beq.s	loc_B238
0000D424 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D428 6000 0000                  		bra.w	GFire_Move
0000D42C                            ; ===========================================================================
0000D42C                            
0000D42C                            loc_B238:	; Routine 2
0000D42C 2268 0030                  		movea.l	$30(a0),a1
0000D430 3228 0008                  		move.w	obX(a0),d1
0000D434 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D438 0641 000C                  		addi.w	#$C,d1
0000D43C 3001                       		move.w	d1,d0
0000D43E E248                       		lsr.w	#1,d0
0000D440 1031 0000                  		move.b	(a1,d0.w),d0
0000D444 4440                       		neg.w	d0
0000D446 D068 002C                  		add.w	$2C(a0),d0
0000D44A 3400                       		move.w	d0,d2
0000D44C D068 003C                  		add.w	$3C(a0),d0
0000D450 3140 000C                  		move.w	d0,obY(a0)
0000D454 0C41 0084                  		cmpi.w	#$84,d1
0000D458 6400                       		bcc.s	loc_B2B0
0000D45A 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D462 0C41 0080                  		cmpi.w	#$80,d1
0000D466 6400                       		bcc.s	loc_B2B0
0000D468 2028 0008                  		move.l	obX(a0),d0
0000D46C 0680 0008 0000             		addi.l	#$80000,d0
0000D472 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D478 6600                       		bne.s	loc_B2B0
0000D47A 6100 0000                  		bsr.w	FindNextFreeObj
0000D47E 6600                       		bne.s	loc_B2B0
0000D480 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D484 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D48A 3342 002C                  		move.w	d2,$2C(a1)
0000D48E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D494 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D49A 2468 0038                  		movea.l	$38(a0),a2
0000D49E 6100 FDF0                  		bsr.w	sub_B09C
0000D4A2                            
0000D4A2                            loc_B2B0:
0000D4A2 6000                       		bra.s	GFire_Animate
0000D4A4                            ; ===========================================================================
0000D4A4                            
0000D4A4                            GFire_Move:	; Routine 4
0000D4A4 3028 002C                  		move.w	$2C(a0),d0
0000D4A8 D068 003C                  		add.w	$3C(a0),d0
0000D4AC 3140 000C                  		move.w	d0,obY(a0)
0000D4B0                            
0000D4B0                            GFire_Animate:
0000D4B0 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D4B6 6100 F456                  		bsr.w	AnimateSprite
0000D4BA 6000 0000                  		bra.w	DisplaySprite
0000D4BA 6000 0000                  		bra.w	DisplaySprite
0000D4BE                            		include	"_anim\Burning Grass.asm"
0000D4BE                            ; ---------------------------------------------------------------------------
0000D4BE                            ; Animation script - burning grass that sits on the floor (MZ)
0000D4BE                            ; ---------------------------------------------------------------------------
0000D4BE 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D4C0 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D4C6                            		even
0000D4C6                            		even
0000D4C6                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D4C6                            ; ---------------------------------------------------------------------------
0000D4C6                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D4C6                            ; ---------------------------------------------------------------------------
0000D4C6                            Map_LGrass_internal:
0000D4C6 0000                       		dc.w @wide-Map_LGrass_internal
0000D4C8 0000                       		dc.w @sloped-Map_LGrass_internal
0000D4CA 0000                       		dc.w @narrow-Map_LGrass_internal
0000D4CC 0D                         @wide:		dc.b $D
0000D4CD D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D4D2 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D4D7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D4DC D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D4E1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D4E6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D4EB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D4F0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D4F5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D4FA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D4FF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D504 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D509 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D50E 0A                         @sloped:	dc.b $A
0000D50F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D514 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D519 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D51E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D523 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D528 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D52D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D532 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D537 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D53C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D541 06                         @narrow:	dc.b 6
0000D542 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D547 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D54C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D551 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D556 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D55B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D560                            		even
0000D560                            		even
0000D560                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D560                            ; --------------------------------------------------------------------------------
0000D560                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D560                            ; --------------------------------------------------------------------------------
0000D560                            
0000D560                            SME_gyvTV:	
0000D560 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D564 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D568 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D56C 01                         SME_gyvTV_C:	dc.b 1	
0000D56D E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D572 01                         SME_gyvTV_12:	dc.b 1	
0000D573 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D578 01                         SME_gyvTV_18:	dc.b 1	
0000D579 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D57E 01                         SME_gyvTV_1E:	dc.b 1	
0000D57F F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D584 01                         SME_gyvTV_24:	dc.b 1	
0000D585 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D58A 01                         SME_gyvTV_2A:	dc.b 1	
0000D58B F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D590                            		even
0000D590                            		even
0000D590                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            ; Object 30 - large green glass blocks (MZ)
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            
0000D590                            GlassBlock:
0000D590 7000                       		moveq	#0,d0
0000D592 1028 0024                  		move.b	obRoutine(a0),d0
0000D596 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D59A 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D5BC 6000 0000                  		bra.w	DisplaySprite
0000D5C0                            ; ===========================================================================
0000D5C0                            
0000D5C0                            Glass_Delete:
0000D5C0 6000 0000                  		bra.w	DeleteObject
0000D5C4                            ; ===========================================================================
0000D5C4 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D5C6 0000                       		dc.w Glass_Block012-Glass_Index
0000D5C8 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D5CA 0000                       		dc.w Glass_Block34-Glass_Index
0000D5CC 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D5CE                            
0000D5CE =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D5CE =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D5CE                            
0000D5CE 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D5D1 0400 01                    		dc.b 4,	0, 1
0000D5D4 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D5D7 0800 01                    		dc.b 8,	0, 1
0000D5DA                            ; ===========================================================================
0000D5DA                            
0000D5DA                            Glass_Main:	; Routine 0
0000D5DA 45F9 0000 D5CE             		lea	(Glass_Vars1).l,a2
0000D5E0 7201                       		moveq	#1,d1
0000D5E2 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D5E8 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D5EE 6500                       		bcs.s	@IsType012	; if yes, branch
0000D5F0                            
0000D5F0 45F9 0000 D5D4             		lea	(Glass_Vars2).l,a2
0000D5F6 7201                       		moveq	#1,d1
0000D5F8 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D5FE                            
0000D5FE                            	@IsType012:
0000D5FE 2248                       		movea.l	a0,a1
0000D600 6000                       		bra.s	@Load		; load main object
0000D602                            ; ===========================================================================
0000D602                            
0000D602                            	@Repeat:
0000D602 6100 0000                  		bsr.w	FindNextFreeObj
0000D606 6600                       		bne.s	@Fail
0000D608                            
0000D608                            @Load:
0000D608 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D60C 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D610 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D616 101A                       		move.b	(a2)+,d0
0000D618 4880                       		ext.w	d0
0000D61A D068 000C                  		add.w	obY(a0),d0
0000D61E 3340 000C                  		move.w	d0,obY(a1)
0000D622 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D62A 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D630 137C 0004 0001             		move.b	#4,obRender(a1)
0000D636 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D63C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D642 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D648 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D64E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D652 2348 003C                  		move.l	a0,glass_parent(a1)
0000D656 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D65A                            
0000D65A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D660 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D666 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D66A 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D670                            
0000D670                            	@Fail:
0000D670 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D676 08E8 0004 0001             		bset	#4,obRender(a0)
0000D67C                            
0000D67C                            Glass_Block012:	; Routine 2
0000D67C 6100 0000                  		bsr.w	Glass_Types
0000D680 323C 002B                  		move.w	#$2B,d1
0000D684 343C 0048                  		move.w	#$48,d2
0000D688 363C 0049                  		move.w	#$49,d3
0000D68C 3828 0008                  		move.w	obX(a0),d4
0000D690 6000 0000                  		bra.w	SolidObject
0000D694                            ; ===========================================================================
0000D694                            
0000D694                            Glass_Reflect012:
0000D694                            		; Routine 4
0000D694 2268 003C                  		movea.l	$3C(a0),a1
0000D698 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D69E 6000 0000                  		bra.w	Glass_Types
0000D6A2                            ; ===========================================================================
0000D6A2                            
0000D6A2                            Glass_Block34:	; Routine 6
0000D6A2 6100 0000                  		bsr.w	Glass_Types
0000D6A6 323C 002B                  		move.w	#$2B,d1
0000D6AA 343C 0038                  		move.w	#$38,d2
0000D6AE 363C 0039                  		move.w	#$39,d3
0000D6B2 3828 0008                  		move.w	obX(a0),d4
0000D6B6 6000 0000                  		bra.w	SolidObject
0000D6BA                            ; ===========================================================================
0000D6BA                            
0000D6BA                            Glass_Reflect34:
0000D6BA                            		; Routine 8
0000D6BA 2268 003C                  		movea.l	$3C(a0),a1
0000D6BE 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D6C4 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D6CA 6000 0000                  		bra.w	Glass_Types
0000D6CE                            
0000D6CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6CE                            
0000D6CE                            
0000D6CE                            Glass_Types:
0000D6CE 7000                       		moveq	#0,d0
0000D6D0 1028 0028                  		move.b	obSubtype(a0),d0
0000D6D4 0240 0007                  		andi.w	#7,d0
0000D6D8 D040                       		add.w	d0,d0
0000D6DA 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D6DE 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D6E2                            ; End of function Glass_Types
0000D6E2                            
0000D6E2                            ; ===========================================================================
0000D6E2 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D6E4 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D6E6 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D6E8 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D6EA 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D6EC                            ; ===========================================================================
0000D6EC                            
0000D6EC                            Glass_Type00:
0000D6EC 4E75                       		rts	
0000D6EE                            ; ===========================================================================
0000D6EE                            
0000D6EE                            Glass_Type01:
0000D6EE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6F2 323C 0040                  		move.w	#$40,d1
0000D6F6 6000                       		bra.s	loc_B514
0000D6F8                            ; ===========================================================================
0000D6F8                            
0000D6F8                            Glass_Type02:
0000D6F8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6FC 323C 0040                  		move.w	#$40,d1
0000D700 4440                       		neg.w	d0
0000D702 D041                       		add.w	d1,d0
0000D704                            
0000D704                            loc_B514:
0000D704 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D70A 6700                       		beq.s	loc_B526
0000D70C 4440                       		neg.w	d0
0000D70E D041                       		add.w	d1,d0
0000D710 E208                       		lsr.b	#1,d0
0000D712 0640 0020                  		addi.w	#$20,d0
0000D716                            
0000D716                            loc_B526:
0000D716 6000 0000                  		bra.w	loc_B5EE
0000D71A                            ; ===========================================================================
0000D71A                            
0000D71A                            Glass_Type03:
0000D71A 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D720 6700                       		beq.s	loc_B53E
0000D722 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D726 0440 0010                  		subi.w	#$10,d0
0000D72A 6000 0000                  		bra.w	loc_B5EE
0000D72E                            ; ===========================================================================
0000D72E                            
0000D72E                            loc_B53E:
0000D72E 0828 0003 0022             		btst	#3,obStatus(a0)
0000D734 6600                       		bne.s	loc_B54E
0000D736 08A8 0000 0034             		bclr	#0,$34(a0)
0000D73C 6000                       		bra.s	loc_B582
0000D73E                            ; ===========================================================================
0000D73E                            
0000D73E                            loc_B54E:
0000D73E 4A28 0034                  		tst.b	$34(a0)
0000D742 6600                       		bne.s	loc_B582
0000D744 117C 0001 0034             		move.b	#1,$34(a0)
0000D74A 08E8 0000 0035             		bset	#0,$35(a0)
0000D750 6700                       		beq.s	loc_B582
0000D752 08E8 0007 0034             		bset	#7,$34(a0)
0000D758 317C 0010 0036             		move.w	#$10,$36(a0)
0000D75E 117C 000A 0038             		move.b	#$A,$38(a0)
0000D764 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D76A 6600                       		bne.s	loc_B582
0000D76C 317C 0040 0036             		move.w	#$40,$36(a0)
0000D772                            
0000D772                            loc_B582:
0000D772 4A28 0034                  		tst.b	$34(a0)
0000D776 6A00                       		bpl.s	loc_B5AA
0000D778 4A28 0038                  		tst.b	$38(a0)
0000D77C 6700                       		beq.s	loc_B594
0000D77E 5328 0038                  		subq.b	#1,$38(a0)
0000D782 6600                       		bne.s	loc_B5AA
0000D784                            
0000D784                            loc_B594:
0000D784 4A68 0032                  		tst.w	glass_dist(a0)
0000D788 6700                       		beq.s	loc_B5A4
0000D78A 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D78E 5368 0036                  		subq.w	#1,$36(a0)
0000D792 6600                       		bne.s	loc_B5AA
0000D794                            
0000D794                            loc_B5A4:
0000D794 08A8 0007 0034             		bclr	#7,$34(a0)
0000D79A                            
0000D79A                            loc_B5AA:
0000D79A 3028 0032                  		move.w	glass_dist(a0),d0
0000D79E 6000                       		bra.s	loc_B5EE
0000D7A0                            ; ===========================================================================
0000D7A0                            
0000D7A0                            Glass_Type04:
0000D7A0 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D7A6 6700                       		beq.s	Glass_ChkSwitch
0000D7A8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D7AC 0440 0010                  		subi.w	#$10,d0
0000D7B0 6000                       		bra.s	loc_B5EE
0000D7B2                            ; ===========================================================================
0000D7B2                            
0000D7B2                            Glass_ChkSwitch:
0000D7B2 4A28 0034                  		tst.b	$34(a0)
0000D7B6 6600                       		bne.s	loc_B5E0
0000D7B8 45F8 F7E0                  		lea	(f_switch).w,a2
0000D7BC 7000                       		moveq	#0,d0
0000D7BE 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D7C2 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D7C4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D7C8 6700                       		beq.s	loc_B5EA	; if not, branch
0000D7CA 117C 0001 0034             		move.b	#1,$34(a0)
0000D7D0                            
0000D7D0                            loc_B5E0:
0000D7D0 4A68 0032                  		tst.w	glass_dist(a0)
0000D7D4 6700                       		beq.s	loc_B5EA
0000D7D6 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D7DA                            
0000D7DA                            loc_B5EA:
0000D7DA 3028 0032                  		move.w	glass_dist(a0),d0
0000D7DE                            
0000D7DE                            loc_B5EE:
0000D7DE 3228 0030                  		move.w	$30(a0),d1
0000D7E2 9240                       		sub.w	d0,d1
0000D7E4 3141 000C                  		move.w	d1,obY(a0)
0000D7E8 4E75                       		rts	
0000D7E8 4E75                       		rts	
0000D7EA                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D7EA                            ; --------------------------------------------------------------------------------
0000D7EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D7EA                            ; --------------------------------------------------------------------------------
0000D7EA                            
0000D7EA                            SME_NEyTf:	
0000D7EA 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D7EE 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D7F0 0C                         SME_NEyTf_6:	dc.b $C	
0000D7F1 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D7F6 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D7FB C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D800 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D805 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D80A E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D80F 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D814 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D819 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D81E 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D823 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D828 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D82D 02                         SME_NEyTf_43:	dc.b 2	
0000D82E 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D833 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D838 0A                         SME_NEyTf_4E:	dc.b $A	
0000D839 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D83E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D843 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D848 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D84D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D852 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D857 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D85C 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D861 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D866 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D86C 00                         		even
0000D86C 00                         		even
0000D86C                            		include	"_incObj\31 Chained Stompers.asm"
0000D86C                            ; ---------------------------------------------------------------------------
0000D86C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D86C                            ; ---------------------------------------------------------------------------
0000D86C                            
0000D86C                            ChainStomp:
0000D86C 7000                       		moveq	#0,d0
0000D86E 1028 0024                  		move.b	obRoutine(a0),d0
0000D872 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D876 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D87A                            ; ===========================================================================
0000D87A 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D87C 0000                       		dc.w loc_B798-CStom_Index
0000D87E 0000                       		dc.w loc_B7FE-CStom_Index
0000D880 0000                       		dc.w CStom_Display2-CStom_Index
0000D882 0000                       		dc.w loc_B7E2-CStom_Index
0000D884                            
0000D884 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D884                            
0000D884 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D886 0100                       		dc.b 1,	0
0000D888                            
0000D888 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D88B 041C 01                    		dc.b 4,	$1C, 1
0000D88E 08CC 03                    		dc.b 8,	$CC, 3
0000D891 06F0 02                    		dc.b 6,	$F0, 2
0000D894                            
0000D894 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D898 5000 7800                  		dc.w $5000, $7800
0000D89C 3800 5800                  		dc.w $3800, $5800
0000D8A0 B800                       		dc.w $B800
0000D8A2                            ; ===========================================================================
0000D8A2                            
0000D8A2                            CStom_Main:	; Routine 0
0000D8A2 7000                       		moveq	#0,d0
0000D8A4 1028 0028                  		move.b	obSubtype(a0),d0
0000D8A8 6A00                       		bpl.s	loc_B6CE
0000D8AA 0240 007F                  		andi.w	#$7F,d0
0000D8AE D040                       		add.w	d0,d0
0000D8B0 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D8B4 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D8B8 101A                       		move.b	(a2)+,d0
0000D8BA 1140 0028                  		move.b	d0,obSubtype(a0)
0000D8BE                            
0000D8BE                            loc_B6CE:
0000D8BE 0200 000F                  		andi.b	#$F,d0
0000D8C2 D040                       		add.w	d0,d0
0000D8C4 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D8C8 4A40                       		tst.w	d0
0000D8CA 6600                       		bne.s	loc_B6E0
0000D8CC 3142 0032                  		move.w	d2,$32(a0)
0000D8D0                            
0000D8D0                            loc_B6E0:
0000D8D0 45F9 0000 D888             		lea	(CStom_Var).l,a2
0000D8D6 2248                       		movea.l	a0,a1
0000D8D8 7203                       		moveq	#3,d1
0000D8DA 6000                       		bra.s	CStom_MakeStomper
0000D8DC                            ; ===========================================================================
0000D8DC                            
0000D8DC                            CStom_Loop:
0000D8DC 6100 0000                  		bsr.w	FindNextFreeObj
0000D8E0 6600 0000                  		bne.w	CStom_SetSize
0000D8E4                            
0000D8E4                            CStom_MakeStomper:
0000D8E4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D8E8 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D8EC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D8F2 101A                       		move.b	(a2)+,d0
0000D8F4 4880                       		ext.w	d0
0000D8F6 D068 000C                  		add.w	obY(a0),d0
0000D8FA 3340 000C                  		move.w	d0,obY(a1)
0000D8FE 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D906 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D90C 137C 0004 0001             		move.b	#4,obRender(a1)
0000D912 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D918 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D91E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D924 3342 0034                  		move.w	d2,$34(a1)
0000D928 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D92E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D932 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D938 6600                       		bne.s	loc_B76A
0000D93A 5341                       		subq.w	#1,d1
0000D93C 1028 0028                  		move.b	obSubtype(a0),d0
0000D940 0240 00F0                  		andi.w	#$F0,d0
0000D944 0C40 0020                  		cmpi.w	#$20,d0
0000D948 679A                       		beq.s	CStom_MakeStomper
0000D94A 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D950 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D956 5241                       		addq.w	#1,d1
0000D958                            
0000D958                            loc_B76A:
0000D958 2348 003C                  		move.l	a0,$3C(a1)
0000D95C 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D960                            
0000D960 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D966                            
0000D966                            CStom_SetSize:
0000D966 7000                       		moveq	#0,d0
0000D968 1028 0028                  		move.b	obSubtype(a0),d0
0000D96C E648                       		lsr.w	#3,d0
0000D96E 0200 000E                  		andi.b	#$E,d0
0000D972 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D976 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D97A 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D97E 6000                       		bra.s	loc_B798
0000D980                            ; ===========================================================================
0000D980 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D982 3009                       		dc.b $30, 9
0000D984 100A                       		dc.b $10, $A
0000D986                            ; ===========================================================================
0000D986                            
0000D986                            loc_B798:	; Routine 2
0000D986 6100 0000                  		bsr.w	CStom_Types
0000D98A 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D990 7200                       		moveq	#0,d1
0000D992 1228 0014                  		move.b	obActWid(a0),d1
0000D996 0641 000B                  		addi.w	#$B,d1
0000D99A 343C 000C                  		move.w	#$C,d2
0000D99E 363C 000D                  		move.w	#$D,d3
0000D9A2 3828 0008                  		move.w	obX(a0),d4
0000D9A6 6100 0000                  		bsr.w	SolidObject
0000D9AA 0828 0003 0022             		btst	#3,obStatus(a0)
0000D9B0 6700                       		beq.s	CStom_Display
0000D9B2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D9B8 6400                       		bcc.s	CStom_Display
0000D9BA 2448                       		movea.l	a0,a2
0000D9BC 41F8 D000                  		lea	(v_player).w,a0
0000D9C0 4EB9 0000 0000             		jsr	(KillSonic).l
0000D9C6 204A                       		movea.l	a2,a0
0000D9C8                            
0000D9C8                            CStom_Display:
0000D9C8 6100 0000                  		bsr.w	DisplaySprite
0000D9CC 6000 0000                  		bra.w	CStom_ChkDel
0000D9D0                            ; ===========================================================================
0000D9D0                            
0000D9D0                            loc_B7E2:	; Routine 8
0000D9D0 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D9D6 08E8 0004 0001             		bset	#4,obRender(a0)
0000D9DC 2268 003C                  		movea.l	$3C(a0),a1
0000D9E0 1029 0032                  		move.b	$32(a1),d0
0000D9E4 EA08                       		lsr.b	#5,d0
0000D9E6 5600                       		addq.b	#3,d0
0000D9E8 1140 001A                  		move.b	d0,obFrame(a0)
0000D9EC                            
0000D9EC                            loc_B7FE:	; Routine 4
0000D9EC 2268 003C                  		movea.l	$3C(a0),a1
0000D9F0 7000                       		moveq	#0,d0
0000D9F2 1029 0032                  		move.b	$32(a1),d0
0000D9F6 D068 0030                  		add.w	$30(a0),d0
0000D9FA 3140 000C                  		move.w	d0,obY(a0)
0000D9FE                            
0000D9FE                            CStom_Display2:	; Routine 6
0000D9FE 6100 0000                  		bsr.w	DisplaySprite
0000DA02                            
0000DA02                            CStom_ChkDel:
0000DA20 4E75                       		rts	
0000DA22                            ; ===========================================================================
0000DA22                            
0000DA22                            CStom_Types:
0000DA22 1028 0028                  		move.b	obSubtype(a0),d0
0000DA26 0240 000F                  		andi.w	#$F,d0
0000DA2A D040                       		add.w	d0,d0
0000DA2C 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DA30 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DA34                            ; ===========================================================================
0000DA34 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DA36 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA38 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA3A 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA3C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA3E 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA40 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA42                            ; ===========================================================================
0000DA42                            
0000DA42                            CStom_Type00:
0000DA42 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DA46 7000                       		moveq	#0,d0
0000DA48 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DA4C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DA50 6700                       		beq.s	loc_B8A8	; if not, branch
0000DA52 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DA56 6A00                       		bpl.s	loc_B872
0000DA58 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DA5E 6700                       		beq.s	loc_B8A0
0000DA60                            
0000DA60                            loc_B872:
0000DA60 4A68 0032                  		tst.w	$32(a0)
0000DA64 6700                       		beq.s	loc_B8A0
0000DA66 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA6A 0200 000F                  		andi.b	#$F,d0
0000DA6E 6600                       		bne.s	loc_B892
0000DA70 4A28 0001                  		tst.b	1(a0)
0000DA74 6A00                       		bpl.s	loc_B892
0000DA80                            
0000DA80                            loc_B892:
0000DA80 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA86 6400                       		bcc.s	CStom_Restart
0000DA88 317C 0000 0032             		move.w	#0,$32(a0)
0000DA8E                            
0000DA8E                            loc_B8A0:
0000DA8E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA94 6000                       		bra.s	CStom_Restart
0000DA96                            ; ===========================================================================
0000DA96                            
0000DA96                            loc_B8A8:
0000DA96 3228 0034                  		move.w	$34(a0),d1
0000DA9A B268 0032                  		cmp.w	$32(a0),d1
0000DA9E 6700                       		beq.s	CStom_Restart
0000DAA0 3028 0012                  		move.w	obVelY(a0),d0
0000DAA4 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DAAA D168 0032                  		add.w	d0,$32(a0)
0000DAAE B268 0032                  		cmp.w	$32(a0),d1
0000DAB2 6200                       		bhi.s	CStom_Restart
0000DAB4 3141 0032                  		move.w	d1,$32(a0)
0000DAB8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DABE 4A28 0001                  		tst.b	obRender(a0)
0000DAC2 6A00                       		bpl.s	CStom_Restart
0000DACE                            
0000DACE                            CStom_Restart:
0000DACE 7000                       		moveq	#0,d0
0000DAD0 1028 0032                  		move.b	$32(a0),d0
0000DAD4 D068 0030                  		add.w	$30(a0),d0
0000DAD8 3140 000C                  		move.w	d0,obY(a0)
0000DADC 4E75                       		rts	
0000DADE                            ; ===========================================================================
0000DADE                            
0000DADE                            CStom_Type01:
0000DADE 4A68 0036                  		tst.w	$36(a0)
0000DAE2 6700                       		beq.s	loc_B938
0000DAE4 4A68 0038                  		tst.w	$38(a0)
0000DAE8 6700                       		beq.s	loc_B902
0000DAEA 5368 0038                  		subq.w	#1,$38(a0)
0000DAEE 6000                       		bra.s	loc_B97C
0000DAF0                            ; ===========================================================================
0000DAF0                            
0000DAF0                            loc_B902:
0000DAF0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DAF4 0200 000F                  		andi.b	#$F,d0
0000DAF8 6600                       		bne.s	loc_B91C
0000DAFA 4A28 0001                  		tst.b	obRender(a0)
0000DAFE 6A00                       		bpl.s	loc_B91C
0000DB0A                            
0000DB0A                            loc_B91C:
0000DB0A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DB10 6400                       		bcc.s	loc_B97C
0000DB12 317C 0000 0032             		move.w	#0,$32(a0)
0000DB18 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DB1E 317C 0000 0036             		move.w	#0,$36(a0)
0000DB24 6000                       		bra.s	loc_B97C
0000DB26                            ; ===========================================================================
0000DB26                            
0000DB26                            loc_B938:
0000DB26 3228 0034                  		move.w	$34(a0),d1
0000DB2A B268 0032                  		cmp.w	$32(a0),d1
0000DB2E 6700                       		beq.s	loc_B97C
0000DB30 3028 0012                  		move.w	obVelY(a0),d0
0000DB34 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DB3A D168 0032                  		add.w	d0,$32(a0)
0000DB3E B268 0032                  		cmp.w	$32(a0),d1
0000DB42 6200                       		bhi.s	loc_B97C
0000DB44 3141 0032                  		move.w	d1,$32(a0)
0000DB48 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DB4E 317C 0001 0036             		move.w	#1,$36(a0)
0000DB54 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DB5A 4A28 0001                  		tst.b	obRender(a0)
0000DB5E 6A00                       		bpl.s	loc_B97C
0000DB6A                            
0000DB6A                            loc_B97C:
0000DB6A 6000 FF62                  		bra.w	CStom_Restart
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            CStom_Type03:
0000DB6E 3038 D008                  		move.w	(v_player+obX).w,d0
0000DB72 9068 0008                  		sub.w	obX(a0),d0
0000DB76 6400                       		bcc.s	loc_B98C
0000DB78 4440                       		neg.w	d0
0000DB7A                            
0000DB7A                            loc_B98C:
0000DB7A 0C40 0090                  		cmpi.w	#$90,d0
0000DB7E 6400                       		bcc.s	loc_B996
0000DB80 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DB84                            
0000DB84                            loc_B996:
0000DB84 6000 FF48                  		bra.w	CStom_Restart
0000DB84 6000 FF48                  		bra.w	CStom_Restart
0000DB88                            		include	"_incObj\45 Sideways Stomper.asm"
0000DB88                            ; ---------------------------------------------------------------------------
0000DB88                            ; Object 45 - spiked metal block from beta version (MZ)
0000DB88                            ; ---------------------------------------------------------------------------
0000DB88                            
0000DB88                            SideStomp:
0000DB88 7000                       		moveq	#0,d0
0000DB8A 1028 0024                  		move.b	obRoutine(a0),d0
0000DB8E 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DB92 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DB96                            ; ===========================================================================
0000DB96 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DB98 0000                       		dc.w SStom_Solid-SStom_Index
0000DB9A 0000                       		dc.w loc_BA8E-SStom_Index
0000DB9C 0000                       		dc.w SStom_Display-SStom_Index
0000DB9E 0000                       		dc.w SStom_Pole-SStom_Index
0000DBA0                            
0000DBA0                            		;	routine		frame
0000DBA0                            		;		 xpos
0000DBA0 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DBA3 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DBA6 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DBA9 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DBAC                            
0000DBAC                            ;word_B9BE:	; Note that this indicates three subtypes
0000DBAC 3800                       SStom_Len:	dc.w $3800	; short
0000DBAE A000                       		dc.w $A000	; long
0000DBB0 5000                       		dc.w $5000	; medium
0000DBB2                            ; ===========================================================================
0000DBB2                            
0000DBB2                            SStom_Main:	; Routine 0
0000DBB2 7000                       		moveq	#0,d0
0000DBB4 1028 0028                  		move.b	obSubtype(a0),d0
0000DBB8 D040                       		add.w	d0,d0
0000DBBA 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DBBE 45F9 0000 DBA0             		lea	(SStom_Var).l,a2
0000DBC4 2248                       		movea.l	a0,a1
0000DBC6 7203                       		moveq	#3,d1
0000DBC8 6000                       		bra.s	@load
0000DBCA                            
0000DBCA                            	@loop:
0000DBCA 6100 0000                  		bsr.w	FindNextFreeObj
0000DBCE 6600                       		bne.s	@fail
0000DBD0                            
0000DBD0                            	@load:
0000DBD0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DBD4 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DBD8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DBDE 101A                       		move.b	(a2)+,d0
0000DBE0 4880                       		ext.w	d0
0000DBE2 D068 0008                  		add.w	obX(a0),d0
0000DBE6 3340 0008                  		move.w	d0,obX(a1)
0000DBEA 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DBF2 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DBF8 137C 0004 0001             		move.b	#4,obRender(a1)
0000DBFE 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DC04 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DC0A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DC10 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DC16 3342 0034                  		move.w	d2,$34(a1)
0000DC1A 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DC20 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DC24 6600                       		bne.s	@notspikes	; if not, branch
0000DC26 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DC2C                            
0000DC2C                            	@notspikes:
0000DC2C 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DC30 2348 003C                  		move.l	a0,$3C(a1)
0000DC34 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DC38                            
0000DC38 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DC3E                            
0000DC3E                            	@fail:
0000DC3E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DC44                            
0000DC44                            SStom_Solid:	; Routine 2
0000DC44 3F28 0008                  		move.w	obX(a0),-(sp)
0000DC48 6100 0000                  		bsr.w	SStom_Move
0000DC4C 323C 0017                  		move.w	#$17,d1
0000DC50 343C 0020                  		move.w	#$20,d2
0000DC54 363C 0020                  		move.w	#$20,d3
0000DC58 381F                       		move.w	(sp)+,d4
0000DC5A 6100 0000                  		bsr.w	SolidObject
0000DC5E 6100 0000                  		bsr.w	DisplaySprite
0000DC62 6000 0000                  		bra.w	SStom_ChkDel
0000DC66                            ; ===========================================================================
0000DC66                            
0000DC66                            SStom_Pole:	; Routine 8
0000DC66 2268 003C                  		movea.l	$3C(a0),a1
0000DC6A 1029 0032                  		move.b	$32(a1),d0
0000DC6E 0600 0010                  		addi.b	#$10,d0
0000DC72 EA08                       		lsr.b	#5,d0
0000DC74 5600                       		addq.b	#3,d0
0000DC76 1140 001A                  		move.b	d0,obFrame(a0)
0000DC7A                            
0000DC7A                            loc_BA8E:	; Routine 4
0000DC7A 2268 003C                  		movea.l	$3C(a0),a1
0000DC7E 7000                       		moveq	#0,d0
0000DC80 1029 0032                  		move.b	$32(a1),d0
0000DC84 4440                       		neg.w	d0
0000DC86 D068 0030                  		add.w	$30(a0),d0
0000DC8A 3140 0008                  		move.w	d0,obX(a0)
0000DC8E                            
0000DC8E                            SStom_Display:	; Routine 6
0000DC8E 6100 0000                  		bsr.w	DisplaySprite
0000DC92                            
0000DC92                            SStom_ChkDel:
0000DCB0 4E75                       		rts	
0000DCB2                            
0000DCB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCB2                            
0000DCB2                            
0000DCB2                            SStom_Move:
0000DCB2 7000                       		moveq	#0,d0
0000DCB4 1028 0028                  		move.b	obSubtype(a0),d0
0000DCB8 D040                       		add.w	d0,d0
0000DCBA 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DCBE 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DCC2                            ; End of function SStom_Move
0000DCC2                            
0000DCC2                            ; ===========================================================================
0000DCC2                            		; This indicates only two subtypes... that do the same thing
0000DCC2                            		; Compare to SStom_Len. This breaks subtype 02
0000DCC2 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DCC4 0000                       		dc.w loc_BADA-off_BAD6
0000DCC6                            ; ===========================================================================
0000DCC6                            
0000DCC6                            loc_BADA:
0000DCC6 4A68 0036                  		tst.w	$36(a0)
0000DCCA 6700                       		beq.s	loc_BB08
0000DCCC 4A68 0038                  		tst.w	$38(a0)
0000DCD0 6700                       		beq.s	loc_BAEC
0000DCD2 5368 0038                  		subq.w	#1,$38(a0)
0000DCD6 6000                       		bra.s	loc_BB3C
0000DCD8                            ; ===========================================================================
0000DCD8                            
0000DCD8                            loc_BAEC:
0000DCD8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DCDE 6400                       		bcc.s	loc_BB3C
0000DCE0 317C 0000 0032             		move.w	#0,$32(a0)
0000DCE6 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DCEC 317C 0000 0036             		move.w	#0,$36(a0)
0000DCF2 6000                       		bra.s	loc_BB3C
0000DCF4                            ; ===========================================================================
0000DCF4                            
0000DCF4                            loc_BB08:
0000DCF4 3228 0034                  		move.w	$34(a0),d1
0000DCF8 B268 0032                  		cmp.w	$32(a0),d1
0000DCFC 6700                       		beq.s	loc_BB3C
0000DCFE 3028 0010                  		move.w	obVelX(a0),d0
0000DD02 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DD08 D168 0032                  		add.w	d0,$32(a0)
0000DD0C B268 0032                  		cmp.w	$32(a0),d1
0000DD10 6200                       		bhi.s	loc_BB3C
0000DD12 3141 0032                  		move.w	d1,$32(a0)
0000DD16 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DD1C 317C 0001 0036             		move.w	#1,$36(a0)
0000DD22 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DD28                            
0000DD28                            loc_BB3C:
0000DD28 7000                       		moveq	#0,d0
0000DD2A 1028 0032                  		move.b	$32(a0),d0
0000DD2E 4440                       		neg.w	d0
0000DD30 D068 0030                  		add.w	$30(a0),d0
0000DD34 3140 0008                  		move.w	d0,obX(a0)
0000DD38 4E75                       		rts	
0000DD38 4E75                       		rts	
0000DD3A                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A                            Map_CStom_internal:
0000DD3A 0000                       		dc.w @wideblock-Map_CStom_internal
0000DD3C 0000                       		dc.w @spikes-Map_CStom_internal
0000DD3E 0000                       		dc.w @ceiling-Map_CStom_internal
0000DD40 0000                       		dc.w @chain1-Map_CStom_internal
0000DD42 0000                       		dc.w @chain2-Map_CStom_internal
0000DD44 0000                       		dc.w @chain3-Map_CStom_internal
0000DD46 0000                       		dc.w @chain4-Map_CStom_internal
0000DD48 0000                       		dc.w @chain5-Map_CStom_internal
0000DD4A 0000                       		dc.w @chain5-Map_CStom_internal
0000DD4C 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DD4E 0000                       		dc.w @smallblock-Map_CStom_internal
0000DD50 05                         @wideblock:	dc.b 5
0000DD51 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DD56 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DD5B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD60 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DD65 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DD6A 05                         @spikes:	dc.b 5
0000DD6B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DD70 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DD75 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DD7A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DD7F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DD84 01                         @ceiling:	dc.b 1
0000DD85 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DD8A 02                         @chain1:	dc.b 2
0000DD8B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD90 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD95 04                         @chain2:	dc.b 4
0000DD96 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD9B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDA0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDA5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDAA 06                         @chain3:	dc.b 6
0000DDAB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DDB0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDB5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDBA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDBF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDC4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDC9 08                         @chain4:	dc.b 8
0000DDCA A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DDCF B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DDD4 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DDD9 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDDE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDE3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDE8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDED 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDF2 0A                         @chain5:	dc.b $A
0000DDF3 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DDF8 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DDFD A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DE02 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DE07 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DE0C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DE11 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DE16 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DE1B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DE20 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DE25 05                         @mediumblock:	dc.b 5
0000DE26 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DE2B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DE30 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DE35 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DE3A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE3F 01                         @smallblock:	dc.b 1
0000DE40 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DE46 00                         		even
0000DE46 00                         		even
0000DE46                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DE46                            ; ---------------------------------------------------------------------------
0000DE46                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DE46                            ; ---------------------------------------------------------------------------
0000DE46                            Map_SStom_internal:
0000DE46 0000                       		dc.w @block-Map_SStom_internal
0000DE48 0000                       		dc.w @spikes-Map_SStom_internal
0000DE4A 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DE4C 0000                       		dc.w @pole1-Map_SStom_internal
0000DE4E 0000                       		dc.w @pole2-Map_SStom_internal
0000DE50 0000                       		dc.w @pole3-Map_SStom_internal
0000DE52 0000                       		dc.w @pole4-Map_SStom_internal
0000DE54 0000                       		dc.w @pole5-Map_SStom_internal
0000DE56 0000                       		dc.w @pole5-Map_SStom_internal
0000DE58 03                         @block:		dc.b 3
0000DE59 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DE5E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DE63 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DE68 03                         @spikes:	dc.b 3
0000DE69 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DE6E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DE73 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DE78 01                         @wallbracket:	dc.b 1
0000DE79 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DE7E 02                         @pole1:		dc.b 2
0000DE7F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DE84 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE89 04                         @pole2:		dc.b 4
0000DE8A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE8F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE94 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE99 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE9E 06                         @pole3:		dc.b 6
0000DE9F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DEA4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEA9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DEAE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEB3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DEB8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEBD 08                         @pole4:		dc.b 8
0000DEBE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DEC3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEC8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DECD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DED2 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DED7 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEDC F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DEE1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DEE6 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DEE7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DEEC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEF1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DEF6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEFB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DF00 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DF05 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DF0A F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DF0F F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DF14 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DF19                            		; @pole6 should be here, but it isn't...
0000DF1A 00                         		even
0000DF1A 00                         		even
0000DF1A                            
0000DF1A                            		include	"_incObj\32 Button.asm"
0000DF1A                            ; ---------------------------------------------------------------------------
0000DF1A                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DF1A                            ; ---------------------------------------------------------------------------
0000DF1A                            
0000DF1A                            Button:
0000DF1A 7000                       		moveq	#0,d0
0000DF1C 1028 0024                  		move.b	obRoutine(a0),d0
0000DF20 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DF24 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DF28                            ; ===========================================================================
0000DF28 0000                       But_Index:	dc.w But_Main-But_Index
0000DF2A 0000                       		dc.w But_Pressed-But_Index
0000DF2C                            ; ===========================================================================
0000DF2C                            
0000DF2C                            But_Main:	; Routine 0
0000DF2C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DF30 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DF38 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DF3E 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DF44 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DF46                            
0000DF46 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DF4C                            
0000DF4C                            	But_IsMZ:
0000DF4C 117C 0004 0001             		move.b	#4,obRender(a0)
0000DF52 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DF58 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DF5E 5668 000C                  		addq.w	#3,obY(a0)
0000DF62                            
0000DF62                            But_Pressed:	; Routine 2
0000DF62 4A28 0001                  		tst.b	obRender(a0)
0000DF66 6A00                       		bpl.s	But_Display
0000DF68 323C 001B                  		move.w	#$1B,d1
0000DF6C 343C 0005                  		move.w	#5,d2
0000DF70 363C 0005                  		move.w	#5,d3
0000DF74 3828 0008                  		move.w	obX(a0),d4
0000DF78 6100 0000                  		bsr.w	SolidObject
0000DF7C 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DF82 1028 0028                  		move.b	obSubtype(a0),d0
0000DF86 0240 000F                  		andi.w	#$F,d0
0000DF8A 47F8 F7E0                  		lea	(f_switch).w,a3
0000DF8E 47F3 0000                  		lea	(a3,d0.w),a3
0000DF92 7600                       		moveq	#0,d3
0000DF94 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DF9A 6700                       		beq.s	loc_BDB2
0000DF9C 7607                       		moveq	#7,d3
0000DF9E                            
0000DF9E                            loc_BDB2:
0000DF9E 4A28 0028                  		tst.b	obSubtype(a0)
0000DFA2 6A00                       		bpl.s	loc_BDBE
0000DFA4 6100 0000                  		bsr.w	But_MZBlock
0000DFA8 6600                       		bne.s	loc_BDC8
0000DFAA                            
0000DFAA                            loc_BDBE:
0000DFAA 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DFAE 6600                       		bne.s	loc_BDC8
0000DFB0 0793                       		bclr	d3,(a3)
0000DFB2 6000                       		bra.s	loc_BDDE
0000DFB4                            ; ===========================================================================
0000DFB4                            
0000DFB4                            loc_BDC8:
0000DFB4 4A13                       		tst.b	(a3)
0000DFB6 6600                       		bne.s	loc_BDD6
0000DFC2                            
0000DFC2                            loc_BDD6:
0000DFC2 07D3                       		bset	d3,(a3)
0000DFC4 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DFCA                            
0000DFCA                            loc_BDDE:
0000DFCA 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DFD0 6700                       		beq.s	But_Display
0000DFD2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DFD6 6A00                       		bpl.s	But_Display
0000DFD8 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DFDE 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DFE4                            
0000DFE4                            But_Display:
0000DFE4 6100 0000                  		bsr.w	DisplaySprite
0000E006 4E75                       		rts	
0000E008                            ; ===========================================================================
0000E008                            
0000E008                            But_Delete:
0000E008 6100 0000                  		bsr.w	DeleteObject
0000E00C 4E75                       		rts	
0000E00E                            
0000E00E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E00E                            
0000E00E                            
0000E00E                            But_MZBlock:
0000E00E 3F03                       		move.w	d3,-(sp)
0000E010 3428 0008                  		move.w	obX(a0),d2
0000E014 3628 000C                  		move.w	obY(a0),d3
0000E018 0442 0010                  		subi.w	#$10,d2
0000E01C 5143                       		subq.w	#8,d3
0000E01E 383C 0020                  		move.w	#$20,d4
0000E022 3A3C 0010                  		move.w	#$10,d5
0000E026 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E02A 3C3C 005F                  		move.w	#$5F,d6
0000E02E                            
0000E02E                            But_MZLoop:
0000E02E 4A29 0001                  		tst.b	obRender(a1)
0000E032 6A00                       		bpl.s	loc_BE4E
0000E034 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E038 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E03A                            
0000E03A                            loc_BE4E:
0000E03A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E03E 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E042                            
0000E042 361F                       		move.w	(sp)+,d3
0000E044 7000                       		moveq	#0,d0
0000E046                            
0000E046                            locret_BE5A:
0000E046 4E75                       		rts	
0000E048                            ; ===========================================================================
0000E048 1010                       But_MZData:	dc.b $10, $10
0000E04A                            ; ===========================================================================
0000E04A                            
0000E04A                            loc_BE5E:
0000E04A 7001                       		moveq	#1,d0
0000E04C 0240 003F                  		andi.w	#$3F,d0
0000E050 D040                       		add.w	d0,d0
0000E052 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E056 121A                       		move.b	(a2)+,d1
0000E058 4881                       		ext.w	d1
0000E05A 3029 0008                  		move.w	obX(a1),d0
0000E05E 9041                       		sub.w	d1,d0
0000E060 9042                       		sub.w	d2,d0
0000E062 6400                       		bcc.s	loc_BE80
0000E064 D241                       		add.w	d1,d1
0000E066 D041                       		add.w	d1,d0
0000E068 6500                       		bcs.s	loc_BE84
0000E06A 60CE                       		bra.s	loc_BE4E
0000E06C                            ; ===========================================================================
0000E06C                            
0000E06C                            loc_BE80:
0000E06C B044                       		cmp.w	d4,d0
0000E06E 62CA                       		bhi.s	loc_BE4E
0000E070                            
0000E070                            loc_BE84:
0000E070 121A                       		move.b	(a2)+,d1
0000E072 4881                       		ext.w	d1
0000E074 3029 000C                  		move.w	obY(a1),d0
0000E078 9041                       		sub.w	d1,d0
0000E07A 9043                       		sub.w	d3,d0
0000E07C 6400                       		bcc.s	loc_BE9A
0000E07E D241                       		add.w	d1,d1
0000E080 D041                       		add.w	d1,d0
0000E082 6500                       		bcs.s	loc_BE9E
0000E084 60B4                       		bra.s	loc_BE4E
0000E086                            ; ===========================================================================
0000E086                            
0000E086                            loc_BE9A:
0000E086 B045                       		cmp.w	d5,d0
0000E088 62B0                       		bhi.s	loc_BE4E
0000E08A                            
0000E08A                            loc_BE9E:
0000E08A 361F                       		move.w	(sp)+,d3
0000E08C 7001                       		moveq	#1,d0
0000E08E 4E75                       		rts	
0000E090                            ; End of function But_MZBlock
0000E090                            ; End of function But_MZBlock
0000E090                            Map_But:	include	"_maps\Button.asm"
0000E090                            ; ---------------------------------------------------------------------------
0000E090                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E090                            ; ---------------------------------------------------------------------------
0000E090                            Map_But_internal:
0000E090 0000                       		dc.w byte_BEAC-Map_But_internal
0000E092 0000                       		dc.w byte_BEB7-Map_But_internal
0000E094 0000                       		dc.w byte_BEC2-Map_But_internal
0000E096 0000                       		dc.w byte_BEB7-Map_But_internal
0000E098 02                         byte_BEAC:	dc.b 2
0000E099 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E09E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E0A3 02                         byte_BEB7:	dc.b 2
0000E0A4 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E0A9 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E0AE 02                         byte_BEC2:	dc.b 2
0000E0AF F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E0B4 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E0B9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E0BE                            		even
0000E0BE                            		even
0000E0BE                            
0000E0BE                            		include	"_incObj\33 Pushable Blocks.asm"
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            ; Object 33 - pushable blocks (MZ, LZ)
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            
0000E0BE                            PushBlock:
0000E0BE 7000                       		moveq	#0,d0
0000E0C0 1028 0024                  		move.b	obRoutine(a0),d0
0000E0C4 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E0C8 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E0CC                            ; ===========================================================================
0000E0CC 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E0CE 0000                       		dc.w loc_BF6E-PushB_Index
0000E0D0 0000                       		dc.w loc_C02C-PushB_Index
0000E0D2                            
0000E0D2 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E0D4 4001                       		dc.b $40, 1
0000E0D6                            ; ===========================================================================
0000E0D6                            
0000E0D6                            PushB_Main:	; Routine 0
0000E0D6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E0DA 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E0E0 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E0E6 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E0EE 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E0F4 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E0FA 6600                       		bne.s	@notLZ
0000E0FC 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E102                            
0000E102                            	@notLZ:
0000E102 117C 0004 0001             		move.b	#4,obRender(a0)
0000E108 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E10E 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E114 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E11A 7000                       		moveq	#0,d0
0000E11C 1028 0028                  		move.b	obSubtype(a0),d0
0000E120 D040                       		add.w	d0,d0
0000E122 0240 000E                  		andi.w	#$E,d0
0000E126 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E12A 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E12E 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E132 4A28 0028                  		tst.b	obSubtype(a0)
0000E136 6700                       		beq.s	@chkgone
0000E138 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E13E                            
0000E13E                            	@chkgone:
0000E13E 45F8 FC00                  		lea	(v_objstate).w,a2
0000E142 7000                       		moveq	#0,d0
0000E144 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E148 6700                       		beq.s	loc_BF6E
0000E14A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E150 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E156 6600 0000                  		bne.w	DeleteObject
0000E15A                            
0000E15A                            loc_BF6E:	; Routine 2
0000E15A 4A28 0032                  		tst.b	$32(a0)
0000E15E 6600 0000                  		bne.w	loc_C046
0000E162 7200                       		moveq	#0,d1
0000E164 1228 0014                  		move.b	obActWid(a0),d1
0000E168 0641 000B                  		addi.w	#$B,d1
0000E16C 343C 0010                  		move.w	#$10,d2
0000E170 363C 0011                  		move.w	#$11,d3
0000E174 3828 0008                  		move.w	obX(a0),d4
0000E178 6100 0000                  		bsr.w	loc_C186
0000E17C 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E182 6600                       		bne.s	loc_BFC6	; if not, branch
0000E184 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E18A 3028 0008                  		move.w	obX(a0),d0
0000E18E 0C40 0A20                  		cmpi.w	#$A20,d0
0000E192 6500                       		bcs.s	loc_BFC6
0000E194 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E198 6400                       		bcc.s	loc_BFC6
0000E19A 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E19E 0440 001C                  		subi.w	#$1C,d0
0000E1A2 3140 000C                  		move.w	d0,obY(a0)
0000E1A6 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E1AC 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E1B2                            
0000E1B2                            	loc_BFC6:
0000E1CE 6000 0000                  		bra.w	DisplaySprite
0000E1D2                            ; ===========================================================================
0000E1D2                            
0000E1D2                            loc_ppppp:
0000E1EE 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E1F4 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E1FA 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E200 6000                       		bra.s	loc_C02C
0000E202                            ; ===========================================================================
0000E202                            
0000E202                            loc_C016:
0000E202 45F8 FC00                  		lea	(v_objstate).w,a2
0000E206 7000                       		moveq	#0,d0
0000E208 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E20C 6700                       		beq.s	loc_C028
0000E20E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E214                            
0000E214                            loc_C028:
0000E214 6000 0000                  		bra.w	DeleteObject
0000E218                            ; ===========================================================================
0000E218                            
0000E218                            loc_C02C:	; Routine 4
0000E218 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E21C 6700                       		beq.s	locret_C044
0000E21E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E224 4228 0032                  		clr.b	$32(a0)
0000E228 4268 0010                  		clr.w	obVelX(a0)
0000E22C 4268 0012                  		clr.w	obVelY(a0)
0000E230                            
0000E230                            locret_C044:
0000E230 4E75                       		rts	
0000E232                            ; ===========================================================================
0000E232                            
0000E232                            loc_C046:
0000E232 3F28 0008                  		move.w	obX(a0),-(sp)
0000E236 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E23C 6400                       		bcc.s	loc_C056
0000E23E 6100 0000                  		bsr.w	SpeedToPos
0000E242                            
0000E242                            loc_C056:
0000E242 0828 0001 0022             		btst	#1,obStatus(a0)
0000E248 6700                       		beq.s	loc_C0A0
0000E24A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E250 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E256 4A41                       		tst.w	d1
0000E258 6A00 0000                  		bpl.w	loc_C09E
0000E25C D368 000C                  		add.w	d1,obY(a0)
0000E260 4268 0012                  		clr.w	obVelY(a0)
0000E264 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E26A 3011                       		move.w	(a1),d0
0000E26C 0240 03FF                  		andi.w	#$3FF,d0
0000E270 0C40 016A                  		cmpi.w	#$16A,d0
0000E274 6500                       		bcs.s	loc_C09E
0000E276 3028 0030                  		move.w	$30(a0),d0
0000E27A E640                       		asr.w	#3,d0
0000E27C 3140 0010                  		move.w	d0,obVelX(a0)
0000E280 117C 0001 0032             		move.b	#1,$32(a0)
0000E286 4268 000E                  		clr.w	$E(a0)
0000E28A                            
0000E28A                            loc_C09E:
0000E28A 6000                       		bra.s	loc_C0E6
0000E28C                            ; ===========================================================================
0000E28C                            
0000E28C                            loc_C0A0:
0000E28C 4A68 0010                  		tst.w	obVelX(a0)
0000E290 6700 0000                  		beq.w	loc_C0D6
0000E294 6B00                       		bmi.s	loc_C0BC
0000E296 7600                       		moveq	#0,d3
0000E298 1628 0014                  		move.b	obActWid(a0),d3
0000E29C 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E2A2 4A41                       		tst.w	d1		; has block touched a wall?
0000E2A4 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E2A6 6000                       		bra.s	loc_C0E6
0000E2A8                            ; ===========================================================================
0000E2A8                            
0000E2A8                            loc_C0BC:
0000E2A8 7600                       		moveq	#0,d3
0000E2AA 1628 0014                  		move.b	obActWid(a0),d3
0000E2AE 4643                       		not.w	d3
0000E2B0 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E2B6 4A41                       		tst.w	d1		; has block touched a wall?
0000E2B8 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E2BA 6000                       		bra.s	loc_C0E6
0000E2BC                            ; ===========================================================================
0000E2BC                            
0000E2BC                            PushB_StopPush:
0000E2BC 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E2C0 6000                       		bra.s	loc_C0E6
0000E2C2                            ; ===========================================================================
0000E2C2                            
0000E2C2                            loc_C0D6:
0000E2C2 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E2CA 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E2D0 6400                       		bcc.s	loc_C104
0000E2D2                            
0000E2D2                            loc_C0E6:
0000E2D2 7200                       		moveq	#0,d1
0000E2D4 1228 0014                  		move.b	obActWid(a0),d1
0000E2D8 0641 000B                  		addi.w	#$B,d1
0000E2DC 343C 0010                  		move.w	#$10,d2
0000E2E0 363C 0011                  		move.w	#$11,d3
0000E2E4 381F                       		move.w	(sp)+,d4
0000E2E6 6100 0000                  		bsr.w	loc_C186
0000E2EA 6100                       		bsr.s	PushB_ChkLava
0000E2EC 6000 FEC4                  		bra.w	loc_BFC6
0000E2F0                            ; ===========================================================================
0000E2F0                            
0000E2F0                            loc_C104:
0000E2F0 381F                       		move.w	(sp)+,d4
0000E2F2 43F8 D000                  		lea	(v_player).w,a1
0000E2F6 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E2FC 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E302 6000 FECE                  		bra.w	loc_ppppp
0000E306                            ; ===========================================================================
0000E306                            
0000E306                            PushB_ChkLava:
0000E306 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E30C 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E30E 343C FFE0                  		move.w	#-$20,d2
0000E312 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E318 6700                       		beq.s	PushB_LoadLava
0000E31A 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E320 6700                       		beq.s	PushB_LoadLava
0000E322 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E328 6700                       		beq.s	PushB_LoadLava
0000E32A 4E75                       		rts	
0000E32C                            ; ===========================================================================
0000E32C                            
0000E32C                            PushB_ChkLava2:
0000E32C 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E332 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E334 343C 0020                  		move.w	#$20,d2
0000E338 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E33E 6700                       		beq.s	PushB_LoadLava
0000E340 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E346 6700                       		beq.s	PushB_LoadLava
0000E348                            
0000E348                            PushB_NoLava:
0000E348 4E75                       		rts	
0000E34A                            ; ===========================================================================
0000E34A                            
0000E34A                            PushB_LoadLava:
0000E34A 6100 0000                  		bsr.w	FindFreeObj
0000E34E 6600                       		bne.s	locret_C184
0000E350 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E354 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E35A D569 0008                  		add.w	d2,obX(a1)
0000E35E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E364 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E36A 2348 003C                  		move.l	a0,$3C(a1)
0000E36E                            
0000E36E                            locret_C184:
0000E36E 4E75                       		rts	
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            loc_C186:
0000E370 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E374 6700 0000                  		beq.w	loc_C218
0000E378 5500                       		subq.b	#2,d0
0000E37A 6600                       		bne.s	loc_C1AA
0000E37C 6100 AAA2                  		bsr.w	ExitPlatform
0000E380 0829 0003 0022             		btst	#3,obStatus(a1)
0000E386 6600                       		bne.s	loc_C1A4
0000E388 4228 0025                  		clr.b	ob2ndRout(a0)
0000E38C 4E75                       		rts	
0000E38E                            ; ===========================================================================
0000E38E                            
0000E38E                            loc_C1A4:
0000E38E 3404                       		move.w	d4,d2
0000E390 6000 AFEC                  		bra.w	MvSonicOnPtfm
0000E394                            ; ===========================================================================
0000E394                            
0000E394                            loc_C1AA:
0000E394 5500                       		subq.b	#2,d0
0000E396 6600                       		bne.s	loc_C1F2
0000E398 6100 0000                  		bsr.w	SpeedToPos
0000E39C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E3A2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E3A8 4A41                       		tst.w	d1
0000E3AA 6A00 0000                  		bpl.w	locret_C1F0
0000E3AE D368 000C                  		add.w	d1,obY(a0)
0000E3B2 4268 0012                  		clr.w	obVelY(a0)
0000E3B6 4228 0025                  		clr.b	ob2ndRout(a0)
0000E3BA 3011                       		move.w	(a1),d0
0000E3BC 0240 03FF                  		andi.w	#$3FF,d0
0000E3C0 0C40 016A                  		cmpi.w	#$16A,d0
0000E3C4 6500                       		bcs.s	locret_C1F0
0000E3C6 3028 0030                  		move.w	$30(a0),d0
0000E3CA E640                       		asr.w	#3,d0
0000E3CC 3140 0010                  		move.w	d0,obVelX(a0)
0000E3D0 117C 0001 0032             		move.b	#1,$32(a0)
0000E3D6 4268 000E                  		clr.w	obY+2(a0)
0000E3DA                            
0000E3DA                            locret_C1F0:
0000E3DA 4E75                       		rts	
0000E3DC                            ; ===========================================================================
0000E3DC                            
0000E3DC                            loc_C1F2:
0000E3DC 6100 0000                  		bsr.w	SpeedToPos
0000E3E0 3028 0008                  		move.w	obX(a0),d0
0000E3E4 0240 000C                  		andi.w	#$C,d0
0000E3E8 6600 0000                  		bne.w	locret_C2E4
0000E3EC 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E3F2 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E3F8 4268 0010                  		clr.w	obVelX(a0)
0000E3FC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E400 4E75                       		rts	
0000E402                            ; ===========================================================================
0000E402                            
0000E402                            loc_C218:
0000E402 6100 0000                  		bsr.w	Solid_ChkEnter
0000E406 4A44                       		tst.w	d4
0000E408 6700 0000                  		beq.w	locret_C2E4
0000E40C 6B00 0000                  		bmi.w	locret_C2E4
0000E410 4A28 0032                  		tst.b	$32(a0)
0000E414 6700                       		beq.s	loc_C230
0000E416 6000 0000                  		bra.w	locret_C2E4
0000E41A                            ; ===========================================================================
0000E41A                            
0000E41A                            loc_C230:
0000E41A 4A40                       		tst.w	d0
0000E41C 6700 0000                  		beq.w	locret_C2E4
0000E420 6B00                       		bmi.s	loc_C268
0000E422 0829 0000 0022             		btst	#0,obStatus(a1)
0000E428 6600 0000                  		bne.w	locret_C2E4
0000E42C 3F00                       		move.w	d0,-(sp)
0000E42E 7600                       		moveq	#0,d3
0000E430 1628 0014                  		move.b	obActWid(a0),d3
0000E434 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E43A 301F                       		move.w	(sp)+,d0
0000E43C 4A41                       		tst.w	d1
0000E43E 6B00 0000                  		bmi.w	locret_C2E4
0000E442 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E44A 7001                       		moveq	#1,d0
0000E44C 323C 0040                  		move.w	#$40,d1
0000E450 6000                       		bra.s	loc_C294
0000E452                            ; ===========================================================================
0000E452                            
0000E452                            loc_C268:
0000E452 0829 0000 0022             		btst	#0,obStatus(a1)
0000E458 6700                       		beq.s	locret_C2E4
0000E45A 3F00                       		move.w	d0,-(sp)
0000E45C 7600                       		moveq	#0,d3
0000E45E 1628 0014                  		move.b	obActWid(a0),d3
0000E462 4643                       		not.w	d3
0000E464 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E46A 301F                       		move.w	(sp)+,d0
0000E46C 4A41                       		tst.w	d1
0000E46E 6B00                       		bmi.s	locret_C2E4
0000E470 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E478 70FF                       		moveq	#-1,d0
0000E47A 323C FFC0                  		move.w	#-$40,d1
0000E47E                            
0000E47E                            loc_C294:
0000E47E 43F8 D000                  		lea	(v_player).w,a1
0000E482 D169 0008                  		add.w	d0,obX(a1)
0000E486 3341 0020                  		move.w	d1,obInertia(a1)
0000E48A 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E490 3F00                       		move.w	d0,-(sp)
0000E49C 301F                       		move.w	(sp)+,d0
0000E49E 4A28 0028                  		tst.b	obSubtype(a0)
0000E4A2 6B00                       		bmi.s	locret_C2E4
0000E4A4 3F00                       		move.w	d0,-(sp)
0000E4A6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E4AC 301F                       		move.w	(sp)+,d0
0000E4AE 0C41 0004                  		cmpi.w	#4,d1
0000E4B2 6F00                       		ble.s	loc_C2E0
0000E4B4 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E4BA 4A40                       		tst.w	d0
0000E4BC 6A00                       		bpl.s	loc_C2D8
0000E4BE 4468 0010                  		neg.w	obVelX(a0)
0000E4C2                            
0000E4C2                            loc_C2D8:
0000E4C2 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E4C8 6000                       		bra.s	locret_C2E4
0000E4CA                            ; ===========================================================================
0000E4CA                            
0000E4CA                            loc_C2E0:
0000E4CA D368 000C                  		add.w	d1,obY(a0)
0000E4CE                            
0000E4CE                            locret_C2E4:
0000E4CE 4E75                       		rts	
0000E4CE 4E75                       		rts	
0000E4D0                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E4D0                            ; ---------------------------------------------------------------------------
0000E4D0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E4D0                            ; ---------------------------------------------------------------------------
0000E4D0                            Map_Push_internal:
0000E4D0 0000                       		dc.w @single-Map_Push_internal
0000E4D2 0000                       		dc.w @four-Map_Push_internal
0000E4D4 01                         @single:	dc.b 1
0000E4D5 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E4DA 04                         @four:		dc.b 4
0000E4DB F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E4E0 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E4E5 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E4EA F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E4F0 00                         		even
0000E4F0 00                         		even
0000E4F0                            
0000E4F0                            		include	"_incObj\34 Title Cards.asm"
0000E4F0                            ; ---------------------------------------------------------------------------
0000E4F0                            ; Object 34 - zone title cards
0000E4F0                            ; ---------------------------------------------------------------------------
0000E4F0                            
0000E4F0                            TitleCard:
0000E4F0 7000                       		moveq	#0,d0
0000E4F2 1028 0024                  		move.b	obRoutine(a0),d0
0000E4F6 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E4FA 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E4FE                            ; ===========================================================================
0000E4FE 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E500 0000                       		dc.w Card_ChkPos-Card_Index
0000E502 0000                       		dc.w Card_Wait-Card_Index
0000E504 0000                       		dc.w Card_Wait-Card_Index
0000E506                            
0000E506 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E506 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E506                            ; ===========================================================================
0000E506                            
0000E506                            Card_CheckSBZ3:	; Routine 0
0000E506 2248                       		movea.l	a0,a1
0000E508 7000                       		moveq	#0,d0
0000E50A 1038 FE10                  		move.b	(v_zone).w,d0
0000E50E 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E514 6600                       		bne.s	Card_CheckFZ
0000E516 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E518                            
0000E518                            	Card_CheckFZ:
0000E518 3400                       		move.w	d0,d2
0000E51A 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E520 6600                       		bne.s	Card_LoadConfig
0000E522 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E524 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E526                            
0000E526                            	Card_LoadConfig:
0000E526 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E52C E948                       		lsl.w	#4,d0
0000E52E D6C0                       		adda.w	d0,a3
0000E530 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E536 7203                       		moveq	#3,d1
0000E538                            
0000E538                            Card_Loop:
0000E538 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E53C 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E540 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E544 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E548 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E54C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E550 101A                       		move.b	(a2)+,d0
0000E552 6600                       		bne.s	Card_ActNumber
0000E554 1002                       		move.b	d2,d0
0000E556                            
0000E556                            	Card_ActNumber:
0000E556 0C00 0007                  		cmpi.b	#7,d0
0000E55A 6600                       		bne.s	Card_MakeSprite
0000E55C D038 FE11                  		add.b	(v_act).w,d0
0000E560 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E566 6600                       		bne.s	Card_MakeSprite
0000E568 5300                       		subq.b	#1,d0
0000E56A                            
0000E56A                            	Card_MakeSprite:
0000E56A 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E56E 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E576 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E57C 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E582 137C 0000 0001             		move.b	#0,obRender(a1)
0000E588 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E58E 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E594 43E9 0040                  		lea	$40(a1),a1	; next object
0000E598 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E59C                            
0000E59C                            Card_ChkPos:	; Routine 2
0000E59C 7210                       		moveq	#$10,d1		; set horizontal speed
0000E59E 3028 0030                  		move.w	card_mainX(a0),d0
0000E5A2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E5A6 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E5A8 6C00                       		bge.s	Card_Move
0000E5AA 4441                       		neg.w	d1
0000E5AC                            
0000E5AC                            Card_Move:
0000E5AC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5B0                            
0000E5B0                            Card_NoMove:
0000E5B0 3028 0008                  		move.w	obX(a0),d0
0000E5B4 6B00                       		bmi.s	locret_C3D8
0000E5B6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E5BA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E5BC 6000 0000                  		bra.w	DisplaySprite
0000E5C0                            ; ===========================================================================
0000E5C0                            
0000E5C0                            locret_C3D8:
0000E5C0 4E75                       		rts	
0000E5C2                            ; ===========================================================================
0000E5C2                            
0000E5C2                            Card_Wait:	; Routine 4/6
0000E5C2 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E5C6 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E5C8 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E5CC 6000 0000                  		bra.w	DisplaySprite
0000E5D0                            ; ===========================================================================
0000E5D0                            
0000E5D0                            Card_ChkPos2:
0000E5D0 4A28 0001                  		tst.b	obRender(a0)
0000E5D4 6A00                       		bpl.s	Card_ChangeArt
0000E5D6 7220                       		moveq	#$20,d1
0000E5D8 3028 0032                  		move.w	card_finalX(a0),d0
0000E5DC B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E5E0 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E5E2 6C00                       		bge.s	Card_Move2
0000E5E4 4441                       		neg.w	d1
0000E5E6                            
0000E5E6                            Card_Move2:
0000E5E6 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5EA 3028 0008                  		move.w	obX(a0),d0
0000E5EE 6B00                       		bmi.s	locret_C412
0000E5F0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E5F4 6400                       		bcc.s	locret_C412	; if yes, branch
0000E5F6 6000 0000                  		bra.w	DisplaySprite
0000E5FA                            ; ===========================================================================
0000E5FA                            
0000E5FA                            locret_C412:
0000E5FA 4E75                       		rts	
0000E5FC                            ; ===========================================================================
0000E5FC                            
0000E5FC                            Card_ChangeArt:
0000E5FC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E602 6600                       		bne.s	Card_Delete
0000E604 7000                       		moveq	#plcid_Explode,d0
0000E606 4EB9 0000 1798             		jsr	(AddPLC).l	; load explosion patterns
0000E60C 7000                       		moveq	#0,d0
0000E60E 1038 FE10                  		move.b	(v_zone).w,d0
0000E612 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E616 4EB9 0000 1798             		jsr	(AddPLC).l	; load animal patterns
0000E61C                            
0000E61C                            Card_Delete:
0000E61C 6000 0000                  		bra.w	DeleteObject
0000E620                            ; ===========================================================================
0000E620 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E622 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E624 00E4                       		dc.w $E4
0000E626 0206                       		dc.b 2,	6
0000E628 00EA                       		dc.w $EA
0000E62A 0207                       		dc.b 2,	7
0000E62C 00E0                       		dc.w $E0
0000E62E 020A                       		dc.b 2,	$A
0000E630                            ; ---------------------------------------------------------------------------
0000E630                            ; Title	card configuration data
0000E630                            ; Format:
0000E630                            ; 4 bytes per item (YYYY XXXX)
0000E630                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E630                            ; ---------------------------------------------------------------------------
0000E630 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E640 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E650 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E660 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E670 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E680 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E690 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E6A0                            ; ===========================================================================
0000E6A0                            ; ===========================================================================
0000E6A0                            		include	"_incObj\39 Game Over.asm"
0000E6A0                            ; ---------------------------------------------------------------------------
0000E6A0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E6A0                            ; ---------------------------------------------------------------------------
0000E6A0                            
0000E6A0                            GameOverCard:
0000E6A0 7000                       		moveq	#0,d0
0000E6A2 1028 0024                  		move.b	obRoutine(a0),d0
0000E6A6 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E6AA 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E6AE                            ; ===========================================================================
0000E6AE 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E6B0 0000                       		dc.w Over_Move-Over_Index
0000E6B2 0000                       		dc.w Over_Wait-Over_Index
0000E6B4                            ; ===========================================================================
0000E6B4                            
0000E6B4                            Over_ChkPLC:	; Routine 0
0000E6B4 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6B8 6700                       		beq.s	Over_Main	; if yes, branch
0000E6BA 4E75                       		rts	
0000E6BC                            ; ===========================================================================
0000E6BC                            
0000E6BC                            Over_Main:
0000E6BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6C0 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E6C6 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E6CC 6700                       		beq.s	Over_1stWord	; if not, branch
0000E6CE 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E6D4                            
0000E6D4                            	Over_1stWord:
0000E6D4 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E6DA 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E6E2 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E6E8 117C 0000 0001             		move.b	#0,obRender(a0)
0000E6EE 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E6F4                            
0000E6F4                            Over_Move:	; Routine 2
0000E6F4 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6F6 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E6FC 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E6FE 6500                       		bcs.s	Over_UpdatePos
0000E700 4441                       		neg.w	d1
0000E702                            
0000E702                            	Over_UpdatePos:
0000E702 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E706 6000 0000                  		bra.w	DisplaySprite
0000E70A                            ; ===========================================================================
0000E70A                            
0000E70A                            Over_SetWait:
0000E70A 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E710 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E714 4E75                       		rts	
0000E716                            ; ===========================================================================
0000E716                            
0000E716                            Over_Wait:	; Routine 4
0000E716 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E71A 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E71E 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E720 0828 0000 001A             		btst	#0,obFrame(a0)
0000E726 6600                       		bne.s	Over_Display
0000E728 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E72C 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E72E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E732 6000 0000                  		bra.w	DisplaySprite
0000E736                            ; ===========================================================================
0000E736                            
0000E736                            Over_ChgMode:
0000E736 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E73A 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E73C 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E742 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E746 6600                       		bne.s	Over_Display	; if yes, branch
0000E748 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E74E 6000                       		bra.s	Over_Display
0000E750                            ; ===========================================================================
0000E750                            
0000E750                            Over_ResetLvl:
0000E750 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E754 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E75A                            
0000E75A                            Over_Display:
0000E75A 6000 0000                  		bra.w	DisplaySprite
0000E75A 6000 0000                  		bra.w	DisplaySprite
0000E75E                            		include	"_incObj\3A Got Through Card.asm"
0000E75E                            ; ---------------------------------------------------------------------------
0000E75E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E75E                            ; ---------------------------------------------------------------------------
0000E75E                            
0000E75E                            GotThroughCard:
0000E75E 7000                       		moveq	#0,d0
0000E760 1028 0024                  		move.b	obRoutine(a0),d0
0000E764 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E768 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E76C                            ; ===========================================================================
0000E76C 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E76E 0000                       		dc.w Got_Move-Got_Index
0000E770 0000                       		dc.w Got_Wait-Got_Index
0000E772 0000                       		dc.w Got_TimeBonus-Got_Index
0000E774 0000                       		dc.w Got_Wait-Got_Index
0000E776 0000                       		dc.w Got_NextLevel-Got_Index
0000E778 0000                       		dc.w Got_Wait-Got_Index
0000E77A 0000                       		dc.w Got_Move2-Got_Index
0000E77C 0000                       		dc.w loc_C766-Got_Index
0000E77E                            
0000E77E =00000030                  got_mainX:	equ $30		; position for card to display on
0000E77E =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E77E                            ; ===========================================================================
0000E77E                            
0000E77E                            Got_ChkPLC:	; Routine 0
0000E77E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E782 6700                       		beq.s	Got_Main	; if yes, branch
0000E784 4E75                       		rts	
0000E786                            ; ===========================================================================
0000E786                            
0000E786                            Got_Main:
0000E786 2248                       		movea.l	a0,a1
0000E788 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E78E 7206                       		moveq	#6,d1
0000E790                            
0000E790                            Got_Loop:
0000E790 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E794 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E798 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E79C 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E7A0 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E7A4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E7A8 101A                       		move.b	(a2)+,d0
0000E7AA 0C00 0006                  		cmpi.b	#6,d0
0000E7AE 6600                       		bne.s	loc_C5CA
0000E7B0 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E7B4                            
0000E7B4                            	loc_C5CA:
0000E7B4 1340 001A                  		move.b	d0,obFrame(a1)
0000E7B8 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E7C0 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E7C6 137C 0000 0001             		move.b	#0,obRender(a1)
0000E7CC 43E9 0040                  		lea	$40(a1),a1
0000E7D0 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E7D4                            
0000E7D4                            Got_Move:	; Routine 2
0000E7D4 7210                       		moveq	#$10,d1		; set horizontal speed
0000E7D6 3028 0030                  		move.w	got_mainX(a0),d0
0000E7DA B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E7DE 6700                       		beq.s	loc_C61A	; if yes, branch
0000E7E0 6C00                       		bge.s	Got_ChgPos
0000E7E2 4441                       		neg.w	d1
0000E7E4                            
0000E7E4                            	Got_ChgPos:
0000E7E4 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E7E8                            
0000E7E8                            	loc_C5FE:
0000E7E8 3028 0008                  		move.w	obX(a0),d0
0000E7EC 6B00                       		bmi.s	locret_C60E
0000E7EE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E7F2 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E7F4 6000 0000                  		bra.w	DisplaySprite
0000E7F8                            ; ===========================================================================
0000E7F8                            
0000E7F8                            locret_C60E:
0000E7F8 4E75                       		rts	
0000E7FA                            ; ===========================================================================
0000E7FA                            
0000E7FA                            loc_C610:
0000E7FA 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E800 6000 0000                  		bra.w	Got_Move2
0000E804                            ; ===========================================================================
0000E804                            
0000E804                            loc_C61A:
0000E804 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E80A 67EE                       		beq.s	loc_C610
0000E80C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E812 66D4                       		bne.s	loc_C5FE
0000E814 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E818 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E81E                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E81E                            
0000E81E                            Got_Wait:	; Routine 4, 8, $C
0000E81E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E822 6600                       		bne.s	Got_Display
0000E824 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E828                            
0000E828                            Got_Display:
0000E828 6000 0000                  		bra.w	DisplaySprite
0000E82C                            ; ===========================================================================
0000E82C                            
0000E82C                            Got_TimeBonus:	; Routine 6
0000E82C 6100 0000                  		bsr.w	DisplaySprite
0000E830 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E836 7000                       		moveq	#0,d0
0000E838 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E83C 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E83E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E842 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E848                            
0000E848                            Got_RingBonus:
0000E848 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E84C 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E84E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E852 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E858                            
0000E858                            Got_ChkBonus:
0000E858 4A40                       		tst.w	d0		; is there any bonus?
0000E85A 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E866 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E86A 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E870 6600                       		bne.s	Got_SetDelay
0000E872 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E876                            
0000E876                            Got_SetDelay:
0000E876 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E87C                            
0000E87C                            locret_C692:
0000E87C 4E75                       		rts	
0000E87E                            ; ===========================================================================
0000E87E                            
0000E87E                            Got_AddBonus:
0000E87E 4EB9 0000 0000             		jsr	(AddPoints).l
0000E884 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E888 0200 0003                  		andi.b	#3,d0
0000E88C 66EE                       		bne.s	locret_C692
0000E898                            ; ===========================================================================
0000E898                            
0000E898                            Got_NextLevel:	; Routine $A
0000E898 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E89E 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E8A4 1038 FE10                  		move.b	(v_zone).w,d0
0000E8A8 0240 0007                  		andi.w	#7,d0
0000E8AC E748                       		lsl.w	#3,d0
0000E8AE 1238 FE11                  		move.b	(v_act).w,d1
0000E8B2 0241 0003                  		andi.w	#3,d1
0000E8B6 D241                       		add.w	d1,d1
0000E8B8 D041                       		add.w	d1,d0
0000E8BA 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E8BE 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E8C2 4A40                       		tst.w	d0
0000E8C4 6600                       		bne.s	Got_ChkSS
0000E8C6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E8CC 6000                       		bra.s	Got_Display2
0000E8CE                            ; ===========================================================================
0000E8CE                            
0000E8CE                            Got_ChkSS:	
0000E8CE 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E8D2                            		;tst.b	(f_emeraldm).w
0000E8D2                            		;beq.s	VBla_08A
0000E8D2                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E8D2                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E8D2                            		;bra.s	Got_Display2
0000E8D2 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E8D8                            		
0000E8D8                            ; ===========================================================================
0000E8D8                            
0000E8D8                            VBla_08A:
0000E8D8 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E8DE                            
0000E8DE                            Got_Display2:
0000E8DE 6000 0000                  		bra.w	DisplaySprite
0000E8E2                            ; ===========================================================================
0000E8E2                            ; ---------------------------------------------------------------------------
0000E8E2                            ; Level	order array
0000E8E2                            ; ---------------------------------------------------------------------------
0000E8E2                            LevelOrder:
0000E8E2                            		; Green Hill Zone
0000E8E2 0001                       		dc.b id_GHZ, 1	; Act 2
0000E8E4 0002                       		dc.b id_GHZ, 2	; Act 2
0000E8E6 0400                       		dc.b id_SYZ, 0	; Act 3
0000E8E8 0000                       		dc.b 0, 0
0000E8EA                            
0000E8EA                            		; Labyrinth Zone
0000E8EA 0101                       		dc.b id_LZ, 1	; Act 1
0000E8EC 0102                       		dc.b id_LZ, 2	; Act 2
0000E8EE 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E8F0 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E8F2                            
0000E8F2                            		; Marble Zone
0000E8F2 0201                       		dc.b id_MZ, 1	; Act 1
0000E8F4 0202                       		dc.b id_MZ, 2	; Act 2
0000E8F6 0502                       		dc.b id_SBZ, 2	; Act 3
0000E8F8 0000                       		dc.b 0, 0
0000E8FA                            
0000E8FA                            		; Star Light Zone
0000E8FA 0301                       		dc.b id_SLZ, 1	; Act 1
0000E8FC 0302                       		dc.b id_SLZ, 2	; Act 2
0000E8FE 0500                       		dc.b id_SBZ, 0	; Act 3
0000E900 0000                       		dc.b 0, 0
0000E902                            
0000E902                            		; Spring Yard Zone
0000E902 0401                       		dc.b id_SYZ, 1	; Act 1
0000E904 0200                       		dc.b id_MZ,  0	; Act 2
0000E906 0200                       		dc.b id_MZ,	 0	; Act 3
0000E908 0000                       		dc.b 0, 0
0000E90A                            
0000E90A                            		; Scrap Brain Zone
0000E90A 0501                       		dc.b id_SBZ, 1	; Act 1
0000E90C 0103                       		dc.b id_LZ, 3	; Act 2
0000E90E 0000                       		dc.b 0, 0	; Final Zone
0000E910 0000                       		dc.b 0, 0
0000E912                            		even
0000E912                            ; ===========================================================================
0000E912                            
0000E912                            Got_Move2:	; Routine $E
0000E912 7220                       		moveq	#$20,d1		; set horizontal speed
0000E914 3028 0032                  		move.w	got_finalX(a0),d0
0000E918 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E91C 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E91E 6C00                       		bge.s	Got_ChgPos2
0000E920 4441                       		neg.w	d1
0000E922                            
0000E922                            	Got_ChgPos2:
0000E922 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E926 3028 0008                  		move.w	obX(a0),d0
0000E92A 6B00                       		bmi.s	locret_C748
0000E92C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E930 6400                       		bcc.s	locret_C748	; if yes, branch
0000E932 6000 0000                  		bra.w	DisplaySprite
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            locret_C748:
0000E936 4E75                       		rts	
0000E938                            ; ===========================================================================
0000E938                            
0000E938                            Got_SBZ2:
0000E938 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E93E 6600 0000                  		bne.w	DeleteObject
0000E942 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E946 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E94A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E950                            ; ===========================================================================
0000E950                            
0000E950                            loc_C766:	; Routine $10
0000E950 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E954 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E95A 6700 0000                  		beq.w	DeleteObject
0000E95E 4E75                       		rts	
0000E960                            ; ===========================================================================
0000E960                            		;    x-start,	x-main,	y-main,
0000E960                            		;				routine, frame number
0000E960                            
0000E960 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E966 0200                       		dc.b 				2,	0
0000E968                            
0000E968 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E96E 0201                       		dc.b 				2,	1
0000E970                            
0000E970 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E976 0206                       		dc.b 				2,	6
0000E978                            
0000E978 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E97E 0202                       		dc.b 				2,	2
0000E980                            
0000E980 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E986 0203                       		dc.b 				2,	3
0000E988                            
0000E988 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E98E 0204                       		dc.b 				2,	4
0000E990                            
0000E990 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E996 0205                       		dc.b 				2,	5
0000E996 0205                       		dc.b 				2,	5
0000E998                            		include	"_incObj\7E Special Stage Results.asm"
0000E998                            ; ---------------------------------------------------------------------------
0000E998                            ; Object 7E - special stage results screen
0000E998                            ; ---------------------------------------------------------------------------
0000E998                            
0000E998                            SSResult:
0000E998 7000                       		moveq	#0,d0
0000E99A 1028 0024                  		move.b	obRoutine(a0),d0
0000E99E 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E9A2 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E9A6                            ; ===========================================================================
0000E9A6 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E9A8 0000                       		dc.w SSR_Move-SSR_Index
0000E9AA 0000                       		dc.w SSR_Wait-SSR_Index
0000E9AC 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E9AE 0000                       		dc.w SSR_Wait-SSR_Index
0000E9B0 0000                       		dc.w SSR_Exit-SSR_Index
0000E9B2 0000                       		dc.w SSR_Wait-SSR_Index
0000E9B4 0000                       		dc.w SSR_Continue-SSR_Index
0000E9B6 0000                       		dc.w SSR_Wait-SSR_Index
0000E9B8 0000                       		dc.w SSR_Exit-SSR_Index
0000E9BA 0000                       		dc.w loc_C91A-SSR_Index
0000E9BC                            
0000E9BC =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E9BC                            ; ===========================================================================
0000E9BC                            
0000E9BC                            SSR_ChkPLC:	; Routine 0
0000E9BC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E9C0 6700                       		beq.s	SSR_Main	; if yes, branch
0000E9C2 4E75                       		rts	
0000E9C4                            ; ===========================================================================
0000E9C4                            
0000E9C4                            SSR_Main:
0000E9C4 2248                       		movea.l	a0,a1
0000E9C6 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E9CC 7203                       		moveq	#3,d1
0000E9CE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E9D4 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E9D6 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E9D8                            
0000E9D8                            	SSR_Loop:
0000E9D8 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E9DC 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E9E0 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E9E4 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E9E8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E9EC 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E9F0 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E9F8 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E9FE 137C 0000 0001             		move.b	#0,obRender(a1)
0000EA04 43E9 0040                  		lea	$40(a1),a1
0000EA08 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EA0C                            
0000EA0C 7007                       		moveq	#7,d0
0000EA0E 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EA12 6700                       		beq.s	loc_C842
0000EA14 7000                       		moveq	#0,d0
0000EA16 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EA1A 6600                       		bne.s	loc_C842	; if not, branch
0000EA1C 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EA1E 317C 0018 0008             		move.w	#$18,obX(a0)
0000EA24 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EA2A                            
0000EA2A                            loc_C842:
0000EA2A 1140 001A                  		move.b	d0,obFrame(a0)
0000EA2E                            
0000EA2E                            SSR_Move:	; Routine 2
0000EA2E 7210                       		moveq	#$10,d1		; set horizontal speed
0000EA30 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EA34 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EA38 6700                       		beq.s	loc_C86C	; if yes, branch
0000EA3A 6C00                       		bge.s	SSR_ChgPos
0000EA3C 4441                       		neg.w	d1
0000EA3E                            
0000EA3E                            SSR_ChgPos:
0000EA3E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA42                            
0000EA42                            loc_C85A:
0000EA42 3028 0008                  		move.w	obX(a0),d0
0000EA46 6B00                       		bmi.s	locret_C86A
0000EA48 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA4C 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EA4E 6000 0000                  		bra.w	DisplaySprite
0000EA52                            ; ===========================================================================
0000EA52                            
0000EA52                            locret_C86A:
0000EA52 4E75                       		rts	
0000EA54                            ; ===========================================================================
0000EA54                            
0000EA54                            loc_C86C:
0000EA54 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EA5A 66E6                       		bne.s	loc_C85A
0000EA5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA60 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA66 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EA6C                            
0000EA6C                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EA6C 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EA70 6600                       		bne.s	SSR_Display
0000EA72 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA76                            
0000EA76                            SSR_Display:
0000EA76 6000 0000                  		bra.w	DisplaySprite
0000EA7A                            ; ===========================================================================
0000EA7A                            
0000EA7A                            SSR_RingBonus:	; Routine 6
0000EA7A 6100 0000                  		bsr.w	DisplaySprite
0000EA7E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EA84 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EA88 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EA8A 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EA90 700A                       		moveq	#10,d0		; add 10 to score
0000EA92 4EB9 0000 0000             		jsr	(AddPoints).l
0000EA98 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA9C 0200 0003                  		andi.b	#3,d0
0000EAA0 6600                       		bne.s	locret_C8EA
0000EAAC                            ; ===========================================================================
0000EAAC                            
0000EAAC                            loc_C8C4:
0000EAB6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EABA 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EAC0 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EAC6 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EAC8 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EACE 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EAD2                            
0000EAD2                            locret_C8EA:
0000EAD2 4E75                       		rts	
0000EAD4                            ; ===========================================================================
0000EAD4                            
0000EAD4                            SSR_Exit:	; Routine $A, $12
0000EAD4 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EADA 6000 0000                  		bra.w	DisplaySprite
0000EADE                            ; ===========================================================================
0000EADE                            
0000EADE                            SSR_Continue:	; Routine $E
0000EADE 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EAE4 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EAF4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EAF8 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EAFE 6000 0000                  		bra.w	DisplaySprite
0000EB02                            ; ===========================================================================
0000EB02                            
0000EB02                            loc_C91A:	; Routine $14
0000EB02 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EB06 0200 000F                  		andi.b	#$F,d0
0000EB0A 6600                       		bne.s	SSR_Display2
0000EB0C 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EB12                            
0000EB12                            SSR_Display2:
0000EB12 6000 0000                  		bra.w	DisplaySprite
0000EB16                            ; ===========================================================================
0000EB16 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EB1C 0200                       		dc.b 2,	0		; rountine number, frame number
0000EB1E 0320 0120 0118             		dc.w $320, $120, $118
0000EB24 0201                       		dc.b 2,	1
0000EB26 0360 0120 0128             		dc.w $360, $120, $128
0000EB2C 0202                       		dc.b 2,	2
0000EB2E 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EB34 0203                       		dc.b 2,	3
0000EB36 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EB3C 0206                       		dc.b 2,	6
0000EB3C 0206                       		dc.b 2,	6
0000EB3E                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EB3E                            ; ---------------------------------------------------------------------------
0000EB3E                            ; Object 7F - chaos emeralds from the special stage results screen
0000EB3E                            ; ---------------------------------------------------------------------------
0000EB3E                            
0000EB3E                            SSRChaos:
0000EB3E 7000                       		moveq	#0,d0
0000EB40 1028 0024                  		move.b	obRoutine(a0),d0
0000EB44 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EB48 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EB4C                            ; ===========================================================================
0000EB4C 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EB4E 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EB50                            
0000EB50                            ; ---------------------------------------------------------------------------
0000EB50                            ; X-axis positions for chaos emeralds
0000EB50                            ; ---------------------------------------------------------------------------
0000EB50 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EB5C                            ; ===========================================================================
0000EB5C                            
0000EB5C                            SSRC_Main:	; Routine 0
0000EB5C 2248                       		movea.l	a0,a1
0000EB5E 45F9 0000 EB50             		lea	(SSRC_PosData).l,a2
0000EB64 7400                       		moveq	#0,d2
0000EB66 7200                       		moveq	#0,d1
0000EB68 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EB6C 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EB6E 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EB72                            
0000EB72                            	SSRC_Loop:
0000EB72 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EB76 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EB7A 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EB80 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EB84 1633 2000                  		move.b	(a3,d2.w),d3
0000EB88 1343 001A                  		move.b	d3,obFrame(a1)
0000EB8C 1343 001C                  		move.b	d3,obAnim(a1)
0000EB90 5202                       		addq.b	#1,d2
0000EB92 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EB96 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EB9E 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EBA4 137C 0000 0001             		move.b	#0,obRender(a1)
0000EBAA 43E9 0040                  		lea	$40(a1),a1	; next object
0000EBAE 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EBB2                            
0000EBB2                            SSRC_Flash:	; Routine 2
0000EBB2 1028 001A                  		move.b	obFrame(a0),d0
0000EBB6 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EBBC 0C00 0006                  		cmpi.b	#6,d0
0000EBC0 6600                       		bne.s	SSRC_Display
0000EBC2 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EBC8                            
0000EBC8                            	SSRC_Display:
0000EBC8 6000 0000                  		bra.w	DisplaySprite
0000EBC8 6000 0000                  		bra.w	DisplaySprite
0000EBCC                            
0000EBCC                            ; ---------------------------------------------------------------------------
0000EBCC                            ; Sprite mappings - zone title cards
0000EBCC                            ; ---------------------------------------------------------------------------
0000EBCC 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EBCE 0000                       		dc.w M_Card_LZ-Map_Card
0000EBD0 0000                       		dc.w M_Card_MZ-Map_Card
0000EBD2 0000                       		dc.w M_Card_SLZ-Map_Card
0000EBD4 0000                       		dc.w M_Card_SYZ-Map_Card
0000EBD6 0000                       		dc.w M_Card_SBZ-Map_Card
0000EBD8 0000                       		dc.w M_Card_Zone-Map_Card
0000EBDA 0000                       		dc.w M_Card_Act1-Map_Card
0000EBDC 0000                       		dc.w M_Card_Act2-Map_Card
0000EBDE 0000                       		dc.w M_Card_Act3-Map_Card
0000EBE0 0000                       		dc.w M_Card_Oval-Map_Card
0000EBE2 0000                       		dc.w M_Card_FZ-Map_Card
0000EBE4 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EBE5 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EBEA F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EBEF F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EBF4 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EBF9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EBFE F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EC03 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EC08 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EC0D F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EC12                            		even
0000EC12 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000EC13 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000EC18 F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000EC1D F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000EC22 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000EC27 F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000EC2C F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000EC31 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000EC36 F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000EC3B F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000EC40 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000EC45 F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000EC4A F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000EC4F F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000EC54 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EC55 F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000EC5A F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000EC5F F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000EC64 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000EC69 F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000EC6E F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000EC73 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000EC78 F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000EC7D F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000EC82 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000EC87 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000EC8C 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EC8D F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EC92 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EC97 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EC9C F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000ECA1 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000ECA6 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000ECAB F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000ECB0 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000ECB5 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000ECBA                            		even
0000ECBA 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000ECBB F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000ECC0 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000ECC5 F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000ECCA F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000ECCF F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000ECD4 F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000ECD9 F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000ECDE F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000ECE3 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000ECE8 F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000ECED 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000ECEE F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000ECF3 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000ECF8 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000ECFD F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000ED02 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000ED07 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000ED0C F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000ED11 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000ED16 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000ED1B F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000ED20                            		even
0000ED20 04                         M_Card_Zone:	dc.b 4			; ZONE
0000ED21 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000ED26 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000ED2B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000ED30 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED36 00                         		even
0000ED36 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000ED37 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED3C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000ED41 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000ED42 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED47 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000ED4C 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000ED4D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED52 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ED57 0D                         M_Card_Oval:	dc.b $D			; Oval
0000ED58 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ED5D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ED62 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ED67 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ED6C 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ED71 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000ED76 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000ED7B FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000ED80 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000ED85 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000ED8A FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000ED8F 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000ED94 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000ED9A 00                         		even
0000ED9A 05                         M_Card_FZ:	dc.b 5			; FINAL
0000ED9B F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EDA0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EDA5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EDAA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EDAF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EDB4                            		even
0000EDB4                            
0000EDB4                            Map_Over:	include	"_maps\Game Over.asm"
0000EDB4                            ; ---------------------------------------------------------------------------
0000EDB4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EDB4                            ; ---------------------------------------------------------------------------
0000EDB4                            Map_Over_internal:
0000EDB4 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EDB6 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EDB8 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EDBA 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EDBC 02                         byte_CBAC:	dc.b 2			; GAME
0000EDBD F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EDC2 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EDC7 02                         byte_CBB7:	dc.b 2			; OVER
0000EDC8 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EDCD F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EDD2 02                         byte_CBC2:	dc.b 2			; TIME
0000EDD3 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EDD8 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EDDD 02                         byte_CBCD:	dc.b 2			; OVER
0000EDDE F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EDE3 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EDE8                            		even
0000EDE8                            		even
0000EDE8                            
0000EDE8                            ; ---------------------------------------------------------------------------
0000EDE8                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EDE8                            ; ---------------------------------------------------------------------------
0000EDE8 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EDEA 0000                       		dc.w M_Got_Passed-Map_Got
0000EDEC 0000                       		dc.w M_Got_Score-Map_Got
0000EDEE 0000                       		dc.w M_Got_TBonus-Map_Got
0000EDF0 0000                       		dc.w M_Got_RBonus-Map_Got
0000EDF2 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EDF4 FF4E                       		dc.w M_Card_Act1-Map_Got
0000EDF6 FF59                       		dc.w M_Card_Act2-Map_Got
0000EDF8 FF64                       		dc.w M_Card_Act3-Map_Got
0000EDFA 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EDFB F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EE00 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EE05 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EE0A F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EE0F F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EE14 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EE19 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EE1E F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EE23 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EE24 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EE29 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EE2E F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EE33 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EE38 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE3D F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EE42 06                         M_Got_Score:	dc.b 6			; SCORE
0000EE43 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE48 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE4D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE52 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE57 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE5C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE61 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EE62 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EE67 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE6C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE71 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE76 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE7B F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EE80 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE85 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EE86 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE8B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE90 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE95 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE9A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE9F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EEA4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EEAA 00                         		even
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA                            ; Sprite mappings - special stage results screen
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EEAC 0000                       		dc.w M_SSR_Score-Map_SSR
0000EEAE 0000                       		dc.w byte_CD0D-Map_SSR
0000EEB0 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EEB2 0000                       		dc.w byte_CD31-Map_SSR
0000EEB4 0000                       		dc.w byte_CD46-Map_SSR
0000EEB6 0000                       		dc.w byte_CD5B-Map_SSR
0000EEB8 0000                       		dc.w byte_CD6B-Map_SSR
0000EEBA 0000                       		dc.w byte_CDA8-Map_SSR
0000EEBC 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EEBD F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EEC2 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EEC7 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EECC F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EED1 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EED6 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EEDB F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EEE0 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EEE5 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EEEA F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EEEF F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EEF4 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EEF9 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EEFE 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EEFF F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EF04 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EF09 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EF0E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EF13 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EF18 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EF1D 07                         byte_CD0D:	dc.b 7
0000EF1E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EF23 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EF28 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EF2D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EF32 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EF37 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EF3C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EF41 04                         byte_CD31:	dc.b 4
0000EF42 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF47 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF4C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF51 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EF56 04                         byte_CD46:	dc.b 4
0000EF57 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF5C F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF61 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF66 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EF6B 03                         byte_CD5B:	dc.b 3
0000EF6C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF71 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF76 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF7B 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EF7C F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EF81 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EF86 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EF8B F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EF90 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EF95 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EF9A F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EF9F F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EFA4 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EFA9 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EFAE F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EFB3 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EFB8 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EFB9 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EFBE F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EFC3 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EFC8 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EFCD F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EFD2 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EFD7 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EFDC F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EFE1 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EFE6 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EFEB F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EFF0 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EFF5 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EFFA F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EFFF F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F004                            		even
0000F004                            
0000F004                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F004                            ; ---------------------------------------------------------------------------
0000F004                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F004                            ; ---------------------------------------------------------------------------
0000F004                            Map_SSRC_internal:
0000F004 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F006 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F008 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F00A 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F00C 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F00E 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F010 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F012 01                         byte_CE02:	dc.b 1
0000F013 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F018 01                         byte_CE08:	dc.b 1
0000F019 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F01E 01                         byte_CE0E:	dc.b 1
0000F01F F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F024 01                         byte_CE14:	dc.b 1
0000F025 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F02A 01                         byte_CE1A:	dc.b 1
0000F02B F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F030 01                         byte_CE20:	dc.b 1
0000F031 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F036 00                         byte_CE26:	dc.b 0			; Blank frame
0000F038 00                         		even
0000F038 00                         		even
0000F038                            
0000F038                            		include	"_incObj\36 Spikes.asm"
0000F038                            ; ---------------------------------------------------------------------------
0000F038                            ; Object 36 - spikes
0000F038                            ; ---------------------------------------------------------------------------
0000F038                            
0000F038                            Spikes:
0000F038 7000                       		moveq	#0,d0
0000F03A 1028 0024                  		move.b	obRoutine(a0),d0
0000F03E 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F042 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F046                            ; ===========================================================================
0000F046 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F048 0000                       		dc.w Spik_Solid-Spik_Index
0000F04A                            
0000F04A =00000030                  spik_origX:	equ $30		; start X position
0000F04A =00000032                  spik_origY:	equ $32		; start Y position
0000F04A                            
0000F04A 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F04C 0110                       		dc.b 1,	$10
0000F04E 0204                       		dc.b 2,	4
0000F050 031C                       		dc.b 3,	$1C
0000F052 0440                       		dc.b 4,	$40
0000F054 0510                       		dc.b 5,	$10
0000F056                            ; ===========================================================================
0000F056                            
0000F056                            Spik_Main:	; Routine 0
0000F056 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F05A 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F062 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F068 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F06E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F074 1028 0028                  		move.b	obSubtype(a0),d0
0000F078 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F07E 0240 00F0                  		andi.w	#$F0,d0
0000F082 43F9 0000 F04A             		lea	(Spik_Var).l,a1
0000F088 E648                       		lsr.w	#3,d0
0000F08A D2C0                       		adda.w	d0,a1
0000F08C 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F090 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F094 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F09A 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F0A0                            
0000F0A0                            Spik_Solid:	; Routine 2
0000F0A0 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F0A4 343C 0004                  		move.w	#4,d2
0000F0A8 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F0AE 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F0B0 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F0B6 6600                       		bne.s	Spik_Upright	; if not, branch
0000F0B8 343C 0014                  		move.w	#$14,d2
0000F0BC                            
0000F0BC                            ; Spikes types $1x and $5x face	sideways
0000F0BC                            
0000F0BC                            Spik_SideWays:
0000F0BC 323C 001B                  		move.w	#$1B,d1
0000F0C0 3602                       		move.w	d2,d3
0000F0C2 5243                       		addq.w	#1,d3
0000F0C4 3828 0008                  		move.w	obX(a0),d4
0000F0C8 6100 0000                  		bsr.w	SolidObject
0000F0CC 0828 0003 0022             		btst	#3,obStatus(a0)
0000F0D2 6600                       		bne.s	Spik_Display
0000F0D4 0C44 0001                  		cmpi.w	#1,d4
0000F0D8 6700                       		beq.s	Spik_Hurt
0000F0DA 6000                       		bra.s	Spik_Display
0000F0DC                            ; ===========================================================================
0000F0DC                            
0000F0DC                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F0DC                            
0000F0DC                            Spik_Upright:
0000F0DC 7200                       		moveq	#0,d1
0000F0DE 1228 0014                  		move.b	obActWid(a0),d1
0000F0E2 0641 000B                  		addi.w	#$B,d1
0000F0E6 343C 0010                  		move.w	#$10,d2
0000F0EA 363C 0011                  		move.w	#$11,d3
0000F0EE 3828 0008                  		move.w	obX(a0),d4
0000F0F2 6100 0000                  		bsr.w	SolidObject
0000F0F6 0828 0003 0022             		btst	#3,obStatus(a0)
0000F0FC 6600                       		bne.s	Spik_Hurt
0000F0FE 4A44                       		tst.w	d4
0000F100 6A00                       		bpl.s	Spik_Display
0000F102                            
0000F102                            Spik_Hurt:
0000F102 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F106 6600                       		bne.s	Spik_Display	; if yes, branch
0000F108 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F10C 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F10E 2F08                       		move.l	a0,-(sp)
0000F110 2448                       		movea.l	a0,a2
0000F112 41F8 D000                  		lea	(v_player).w,a0
0000F116 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F11C 6400                       		bcc.s	loc_CF20
0000F11E                            		; This fixes the infamous "spike bug"
0000F11E 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F122 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F124 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F12A                            loc_D5A2:
0000F12A 9680                       		sub.l	d0,d3
0000F12C 2143 000C                  		move.l	d3,obY(a0)
0000F130 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F136                            
0000F136                            loc_CF20:
0000F136 205F                       		movea.l	(sp)+,a0
0000F138                            
0000F138                            Spik_Display:
0000F138 6100 0000                  		bsr.w	DisplaySprite
0000F15A 4E75                       		rts	
0000F15C                            ; ===========================================================================
0000F15C                            
0000F15C                            Spik_Type0x:
0000F15C 7000                       		moveq	#0,d0
0000F15E 1028 0028                  		move.b	obSubtype(a0),d0
0000F162 D040                       		add.w	d0,d0
0000F164 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F168 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F16C                            ; ===========================================================================
0000F16C 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F16E 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F170 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F172                            ; ===========================================================================
0000F172                            
0000F172                            Spik_Type00:
0000F172 4E75                       		rts			; don't move the object
0000F174                            ; ===========================================================================
0000F174                            
0000F174                            Spik_Type01:
0000F174 6100 0000                  		bsr.w	Spik_Wait
0000F178 7000                       		moveq	#0,d0
0000F17A 1028 0034                  		move.b	$34(a0),d0
0000F17E D068 0032                  		add.w	spik_origY(a0),d0
0000F182 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F186 4E75                       		rts	
0000F188                            ; ===========================================================================
0000F188                            
0000F188                            Spik_Type02:
0000F188 6100 0000                  		bsr.w	Spik_Wait
0000F18C 7000                       		moveq	#0,d0
0000F18E 1028 0034                  		move.b	$34(a0),d0
0000F192 D068 0030                  		add.w	spik_origX(a0),d0
0000F196 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F19A 4E75                       		rts	
0000F19C                            ; ===========================================================================
0000F19C                            
0000F19C                            Spik_Wait:
0000F19C 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F1A0 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F1A2 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F1A6 6600                       		bne.s	locret_CFE6
0000F1A8 4A28 0001                  		tst.b	obRender(a0)
0000F1AC 6A00                       		bpl.s	locret_CFE6
0000F1B8 6000                       		bra.s	locret_CFE6
0000F1BA                            ; ===========================================================================
0000F1BA                            
0000F1BA                            loc_CFA4:
0000F1BA 4A68 0036                  		tst.w	$36(a0)
0000F1BE 6700                       		beq.s	loc_CFC6
0000F1C0 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F1C6 6400                       		bcc.s	locret_CFE6
0000F1C8 317C 0000 0034             		move.w	#0,$34(a0)
0000F1CE 317C 0000 0036             		move.w	#0,$36(a0)
0000F1D4 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F1DA 6000                       		bra.s	locret_CFE6
0000F1DC                            ; ===========================================================================
0000F1DC                            
0000F1DC                            loc_CFC6:
0000F1DC 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F1E2 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F1E8 6500                       		bcs.s	locret_CFE6
0000F1EA 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F1F0 317C 0001 0036             		move.w	#1,$36(a0)
0000F1F6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F1FC                            
0000F1FC                            locret_CFE6:
0000F1FC 4E75                       		rts	
0000F1FC 4E75                       		rts	
0000F1FE                            Map_Spike:	include	"_maps\Spikes.asm"
0000F1FE                            ; --------------------------------------------------------------------------------
0000F1FE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F1FE                            ; --------------------------------------------------------------------------------
0000F1FE                            
0000F1FE                            SME_XgeaQ:	
0000F1FE 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F202 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F206 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F20A 03                         SME_XgeaQ_C:	dc.b 3	
0000F20B F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F210 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F215 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F21A 03                         SME_XgeaQ_1C:	dc.b 3	
0000F21B EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F220 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F225 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F22A 01                         SME_XgeaQ_2C:	dc.b 1	
0000F22B F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F230 03                         SME_XgeaQ_32:	dc.b 3	
0000F231 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F236 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F23B F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F240 06                         SME_XgeaQ_42:	dc.b 6	
0000F241 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F246 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F24B F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F250 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F255 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F25A F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F25F 01                         SME_XgeaQ_61:	dc.b 1	
0000F260 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F266 00                         		even
0000F266 00                         		even
0000F266                            		include	"_incObj\3B Purple Rock.asm"
0000F266                            ; ---------------------------------------------------------------------------
0000F266                            ; Object 3B - purple rock (GHZ)
0000F266                            ; ---------------------------------------------------------------------------
0000F266                            
0000F266                            PurpleRock:
0000F266 7000                       		moveq	#0,d0
0000F268 1028 0024                  		move.b	obRoutine(a0),d0
0000F26C 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F270 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F274                            ; ===========================================================================
0000F274 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F276 0000                       		dc.w Rock_Solid-Rock_Index
0000F278                            ; ===========================================================================
0000F278                            
0000F278                            Rock_Main:	; Routine 0
0000F278 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F27C 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F284 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F28A 117C 0004 0001             		move.b	#4,obRender(a0)
0000F290 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F296 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F29C                            
0000F29C                            Rock_Solid:	; Routine 2
0000F29C 323C 001B                  		move.w	#$1B,d1
0000F2A0 343C 0010                  		move.w	#$10,d2
0000F2A4 363C 0010                  		move.w	#$10,d3
0000F2A8 3828 0008                  		move.w	obX(a0),d4
0000F2AC 6100 0000                  		bsr.w	SolidObject
0000F2B0 6100 0000                  		bsr.w	DisplaySprite
0000F2D2 4E75                       		rts	
0000F2D2 4E75                       		rts	
0000F2D4                            		include	"_incObj\49 Waterfall Sound.asm"
0000F2D4                            ; ---------------------------------------------------------------------------
0000F2D4                            ; Object 49 - waterfall	sound effect (GHZ)
0000F2D4                            ; ---------------------------------------------------------------------------
0000F2D4                            
0000F2D4                            WaterSound:
0000F2D4 7000                       		moveq	#0,d0
0000F2D6 1028 0024                  		move.b	obRoutine(a0),d0
0000F2DA 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F2DE 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F2E2                            ; ===========================================================================
0000F2E2 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F2E4 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F2E6                            ; ===========================================================================
0000F2E6                            
0000F2E6                            WSnd_Main:	; Routine 0
0000F2E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F2EA 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2F0                            
0000F2F0                            WSnd_PlaySnd:	; Routine 2
0000F2F0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F2F4 0200 003F                  		andi.b	#$3F,d0
0000F2F8 6600                       		bne.s	WSnd_ChkDel
0000F304                            
0000F304                            	WSnd_ChkDel:
0000F322 4E75                       		rts	
0000F322 4E75                       		rts	
0000F324                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F324                            ; ---------------------------------------------------------------------------
0000F324                            ; Sprite mappings - purple rock	(GHZ)
0000F324                            ; ---------------------------------------------------------------------------
0000F324                            Map_PRock_internal:
0000F324 0000                       		dc.w byte_D110-Map_PRock_internal
0000F326 02                         byte_D110:	dc.b 2
0000F327 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F32C F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F332 00                         		even
0000F332 00                         		even
0000F332                            		include	"_incObj\3C Smashable Wall.asm"
0000F332                            ; ---------------------------------------------------------------------------
0000F332                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F332                            ; ---------------------------------------------------------------------------
0000F332                            
0000F332                            SmashWall:
0000F332 7000                       		moveq	#0,d0
0000F334 1028 0024                  		move.b	obRoutine(a0),d0
0000F338 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F33C 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F340 6000 0000                  		bra.w	RememberState
0000F344                            ; ===========================================================================
0000F344 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F346 0000                       		dc.w Smash_Solid-Smash_Index
0000F348 0000                       		dc.w Smash_FragMove-Smash_Index
0000F34A                            
0000F34A =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F34A                            ; ===========================================================================
0000F34A                            
0000F34A                            Smash_Main:	; Routine 0
0000F34A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F34E 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F356 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F35C 117C 0004 0001             		move.b	#4,obRender(a0)
0000F362 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F368 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F36E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F374                            
0000F374                            Smash_Solid:	; Routine 2
0000F374 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F37A 323C 001B                  		move.w	#$1B,d1
0000F37E 343C 0020                  		move.w	#$20,d2
0000F382 363C 0020                  		move.w	#$20,d3
0000F386 3828 0008                  		move.w	obX(a0),d4
0000F38A 6100 0000                  		bsr.w	SolidObject	
0000F38E 4A04                       		tst.b	d4
0000F390 6E00 0000                  		bgt.w	@chkroll	
0000F394 6700 0000                  		beq.w	@donothing								
0000F398 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F39E 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F3A2                            ; ===========================================================================
0000F3A2                            
0000F3A2                            @chkroll:
0000F3A2 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F3A8 6600                       		bne.s	@donothing	; if not, branch	
0000F3AA 3028 0030                  		move.w	smash_speed(a0),d0
0000F3AE 6A00                       		bpl.s	@chkspeed
0000F3B0 4440                       		neg.w	d0
0000F3B2                            
0000F3B2                            	@chkspeed:
0000F3B2 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F3B6 6500                       		bcs.s	@donothing	; if not, branch	
0000F3B8                            		
0000F3B8                            	@continue:	
0000F3B8 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F3BE 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F3C4 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F3CA 3028 0008                  		move.w	obX(a0),d0
0000F3CE B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F3D2 6500                       		bcs.s	@smash		; if yes, branch
0000F3D4 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F3DA                            
0000F3DA                            	@smash:
0000F3DA 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F3E0 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F3E6 7206                       		moveq	#6,d1		; load 7 fragments
0000F3E8 343C 0070                  		move.w	#$70,d2
0000F3EC 6100                       		bsr.s	SmashObject
0000F3EE                            
0000F3EE                            @donothing:
0000F3EE 4E75                       		rts	
0000F3F0                            
0000F3F0                            Smash_FragMove:	; Routine 4
0000F3F0 588F                       		addq.l	#4,sp
0000F3F2 6100 0000                  		bsr.w	SpeedToPos
0000F3F6 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F3FC 4A28 0001                  		tst.b	obRender(a0)
0000F400 6A00 0000                  		bpl.w	DeleteObject
0000F404 6000 0000                  		bra.w	DisplaySprite
0000F408                            
0000F408                            
0000F408                            
0000F408                            		include	"_incObj\sub SmashObject.asm"
0000F408                            ; ---------------------------------------------------------------------------
0000F408                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F408                            ; ---------------------------------------------------------------------------
0000F408                            
0000F408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F408                            
0000F408                            
0000F408                            SmashObject:
0000F408 7000                       		moveq	#0,d0
0000F40A 1028 001A                  		move.b	obFrame(a0),d0
0000F40E D040                       		add.w	d0,d0
0000F410 2668 0004                  		movea.l	obMap(a0),a3
0000F414 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F418 524B                       		addq.w	#1,a3
0000F41A 08E8 0005 0001             		bset	#5,obRender(a0)
0000F420 1810                       		move.b	0(a0),d4
0000F422 1A28 0001                  		move.b	obRender(a0),d5
0000F426 2248                       		movea.l	a0,a1
0000F428 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F42E 1284                       		move.b	d4,0(a1)
0000F430 234B 0004                  		move.l	a3,obMap(a1)
0000F434 1345 0001                  		move.b	d5,obRender(a1)
0000F438 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F43E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F444 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F44A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F450 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F456 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F45A 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F45E 5341                       		subq.w #1,d1
0000F460 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F464 303C 005F                  		move.w #$5F,d0
0000F468                            ; ===========================================================================
0000F468                            
0000F468                            Smash_Loop:
0000F468 4A11                       		tst.b	(a1)
0000F46A 6700                       		beq.s	@cont
0000F46C 43E9 0040                  		lea		$40(a1),a1
0000F470 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F474 6600                       		bne.s	Smash_PlaySnd
0000F476                            
0000F476                            	@cont:
0000F476 5A4B                       		addq.w #5,a3
0000F478                            
0000F478                            Smash_LoadFrag:				; XREF: SmashObject
0000F478 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F47E 1284                       		move.b	d4,0(a1)
0000F480 234B 0004                  		move.l	a3,obMap(a1)
0000F484 1345 0001                  		move.b	d5,obRender(a1)
0000F488 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F48E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F494 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F49A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F4A0 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F4A6 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F4AA 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F4AE 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F4B2                            
0000F4B2                            Smash_PlaySnd:
0000F4B2 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F4B6 4EF9 0000 12FE             		jmp	(PlaySound_Special).l ; play smashing sound
0000F4BC                            
0000F4BC                            ; End of function SmashObject
0000F4BC                            ; End of function SmashObject
0000F4BC                            
0000F4BC                            ; ===========================================================================
0000F4BC                            ; Smashed block	fragment speeds
0000F4BC                            ;
0000F4BC 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F4C0 0600 FF00                  		dc.w $600, -$100
0000F4C4 0600 0100                  		dc.w $600, $100
0000F4C8 0400 0500                  		dc.w $400, $500
0000F4CC 0600 FA00                  		dc.w $600, -$600
0000F4D0 0800 FE00                  		dc.w $800, -$200
0000F4D4 0800 0200                  		dc.w $800, $200
0000F4D8 0600 0600                  		dc.w $600, $600
0000F4DC                            
0000F4DC FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F4E0 F800 FE00                  		dc.w -$800, -$200
0000F4E4 F800 0200                  		dc.w -$800, $200
0000F4E8 FA00 0600                  		dc.w -$600, $600
0000F4EC FC00 FB00                  		dc.w -$400, -$500
0000F4F0 FA00 FF00                  		dc.w -$600, -$100
0000F4F4 FA00 0100                  		dc.w -$600, $100
0000F4F8 FC00 0500                  		dc.w -$400, $500
0000F4FC                            
0000F4FC                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F4FC                            ; ---------------------------------------------------------------------------
0000F4FC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F4FC                            ; ---------------------------------------------------------------------------
0000F4FC                            Map_Smash_internal:
0000F4FC 0000                       		dc.w @left-Map_Smash_internal
0000F4FE 0000                       		dc.w @middle-Map_Smash_internal
0000F500 0000                       		dc.w @right-Map_Smash_internal
0000F502 08                         @left:		dc.b 8
0000F503 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F508 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F50D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F512 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F517 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F51C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F521 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F526 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F52B 08                         @middle:	dc.b 8
0000F52C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F531 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F536 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F53B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F540 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F545 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F54A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F54F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F554 08                         @right:		dc.b 8
0000F555 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F55A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F55F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F564 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F569 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F56E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F573 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F578 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F57E 00                         		even
0000F57E 00                         		even
0000F57E                            
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E                            ; Object code execution subroutine
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E                            
0000F57E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F57E                            
0000F57E                            
0000F57E                            
0000F57E                            ExecuteObjects: ; XREF: GM_Title; et al
0000F57E 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F582 7E7F                       		moveq #$7F,d7
0000F584 7000                       		moveq #0,d0
0000F586 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F58C 6400                       		bcc.s loc_D362
0000F58E                            
0000F58E                            loc_D348:
0000F58E 1010                       		move.b (a0),d0 ; load object number from RAM
0000F590 6700                       		beq.s loc_D358
0000F592 D040                       		add.w d0,d0
0000F594 D040                       		add.w d0,d0
0000F596 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F59A 4E91                       		jsr (a1) ; run the object's code
0000F59C 7000                       		moveq #0,d0
0000F59E                            
0000F59E                            loc_D358:
0000F59E 41E8 0040                  		lea $40(a0),a0 ; next object
0000F5A2 51CF FFEA                  		dbf d7,loc_D348
0000F5A6 4E75                       		rts
0000F5A8                            ; ===========================================================================
0000F5A8                            
0000F5A8                            loc_D362:
0000F5A8 7E1F                       		moveq #$1F,d7
0000F5AA 61E2                       		bsr.s loc_D348
0000F5AC 7E5F                       		moveq #$5F,d7
0000F5AE                            
0000F5AE                            loc_D368:
0000F5AE 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F5B0 1010                       		move.b (a0),d0 ; get the object's ID
0000F5B2 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F5B4 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F5B8 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F5BA 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F5BE 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F5C4 6700                       		beq.s loc_D378 ; if not, branch
0000F5C6 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F5CA                            
0000F5CA                            loc_D378:
0000F5CA 6100 0000                  		bsr.w DisplaySprite2
0000F5CE                            		
0000F5CE                            loc_D37C:
0000F5CE 41E8 0040                  		lea $40(a0),a0
0000F5D2 51CF FFDA                  		dbf d7,loc_D368
0000F5D6 4E75                       		rts
0000F5D8                            ; End of function ExecuteObjects
0000F5D8                            
0000F5D8                            ; ===========================================================================
0000F5D8                            ; ---------------------------------------------------------------------------
0000F5D8                            ; Object pointers
0000F5D8                            ; ---------------------------------------------------------------------------
0000F5D8                            Obj_Index:
0000F5D8                            		include	"_inc\Object Pointers.asm"
0000F5D8                            ; ---------------------------------------------------------------------------
0000F5D8                            ; Object pointers
0000F5D8                            ; ---------------------------------------------------------------------------
0000F5D8 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F5DC 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F5E0 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F5E4 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F5E8 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F5EC 0000 B2C8                  ptr_Mozzietron:		dc.l Mozzietron
0000F5F0 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F5F4 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F5F8 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F5FC 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F600 0000 0000                  ptr_Pole:		dc.l Pole
0000F604 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F608 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F60C 0000 C6EC                  ptr_TitleSonic:		dc.l TitleSonic
0000F610 0000 C76C                  ptr_PSBTM:		dc.l PSBTM
0000F614 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F618 0000 8B8C                  ptr_Bridge:		dc.l Bridge
0000F61C 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F620 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F624 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F628 0000 91B2                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F62C 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F630 0000 94FE                  ptr_Helix:		dc.l Helix
0000F634 0000 968A                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F638 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F63C 0000 9A66                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F640 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F644 0000 A06E                  ptr_Scenery:		dc.l Scenery
0000F648 0000 A110                  ptr_WaterSwitcher:	dc.l WaterSwitcher
0000F64C 0000 A626                  ptr_BallHog:		dc.l BallHog
0000F650 0000 AFDE                  ptr_Crabmeat:		dc.l Crabmeat
0000F654 0000 A6F4                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F658 0000 0000                  ptr_HUD:		dc.l HUD
0000F65C 0000 B3FA                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F660 0000 B54C                  ptr_Missile:		dc.l Missile
0000F664 0000 A7C6                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F668 0000 B7A6                  ptr_Rings:		dc.l Rings
0000F66C 0000 BFF0                  ptr_Monitor:		dc.l Monitor
0000F670 0000 A836                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F674 0000 A9F4                  ptr_Animals:		dc.l Animals		; $28
0000F678 0000 AEE2                  ptr_Points:		dc.l Points
0000F67C 0000 A414                  ptr_AutoDoor:		dc.l AutoDoor
0000F680 0000 CD16                  ptr_Chopper:		dc.l Chopper
0000F684 0000 CDD0                  ptr_Jaws:		dc.l Jaws
0000F688 0000 CE9A                  ptr_Burrobot:		dc.l Burrobot
0000F68C 0000 C1EE                  ptr_PowerUp:		dc.l PowerUp
0000F690 0000 D0AE                  ptr_LargeGrass:		dc.l LargeGrass
0000F694 0000 D590                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F698 0000 D86C                  ptr_ChainStomp:		dc.l ChainStomp
0000F69C 0000 DF1A                  ptr_Button:		dc.l Button
0000F6A0 0000 E0BE                  ptr_PushBlock:		dc.l PushBlock
0000F6A4 0000 E4F0                  ptr_TitleCard:		dc.l TitleCard
0000F6A8 0000 D3D0                  ptr_GrassFire:		dc.l GrassFire
0000F6AC 0000 F038                  ptr_Spikes:		dc.l Spikes
0000F6B0 0000 BA02                  ptr_RingLoss:		dc.l RingLoss
0000F6B4 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F6B8 0000 E6A0                  ptr_GameOverCard:	dc.l GameOverCard
0000F6BC 0000 E75E                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F6C0 0000 F266                  ptr_PurpleRock:		dc.l PurpleRock
0000F6C4 0000 F332                  ptr_SmashWall:		dc.l SmashWall
0000F6C8 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F6CC 0000 0000                  ptr_Prison:		dc.l Prison
0000F6D0 0000 A8C8                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F6D4 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F6D8 0000 0000                  ptr_Springs:		dc.l Springs
0000F6DC 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F6E0 0000 0000                  ptr_Roller:		dc.l Roller
0000F6E4 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F6E8 0000 DB88                  ptr_SideStomp:		dc.l SideStomp
0000F6EC 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F6F0 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F6F4 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F6F8 0000 F2D4                  ptr_WaterSound:		dc.l WaterSound
0000F6FC 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F700 0000 BCC4                  ptr_GiantRing:		dc.l GiantRing
0000F704 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F708 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F70C 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F710 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F714 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F718 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F71C 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F720 0000 9B76                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F724 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F728 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F72C 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F730 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F734 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F738 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F73C 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F740 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F744 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F748 0000 0000                  ptr_Fan:		dc.l Fan
0000F74C 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F750 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F754 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F758 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F75C 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F760 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F764 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F768 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F76C 0000 0000                  ptr_Junction:		dc.l Junction
0000F770 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F774 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F778 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F77C 0000 0000                  ptr_Saws:		dc.l Saws
0000F780 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F784 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F788 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F78C 0000 0000                  ptr_Electro:		dc.l Electro
0000F790 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F794 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F798 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F79C 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F7A0 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F7A4 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F7A8 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F7AC 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F7B0 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F7B4 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F7B8 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F7BC 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F7C0 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F7C4 0000 BD9E                  ptr_RingFlash:		dc.l RingFlash
0000F7C8 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F7CC 0000 E998                  ptr_SSResult:		dc.l SSResult
0000F7D0 0000 EB3E                  ptr_SSRChaos:		dc.l SSRChaos
0000F7D4 0000 60F6                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F7D8 0000 620E                  ptr_ContSonic:		dc.l ContSonic
0000F7DC 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F7E0 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F7E4 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F7E8 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F7EC 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F7F0 0000 6694                  ptr_EndSonic:		dc.l EndSonic
0000F7F4 0000 67EE                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F7F8 0000 68C8                  ptr_EndSTH:		dc.l EndSTH
0000F7FC 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F800 0000 6B42                  ptr_EndEggman:		dc.l EndEggman
0000F804 0000 6C22                  ptr_TryChaos:		dc.l TryChaos
0000F808 0000 0000                  ptr_SuperStars:		dc.l SuperStars
0000F80C                            
0000F80C                            NullObject:
0000F80C                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F80C                            
0000F80C =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F80C =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F80C =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F80C =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F80C =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F80C =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F80C =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F80C =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F80C =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F80C =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F80C =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F80C =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F80C =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F80C =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F80C =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F80C =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F80C =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F80C =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F80C =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F80C =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F80C =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F80C =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F80C =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F80C =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F80C =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F80C =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F80C =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F80C =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F80C =0000001D                  id_WaterSwitcher:		equ ((ptr_WaterSwitcher-Obj_Index)/4)+1
0000F80C =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F80C =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F80C =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F80C =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F80C =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F80C =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F80C =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F80C =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F80C =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F80C =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F80C =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F80C =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F80C =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F80C =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F80C =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F80C =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F80C =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F80C =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F80C =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F80C =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F80C =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F80C =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F80C =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F80C =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F80C =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F80C =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F80C =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F80C =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F80C =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F80C =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F80C =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F80C =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F80C =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F80C =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F80C =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F80C =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F80C =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F80C =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F80C =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F80C =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F80C =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F80C =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F80C =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F80C =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F80C =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F80C =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F80C =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F80C =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F80C =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F80C =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F80C =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F80C =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F80C =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F80C =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F80C =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F80C =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F80C =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F80C =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F80C =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F80C =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F80C =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F80C =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F80C =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F80C =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F80C =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F80C =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F80C =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F80C =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F80C =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F80C =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F80C =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F80C =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F80C =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F80C =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F80C =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F80C =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F80C =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F80C =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F80C =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F80C =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F80C =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F80C =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F80C =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F80C =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F80C =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F80C =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F80C =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F80C =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F80C =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F80C =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F80C =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F80C =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F80C =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F80C =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F80C =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F80C =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F80C =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F80C =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F80C =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F80C =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F80C =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F80C =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F80C =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F80C =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F80C =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F80C =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F80C =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F80C =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F80C =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F80C =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F80C =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F80C =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F80C =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F80C                            
0000F80C                            		include	"_incObj\sub ObjectFall.asm"
0000F80C                            ; ---------------------------------------------------------------------------
0000F80C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F80C                            ; ---------------------------------------------------------------------------
0000F80C                            
0000F80C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F80C                            
0000F80C                            
0000F80C                            ObjectFall:
0000F80C 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F812 6700                       		beq.s	@donothing
0000F814 3028 0010                  		move.w	obVelX(a0),d0
0000F818 48C0                       		ext.l	d0
0000F81A E188                       		lsl.l	#8,d0
0000F81C D1A8 0008                  		add.l	d0,obX(a0)
0000F820 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F826 6F00                               ble.s   @skipline       ; if yes, branch
0000F828 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F82E                                @skipline:		
0000F82E 3028 0012                  		move.w	obVelY(a0),d0
0000F832 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F838 48C0                       		ext.l	d0
0000F83A E188                       		lsl.l	#8,d0
0000F83C D1A8 000C                  		add.l	d0,obY(a0)
0000F840 4E75                       		rts	
0000F842                            	
0000F842                            	@donothing:
0000F842 4E75                       		rts
0000F844                            
0000F844                            ; End of function ObjectFall
0000F844                            ; End of function ObjectFall
0000F844                            		include	"_incObj\sub SpeedToPos.asm"
0000F844                            ; ---------------------------------------------------------------------------
0000F844                            ; Subroutine translating object	speed to update	object position
0000F844                            ; ---------------------------------------------------------------------------
0000F844                            
0000F844                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F844                            
0000F844                            
0000F844                            SpeedToPos:
0000F844 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F84A E188                       		lsl.l	#8,d0
0000F84C D1A8 0008                  		add.l	d0,obX(a0)
0000F850 E18A                       		lsl.l	#8,d2
0000F852 D5A8 000C                  		add.l	d2,obY(a0)
0000F856 4E75                       		rts
0000F858                            ; End of function SpeedToPos
0000F858                            ; End of function SpeedToPos
0000F858                            		include	"_incObj\sub DisplaySprite.asm"
0000F858                            ; ---------------------------------------------------------------------------
0000F858                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F858                            ; ---------------------------------------------------------------------------
0000F858                            
0000F858                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F858                            
0000F858                            
0000F858                            DisplaySprite:
0000F858 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F85C D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F860 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F864 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F866 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F868 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F86A 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F86C                            
0000F86C                                DSpr_Full:
0000F86C 4E75                               rts    
0000F86E                            
0000F86E                            ; End of function DisplaySprite
0000F86E                            
0000F86E                            
0000F86E                            ; ---------------------------------------------------------------------------
0000F86E                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F86E                            ; ---------------------------------------------------------------------------
0000F86E                            
0000F86E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F86E                            
0000F86E                            
0000F86E                            DisplaySprite1:
0000F86E 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F872 D4E9 0018                          adda.w  obpriority(a1),a2
0000F876 0C52 007E                          cmpi.w    #$7E,(a2)
0000F87A 6400                               bcc.s    DSpr1_Full
0000F87C 5452                               addq.w    #2,(a2)
0000F87E D4D2                               adda.w    (a2),a2
0000F880 3489                               move.w    a1,(a2)
0000F882                            
0000F882                                DSpr1_Full:
0000F882 4E75                               rts    
0000F884                            
0000F884                            ; End of function DisplaySprite1
0000F884                            
0000F884                            ; ---------------------------------------------------------------------------
0000F884                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F884                            ; and d0 is already (priority/2)&$380
0000F884                            ; ---------------------------------------------------------------------------
0000F884                            
0000F884                            ; loc_16530:
0000F884                            DisplaySprite2:
0000F884 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F888 D2C0                           adda.w    d0,a1
0000F88A 0C51 007E                      cmpi.w    #$7E,(a1)
0000F88E 6400                           bhs.s    return_16542
0000F890 5451                           addq.w    #2,(a1)
0000F892 D2D1                           adda.w    (a1),a1
0000F894 3288                           move.w    a0,(a1)
0000F896                            
0000F896                            return_16542:
0000F896 4E75                           rts
0000F896 4E75                           rts
0000F898                            		include	"_incObj\sub DeleteObject.asm"
0000F898                            ; ---------------------------------------------------------------------------
0000F898                            ; Subroutine to	delete an object
0000F898                            ; ---------------------------------------------------------------------------
0000F898                            
0000F898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F898                            
0000F898                            
0000F898                            DeleteObject:
0000F898 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F89A                            
0000F89A                            DeleteChild:				; child objects are already in (a1)
0000F89A 7200                       		moveq	#0,d1
0000F89C 700F                       		moveq	#$F,d0
0000F89E                            
0000F89E                            	DelObj_Loop:
0000F89E 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F8A0 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F8A4 4E75                       		rts	
0000F8A6                            
0000F8A6                            ; End of function DeleteObject
0000F8A6                            ; End of function DeleteObject
0000F8A6                            
0000F8A6                            ; ===========================================================================
0000F8A6 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F8AA 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F8AE 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F8B2 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            
0000F8B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8B6                            BuildSprites:                ; XREF: TitleScreen; et al
0000F8B6 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F8BA 7A00                       		moveq	#0,d5
0000F8BC 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F8C0 7E07                       		moveq	#7,d7
0000F8C2                            		
0000F8C2                            loc_D66A:
0000F8C2 4A54                       		tst.w	(a4)
0000F8C4 6700 0000                  		beq.w	loc_D72E
0000F8C8 7C02                       		moveq	#2,d6
0000F8CA                            
0000F8CA                            loc_D672:
0000F8CA 3074 6000                          movea.w    (a4,d6.w),a0
0000F8CE 4A10                               tst.b    (a0)
0000F8D0 6700 0000                          beq.w    loc_D726
0000F8D4 08A8 0007 0001                     bclr    #7,1(a0)
0000F8DA 1028 0001                          move.b    1(a0),d0
0000F8DE 1800                               move.b    d0,d4
0000F8E0 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F8E4 6700                               beq.s    @skip    ; if it is, branch
0000F8E6 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F8EA 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F8EE                               @skip:
0000F8EE 0240 000C                  		andi.w	#$C,d0
0000F8F2 6700                       		beq.s	loc_D6DE
0000F8F4 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F8F8 7000                       		moveq	#0,d0
0000F8FA 1028 0014                  		move.b	width_pixels(a0),d0
0000F8FE 3628 0008                  		move.w	8(a0),d3
0000F902 9651                       		sub.w	(a1),d3
0000F904 3203                       		move.w	d3,d1
0000F906 D240                       		add.w	d0,d1
0000F908 6B00 0000                  		bmi.w	loc_D726
0000F90C 3203                       		move.w	d3,d1
0000F90E 9240                       		sub.w	d0,d1
0000F910 0C41 0140                  		cmpi.w	#$140,d1
0000F914 6C00                       		bge.s	loc_D726
0000F916 0643 0080                  		addi.w	#$80,d3
0000F91A 0804 0004                  		btst	#4,d4
0000F91E 6700                       		beq.s	loc_D6E8
0000F920 7000                       		moveq	#0,d0
0000F922 1028 0016                  		move.b	$16(a0),d0
0000F926 3428 000C                  		move.w	$C(a0),d2
0000F92A 9469 0004                  		sub.w	4(a1),d2
0000F92E 3202                       		move.w	d2,d1
0000F930 D240                       		add.w	d0,d1
0000F932 6B00                       		bmi.s	loc_D726
0000F934 3202                       		move.w	d2,d1
0000F936 9240                       		sub.w	d0,d1
0000F938 0C41 00E0                  		cmpi.w	#$E0,d1
0000F93C 6C00                       		bge.s	loc_D726
0000F93E 0642 0080                  		addi.w	#$80,d2
0000F942 6000                       		bra.s	loc_D700
0000F944                            ; ===========================================================================
0000F944                            
0000F944                            loc_D6DE:
0000F944 3428 000A                  		move.w	$A(a0),d2
0000F948 3628 0008                  		move.w	8(a0),d3
0000F94C 6000                       		bra.s	loc_D700
0000F94E                            ; ===========================================================================
0000F94E                            
0000F94E                            loc_D6E8:
0000F94E 3428 000C                  		move.w	$C(a0),d2
0000F952 9469 0004                  		sub.w	4(a1),d2
0000F956 0642 0080                  		addi.w	#$80,d2
0000F95A 0C42 0060                  		cmpi.w	#$60,d2
0000F95E 6500                       		bcs.s	loc_D726
0000F960 0C42 0180                  		cmpi.w	#$180,d2
0000F964 6400                       		bcc.s	loc_D726
0000F966                            
0000F966                            loc_D700:
0000F966 2268 0004                  		movea.l	4(a0),a1
0000F96A 7200                       		moveq	#0,d1
0000F96C 0804 0005                  		btst	#5,d4
0000F970 6600                       		bne.s	loc_D71C
0000F972 1228 001A                  		move.b	$1A(a0),d1
0000F976 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F978 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F97C 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F97E 1219                       		move.b	(a1)+,d1
0000F980 5301                       		subq.b	#1,d1
0000F982 6B00                       		bmi.s	loc_D720
0000F984                            
0000F984                            loc_D71C:
0000F984 4EB9 0000 0000             		jsr	sub_D750
0000F98A                            
0000F98A                            loc_D720:
0000F98A 08E8 0007 0001             		bset	#7,1(a0)
0000F990                            
0000F990                            loc_D726:
0000F990 5446                       		addq.w	#2,d6
0000F992 5554                       		subq.w	#2,(a4)
0000F994 6600 FF34                  		bne.w	loc_D672
0000F998                            
0000F998                            loc_D72E:
0000F998 49EC 0080                  		lea	$80(a4),a4
0000F99C 51CF FF24                  		dbf	d7,loc_D66A
0000F9A0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F9A4 0C05 0050                  		cmpi.b	#$50,d5
0000F9A8 6700                       		beq.s	loc_D748
0000F9AA 24BC 0000 0000             		move.l	#0,(a2)
0000F9B0 4E75                       		rts	
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            loc_D748:
0000F9B2 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F9B8 4E75                       		rts	
0000F9BA                            ; End of function BuildSprites
0000F9BA                            
0000F9BA                            BuildSprites_MultiDraw:
0000F9BA 2F0C                       	move.l	a4,-(sp)
0000F9BC 49F8 F700                  	lea	($FFFFF700).w,a4
0000F9C0 3668 0002                  	movea.w	art_tile(a0),a3
0000F9C4 2A68 0004                  	movea.l	mappings(a0),a5
0000F9C8 7000                       	moveq	#0,d0
0000F9CA                            
0000F9CA                            	; check if object is within X bounds
0000F9CA 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F9CE 3628 0008                  	move.w	x_pos(a0),d3
0000F9D2 9654                       	sub.w	(a4),d3
0000F9D4 3203                       	move.w	d3,d1                            
0000F9D6 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F9D8 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F9DC 3203                       	move.w	d3,d1
0000F9DE 9240                       	sub.w	d0,d1
0000F9E0 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F9E4 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F9E8 0643 0080                  	addi.w	#128,d3
0000F9EC                            
0000F9EC                            	; check if object is within Y bounds
0000F9EC 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F9F0 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F9F2 7000                       	moveq	#0,d0
0000F9F4 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F9F8 3428 000C                  	move.w	y_pos(a0),d2
0000F9FC 946C 0004                  	sub.w	4(a4),d2
0000FA00 3202                       	move.w	d2,d1
0000FA02 D240                       	add.w	d0,d1
0000FA04 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000FA08 3202                       	move.w	d2,d1
0000FA0A 9240                       	sub.w	d0,d1
0000FA0C 0C41 00E0                  	cmpi.w	#224,d1
0000FA10 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000FA14 0642 0080                  	addi.w	#128,d2
0000FA18 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000FA1A                            BuildSpritesMulti_ApproxYCheck:
0000FA1A 3428 000C                  	move.w	y_pos(a0),d2
0000FA1E 946C 0004                  	sub.w	4(a4),d2
0000FA22 0642 0080                  	addi.w	#128,d2
0000FA26 0242 07FF                  	andi.w	#$7FF,d2
0000FA2A 0C42 0060                  	cmpi.w	#-32+128,d2
0000FA2E 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000FA30 0C42 0180                  	cmpi.w	#32+128+224,d2
0000FA34 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000FA36                            BuildSpritesMulti_DrawSprite:
0000FA36 7200                       	moveq	#0,d1
0000FA38 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000FA3C 6700                       	beq.s	.noparenttodraw
0000FA3E D241                       	add.w	d1,d1
0000FA40 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000FA42 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000FA46 7200                       	moveq	#0,d1
0000FA48 1219                       	move.b	(a1)+,d1
0000FA4A 5301                       	subq.b	#1,d1                            ; get number of pieces
0000FA4C 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000FA4E 3F04                       	move.w	d4,-(sp)
0000FA50 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000FA56 381F                       	move.w	(sp)+,d4
0000FA58                            .noparenttodraw:
0000FA58 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000FA5E 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000FA62 7000                       	moveq	#0,d0
0000FA64 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000FA68 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000FA6A 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000FA6C                            
0000FA6C                            @drawchildloop:
0000FA6C 4840                       	swap	d0
0000FA6E 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000FA70 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000FA72 0643 0080                  	addi.w	#128,d3
0000FA76 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000FA78 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000FA7C 0642 0080                  	addi.w	#128,d2
0000FA80 0242 07FF                  	andi.w	#$7FF,d2
0000FA84 524E                       	addq.w	#1,a6
0000FA86 7200                       	moveq	#0,d1
0000FA88 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000FA8A D241                       	add.w	d1,d1
0000FA8C 224D                       	movea.l	a5,a1
0000FA8E D2F1 1000                  	adda.w	(a1,d1.w),a1
0000FA92 7200                       	moveq	#0,d1
0000FA94 1219                       	move.b	(a1)+,d1
0000FA96 5301                       	subq.b	#1,d1                            ; get number of pieces
0000FA98 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000FA9A 3F04                       	move.w	d4,-(sp)
0000FA9C 4EB9 0000 0000             	jsr	ChkDrawSprite
0000FAA2 381F                       	move.w	(sp)+,d4
0000FAA4                            @nochildleft:
0000FAA4 4840                       	swap	d0
0000FAA6 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000FAAA                            ; loc_16804:
0000FAAA                            BuildSprites_MultiDraw_NextObj:
0000FAAA 285F                       	movea.l	(sp)+,a4
0000FAAC 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000FAB0                            
0000FAB0                            
0000FAB0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000FAB0                            
0000FAB0                            ; sub_1680A:
0000FAB0                            ChkDrawSprite:
0000FAB0 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000FAB4 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000FAB6 4E75                       	rts	; otherwise, return
0000FAB8                            
0000FAB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAB8                            
0000FAB8                            
0000FAB8                            sub_D750:				; XREF: BuildSprites
0000FAB8 3668 0002                  		movea.w	2(a0),a3
0000FABC                            loc_1681C:
0000FABC 0804 0000                  		btst	#0,d4
0000FAC0 6600                       		bne.s	loc_D796
0000FAC2 0804 0001                  		btst	#1,d4
0000FAC6 6600 0000                  		bne.w	loc_D7E4
0000FACA                            ; End of function sub_D750
0000FACA                            
0000FACA                            
0000FACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FACA                            
0000FACA                            
0000FACA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000FACA 0C05 0050                  		cmpi.b	#$50,d5
0000FACE 6700                       		beq.s	locret_D794
0000FAD0                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000FAD0 1019                       		move.b	(a1)+,d0
0000FAD2 4880                       		ext.w	d0
0000FAD4 D042                       		add.w	d2,d0
0000FAD6 34C0                       		move.w	d0,(a2)+
0000FAD8 14D9                       		move.b	(a1)+,(a2)+
0000FADA 5205                       		addq.b	#1,d5
0000FADC 14C5                       		move.b	d5,(a2)+
0000FADE 1019                       		move.b	(a1)+,d0
0000FAE0 E148                       		lsl.w	#8,d0
0000FAE2 1019                       		move.b	(a1)+,d0
0000FAE4 D04B                       		add.w	a3,d0
0000FAE6 34C0                       		move.w	d0,(a2)+
0000FAE8 1019                       		move.b	(a1)+,d0
0000FAEA 4880                       		ext.w	d0
0000FAEC D043                       		add.w	d3,d0
0000FAEE 0240 01FF                  		andi.w	#$1FF,d0
0000FAF2 6600                       		bne.s	loc_D78E
0000FAF4 5240                       		addq.w	#1,d0
0000FAF6                            
0000FAF6                            loc_D78E:
0000FAF6 34C0                       		move.w	d0,(a2)+
0000FAF8 51C9 FFD0                  		dbf	d1,sub_D762
0000FAFC                            
0000FAFC                            locret_D794:
0000FAFC 4E75                       		rts
0000FAFE                            ; End of function sub_D762
0000FAFE                            
0000FAFE                            ; ===========================================================================
0000FAFE                            
0000FAFE                            loc_D796:
0000FAFE 0804 0001                  		btst	#1,d4
0000FB02 6600 0000                  		bne.w	loc_D82A
0000FB06                            
0000FB06                            loc_D79E:
0000FB06 0C05 0050                  		cmpi.b	#$50,d5
0000FB0A 6700                       		beq.s	locret_D7E2
0000FB0C 1019                       		move.b	(a1)+,d0
0000FB0E 4880                       		ext.w	d0
0000FB10 D042                       		add.w	d2,d0
0000FB12 34C0                       		move.w	d0,(a2)+
0000FB14 1819                       		move.b	(a1)+,d4
0000FB16 14C4                       		move.b	d4,(a2)+
0000FB18 5205                       		addq.b	#1,d5
0000FB1A 14C5                       		move.b	d5,(a2)+
0000FB1C 1019                       		move.b	(a1)+,d0
0000FB1E E148                       		lsl.w	#8,d0
0000FB20 1019                       		move.b	(a1)+,d0
0000FB22 D04B                       		add.w	a3,d0
0000FB24 0A40 0800                  		eori.w	#$800,d0
0000FB28 34C0                       		move.w	d0,(a2)+
0000FB2A 1019                       		move.b	(a1)+,d0
0000FB2C 4880                       		ext.w	d0
0000FB2E 4440                       		neg.w	d0
0000FB30 D804                       		add.b	d4,d4
0000FB32 0244 0018                  		andi.w	#$18,d4
0000FB36 5044                       		addq.w	#8,d4
0000FB38 9044                       		sub.w	d4,d0
0000FB3A D043                       		add.w	d3,d0
0000FB3C 0240 01FF                  		andi.w	#$1FF,d0
0000FB40 6600                       		bne.s	loc_D7DC
0000FB42 5240                       		addq.w	#1,d0
0000FB44                            
0000FB44                            loc_D7DC:
0000FB44 34C0                       		move.w	d0,(a2)+
0000FB46 51C9 FFBE                  		dbf	d1,loc_D79E
0000FB4A                            
0000FB4A                            locret_D7E2:
0000FB4A 4E75                       		rts
0000FB4C                            ; ===========================================================================
0000FB4C                            
0000FB4C                            loc_D7E4:				; XREF: sub_D750
0000FB4C 0C05 0050                  		cmpi.b	#$50,d5
0000FB50 6700                       		beq.s	locret_D828
0000FB52 1019                       		move.b	(a1)+,d0
0000FB54 1811                       		move.b	(a1),d4
0000FB56 4880                       		ext.w	d0
0000FB58 4440                       		neg.w	d0
0000FB5A E70C                       		lsl.b	#3,d4
0000FB5C 0244 0018                  		andi.w	#$18,d4
0000FB60 5044                       		addq.w	#8,d4
0000FB62 9044                       		sub.w	d4,d0
0000FB64 D042                       		add.w	d2,d0
0000FB66 34C0                       		move.w	d0,(a2)+
0000FB68 14D9                       		move.b	(a1)+,(a2)+
0000FB6A 5205                       		addq.b	#1,d5
0000FB6C 14C5                       		move.b	d5,(a2)+
0000FB6E 1019                       		move.b	(a1)+,d0
0000FB70 E148                       		lsl.w	#8,d0
0000FB72 1019                       		move.b	(a1)+,d0
0000FB74 D04B                       		add.w	a3,d0
0000FB76 0A40 1000                  		eori.w	#$1000,d0
0000FB7A 34C0                       		move.w	d0,(a2)+
0000FB7C 1019                       		move.b	(a1)+,d0
0000FB7E 4880                       		ext.w	d0
0000FB80 D043                       		add.w	d3,d0
0000FB82 0240 01FF                  		andi.w	#$1FF,d0
0000FB86 6600                       		bne.s	loc_D822
0000FB88 5240                       		addq.w	#1,d0
0000FB8A                            
0000FB8A                            loc_D822:
0000FB8A 34C0                       		move.w	d0,(a2)+
0000FB8C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000FB90                            
0000FB90                            locret_D828:
0000FB90 4E75                       		rts
0000FB92                            ; ===========================================================================
0000FB92                            
0000FB92                            loc_D82A:
0000FB92 0C05 0050                  		cmpi.b	#$50,d5
0000FB96 6700                       		beq.s	locret_D87C
0000FB98 1019                       		move.b	(a1)+,d0
0000FB9A 1811                       		move.b	(a1),d4
0000FB9C 4880                       		ext.w	d0
0000FB9E 4440                       		neg.w	d0
0000FBA0 E70C                       		lsl.b	#3,d4
0000FBA2 0244 0018                  		andi.w	#$18,d4
0000FBA6 5044                       		addq.w	#8,d4
0000FBA8 9044                       		sub.w	d4,d0
0000FBAA D042                       		add.w	d2,d0
0000FBAC 34C0                       		move.w	d0,(a2)+
0000FBAE 1819                       		move.b	(a1)+,d4
0000FBB0 14C4                       		move.b	d4,(a2)+
0000FBB2 5205                       		addq.b	#1,d5
0000FBB4 14C5                       		move.b	d5,(a2)+
0000FBB6 1019                       		move.b	(a1)+,d0
0000FBB8 E148                       		lsl.w	#8,d0
0000FBBA 1019                       		move.b	(a1)+,d0
0000FBBC D04B                       		add.w	a3,d0
0000FBBE 0A40 1800                  		eori.w	#$1800,d0
0000FBC2 34C0                       		move.w	d0,(a2)+
0000FBC4 1019                       		move.b	(a1)+,d0
0000FBC6 4880                       		ext.w	d0
0000FBC8 4440                       		neg.w	d0
0000FBCA D804                       		add.b	d4,d4
0000FBCC 0244 0018                  		andi.w	#$18,d4
0000FBD0 5044                       		addq.w	#8,d4
0000FBD2 9044                       		sub.w	d4,d0
0000FBD4 D043                       		add.w	d3,d0
0000FBD6 0240 01FF                  		andi.w	#$1FF,d0
0000FBDA 6600                       		bne.s	loc_D876
0000FBDC 5240                       		addq.w	#1,d0
0000FBDE                            
0000FBDE                            loc_D876:
0000FBDE 34C0                       		move.w	d0,(a2)+
0000FBE0 51C9 FFB0                  		dbf	d1,loc_D82A
0000FBE4                            
0000FBE4                            locret_D87C:
0000FBE4 4E75                       		rts
0000FBE6                            ; End of function BuildSpr_Normal
0000FBE6                            
0000FBE6                            ; ===========================================================================
0000FBE6                            
0000FBE6                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FBE6                            ; ---------------------------------------------------------------------------
0000FBE6                            ; Subroutine to	check if an object is off screen
0000FBE6                            
0000FBE6                            ; output:
0000FBE6                            ;	d0 = flag set if object is off screen
0000FBE6                            ; ---------------------------------------------------------------------------
0000FBE6                            
0000FBE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBE6                            
0000FBE6                            
0000FBE6                            ChkObjectVisible:
0000FBE6 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FBEA 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FBEE 6B00                       		bmi.s	@offscreen
0000FBF0 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FBF4 6C00                       		bge.s	@offscreen	; if not, branch
0000FBF6                            
0000FBF6 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FBFA 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FBFE 6B00                       		bmi.s	@offscreen
0000FC00 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FC04 6C00                       		bge.s	@offscreen	; if not, branch
0000FC06                            
0000FC06 7000                       		moveq	#0,d0		; set flag to 0
0000FC08 4E75                       		rts	
0000FC0A                            
0000FC0A                            	@offscreen:
0000FC0A 7001                       		moveq	#1,d0		; set flag to 1
0000FC0C 4E75                       		rts	
0000FC0E                            ; End of function ChkObjectVisible
0000FC0E                            
0000FC0E                            ; ---------------------------------------------------------------------------
0000FC0E                            ; Subroutine to	check if an object is off screen
0000FC0E                            ; More precise than above subroutine, taking width into account
0000FC0E                            
0000FC0E                            ; output:
0000FC0E                            ;	d0 = flag set if object is off screen
0000FC0E                            ; ---------------------------------------------------------------------------
0000FC0E                            
0000FC0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC0E                            
0000FC0E                            
0000FC0E                            ChkPartiallyVisible:
0000FC0E 7200                       		moveq	#0,d1
0000FC10 1228 0014                  		move.b	obActWid(a0),d1
0000FC14 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC18 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC1C D041                       		add.w	d1,d0		; add object width
0000FC1E 6B00                       		bmi.s	@offscreen2
0000FC20 D241                       		add.w	d1,d1
0000FC22 9041                       		sub.w	d1,d0
0000FC24 0C40 0140                  		cmpi.w	#320,d0
0000FC28 6C00                       		bge.s	@offscreen2
0000FC2A                            
0000FC2A 3228 000C                  		move.w	obY(a0),d1
0000FC2E 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FC32 6B00                       		bmi.s	@offscreen2
0000FC34 0C41 00E0                  		cmpi.w	#224,d1
0000FC38 6C00                       		bge.s	@offscreen2
0000FC3A                            
0000FC3A 7000                       		moveq	#0,d0
0000FC3C 4E75                       		rts	
0000FC3E                            
0000FC3E                            	@offscreen2:
0000FC3E 7001                       		moveq	#1,d0
0000FC40 4E75                       		rts	
0000FC42                            ; End of function ChkPartiallyVisible
0000FC42                            ; End of function ChkPartiallyVisible
0000FC42                            
0000FC42                            ; ---------------------------------------------------------------------------
0000FC42                            ; Subroutine to	load a level's objects
0000FC42                            ; ---------------------------------------------------------------------------
0000FC42                            
0000FC42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC42                            
0000FC42                            
0000FC42                            ObjPosLoad:
0000FC42 7000                       		moveq	#0,d0
0000FC44 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FC48 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FC4C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FC50                            ; End of function ObjPosLoad
0000FC50                            
0000FC50                            ; ===========================================================================
0000FC50 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FC52 0000                       		dc.w OPL_Next-OPL_Index
0000FC54                            ; ===========================================================================
0000FC54                            
0000FC54                            OPL_Main:
0000FC54 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FC58 3038 FE10                  		move.w	(v_zone).w,d0
0000FC5C ED08                       		lsl.b	#6,d0
0000FC5E E848                       		lsr.w	#4,d0
0000FC60 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FC66 2248                       		movea.l	a0,a1
0000FC68 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FC6C 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC70 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC74 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FC78 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FC7C 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FC80 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC84 34FC 0101                  		move.w	#$101,(a2)+
0000FC88 303C 005E                  		move.w	#$5E,d0
0000FC8C                            
0000FC8C                            OPL_ClrList:
0000FC8C 429A                       		clr.l	(a2)+
0000FC8E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FC92                            
0000FC92 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC96 7400                       		moveq	#0,d2
0000FC98 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FC9C 0446 0080                  		subi.w	#$80,d6
0000FCA0 6400                       		bhs.s	loc_D93C
0000FCA2 7C00                       		moveq	#0,d6
0000FCA4                            
0000FCA4                            loc_D93C:
0000FCA4 0246 FF80                  		andi.w	#$FF80,d6
0000FCA8 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCAC                            
0000FCAC                            loc_D944:
0000FCAC BC50                       		cmp.w	(a0),d6
0000FCAE 6300                       		bls.s	loc_D956
0000FCB0 4A28 0004                  		tst.b	4(a0)
0000FCB4 6A00                       		bpl.s	loc_D952
0000FCB6 1412                       		move.b	(a2),d2
0000FCB8 5212                       		addq.b	#1,(a2)
0000FCBA                            
0000FCBA                            loc_D952:
0000FCBA 5C48                       		addq.w	#6,a0
0000FCBC 60EE                       		bra.s	loc_D944
0000FCBE                            ; ===========================================================================
0000FCBE                            
0000FCBE                            loc_D956:
0000FCBE 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCC2 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCC6 0446 0080                  		subi.w	#$80,d6
0000FCCA 6500                       		blo.s	loc_D976
0000FCCC                            
0000FCCC                            loc_D964:
0000FCCC BC50                       		cmp.w	(a0),d6
0000FCCE 6300                       		bls.s	loc_D976
0000FCD0 4A28 0004                  		tst.b	4(a0)
0000FCD4 6A00                       		bpl.s	loc_D972
0000FCD6 522A 0001                  		addq.b	#1,1(a2)
0000FCDA                            
0000FCDA                            loc_D972:
0000FCDA 5C48                       		addq.w	#6,a0
0000FCDC 60EE                       		bra.s	loc_D964
0000FCDE                            ; ===========================================================================
0000FCDE                            
0000FCDE                            loc_D976:
0000FCDE 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCE2 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FCE8                            
0000FCE8                            OPL_Next:
0000FCE8 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCEC 7400                       		moveq	#0,d2
0000FCEE 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FCF2 0246 FF80                  		andi.w	#$FF80,d6
0000FCF6 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FCFA 6700 0000                  		beq.w	locret_DA3A
0000FCFE 6C00                       		bge.s	loc_D9F6
0000FD00 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD04 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD08 0446 0080                  		subi.w	#$80,d6
0000FD0C 6500                       		blo.s	loc_D9D2
0000FD0E                            
0000FD0E                            loc_D9A6:
0000FD0E BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD12 6C00                       		bge.s	loc_D9D2
0000FD14 5D48                       		subq.w	#6,a0
0000FD16 4A28 0004                  		tst.b	4(a0)
0000FD1A 6A00                       		bpl.s	loc_D9BC
0000FD1C 532A 0001                  		subq.b	#1,1(a2)
0000FD20 142A 0001                  		move.b	1(a2),d2
0000FD24                            
0000FD24                            loc_D9BC:
0000FD24 6100 0000                  		bsr.w	loc_DA3C
0000FD28 6600                       		bne.s	loc_D9C6
0000FD2A 5D48                       		subq.w	#6,a0
0000FD2C 60E0                       		bra.s	loc_D9A6
0000FD2E                            ; ===========================================================================
0000FD2E                            
0000FD2E                            loc_D9C6:
0000FD2E 4A28 0004                  		tst.b	4(a0)
0000FD32 6A00                       		bpl.s	loc_D9D0
0000FD34 522A 0001                  		addq.b	#1,1(a2)
0000FD38                            
0000FD38                            loc_D9D0:
0000FD38 5C48                       		addq.w	#6,a0
0000FD3A                            
0000FD3A                            loc_D9D2:
0000FD3A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD3E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD42 0646 0300                  		addi.w	#$300,d6
0000FD46                            
0000FD46                            loc_D9DE:
0000FD46 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD4A 6E00                       		bgt.s	loc_D9F0
0000FD4C 4A28 FFFE                  		tst.b	-2(a0)
0000FD50 6A00                       		bpl.s	loc_D9EC
0000FD52 5312                       		subq.b	#1,(a2)
0000FD54                            
0000FD54                            loc_D9EC:
0000FD54 5D48                       		subq.w	#6,a0
0000FD56 60EE                       		bra.s	loc_D9DE
0000FD58                            ; ===========================================================================
0000FD58                            
0000FD58                            loc_D9F0:
0000FD58 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD5C 4E75                       		rts	
0000FD5E                            ; ===========================================================================
0000FD5E                            
0000FD5E                            loc_D9F6:
0000FD5E 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD62 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD66 0646 0280                  		addi.w	#$280,d6
0000FD6A                            
0000FD6A                            loc_DA02:
0000FD6A BC50                       		cmp.w	(a0),d6
0000FD6C 6300                       		bls.s	loc_DA16
0000FD6E 4A28 0004                  		tst.b	4(a0)
0000FD72 6A00                       		bpl.s	loc_DA10
0000FD74 1412                       		move.b	(a2),d2
0000FD76 5212                       		addq.b	#1,(a2)
0000FD78                            
0000FD78                            loc_DA10:
0000FD78 6100 0000                  		bsr.w	loc_DA3C
0000FD7C 67EC                       		beq.s	loc_DA02
0000FD7E                            
0000FD7E                            loc_DA16:
0000FD7E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD82 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD86 0446 0300                  		subi.w	#$300,d6
0000FD8A 6500                       		blo.s	loc_DA36
0000FD8C                            
0000FD8C                            loc_DA24:
0000FD8C BC50                       		cmp.w	(a0),d6
0000FD8E 6300                       		bls.s	loc_DA36
0000FD90 4A28 0004                  		tst.b	4(a0)
0000FD94 6A00                       		bpl.s	loc_DA32
0000FD96 522A 0001                  		addq.b	#1,1(a2)
0000FD9A                            
0000FD9A                            loc_DA32:
0000FD9A 5C48                       		addq.w	#6,a0
0000FD9C 60EE                       		bra.s	loc_DA24
0000FD9E                            ; ===========================================================================
0000FD9E                            
0000FD9E                            loc_DA36:
0000FD9E 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FDA2                            
0000FDA2                            locret_DA3A:
0000FDA2 4E75                       		rts	
0000FDA4                            ; ===========================================================================
0000FDA4                            
0000FDA4                            loc_DA3C:
0000FDA4 4A28 0004                  		tst.b	4(a0)
0000FDA8 6A00                       		bpl.s	OPL_MakeItem
0000FDAA 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FDB0 6700                       		beq.s	OPL_MakeItem
0000FDB2 5C48                       		addq.w	#6,a0
0000FDB4 7000                       		moveq	#0,d0
0000FDB6 4E75                       		rts	
0000FDB8                            ; ===========================================================================
0000FDB8                            
0000FDB8                            OPL_MakeItem:
0000FDB8 6100 0000                  		bsr.w	FindFreeObj
0000FDBC 6600                       		bne.s	locret_DA8A
0000FDBE 3358 0008                  		move.w	(a0)+,obX(a1)
0000FDC2 3018                       		move.w	(a0)+,d0
0000FDC4 3200                       		move.w	d0,d1
0000FDC6 0240 0FFF                  		andi.w	#$FFF,d0
0000FDCA 3340 000C                  		move.w	d0,obY(a1)
0000FDCE E559                       		rol.w	#2,d1
0000FDD0 0201 0003                  		andi.b	#3,d1
0000FDD4 1341 0001                  		move.b	d1,obRender(a1)
0000FDD8 1341 0022                  		move.b	d1,obStatus(a1)
0000FDDC 1018                       		move.b	(a0)+,d0
0000FDDE 6A00                       		bpl.s	loc_DA80
0000FDE0 0200 007F                  		andi.b	#$7F,d0
0000FDE4 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FDE8                            
0000FDE8                            loc_DA80:
0000FDE8 1280                       		move.b	d0,0(a1)
0000FDEA 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FDEE 7000                       		moveq	#0,d0
0000FDF0                            
0000FDF0                            locret_DA8A:
0000FDF0 4E75                       		rts	
0000FDF2                            
0000FDF2                            		include	"_incObj\sub FindFreeObj.asm"
0000FDF2                            ; ---------------------------------------------------------------------------
0000FDF2                            ; Subroutine to find a free object space
0000FDF2                            
0000FDF2                            ; output:
0000FDF2                            ;	a1 = free position in object RAM
0000FDF2                            ; ---------------------------------------------------------------------------
0000FDF2                            
0000FDF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDF2                            
0000FDF2                            
0000FDF2                            FindFreeObj:
0000FDF2 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FDF6 303C 005F                  		move.w	#$5F,d0
0000FDFA                            
0000FDFA                            	FFree_Loop:
0000FDFA 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FDFC 6700                       		beq.s	FFree_Found	; if yes, branch
0000FDFE 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FE02 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FE06                            
0000FE06                            	FFree_Found:
0000FE06 4E75                       		rts	
0000FE08                            
0000FE08                            ; End of function FindFreeObj
0000FE08                            
0000FE08                            
0000FE08                            ; ---------------------------------------------------------------------------
0000FE08                            ; Subroutine to find a free object space AFTER the current one
0000FE08                            
0000FE08                            ; output:
0000FE08                            ;	a1 = free position in object RAM
0000FE08                            ; ---------------------------------------------------------------------------
0000FE08                            
0000FE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE08                            
0000FE08                            
0000FE08                            FindNextFreeObj:
0000FE08 2248                       		movea.l	a0,a1
0000FE0A 303C F000                  		move.w	#$F000,d0
0000FE0E 9048                       		sub.w	a0,d0
0000FE10 EC48                       		lsr.w	#6,d0
0000FE12 5340                       		subq.w	#1,d0
0000FE14 6500                       		bcs.s	NFree_Found
0000FE16                            
0000FE16                            	NFree_Loop:
0000FE16 4A11                       		tst.b	(a1)
0000FE18 6700                       		beq.s	NFree_Found
0000FE1A 43E9 0040                  		lea	$40(a1),a1
0000FE1E 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FE22                            
0000FE22                            	NFree_Found:
0000FE22 4E75                       		rts	
0000FE24                            
0000FE24                            ; End of function FindNextFreeObj
0000FE24                            ; End of function FindNextFreeObj
0000FE24                            		include	"_incObj\41 Springs.asm"
0000FE24                            ; ---------------------------------------------------------------------------
0000FE24                            ; Object 41 - springs
0000FE24                            ; ---------------------------------------------------------------------------
0000FE24                            
0000FE24                            Springs:
0000FE24 7000                       		moveq	#0,d0
0000FE26 1028 0024                  		move.b	obRoutine(a0),d0
0000FE2A 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FE2E 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FE32 6100 FA24                  		bsr.w	DisplaySprite
0000FE54 4E75                       		rts	
0000FE56                            ; ===========================================================================
0000FE56 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FE58 0000                       		dc.w Spring_Up-Spring_Index
0000FE5A 0000                       		dc.w Spring_AniUp-Spring_Index
0000FE5C 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FE5E 0000                       		dc.w Spring_LR-Spring_Index
0000FE60 0000                       		dc.w Spring_AniLR-Spring_Index
0000FE62 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FE64 0000                       		dc.w Spring_Dwn-Spring_Index
0000FE66 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FE68 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FE6A                            
0000FE6A =00000030                  spring_pow:	equ $30			; power of current spring
0000FE6A                            
0000FE6A F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FE6C F600                       		dc.w -$A00		; power	of yellow spring
0000FE6E                            ; ===========================================================================
0000FE6E                            
0000FE6E                            Spring_Main:	; Routine 0
0000FE6E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE72 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FE7A 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FE80 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FE86 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FE8C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FE92 1028 0028                  		move.b	obSubtype(a0),d0
0000FE96 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FE9A 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FE9C                            
0000FE9C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FEA2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FEA8 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FEAE 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FEB4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FEBA                            
0000FEBA                            	Spring_NotLR:
0000FEBA 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FEBE 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FEC0                            
0000FEC0 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FEC6 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FECC                            
0000FECC                            	Spring_NotDwn:
0000FECC 0800 0001                  		btst	#1,d0
0000FED0 6700                       		beq.s	loc_DB72
0000FED2 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FED8                            
0000FED8                            loc_DB72:
0000FED8 0240 000F                  		andi.w	#$F,d0
0000FEDC 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FEE2 4E75                       		rts	
0000FEE4                            ; ===========================================================================
0000FEE4                            
0000FEE4                            Spring_Up:	; Routine 2
0000FEE4 323C 001B                  		move.w	#$1B,d1
0000FEE8 343C 0008                  		move.w	#8,d2
0000FEEC 363C 0010                  		move.w	#$10,d3
0000FEF0 3828 0008                  		move.w	obX(a0),d4
0000FEF4 6100 0000                  		bsr.w	SolidObject
0000FEF8 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FEFC 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FEFE 4E75                       		rts	
0000FF00                            ; ===========================================================================
0000FF00                            
0000FF00                            Spring_BounceUp:
0000FF00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF04 5069 000C                  		addq.w	#8,obY(a1)
0000FF08 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FF0E 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF14 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF1A 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FF20 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF26 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF2C 4228 0025                  		clr.b	obSolid(a0)
0000FF3A                            
0000FF3A                            Spring_AniUp:	; Routine 4
0000FF3A 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF40 6000 C9CC                  		bra.w	AnimateSprite
0000FF44                            ; ===========================================================================
0000FF44                            
0000FF44                            Spring_ResetUp:	; Routine 6
0000FF44 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF4A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FF4E 4E75                       		rts	
0000FF50                            ; ===========================================================================
0000FF50                            
0000FF50                            Spring_LR:	; Routine 8
0000FF50 323C 0013                  		move.w	#$13,d1
0000FF54 343C 000E                  		move.w	#$E,d2
0000FF58 363C 000F                  		move.w	#$F,d3
0000FF5C 3828 0008                  		move.w	obX(a0),d4
0000FF60 6100 0000                  		bsr.w	SolidObject
0000FF64 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF6A 6600                       		bne.s	loc_DC0C
0000FF6C 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FF72                            
0000FF72                            loc_DC0C:
0000FF72 0828 0005 0022             		btst	#5,obStatus(a0)
0000FF78 6600                       		bne.s	Spring_BounceLR
0000FF7A 4E75                       		rts	
0000FF7C                            ; ===========================================================================
0000FF7C                            
0000FF7C                            Spring_BounceLR:
0000FF7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF80 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FF86 5069 0008                  		addq.w	#8,obX(a1)
0000FF8A 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FF90 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FF92 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FF98 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FF9C                            
0000FF9C                            	Spring_Flipped:
0000FF9C 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FFA2 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FFA8 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FFAE 0829 0002 0022             		btst	#2,obStatus(a1)
0000FFB4 6600                       		bne.s	loc_DC56
0000FFB6 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FFBC                            
0000FFBC                            loc_DC56:
0000FFBC 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FFC2 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FFD2                            
0000FFD2                            Spring_AniLR:	; Routine $A
0000FFD2 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FFD6 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFDC 6000 C930                  		bra.w	AnimateSprite
0000FFE0                            ; ===========================================================================
0000FFE0                            
0000FFE0                            Spring_ResetLR:	; Routine $C
0000FFE0 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FFE6 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FFEA 4E75                       		rts	
0000FFEC                            ; ===========================================================================
0000FFEC                            
0000FFEC                            Spring_Dwn:	; Routine $E
0000FFEC 323C 001B                  		move.w	#$1B,d1
0000FFF0 343C 0008                  		move.w	#8,d2
0000FFF4 363C 0010                  		move.w	#$10,d3
0000FFF8 3828 0008                  		move.w	obX(a0),d4
0000FFFC 6100 0000                  		bsr.w	SolidObject
00010000 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00010006 6600                       		bne.s	loc_DCA4
00010008 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0001000E                            
0001000E                            loc_DCA4:
0001000E 4A28 0025                  		tst.b	obSolid(a0)
00010012 6600                       		bne.s	locret_DCAE
00010014 4A44                       		tst.w	d4
00010016 6B00                       		bmi.s	Spring_BounceDwn
00010018                            
00010018                            locret_DCAE:
00010018 4E75                       		rts	
0001001A                            ; ===========================================================================
0001001A                            
0001001A                            Spring_BounceDwn:
0001001A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001001E 5169 000C                  		subq.w	#8,obY(a1)
00010022 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
00010028 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0001002C 08E9 0001 0022             		bset	#1,obStatus(a1)
00010032 08A9 0003 0022             		bclr	#3,obStatus(a1)
00010038 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001003E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00010044 4228 0025                  		clr.b	obSolid(a0)
00010052                            
00010052                            Spring_AniDwn:	; Routine $10
00010052 43F9 0000 0000             		lea	(Ani_Spring).l,a1
00010058 6000 C8B4                  		bra.w	AnimateSprite
0001005C                            ; ===========================================================================
0001005C                            
0001005C                            Spring_ResetDwn:
0001005C                            		; Routine $12
0001005C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010062 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
00010066 4E75                       		rts	
00010066 4E75                       		rts	
00010068                            		include	"_anim\Springs.asm"
00010068                            ; ---------------------------------------------------------------------------
00010068                            ; Animation script - springs
00010068                            ; ---------------------------------------------------------------------------
00010068 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0001006A 0000                       		dc.w byte_DD0E-Ani_Spring
0001006C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
00010078 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
00010084                            		even
00010084                            		even
00010084                            Map_Spring:	include	"_maps\Springs.asm"
00010084                            ; ---------------------------------------------------------------------------
00010084                            ; Sprite mappings - springs
00010084                            ; ---------------------------------------------------------------------------
00010084                            Map_Spring_internal:
00010084 0000                       		dc.w M_Spg_Up-Map_Spring_internal
00010086 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
00010088 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0001008A 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0001008C 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0001008E 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
00010090 02                         M_Spg_Up:	dc.b 2			; facing up
00010091 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00010096 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0001009B 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0001009C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
000100A1 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
000100A2 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
000100A7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000100AC 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
000100B1 01                         M_Spg_Left:	dc.b 1			; facing left
000100B2 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000100B7 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
000100B8 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
000100BD 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
000100BE F003 0004 10               		dc.b $F0, 3, 0,	4, $10
000100C3 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
000100C8 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000100CD 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
000100D2                            		even
000100D2                            		even
000100D2                            
000100D2                            		include	"_incObj\42 Newtron.asm"
000100D2                            ; ---------------------------------------------------------------------------
000100D2                            ; Object 42 - Newtron enemy (GHZ)
000100D2                            ; ---------------------------------------------------------------------------
000100D2                            
000100D2                            Newtron:
000100D2 7000                       		moveq	#0,d0
000100D4 1028 0024                  		move.b	obRoutine(a0),d0
000100D8 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
000100DC 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
000100E0                            ; ===========================================================================
000100E0 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
000100E2 0000                       		dc.w Newt_Action-Newt_Index
000100E4 0000                       		dc.w Newt_Delete-Newt_Index
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Newt_Main:	; Routine 0
000100E6 5428 0024                  		addq.b	#2,obRoutine(a0)
000100EA 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
000100F2 317C 049B 0002             		move.w	#$49B,obGfx(a0)
000100F8 117C 0004 0001             		move.b	#4,obRender(a0)
000100FE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010104 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001010A 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010110 117C 0008 0017             		move.b	#8,obWidth(a0)
00010116                            
00010116                            Newt_Action:	; Routine 2
00010116 7000                       		moveq	#0,d0
00010118 1028 0025                  		move.b	ob2ndRout(a0),d0
0001011C 323B 0000                  		move.w	@index(pc,d0.w),d1
00010120 4EBB 1000                  		jsr	@index(pc,d1.w)
00010124 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001012A 6100 C7E2                  		bsr.w	AnimateSprite
0001012E 6000 0000                  		bra.w	RememberState
00010132                            ; ===========================================================================
00010132 0000                       @index:		dc.w @chkdistance-@index
00010134 0000                       		dc.w @type00-@index
00010136 0000                       		dc.w @matchfloor-@index
00010138 0000                       		dc.w @speed-@index
0001013A 0000                       		dc.w @type01-@index
0001013C                            ; ===========================================================================
0001013C                            
0001013C                            @chkdistance:
0001013C 08E8 0000 0022             		bset	#0,obStatus(a0)
00010142 3038 D008                  		move.w	(v_player+obX).w,d0
00010146 9068 0008                  		sub.w	obX(a0),d0
0001014A 6400                       		bcc.s	@sonicisright
0001014C 4440                       		neg.w	d0
0001014E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010154                            
00010154                            	@sonicisright:
00010154 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
00010158 6400                       		bcc.s	@outofrange	; if not, branch
0001015A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0001015E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010164 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
00010168 6700                       		beq.s	@istype00	; if type is 00, branch
0001016A                            
0001016A 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010170 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
00010176 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0001017C                            
0001017C                            	@outofrange:
0001017C                            	@istype00:
0001017C 4E75                       		rts	
0001017E                            ; ===========================================================================
0001017E                            
0001017E                            @type00:
0001017E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
00010184 6400                       		bcc.s	@fall		; is yes, branch
00010186 08E8 0000 0022             		bset	#0,obStatus(a0)
0001018C 3038 D008                  		move.w	(v_player+obX).w,d0
00010190 9068 0008                  		sub.w	obX(a0),d0
00010194 6400                       		bcc.s	@sonicisright2
00010196 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001019C                            
0001019C                            	@sonicisright2:
0001019C 4E75                       		rts	
0001019E                            ; ===========================================================================
0001019E                            
0001019E                            	@fall:
0001019E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000101A4 6600                       		bne.s	@loc_DE42
000101A6 117C 000C 0020             		move.b	#$C,obColType(a0)
000101AC                            
000101AC                            	@loc_DE42:
000101AC 6100 F65E                  		bsr.w	ObjectFall
000101B0 4EB9 0000 0000             		jsr		ObjFloorDist
000101B6 4A41                       		tst.w	d1		; has newtron hit the floor?
000101B8 6A00                       		bpl.s	@keepfalling	; if not, branch
000101BA                            
000101BA D368 000C                  		add.w	d1,obY(a0)
000101BE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000101C4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101C8 117C 0002 001C             		move.b	#2,obAnim(a0)
000101CE 0828 0005 0002             		btst	#5,obGfx(a0)
000101D4 6700                       		beq.s	@pppppppp
000101D6 5228 001C                  		addq.b	#1,obAnim(a0)
000101DA                            
000101DA                            	@pppppppp:
000101DA 117C 000D 0020             		move.b	#$D,obColType(a0)
000101E0 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
000101E6 0828 0000 0022             		btst	#0,obStatus(a0)
000101EC 6600                       		bne.s	@keepfalling
000101EE 4468 0010                  		neg.w	obVelX(a0)
000101F2                            
000101F2                            	@keepfalling:
000101F2 4E75                       		rts	
000101F4                            ; ===========================================================================
000101F4                            
000101F4                            @matchfloor:
000101F4 6100 F64E                  		bsr.w	SpeedToPos
000101F8 4EB9 0000 0000             		jsr		ObjFloorDist
000101FE 0C41 FFF8                  		cmpi.w	#-8,d1
00010202 6D00                       		blt.s	@nextroutine
00010204 0C41 000C                  		cmpi.w	#$C,d1
00010208 6C00                       		bge.s	@nextroutine
0001020A D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0001020E 4E75                       		rts	
00010210                            ; ===========================================================================
00010210                            
00010210                            	@nextroutine:
00010210 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010214 4E75                       		rts	
00010216                            ; ===========================================================================
00010216                            
00010216                            @speed:
00010216 6100 F62C                  		bsr.w	SpeedToPos
0001021A 4E75                       		rts	
0001021C                            ; ===========================================================================
0001021C                            
0001021C                            @type01:
0001021C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010222 6600                       		bne.s	@firemissile
00010224 117C 000C 0020             		move.b	#$C,obColType(a0)
0001022A                            
0001022A                            	@firemissile:
0001022A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010230 6600                       		bne.s	@fail
00010232 4A28 0032                  		tst.b	$32(a0)
00010236 6600                       		bne.s	@fail
00010238 117C 0001 0032             		move.b	#1,$32(a0)
0001023E 6100 FBB2                  		bsr.w	FindFreeObj
00010242 6600                       		bne.s	@fail
00010244 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010248 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001024E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010254 5169 000C                  		subq.w	#8,obY(a1)
00010258 337C 0200 0010             		move.w	#$200,obVelX(a1)
0001025E 303C 0014                  		move.w	#$14,d0
00010262 0828 0000 0022             		btst	#0,obStatus(a0)
00010268 6600                       		bne.s	@noflip
0001026A 4440                       		neg.w	d0
0001026C 4469 0010                  		neg.w	obVelX(a1)
00010270                            
00010270                            	@noflip:
00010270 D169 0008                  		add.w	d0,obX(a1)
00010274 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001027A 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010280                            
00010280                            	@fail:
00010280 4E75                       		rts	
00010282                            ; ===========================================================================
00010282                            
00010282                            Newt_Delete:	; Routine 4
00010282 6000 F614                  		bra.w	DeleteObject
00010282 6000 F614                  		bra.w	DeleteObject
00010286                            		include	"_anim\Newtron.asm"
00010286                            ; ---------------------------------------------------------------------------
00010286                            ; Animation script - Newtron enemy
00010286                            ; ---------------------------------------------------------------------------
00010286 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
00010288 0000                       		dc.w A_Newt_Drop-Ani_Newt
0001028A 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0001028C 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0001028E 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010290 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
00010294 00                         		even
00010294 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0001029C 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000102A0 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000102A4 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000102AE 00                         		even
000102AE 00                         		even
000102AE                            Map_Newt:	include	"_maps\Newtron.asm"
000102AE                            ; ---------------------------------------------------------------------------
000102AE                            ; Sprite mappings - Newtron enemy (GHZ)
000102AE                            ; ---------------------------------------------------------------------------
000102AE                            Map_Newt_internal:
000102AE 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000102B0 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000102B2 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000102B4 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000102B6 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000102B8 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000102BA 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000102BC 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000102BE 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000102C0 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000102C2 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000102C4 03                         M_Newt_Trans:	dc.b 3
000102C5 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000102CA F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000102CF FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000102D4 03                         M_Newt_Norm:	dc.b 3
000102D5 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000102DA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102DF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000102E4 03                         M_Newt_Fires:	dc.b 3
000102E5 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000102EA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102EF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000102F4 04                         M_Newt_Drop1:	dc.b 4
000102F5 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
000102FA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102FF FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010304 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010309 03                         M_Newt_Drop2:	dc.b 3
0001030A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001030F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010314 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00010319 02                         M_Newt_Drop3:	dc.b 2
0001031A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001031F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010324 03                         M_Newt_Fly1a:	dc.b 3
00010325 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001032A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001032F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010334 03                         M_Newt_Fly1b:	dc.b 3
00010335 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001033A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001033F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010344 03                         M_Newt_Fly2a:	dc.b 3
00010345 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001034A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001034F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010354 03                         M_Newt_Fly2b:	dc.b 3
00010355 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001035A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001035F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010364 00                         M_Newt_Blank:	dc.b 0
00010366 00                         		even
00010366 00                         		even
00010366                            		include	"_incObj\43 Roller.asm"
00010366                            ; ---------------------------------------------------------------------------
00010366                            ; Object 43 - Roller enemy (SYZ)
00010366                            ; ---------------------------------------------------------------------------
00010366                            
00010366                            Roller:
00010366 7000                       		moveq	#0,d0
00010368 1028 0024                  		move.b	obRoutine(a0),d0
0001036C 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010370 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010374                            ; ===========================================================================
00010374 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010376 0000                       		dc.w Roll_Action-Roll_Index
00010378                            ; ===========================================================================
00010378                            
00010378                            Roll_Main:	; Routine 0
00010378 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001037E 117C 0008 0017             		move.b	#8,obWidth(a0)
00010384 6100 F486                  		bsr.w	ObjectFall
00010388 4EB9 0000 0000             		jsr	ObjFloorDist
0001038E 4A41                       		tst.w	d1
00010390 6A00                       		bpl.s	locret_E052
00010392 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
00010396 317C 0000 0012             		move.w	#0,obVelY(a0)
0001039C 5428 0024                  		addq.b	#2,obRoutine(a0)
000103A0 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000103A8 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000103AE 117C 0004 0001             		move.b	#4,obRender(a0)
000103B4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000103BA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000103C0                            
000103C0                            	locret_E052:
000103C0 4E75                       		rts	
000103C2                            ; ===========================================================================
000103C2                            
000103C2                            Roll_Action:	; Routine 2
000103C2 7000                       		moveq	#0,d0
000103C4 1028 0025                  		move.b	ob2ndRout(a0),d0
000103C8 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000103CC 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000103D0 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000103D6 6100 C536                  		bsr.w	AnimateSprite
000103DA 3028 0008                  		move.w	obX(a0),d0
000103DE 0240 FF80                  		andi.w	#$FF80,d0
000103E2 3238 F700                  		move.w	(v_screenposx).w,d1
000103E6 0441 0080                  		subi.w	#$80,d1
000103EA 0241 FF80                  		andi.w	#$FF80,d1
000103EE 9041                       		sub.w	d1,d0
000103F0 0C40 0280                  		cmpi.w	#$280,d0
000103F4 6E00 0000                  		bgt.w	Roll_ChkGone
000103F8 6000 F45E                  		bra.w	DisplaySprite
000103FC                            ; ===========================================================================
000103FC                            
000103FC                            Roll_ChkGone:
000103FC 45F8 FC00                  		lea	(v_objstate).w,a2
00010400 7000                       		moveq	#0,d0
00010402 1028 0023                  		move.b	obRespawnNo(a0),d0
00010406 6700                       		beq.s	Roll_Delete
00010408 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001040E                            
0001040E                            Roll_Delete:
0001040E 6000 F488                  		bra.w	DeleteObject
00010412                            ; ===========================================================================
00010412 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010414 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010416 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010418 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001041A                            ; ===========================================================================
0001041A                            
0001041A                            Roll_RollChk:
0001041A 3038 D008                  		move.w	(v_player+obX).w,d0
0001041E 0440 0100                  		subi.w	#$100,d0
00010422 6500                       		bcs.s	loc_E0D2
00010424 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010428 6500                       		bcs.s	loc_E0D2
0001042A 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001042E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010434 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001043A 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010440                            
00010440                            loc_E0D2:
00010440 588F                       		addq.l	#4,sp
00010442 4E75                       		rts	
00010444                            ; ===========================================================================
00010444                            
00010444                            Roll_RollNoChk:
00010444 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001044A 6700                       		beq.s	loc_E0F8
0001044C 5368 0030                  		subq.w	#1,$30(a0)
00010450 6A00                       		bpl.s	locret_E0F6
00010452 117C 0001 001C             		move.b	#1,obAnim(a0)
00010458 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001045E 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010464                            
00010464                            locret_E0F6:
00010464 4E75                       		rts	
00010466                            ; ===========================================================================
00010466                            
00010466                            loc_E0F8:
00010466 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001046A 4E75                       		rts	
0001046C                            ; ===========================================================================
0001046C                            
0001046C                            Roll_ChkJump:
0001046C 6100 0000                  		bsr.w	Roll_Stop
00010470 6100 F3D2                  		bsr.w	SpeedToPos
00010474 4EB9 0000 0000             		jsr	ObjFloorDist
0001047A 0C41 FFF8                  		cmpi.w	#-8,d1
0001047E 6D00                       		blt.s	Roll_Jump
00010480 0C41 000C                  		cmpi.w	#$C,d1
00010484 6C00                       		bge.s	Roll_Jump
00010486 D368 000C                  		add.w	d1,obY(a0)
0001048A 4E75                       		rts	
0001048C                            ; ===========================================================================
0001048C                            
0001048C                            Roll_Jump:
0001048C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010490 08E8 0000 0032             		bset	#0,$32(a0)
00010496 6700                       		beq.s	locret_E12E
00010498 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
0001049E                            
0001049E                            locret_E12E:
0001049E 4E75                       		rts	
000104A0                            ; ===========================================================================
000104A0                            
000104A0                            Roll_MatchFloor:
000104A0 6100 F36A                  		bsr.w	ObjectFall
000104A4 4A68 0012                  		tst.w	obVelY(a0)
000104A8 6B00                       		bmi.s	locret_E150
000104AA 4EB9 0000 0000             		jsr	ObjFloorDist
000104B0 4A41                       		tst.w	d1
000104B2 6A00                       		bpl.s	locret_E150
000104B4 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000104B8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000104BC 317C 0000 0012             		move.w	#0,obVelY(a0)
000104C2                            
000104C2                            locret_E150:
000104C2 4E75                       		rts	
000104C4                            
000104C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104C4                            
000104C4                            
000104C4                            Roll_Stop:
000104C4 4A28 0032                  		tst.b	$32(a0)
000104C8 6B00                       		bmi.s	locret_E188
000104CA 3038 D008                  		move.w	(v_player+obX).w,d0
000104CE 0440 0030                  		subi.w	#$30,d0
000104D2 9068 0008                  		sub.w	obX(a0),d0
000104D6 6400                       		bcc.s	locret_E188
000104D8 117C 0000 001C             		move.b	#0,obAnim(a0)
000104DE 117C 000E 0020             		move.b	#$E,obColType(a0)
000104E4 4268 0010                  		clr.w	obVelX(a0)
000104E8 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000104EE 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000104F4 08E8 0007 0032             		bset	#7,$32(a0)
000104FA                            
000104FA                            locret_E188:
000104FA 4E75                       		rts	
000104FC                            ; End of function Roll_Stop
000104FC                            ; End of function Roll_Stop
000104FC                            		include	"_anim\Roller.asm"
000104FC                            ; ---------------------------------------------------------------------------
000104FC                            ; Animation script - Roller enemy
000104FC                            ; ---------------------------------------------------------------------------
000104FC 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000104FE 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010500 0000                       		dc.w A_Roll_Roll-Ani_Roll
00010502 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010508 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0001050E 00                         		even
0001050E 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010514 00                         		even
00010514 00                         		even
00010514                            Map_Roll:	include	"_maps\Roller.asm"
00010514                            ; --------------------------------------------------------------------------------
00010514                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010514                            ; --------------------------------------------------------------------------------
00010514                            
00010514                            SME_q3BmU:	
00010514 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010518 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
0001051C 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
0001051E 02                         SME_q3BmU_A:	dc.b 2	
0001051F DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010524 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010529 02                         SME_q3BmU_15:	dc.b 2	
0001052A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001052F FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010534 01                         SME_q3BmU_20:	dc.b 1	
00010535 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
0001053A 01                         SME_q3BmU_26:	dc.b 1	
0001053B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010540 01                         SME_q3BmU_2C:	dc.b 1	
00010541 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010546                            		even
00010546                            		even
00010546                            
00010546                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010546                            ; ---------------------------------------------------------------------------
00010546                            ; Object 44 - edge walls (GHZ)
00010546                            ; ---------------------------------------------------------------------------
00010546                            
00010546                            EdgeWalls:
00010546 7000                       		moveq	#0,d0
00010548 1028 0024                  		move.b	obRoutine(a0),d0
0001054C 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010550 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010554                            ; ===========================================================================
00010554 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010556 0000                       		dc.w Edge_Solid-Edge_Index
00010558 0000                       		dc.w Edge_Display-Edge_Index
0001055A                            ; ===========================================================================
0001055A                            
0001055A                            Edge_Main:	; Routine 0
0001055A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001055E 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010566 317C 434C 0002             		move.w	#$434C,obGfx(a0)
0001056C 0028 0004 0001             		ori.b	#4,obRender(a0)
00010572 117C 0008 0014             		move.b	#8,obActWid(a0)
00010578 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001057E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010584 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
0001058A 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
0001058C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010590 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010592                            ; ===========================================================================
00010592                            
00010592                            Edge_Solid:	; Routine 2
00010592 323C 0013                  		move.w	#$13,d1
00010596 343C 0028                  		move.w	#$28,d2
0001059A 6100 9FA0                  		bsr.w	Obj44_SolidWall
0001059E                            
0001059E                            Edge_Display:	; Routine 4
0001059E 6100 F2B8                  		bsr.w	DisplaySprite
000105C0 4E75                       		rts	
000105C0 4E75                       		rts	
000105C2                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000105C2                            ; ---------------------------------------------------------------------------
000105C2                            ; Sprite mappings - walls (GHZ)
000105C2                            ; ---------------------------------------------------------------------------
000105C2                            Map_Edge_internal:
000105C2 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000105C4 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000105C6 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000105C8 04                         M_Edge_Shadow:	dc.b 4
000105C9 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000105CE F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105D3 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105D8 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105DD 04                         M_Edge_Light:	dc.b 4
000105DE E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000105E3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105E8 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105ED 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105F2 04                         M_Edge_Dark:	dc.b 4
000105F3 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000105F8 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000105FD 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00010602 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010608 00                         		even
00010608 00                         		even
00010608                            
00010608                            		include	"_incObj\13 Lava Ball Maker.asm"
00010608                            ; ---------------------------------------------------------------------------
00010608                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010608                            ; ---------------------------------------------------------------------------
00010608                            
00010608                            LavaMaker:
00010608 7000                       		moveq	#0,d0
0001060A 1028 0024                  		move.b	obRoutine(a0),d0
0001060E 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
00010612 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010616 6000 0000                  		bra.w	LBall_ChkDel
0001061A                            ; ===========================================================================
0001061A 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
0001061C 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            ;
0001061E                            ; Lava ball production rates
0001061E                            ;
0001061E 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010624                            ; ===========================================================================
00010624                            
00010624                            LavaM_Main:	; Routine 0
00010624 5428 0024                  		addq.b	#2,obRoutine(a0)
00010628 1028 0028                  		move.b	obSubtype(a0),d0
0001062C E848                       		lsr.w	#4,d0
0001062E 0240 000F                  		andi.w	#$F,d0
00010632 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010638 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001063E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010644                            
00010644                            LavaM_MakeLava:	; Routine 2
00010644 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010648 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
0001064A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010650 6100 F594                  		bsr.w	ChkObjectVisible
00010654 6600                       		bne.s	LavaM_Wait
00010656 6100 F79A                  		bsr.w	FindFreeObj
0001065A 6600                       		bne.s	LavaM_Wait
0001065C 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010660 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010666 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001066C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010672                            
00010672                            	LavaM_Wait:
00010672 4E75                       		rts	
00010672 4E75                       		rts	
00010674                            		include	"_incObj\14 Lava Ball.asm"
00010674                            ; ---------------------------------------------------------------------------
00010674                            ; Object 14 - lava balls (MZ, SLZ)
00010674                            ; ---------------------------------------------------------------------------
00010674                            
00010674                            LavaBall:
00010674 7000                       		moveq	#0,d0
00010676 1028 0024                  		move.b	obRoutine(a0),d0
0001067A 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0001067E 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010682 6000 F1D4                  		bra.w	DisplaySprite
00010686                            ; ===========================================================================
00010686 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010688 0000                       		dc.w LBall_Action-LBall_Index
0001068A 0000                       		dc.w LBall_Delete-LBall_Index
0001068C                            
0001068C FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010696 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
0001069E                            ; ===========================================================================
0001069E                            
0001069E                            LBall_Main:	; Routine 0
0001069E 5428 0024                  		addq.b	#2,obRoutine(a0)
000106A2 117C 0008 0016             		move.b	#8,obHeight(a0)
000106A8 117C 0008 0017             		move.b	#8,obWidth(a0)
000106AE 217C 0000 D560 0004        		move.l	#Map_Fire,obMap(a0)
000106B6 317C 0345 0002             		move.w	#$345,obGfx(a0)
000106BC 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000106C2 6600                       		bne.s	@notSLZ
000106C4 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000106CA                            
000106CA                            	@notSLZ:
000106CA 117C 0004 0001             		move.b	#4,obRender(a0)
000106D0 317C 0180 0018             		move.w	#$180,obPriority(a0)
000106D6 117C 008B 0020             		move.b	#$8B,obColType(a0)
000106DC 3168 000C 0030             		move.w	obY(a0),$30(a0)
000106E2 4A28 0029                  		tst.b	$29(a0)
000106E6 6700                       		beq.s	@speed
000106E8 5428 0018                  		addq.b	#2,obPriority(a0)
000106EC                            
000106EC                            	@speed:
000106EC 7000                       		moveq	#0,d0
000106EE 1028 0028                  		move.b	obSubtype(a0),d0
000106F2 D040                       		add.w	d0,d0
000106F4 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000106FA 117C 0008 0014             		move.b	#8,obActWid(a0)
00010700 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010706 6500                       		bcs.s	@sound		; if yes, branch
00010708                            
00010708 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001070E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010714 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
0001071A 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010720                            
00010720                            	@sound:
0001072A                            
0001072A                            LBall_Action:	; Routine 2
0001072A 7000                       		moveq	#0,d0
0001072C 1028 0028                  		move.b	obSubtype(a0),d0
00010730 D040                       		add.w	d0,d0
00010732 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010736 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
0001073A 6100 F108                  		bsr.w	SpeedToPos
0001073E 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010744 6100 C1C8                  		bsr.w	AnimateSprite
00010748                            
00010748                            LBall_ChkDel:
00010766 4E75                       		rts	
00010768                            ; ===========================================================================
00010768 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001076C 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010770 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010774 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010778 0000                       		dc.w LBall_Type08-LBall_TypeIndex
0001077A                            ; ===========================================================================
0001077A                            ; lavaball types 00-03 fly up and fall back down
0001077A                            
0001077A                            LBall_Type00:
0001077A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010780 3028 0030                  		move.w	$30(a0),d0
00010784 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010788 6400                       		bcc.s	loc_E41E	; if not, branch
0001078A 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
0001078E                            
0001078E                            loc_E41E:
0001078E 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010794 4A68 0012                  		tst.w	obVelY(a0)
00010798 6A00                       		bpl.s	locret_E430
0001079A 08E8 0001 0022             		bset	#1,obStatus(a0)
000107A0                            
000107A0                            locret_E430:
000107A0 4E75                       		rts	
000107A2                            ; ===========================================================================
000107A2                            ; lavaball type	04 flies up until it hits the ceiling
000107A2                            
000107A2                            LBall_Type04:
000107A2 08E8 0001 0022             		bset	#1,obStatus(a0)
000107A8 4EB9 0000 0000             		jsr	ObjHitCeiling
000107AE 4A41                       		tst.w	d1
000107B0 6A00                       		bpl.s	locret_E452
000107B2 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107B8 117C 0001 001C             		move.b	#1,obAnim(a0)
000107BE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000107C4                            
000107C4                            locret_E452:
000107C4 4E75                       		rts	
000107C6                            ; ===========================================================================
000107C6                            ; lavaball type	05 falls down until it hits the	floor
000107C6                            
000107C6                            LBall_Type05:
000107C6 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107CC 4EB9 0000 0000             		jsr	ObjFloorDist
000107D2 4A41                       		tst.w	d1
000107D4 6A00                       		bpl.s	locret_E474
000107D6 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107DC 117C 0001 001C             		move.b	#1,obAnim(a0)
000107E2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000107E8                            
000107E8                            locret_E474:
000107E8 4E75                       		rts	
000107EA                            ; ===========================================================================
000107EA                            ; lavaball types 06-07 move sideways
000107EA                            
000107EA                            LBall_Type06:
000107EA 08E8 0000 0022             		bset	#0,obStatus(a0)
000107F0 76F8                       		moveq	#-8,d3
000107F2 4EB9 0000 0000             		jsr	ObjHitWallLeft
000107F8 4A41                       		tst.w	d1
000107FA 6A00                       		bpl.s	locret_E498
000107FC 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010802 117C 0003 001C             		move.b	#3,obAnim(a0)
00010808 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0001080E                            
0001080E                            locret_E498:
0001080E 4E75                       		rts	
00010810                            ; ===========================================================================
00010810                            
00010810                            LBall_Type07:
00010810 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010816 7608                       		moveq	#8,d3
00010818 4EB9 0000 0000             		jsr	ObjHitWallRight
0001081E 4A41                       		tst.w	d1
00010820 6A00                       		bpl.s	locret_E4BC
00010822 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010828 117C 0003 001C             		move.b	#3,obAnim(a0)
0001082E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010834                            
00010834                            locret_E4BC:
00010834 4E75                       		rts	
00010836                            ; ===========================================================================
00010836                            
00010836                            LBall_Type08:
00010836 4E75                       		rts	
00010838                            ; ===========================================================================
00010838                            
00010838                            LBall_Delete:
00010838 6000 F05E                  		bra.w	DeleteObject
00010838 6000 F05E                  		bra.w	DeleteObject
0001083C                            		include	"_anim\Fireballs.asm"
0001083C                            ; ---------------------------------------------------------------------------
0001083C                            ; Animation script - lava balls
0001083C                            ; ---------------------------------------------------------------------------
0001083C 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
0001083E 0000                       		dc.w @vertcollide-Ani_Fire
00010840 0000                       		dc.w @horizontal-Ani_Fire
00010842 0000                       		dc.w @horicollide-Ani_Fire
00010844 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001084A 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0001084E 00                         		even
0001084E 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010854 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010858 00                         		even
00010858 00                         		even
00010858                            
00010858                            		include	"_incObj\6D Flamethrower.asm"
00010858                            ; ---------------------------------------------------------------------------
00010858                            ; Object 6D - flame thrower (SBZ)
00010858                            ; ---------------------------------------------------------------------------
00010858                            
00010858                            Flamethrower:
00010858 7000                       		moveq	#0,d0
0001085A 1028 0024                  		move.b	obRoutine(a0),d0
0001085E 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010862 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010866                            ; ===========================================================================
00010866 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010868 0000                       		dc.w Flame_Action-Flame_Index
0001086A                            ; ===========================================================================
0001086A                            
0001086A                            Flame_Main:	; Routine 0
0001086A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001086E 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010876 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0001087C 0028 0004 0001             		ori.b	#4,obRender(a0)
00010882 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010888 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0001088E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010894 1028 0028                  		move.b	obSubtype(a0),d0
00010898 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001089C D040                       		add.w	d0,d0		; multiply by 2
0001089E 3140 0030                  		move.w	d0,$30(a0)
000108A2 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000108A6 1028 0028                  		move.b	obSubtype(a0),d0
000108AA 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000108AE EB48                       		lsl.w	#5,d0		; multiply by $20
000108B0 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000108B4 117C 000A 0036             		move.b	#$A,$36(a0)
000108BA 0828 0001 0022             		btst	#1,obStatus(a0)
000108C0 6700                       		beq.s	Flame_Action
000108C2 117C 0002 001C             		move.b	#2,obAnim(a0)
000108C8 117C 0015 0036             		move.b	#$15,$36(a0)
000108CE                            
000108CE                            Flame_Action:	; Routine 2
000108CE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000108D2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000108D4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000108DA 0868 0000 001C             		bchg	#0,obAnim(a0)
000108E0 6700                       		beq.s	loc_E57A
000108E2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000108F2                            
000108F2                            loc_E57A:
000108F2 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000108F8 6100 C014                  		bsr.w	AnimateSprite
000108FC 117C 0000 0020             		move.b	#0,obColType(a0)
00010902 1028 0036                  		move.b	$36(a0),d0
00010906 B028 001A                  		cmp.b	obFrame(a0),d0
0001090A 6600                       		bne.s	Flame_ChkDel
0001090C 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010912                            
00010912                            Flame_ChkDel:
00010930 6000 EF26                  		bra.w	DisplaySprite
00010930 6000 EF26                  		bra.w	DisplaySprite
00010934                            		include	"_anim\Flamethrower.asm"
00010934                            ; ---------------------------------------------------------------------------
00010934                            ; Animation script - flamethrower (SBZ)
00010934                            ; ---------------------------------------------------------------------------
00010934 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010936 0000                       		dc.w @pipe2-Ani_Flame
00010938 0000                       		dc.w @valve1-Ani_Flame
0001093A 0000                       		dc.w @valve2-Ani_Flame
0001093C 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001094A 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010954 00                         		even
00010954 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010962 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
0001096C 00                         		even
0001096C 00                         		even
0001096C                            Map_Flame:	include	"_maps\Flamethrower.asm"
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            ; Sprite mappings - flame thrower (SBZ)
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            Map_Flame_internal:
0001096C 0000                       		dc.w @pipe1-Map_Flame_internal
0001096E 0000                       		dc.w @pipe2-Map_Flame_internal
00010970 0000                       		dc.w @pipe3-Map_Flame_internal
00010972 0000                       		dc.w @pipe4-Map_Flame_internal
00010974 0000                       		dc.w @pipe5-Map_Flame_internal
00010976 0000                       		dc.w @pipe6-Map_Flame_internal
00010978 0000                       		dc.w @pipe7-Map_Flame_internal
0001097A 0000                       		dc.w @pipe8-Map_Flame_internal
0001097C 0000                       		dc.w @pipe9-Map_Flame_internal
0001097E 0000                       		dc.w @pipe10-Map_Flame_internal
00010980 0000                       		dc.w @pipe11-Map_Flame_internal
00010982 0000                       		dc.w @valve1-Map_Flame_internal
00010984 0000                       		dc.w @valve2-Map_Flame_internal
00010986 0000                       		dc.w @valve3-Map_Flame_internal
00010988 0000                       		dc.w @valve4-Map_Flame_internal
0001098A 0000                       		dc.w @valve5-Map_Flame_internal
0001098C 0000                       		dc.w @valve6-Map_Flame_internal
0001098E 0000                       		dc.w @valve7-Map_Flame_internal
00010990 0000                       		dc.w @valve8-Map_Flame_internal
00010992 0000                       		dc.w @valve9-Map_Flame_internal
00010994 0000                       		dc.w @valve10-Map_Flame_internal
00010996 0000                       		dc.w @valve11-Map_Flame_internal
00010998 01                         @pipe1:		dc.b 1
00010999 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
0001099E 02                         @pipe2:		dc.b 2
0001099F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109A4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109A9 02                         @pipe3:		dc.b 2
000109AA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109AF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109B4 03                         @pipe4:		dc.b 3
000109B5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109BA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109BF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C4 03                         @pipe5:		dc.b 3
000109C5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109CA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109CF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109D4 04                         @pipe6:		dc.b 4
000109D5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109DA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109DF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109E4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109E9 04                         @pipe7:		dc.b 4
000109EA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109EF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109F4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109F9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109FE 05                         @pipe8:		dc.b 5
000109FF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A04 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A09 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A0E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A13 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A18 05                         @pipe9:		dc.b 5
00010A19 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A1E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A23 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A28 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A2D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A32 06                         @pipe10:	dc.b 6
00010A33 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A38 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A3D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A42 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A47 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A4C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A51 06                         @pipe11:	dc.b 6
00010A52 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A57 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A5C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A61 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A66 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A6B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A70 01                         @valve1:	dc.b 1
00010A71 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010A76 02                         @valve2:	dc.b 2
00010A77 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A7C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A81 02                         @valve3:	dc.b 2
00010A82 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A87 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A8C 03                         @valve4:	dc.b 3
00010A8D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A92 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A97 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A9C 03                         @valve5:	dc.b 3
00010A9D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AA2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AA7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AAC 04                         @valve6:	dc.b 4
00010AAD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AB2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AB7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010ABC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AC1 04                         @valve7:	dc.b 4
00010AC2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AC7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010ACC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AD1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AD6 05                         @valve8:	dc.b 5
00010AD7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010ADC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AE1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AE6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AEB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AF0 05                         @valve9:	dc.b 5
00010AF1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010AF6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AFB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B00 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B05 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B0A 06                         @valve10:	dc.b 6
00010B0B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010B10 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010B15 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B1A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010B1F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B24 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B29 06                         @valve11:	dc.b 6
00010B2A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B2F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B34 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B39 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B3E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B43 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B48                            		even
00010B48                            		even
00010B48                            
00010B48                            		include	"_incObj\46 MZ Bricks.asm"
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            
00010B48                            MarbleBrick:
00010B48 7000                       		moveq	#0,d0
00010B4A 1028 0024                  		move.b	obRoutine(a0),d0
00010B4E 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010B52 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010B56                            ; ===========================================================================
00010B56 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010B58 0000                       		dc.w Brick_Action-Brick_Index
00010B5A                            
00010B5A =00000030                  brick_origY:	equ $30
00010B5A                            ; ===========================================================================
00010B5A                            
00010B5A                            Brick_Main:	; Routine 0
00010B5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B5E 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010B64 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010B6A 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010B72 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010B78 117C 0004 0001             		move.b	#4,obRender(a0)
00010B7E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010B84 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B8A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B90 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010B96                            
00010B96                            Brick_Action:	; Routine 2
00010B96 4A28 0001                  		tst.b	obRender(a0)
00010B9A 6A00                       		bpl.s	@chkdel
00010B9C 7000                       		moveq	#0,d0
00010B9E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010BA2 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010BA6 D040                       		add.w	d0,d0
00010BA8 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010BAC 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010BB0 323C 001B                  		move.w	#$1B,d1
00010BB4 343C 0010                  		move.w	#$10,d2
00010BB8 363C 0011                  		move.w	#$11,d3
00010BBC 3828 0008                  		move.w	obX(a0),d4
00010BC0 6100 0000                  		bsr.w	SolidObject
00010BC4                            
00010BC4                            	@chkdel:
00010BE2 6000 EC74                  			bra.w	DisplaySprite
00010BE6                            ; ===========================================================================
00010BE6 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010BE8 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010BEA 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010BEC 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010BEE 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010BF0                            ; ===========================================================================
00010BF0                            
00010BF0                            Brick_Type00:
00010BF0 4E75                       		rts	
00010BF2                            ; ===========================================================================
00010BF2                            
00010BF2                            Brick_Type02:
00010BF2 3038 D008                  		move.w	(v_player+obX).w,d0
00010BF6 9068 0008                  		sub.w	obX(a0),d0
00010BFA 6400                       		bcc.s	loc_E888
00010BFC 4440                       		neg.w	d0
00010BFE                            
00010BFE                            loc_E888:
00010BFE 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010C02 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010C04 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010C0A                            
00010C0A                            Brick_Type01:
00010C0A 7000                       		moveq	#0,d0
00010C0C 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010C10 0828 0003 0028             		btst	#3,obSubtype(a0)
00010C16 6700                       		beq.s	loc_E8A8
00010C18 4440                       		neg.w	d0
00010C1A 0640 0010                  		addi.w	#$10,d0
00010C1E                            
00010C1E                            loc_E8A8:
00010C1E 3228 0030                  		move.w	brick_origY(a0),d1
00010C22 9240                       		sub.w	d0,d1
00010C24 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010C28 4E75                       		rts	
00010C2A                            ; ===========================================================================
00010C2A                            
00010C2A                            Brick_Type03:
00010C2A 6100 EC18                  		bsr.w	SpeedToPos
00010C2E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010C34 6100 0000                  		bsr.w	ObjFloorDist
00010C38 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010C3A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010C3E D368 000C                  		add.w	d1,obY(a0)
00010C42 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010C46 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010C4C 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010C52 3011                       		move.w	(a1),d0
00010C54 0240 03FF                  		andi.w	#$3FF,d0
00010C58 0C40 016A                  			cmpi.w	#$16A,d0
00010C5C 6400                       		bcc.s	locret_E8EE
00010C5E 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010C64                            
00010C64                            locret_E8EE:
00010C64 4E75                       		rts	
00010C66                            ; ===========================================================================
00010C66                            
00010C66                            Brick_Type04:
00010C66 7000                       		moveq	#0,d0
00010C68 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010C6C E648                       		lsr.w	#3,d0
00010C6E 3228 0030                  		move.w	brick_origY(a0),d1
00010C72 9240                       		sub.w	d0,d1
00010C74 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010C78 4E75                       		rts	
00010C78 4E75                       		rts	
00010C7A                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010C7A                            ; ---------------------------------------------------------------------------
00010C7A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010C7A                            ; ---------------------------------------------------------------------------
00010C7A                            Map_Brick_internal:
00010C7A 0000                       		dc.w @brick-Map_Brick_internal
00010C7C 01                         @brick:		dc.b 1
00010C7D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010C82                            		even
00010C82                            		even
00010C82                            
00010C82                            		include	"_incObj\12 Light.asm"
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            ; Object 12 - lamp (SYZ)
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            
00010C82                            SpinningLight:
00010C82 7000                       		moveq	#0,d0
00010C84 1028 0024                  		move.b	obRoutine(a0),d0
00010C88 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010C8C 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010C90                            ; ===========================================================================
00010C90 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010C92 0000                       		dc.w Light_Animate-Light_Index
00010C94                            ; ===========================================================================
00010C94                            
00010C94                            Light_Main:	; Routine 0
00010C94 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C98 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010CA0 317C 0000 0002             		move.w	#0,obGfx(a0)
00010CA6 117C 0004 0001             		move.b	#4,obRender(a0)
00010CAC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CB2 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010CB8                            
00010CB8                            Light_Animate:	; Routine 2
00010CB8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010CBC 6A00                       		bpl.s	@chkdel
00010CBE 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010CC4 5228 001A                  		addq.b	#1,obFrame(a0)
00010CC8 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010CCE 6500                       		bcs.s	@chkdel
00010CD0 117C 0000 001A             		move.b	#0,obFrame(a0)
00010CD6                            
00010CD6                            	@chkdel:
00010CF4 6000 EB62                  		bra.w	DisplaySprite
00010CF4 6000 EB62                  		bra.w	DisplaySprite
00010CF8                            Map_Light	include	"_maps\Light.asm"
00010CF8                            ; --------------------------------------------------------------------------------
00010CF8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010CF8                            ; --------------------------------------------------------------------------------
00010CF8                            
00010CF8                            SME_FBl1X:	
00010CF8 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010CFC 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010D00 05                         SME_FBl1X_8:	dc.b 5	
00010D01 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010D06 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010D0B F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010D10 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010D15 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D1A 05                         SME_FBl1X_22:	dc.b 5	
00010D1B E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010D20 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010D25 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010D2A F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010D2F F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010D34 06                         SME_FBl1X_3C:	dc.b 6	
00010D35 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010D3A E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010D3F E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010D44 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010D49 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010D4E F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010D53 05                         SME_FBl1X_5B:	dc.b 5	
00010D54 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010D59 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010D5E F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010D63 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010D68 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D6E 00                         		even
00010D6E 00                         		even
00010D6E                            		include	"_incObj\47 Bumper.asm"
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E                            ; Object 47 - pinball bumper (SYZ)
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E                            
00010D6E                            Bumper:
00010D6E 7000                       		moveq	#0,d0
00010D70 1028 0024                  		move.b	obRoutine(a0),d0
00010D74 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010D78 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010D7C                            ; ===========================================================================
00010D7C 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010D7E 0000                       		dc.w Bump_Hit-Bump_Index
00010D80                            ; ===========================================================================
00010D80                            
00010D80                            Bump_Main:	; Routine 0
00010D80 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D84 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010D8C 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010D92 117C 0004 0001             		move.b	#4,obRender(a0)
00010D98 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010D9E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DA4 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010DAA                            
00010DAA                            Bump_Hit:	; Routine 2
00010DAA 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010DAE 6700 0000                  		beq.w	@display	; if not, branch
00010DB2 4228 0021                  		clr.b	obColProp(a0)
00010DB6 43F8 D000                  		lea	(v_player).w,a1
00010DBA 3228 0008                  		move.w	obX(a0),d1
00010DBE 3428 000C                  		move.w	obY(a0),d2
00010DC2 9269 0008                  		sub.w	obX(a1),d1
00010DC6 9469 000C                  		sub.w	obY(a1),d2
00010DCA 4EB9 0000 3FBA             		jsr	(CalcAngle).l
00010DD0 4EB9 0000 3D28             		jsr	(CalcSine).l
00010DD6 C3FC F900                  		muls.w	#-$700,d1
00010DDA E081                       		asr.l	#8,d1
00010DDC 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010DE0 C1FC F900                  		muls.w	#-$700,d0
00010DE4 E080                       		asr.l	#8,d0
00010DE6 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010DEA 08E9 0001 0022             		bset	#1,obStatus(a1)
00010DF0 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010DF6 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010DFC 4229 003C                  		clr.b	$3C(a1)
00010E00 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010E10 45F8 FC00                  		lea	(v_objstate).w,a2
00010E14 7000                       		moveq	#0,d0
00010E16 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E1A 6700                       		beq.s	@addscore
00010E1C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010E22 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010E24 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010E28                            
00010E28                            	@addscore:
00010E28 7001                       		moveq	#1,d0
00010E2A 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010E30 6100 EFC0                  		bsr.w	FindFreeObj
00010E34 6600                       		bne.s	@display
00010E36 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010E3A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E40 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E46 137C 0004 001A             		move.b	#4,obFrame(a1)
00010E4C                            
00010E4C                            	@display:
00010E4C 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010E52 6100 BABA                  		bsr.w	AnimateSprite
00010E72 6000 E9E4                  		bra.w	DisplaySprite
00010E76                            ; ===========================================================================
00010E76                            
00010E76                            @resetcount:
00010E76 45F8 FC00                  		lea	(v_objstate).w,a2
00010E7A 7000                       		moveq	#0,d0
00010E7C 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E80 6700                       		beq.s	@delete
00010E82 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E88                            
00010E88                            	@delete:
00010E88 6000 EA0E                  		bra.w	DeleteObject
00010E88 6000 EA0E                  		bra.w	DeleteObject
00010E8C                            		include	"_anim\Bumper.asm"
00010E8C                            ; ---------------------------------------------------------------------------
00010E8C                            ; Animation script - flamethrower (SBZ)
00010E8C                            ; ---------------------------------------------------------------------------
00010E8C 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010E8E 0000                       		dc.w byte_EAF8-Ani_Bump
00010E90 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010E94 00                         		even
00010E94 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010E9C 00                         		even
00010E9C 00                         		even
00010E9C                            Map_Bump:	include	"_maps\Bumper.asm"
00010E9C                            ; ---------------------------------------------------------------------------
00010E9C                            ; Sprite mappings - pinball bumper (SYZ)
00010E9C                            ; ---------------------------------------------------------------------------
00010E9C                            Map_Bump_internal:
00010E9C 0000                       		dc.w @normal-Map_Bump_internal
00010E9E 0000                       		dc.w @bumped1-Map_Bump_internal
00010EA0 0000                       		dc.w @bumped2-Map_Bump_internal
00010EA2 02                         @normal:	dc.b 2
00010EA3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010EA8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010EAD 02                         @bumped1:	dc.b 2
00010EAE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010EB3 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010EB8 02                         @bumped2:	dc.b 2
00010EB9 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010EBE F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010EC4 00                         		even
00010EC4 00                         		even
00010EC4                            
00010EC4                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4                            ; Object 0D - signpost at the end of a level
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4                            
00010EC4                            Signpost:
00010EC4 7000                       		moveq	#0,d0
00010EC6 1028 0024                  		move.b	obRoutine(a0),d0
00010ECA 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010ECE 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010ED2 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010ED8 6100 BA34                  		bsr.w	AnimateSprite
00010EDC 6100 E97A                  		bsr.w	DisplaySprite
00010EFE 4E75                       		rts	
00010F00                            ; ===========================================================================
00010F00 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010F02 0000                       		dc.w Sign_Touch-Sign_Index
00010F04 0000                       		dc.w Sign_Spin-Sign_Index
00010F06 0000                       		dc.w Sign_SonicRun-Sign_Index
00010F08 0000                       		dc.w Sign_Exit-Sign_Index
00010F0A                            
00010F0A =00000030                  spintime:	equ $30		; time for signpost to spin
00010F0A =00000032                  sparkletime:	equ $32		; time between sparkles
00010F0A =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010F0A                            ; ===========================================================================
00010F0A                            
00010F0A                            Sign_Main:	; Routine 0
00010F0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F0E 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010F16 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010F1C 117C 0004 0001             		move.b	#4,obRender(a0)
00010F22 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010F28 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010F2E                            
00010F2E                            Sign_Touch:	; Routine 2
00010F2E 3038 D008                  		move.w	(v_player+obX).w,d0
00010F32 9068 0008                  		sub.w	obX(a0),d0
00010F36 6500                       		bcs.s	@notouch
00010F38 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010F3C 6400                       		bcc.s	@notouch	; if not, branch
00010F3E 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010F4E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F52 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010F58 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F5C                            		;cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010F5C                            		;beq.s	@normal
00010F5C                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F5C                            
00010F5C                            	@normal:
00010F5C 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010F60 6700                       		beq.s	@notouch
00010F62 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010F70                            
00010F70                            	@notouch:
00010F70 4E75                       		rts	
00010F72                            	
00010F72                            ; ===========================================================================
00010F72                            
00010F72                            Sign_Spin:	; Routine 4
00010F72 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
00010F76 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
00010F7C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00010F82 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00010F88 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010F8C 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010F8E 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010F94 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010F98 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010F9E 6600                       		bne.s	@chksparkle	; if not, branch
00010FA0 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FA4                            
00010FA4                            	@chksparkle:
00010FA4 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010FA8 6A00                       		bpl.s	@fail		; if time remains, branch
00010FAA 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010FB0 7000                       		moveq	#0,d0
00010FB2 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010FB6 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010FBA 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010FC0 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010FC4 6100 EE2C                  		bsr.w	FindFreeObj
00010FC8 6600                       		bne.s	@fail
00010FCA 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010FCE 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010FD4 101A                       		move.b	(a2)+,d0
00010FD6 4880                       		ext.w	d0
00010FD8 D068 0008                  		add.w	obX(a0),d0
00010FDC 3340 0008                  		move.w	d0,obX(a1)
00010FE0 101A                       		move.b	(a2)+,d0
00010FE2 4880                       		ext.w	d0
00010FE4 D068 000C                  		add.w	obY(a0),d0
00010FE8 3340 000C                  		move.w	d0,obY(a1)
00010FEC 237C 0000 BE5A 0004        		move.l	#Map_Ring,obMap(a1)
00010FF4 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010FFA 137C 0004 0001             		move.b	#4,obRender(a1)
00011000 337C 0100 0018             		move.w	#$100,obPriority(a1)
00011006 137C 0008 0014             		move.b	#8,obActWid(a1)
0001100C                            
0001100C                            	@fail:
0001100C 4E75                       		rts	
0001100E                            ; ===========================================================================
0001100E E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00011010 0808                       		dc.b	8,   8
00011012 F000                       		dc.b -$10,   0
00011014 18F8                       		dc.b  $18,  -8
00011016 00F8                       		dc.b	0,  -8
00011018 1000                       		dc.b  $10,   0
0001101A E808                       		dc.b -$18,   8
0001101C 1810                       		dc.b  $18, $10
0001101E                            ; ===========================================================================
0001101E                            
0001101E                            Sign_SonicRun:	; Routine 6
0001101E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00011022 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00011026                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00011026                            		
00011026                            
00011026                            	loc_EC86:
00011026 5428 0024                  		addq.b	#2,obRoutine(a0)
0001102A                            
0001102A                            ; ---------------------------------------------------------------------------
0001102A                            ; Subroutine to	set up bonuses at the end of an	act
0001102A                            ; ---------------------------------------------------------------------------
0001102A                            
0001102A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001102A                            
0001102A                            
0001102A                            GotThroughAct:
0001102A 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
0001102E 6600                       		bne.s	locret_ECEE
00011030 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011036 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
0001103A 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
0001103E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011042 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00011048 7000                       		moveq	#plcid_TitleCard,d0
0001104A 4EB9 0000 17CA             		jsr	(NewPLC).l	; load title card patterns
00011050 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011056 7000                       		moveq	#0,d0
00011058 1038 FE23                  		move.b	(v_timemin).w,d0
0001105C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011060 7200                       		moveq	#0,d1
00011062 1238 FE24                  		move.b	(v_timesec).w,d1
00011066 D041                       		add.w	d1,d0		; add up your time
00011068 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001106C 7214                       		moveq	#$14,d1
0001106E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011070 6500                       		bcs.s	hastimebonus	; if not, branch
00011072 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011074                            
00011074                            	hastimebonus:
00011074 D040                       		add.w	d0,d0
00011076 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
0001107C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011080 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011084 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011092 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00011098                            
00011098                            locret_ECEE:
00011098 4E75                       		rts	
0001109A                            
0001109A                            ; End of function GotThroughAct
0001109A                            
0001109A                            ; ===========================================================================
0001109A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000110AE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110C4                            ; ===========================================================================
000110C4                            
000110C4                            Sign_Exit:	; Routine 8
000110C4 4E75                       		rts	
000110C6                            
000110C6                            ; ---------------------------------------------------------------------------
000110C6                            ; Subroutine to	set up bonuses at the end of an	zone
000110C6                            ; ---------------------------------------------------------------------------
000110C6                            
000110C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110C6                            
000110C6                            
000110C6                            GotThroughAct1:
000110C6 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000110CA 6600                       		bne.s	locret_ECEE1
000110CC 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000110D2 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000110D6 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000110DA 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000110DE 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000110E4 7000                       		moveq	#plcid_TitleCard,d0
000110E6 4EB9 0000 17CA             		jsr	(NewPLC).l	; load title card patterns
000110EC 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000110F2 7000                       		moveq	#0,d0
000110F4 1038 FE23                  		move.b	(v_timemin).w,d0
000110F8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000110FC 7200                       		moveq	#0,d1
000110FE 1238 FE24                  		move.b	(v_timesec).w,d1
00011102 D041                       		add.w	d1,d0		; add up your time
00011104 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011108 7214                       		moveq	#$14,d1
0001110A B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0001110C 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00011110 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011112                            
00011112                            	hastimebonus2:
00011112 D040                       		add.w	d0,d0
00011114 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
0001111A 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
0001111E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011122 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011130 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00011136                            
00011136                            locret_ECEE1:
00011136 4E75                       		rts	
00011138                            
00011138                            ; End of function GotThroughAct		
00011138                            
00011138 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001114C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001114C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011162                            		include	"_anim\Signpost.asm"
00011162                            ; ---------------------------------------------------------------------------
00011162                            ; Animation script - signpost
00011162                            ; ---------------------------------------------------------------------------
00011162 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00011164 0000                       		dc.w @spin1-Ani_Sign
00011166 0000                       		dc.w @spin2-Ani_Sign
00011168 0000                       		dc.w @sonic-Ani_Sign
0001116A 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
0001116E 00                         		even
0001116E 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00011174 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
0001117A 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
0001117E 00                         		even
0001117E 00                         		even
0001117E                            Map_Sign:	include	"_maps\Signpost.asm"
0001117E                            ; --------------------------------------------------------------------------------
0001117E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001117E                            ; --------------------------------------------------------------------------------
0001117E                            
0001117E                            SME_KvSue:	
0001117E 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011182 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00011186 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00011188 04                         SME_KvSue_A:	dc.b 4	
00011189 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
0001118E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011193 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011198 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001119D 03                         SME_KvSue_1F:	dc.b 3	
0001119E F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
000111A3 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000111A8 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111AD 03                         SME_KvSue_2F:	dc.b 3	
000111AE F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
000111B3 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111B8 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111BD 03                         SME_KvSue_3F:	dc.b 3	
000111BE F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
000111C3 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111C8 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111CD 04                         SME_KvSue_4F:	dc.b 4	
000111CE F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000111D3 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000111D8 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000111DD 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111E2                            		even
000111E2                            		even
000111E2                            
000111E2                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000111E2                            ; ---------------------------------------------------------------------------
000111E2                            ; Object 4C - lava geyser / lavafall producer (MZ)
000111E2                            ; ---------------------------------------------------------------------------
000111E2                            
000111E2                            GeyserMaker:
000111E2 7000                       		moveq	#0,d0
000111E4 1028 0024                  		move.b	obRoutine(a0),d0
000111E8 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000111EC 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000111F0 6000 0000                  		bra.w	Geyser_ChkDel
000111F4                            ; ===========================================================================
000111F4 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000111F6 0000                       		dc.w GMake_Wait-GMake_Index
000111F8 0000                       		dc.w GMake_ChkType-GMake_Index
000111FA 0000                       		dc.w GMake_MakeLava-GMake_Index
000111FC 0000                       		dc.w GMake_Display-GMake_Index
000111FE 0000                       		dc.w GMake_Delete-GMake_Index
00011200                            
00011200 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00011200 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00011200 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00011200                            ; ===========================================================================
00011200                            
00011200                            GMake_Main:	; Routine 0
00011200 5428 0024                  		addq.b	#2,obRoutine(a0)
00011204 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
0001120C 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00011212 117C 0004 0001             		move.b	#4,obRender(a0)
00011218 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001121E 117C 0038 0014             		move.b	#$38,obActWid(a0)
00011224 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0001122A                            
0001122A                            GMake_Wait:	; Routine 2
0001122A 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
0001122E 6A00                       		bpl.s	@cancel		; if time remains, branch
00011230                            
00011230 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00011236 3038 D00C                  		move.w	(v_player+obY).w,d0
0001123A 3228 000C                  		move.w	obY(a0),d1
0001123E B041                       		cmp.w	d1,d0
00011240 6400                       		bcc.s	@cancel
00011242 0441 0170                  		subi.w	#$170,d1
00011246 B041                       		cmp.w	d1,d0
00011248 6500                       		bcs.s	@cancel
0001124A 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
0001124E                            
0001124E                            	@cancel:
0001124E 4E75                       		rts	
00011250                            ; ===========================================================================
00011250                            
00011250                            GMake_MakeLava:	; Routine 6
00011250 5428 0024                  		addq.b	#2,obRoutine(a0)
00011254 6100 EBB2                  		bsr.w	FindNextFreeObj
00011258 6600                       		bne.s	@fail
0001125A 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
0001125E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011264 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001126A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011270 2348 003C                  		move.l	a0,gmake_parent(a1)
00011274                            
00011274                            	@fail:
00011274 117C 0001 001C             		move.b	#1,obAnim(a0)
0001127A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
0001127E 6700                       		beq.s	@isgeyser	; if yes, branch
00011280 117C 0004 001C             		move.b	#4,obAnim(a0)
00011286 6000                       		bra.s	GMake_Display
00011288                            ; ===========================================================================
00011288                            
00011288                            	@isgeyser:
00011288 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
0001128C 08E9 0001 0022             		bset	#1,obStatus(a1)
00011292 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00011298 6000                       		bra.s	GMake_Display
0001129A                            ; ===========================================================================
0001129A                            
0001129A                            GMake_ChkType:	; Routine 4
0001129A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
0001129E 6700                       		beq.s	GMake_Display	; if yes, branch
000112A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000112A4 4E75                       		rts	
000112A6                            ; ===========================================================================
000112A6                            
000112A6                            GMake_Display:	; Routine 8
000112A6 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000112AC 6100 B660                  		bsr.w	AnimateSprite
000112B0 6100 E5A6                  		bsr.w	DisplaySprite
000112B4 4E75                       		rts	
000112B6                            ; ===========================================================================
000112B6                            
000112B6                            GMake_Delete:	; Routine $A
000112B6 117C 0000 001C             		move.b	#0,obAnim(a0)
000112BC 117C 0002 0024             		move.b	#2,obRoutine(a0)
000112C2 4A28 0028                  		tst.b	obSubtype(a0)
000112C6 6700 E5D0                  		beq.w	DeleteObject
000112CA 4E75                       		rts	
000112CC                            
000112CC                            
000112CC                            ; ---------------------------------------------------------------------------
000112CC                            ; Object 4D - lava geyser / lavafall (MZ)
000112CC                            ; ---------------------------------------------------------------------------
000112CC                            
000112CC                            LavaGeyser:
000112CC 7000                       		moveq	#0,d0
000112CE 1028 0024                  		move.b	obRoutine(a0),d0
000112D2 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000112D6 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000112DA 6000 E57C                  		bra.w	DisplaySprite
000112DE                            ; ===========================================================================
000112DE 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000112E0 0000                       		dc.w Geyser_Action-Geyser_Index
000112E2 0000                       		dc.w loc_EFFC-Geyser_Index
000112E4 0000                       		dc.w Geyser_Delete-Geyser_Index
000112E6                            
000112E6 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000112EA                            ; ===========================================================================
000112EA                            
000112EA                            Geyser_Main:	; Routine 0
000112EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000112EE 3168 000C 0030             		move.w	obY(a0),$30(a0)
000112F4 4A28 0028                  		tst.b	obSubtype(a0)
000112F8 6700                       		beq.s	@isgeyser
000112FA 0468 0250 000C             		subi.w	#$250,obY(a0)
00011300                            
00011300                            	@isgeyser:
00011300 7000                       		moveq	#0,d0
00011302 1028 0028                  		move.b	obSubtype(a0),d0
00011306 D040                       		add.w	d0,d0
00011308 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
0001130E 2248                       		movea.l	a0,a1
00011310 7201                       		moveq	#1,d1
00011312 6100                       		bsr.s	@makelava
00011314 6000                       		bra.s	@activate
00011316                            ; ===========================================================================
00011316                            
00011316                            	@loop:
00011316 6100 EAF0                  		bsr.w	FindNextFreeObj
0001131A 6600                       		bne.s	@fail
0001131C                            
0001131C                            @makelava:
0001131C 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011320 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00011328 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
0001132E 137C 0004 0001             		move.b	#4,obRender(a1)
00011334 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001133A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011340 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011346 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001134C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011352 137C 0005 001C             		move.b	#5,obAnim(a1)
00011358 4A28 0028                  		tst.b	obSubtype(a0)
0001135C 6700                       		beq.s	@fail
0001135E 137C 0002 001C             		move.b	#2,obAnim(a1)
00011364                            
00011364                            	@fail:
00011364 51C9 FFB0                  		dbf	d1,@loop
00011368 4E75                       		rts	
0001136A                            ; ===========================================================================
0001136A                            
0001136A                            @activate:
0001136A 0669 0060 000C             		addi.w	#$60,obY(a1)
00011370 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011376 0669 0060 0030             		addi.w	#$60,$30(a1)
0001137C 137C 0093 0020             		move.b	#$93,obColType(a1)
00011382 137C 0080 0016             		move.b	#$80,obHeight(a1)
00011388 08E9 0004 0001             		bset	#4,obRender(a1)
0001138E 5829 0024                  		addq.b	#4,obRoutine(a1)
00011392 2348 003C                  		move.l	a0,$3C(a1)
00011396 4A28 0028                  		tst.b	obSubtype(a0)
0001139A 6700                       		beq.s	@sound
0001139C 7200                       		moveq	#0,d1
0001139E 6100 FF76                  		bsr.w	@loop
000113A2 5429 0024                  		addq.b	#2,obRoutine(a1)
000113A6 08E9 0004 0002             		bset	#4,obGfx(a1)
000113AC 0669 0100 000C             		addi.w	#$100,obY(a1)
000113B2 337C 0000 0018             		move.w	#0,obPriority(a1)
000113B8 3368 0030 0030             		move.w	$30(a0),$30(a1)
000113BE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000113C4 117C 0000 0028             		move.b	#0,obSubtype(a0)
000113CA                            
000113CA                            	@sound:
000113D4                            
000113D4                            Geyser_Action:	; Routine 2
000113D4 7000                       		moveq	#0,d0
000113D6 1028 0028                  		move.b	obSubtype(a0),d0
000113DA D040                       		add.w	d0,d0
000113DC 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000113E0 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000113E4 6100 E45E                  		bsr.w	SpeedToPos
000113E8 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000113EE 6100 B51E                  		bsr.w	AnimateSprite
000113F2                            
000113F2                            Geyser_ChkDel:
00011410 4E75                       		rts	
00011412                            ; ===========================================================================
00011412 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011414 0000                       		dc.w Geyser_Type01-Geyser_Types
00011416                            ; ===========================================================================
00011416                            
00011416                            Geyser_Type00:
00011416 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001141C 3028 0030                  		move.w	$30(a0),d0
00011420 B068 000C                  		cmp.w	obY(a0),d0
00011424 6400                       		bcc.s	locret_EFDA
00011426 5828 0024                  		addq.b	#4,obRoutine(a0)
0001142A 2268 003C                  		movea.l	$3C(a0),a1
0001142E 137C 0003 001C             		move.b	#3,obAnim(a1)
00011434                            
00011434                            locret_EFDA:
00011434 4E75                       		rts	
00011436                            ; ===========================================================================
00011436                            
00011436                            Geyser_Type01:
00011436 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001143C 3028 0030                  		move.w	$30(a0),d0
00011440 B068 000C                  		cmp.w	obY(a0),d0
00011444 6400                       		bcc.s	locret_EFFA
00011446 5828 0024                  		addq.b	#4,obRoutine(a0)
0001144A 2268 003C                  		movea.l	$3C(a0),a1
0001144E 137C 0001 001C             		move.b	#1,obAnim(a1)
00011454                            
00011454                            locret_EFFA:
00011454 4E75                       		rts	
00011456                            ; ===========================================================================
00011456                            
00011456                            loc_EFFC:	; Routine 4
00011456 2268 003C                  		movea.l	$3C(a0),a1
0001145A 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011460 6700 0000                  		beq.w	Geyser_Delete
00011464 3029 000C                  		move.w	obY(a1),d0
00011468 0640 0060                  		addi.w	#$60,d0
0001146C 3140 000C                  		move.w	d0,obY(a0)
00011470 9068 0030                  		sub.w	$30(a0),d0
00011474 4440                       		neg.w	d0
00011476 7208                       		moveq	#8,d1
00011478 0C40 0040                  		cmpi.w	#$40,d0
0001147C 6C00                       		bge.s	loc_F026
0001147E 720B                       		moveq	#$B,d1
00011480                            
00011480                            loc_F026:
00011480 0C40 0080                  		cmpi.w	#$80,d0
00011484 6F00                       		ble.s	loc_F02E
00011486 720E                       		moveq	#$E,d1
00011488                            
00011488                            loc_F02E:
00011488 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001148C 6A00                       		bpl.s	loc_F04C
0001148E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011494 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011498 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
0001149E 6500                       		bcs.s	loc_F04C
000114A0 117C 0000 001B             		move.b	#0,obAniFrame(a0)
000114A6                            
000114A6                            loc_F04C:
000114A6 1028 001B                  		move.b	obAniFrame(a0),d0
000114AA D001                       		add.b	d1,d0
000114AC 1140 001A                  		move.b	d0,obFrame(a0)
000114B0 6000 FF40                  		bra.w	Geyser_ChkDel
000114B4                            ; ===========================================================================
000114B4                            
000114B4                            Geyser_Delete:	; Routine 6
000114B4 6000 E3E2                  		bra.w	DeleteObject
000114B4 6000 E3E2                  		bra.w	DeleteObject
000114B8                            		include	"_incObj\54 Lava Tag.asm"
000114B8                            ; ---------------------------------------------------------------------------
000114B8                            ; Object 54 - invisible	lava tag (MZ)
000114B8                            ; ---------------------------------------------------------------------------
000114B8                            
000114B8                            LavaTag:
000114B8 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000114BE 6E00 0000                  		bgt	WaterTag	;TIS
000114C2 7000                       		moveq	#0,d0
000114C4 1028 0024                  		move.b	obRoutine(a0),d0
000114C8 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000114CC 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000114D0                            ; ===========================================================================
000114D0 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000114D2 0000                       		dc.w LTag_ChkDel-LTag_Index
000114D4                            
000114D4 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000114D8 00                         		even
000114D8                            ; ===========================================================================
000114D8                            
000114D8                            LTag_Main:	; Routine 0
000114D8 5428 0024                  		addq.b	#2,obRoutine(a0)
000114DC 7000                       		moveq	#0,d0
000114DE 1028 0028                  		move.b	obSubtype(a0),d0
000114E2 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000114E8 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000114F0 117C 0084 0001             		move.b	#$84,obRender(a0)
000114F6                            
000114F6                            LTag_ChkDel:	; Routine 2
000114F6 3028 0008                  		move.w	obX(a0),d0
000114FA 0240 FF80                  		andi.w	#$FF80,d0
000114FE 3238 F700                  		move.w	(v_screenposx).w,d1
00011502 0441 0080                  		subi.w	#$80,d1
00011506 0241 FF80                  		andi.w	#$FF80,d1
0001150A 9041                       		sub.w	d1,d0
0001150C 6B00 E38A                  		bmi.w	DeleteObject
00011510 0C40 0280                  		cmpi.w	#$280,d0
00011514 6200 E382                  		bhi.w	DeleteObject
00011518 4E75                       		rts
0001151A                            
0001151A                            
0001151A                            ; ---------------------------------------------------------------------------
0001151A                            ; Object 54a - invisible	water tag (MZ) - TIS
0001151A                            ; ---------------------------------------------------------------------------
0001151A                            
0001151A                            WaterTag:	
0001151A 7000                       		moveq	#0,d0
0001151C 1028 0024                  		move.b	obRoutine(a0),d0
00011520 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011524 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
00011528                            ; ===========================================================================
00011528 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001152A 0000                       		dc.w WTag_ChkDel-WTag_Index
0001152C                            
0001152C 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011530 00                         		even
00011530                            ; ===========================================================================
00011530                            
00011530                            
00011530                            WTag_Main:	; Routine 0
00011530 5428 0024                  		addq.b	#2,obRoutine(a0)
00011534 7000                       		moveq	#0,d0
00011536                            		;move.b	obSubtype(a0),d0
00011536                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011536 0400 00F0                  		sub.b	#$F0,d0
0001153A 1178 0096 0020             		move.b	$96,obColType(a0)							
00011540                            		;move.l	#Map_LTag,obMap(a0)
00011540                            		;move.b	#$84,obRender(a0)
00011540                            
00011540                            WTag_ChkDel:	; Routine 2
00011540 3028 0008                  		move.w	obX(a0),d0
00011544 0240 FF80                  		andi.w	#$FF80,d0
00011548 3238 F700                  		move.w	(v_screenposx).w,d1
0001154C 0441 0080                  		subi.w	#$80,d1
00011550 0241 FF80                  		andi.w	#$FF80,d1
00011554 9041                       		sub.w	d1,d0
00011556 6B00 E340                  		bmi.w	DeleteObject
0001155A 0C40 0280                  		cmpi.w	#$280,d0
0001155E 6200 E338                  		bhi.w	DeleteObject
00011562 4E75                       		rts
00011564                            
00011564                            
00011564                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011564                            ; ---------------------------------------------------------------------------
00011564                            ; Sprite mappings - invisible lava tag (MZ)
00011564                            ; ---------------------------------------------------------------------------
00011564                            Map_LTag_internal:
00011564 0000                       		dc.w @0-Map_LTag_internal
00011566 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011568 00                         		even
00011568 00                         		even
00011568                            		include	"_anim\Lava Geyser.asm"
00011568                            ; ---------------------------------------------------------------------------
00011568                            ; Animation script - geyser of lava (MZ)
00011568                            ; ---------------------------------------------------------------------------
00011568 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0001156A 0000                       		dc.w @bubble2-Ani_Geyser
0001156C 0000                       		dc.w @end-Ani_Geyser
0001156E 0000                       		dc.w @bubble3-Ani_Geyser
00011570 0000                       		dc.w @blank-Ani_Geyser
00011572 0000                       		dc.w @bubble4-Ani_Geyser
00011574 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
0001157E 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011582 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011586 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
0001158E 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011592 00                         		even
00011592 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011596                            		even
00011596                            		even
00011596                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011596                            ; ---------------------------------------------------------------------------
00011596                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011596                            ; ---------------------------------------------------------------------------
00011596                            Map_Geyser_internal:
00011596 0000                       		dc.w @bubble1-Map_Geyser_internal
00011598 0000                       		dc.w @bubble2-Map_Geyser_internal
0001159A 0000                       		dc.w @bubble3-Map_Geyser_internal
0001159C 0000                       		dc.w @bubble4-Map_Geyser_internal
0001159E 0000                       		dc.w @bubble5-Map_Geyser_internal
000115A0 0000                       		dc.w @bubble6-Map_Geyser_internal
000115A2 0000                       		dc.w @end1-Map_Geyser_internal
000115A4 0000                       		dc.w @end2-Map_Geyser_internal
000115A6 0000                       		dc.w @medcolumn1-Map_Geyser_internal
000115A8 0000                       		dc.w @medcolumn2-Map_Geyser_internal
000115AA 0000                       		dc.w @medcolumn3-Map_Geyser_internal
000115AC 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
000115AE 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
000115B0 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
000115B2 0000                       		dc.w @longcolumn1-Map_Geyser_internal
000115B4 0000                       		dc.w @longcolumn2-Map_Geyser_internal
000115B6 0000                       		dc.w @longcolumn3-Map_Geyser_internal
000115B8 0000                       		dc.w @bubble7-Map_Geyser_internal
000115BA 0000                       		dc.w @bubble8-Map_Geyser_internal
000115BC 0000                       		dc.w @blank-Map_Geyser_internal
000115BE 02                         @bubble1:	dc.b 2
000115BF EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000115C4 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000115C9 02                         @bubble2:	dc.b 2
000115CA EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000115CF EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000115D4 04                         @bubble3:	dc.b 4
000115D5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115DA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115DF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115E4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115E9 04                         @bubble4:	dc.b 4
000115EA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000115EF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000115F4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000115F9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000115FE 06                         @bubble5:	dc.b 6
000115FF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011604 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011609 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001160E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011613 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00011618 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0001161D 06                         @bubble6:	dc.b 6
0001161E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011623 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011628 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001162D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011632 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011637 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001163C 02                         @end1:		dc.b 2
0001163D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011642 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011647 02                         @end2:		dc.b 2
00011648 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001164D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011652 0A                         @medcolumn1:	dc.b $A
00011653 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011658 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001165D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011662 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011667 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001166C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011671 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011676 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001167B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011680 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011685 0A                         @medcolumn2:	dc.b $A
00011686 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001168B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011690 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011695 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001169A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001169F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000116A4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000116A9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000116AE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000116B3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000116B8 0A                         @medcolumn3:	dc.b $A
000116B9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116BE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116C3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116C8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116CD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116D2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116D7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116DC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116E1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116E6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116EB 06                         @shortcolumn1:	dc.b 6
000116EC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116F1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116F6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116FB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011700 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011705 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001170A 06                         @shortcolumn2:	dc.b 6
0001170B 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011710 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011715 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001171A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001171F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011724 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011729 06                         @shortcolumn3:	dc.b 6
0001172A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001172F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011734 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011739 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001173E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011743 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011748 10                         @longcolumn1:	dc.b $10
00011749 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001174E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011753 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011758 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001175D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011762 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011767 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001176C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011771 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011776 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001177B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011780 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011785 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001178A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001178F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011794 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011799 10                         @longcolumn2:	dc.b $10
0001179A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001179F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000117A4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000117A9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000117AE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000117B3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000117B8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000117BD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000117C2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000117C7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000117CC 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000117D1 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000117D6 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000117DB 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000117E0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000117E5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000117EA 10                         @longcolumn3:	dc.b $10
000117EB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117F0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117F5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117FA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117FF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011804 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011809 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001180E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011813 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011818 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001181D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011822 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011827 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001182C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011831 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011836 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001183B 06                         @bubble7:	dc.b 6
0001183C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011841 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011846 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001184B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011850 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011855 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001185A 06                         @bubble8:	dc.b 6
0001185B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011860 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011865 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001186A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001186F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011874 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011879 00                         @blank:	dc.b 0
0001187A                            		even
0001187A                            		even
0001187A                            
0001187A                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Object 40 - Moto Bug enemy (GHZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            
0001187A                            MotoBug:
0001187A 7000                       		moveq	#0,d0
0001187C 1028 0024                  		move.b	obRoutine(a0),d0
00011880 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011884 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011888                            ; ===========================================================================
00011888 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0001188A 0000                       		dc.w Moto_Action-Moto_Index
0001188C 0000                       		dc.w Moto_Animate-Moto_Index
0001188E 0000                       		dc.w Moto_Delete-Moto_Index
00011890                            ; ===========================================================================
00011890                            
00011890                            Moto_Main:	; Routine 0
00011890 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011898 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001189E 117C 0004 0001             		move.b	#4,obRender(a0)
000118A4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000118AA 117C 0014 0014             		move.b	#$14,obActWid(a0)
000118B0 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
000118B4 6600                       		bne.s	@smoke		; if yes, branch
000118B6 117C 000E 0016             		move.b	#$E,obHeight(a0)
000118BC 117C 0008 0017             		move.b	#8,obWidth(a0)
000118C2 117C 000C 0020             		move.b	#$C,obColType(a0)
000118C8 6100 DF42                  		bsr.w	ObjectFall
000118CC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118D2 4A41                       		tst.w	d1
000118D4 6A00                       		bpl.s	@notonfloor
000118D6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118DA 317C 0000 0012             		move.w	#0,obVelY(a0)
000118E0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000118E4 0868 0000 0022             		bchg	#0,obStatus(a0)
000118EA                            
000118EA                            	@notonfloor:
000118EA 4E75                       		rts	
000118EC                            ; ===========================================================================
000118EC                            
000118EC                            @smoke:
000118EC 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000118F0 6000 0000                  		bra.w	Moto_Animate
000118F4                            ; ===========================================================================
000118F4                            
000118F4                            Moto_Action:	; Routine 2
000118F4 7000                       		moveq	#0,d0
000118F6 1028 0025                  		move.b	ob2ndRout(a0),d0
000118FA 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000118FE 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
00011902 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011908 6100 B004                  		bsr.w	AnimateSprite
0001190C                            
0001190C                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
0001190C                            ; ---------------------------------------------------------------------------
0001190C                            ; Subroutine to remember whether an object is destroyed/collected
0001190C                            ; ---------------------------------------------------------------------------
0001190C                            
0001190C                            RememberState:
0001192A 6000 DF2C                  		bra.w	DisplaySprite
0001192E                            
0001192E                            	@offscreen:
0001192E 45F8 FC00                  		lea	(v_objstate).w,a2
00011932 7000                       		moveq	#0,d0
00011934 1028 0023                  		move.b	obRespawnNo(a0),d0
00011938 6700                       		beq.s	@delete
0001193A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011940                            
00011940                            	@delete:
00011940 6000 DF56                  		bra.w	DeleteObject
00011940 6000 DF56                  		bra.w	DeleteObject
00011944                            
00011944                            ; ===========================================================================
00011944 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011946 0000                       		dc.w @findfloor-Moto_ActIndex
00011948                            
00011948 =00000030                  @time:		equ $30
00011948 =00000033                  @smokedelay:	equ $33
00011948                            ; ===========================================================================
00011948                            
00011948                            @move:
00011948 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0001194C 6A00                       		bpl.s	@wait		; if time remains, branch
0001194E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011952 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011958 117C 0001 001C             		move.b	#1,obAnim(a0)
0001195E 0868 0000 0022             		bchg	#0,obStatus(a0)
00011964 6600                       		bne.s	@wait
00011966 4468 0010                  		neg.w	obVelX(a0)	; change direction
0001196A                            
0001196A                            	@wait:
0001196A 4E75                       		rts	
0001196C                            ; ===========================================================================
0001196C                            
0001196C                            @findfloor:
0001196C 6100 DED6                  		bsr.w	SpeedToPos
00011970 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011976 0C41 FFF8                  		cmpi.w	#-8,d1
0001197A 6D00                       		blt.s	@pause
0001197C 0C41 000C                  		cmpi.w	#$C,d1
00011980 6C00                       		bge.s	@pause
00011982 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011986 5328 0033                  		subq.b	#1,@smokedelay(a0)
0001198A 6A00                       		bpl.s	@nosmoke
0001198C 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011992 6100 E45E                  		bsr.w	FindFreeObj
00011996 6600                       		bne.s	@nosmoke
00011998 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001199C 3368 0008 0008             		move.w	obX(a0),obX(a1)
000119A2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000119A8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000119AE 137C 0002 001C             		move.b	#2,obAnim(a1)
000119B4                            
000119B4                            	@nosmoke:
000119B4 4E75                       		rts	
000119B6                            
000119B6                            @pause:
000119B6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000119BA 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
000119C0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
000119C6 117C 0000 001C             		move.b	#0,obAnim(a0)
000119CC 4E75                       		rts	
000119CE                            ; ===========================================================================
000119CE                            
000119CE                            Moto_Animate:	; Routine 4
000119CE 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000119D4 6100 AF38                  		bsr.w	AnimateSprite
000119D8 6000 DE7E                  		bra.w	DisplaySprite
000119DC                            ; ===========================================================================
000119DC                            
000119DC                            Moto_Delete:	; Routine 6
000119DC 6000 DEBA                  		bra.w	DeleteObject
000119DC 6000 DEBA                  		bra.w	DeleteObject
000119E0                            		include	"_anim\Moto Bug.asm"
000119E0                            ; ---------------------------------------------------------------------------
000119E0                            ; Animation script - Motobug enemy
000119E0                            ; ---------------------------------------------------------------------------
000119E0 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000119E2 0000                       		dc.w @walk-Ani_Moto
000119E4 0000                       		dc.w @smoke-Ani_Moto
000119E6                            
000119E6 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000119EA 00                         		even
000119EA 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000119F0 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000119FE 00                         		even
000119FE 00                         		even
000119FE                            Map_Moto:	include	"_maps\Moto Bug.asm"
000119FE                            ; --------------------------------------------------------------------------------
000119FE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119FE                            ; --------------------------------------------------------------------------------
000119FE                            
000119FE                            SME_TTY9T:	
000119FE 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011A02 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
00011A06 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
00011A0A 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011A0C 04                         SME_TTY9T_E:	dc.b 4	
00011A0D F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A12 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011A17 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A1C 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011A21 04                         SME_TTY9T_23:	dc.b 4	
00011A22 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011A27 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011A2C F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011A31 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011A36 05                         SME_TTY9T_38:	dc.b 5	
00011A37 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A3C 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011A41 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A46 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011A4B 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011A50 01                         SME_TTY9T_52:	dc.b 1	
00011A51 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011A56 01                         SME_TTY9T_58:	dc.b 1	
00011A57 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011A5C 01                         SME_TTY9T_5E:	dc.b 1	
00011A5D FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011A62 00                         SME_TTY9T_64:	dc.b 0	
00011A64 00                         		even
00011A64 00                         		even
00011A64                            		include	"_incObj\4F.asm"
00011A64                            ; ---------------------------------------------------------------------------
00011A64                            ; Object 4F - Splats
00011A64                            ; ---------------------------------------------------------------------------
00011A64                            
00011A64                            Obj4F:
00011A64 7000                                       moveq   #0,d0
00011A66 1028 0024                                  move.b  $24(a0),d0
00011A6A 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011A6E 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011A72                            ; ---------------------------------------------------------------------------
00011A72 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011A74 0000                                       dc.w loc_D246-ObjSplats_Index
00011A76 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011A78 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A                            
00011A7A                            ObjSplats_Init:
00011A7A 5428 0024                                  addq.b  #2,$24(a0)
00011A7E 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011A86 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011A8C 117C 0004 0001                             move.b  #4,1(a0)
00011A92 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A98 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A9E 117C 0014 0016                             move.b  #$14,$16(a0)
00011AA4 117C 0002 0020                             move.b  #2,$20(a0)
00011AAA 4A28 0028                                  tst.b   $28(a0)
00011AAE 6700                                       beq.s   loc_D246
00011AB0 343C 0300                                  move.w  #$300,d2
00011AB4 6000                                       bra.s   ObjSplats_FaceRight
00011AB6                            ; ---------------------------------------------------------------------------
00011AB6                            
00011AB6                            loc_D246:
00011AB6 343C 00E0                                  move.w  #$E0,d2
00011ABA                            
00011ABA                            ObjSplats_FaceRight:
00011ABA 323C 0100                                  move.w  #$100,d1
00011ABE 08E8 0000 0001                             bset    #0,1(a0)
00011AC4 3038 D008                                  move.w  ($FFFFD008).w,d0
00011AC8 9068 0008                                  sub.w   8(a0),d0
00011ACC 6400                                       bcc.s   ObjSplats_Move
00011ACE 4440                                       neg.w   d0
00011AD0 4441                                       neg.w   d1
00011AD2 08A8 0000 0001                             bclr    #0,1(a0)
00011AD8                            
00011AD8                            ObjSplats_Move:
00011AD8 B042                                       cmp.w   d2,d0
00011ADA 6400                                       bcc.s   ObjSplats_Bounce
00011ADC 3141 0010                                  move.w  d1,$10(a0)
00011AE0 5428 0024                                  addq.b  #2,$24(a0)
00011AE4                            
00011AE4                            ObjSplats_Bounce:
00011AE4 6100 DD26                                  bsr.w   ObjectFall
00011AE8 117C 0001 001A                             move.b  #1,$1A(a0)
00011AEE 4A68 0012                                  tst.w   $12(a0)
00011AF2 6B00                                       bmi.s   ObjSplats_Turn
00011AF4 117C 0000 001A                             move.b  #0,$1A(a0)
00011AFA 6100 0000                                  bsr.w   ObjFloorDist
00011AFE 4A41                                       tst.w   d1
00011B00 6A00                                       bpl.s   ObjSplats_Turn
00011B02 3011                                       move.w  (a1),d0
00011B04 0240 03FF                                  andi.w  #$3FF,d0
00011B08 0C40 02D2                                  cmpi.w  #$2D2,d0
00011B0C 6500                                       bcs.s   ObjSplats_Fall
00011B0E 5428 0024                                  addq.b  #2,$24(a0)
00011B12 6000                                       bra.s   ObjSplats_Turn
00011B14                            ; ---------------------------------------------------------------------------
00011B14                            
00011B14                            ObjSplats_Fall:
00011B14 D368 000C                                  add.w   d1,$C(a0)
00011B18 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011B1E                            
00011B1E                            ObjSplats_Turn:
00011B1E 6100 0000                                  bsr.w   Yad_ChkWall
00011B22 6700                                       beq.s   loc_D2C4
00011B24 4468 0010                                  neg.w   $10(a0)
00011B28 0868 0000 0001                             bchg    #0,1(a0)
00011B2E 0868 0000 0022                             bchg    #0,$22(a0)
00011B34                            
00011B34                            loc_D2C4:
00011B34 6000 FDD6                                  bra.w   RememberState
00011B38                            ; ---------------------------------------------------------------------------
00011B38                            
00011B38                            loc_D2C8:
00011B38 6100 DCD2                                  bsr.w   ObjectFall
00011B3C 6100 DD1A                                  bsr.w   DisplaySprite
00011B40 4A28 0001                                  tst.b   1(a0)
00011B44 6A00 DD52                                  bpl.w   DeleteObject
00011B48 4E75                                       rts
00011B48 4E75                                       rts
00011B4A                            Map_Splats:	include	"_maps\Splats.asm"
00011B4A 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011B4C 0000                                       dc.w unk_D31B-Map_Splats_internal
00011B4E 02                         unk_D310:       dc.b   2
00011B4F EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011B59 02                         unk_D31B:       dc.b   2
00011B5A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B5A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B64                            
00011B64                            		include	"_incObj\50 Yadrin.asm"
00011B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B64                            
00011B64                            
00011B64                            Yad_ChkWall:
00011B64 3038 FE04                  		move.w	(v_framecount).w,d0
00011B68 D047                       		add.w	d7,d0
00011B6A 0240 0003                  		andi.w	#3,d0
00011B6E 6600                       		bne.s	loc_F836
00011B70 7600                       		moveq	#0,d3
00011B72 1628 0014                  		move.b	obActWid(a0),d3
00011B76 4A68 0010                  		tst.w	obVelX(a0)
00011B7A 6B00                       		bmi.s	loc_F82C
00011B7C 6100 0000                  		bsr.w	ObjHitWallRight
00011B80 4A41                       		tst.w	d1
00011B82 6A00                       		bpl.s	loc_F836
00011B84                            
00011B84                            loc_F828:
00011B84 7001                       		moveq	#1,d0
00011B86 4E75                       		rts	
00011B88                            ; ===========================================================================
00011B88                            
00011B88                            loc_F82C:
00011B88 4643                       		not.w	d3
00011B8A 6100 0000                  		bsr.w	ObjHitWallLeft
00011B8E 4A41                       		tst.w	d1
00011B90 6BF2                       		bmi.s	loc_F828
00011B92                            
00011B92                            loc_F836:
00011B92 7000                       		moveq	#0,d0
00011B94 4E75                       		rts	
00011B96                            ; End of function Yad_ChkWall
00011B96                            
00011B96                            ; ===========================================================================
00011B96                            ; ---------------------------------------------------------------------------
00011B96                            ; Object 50 - Yadrin enemy (SYZ)
00011B96                            ; ---------------------------------------------------------------------------
00011B96                            
00011B96                            Yadrin:
00011B96 7000                       		moveq	#0,d0
00011B98 1028 0024                  		move.b	obRoutine(a0),d0
00011B9C 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011BA0 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011BA4                            ; ===========================================================================
00011BA4 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011BA6 0000                       		dc.w Yad_Action-Yad_Index
00011BA8                            
00011BA8 =00000030                  yad_timedelay:	equ $30
00011BA8                            ; ===========================================================================
00011BA8                            
00011BA8                            Yad_Main:	; Routine 0
00011BA8 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011BB0 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011BB6 117C 0004 0001             		move.b	#4,obRender(a0)
00011BBC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011BC2 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011BC8 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011BCE 117C 0008 0017             		move.b	#8,obWidth(a0)
00011BD4 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011BDA 6100 DC30                  		bsr.w	ObjectFall
00011BDE 6100 0000                  		bsr.w	ObjFloorDist
00011BE2 4A41                       		tst.w	d1
00011BE4 6A00                       		bpl.s	locret_F89E
00011BE6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011BEA 317C 0000 0012             		move.w	#0,obVelY(a0)
00011BF0 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BF4 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BFA                            
00011BFA                            	locret_F89E:
00011BFA 4E75                       		rts	
00011BFC                            ; ===========================================================================
00011BFC                            
00011BFC                            Yad_Action:	; Routine 2
00011BFC 7000                       		moveq	#0,d0
00011BFE 1028 0025                  		move.b	ob2ndRout(a0),d0
00011C02 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011C06 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011C0A 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011C10 6100 ACFC                  		bsr.w	AnimateSprite
00011C14 6000 FCF6                  		bra.w	RememberState
00011C18                            ; ===========================================================================
00011C18 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011C1A 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011C1C                            ; ===========================================================================
00011C1C                            
00011C1C                            Yad_Move:
00011C1C 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011C20 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011C22 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011C26 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011C2C 117C 0001 001C             		move.b	#1,obAnim(a0)
00011C32 0868 0000 0022             		bchg	#0,obStatus(a0)
00011C38 6600                       		bne.s	locret_F8E2
00011C3A 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011C3E                            
00011C3E                            	locret_F8E2:
00011C3E 4E75                       		rts	
00011C40                            ; ===========================================================================
00011C40                            
00011C40                            Yad_FixToFloor:
00011C40 6100 DC02                  		bsr.w	SpeedToPos
00011C44 6100 0000                  		bsr.w	ObjFloorDist
00011C48 0C41 FFF8                  		cmpi.w	#-8,d1
00011C4C 6D00                       		blt.s	Yad_Pause
00011C4E 0C41 000C                  		cmpi.w	#$C,d1
00011C52 6C00                       		bge.s	Yad_Pause
00011C54 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011C58 6100 FF0A                  		bsr.w	Yad_ChkWall
00011C5C 6600                       		bne.s	Yad_Pause
00011C5E 4E75                       		rts	
00011C60                            ; ===========================================================================
00011C60                            
00011C60                            Yad_Pause:
00011C60 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011C64 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011C6A 317C 0000 0010             		move.w	#0,obVelX(a0)
00011C70 117C 0000 001C             		move.b	#0,obAnim(a0)
00011C76 4E75                       		rts	
00011C76 4E75                       		rts	
00011C78                            		include	"_anim\Yadrin.asm"
00011C78                            ; ---------------------------------------------------------------------------
00011C78                            ; Animation script - Yadrin enemy
00011C78                            ; ---------------------------------------------------------------------------
00011C78 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011C7A 0000                       		dc.w @walk-Ani_Yad
00011C7C                            
00011C7C 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011C80 00                         		even
00011C80 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C8E                            		even
00011C8E                            		even
00011C8E                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C8E                            ; --------------------------------------------------------------------------------
00011C8E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C8E                            ; --------------------------------------------------------------------------------
00011C8E                            
00011C8E                            SME_4WhIu:	
00011C8E 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C92 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C96 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C9A 09                         SME_4WhIu_C:	dc.b 9	
00011C9B F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011CA0 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CA5 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CAA FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CAF FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CB4 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CB9 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CBE F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CC3 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CC8 09                         SME_4WhIu_3A:	dc.b 9	
00011CC9 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CCE FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CD3 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CD8 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CDD FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CE2 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CE7 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CEC EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CF1 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CF6 0C                         SME_4WhIu_68:	dc.b $C	
00011CF7 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CFC FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011D01 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011D06 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D0B FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D10 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011D15 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011D1A FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D1F FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D24 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011D29 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D2E 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D33 0C                         SME_4WhIu_A5:	dc.b $C	
00011D34 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011D39 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D3E FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D43 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D48 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D4D F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D52 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D57 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D5C FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D61 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D66 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D6B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D70 05                         SME_4WhIu_E2:	dc.b 5	
00011D71 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D76 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D7B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D80 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D85 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011D8A 05                         SME_4WhIu_FC:	dc.b 5	
00011D8B F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D90 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D95 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D9A F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D9F 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011DA4                            		even
00011DA4                            		even
00011DA4                            
00011DA4                            		include	"_incObj\sub SolidObject.asm"
00011DA4                            ; ---------------------------------------------------------------------------
00011DA4                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011DA4                            ;
00011DA4                            ; input:
00011DA4                            ;	d1 = width
00011DA4                            ;	d2 = height / 2 (when jumping)
00011DA4                            ;	d3 = height / 2 (when walking)
00011DA4                            ;	d4 = x-axis position
00011DA4                            ; ---------------------------------------------------------------------------
00011DA4                            
00011DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011DA4                            
00011DA4                            
00011DA4                            SolidObject:
00011DA4 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011DA8 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011DAC 3401                       		move.w	d1,d2
00011DAE D442                       		add.w	d2,d2
00011DB0 43F8 D000                  		lea	(v_player).w,a1
00011DB4 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011DBA 6600                       		bne.s	@leave		; if yes, branch
00011DBC 3029 0008                  		move.w	obX(a1),d0
00011DC0 9068 0008                  		sub.w	obX(a0),d0
00011DC4 D041                       		add.w	d1,d0
00011DC6 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011DC8 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011DCA 6500                       		bcs.s	@stand		; if not, branch
00011DCC                            
00011DCC                            	@leave:
00011DCC 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011DD2 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011DD8 4228 0025                  		clr.b	obSolid(a0)
00011DDC 7800                       		moveq	#0,d4
00011DDE 4E75                       		rts	
00011DE0                            
00011DE0                            	@stand:
00011DE0 3404                       		move.w	d4,d2
00011DE2 4EB9 0000 937E             		jsr	MvSonicOnPtfm
00011DE8 7800                       		moveq	#0,d4
00011DEA 4E75                       		rts	
00011DEC                            ; ===========================================================================
00011DEC                            
00011DEC                            SolidObject71:
00011DEC 4A28 0025                  		tst.b	obSolid(a0)
00011DF0 6700 0000                  		beq.w	loc_FAD0
00011DF4 3401                       		move.w	d1,d2
00011DF6 D442                       		add.w	d2,d2
00011DF8 43F8 D000                  		lea	(v_player).w,a1
00011DFC 0829 0001 0022             		btst	#1,obStatus(a1)
00011E02 6600                       		bne.s	@leave
00011E04 3029 0008                  		move.w	obX(a1),d0
00011E08 9068 0008                  		sub.w	obX(a0),d0
00011E0C D041                       		add.w	d1,d0
00011E0E 6B00                       		bmi.s	@leave
00011E10 B042                       		cmp.w	d2,d0
00011E12 6500                       		bcs.s	@stand
00011E14                            
00011E14                            	@leave:
00011E14 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011E1A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E20 4228 0025                  		clr.b	obSolid(a0)
00011E24 7800                       		moveq	#0,d4
00011E26 4E75                       		rts	
00011E28                            
00011E28                            	@stand:
00011E28 3404                       		move.w	d4,d2
00011E2A 4EB9 0000 937E             		jsr	MvSonicOnPtfm
00011E30 7800                       		moveq	#0,d4
00011E32 4E75                       		rts	
00011E34                            ; ===========================================================================
00011E34                            
00011E34                            SolidObject2F:
00011E34 43F8 D000                  		lea	(v_player).w,a1
00011E38 4A28 0001                  		tst.b	obRender(a0)
00011E3C 6A00 0000                  		bpl.w	Solid_Ignore
00011E40 3029 0008                  		move.w	obX(a1),d0
00011E44 9068 0008                  		sub.w	obX(a0),d0
00011E48 D041                       		add.w	d1,d0
00011E4A 6B00 0000                  		bmi.w	Solid_Ignore
00011E4E 3601                       		move.w	d1,d3
00011E50 D643                       		add.w	d3,d3
00011E52 B043                       		cmp.w	d3,d0
00011E54 6200 0000                  		bhi.w	Solid_Ignore
00011E58 3A00                       		move.w	d0,d5
00011E5A 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011E60 6700                       		beq.s	@notflipped	; if not, branch
00011E62 4645                       		not.w	d5
00011E64 DA43                       		add.w	d3,d5
00011E66                            
00011E66                            	@notflipped:
00011E66 E24D                       		lsr.w	#1,d5
00011E68 7600                       		moveq	#0,d3
00011E6A 1632 5000                  		move.b	(a2,d5.w),d3
00011E6E 9612                       		sub.b	(a2),d3
00011E70 3A28 000C                  		move.w	obY(a0),d5
00011E74 9A43                       		sub.w	d3,d5
00011E76 1629 0016                  		move.b	obHeight(a1),d3
00011E7A 4883                       		ext.w	d3
00011E7C D443                       		add.w	d3,d2
00011E7E 3629 000C                  		move.w	obY(a1),d3
00011E82 9645                       		sub.w	d5,d3
00011E84 5843                       		addq.w	#4,d3
00011E86 D642                       		add.w	d2,d3
00011E88 6B00 0000                  		bmi.w	Solid_Ignore
00011E8C 3802                       		move.w	d2,d4
00011E8E D844                       		add.w	d4,d4
00011E90 B644                       		cmp.w	d4,d3
00011E92 6400 0000                  		bcc.w	Solid_Ignore
00011E96 6000 0000                  		bra.w	loc_FB0E
00011E9A                            ; ===========================================================================
00011E9A                            
00011E9A                            Solid_ChkEnter:
00011E9A 4A28 0001                  		tst.b	obRender(a0)
00011E9E 6A00 0000                  		bpl.w	Solid_Ignore
00011EA2                            
00011EA2                            loc_FAD0:
00011EA2 43F8 D000                  		lea	(v_player).w,a1
00011EA6 3029 0008                  		move.w	obX(a1),d0
00011EAA 9068 0008                  		sub.w	obX(a0),d0
00011EAE D041                       		add.w	d1,d0
00011EB0 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011EB4 3601                       		move.w	d1,d3
00011EB6 D643                       		add.w	d3,d3
00011EB8 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011EBA 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011EBE 1629 0016                  		move.b	obHeight(a1),d3
00011EC2 4883                       		ext.w	d3
00011EC4 D443                       		add.w	d3,d2
00011EC6 3629 000C                  		move.w	obY(a1),d3
00011ECA 9668 000C                  		sub.w	obY(a0),d3
00011ECE 5843                       		addq.w	#4,d3
00011ED0 D642                       		add.w	d2,d3
00011ED2 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011ED6 3802                       		move.w	d2,d4
00011ED8 D844                       		add.w	d4,d4
00011EDA B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011EDC 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011EE0                            
00011EE0                            loc_FB0E:
00011EE0 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011EE4 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011EE8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011EEE 6400 0000                  			bcc.w	Solid_Debug
00011EF2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011EF6 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011EFA 3A00                       		move.w	d0,d5
00011EFC B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011EFE 6400                       		bcc.s	@isright	; if yes, branch
00011F00 D241                       		add.w	d1,d1
00011F02 9041                       		sub.w	d1,d0
00011F04 3A00                       		move.w	d0,d5
00011F06 4445                       		neg.w	d5
00011F08                            
00011F08                            	@isright:
00011F08 3203                       		move.w	d3,d1
00011F0A B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011F0C 6400                       		bcc.s	@isbelow	; if yes, branch
00011F0E                            
00011F0E 5943                       		subq.w	#4,d3
00011F10 9644                       		sub.w	d4,d3
00011F12 3203                       		move.w	d3,d1
00011F14 4441                       		neg.w	d1
00011F16                            
00011F16                            	@isbelow:
00011F16 BA41                       		cmp.w	d1,d5
00011F18 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011F1C 0C41 0004                  		cmpi.w	#4,d1
00011F20 6300                       		bls.s	Solid_SideAir
00011F22 4A40                       		tst.w	d0		; where is Sonic?
00011F24 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011F26 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011F28 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011F2C 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011F2E 6000                       		bra.s	Solid_Left
00011F30                            ; ===========================================================================
00011F30                            
00011F30                            Solid_Right:
00011F30 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011F34 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011F36                            
00011F36                            Solid_Left:
00011F36 337C 0000 0020             		move.w	#0,obInertia(a1)
00011F3C 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011F42                            
00011F42                            Solid_Centre:
00011F42 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011F46 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F4C 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011F4E 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011F54 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011F5A 7801                       		moveq	#1,d4		; return side collision
00011F5C 4E75                       		rts	
00011F5E                            ; ===========================================================================
00011F5E                            
00011F5E                            Solid_SideAir:
00011F5E 6100                       		bsr.s	Solid_NotPushing
00011F60 7801                       		moveq	#1,d4		; return side collision
00011F62 4E75                       		rts	
00011F64                            ; ===========================================================================
00011F64                            
00011F64                            Solid_Ignore:
00011F64 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011F6A 6700                       		beq.s	Solid_Debug	; if not, branch
00011F6C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011F72 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F74 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011F7A 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F7C 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011F82 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F84 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011F8A                            
00011F8A                            
00011F8A                            Solid_NotPushing:
00011F8A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F90 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F96                            
00011F96                            Solid_Debug:
00011F96 7800                       		moveq	#0,d4		; return no collision
00011F98 4E75                       		rts	
00011F9A                            ; ===========================================================================
00011F9A                            
00011F9A                            Solid_TopBottom:
00011F9A 4A43                       		tst.w	d3		; is Sonic below the object?
00011F9C 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F9E 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011FA2 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011FA4 60BE                       		bra.s	Solid_Ignore
00011FA6                            ; ===========================================================================
00011FA6                            
00011FA6                            Solid_Below:
00011FA6 4A69 0012                  		tst.w	obVelY(a1) ; is Sonic moving vertically?
00011FAA 6700                       		beq.s	Solid_Squash ; if not, branch
00011FAC 6A00                       		bpl.s 	Solid_TopBtmAir ; if moving downwards, branch
00011FAE 4A43                       		tst.w	d3 ; is Sonic above the object?
00011FB0 6A00                       		bpl.s	Solid_TopBtmAir ; if yes, branch
00011FB2 337C 0000 0012             		move.w	#0,obVelY(a1) ; stop Sonic moving
00011FB8                            
00011FB8                            Solid_TopBtmAir:
00011FB8 9769 000C                  		sub.w	d3,obY(a1) ; correct Sonic's position
00011FBC 78FF                       		moveq	#-1,d4
00011FBE 4E75                       		rts	
00011FC0                            ; ===========================================================================
00011FC0                            
00011FC0                            Solid_Squash:
00011FC0 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FC6 66F0                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011FC8 2F08                       		move.l	a0,-(sp)
00011FCA 2049                       		movea.l	a1,a0
00011FCC 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011FD2 205F                       		movea.l	(sp)+,a0
00011FD4 78FF                       		moveq	#-1,d4
00011FD6 4E75                       		rts	
00011FD8                            ; ===========================================================================
00011FD8                            
00011FD8                            Solid_Landed:
00011FD8 5943                       		subq.w	#4,d3
00011FDA 7200                       		moveq	#0,d1
00011FDC 1228 0014                  		move.b	obActWid(a0),d1
00011FE0 3401                       		move.w	d1,d2
00011FE2 D442                       		add.w	d2,d2
00011FE4 D269 0008                  		add.w	obX(a1),d1
00011FE8 9268 0008                  		sub.w	obX(a0),d1
00011FEC 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011FEE B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011FF0 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011FF2 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011FF6 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011FF8 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FFC 5369 000C                  		subq.w	#1,obY(a1)
00012000 6100                       		bsr.s	Solid_ResetFloor
00012002 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00012008 08E8 0003 0022             		bset	#3,obStatus(a0)
0001200E 78FF                       		moveq	#-1,d4		; return top/bottom collision
00012010 4E75                       		rts	
00012012                            ; ===========================================================================
00012012                            
00012012                            Solid_Miss:
00012012 7800                       		moveq	#0,d4
00012014 4E75                       		rts	
00012016                            ; End of function SolidObject
00012016                            
00012016                            
00012016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012016                            
00012016                            
00012016                            Solid_ResetFloor:
00012016 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
0001201C 6700                       		beq.s	@notonobj	; if not, branch
0001201E                            
0001201E 7000                       		moveq	#0,d0
00012020 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00012024 ED48                       		lsl.w	#6,d0
00012026 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
0001202C 2440                       		movea.l	d0,a2
0001202E 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00012034 422A 0025                  		clr.b	obSolid(a2)
00012038                            
00012038                            	@notonobj:
00012038 3008                       		move.w	a0,d0
0001203A 0440 D000                  		subi.w	#$D000,d0
0001203E EC48                       		lsr.w	#6,d0
00012040 0240 007F                  		andi.w	#$7F,d0
00012044 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00012048 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
0001204E 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00012054 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0001205A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012060 6700                       		beq.s	@notinair	; if not, branch
00012062 2F08                       		move.l	a0,-(sp)
00012064 2049                       		movea.l	a1,a0
00012066 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
0001206C 205F                       		movea.l	(sp)+,a0
0001206E                            
0001206E                            	@notinair:
0001206E 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00012074 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
0001207A 4E75                       		rts	
0001207C                            ; End of function Solid_ResetFloor
0001207C                            ; End of function Solid_ResetFloor
0001207C                            
0001207C                            		include	"_incObj\51 Smashable Green Block.asm"
0001207C                            ; ---------------------------------------------------------------------------
0001207C                            ; Object 51 - smashable	green block (MZ)
0001207C                            ; ---------------------------------------------------------------------------
0001207C                            
0001207C                            SmashBlock:
0001207C 7000                       		moveq	#0,d0
0001207E 1028 0024                  		move.b	obRoutine(a0),d0
00012082 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00012086 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
0001208A 6000 F880                  		bra.w	RememberState
0001208E                            ; ===========================================================================
0001208E 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012090 0000                       		dc.w Smab_Solid-Smab_Index
00012092 0000                       		dc.w Smab_Points-Smab_Index
00012094                            ; ===========================================================================
00012094                            
00012094                            Smab_Main:	; Routine 0
00012094 5428 0024                  		addq.b	#2,obRoutine(a0)
00012098 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
000120A0 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000120A6 117C 0004 0001             		move.b	#4,obRender(a0)
000120AC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000120B2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000120B8 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000120BE                            
000120BE                            Smab_Solid:	; Routine 2
000120BE                            
000120BE =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
000120BE =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
000120BE                            
000120BE 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
000120C4 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
000120CA 323C 001B                  		move.w	#$1B,d1
000120CE 343C 0010                  		move.w	#$10,d2
000120D2 363C 0011                  		move.w	#$11,d3
000120D6 3828 0008                  		move.w	obX(a0),d4
000120DA 6100 FCC8                  		bsr.w	SolidObject
000120DE 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000120E4 6600                       		bne.s	@smash		; if yes, branch
000120E6                            
000120E6                            	@notspinning:
000120E6 4E75                       		rts	
000120E8                            ; ===========================================================================
000120E8                            
000120E8                            @smash:
000120E8 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000120EE 66F6                       		bne.s	@notspinning	; if not, branch
000120F0 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000120F6 08E9 0002 0022             		bset	#2,obStatus(a1)
000120FC 137C 000E 0016             		move.b	#$E,obHeight(a1)
00012102 137C 0007 0017             		move.b	#7,obWidth(a1)
00012108 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
0001210E 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00012114 08E9 0001 0022             		bset	#1,obStatus(a1)
0001211A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012120 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012126 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001212C 4228 0025                  		clr.b	obSolid(a0)
00012130 117C 0001 001A             		move.b	#1,obFrame(a0)
00012136 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
0001213C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001213E 343C 0038                  		move.w	#$38,d2
00012142 6100 D2C4                  		bsr.w	SmashObject
00012146 6100 DCAA                  		bsr.w	FindFreeObj
0001214A 6600                       		bne.s	Smab_Points
0001214C 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012150 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012156 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001215C 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012160 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00012164 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00012168 6500                       		bcs.s	@bonus		; if yes, branch
0001216A 7406                       		moveq	#6,d2		; set cap for points
0001216C                            
0001216C                            	@bonus:
0001216C 7000                       		moveq	#0,d0
0001216E 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012172 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00012178 6500                       		bcs.s	@givepoints	; if not, branch
0001217A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001217E 740A                       		moveq	#10,d2
00012180                            
00012180                            	@givepoints:
00012180 4EB9 0000 0000             		jsr	(AddPoints).l
00012186 E24A                       		lsr.w	#1,d2
00012188 1342 001A                  		move.b	d2,obFrame(a1)
0001218C                            
0001218C                            Smab_Points:	; Routine 4
0001218C 6100 D6B6                  		bsr.w	SpeedToPos
00012190 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00012196 6100 D6C0                  		bsr.w	DisplaySprite
0001219A 4A28 0001                  		tst.b	obRender(a0)
0001219E 6A00 D6F8                  		bpl.w	DeleteObject
000121A2 4E75                       		rts	
000121A4                            ; ===========================================================================
000121A4 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
000121A8 FF00 FF00                  		dc.w -$100, -$100
000121AC 0200 FE00                  		dc.w $200, -$200
000121B0 0100 FF00                  		dc.w $100, -$100
000121B4                            
000121B4 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000121B4 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000121BC                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
000121BC                            ; --------------------------------------------------------------------------------
000121BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000121BC                            ; --------------------------------------------------------------------------------
000121BC                            
000121BC                            SME_wdHTM:	
000121BC 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
000121C0 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
000121C2 04                         SME_wdHTM_6:	dc.b 4	
000121C3 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
000121C8 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
000121CD 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
000121D2 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
000121D7 04                         SME_wdHTM_1B:	dc.b 4	
000121D8 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
000121DD 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
000121E2 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
000121E7 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
000121EC 00                         SME_wdHTM_30:	dc.b 0	
000121EE 00                         		even
000121EE 00                         		even
000121EE                            
000121EE                            		include	"_incObj\52 Moving Blocks.asm"
000121EE                            ; ---------------------------------------------------------------------------
000121EE                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000121EE                            ; ---------------------------------------------------------------------------
000121EE                            
000121EE                            MovingBlock:
000121EE 7000                       		moveq	#0,d0
000121F0 1028 0024                  		move.b	obRoutine(a0),d0
000121F4 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000121F8 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000121FC                            ; ===========================================================================
000121FC 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000121FE 0000                       		dc.w MBlock_Platform-MBlock_Index
00012200 0000                       		dc.w MBlock_StandOn-MBlock_Index
00012202                            
00012202 =00000030                  mblock_origX:	equ $30
00012202 =00000032                  mblock_origY:	equ $32
00012202                            
00012202 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00012204 2001                       		dc.b $20, 1
00012206 2002                       		dc.b $20, 2
00012208 4003                       		dc.b $40, 3
0001220A 3004                       		dc.b $30, 4
0001220C                            ; ===========================================================================
0001220C                            
0001220C                            MBlock_Main:	; Routine 0
0001220C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012210 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00012218 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
0001221E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012224 6600                       		bne.s	loc_FE44
00012226 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
0001222E 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00012234 117C 0007 0016             		move.b	#7,obHeight(a0)
0001223A                            
0001223A                            loc_FE44:
0001223A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012240 6600                       		bne.s	loc_FE60
00012242 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00012248 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
0001224E 6700                       		beq.s	loc_FE60	; if yes, branch
00012250 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00012256                            
00012256                            loc_FE60:
00012256 117C 0004 0001             		move.b	#4,obRender(a0)
0001225C 7000                       		moveq	#0,d0
0001225E 1028 0028                  		move.b	obSubtype(a0),d0
00012262 E648                       		lsr.w	#3,d0
00012264 0240 001E                  		andi.w	#$1E,d0
00012268 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
0001226C 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012270 115A 001A                  		move.b	(a2)+,obFrame(a0)
00012274 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001227A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012280 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00012286 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001228C                            
0001228C                            MBlock_Platform: ; Routine 2
0001228C 6100 0000                  		bsr.w	MBlock_Move
00012290 7200                       		moveq	#0,d1
00012292 1228 0014                  		move.b	obActWid(a0),d1
00012296 4EB9 0000 8CAC             		jsr	(PlatformObject).l
0001229C 6000                       		bra.s	MBlock_ChkDel
0001229E                            ; ===========================================================================
0001229E                            
0001229E                            MBlock_StandOn:	; Routine 4
0001229E 7200                       		moveq	#0,d1
000122A0 1228 0014                  		move.b	obActWid(a0),d1
000122A4 4EB9 0000 8E20             		jsr	(ExitPlatform).l
000122AA 3F28 0008                  		move.w	obX(a0),-(sp)
000122AE 6100 0000                  		bsr.w	MBlock_Move
000122B2 341F                       		move.w	(sp)+,d2
000122B4 4EB9 0000 938A             		jsr	(MvSonicOnPtfm2).l
000122BA                            
000122BA                            MBlock_ChkDel:
000122D8 6000 D57E                  		bra.w	DisplaySprite
000122DC                            ; ===========================================================================
000122DC                            
000122DC                            MBlock_Move:
000122DC 7000                       		moveq	#0,d0
000122DE 1028 0028                  		move.b	obSubtype(a0),d0
000122E2 0240 000F                  		andi.w	#$F,d0
000122E6 D040                       		add.w	d0,d0
000122E8 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000122EC 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000122F0                            ; ===========================================================================
000122F0 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000122F4 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000122F8 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000122FC 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00012300 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00012304 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00012306                            ; ===========================================================================
00012306                            
00012306                            MBlock_Type00:
00012306 4E75                       		rts	
00012308                            ; ===========================================================================
00012308                            
00012308                            MBlock_Type01:
00012308 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001230C 323C 0060                  		move.w	#$60,d1
00012310 0828 0000 0022             		btst	#0,obStatus(a0)
00012316 6700                       		beq.s	loc_FF26
00012318 4440                       		neg.w	d0
0001231A D041                       		add.w	d1,d0
0001231C                            
0001231C                            loc_FF26:
0001231C 3228 0030                  		move.w	mblock_origX(a0),d1
00012320 9240                       		sub.w	d0,d1
00012322 3141 0008                  		move.w	d1,obX(a0)
00012326 4E75                       		rts	
00012328                            ; ===========================================================================
00012328                            
00012328                            MBlock_Type02:
00012328 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
0001232E 6600                       		bne.s	MBlock_02_Wait
00012330 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012334                            
00012334                            MBlock_02_Wait:
00012334 4E75                       		rts	
00012336                            ; ===========================================================================
00012336                            
00012336                            MBlock_Type03:
00012336 7600                       		moveq	#0,d3
00012338 1628 0014                  		move.b	obActWid(a0),d3
0001233C 6100 0000                  		bsr.w	ObjHitWallRight
00012340 4A41                       		tst.w	d1		; has the platform hit a wall?
00012342 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00012344 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012348 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
0001234E 4E75                       		rts	
00012350                            ; ===========================================================================
00012350                            
00012350                            MBlock_03_End:
00012350 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00012354 4E75                       		rts	
00012356                            ; ===========================================================================
00012356                            
00012356                            MBlock_Type05:
00012356 7600                       		moveq	#0,d3
00012358 1628 0014                  		move.b	obActWid(a0),d3
0001235C 6100 0000                  		bsr.w	ObjHitWallRight
00012360 4A41                       		tst.w	d1		; has the platform hit a wall?
00012362 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00012364 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012368 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
0001236E 4E75                       		rts	
00012370                            ; ===========================================================================
00012370                            
00012370                            MBlock_05_End:
00012370 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00012374 4E75                       		rts	
00012376                            ; ===========================================================================
00012376                            
00012376                            MBlock_Type06:
00012376 6100 D4CC                  		bsr.w	SpeedToPos
0001237A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012380 6100 0000                  		bsr.w	ObjFloorDist
00012384 4A41                       		tst.w	d1		; has platform hit the floor?
00012386 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001238A D368 000C                  		add.w	d1,obY(a0)
0001238E 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012392 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00012396                            
00012396                            locret_FFA0:
00012396 4E75                       		rts	
00012398                            ; ===========================================================================
00012398                            
00012398                            MBlock_Type07:
00012398 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
0001239C 6700                       		beq.s	MBlock_07_ChkDel
0001239E 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
000123A2                            
000123A2                            MBlock_07_ChkDel:
000123A2 588F                       		addq.l	#4,sp
000123C2 4E75                       		rts	
000123C4                            ; ===========================================================================
000123C4                            
000123C4                            MBlock_Type08:
000123C4 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000123C8 323C 0080                  		move.w	#$80,d1
000123CC 0828 0000 0022             		btst	#0,obStatus(a0)
000123D2 6700                       		beq.s	loc_FFE2
000123D4 4440                       		neg.w	d0
000123D6 D041                       		add.w	d1,d0
000123D8                            
000123D8                            loc_FFE2:
000123D8 3228 0032                  		move.w	mblock_origY(a0),d1
000123DC 9240                       		sub.w	d0,d1
000123DE 3141 000C                  		move.w	d1,obY(a0)
000123E2 4E75                       		rts	
000123E4                            ; ===========================================================================
000123E4                            
000123E4                            MBlock_Type0A:
000123E4 7600                       		moveq	#0,d3
000123E6 1628 0014                  		move.b	obActWid(a0),d3
000123EA D643                       		add.w	d3,d3
000123EC 7208                       		moveq	#8,d1
000123EE 0828 0000 0022             		btst	#0,obStatus(a0)
000123F4 6700                       		beq.s	loc_10004
000123F6 4441                       		neg.w	d1
000123F8 4443                       		neg.w	d3
000123FA                            
000123FA                            loc_10004:
000123FA 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000123FE 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00012400 3028 0008                  		move.w	obX(a0),d0
00012404 9068 0030                  		sub.w	mblock_origX(a0),d0
00012408 B043                       		cmp.w	d3,d0
0001240A 6700                       		beq.s	MBlock_0A_Wait
0001240C D368 0008                  		add.w	d1,obX(a0)	; move platform
00012410 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00012416 4E75                       		rts	
00012418                            ; ===========================================================================
00012418                            
00012418                            MBlock_0A_Wait:
00012418 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001241C 6600                       		bne.s	locret_1002E	; if time remains, branch
0001241E 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00012424                            
00012424                            locret_1002E:
00012424 4E75                       		rts	
00012426                            ; ===========================================================================
00012426                            
00012426                            MBlock_0A_Back:
00012426 3028 0008                  		move.w	obX(a0),d0
0001242A 9068 0030                  		sub.w	mblock_origX(a0),d0
0001242E 6700                       		beq.s	MBlock_0A_Reset
00012430 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00012434 4E75                       		rts	
00012436                            ; ===========================================================================
00012436                            
00012436                            MBlock_0A_Reset:
00012436 4268 0036                  		clr.w	$36(a0)
0001243A 5328 0028                  		subq.b	#1,obSubtype(a0)
0001243E 4E75                       		rts	
0001243E 4E75                       		rts	
00012440                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012440                            ; ---------------------------------------------------------------------------
00012440                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012440                            ; ---------------------------------------------------------------------------
00012440                            Map_MBlock_internal:
00012440 0000                       		dc.w @mz1-Map_MBlock_internal
00012442 0000                       		dc.w @mz2-Map_MBlock_internal
00012444 0000                       		dc.w @sbz-Map_MBlock_internal
00012446 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012448 0000                       		dc.w @mz3-Map_MBlock_internal
0001244A 01                         @mz1:		dc.b 1
0001244B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012450 02                         @mz2:		dc.b 2
00012451 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012456 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001245B 04                         @sbz:		dc.b 4
0001245C F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012461 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012466 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001246B 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012470 04                         @sbzwide:	dc.b 4
00012471 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012476 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001247B F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012480 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012485 03                         @mz3:		dc.b 3
00012486 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001248B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012490 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012496 00                         		even
00012496 00                         		even
00012496                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012496                            ; ---------------------------------------------------------------------------
00012496                            ; Sprite mappings - moving block (LZ)
00012496                            ; ---------------------------------------------------------------------------
00012496                            Map_MBlockLZ_internal:
00012496 0000                       		dc.w @0-Map_MBlockLZ_internal
00012498 01                         @0:		dc.b 1
00012499 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001249E                            		even
0001249E                            		even
0001249E                            
0001249E                            		include	"_incObj\55 Basaran.asm"
0001249E                            ; ---------------------------------------------------------------------------
0001249E                            ; Object 55 - Basaran enemy (MZ)
0001249E                            ; ---------------------------------------------------------------------------
0001249E                            
0001249E                            Basaran:
0001249E 7000                       		moveq	#0,d0
000124A0 1028 0024                  		move.b	obRoutine(a0),d0
000124A4 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
000124A8 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
000124AC                            ; ===========================================================================
000124AC 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
000124AE 0000                       		dc.w Bas_Action-Bas_Index
000124B0                            ; ===========================================================================
000124B0                            
000124B0                            Bas_Main:	; Routine 0
000124B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000124B4 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
000124BC 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
000124C2 117C 0004 0001             		move.b	#4,obRender(a0)
000124C8 117C 000C 0016             		move.b	#$C,obHeight(a0)
000124CE 317C 0100 0018             		move.w	#$100,obPriority(a0)
000124D4 117C 000B 0020             		move.b	#$B,obColType(a0)
000124DA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000124E0                            
000124E0                            Bas_Action:	; Routine 2
000124E0 7000                       		moveq	#0,d0
000124E2 1028 0025                  		move.b	ob2ndRout(a0),d0
000124E6 323B 0000                  		move.w	@index(pc,d0.w),d1
000124EA 4EBB 1000                  		jsr	@index(pc,d1.w)
000124EE 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000124F4 6100 A418                  		bsr.w	AnimateSprite
000124F8 6000 F412                  		bra.w	RememberState
000124FC                            ; ===========================================================================
000124FC 0000                       @index:		dc.w @dropcheck-@index
000124FE 0000                       		dc.w @dropfly-@index
00012500 0000                       		dc.w @flapsound-@index
00012502 0000                       		dc.w @flyup-@index
00012504                            ; ===========================================================================
00012504                            
00012504                            @dropcheck:
00012504 343C 0080                  		move.w	#$80,d2
00012508 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
0001250C 6400                       		bcc.s	@nodrop		; if not, branch
0001250E 3038 D00C                  		move.w	(v_player+obY).w,d0
00012512 3140 0036                  		move.w	d0,$36(a0)
00012516 9068 000C                  		sub.w	obY(a0),d0
0001251A 6500                       		bcs.s	@nodrop
0001251C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012520 6400                       		bcc.s	@nodrop		; if not, branch
00012522 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00012526 6600                       		bne.s	@nodrop		; if yes, branch
00012528                            
00012528 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001252C D007                       		add.b	d7,d0
0001252E 0200 0007                  		andi.b	#7,d0
00012532 6600                       		bne.s	@nodrop
00012534 117C 0001 001C             		move.b	#1,obAnim(a0)
0001253A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001253E                            
0001253E                            	@nodrop:
0001253E 4E75                       		rts	
00012540                            ; ===========================================================================
00012540                            
00012540                            @dropfly:
00012540 6100 D302                  		bsr.w	SpeedToPos
00012544 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
0001254A 343C 0080                  		move.w	#$80,d2
0001254E 6100 0000                  		bsr.w	@chkdistance
00012552 3028 0036                  		move.w	$36(a0),d0
00012556 9068 000C                  		sub.w	obY(a0),d0
0001255A 6500                       		bcs.s	@chkdel
0001255C 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012560 6400                       		bcc.s	@dropmore	; if not, branch
00012562 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012566 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
0001256C 117C 0002 001C             		move.b	#2,obAnim(a0)
00012572 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012576                            
00012576                            	@dropmore:
00012576 4E75                       		rts	
00012578                            
00012578                            	@chkdel:
00012578 4A28 0001                  		tst.b	obRender(a0)
0001257C 6A00 D31A                  		bpl.w	DeleteObject
00012580 4E75                       		rts	
00012582                            ; ===========================================================================
00012582                            
00012582                            @flapsound:
00012582 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012586 0200 000F                  		andi.b	#$F,d0
0001258A 6600                       		bne.s	@nosound
00012596                            
00012596                            	@nosound:
00012596 6100 D2AC                  		bsr.w	SpeedToPos
0001259A 3038 D008                  		move.w	(v_player+obX).w,d0
0001259E 9068 0008                  		sub.w	obX(a0),d0
000125A2 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
000125A4 4440                       		neg.w	d0
000125A6                            
000125A6                            	@isright:
000125A6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
000125AA 6500                       		bcs.s	@dontflyup	; if yes, branch
000125AC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000125B0 D007                       		add.b	d7,d0
000125B2 0200 0007                  		andi.b	#7,d0
000125B6 6600                       		bne.s	@dontflyup
000125B8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000125BC                            
000125BC                            @dontflyup:
000125BC 4E75                       		rts	
000125BE                            ; ===========================================================================
000125BE                            
000125BE                            @flyup:
000125BE 6100 D284                  		bsr.w	SpeedToPos
000125C2 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
000125C8 6100 0000                  		bsr.w	ObjHitCeiling
000125CC 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000125CE 6A00                       		bpl.s	@noceiling	; if not, branch
000125D0 9368 000C                  		sub.w	d1,obY(a0)
000125D4 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000125DA 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000125DE 4268 0012                  		clr.w	obVelY(a0)
000125E2 4228 001C                  		clr.b	obAnim(a0)
000125E6 4228 0025                  		clr.b	ob2ndRout(a0)
000125EA                            
000125EA                            	@noceiling:
000125EA 4E75                       		rts	
000125EC                            ; ===========================================================================
000125EC                            
000125EC                            ; Subroutine to check Sonic's distance from the basaran
000125EC                            
000125EC                            ; input:
000125EC                            ;	d2 = distance to compare
000125EC                            
000125EC                            ; output:
000125EC                            ;	d0 = distance between Sonic and basaran
000125EC                            ;	d1 = speed/direction for basaran to fly
000125EC                            
000125EC                            @chkdistance:
000125EC 323C 0100                  		move.w	#$100,d1
000125F0 08E8 0000 0022             		bset	#0,obStatus(a0)
000125F6 3038 D008                  		move.w	(v_player+obX).w,d0
000125FA 9068 0008                  		sub.w	obX(a0),d0
000125FE 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
00012600 4440                       		neg.w	d0
00012602 4441                       		neg.w	d1
00012604 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001260A                            
0001260A                            	@right:
0001260A B042                       		cmp.w	d2,d0
0001260C 4E75                       		rts	
0001260E                            ; ===========================================================================
0001260E                            ; unused crap
0001260E 6100 D234                  		bsr.w	SpeedToPos
00012612 6100 D244                  		bsr.w	DisplaySprite
00012616 4A28 0001                  		tst.b	obRender(a0)
0001261A 6A00 D27C                  		bpl.w	DeleteObject
0001261E 4E75                       		rts	
0001261E 4E75                       		rts	
00012620                            		include	"_anim\Basaran.asm"
00012620                            ; ---------------------------------------------------------------------------
00012620                            ; Animation script - Basaran enemy
00012620                            ; ---------------------------------------------------------------------------
00012620 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012622 0000                       		dc.w @fall-Ani_Bas
00012624 0000                       		dc.w @fly-Ani_Bas
00012626 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001262A 00                         		even
0001262A 0F01 FF                    @fall:		dc.b $F, 1, afEnd
0001262E 00                         		even
0001262E 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
00012634                            		even
00012634                            		even
00012634                            Map_Bas:	include	"_maps\Basaran.asm"
00012634                            ; --------------------------------------------------------------------------------
00012634                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012634                            ; --------------------------------------------------------------------------------
00012634                            
00012634                            SME_RhYYA:	
00012634 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
00012638 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
0001263C 01                         SME_RhYYA_8:	dc.b 1	
0001263D F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012642 03                         SME_RhYYA_E:	dc.b 3	
00012643 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012648 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
0001264D 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012652 04                         SME_RhYYA_1E:	dc.b 4	
00012653 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012658 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
0001265D 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012662 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012667 04                         SME_RhYYA_33:	dc.b 4	
00012668 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
0001266D 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012672 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012677 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
0001267C                            		even
0001267C                            		even
0001267C                            
0001267C                            		include	"_incObj\56 Floating Blocks and Doors.asm"
0001267C                            ; ---------------------------------------------------------------------------
0001267C                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
0001267C                            ; ---------------------------------------------------------------------------
0001267C                            
0001267C                            FloatingBlock:
0001267C 7000                       		moveq	#0,d0
0001267E 1028 0024                  		move.b	obRoutine(a0),d0
00012682 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012686 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001268A                            ; ===========================================================================
0001268A 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
0001268C 0000                       		dc.w FBlock_Action-FBlock_Index
0001268E                            
0001268E =00000034                  fb_origX:	equ $34		; original x-axis position
0001268E =00000030                  fb_origY:	equ $30		; original y-axis position
0001268E =0000003A                  fb_height:	equ $3A		; total object height
0001268E =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
0001268E                            
0001268E                            FBlock_Var:	; width/2, height/2
0001268E 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012690 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012692 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012694 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012696 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012698 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001269A 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001269C 4010                       		dc.b  $40, $10	; subtype 7x/Fx
0001269E                            ; ===========================================================================
0001269E                            
0001269E                            FBlock_Main:	; Routine 0
0001269E 5428 0024                  		addq.b	#2,obRoutine(a0)
000126A2 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
000126AA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000126B0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000126B6 6600                       		bne.s	@notLZ
000126B8 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
000126BE                            
000126BE                            	@notLZ:
000126BE 117C 0004 0001             		move.b	#4,obRender(a0)
000126C4 317C 0180 0018             		move.w	#$180,obPriority(a0)
000126CA 7000                       		moveq	#0,d0
000126CC 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000126D0 E648                       		lsr.w	#3,d0
000126D2 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000126D6 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000126DA 115A 0014                  		move.b	(a2)+,obActWid(a0)
000126DE 1152 0016                  		move.b	(a2),obHeight(a0)
000126E2 E248                       		lsr.w	#1,d0
000126E4 1140 001A                  		move.b	d0,obFrame(a0)
000126E8 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126EE 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000126F4 7000                       		moveq	#0,d0
000126F6 1012                       		move.b	(a2),d0
000126F8 D040                       		add.w	d0,d0
000126FA 3140 003A                  		move.w	d0,fb_height(a0)
000126FE 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012704 6600                       			bne.s	@dontdelete
00012706 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
0001270C 6600                       			bne.s	@notatpos
0001270E 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012712 6700                       			beq.s	@dontdelete
00012714 4EF9 0000 F898             			jmp	(DeleteObject).l
0001271A                            	@notatpos:
0001271A 4228 0028                  			clr.b	obSubtype(a0)
0001271E 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012722 6600                       			bne.s	@dontdelete
00012724 4EF9 0000 F898             			jmp	(DeleteObject).l
0001272A                            	@dontdelete:
0001272A 7000                       		moveq	#0,d0
0001272C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012732 6700                       		beq.s	@stillnotLZ
00012734 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
00012738 0240 000F                  		andi.w	#$F,d0
0001273C 5140                       		subq.w	#8,d0
0001273E 6500                       		bcs.s	@stillnotLZ
00012740 E548                       		lsl.w	#2,d0
00012742 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012746 45F2 0000                  		lea	(a2,d0.w),a2
0001274A 4A52                       		tst.w	(a2)
0001274C 6A00                       		bpl.s	@stillnotLZ
0001274E 0868 0000 0022             		bchg	#0,obStatus(a0)
00012754                            
00012754                            	@stillnotLZ:
00012754 1028 0028                  		move.b	obSubtype(a0),d0
00012758 6A00                       		bpl.s	FBlock_Action
0001275A 0200 000F                  		andi.b	#$F,d0
0001275E 1140 003C                  		move.b	d0,fb_type(a0)
00012762 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012768 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
0001276E 6600                       		bne.s	@chkstate
00012770 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012776 317C 0080 003A             		move.w	#$80,fb_height(a0)
0001277C                            
0001277C                            @chkstate:
0001277C 45F8 FC00                  		lea	(v_objstate).w,a2
00012780 7000                       		moveq	#0,d0
00012782 1028 0023                  		move.b	obRespawnNo(a0),d0
00012786 6700                       		beq.s	FBlock_Action
00012788 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001278E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012794 6700                       		beq.s	FBlock_Action
00012796 5228 0028                  		addq.b	#1,obSubtype(a0)
0001279A 4268 003A                  		clr.w	fb_height(a0)
0001279E                            
0001279E                            FBlock_Action:	; Routine 2
0001279E 3F28 0008                  		move.w	obX(a0),-(sp)
000127A2 7000                       		moveq	#0,d0
000127A4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
000127A8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000127AC D040                       		add.w	d0,d0
000127AE 323B 0000                  		move.w	@index(pc,d0.w),d1
000127B2 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
000127B6 381F                       		move.w	(sp)+,d4
000127B8 4A28 0001                  		tst.b	obRender(a0)
000127BC 6A00                       		bpl.s	@chkdel
000127BE 7200                       		moveq	#0,d1
000127C0 1228 0014                  		move.b	obActWid(a0),d1
000127C4 0641 000B                  		addi.w	#$B,d1
000127C8 7400                       		moveq	#0,d2
000127CA 1428 0016                  		move.b	obHeight(a0),d2
000127CE 3602                       		move.w	d2,d3
000127D0 5243                       		addq.w	#1,d3
000127D2 6100 F5D0                  		bsr.w	SolidObject
000127D6                            
000127D6                            	@chkdel:
000127F2                            		@display:
000127F2 6000 D064                  			bra.w	DisplaySprite
000127F6                            		@chkdel2:
000127F6 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127FC 6600                       			bne.s	@delete
000127FE 4A28 0038                  			tst.b	$38(a0)
00012802 66EE                       			bne.s	@display
00012804                            		@delete:
00012804 4EF9 0000 F898             			jmp	(DeleteObject).l
0001280A                            ; ===========================================================================
0001280A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001280E 0000 0000                  		dc.w @type02-@index, @type03-@index
00012812 0000 0000                  		dc.w @type04-@index, @type05-@index
00012816 0000 0000                  		dc.w @type06-@index, @type07-@index
0001281A 0000 0000                  		dc.w @type08-@index, @type09-@index
0001281E 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012822 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00012826                            ; ===========================================================================
00012826                            
00012826                            @type00:
00012826                            ; doesn't move
00012826 4E75                       		rts	
00012828                            ; ===========================================================================
00012828                            
00012828                            @type01:
00012828                            ; moves side-to-side
00012828 323C 0040                  		move.w	#$40,d1		; set move distance
0001282C 7000                       		moveq	#0,d0
0001282E 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012832 6000                       		bra.s	@moveLR
00012834                            ; ===========================================================================
00012834                            
00012834                            @type02:
00012834                            ; moves side-to-side
00012834 323C 0080                  		move.w	#$80,d1		; set move distance
00012838 7000                       		moveq	#0,d0
0001283A 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001283E                            
0001283E                            	@moveLR:
0001283E 0828 0000 0022             		btst	#0,obStatus(a0)
00012844 6700                       		beq.s	@noflip
00012846 4440                       		neg.w	d0
00012848 D041                       		add.w	d1,d0
0001284A                            
0001284A                            	@noflip:
0001284A 3228 0034                  		move.w	fb_origX(a0),d1
0001284E 9240                       		sub.w	d0,d1
00012850 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012854 4E75                       		rts	
00012856                            ; ===========================================================================
00012856                            
00012856                            @type03:
00012856                            ; moves up/down
00012856 323C 0040                  		move.w	#$40,d1		; set move distance
0001285A 7000                       		moveq	#0,d0
0001285C 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012860 6000                       		bra.s	@moveUD
00012862                            ; ===========================================================================
00012862                            
00012862                            @type04:
00012862                            ; moves up/down
00012862 323C 0080                  		move.w	#$80,d1		; set move distance
00012866 7000                       		moveq	#0,d0
00012868 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001286C                            
0001286C                            	@moveUD:
0001286C 0828 0000 0022             		btst	#0,obStatus(a0)
00012872 6700                       		beq.s	@noflip04
00012874 4440                       		neg.w	d0
00012876 D041                       		add.w	d1,d0
00012878                            
00012878                            	@noflip04:
00012878 3228 0030                  		move.w	fb_origY(a0),d1
0001287C 9240                       		sub.w	d0,d1
0001287E 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012882 4E75                       		rts	
00012884                            ; ===========================================================================
00012884                            
00012884                            @type05:
00012884                            ; moves up when a switch is pressed
00012884 4A28 0038                  		tst.b	$38(a0)
00012888 6600                       		bne.s	@loc_104A4
0001288A 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012890 6600                       		bne.s	@aaa		; if not, branch
00012892 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012898 6600                       		bne.s	@aaa
0001289A 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001289E 3038 D008                  		move.w	(v_player+obX).w,d0
000128A2 B068 0008                  		cmp.w	obX(a0),d0
000128A6 6400                       		bcc.s	@aaa
000128A8 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
000128AE                            
000128AE                            	@aaa:
000128AE 45F8 F7E0                  		lea	(f_switch).w,a2
000128B2 7000                       		moveq	#0,d0
000128B4 1028 003C                  		move.b	fb_type(a0),d0
000128B8 0832 0000 0000             		btst	#0,(a2,d0.w)
000128BE 6700                       		beq.s	@loc_104AE
000128C0 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000128C6 6600                       		bne.s	@loc_1049E	; if not, branch
000128C8 0C00 0003                  		cmpi.b	#3,d0
000128CC 6600                       		bne.s	@loc_1049E
000128CE 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000128D2                            
000128D2                            @loc_1049E:
000128D2 117C 0001 0038             		move.b	#1,$38(a0)
000128D8                            
000128D8                            @loc_104A4:
000128D8 4A68 003A                  		tst.w	fb_height(a0)
000128DC 6700                       		beq.s	@loc_104C8
000128DE 5568 003A                  		subq.w	#2,fb_height(a0)
000128E2                            
000128E2                            @loc_104AE:
000128E2 3028 003A                  		move.w	fb_height(a0),d0
000128E6 0828 0000 0022             		btst	#0,$22(a0)
000128EC 6700                       		beq.s	@loc_104BC
000128EE 4440                       		neg.w	d0
000128F0                            
000128F0                            @loc_104BC:
000128F0 3228 0030                  		move.w	fb_origY(a0),d1
000128F4 D240                       		add.w	d0,d1
000128F6 3141 000C                  		move.w	d1,obY(a0)
000128FA 4E75                       		rts	
000128FC                            ; ===========================================================================
000128FC                            
000128FC                            @loc_104C8:
000128FC 5228 0028                  		addq.b	#1,$28(a0)
00012900 4228 0038                  		clr.b	$38(a0)
00012904 45F8 FC00                  		lea	(v_objstate).w,a2
00012908 7000                       		moveq	#0,d0
0001290A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001290E 67D2                       		beq.s	@loc_104AE
00012910 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012916 60CA                       		bra.s	@loc_104AE
00012918                            ; ===========================================================================
00012918                            
00012918                            @type06:
00012918 4A28 0038                  		tst.b	$38(a0)
0001291C 6600                       		bne.s	@loc_10500
0001291E 45F8 F7E0                  		lea	(f_switch).w,a2
00012922 7000                       		moveq	#0,d0
00012924 1028 003C                  		move.b	fb_type(a0),d0
00012928 4A32 0000                  		tst.b	(a2,d0.w)
0001292C 6A00                       		bpl.s	@loc_10512
0001292E 117C 0001 0038             		move.b	#1,$38(a0)
00012934                            
00012934                            @loc_10500:
00012934 7000                       		moveq	#0,d0
00012936 1028 0016                  		move.b	obHeight(a0),d0
0001293A D040                       		add.w	d0,d0
0001293C B068 003A                  		cmp.w	fb_height(a0),d0
00012940 6700                       		beq.s	@loc_1052C
00012942 5468 003A                  		addq.w	#2,fb_height(a0)
00012946                            
00012946                            @loc_10512:
00012946 3028 003A                  		move.w	fb_height(a0),d0
0001294A 0828 0000 0022             		btst	#0,obStatus(a0)
00012950 6700                       		beq.s	@loc_10520
00012952 4440                       		neg.w	d0
00012954                            
00012954                            @loc_10520:
00012954 3228 0030                  		move.w	fb_origY(a0),d1
00012958 D240                       		add.w	d0,d1
0001295A 3141 000C                  		move.w	d1,obY(a0)
0001295E 4E75                       		rts	
00012960                            ; ===========================================================================
00012960                            
00012960                            @loc_1052C:
00012960 5328 0028                  		subq.b	#1,obSubtype(a0)
00012964 4228 0038                  		clr.b	$38(a0)
00012968 45F8 FC00                  		lea	(v_objstate).w,a2
0001296C 7000                       		moveq	#0,d0
0001296E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012972 67D2                       		beq.s	@loc_10512
00012974 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001297A 60CA                       		bra.s	@loc_10512
0001297C                            ; ===========================================================================
0001297C                            
0001297C                            @type07:
0001297C 4A28 0038                  		tst.b	$38(a0)
00012980 6600                       		bne.s	@loc_1055E
00012982 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012986 6700                       		beq.s	@locret_10578
00012988 117C 0001 0038             		move.b	#1,$38(a0)
0001298E 4268 003A                  		clr.w	fb_height(a0)
00012992                            
00012992                            @loc_1055E:
00012992 5268 0008                  		addq.w	#1,obX(a0)
00012996 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001299C 5268 003A                  		addq.w	#1,fb_height(a0)
000129A0 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
000129A6 6600                       		bne.s	@locret_10578
000129A8 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
000129AE 4228 0038                  			clr.b	$38(a0)
000129B2 4228 0028                  		clr.b	obSubtype(a0)
000129B6                            
000129B6                            @locret_10578:
000129B6 4E75                       		rts	
000129B8                            ; ===========================================================================
000129B8                            
000129B8                            @type0C:
000129B8 4A28 0038                  		tst.b	$38(a0)
000129BC 6600                       		bne.s	@loc_10598
000129BE 45F8 F7E0                  		lea	(f_switch).w,a2
000129C2 7000                       		moveq	#0,d0
000129C4 1028 003C                  		move.b	fb_type(a0),d0
000129C8 0832 0000 0000             		btst	#0,(a2,d0.w)
000129CE 6700                       		beq.s	@loc_105A2
000129D0 117C 0001 0038             		move.b	#1,$38(a0)
000129D6                            
000129D6                            @loc_10598:
000129D6 4A68 003A                  		tst.w	fb_height(a0)
000129DA 6700                       		beq.s	@loc_105C0
000129DC 5568 003A                  		subq.w	#2,fb_height(a0)
000129E0                            
000129E0                            @loc_105A2:
000129E0 3028 003A                  		move.w	fb_height(a0),d0
000129E4 0828 0000 0022             		btst	#0,obStatus(a0)
000129EA 6700                       		beq.s	@loc_105B4
000129EC 4440                       		neg.w	d0
000129EE 0640 0080                  		addi.w	#$80,d0
000129F2                            
000129F2                            @loc_105B4:
000129F2 3228 0034                  		move.w	fb_origX(a0),d1
000129F6 D240                       		add.w	d0,d1
000129F8 3141 0008                  		move.w	d1,obX(a0)
000129FC 4E75                       		rts	
000129FE                            ; ===========================================================================
000129FE                            
000129FE                            @loc_105C0:
000129FE 5228 0028                  		addq.b	#1,obSubtype(a0)
00012A02 4228 0038                  		clr.b	$38(a0)
00012A06 45F8 FC00                  		lea	(v_objstate).w,a2
00012A0A 7000                       		moveq	#0,d0
00012A0C 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A10 67CE                       		beq.s	@loc_105A2
00012A12 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012A18 60C6                       		bra.s	@loc_105A2
00012A1A                            ; ===========================================================================
00012A1A                            
00012A1A                            @type0D:
00012A1A 4A28 0038                  		tst.b	$38(a0)
00012A1E 6600                       		bne.s	@loc_105F8
00012A20 45F8 F7E0                  		lea	(f_switch).w,a2
00012A24 7000                       		moveq	#0,d0
00012A26 1028 003C                  		move.b	fb_type(a0),d0
00012A2A 4A32 0000                  		tst.b	(a2,d0.w)
00012A2E 6A00                       		bpl.s	@wtf
00012A30 117C 0001 0038             		move.b	#1,$38(a0)
00012A36                            
00012A36                            @loc_105F8:
00012A36 303C 0080                  		move.w	#$80,d0
00012A3A B068 003A                  		cmp.w	fb_height(a0),d0
00012A3E 6700                       		beq.s	@loc_10624
00012A40 5468 003A                  		addq.w	#2,fb_height(a0)
00012A44                            
00012A44                            @wtf:
00012A44 3028 003A                  		move.w	fb_height(a0),d0
00012A48 0828 0000 0022             		btst	#0,obStatus(a0)
00012A4E 6700                       		beq.s	@loc_10618
00012A50 4440                       		neg.w	d0
00012A52 0640 0080                  		addi.w	#$80,d0
00012A56                            
00012A56                            @loc_10618:
00012A56 3228 0034                  		move.w	fb_origX(a0),d1
00012A5A D240                       		add.w	d0,d1
00012A5C 3141 0008                  		move.w	d1,obX(a0)
00012A60 4E75                       		rts	
00012A62                            ; ===========================================================================
00012A62                            
00012A62                            @loc_10624:
00012A62 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A66 4228 0038                  		clr.b	$38(a0)
00012A6A 45F8 FC00                  		lea	(v_objstate).w,a2
00012A6E 7000                       		moveq	#0,d0
00012A70 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A74 67CE                       		beq.s	@wtf
00012A76 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A7C 60C6                       		bra.s	@wtf
00012A7E                            ; ===========================================================================
00012A7E                            
00012A7E                            @type08:
00012A7E 323C 0010                  		move.w	#$10,d1
00012A82 7000                       		moveq	#0,d0
00012A84 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012A88 E248                       		lsr.w	#1,d0
00012A8A 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A8E 6000                       		bra.s	@square
00012A90                            ; ===========================================================================
00012A90                            
00012A90                            @type09:
00012A90 323C 0030                  		move.w	#$30,d1
00012A94 7000                       		moveq	#0,d0
00012A96 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A9A 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A9E 6000                       		bra.s	@square
00012AA0                            ; ===========================================================================
00012AA0                            
00012AA0                            @type0A:
00012AA0 323C 0050                  		move.w	#$50,d1
00012AA4 7000                       		moveq	#0,d0
00012AA6 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012AAA 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012AAE 6000                       		bra.s	@square
00012AB0                            ; ===========================================================================
00012AB0                            
00012AB0                            @type0B:
00012AB0 323C 0070                  		move.w	#$70,d1
00012AB4 7000                       		moveq	#0,d0
00012AB6 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012ABA 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012ABE                            
00012ABE                            @square:
00012ABE 4A43                       		tst.w	d3
00012AC0 6600                       		bne.s	@loc_1068E
00012AC2 5228 0022                  		addq.b	#1,obStatus(a0)
00012AC6 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012ACC                            
00012ACC                            @loc_1068E:
00012ACC 1428 0022                  		move.b	obStatus(a0),d2
00012AD0 0202 0003                  		andi.b	#3,d2
00012AD4 6600                       		bne.s	@loc_106AE
00012AD6 9041                       		sub.w	d1,d0
00012AD8 D068 0034                  		add.w	fb_origX(a0),d0
00012ADC 3140 0008                  		move.w	d0,obX(a0)
00012AE0 4441                       		neg.w	d1
00012AE2 D268 0030                  		add.w	fb_origY(a0),d1
00012AE6 3141 000C                  		move.w	d1,obY(a0)
00012AEA 4E75                       		rts	
00012AEC                            ; ===========================================================================
00012AEC                            
00012AEC                            @loc_106AE:
00012AEC 5302                       		subq.b	#1,d2
00012AEE 6600                       		bne.s	@loc_106CC
00012AF0 5341                       		subq.w	#1,d1
00012AF2 9041                       		sub.w	d1,d0
00012AF4 4440                       		neg.w	d0
00012AF6 D068 0030                  		add.w	fb_origY(a0),d0
00012AFA 3140 000C                  		move.w	d0,obY(a0)
00012AFE 5241                       		addq.w	#1,d1
00012B00 D268 0034                  		add.w	fb_origX(a0),d1
00012B04 3141 0008                  		move.w	d1,obX(a0)
00012B08 4E75                       		rts	
00012B0A                            ; ===========================================================================
00012B0A                            
00012B0A                            @loc_106CC:
00012B0A 5302                       		subq.b	#1,d2
00012B0C 6600                       		bne.s	@loc_106EA
00012B0E 5341                       		subq.w	#1,d1
00012B10 9041                       		sub.w	d1,d0
00012B12 4440                       		neg.w	d0
00012B14 D068 0034                  		add.w	fb_origX(a0),d0
00012B18 3140 0008                  		move.w	d0,obX(a0)
00012B1C 5241                       		addq.w	#1,d1
00012B1E D268 0030                  		add.w	fb_origY(a0),d1
00012B22 3141 000C                  		move.w	d1,obY(a0)
00012B26 4E75                       		rts	
00012B28                            ; ===========================================================================
00012B28                            
00012B28                            @loc_106EA:
00012B28 9041                       		sub.w	d1,d0
00012B2A D068 0030                  		add.w	fb_origY(a0),d0
00012B2E 3140 000C                  		move.w	d0,obY(a0)
00012B32 4441                       		neg.w	d1
00012B34 D268 0034                  		add.w	fb_origX(a0),d1
00012B38 3141 0008                  		move.w	d1,obX(a0)
00012B3C 4E75                       		rts	
00012B3C 4E75                       		rts	
00012B3E                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012B3E                            ; ---------------------------------------------------------------------------
00012B3E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012B3E                            ; ---------------------------------------------------------------------------
00012B3E                            Map_FBlock_internal:
00012B3E 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012B40 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012B42 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012B44 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012B46 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012B48 0000                       		dc.w @slz-Map_FBlock_internal
00012B4A 0000                       		dc.w @lzvert-Map_FBlock_internal
00012B4C 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012B4E 01                         @syz1x1:	dc.b 1
00012B4F F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012B54 04                         @syz2x2:	dc.b 4
00012B55 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012B5A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012B5F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012B64 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012B69 02                         @syz1x2:	dc.b 2
00012B6A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012B6F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012B74 04                         @syzrect2x2:	dc.b 4
00012B75 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012B7A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012B7F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012B84 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012B89 03                         @syzrect1x3:	dc.b 3
00012B8A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B8F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B94 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B99 01                         @slz:		dc.b 1
00012B9A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B9F 02                         @lzvert:	dc.b 2
00012BA0 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012BA5 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012BAA 04                         @lzhoriz:	dc.b 4
00012BAB F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012BB0 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012BB5 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012BBA F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012BC0 00                         		even
00012BC0 00                         		even
00012BC0                            
00012BC0                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0                            ; Object 57 - spiked balls (SYZ, LZ)
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0                            
00012BC0                            SpikeBall:
00012BC0 7000                       		moveq	#0,d0
00012BC2 1028 0024                  		move.b	obRoutine(a0),d0
00012BC6 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012BCA 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012BCE                            ; ===========================================================================
00012BCE 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012BD0 0000                       		dc.w SBall_Move-SBall_Index
00012BD2 0000                       		dc.w SBall_Display-SBall_Index
00012BD4                            
00012BD4 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012BD4                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012BD4 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012BD4 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012BD4 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012BD4 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012BD4                            ; ===========================================================================
00012BD4                            
00012BD4                            SBall_Main:	; Routine 0
00012BD4 5428 0024                  		addq.b	#2,obRoutine(a0)
00012BD8 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012BE0 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012BE6 117C 0004 0001             		move.b	#4,obRender(a0)
00012BEC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BF2 117C 0008 0014             		move.b	#8,obActWid(a0)
00012BF8 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012BFE 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012C04 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012C0A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C10 6600                       		bne.s	@notlz
00012C12                            
00012C12 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012C18 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012C1E 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012C26                            
00012C26                            	@notlz:
00012C26 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C2A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012C2E 4881                       		ext.w	d1
00012C30 E741                       		asl.w	#3,d1		; multiply by 8
00012C32 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012C36 1028 0022                  		move.b	obStatus(a0),d0
00012C3A E418                       		ror.b	#2,d0
00012C3C 0200 00C0                  		andi.b	#$C0,d0
00012C40 1140 0026                  		move.b	d0,obAngle(a0)
00012C44 45E8 0029                  		lea	sball_childs(a0),a2
00012C48 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C4C 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012C50 14FC 0000                  		move.b	#0,(a2)+
00012C54 3601                       		move.w	d1,d3
00012C56 E94B                       		lsl.w	#4,d3
00012C58 1143 003C                  		move.b	d3,sball_radius(a0)
00012C5C 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012C5E 6500                       		bcs.s	@fail
00012C60 0828 0003 0028             		btst	#3,obSubtype(a0)
00012C66 6700                       		beq.s	@makechain
00012C68 5341                       		subq.w	#1,d1
00012C6A 6500                       		bcs.s	@fail
00012C6C                            
00012C6C                            @makechain:
00012C6C 6100 D184                  		bsr.w	FindFreeObj
00012C70 6600                       		bne.s	@fail
00012C72 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012C76 3A09                       		move.w	a1,d5		; get child object RAM address
00012C78 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012C7C EC4D                       		lsr.w	#6,d5		; divide by $40
00012C7E 0245 007F                  		andi.w	#$7F,d5
00012C82 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012C84 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012C8A 1290                       		move.b	0(a0),0(a1)
00012C8C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C92 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C98 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C9E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012CA4 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012CAA 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012CB0 0403 0010                  		subi.b	#$10,d3
00012CB4 1343 003C                  		move.b	d3,sball_radius(a1)
00012CB8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CBE 6600                       		bne.s	@notlzagain
00012CC0                            
00012CC0 4A03                       		tst.b	d3
00012CC2 6600                       		bne.s	@notlzagain
00012CC4 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012CCA                            
00012CCA                            	@notlzagain:
00012CCA 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012CCE                            
00012CCE                            	@fail:
00012CCE 3A08                       		move.w	a0,d5
00012CD0 0445 D000                  		subi.w	#$D000,d5
00012CD4 EC4D                       		lsr.w	#6,d5
00012CD6 0245 007F                  		andi.w	#$7F,d5
00012CDA 14C5                       		move.b	d5,(a2)+
00012CDC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CE2 6600                       		bne.s	SBall_Move
00012CE4                            
00012CE4 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012CEA 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012CF0                            
00012CF0                            SBall_Move:	; Routine 2
00012CF0 6100 0000                  		bsr.w	@movesub
00012CF4 6000 0000                  		bra.w	@chkdel
00012CF8                            ; ===========================================================================
00012CF8                            
00012CF8                            @movesub:
00012CF8 3028 003E                  		move.w	sball_speed(a0),d0
00012CFC D168 0026                  		add.w	d0,obAngle(a0)
00012D00 1028 0026                  		move.b	obAngle(a0),d0
00012D04 4EB9 0000 3D28             		jsr	(CalcSine).l
00012D0A 3428 0038                  		move.w	sball_origY(a0),d2
00012D0E 3628 003A                  		move.w	sball_origX(a0),d3
00012D12 45E8 0029                  		lea	sball_childs(a0),a2
00012D16 7C00                       		moveq	#0,d6
00012D18 1C1A                       		move.b	(a2)+,d6
00012D1A                            
00012D1A                            	@loop:
00012D1A 7800                       		moveq	#0,d4
00012D1C 181A                       		move.b	(a2)+,d4
00012D1E ED4C                       		lsl.w	#6,d4
00012D20 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012D26 2244                       		movea.l	d4,a1
00012D28 7800                       		moveq	#0,d4
00012D2A 1829 003C                  		move.b	sball_radius(a1),d4
00012D2E 2A04                       		move.l	d4,d5
00012D30 C9C0                       		muls.w	d0,d4
00012D32 E084                       		asr.l	#8,d4
00012D34 CBC1                       		muls.w	d1,d5
00012D36 E085                       		asr.l	#8,d5
00012D38 D842                       		add.w	d2,d4
00012D3A DA43                       		add.w	d3,d5
00012D3C 3344 000C                  		move.w	d4,obY(a1)
00012D40 3345 0008                  		move.w	d5,obX(a1)
00012D44 51CE FFD4                  		dbf	d6,@loop
00012D48 4E75                       		rts	
00012D4A                            ; ===========================================================================
00012D4A                            
00012D4A                            @chkdel:
00012D68 6000 CAEE                  		bra.w	DisplaySprite
00012D6C                            ; ===========================================================================
00012D6C                            
00012D6C                            @delete:
00012D6C 7400                       		moveq	#0,d2
00012D6E 45E8 0029                  		lea	sball_childs(a0),a2
00012D72 141A                       		move.b	(a2)+,d2
00012D74                            
00012D74                            	@deleteloop:
00012D74 7000                       		moveq	#0,d0
00012D76 101A                       		move.b	(a2)+,d0
00012D78 ED48                       		lsl.w	#6,d0
00012D7A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012D80 2240                       		movea.l	d0,a1
00012D82 6100 CB16                  		bsr.w	DeleteChild
00012D86 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012D8A                            
00012D8A 4E75                       		rts	
00012D8C                            ; ===========================================================================
00012D8C                            
00012D8C                            SBall_Display:	; Routine 4
00012D8C 6000 CACA                  		bra.w	DisplaySprite
00012D8C 6000 CACA                  		bra.w	DisplaySprite
00012D90                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D90                            ; ---------------------------------------------------------------------------
00012D90                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D90                            ; ---------------------------------------------------------------------------
00012D90                            Map_SBall_internal:
00012D90 0000                       		dc.w @0-Map_SBall_internal
00012D92 01                         @0:		dc.b 1
00012D93 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D98                            		even
00012D98                            		even
00012D98                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D98                            ; ---------------------------------------------------------------------------
00012D98                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D98                            ; ---------------------------------------------------------------------------
00012D98                            Map_SBall2_internal:
00012D98 0000                       		dc.w @chain-Map_SBall2_internal
00012D9A 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D9C 0000                       		dc.w @base-Map_SBall2_internal
00012D9E 01                         @chain:		dc.b 1
00012D9F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012DA4 01                         @spikeball:	dc.b 1
00012DA5 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012DAA 01                         @base:		dc.b 1
00012DAB F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012DB0                            		even
00012DB0                            		even
00012DB0                            		include	"_incObj\58 Big Spiked Ball.asm"
00012DB0                            ; ---------------------------------------------------------------------------
00012DB0                            ; Object 58 - giant spiked balls (SYZ)
00012DB0                            ; ---------------------------------------------------------------------------
00012DB0                            
00012DB0                            BigSpikeBall:
00012DB0 7000                       		moveq	#0,d0
00012DB2 1028 0024                  		move.b	obRoutine(a0),d0
00012DB6 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012DBA 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012DBE                            ; ===========================================================================
00012DBE 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012DC0 0000                       		dc.w BBall_Move-BBall_Index
00012DC2                            
00012DC2 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012DC2 =00000038                  bball_origY:	equ $38		; original y-axis position
00012DC2 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012DC2 =0000003E                  bball_speed:	equ $3E		; speed
00012DC2                            ; ===========================================================================
00012DC2                            
00012DC2                            BBall_Main:	; Routine 0
00012DC2 5428 0024                  		addq.b	#2,obRoutine(a0)
00012DC6 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012DCE 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012DD4 117C 0004 0001             		move.b	#4,obRender(a0)
00012DDA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DE0 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DE6 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012DEC 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012DF2 117C 0086 0020             		move.b	#$86,obColType(a0)
00012DF8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012DFC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012E00 4881                       		ext.w	d1
00012E02 E741                       		asl.w	#3,d1		; multiply by 8
00012E04 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012E08 1028 0022                  		move.b	obStatus(a0),d0
00012E0C E418                       		ror.b	#2,d0
00012E0E 0200 00C0                  		andi.b	#$C0,d0
00012E12 1140 0026                  		move.b	d0,obAngle(a0)
00012E16 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012E1C                            
00012E1C                            BBall_Move:	; Routine 2
00012E1C 7000                       		moveq	#0,d0
00012E1E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012E22 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012E26 D040                       		add.w	d0,d0
00012E28 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E2C 4EBB 1000                  		jsr	@index(pc,d1.w)
00012E4E 6000 CA08                  		bra.w	DisplaySprite
00012E52                            ; ===========================================================================
00012E52 0000                       @index:		dc.w @type00-@index
00012E54 0000                       		dc.w @type01-@index
00012E56 0000                       		dc.w @type02-@index
00012E58 0000                       		dc.w @type03-@index
00012E5A                            ; ===========================================================================
00012E5A                            
00012E5A                            @type00:
00012E5A 4E75                       		rts	
00012E5C                            ; ===========================================================================
00012E5C                            
00012E5C                            @type01:
00012E5C 323C 0060                  		move.w	#$60,d1
00012E60 7000                       		moveq	#0,d0
00012E62 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E66 0828 0000 0022             		btst	#0,obStatus(a0)
00012E6C 6700                       		beq.s	@noflip1
00012E6E 4440                       		neg.w	d0
00012E70 D041                       		add.w	d1,d0
00012E72                            
00012E72                            	@noflip1:
00012E72 3228 003A                  		move.w	bball_origX(a0),d1
00012E76 9240                       		sub.w	d0,d1
00012E78 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012E7C 4E75                       		rts	
00012E7E                            ; ===========================================================================
00012E7E                            
00012E7E                            @type02:
00012E7E 323C 0060                  		move.w	#$60,d1
00012E82 7000                       		moveq	#0,d0
00012E84 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E88 0828 0000 0022             		btst	#0,obStatus(a0)
00012E8E 6700                       		beq.s	@noflip2
00012E90 4440                       		neg.w	d0
00012E92 0640 0080                  		addi.w	#$80,d0
00012E96                            
00012E96                            	@noflip2:
00012E96 3228 0038                  		move.w	bball_origY(a0),d1
00012E9A 9240                       		sub.w	d0,d1
00012E9C 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012EA0 4E75                       		rts	
00012EA2                            ; ===========================================================================
00012EA2                            
00012EA2                            @type03:
00012EA2 3028 003E                  		move.w	bball_speed(a0),d0
00012EA6 D168 0026                  		add.w	d0,obAngle(a0)
00012EAA 1028 0026                  		move.b	obAngle(a0),d0
00012EAE 4EB9 0000 3D28             		jsr	(CalcSine).l
00012EB4 3428 0038                  		move.w	bball_origY(a0),d2
00012EB8 3628 003A                  		move.w	bball_origX(a0),d3
00012EBC 7800                       		moveq	#0,d4
00012EBE 1828 003C                  		move.b	bball_radius(a0),d4
00012EC2 2A04                       		move.l	d4,d5
00012EC4 C9C0                       		muls.w	d0,d4
00012EC6 E084                       		asr.l	#8,d4
00012EC8 CBC1                       		muls.w	d1,d5
00012ECA E085                       		asr.l	#8,d5
00012ECC D842                       		add.w	d2,d4
00012ECE DA43                       		add.w	d3,d5
00012ED0 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012ED4 3145 0008                  		move.w	d5,obX(a0)
00012ED8 4E75                       		rts	
00012ED8 4E75                       		rts	
00012EDA                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012EDA                            ; --------------------------------------------------------------------------------
00012EDA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012EDA                            ; --------------------------------------------------------------------------------
00012EDA                            
00012EDA                            SME_u_DKx:	
00012EDA 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012EDE 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012EE0 05                         SME_u_DKx_6:	dc.b 5	
00012EE1 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012EE6 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012EEB F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012EF0 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012EF5 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012EFA 01                         SME_u_DKx_20:	dc.b 1	
00012EFB F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012F00 02                         SME_u_DKx_26:	dc.b 2	
00012F01 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012F06 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012F0C 00                         		even
00012F0C 00                         		even
00012F0C                            		include	"_incObj\59 SLZ Elevators.asm"
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C                            
00012F0C                            Elevator:
00012F0C 7000                       		moveq	#0,d0
00012F0E 1028 0024                  		move.b	obRoutine(a0),d0
00012F12 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012F16 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012F38 6000 C91E                  		bra.w	DisplaySprite
00012F3C                            ; ===========================================================================
00012F3C 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012F3E 0000                       		dc.w Elev_Platform-Elev_Index
00012F40 0000                       		dc.w Elev_Action-Elev_Index
00012F42 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012F44                            
00012F44 =00000032                  elev_origX:	equ $32		; original x-axis position
00012F44 =00000030                  elev_origY:	equ $30		; original y-axis position
00012F44 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012F44                            
00012F44 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012F46                            
00012F46 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012F48 2001                       		dc.b $20, 1
00012F4A 3401                       		dc.b $34, 1
00012F4C 1003                       		dc.b $10, 3
00012F4E 2003                       		dc.b $20, 3
00012F50 3403                       		dc.b $34, 3
00012F52 1401                       		dc.b $14, 1
00012F54 2401                       		dc.b $24, 1
00012F56 2C01                       		dc.b $2C, 1
00012F58 1403                       		dc.b $14, 3
00012F5A 2403                       		dc.b $24, 3
00012F5C 2C03                       		dc.b $2C, 3
00012F5E 2005                       		dc.b $20, 5
00012F60 2007                       		dc.b $20, 7
00012F62 3009                       		dc.b $30, 9
00012F64                            ; ===========================================================================
00012F64                            
00012F64                            Elev_Main:	; Routine 0
00012F64 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F68 7000                       		moveq	#0,d0
00012F6A 1028 0028                  		move.b	obSubtype(a0),d0
00012F6E 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012F70 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012F74 0240 007F                  		andi.w	#$7F,d0
00012F78 C0FC 0006                  		mulu.w	#6,d0
00012F7C 3140 003C                  		move.w	d0,elev_dist(a0)
00012F80 3140 003E                  		move.w	d0,$3E(a0)
00012F84 588F                       		addq.l	#4,sp
00012F86 4E75                       		rts	
00012F88                            ; ===========================================================================
00012F88                            
00012F88                            	@normal:
00012F88 E648                       		lsr.w	#3,d0
00012F8A 0240 001E                  		andi.w	#$1E,d0
00012F8E 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F92 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F96 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F9A 7000                       		moveq	#0,d0
00012F9C 1028 0028                  		move.b	obSubtype(a0),d0
00012FA0 D040                       		add.w	d0,d0
00012FA2 0240 001E                  		andi.w	#$1E,d0
00012FA6 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012FAA 101A                       		move.b	(a2)+,d0
00012FAC E548                       		lsl.w	#2,d0
00012FAE 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012FB2 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012FB6 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012FBE 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012FC4 117C 0004 0001             		move.b	#4,obRender(a0)
00012FCA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012FD0 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012FD6 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012FDC                            
00012FDC                            Elev_Platform:	; Routine 2
00012FDC 7200                       		moveq	#0,d1
00012FDE 1228 0014                  		move.b	obActWid(a0),d1
00012FE2 4EB9 0000 8CAC             		jsr	(PlatformObject).l
00012FE8 6000 0000                  		bra.w	Elev_Types
00012FEC                            ; ===========================================================================
00012FEC                            
00012FEC                            Elev_Action:	; Routine 4
00012FEC 7200                       		moveq	#0,d1
00012FEE 1228 0014                  		move.b	obActWid(a0),d1
00012FF2 4EB9 0000 8E20             		jsr	(ExitPlatform).l
00012FF8 3F28 0008                  		move.w	obX(a0),-(sp)
00012FFC 6100 0000                  		bsr.w	Elev_Types
00013000 341F                       		move.w	(sp)+,d2
00013002 4A10                       		tst.b	0(a0)
00013004 6700                       		beq.s	@deleted
00013006 4EF9 0000 938A             		jmp	(MvSonicOnPtfm2).l
0001300C                            
0001300C                            	@deleted:
0001300C 4E75                       		rts	
0001300E                            ; ===========================================================================
0001300E                            
0001300E                            Elev_Types:
0001300E 7000                       		moveq	#0,d0
00013010 1028 0028                  		move.b	obSubtype(a0),d0
00013014 0240 000F                  		andi.w	#$F,d0
00013018 D040                       		add.w	d0,d0
0001301A 323B 0000                  		move.w	@index(pc,d0.w),d1
0001301E 4EFB 1000                  		jmp	@index(pc,d1.w)
00013022                            ; ===========================================================================
00013022 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00013026 0000 0000                  		dc.w @type02-@index, @type01-@index
0001302A 0000 0000                  		dc.w @type04-@index, @type01-@index
0001302E 0000 0000                  		dc.w @type06-@index, @type01-@index
00013032 0000 0000                  		dc.w @type08-@index, @type09-@index
00013036                            ; ===========================================================================
00013036                            
00013036                            @type00:
00013036 4E75                       		rts	
00013038                            ; ===========================================================================
00013038                            
00013038                            @type01:
00013038 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
0001303E 6600                       		bne.s	@notstanding
00013040 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00013044                            
00013044                            	@notstanding:
00013044 4E75                       		rts	
00013046                            ; ===========================================================================
00013046                            
00013046                            @type02:
00013046 6100 0000                  		bsr.w	Elev_Move
0001304A 3028 0034                  		move.w	$34(a0),d0
0001304E 4440                       		neg.w	d0
00013050 D068 0030                  		add.w	elev_origY(a0),d0
00013054 3140 000C                  		move.w	d0,obY(a0)
00013058 4E75                       		rts	
0001305A                            ; ===========================================================================
0001305A                            
0001305A                            @type04:
0001305A 6100 0000                  		bsr.w	Elev_Move
0001305E 3028 0034                  		move.w	$34(a0),d0
00013062 D068 0030                  		add.w	elev_origY(a0),d0
00013066 3140 000C                  		move.w	d0,obY(a0)
0001306A 4E75                       		rts	
0001306C                            ; ===========================================================================
0001306C                            
0001306C                            @type06:
0001306C 6100 0000                  		bsr.w	Elev_Move
00013070 3028 0034                  		move.w	$34(a0),d0
00013074 E240                       		asr.w	#1,d0
00013076 4440                       		neg.w	d0
00013078 D068 0030                  		add.w	elev_origY(a0),d0
0001307C 3140 000C                  		move.w	d0,obY(a0)
00013080 3028 0034                  		move.w	$34(a0),d0
00013084 D068 0032                  		add.w	elev_origX(a0),d0
00013088 3140 0008                  		move.w	d0,obX(a0)
0001308C 4E75                       		rts	
0001308E                            ; ===========================================================================
0001308E                            
0001308E                            @type08:
0001308E 6100 0000                  		bsr.w	Elev_Move
00013092 3028 0034                  		move.w	$34(a0),d0
00013096 E240                       		asr.w	#1,d0
00013098 D068 0030                  		add.w	elev_origY(a0),d0
0001309C 3140 000C                  		move.w	d0,obY(a0)
000130A0 3028 0034                  		move.w	$34(a0),d0
000130A4 4440                       		neg.w	d0
000130A6 D068 0032                  		add.w	elev_origX(a0),d0
000130AA 3140 0008                  		move.w	d0,obX(a0)
000130AE 4E75                       		rts	
000130B0                            ; ===========================================================================
000130B0                            
000130B0                            @type09:
000130B0 6100 0000                  		bsr.w	Elev_Move
000130B4 3028 0034                  		move.w	$34(a0),d0
000130B8 4440                       		neg.w	d0
000130BA D068 0030                  		add.w	elev_origY(a0),d0
000130BE 3140 000C                  		move.w	d0,obY(a0)
000130C2 4A28 0028                  		tst.b	obSubtype(a0)
000130C6 6700 0000                  		beq.w	@typereset
000130CA 4E75                       		rts	
000130CC                            ; ===========================================================================
000130CC                            
000130CC                            	@typereset:
000130CC 0828 0003 0022             		btst	#3,obStatus(a0)
000130D2 6700                       		beq.s	@delete
000130D4 08E9 0001 0022             		bset	#1,obStatus(a1)
000130DA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000130E0 137C 0002 0024             		move.b	#2,obRoutine(a1)
000130E6                            
000130E6                            	@delete:
000130E6 6000 C7B0                  		bra.w	DeleteObject
000130EA                            
000130EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130EA                            
000130EA                            
000130EA                            Elev_Move:
000130EA 3028 0038                  		move.w	$38(a0),d0
000130EE 4A28 003A                  		tst.b	$3A(a0)
000130F2 6600                       		bne.s	loc_10CC8
000130F4 0C40 0800                  		cmpi.w	#$800,d0
000130F8 6400                       		bcc.s	loc_10CD0
000130FA 0640 0010                  		addi.w	#$10,d0
000130FE 6000                       		bra.s	loc_10CD0
00013100                            ; ===========================================================================
00013100                            
00013100                            loc_10CC8:
00013100 4A40                       		tst.w	d0
00013102 6700                       		beq.s	loc_10CD0
00013104 0440 0010                  		subi.w	#$10,d0
00013108                            
00013108                            loc_10CD0:
00013108 3140 0038                  		move.w	d0,$38(a0)
0001310C 48C0                       		ext.l	d0
0001310E E180                       		asl.l	#8,d0
00013110 D0A8 0034                  		add.l	$34(a0),d0
00013114 2140 0034                  		move.l	d0,$34(a0)
00013118 4840                       		swap	d0
0001311A 3428 003C                  		move.w	elev_dist(a0),d2
0001311E B042                       		cmp.w	d2,d0
00013120 6300                       		bls.s	loc_10CF0
00013122 117C 0001 003A             		move.b	#1,$3A(a0)
00013128                            
00013128                            loc_10CF0:
00013128 D442                       		add.w	d2,d2
0001312A B042                       		cmp.w	d2,d0
0001312C 6600                       		bne.s	locret_10CFA
0001312E 4228 0028                  		clr.b	obSubtype(a0)
00013132                            
00013132                            locret_10CFA:
00013132 4E75                       		rts	
00013134                            ; End of function Elev_Move
00013134                            
00013134                            ; ===========================================================================
00013134                            
00013134                            Elev_MakeMulti:	; Routine 6
00013134 5368 003C                  		subq.w	#1,elev_dist(a0)
00013138 6600                       		bne.s	@chkdel
0001313A 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013140 6100 CCB0                  		bsr.w	FindFreeObj
00013144 6600                       		bne.s	@chkdel
00013146 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
0001314A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013150 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013156 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001315C                            
0001315C                            @chkdel:
0001315C 588F                       		addq.l	#4,sp
0001317C 4E75                       		rts	
0001317C 4E75                       		rts	
0001317E                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
0001317E                            ; ---------------------------------------------------------------------------
0001317E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001317E                            ; ---------------------------------------------------------------------------
0001317E                            Map_Elev_internal:
0001317E 0000                       		dc.w @elevator-Map_Elev_internal
00013180 03                         @elevator:	dc.b 3
00013181 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013186 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001318B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013190                            		even
00013190                            		even
00013190                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013190                            ; ---------------------------------------------------------------------------
00013190                            ; Object 5A - platforms	moving in circles (SLZ)
00013190                            ; ---------------------------------------------------------------------------
00013190                            
00013190                            CirclingPlatform:
00013190 7000                       		moveq	#0,d0
00013192 1028 0024                  		move.b	obRoutine(a0),d0
00013196 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
0001319A 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
000131BC 6000 C69A                  		bra.w	DisplaySprite
000131C0                            ; ===========================================================================
000131C0 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
000131C2 0000                       		dc.w Circ_Platform-Circ_Index
000131C4 0000                       		dc.w Circ_Action-Circ_Index
000131C6                            
000131C6 =00000032                  circ_origX:	equ $32		; original x-axis position
000131C6 =00000030                  circ_origY:	equ $30		; original y-axis position
000131C6                            ; ===========================================================================
000131C6                            
000131C6                            Circ_Main:	; Routine 0
000131C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000131CA 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000131D2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000131D8 117C 0004 0001             		move.b	#4,obRender(a0)
000131DE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000131E4 117C 0018 0014             		move.b	#$18,obActWid(a0)
000131EA 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000131F0 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000131F6                            
000131F6                            Circ_Platform:	; Routine 2
000131F6 7200                       		moveq	#0,d1
000131F8 1228 0014                  		move.b	obActWid(a0),d1
000131FC 4EB9 0000 8CAC             		jsr	(PlatformObject).l
00013202 6000 0000                  		bra.w	Circ_Types
00013206                            ; ===========================================================================
00013206                            
00013206                            Circ_Action:	; Routine 4
00013206 7200                       		moveq	#0,d1
00013208 1228 0014                  		move.b	obActWid(a0),d1
0001320C 4EB9 0000 8E20             		jsr	(ExitPlatform).l
00013212 3F28 0008                  		move.w	obX(a0),-(sp)
00013216 6100 0000                  		bsr.w	Circ_Types
0001321A 341F                       		move.w	(sp)+,d2
0001321C 4EF9 0000 938A             		jmp	(MvSonicOnPtfm2).l
00013222                            ; ===========================================================================
00013222                            
00013222                            Circ_Types:
00013222 7000                       		moveq	#0,d0
00013224 1028 0028                  		move.b	obSubtype(a0),d0
00013228 0240 000C                  		andi.w	#$C,d0
0001322C E248                       		lsr.w	#1,d0
0001322E 323B 0000                  		move.w	@index(pc,d0.w),d1
00013232 4EFB 1000                  		jmp	@index(pc,d1.w)
00013236                            ; ===========================================================================
00013236 0000                       @index:		dc.w @type00-@index
00013238 0000                       		dc.w @type04-@index
0001323A                            ; ===========================================================================
0001323A                            
0001323A                            @type00:
0001323A 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
0001323E 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00013242 4881                       		ext.w	d1
00013244 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013248 0402 0050                  		subi.b	#$50,d2
0001324C 4882                       		ext.w	d2
0001324E 0828 0000 0028             		btst	#0,obSubtype(a0)
00013254 6700                       		beq.s	@noshift00a
00013256 4441                       		neg.w	d1
00013258 4442                       		neg.w	d2
0001325A                            
0001325A                            	@noshift00a:
0001325A 0828 0001 0028             		btst	#1,obSubtype(a0)
00013260 6700                       		beq.s	@noshift00b
00013262 4441                       		neg.w	d1
00013264 C342                       		exg	d1,d2
00013266                            
00013266                            	@noshift00b:
00013266 D268 0032                  		add.w	circ_origX(a0),d1
0001326A 3141 0008                  		move.w	d1,obX(a0)
0001326E D468 0030                  		add.w	circ_origY(a0),d2
00013272 3142 000C                  		move.w	d2,obY(a0)
00013276 4E75                       		rts	
00013278                            ; ===========================================================================
00013278                            
00013278                            @type04:
00013278 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
0001327C 0401 0050                  		subi.b	#$50,d1
00013280 4881                       		ext.w	d1
00013282 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013286 0402 0050                  		subi.b	#$50,d2
0001328A 4882                       		ext.w	d2
0001328C 0828 0000 0028             		btst	#0,obSubtype(a0)
00013292 6700                       		beq.s	@noshift04a
00013294 4441                       		neg.w	d1
00013296 4442                       		neg.w	d2
00013298                            
00013298                            	@noshift04a:
00013298 0828 0001 0028             		btst	#1,obSubtype(a0)
0001329E 6700                       		beq.s	@noshift04b
000132A0 4441                       		neg.w	d1
000132A2 C342                       		exg	d1,d2
000132A4                            
000132A4                            	@noshift04b:
000132A4 4441                       		neg.w	d1
000132A6 D268 0032                  		add.w	circ_origX(a0),d1
000132AA 3141 0008                  		move.w	d1,obX(a0)
000132AE D468 0030                  		add.w	circ_origY(a0),d2
000132B2 3142 000C                  		move.w	d2,obY(a0)
000132B6 4E75                       		rts	
000132B6 4E75                       		rts	
000132B8                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
000132B8                            ; ---------------------------------------------------------------------------
000132B8                            ; Sprite mappings - platforms that move	in circles (SLZ)
000132B8                            ; ---------------------------------------------------------------------------
000132B8                            Map_Circ_internal:
000132B8 0000                       		dc.w @platform-Map_Circ_internal
000132BA 02                         @platform:	dc.b 2
000132BB F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000132C0 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000132C6 00                         		even
000132C6 00                         		even
000132C6                            		include	"_incObj\5B Staircase.asm"
000132C6                            ; ---------------------------------------------------------------------------
000132C6                            ; Object 5B - blocks that form a staircase (SLZ)
000132C6                            ; ---------------------------------------------------------------------------
000132C6                            
000132C6                            Staircase:
000132C6 7000                       		moveq	#0,d0
000132C8 1028 0024                  		move.b	obRoutine(a0),d0
000132CC 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000132D0 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000132F2 6000 C564                  		bra.w	DisplaySprite
000132F6                            ; ===========================================================================
000132F6 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000132F8 0000                       		dc.w Stair_Move-Stair_Index
000132FA 0000                       		dc.w Stair_Solid-Stair_Index
000132FC                            
000132FC =00000030                  stair_origX:	equ $30		; original x-axis position
000132FC =00000032                  stair_origY:	equ $32		; original y-axis position
000132FC                            
000132FC =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000132FC                            ; ===========================================================================
000132FC                            
000132FC                            Stair_Main:	; Routine 0
000132FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00013300 7638                       		moveq	#$38,d3
00013302 7801                       		moveq	#1,d4
00013304 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0001330A 6700                       		beq.s	@notflipped	; if not, branch
0001330C 763B                       		moveq	#$3B,d3
0001330E 78FF                       		moveq	#-1,d4
00013310                            
00013310                            	@notflipped:
00013310 3428 0008                  		move.w	obX(a0),d2
00013314 2248                       		movea.l	a0,a1
00013316 7203                       		moveq	#3,d1
00013318 6000                       		bra.s	@makeblocks
0001331A                            ; ===========================================================================
0001331A                            
0001331A                            @loop:
0001331A 6100 CAEC                  		bsr.w	FindNextFreeObj
0001331E 6600 0000                  		bne.w	@fail
00013322 137C 0004 0024             		move.b	#4,obRoutine(a1)
00013328                            
00013328                            @makeblocks:
00013328 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
0001332C 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00013334 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001333A 137C 0004 0001             		move.b	#4,obRender(a1)
00013340 337C 0180 0018             		move.w	#$180,obPriority(a1)
00013346 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001334C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00013352 3342 0008                  		move.w	d2,obX(a1)
00013356 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001335C 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013362 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013368 0642 0020                  		addi.w	#$20,d2
0001336C 1343 0037                  		move.b	d3,$37(a1)
00013370 2348 003C                  		move.l	a0,stair_parent(a1)
00013374 D604                       		add.b	d4,d3
00013376 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
0001337A                            
0001337A                            	@fail:
0001337A                            
0001337A                            Stair_Move:	; Routine 2
0001337A 7000                       		moveq	#0,d0
0001337C 1028 0028                  		move.b	obSubtype(a0),d0
00013380 0240 0007                  		andi.w	#7,d0
00013384 D040                       		add.w	d0,d0
00013386 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
0001338A 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
0001338E                            
0001338E                            Stair_Solid:	; Routine 4
0001338E 2468 003C                  		movea.l	stair_parent(a0),a2
00013392 7000                       		moveq	#0,d0
00013394 1028 0037                  		move.b	$37(a0),d0
00013398 1032 0000                  		move.b	(a2,d0.w),d0
0001339C D068 0032                  		add.w	stair_origY(a0),d0
000133A0 3140 000C                  		move.w	d0,obY(a0)
000133A4 7200                       		moveq	#0,d1
000133A6 1228 0014                  		move.b	obActWid(a0),d1
000133AA 0641 000B                  		addi.w	#$B,d1
000133AE 343C 0010                  		move.w	#$10,d2
000133B2 363C 0011                  		move.w	#$11,d3
000133B6 3828 0008                  		move.w	obX(a0),d4
000133BA 6100 E9E8                  		bsr.w	SolidObject
000133BE 4A04                       		tst.b	d4
000133C0 6A00                       		bpl.s	loc_10F92
000133C2 1544 0036                  		move.b	d4,$36(a2)
000133C6                            
000133C6                            loc_10F92:
000133C6 0828 0003 0022             		btst	#3,obStatus(a0)
000133CC 6700                       		beq.s	locret_10FA0
000133CE 157C 0001 0036             		move.b	#1,$36(a2)
000133D4                            
000133D4                            locret_10FA0:
000133D4 4E75                       		rts	
000133D6                            ; ===========================================================================
000133D6 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000133D8 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133DA 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000133DC 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133DE                            ; ===========================================================================
000133DE                            
000133DE                            Stair_Type00:
000133DE 4A68 0034                  		tst.w	$34(a0)
000133E2 6600                       		bne.s	loc_10FC0
000133E4 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000133EA 6600                       		bne.s	locret_10FBE
000133EC 317C 001E 0034             		move.w	#$1E,$34(a0)
000133F2                            
000133F2                            locret_10FBE:
000133F2 4E75                       		rts	
000133F4                            ; ===========================================================================
000133F4                            
000133F4                            loc_10FC0:
000133F4 5368 0034                  		subq.w	#1,$34(a0)
000133F8 66F8                       		bne.s	locret_10FBE
000133FA 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133FE 4E75                       		rts	
00013400                            ; ===========================================================================
00013400                            
00013400                            Stair_Type02:
00013400 4A68 0034                  		tst.w	$34(a0)
00013404 6600                       		bne.s	loc_10FE0
00013406 4A28 0036                  		tst.b	$36(a0)
0001340A 6A00                       		bpl.s	locret_10FDE
0001340C 317C 003C 0034             		move.w	#$3C,$34(a0)
00013412                            
00013412                            locret_10FDE:
00013412 4E75                       		rts	
00013414                            ; ===========================================================================
00013414                            
00013414                            loc_10FE0:
00013414 5368 0034                  		subq.w	#1,$34(a0)
00013418 6600                       		bne.s	loc_10FEC
0001341A 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
0001341E 4E75                       		rts	
00013420                            ; ===========================================================================
00013420                            
00013420                            loc_10FEC:
00013420 43E8 0038                  		lea	$38(a0),a1
00013424 3028 0034                  		move.w	$34(a0),d0
00013428 E408                       		lsr.b	#2,d0
0001342A 0200 0001                  		andi.b	#1,d0
0001342E 12C0                       		move.b	d0,(a1)+
00013430 0A00 0001                  		eori.b	#1,d0
00013434 12C0                       		move.b	d0,(a1)+
00013436 0A00 0001                  		eori.b	#1,d0
0001343A 12C0                       		move.b	d0,(a1)+
0001343C 0A00 0001                  		eori.b	#1,d0
00013440 12C0                       		move.b	d0,(a1)+
00013442 4E75                       		rts	
00013444                            ; ===========================================================================
00013444                            
00013444                            Stair_Type01:
00013444 43E8 0038                  		lea	$38(a0),a1
00013448 0C11 0080                  		cmpi.b	#$80,(a1)
0001344C 6700                       		beq.s	locret_11038
0001344E 5211                       		addq.b	#1,(a1)
00013450 7200                       		moveq	#0,d1
00013452 1219                       		move.b	(a1)+,d1
00013454 4841                       		swap	d1
00013456 E289                       		lsr.l	#1,d1
00013458 2401                       		move.l	d1,d2
0001345A E289                       		lsr.l	#1,d1
0001345C 2601                       		move.l	d1,d3
0001345E D682                       		add.l	d2,d3
00013460 4841                       		swap	d1
00013462 4842                       		swap	d2
00013464 4843                       		swap	d3
00013466 12C3                       		move.b	d3,(a1)+
00013468 12C2                       		move.b	d2,(a1)+
0001346A 12C1                       		move.b	d1,(a1)+
0001346C                            
0001346C                            locret_11038:
0001346C 4E75                       		rts	
0001346E 4E75                       		rts	
0001346E 4E75                       		rts	
00013470                            Map_Stair:	include	"_maps\Staircase.asm"
00013470                            ; ---------------------------------------------------------------------------
00013470                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013470                            ; ---------------------------------------------------------------------------
00013470                            Map_Stair_internal:
00013470 0000                       		dc.w @block-Map_Stair_internal
00013472 01                         @block:		dc.b 1
00013473 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013478                            		even
00013478                            		even
00013478                            		include	"_incObj\5C Pylon.asm"
00013478                            ; ---------------------------------------------------------------------------
00013478                            ; Object 5C - metal pylons in foreground (SLZ)
00013478                            ; ---------------------------------------------------------------------------
00013478                            
00013478                            Pylon:
00013478 7000                       		moveq	#0,d0
0001347A 1028 0024                  		move.b	obRoutine(a0),d0
0001347E 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013482 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013486                            ; ===========================================================================
00013486 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013488 0000                       		dc.w Pyl_Display-Pyl_Index
0001348A                            ; ===========================================================================
0001348A                            
0001348A                            Pyl_Main:	; Routine 0
0001348A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001348E 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013496 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001349C 117C 0010 0014             		move.b	#$10,obActWid(a0)
000134A2                            
000134A2                            Pyl_Display:	; Routine 2
000134A2 2238 F700                  		move.l	(v_screenposx).w,d1
000134A6 D281                       		add.l	d1,d1
000134A8 4841                       		swap	d1
000134AA 4441                       		neg.w	d1
000134AC 3141 0008                  		move.w	d1,obX(a0)
000134B0 2238 F704                  		move.l	(v_screenposy).w,d1
000134B4 D281                       		add.l	d1,d1
000134B6 4841                       		swap	d1
000134B8 0241 003F                  		andi.w	#$3F,d1
000134BC 4441                       		neg.w	d1
000134BE 0641 0100                  		addi.w	#$100,d1
000134C2 3141 000A                  		move.w	d1,obScreenY(a0)
000134C6 6000 C390                  		bra.w	DisplaySprite
000134C6 6000 C390                  		bra.w	DisplaySprite
000134CA                            Map_Pylon:	include	"_maps\Pylon.asm"
000134CA                            ; ---------------------------------------------------------------------------
000134CA                            ; Sprite mappings - metal pylons in foreground (SLZ)
000134CA                            ; ---------------------------------------------------------------------------
000134CA                            Map_Pylon_internal:
000134CA 0000                       		dc.w @pylon-Map_Pylon_internal
000134CC 09                         @pylon:		dc.b 9
000134CD 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000134D2 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000134D7 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000134DC E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000134E1 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000134E6 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000134EB 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000134F0 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000134F5 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000134FA                            		even
000134FA                            		even
000134FA                            
000134FA                            		include	"_incObj\1B Water Surface.asm"
000134FA                            ; ---------------------------------------------------------------------------
000134FA                            ; Object 1B - water surface (LZ)
000134FA                            ; ---------------------------------------------------------------------------
000134FA                            
000134FA                            WaterSurface:
000134FA 7000                       		moveq	#0,d0
000134FC 1028 0024                  		move.b	obRoutine(a0),d0
00013500 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
00013504 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
00013508                            ; ===========================================================================
00013508 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
0001350A 0000                       		dc.w Surf_Action-Surf_Index
0001350C                            
0001350C =00000030                  surf_origX:	equ $30		; original x-axis position
0001350C =00000032                  surf_freeze:	equ $32		; flag to freeze animation
0001350C                            ; ===========================================================================
0001350C                            
0001350C                            Surf_Main:	; Routine 0
0001350C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013510 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
00013518 317C C300 0002             		move.w	#$C300,obGfx(a0)
0001351E 117C 0004 0001             		move.b	#4,obRender(a0)
00013524 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001352A 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013530                            
00013530                            Surf_Action:	; Routine 2
00013530 3238 F700                  		move.w	(v_screenposx).w,d1
00013534 0241 FFE0                  		andi.w	#$FFE0,d1
00013538 D268 0030                  		add.w	surf_origX(a0),d1
0001353C 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013542 6700                       		beq.s	@even		; branch on even frames
00013544 0641 0020                  		addi.w	#$20,d1
00013548                            
00013548                            	@even:
00013548 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
0001354C 3238 F646                  		move.w	(v_waterpos1).w,d1
00013550 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
00013554 4A28 0032                  		tst.b	surf_freeze(a0)
00013558 6600                       		bne.s	@stopped
0001355A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013560 6700                       		beq.s	@animate	; if not, branch
00013562 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013566 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001356C 6000                       		bra.s	@display
0001356E                            ; ===========================================================================
0001356E                            
0001356E                            @stopped:
0001356E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013572 6600                       		bne.s	@display	; if yes, branch
00013574 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
0001357A 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
0001357E                            
0001357E                            @animate:
0001357E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013582 6A00                       		bpl.s	@display
00013584 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001358A 5228 001A                  		addq.b	#1,obFrame(a0)
0001358E 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013594 6500                       		bcs.s	@display
00013596 117C 0000 001A             		move.b	#0,obFrame(a0)
0001359C                            
0001359C                            @display:
0001359C 6000 C2BA                  		bra.w	DisplaySprite
0001359C 6000 C2BA                  		bra.w	DisplaySprite
000135A0                            Map_Surf:	include	"_maps\Water Surface.asm"
000135A0                            ; --------------------------------------------------------------------------------
000135A0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000135A0                            ; --------------------------------------------------------------------------------
000135A0                            
000135A0                            SME_LGSi8:	
000135A0 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
000135A4 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
000135A8 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
000135AC 03                         SME_LGSi8_C:	dc.b 3	
000135AD F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000135B2 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000135B7 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135BC 03                         SME_LGSi8_1C:	dc.b 3	
000135BD F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135C2 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135C7 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135CC 03                         SME_LGSi8_2C:	dc.b 3	
000135CD F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135D2 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135D7 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135DC 06                         SME_LGSi8_3C:	dc.b 6	
000135DD F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000135E2 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000135E7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000135EC F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000135F1 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135F6 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000135FB 06                         SME_LGSi8_5B:	dc.b 6	
000135FC F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013601 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
00013606 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001360B F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
00013610 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013615 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
0001361A 06                         SME_LGSi8_7A:	dc.b 6	
0001361B F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013620 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
00013625 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001362A F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
0001362F F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013634 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
0001363A 00                         		even
0001363A 00                         		even
0001363A                            		include	"_incObj\0B Pole that Breaks.asm"
0001363A                            ; ---------------------------------------------------------------------------
0001363A                            ; Object 0B - pole that	breaks (LZ)
0001363A                            ; ---------------------------------------------------------------------------
0001363A                            
0001363A                            Pole:
0001363A 7000                       		moveq	#0,d0
0001363C 1028 0024                  		move.b	obRoutine(a0),d0
00013640 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
00013644 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013648                            ; ===========================================================================
00013648 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
0001364A 0000                       		dc.w Pole_Action-Pole_Index
0001364C 0000                       		dc.w Pole_Display-Pole_Index
0001364E                            
0001364E =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
0001364E =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
0001364E                            ; ===========================================================================
0001364E                            
0001364E                            Pole_Main:	; Routine 0
0001364E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013652 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
0001365A 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013660 117C 0004 0001             		move.b	#4,obRender(a0)
00013666 117C 0008 0014             		move.b	#8,obActWid(a0)
0001366C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013672 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013678 7000                       		moveq	#0,d0
0001367A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001367E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013682 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013686                            
00013686                            Pole_Action:	; Routine 2
00013686 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
0001368A 6700                       		beq.s	@grab		; if not, branch
0001368C 4A68 0030                  		tst.w	pole_time(a0)
00013690 6700                       		beq.s	@moveup
00013692 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013696 6600                       		bne.s	@moveup
00013698 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
0001369E 6000                       		bra.s	@release
000136A0                            ; ===========================================================================
000136A0                            
000136A0                            @moveup:
000136A0 43F8 D000                  		lea	(v_player).w,a1
000136A4 3028 000C                  		move.w	obY(a0),d0
000136A8 0440 0018                  		subi.w	#$18,d0
000136AC 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
000136B2 6700                       		beq.s	@movedown	; if not, branch
000136B4 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
000136B8 B069 000C                  		cmp.w	obY(a1),d0
000136BC 6500                       		bcs.s	@movedown
000136BE 3340 000C                  		move.w	d0,obY(a1)
000136C2                            
000136C2                            @movedown:
000136C2 0640 0024                  		addi.w	#$24,d0
000136C6 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000136CC 6700                       		beq.s	@letgo		; if not, branch
000136CE 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000136D2 B069 000C                  		cmp.w	obY(a1),d0
000136D6 6400                       		bcc.s	@letgo
000136D8 3340 000C                  		move.w	d0,obY(a1)
000136DC                            
000136DC                            @letgo:
000136DC 1038 F603                  		move.b	(v_jpadpress2).w,d0
000136E0 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000136E4 6700                       		beq.s	Pole_Display	; if not, branch
000136E6                            
000136E6                            @release:
000136E6 4228 0020                  		clr.b	obColType(a0)
000136EA 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000136EE 4238 F7C8                  		clr.b	(f_lockmulti).w
000136F2 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000136F6 4228 0032                  		clr.b	pole_grabbed(a0)
000136FA 6000                       		bra.s	Pole_Display
000136FC                            ; ===========================================================================
000136FC                            
000136FC                            @grab:
000136FC 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
00013700 6700                       		beq.s	Pole_Display	; if not, branch
00013702 43F8 D000                  		lea	(v_player).w,a1
00013706 3028 0008                  		move.w	obX(a0),d0
0001370A 0640 0014                  		addi.w	#$14,d0
0001370E B069 0008                  		cmp.w	obX(a1),d0
00013712 6400                       		bcc.s	Pole_Display
00013714 4228 0021                  		clr.b	obColProp(a0)
00013718 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
0001371E 6400                       		bcc.s	Pole_Display
00013720 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
00013724 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
00013728 3028 0008                  		move.w	obX(a0),d0
0001372C 0640 0014                  		addi.w	#$14,d0
00013730 3340 0008                  		move.w	d0,obX(a1)
00013734 08A9 0000 0022             		bclr	#0,obStatus(a1)
0001373A 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013740 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013746 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
0001374C 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013752                            
00013752                            Pole_Display:	; Routine 4
00013752 6000 E1B8                  		bra.w	RememberState
00013752 6000 E1B8                  		bra.w	RememberState
00013756                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013756                            ; ---------------------------------------------------------------------------
00013756                            ; Sprite mappings - pole that breaks (LZ)
00013756                            ; ---------------------------------------------------------------------------
00013756                            Map_Pole_internal:
00013756 0000                       		dc.w @normal-Map_Pole_internal
00013758 0000                       		dc.w @broken-Map_Pole_internal
0001375A 02                         @normal:	dc.b 2			; normal pole
0001375B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013760 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013765 04                         @broken:	dc.b 4			; broken pole
00013766 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001376B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013770 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013775 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001377A                            		even
0001377A                            		even
0001377A                            		include	"_incObj\0C Flapping Door.asm"
0001377A                            ; ---------------------------------------------------------------------------
0001377A                            ; Object 0C - flapping door (LZ)
0001377A                            ; ---------------------------------------------------------------------------
0001377A                            
0001377A                            FlapDoor:
0001377A 7000                       		moveq	#0,d0
0001377C 1028 0024                  		move.b	obRoutine(a0),d0
00013780 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013784 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013788                            ; ===========================================================================
00013788 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
0001378A 0000                       		dc.w Flap_OpenClose-Flap_Index
0001378C                            
0001378C =00000032                  flap_time:	equ $32		; time between opening/closing
0001378C =00000030                  flap_wait:	equ $30		; time until change
0001378C                            ; ===========================================================================
0001378C                            
0001378C                            Flap_Main:	; Routine 0
0001378C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013790 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013798 317C 4328 0002             		move.w	#$4328,obGfx(a0)
0001379E 0028 0004 0001             		ori.b	#4,obRender(a0)
000137A4 117C 0028 0014             		move.b	#$28,obActWid(a0)
000137AA 7000                       		moveq	#0,d0
000137AC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000137B0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000137B4 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
000137B8                            
000137B8                            Flap_OpenClose:	; Routine 2
000137B8 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
000137BC 6A00                       		bpl.s	@wait		; if time remains, branch
000137BE 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
000137C4 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000137CA 4A28 0001                  		tst.b	obRender(a0)
000137CE 6A00                       		bpl.s	@nosound
000137DA                            
000137DA                            	@wait:
000137DA                            	@nosound:
000137DA 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000137E0 6100 912C                  		bsr.w	AnimateSprite
000137E4 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000137E8 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000137EC 6600                       		bne.s	@display	; if yes, branch
000137EE 3038 D008                  		move.w	(v_player+obX).w,d0
000137F2 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000137F6 6400                       		bcc.s	@display	; if yes, branch
000137F8 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137FE 323C 0013                  		move.w	#$13,d1
00013802 343C 0020                  		move.w	#$20,d2
00013806 3602                       		move.w	d2,d3
00013808 5243                       		addq.w	#1,d3
0001380A 3828 0008                  		move.w	obX(a0),d4
0001380E 6100 E594                  		bsr.w	SolidObject	; make the door	solid
00013812                            
00013812                            	@display:
00013812 6000 E0F8                  		bra.w	RememberState
00013812 6000 E0F8                  		bra.w	RememberState
00013816                            		include	"_anim\Flapping Door.asm"
00013816                            ; ---------------------------------------------------------------------------
00013816                            ; Animation script - flapping door (LZ)
00013816                            ; ---------------------------------------------------------------------------
00013816 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
00013818 0000                       		dc.w @closing-Ani_Flap
0001381A 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013820 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00013826                            		even
00013826                            		even
00013826                            Map_Flap:	include	"_maps\Flapping Door.asm"
00013826                            ; ---------------------------------------------------------------------------
00013826                            ; Sprite mappings - flapping door (LZ)
00013826                            ; ---------------------------------------------------------------------------
00013826                            Map_Flap_internal:
00013826 0000                       		dc.w @closed-Map_Flap_internal
00013828 0000                       		dc.w @halfway-Map_Flap_internal
0001382A 0000                       		dc.w @open-Map_Flap_internal
0001382C 02                         @closed:	dc.b 2
0001382D E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013832 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013837 02                         @halfway:	dc.b 2
00013838 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001383D 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013842 02                         @open:		dc.b 2
00013843 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013848 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001384E 00                         		even
0001384E 00                         		even
0001384E                            
0001384E                            		include	"_incObj\71 Invisible Barriers.asm"
0001384E                            ; ---------------------------------------------------------------------------
0001384E                            ; Object 71 - invisible	solid barriers
0001384E                            ; ---------------------------------------------------------------------------
0001384E                            
0001384E                            Invisibarrier:
0001384E 7000                       		moveq	#0,d0
00013850 1028 0024                  		move.b	obRoutine(a0),d0
00013854 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013858 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
0001385C                            ; ===========================================================================
0001385C 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
0001385E 0000                       		dc.w Invis_Solid-Invis_Index
00013860                            
00013860 =00000016                  invis_height:	equ $16		; height in pixels
00013860                            ; ===========================================================================
00013860                            
00013860                            Invis_Main:	; Routine 0
00013860 5428 0024                  		addq.b	#2,obRoutine(a0)
00013864 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
0001386C 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013872 0028 0004 0001             		ori.b	#4,obRender(a0)
00013878 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001387C 1200                       		move.b	d0,d1
0001387E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013882 0640 0010                  		addi.w	#$10,d0
00013886 E248                       		lsr.w	#1,d0
00013888 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
0001388C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013890 5241                       		addq.w	#1,d1
00013892 E749                       		lsl.w	#3,d1
00013894 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013898                            
00013898                            Invis_Solid:	; Routine 2
00013898 6100 C34C                  		bsr.w	ChkObjectVisible
0001389C 6600                       		bne.s	@chkdel
0001389E 7200                       		moveq	#0,d1
000138A0 1228 0014                  		move.b	obActWid(a0),d1
000138A4 0641 000B                  		addi.w	#$B,d1
000138A8 7400                       		moveq	#0,d2
000138AA 1428 0016                  		move.b	invis_height(a0),d2
000138AE 3602                       		move.w	d2,d3
000138B0 5243                       		addq.w	#1,d3
000138B2 3828 0008                  		move.w	obX(a0),d4
000138B6 6100 E534                  		bsr.w	SolidObject71
000138BA                            
000138BA                            @chkdel:
000138D6 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000138DA 6700                       		beq.s	@nodisplay	; if not, branch
000138DC 4EF9 0000 F858             		jmp	(DisplaySprite).l	; if yes, display the object
000138E2                            
000138E2                            	@nodisplay:
000138E2 4E75                       		rts	
000138E4                            
000138E4                            	@delete:
000138E4 4EF9 0000 F898             		jmp	(DeleteObject).l
000138E4 4EF9 0000 F898             		jmp	(DeleteObject).l
000138EA                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000138EA                            ; --------------------------------------------------------------------------------
000138EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000138EA                            ; --------------------------------------------------------------------------------
000138EA                            
000138EA                            SME_t60cE:	
000138EA 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000138EE 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000138F0 04                         SME_t60cE_6:	dc.b 4	
000138F1 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000138F6 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000138FB F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
00013900 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
00013905 04                         SME_t60cE_1B:	dc.b 4	
00013906 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
0001390B E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
00013910 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
00013915 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
0001391A 04                         SME_t60cE_30:	dc.b 4	
0001391B E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013920 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
00013925 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
0001392A 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013930 00                         		even
00013930 00                         		even
00013930                            
00013930                            		include	"_incObj\5D Fan.asm"
00013930                            ; ---------------------------------------------------------------------------
00013930                            ; Object 5D - fans (SLZ)
00013930                            ; ---------------------------------------------------------------------------
00013930                            
00013930                            Fan:
00013930 7000                       		moveq	#0,d0
00013932 1028 0024                  		move.b	obRoutine(a0),d0
00013936 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
0001393A 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
0001393E                            ; ===========================================================================
0001393E 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013940 0000                       		dc.w Fan_Delay-Fan_Index
00013942                            
00013942 =00000030                  fan_time:	equ $30		; time between switching on/off
00013942 =00000032                  fan_switch:	equ $32		; on/off switch
00013942                            ; ===========================================================================
00013942                            
00013942                            Fan_Main:	; Routine 0
00013942 5428 0024                  		addq.b	#2,obRoutine(a0)
00013946 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
0001394E 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00013954 0028 0004 0001             		ori.b	#4,obRender(a0)
0001395A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013960 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013966                            
00013966                            Fan_Delay:	; Routine 2
00013966 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
0001396C 6600                       		bne.s	@blow		; if yes, branch
0001396E 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013972 6A00                       		bpl.s	@blow		; if time remains, branch
00013974 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
0001397A 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013980 6700                       		beq.s	@blow		; if fan is off, branch
00013982 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013988                            
00013988                            @blow:
00013988 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
0001398C 6600 0000                  		bne.w	@chkdel		; if not, branch
00013990 43F8 D000                  		lea	(v_player).w,a1
00013994 3029 0008                  		move.w	obX(a1),d0
00013998 9068 0008                  		sub.w	obX(a0),d0
0001399C 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000139A2 6600                       		bne.s	@chksonic	; if yes, branch
000139A4 4440                       		neg.w	d0
000139A6                            
000139A6                            @chksonic:
000139A6 0640 0050                  		addi.w	#$50,d0
000139AA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000139AE 6400                       		bcc.s	@animate	; if yes, branch
000139B0 3229 000C                  		move.w	obY(a1),d1
000139B4 0641 0060                  		addi.w	#$60,d1
000139B8 9268 000C                  		sub.w	obY(a0),d1
000139BC 6500                       		bcs.s	@animate	; branch if Sonic is too low
000139BE 0C41 0070                  		cmpi.w	#$70,d1
000139C2 6400                       		bcc.s	@animate	; branch if Sonic is too high
000139C4 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
000139C8 6400                       		bcc.s	@faraway	; if yes, branch
000139CA 4640                       		not.w	d0
000139CC D040                       		add.w	d0,d0
000139CE                            
000139CE                            	@faraway:
000139CE 0640 0060                  		addi.w	#$60,d0
000139D2 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000139D8 6600                       		bne.s	@right		; if yes, branch
000139DA 4440                       		neg.w	d0
000139DC                            
000139DC                            	@right:
000139DC 4400                       		neg.b	d0
000139DE E840                       		asr.w	#4,d0
000139E0 0828 0000 0028             		btst	#0,obSubtype(a0)
000139E6 6700                       		beq.s	@movesonic
000139E8 4440                       		neg.w	d0
000139EA                            
000139EA                            	@movesonic:
000139EA D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000139EE                            
000139EE                            @animate:
000139EE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000139F2 6A00                       		bpl.s	@chkdel
000139F4 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000139FA 5228 001B                  		addq.b	#1,obAniFrame(a0)
000139FE 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00013A04 6500                       		bcs.s	@noreset
00013A06 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013A0C                            
00013A0C                            	@noreset:
00013A0C 7000                       		moveq	#0,d0
00013A0E 0828 0000 0028             		btst	#0,obSubtype(a0)
00013A14 6700                       		beq.s	@noflip
00013A16 7002                       		moveq	#2,d0
00013A18                            
00013A18                            	@noflip:
00013A18 D028 001B                  		add.b	obAniFrame(a0),d0
00013A1C 1140 001A                  		move.b	d0,obFrame(a0)
00013A20                            
00013A20                            @chkdel:
00013A20 6100 BE36                  		bsr.w	DisplaySprite
00013A42 4E75                       		rts	
00013A42 4E75                       		rts	
00013A44                            Map_Fan:	include	"_maps\Fan.asm"
00013A44                            ; ---------------------------------------------------------------------------
00013A44                            ; Sprite mappings - fans (SLZ)
00013A44                            ; ---------------------------------------------------------------------------
00013A44                            Map_Fan_internal:
00013A44 0000                       		dc.w @fan1-Map_Fan_internal
00013A46 0000                       		dc.w @fan2-Map_Fan_internal
00013A48 0000                       		dc.w @fan3-Map_Fan_internal
00013A4A 0000                       		dc.w @fan2-Map_Fan_internal
00013A4C 0000                       		dc.w @fan1-Map_Fan_internal
00013A4E 02                         @fan1:		dc.b 2
00013A4F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013A54 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013A59 02                         @fan2:		dc.b 2
00013A5A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013A5F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013A64 02                         @fan3:		dc.b 2
00013A65 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013A6A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013A70 00                         		even
00013A70 00                         		even
00013A70                            		include	"_incObj\5E Seesaw.asm"
00013A70                            ; ---------------------------------------------------------------------------
00013A70                            ; Object 5E - seesaws (SLZ)
00013A70                            ; ---------------------------------------------------------------------------
00013A70                            
00013A70                            Seesaw:
00013A70 7000                       		moveq	#0,d0
00013A72 1028 0024                  		move.b	obRoutine(a0),d0
00013A76 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013A7A 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013A7E 3028 0000                  		move.w	see_origX(a0),d0
00013A82 0240 FF80                  		andi.w	#$FF80,d0
00013A86 3238 F700                  		move.w	(v_screenposx).w,d1
00013A8A 0441 0080                  		subi.w	#$80,d1
00013A8E 0241 FF80                  		andi.w	#$FF80,d1
00013A92 9041                       		sub.w	d1,d0
00013A94 6B00 BE02                  		bmi.w	DeleteObject
00013A98 0C40 0280                  		cmpi.w	#$280,d0
00013A9C 6200 BDFA                  		bhi.w	DeleteObject
00013AA0 6000 BDB6                  		bra.w	DisplaySprite
00013AA4                            ; ===========================================================================
00013AA4 0000                       See_Index:	dc.w See_Main-See_Index
00013AA6 0000                       		dc.w See_Slope-See_Index
00013AA8 0000                       		dc.w See_Slope2-See_Index
00013AAA 0000                       		dc.w See_Spikeball-See_Index
00013AAC 0000                       		dc.w See_MoveSpike-See_Index
00013AAE 0000                       		dc.w See_SpikeFall-See_Index
00013AB0                            
00013AB0 =00000030                  see_origX:	equ $30		; original x-axis position
00013AB0 =00000034                  see_origY:	equ $34		; original y-axis position
00013AB0 =00000038                  see_speed:	equ $38		; speed of collision
00013AB0 =0000003A                  see_frame:	equ $3A		; 
00013AB0 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013AB0                            ; ===========================================================================
00013AB0                            
00013AB0                            See_Main:	; Routine 0
00013AB0 5428 0024                  		addq.b	#2,obRoutine(a0)
00013AB4 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013ABC 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013AC2 0028 0004 0001             		ori.b	#4,obRender(a0)
00013AC8 117C 0004 0018             		move.b	#4,obPriority(a0)
00013ACE 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013AD4 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013ADA 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013ADE 6600                       		bne.s	@noball		; if not, branch
00013AE0                            
00013AE0 6100 C326                  		bsr.w	FindNextFreeObj
00013AE4 6600                       		bne.s	@noball
00013AE6 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013AEA 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013AEE 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013AF4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013AFA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013B00 2348 003C                  		move.l	a0,see_parent(a1)
00013B04                            
00013B04                            	@noball:
00013B04 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013B0A 6700                       		beq.s	@noflip		; if not, branch
00013B0C 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013B12                            
00013B12                            	@noflip:
00013B12 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013B18                            
00013B18                            See_Slope:	; Routine 2
00013B18 1228 003A                  		move.b	see_frame(a0),d1
00013B1C 6100 0000                  		bsr.w	See_ChgFrame
00013B20 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B26 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B2C 6700                       		beq.s	@notflat	; if not, branch
00013B2E 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B34                            
00013B34                            	@notflat:
00013B34 43F8 D000                  		lea	(v_player).w,a1
00013B38 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013B3E 323C 0030                  		move.w	#$30,d1
00013B42 4EB9 0000 8D80             		jsr	(SlopeObject).l
00013B48 4E75                       		rts	
00013B4A                            ; ===========================================================================
00013B4A                            
00013B4A                            See_Slope2:	; Routine 4
00013B4A 6100 0000                  		bsr.w	See_ChkSide
00013B4E 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B54 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B5A 6700                       		beq.s	@notflat	; if not, branch
00013B5C 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B62                            
00013B62                            	@notflat:
00013B62 323C 0030                  		move.w	#$30,d1
00013B66 4EB9 0000 8E20             		jsr	(ExitPlatform).l
00013B6C 323C 0030                  		move.w	#$30,d1
00013B70 3428 0008                  		move.w	obX(a0),d2
00013B74 4EB9 0000 9DBA             		jsr	(SlopeObject2).l
00013B7A 4E75                       		rts	
00013B7C                            ; ===========================================================================
00013B7C                            
00013B7C                            See_ChkSide:
00013B7C 7202                       		moveq	#2,d1
00013B7E 43F8 D000                  		lea	(v_player).w,a1
00013B82 3028 0008                  		move.w	obX(a0),d0
00013B86 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013B8A 6400                       		bcc.s	@leftside	; if yes, branch
00013B8C 4440                       		neg.w	d0
00013B8E 7200                       		moveq	#0,d1
00013B90                            
00013B90                            	@leftside:
00013B90 0C40 0008                  		cmpi.w	#8,d0
00013B94 6400                       		bcc.s	See_ChgFrame
00013B96 7201                       		moveq	#1,d1
00013B98                            
00013B98                            See_ChgFrame:
00013B98 1028 001A                  		move.b	obFrame(a0),d0
00013B9C B001                       		cmp.b	d1,d0		; does frame need to change?
00013B9E 6700                       		beq.s	@noflip		; if not, branch
00013BA0 6400                       		bcc.s	@loc_11772
00013BA2 5400                       		addq.b	#2,d0
00013BA4                            
00013BA4                            	@loc_11772:
00013BA4 5300                       		subq.b	#1,d0
00013BA6 1140 001A                  		move.b	d0,obFrame(a0)
00013BAA 1141 003A                  		move.b	d1,see_frame(a0)
00013BAE 08A8 0000 0001             		bclr	#0,obRender(a0)
00013BB4 0828 0001 001A             		btst	#1,obFrame(a0)
00013BBA 6700                       		beq.s	@noflip
00013BBC 08E8 0000 0001             		bset	#0,obRender(a0)
00013BC2                            
00013BC2                            	@noflip:
00013BC2 4E75                       		rts	
00013BC4                            ; ===========================================================================
00013BC4                            
00013BC4                            See_Spikeball:	; Routine 6
00013BC4 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BC8 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013BD0 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013BD6 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BDC 117C 0004 0018             		move.b	#4,obPriority(a0)
00013BE2 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013BE8 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BEE 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BF4 0668 0028 0008             		addi.w	#$28,obX(a0)
00013BFA 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013C00 117C 0001 001A             		move.b	#1,obFrame(a0)
00013C06 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013C0C 6700                       		beq.s	See_MoveSpike	; if not, branch
00013C0E 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013C14 117C 0002 003A             		move.b	#2,see_frame(a0)
00013C1A                            
00013C1A                            See_MoveSpike:	; Routine 8
00013C1A 2268 003C                  		movea.l	see_parent(a0),a1
00013C1E 7000                       		moveq	#0,d0
00013C20 1028 003A                  		move.b	see_frame(a0),d0
00013C24 9029 003A                  		sub.b	see_frame(a1),d0
00013C28 6700                       		beq.s	loc_1183E
00013C2A 6400                       		bcc.s	loc_117FC
00013C2C 4400                       		neg.b	d0
00013C2E                            
00013C2E                            loc_117FC:
00013C2E 323C F7E8                  		move.w	#-$818,d1
00013C32 343C FEEC                  		move.w	#-$114,d2
00013C36 0C00 0001                  		cmpi.b	#1,d0
00013C3A 6700                       		beq.s	loc_11822
00013C3C 323C F510                  		move.w	#-$AF0,d1
00013C40 343C FF34                  		move.w	#-$CC,d2
00013C44 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013C4A 6D00                       		blt.s	loc_11822
00013C4C 323C F200                  		move.w	#-$E00,d1
00013C50 343C FF60                  		move.w	#-$A0,d2
00013C54                            
00013C54                            loc_11822:
00013C54 3141 0012                  		move.w	d1,obVelY(a0)
00013C58 3142 0010                  		move.w	d2,obVelX(a0)
00013C5C 3028 0008                  		move.w	obX(a0),d0
00013C60 9068 0030                  		sub.w	see_origX(a0),d0
00013C64 6400                       		bcc.s	loc_11838
00013C66 4468 0010                  		neg.w	obVelX(a0)
00013C6A                            
00013C6A                            loc_11838:
00013C6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C6E 6000                       		bra.s	See_SpikeFall
00013C70                            ; ===========================================================================
00013C70                            
00013C70                            loc_1183E:
00013C70 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C76 7000                       		moveq	#0,d0
00013C78 1029 001A                  		move.b	obFrame(a1),d0
00013C7C 343C 0028                  		move.w	#$28,d2
00013C80 3228 0008                  		move.w	obX(a0),d1
00013C84 9268 0030                  		sub.w	see_origX(a0),d1
00013C88 6400                       		bcc.s	loc_1185C
00013C8A 4442                       		neg.w	d2
00013C8C 5440                       		addq.w	#2,d0
00013C8E                            
00013C8E                            loc_1185C:
00013C8E D040                       		add.w	d0,d0
00013C90 3228 0034                  		move.w	see_origY(a0),d1
00013C94 D272 0000                  		add.w	(a2,d0.w),d1
00013C98 3141 000C                  		move.w	d1,obY(a0)
00013C9C D468 0030                  		add.w	see_origX(a0),d2
00013CA0 3142 0008                  		move.w	d2,obX(a0)
00013CA4 4268 000E                  		clr.w	obY+2(a0)
00013CA8 4268 000A                  		clr.w	obX+2(a0)
00013CAC 4E75                       		rts	
00013CAE                            ; ===========================================================================
00013CAE                            
00013CAE                            See_SpikeFall:	; Routine $A
00013CAE 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013CB2 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013CB4 6100 BB56                  		bsr.w	ObjectFall
00013CB8 3028 0034                  		move.w	see_origY(a0),d0
00013CBC 0440 002F                  		subi.w	#$2F,d0
00013CC0 B068 000C                  		cmp.w	obY(a0),d0
00013CC4 6E00                       		bgt.s	locret_11898
00013CC6 6100 BB44                  		bsr.w	ObjectFall
00013CCA                            
00013CCA                            locret_11898:
00013CCA 4E75                       		rts	
00013CCC                            ; ===========================================================================
00013CCC                            
00013CCC                            loc_1189A:
00013CCC 6100 BB3E                  		bsr.w	ObjectFall
00013CD0 2268 003C                  		movea.l	see_parent(a0),a1
00013CD4 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013CDA 7000                       		moveq	#0,d0
00013CDC 1029 001A                  		move.b	obFrame(a1),d0
00013CE0 3228 0008                  		move.w	obX(a0),d1
00013CE4 9268 0030                  		sub.w	see_origX(a0),d1
00013CE8 6400                       		bcc.s	loc_118BA
00013CEA 5440                       		addq.w	#2,d0
00013CEC                            
00013CEC                            loc_118BA:
00013CEC D040                       		add.w	d0,d0
00013CEE 3228 0034                  		move.w	see_origY(a0),d1
00013CF2 D272 0000                  		add.w	(a2,d0.w),d1
00013CF6 B268 000C                  		cmp.w	obY(a0),d1
00013CFA 6E00                       		bgt.s	locret_11938
00013CFC 2268 003C                  		movea.l	see_parent(a0),a1
00013D00 7202                       		moveq	#2,d1
00013D02 4A68 0010                  		tst.w	obVelX(a0)
00013D06 6B00                       		bmi.s	See_Spring
00013D08 7200                       		moveq	#0,d1
00013D0A                            
00013D0A                            See_Spring:
00013D0A 1341 003A                  		move.b	d1,$3A(a1)
00013D0E 1141 003A                  		move.b	d1,see_frame(a0)
00013D12 B229 001A                  		cmp.b	obFrame(a1),d1
00013D16 6700                       		beq.s	loc_1192C
00013D18 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013D1E 6700                       		beq.s	loc_1192C
00013D20 4229 0025                  		clr.b	ob2ndRout(a1)
00013D24 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013D2A 45F8 D000                  		lea	(v_player).w,a2
00013D2E 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013D34 446A 0012                  		neg.w	obVelY(a2)
00013D38 08EA 0001 0022             		bset	#1,obStatus(a2)
00013D3E 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013D44 422A 003C                  		clr.b	$3C(a2)
00013D48 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013D4E 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013D5E                            
00013D5E                            loc_1192C:
00013D5E 4268 0010                  		clr.w	obVelX(a0)
00013D62 4268 0012                  		clr.w	obVelY(a0)
00013D66 5528 0024                  		subq.b	#2,obRoutine(a0)
00013D6A                            
00013D6A                            locret_11938:
00013D6A 4E75                       		rts	
00013D6C                            ; ===========================================================================
00013D6C FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013D76                            
00013D76                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013DA6                            		even
00013DA6                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013DD6                            		even
00013DD6                            		even
00013DD6                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013DD6                            ; ---------------------------------------------------------------------------
00013DD6                            ; Sprite mappings - seesaws (SLZ)
00013DD6                            ; ---------------------------------------------------------------------------
00013DD6                            Map_Seesaw_internal:
00013DD6 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DD8 0000                       		dc.w @flat-Map_Seesaw_internal
00013DDA 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DDC 0000                       		dc.w @flat-Map_Seesaw_internal
00013DDE 07                         @sloping:	dc.b 7
00013DDF D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013DE4 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013DE9 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013DEE EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013DF3 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013DF8 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013DFD FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013E02 04                         @flat:		dc.b 4
00013E03 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013E08 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013E0D E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013E12 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013E18 00                         		even
00013E18 00                         		even
00013E18                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013E18                            ; ---------------------------------------------------------------------------
00013E18                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013E18                            ; ---------------------------------------------------------------------------
00013E18                            Map_SSawBall_internal:
00013E18 0000                       		dc.w @red-Map_SSawBall_internal
00013E1A 0000                       		dc.w @silver-Map_SSawBall_internal
00013E1C 01                         @red:		dc.b 1
00013E1D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013E22 01                         @silver:	dc.b 1
00013E23 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013E28                            		even
00013E28                            		even
00013E28                            		include	"_incObj\5F Bomb Enemy.asm"
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            
00013E28                            Bomb:
00013E28 7000                       		moveq	#0,d0
00013E2A 1028 0024                  		move.b	obRoutine(a0),d0
00013E2E 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013E32 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013E36                            ; ===========================================================================
00013E36 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013E38 0000                       		dc.w Bom_Action-Bom_Index
00013E3A 0000                       		dc.w Bom_Display-Bom_Index
00013E3C 0000                       		dc.w Bom_End-Bom_Index
00013E3E                            
00013E3E =00000030                  bom_time:	equ $30		; time of fuse
00013E3E =00000034                  bom_origY:	equ $34		; original y-axis position
00013E3E =0000003C                  bom_parent:	equ $3C		; address of parent object
00013E3E                            ; ===========================================================================
00013E3E                            
00013E3E                            Bom_Main:	; Routine 0
00013E3E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E42 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013E4A 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013E50 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E56 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013E5C 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E62 1028 0028                  		move.b	obSubtype(a0),d0
00013E66 6700                       		beq.s	loc_11A3C
00013E68 1140 0024                  		move.b	d0,obRoutine(a0)
00013E6C 4E75                       		rts	
00013E6E                            ; ===========================================================================
00013E6E                            
00013E6E                            loc_11A3C:
00013E6E 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013E74 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E7A                            
00013E7A                            Bom_Action:	; Routine 2
00013E7A 7000                       		moveq	#0,d0
00013E7C 1028 0025                  		move.b	ob2ndRout(a0),d0
00013E80 323B 0000                  		move.w	@index(pc,d0.w),d1
00013E84 4EBB 1000                  		jsr	@index(pc,d1.w)
00013E88 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E8E 6100 8A7E                  		bsr.w	AnimateSprite
00013E92 6000 DA78                  		bra.w	RememberState
00013E96                            ; ===========================================================================
00013E96 0000                       @index:		dc.w @walk-@index
00013E98 0000                       		dc.w @wait-@index
00013E9A 0000                       		dc.w @explode-@index
00013E9C                            ; ===========================================================================
00013E9C                            
00013E9C                            @walk:
00013E9C 6100 0000                  		bsr.w	@chksonic
00013EA0 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EA4 6A00                       		bpl.s	@noflip		; if time remains, branch
00013EA6 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013EAA 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013EB0 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013EB6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013EBC 0868 0000 0022             		bchg	#0,obStatus(a0)
00013EC2 6700                       		beq.s	@noflip
00013EC4 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013EC8                            
00013EC8                            	@noflip:
00013EC8 4E75                       		rts	
00013ECA                            ; ===========================================================================
00013ECA                            
00013ECA                            @wait:
00013ECA 6100 0000                  		bsr.w	@chksonic
00013ECE 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013ED2 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013ED4 6100 B96E                  		bsr.w	SpeedToPos
00013ED8 4E75                       		rts	
00013EDA                            ; ===========================================================================
00013EDA                            
00013EDA                            	@stopwalking:
00013EDA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013EDE 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013EE4 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013EE8 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013EEE 4E75                       		rts	
00013EF0                            ; ===========================================================================
00013EF0                            
00013EF0                            @explode:
00013EF0 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EF4 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013EF6 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013EFA 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013F00                            
00013F00                            	@noexplode:
00013F00 4E75                       		rts	
00013F02                            ; ===========================================================================
00013F02                            
00013F02                            @chksonic:
00013F02 3038 D008                  		move.w	(v_player+obX).w,d0
00013F06 9068 0008                  		sub.w	obX(a0),d0
00013F0A 6400                       		bcc.s	@isleft
00013F0C 4440                       		neg.w	d0
00013F0E                            
00013F0E                            	@isleft:
00013F0E 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013F12 6400                       		bcc.s	@outofrange	; if not, branch
00013F14 3038 D00C                  		move.w	(v_player+obY).w,d0
00013F18 9068 000C                  		sub.w	obY(a0),d0
00013F1C 6400                       		bcc.s	@isabove
00013F1E 4440                       		neg.w	d0
00013F20                            
00013F20                            	@isabove:
00013F20 0C40 0060                  		cmpi.w	#$60,d0
00013F24 6400                       		bcc.s	@outofrange
00013F26 4A78 FE08                  		tst.w	(v_debuguse).w
00013F2A 6600                       		bne.s	@outofrange
00013F2C                            
00013F2C 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013F32 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013F38 4268 0010                  		clr.w	obVelX(a0)
00013F3C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013F42 6100 BEC4                  		bsr.w	FindNextFreeObj
00013F46 6600                       		bne.s	@outofrange
00013F48 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013F4C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F52 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F58 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013F5E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013F64 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013F6A 137C 0003 001C             		move.b	#3,obAnim(a1)
00013F70 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013F76 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013F7C 6700                       		beq.s	@normal		; if not, branch
00013F7E 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013F82                            
00013F82                            	@normal:
00013F82 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013F88 2348 003C                  		move.l	a0,bom_parent(a1)
00013F8C                            
00013F8C                            @outofrange:
00013F8C 4E75                       		rts	
00013F8E                            ; ===========================================================================
00013F8E                            
00013F8E                            Bom_Display:	; Routine 4
00013F8E 6100                       		bsr.s	loc_11B70
00013F90 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F96 6100 8976                  		bsr.w	AnimateSprite
00013F9A 6000 D970                  		bra.w	RememberState
00013F9E                            ; ===========================================================================
00013F9E                            
00013F9E                            loc_11B70:
00013F9E 5368 0030                  		subq.w	#1,bom_time(a0)
00013FA2 6B00                       		bmi.s	loc_11B7C
00013FA4 6100 B89E                  		bsr.w	SpeedToPos
00013FA8 4E75                       		rts	
00013FAA                            ; ===========================================================================
00013FAA                            
00013FAA                            loc_11B7C:
00013FAA 4268 0030                  		clr.w	bom_time(a0)
00013FAE 4228 0024                  		clr.b	obRoutine(a0)
00013FB2 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013FB8 7203                       		moveq	#3,d1
00013FBA 2248                       		movea.l	a0,a1
00013FBC 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013FC2 6000                       		bra.s	@makeshrapnel
00013FC4                            ; ===========================================================================
00013FC4                            
00013FC4                            	@loop:
00013FC4 6100 BE42                  		bsr.w	FindNextFreeObj
00013FC8 6600                       		bne.s	@fail
00013FCA                            
00013FCA                            @makeshrapnel:
00013FCA 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013FCE 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013FD4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013FDA 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013FE0 137C 0004 001C             		move.b	#4,obAnim(a1)
00013FE6 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013FEA 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013FEE 137C 0098 0020             		move.b	#$98,obColType(a1)
00013FF4 08E9 0007 0001             		bset	#7,obRender(a1)
00013FFA                            
00013FFA                            	@fail:
00013FFA 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013FFE                            
00013FFE 117C 0006 0024             		move.b	#6,obRoutine(a0)
00014004                            
00014004                            Bom_End:	; Routine 6
00014004 6100 B83E                  		bsr.w	SpeedToPos
00014008 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001400E 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00014014 6100 88F8                  		bsr.w	AnimateSprite
00014018 4A28 0001                  		tst.b	obRender(a0)
0001401C 6A00 B87A                  		bpl.w	DeleteObject
00014020 6000 B836                  		bra.w	DisplaySprite
00014024                            ; ===========================================================================
00014024 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00014024 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00014034                            		include	"_anim\Bomb Enemy.asm"
00014034                            ; ---------------------------------------------------------------------------
00014034                            ; Animation script - Bomb enemy
00014034                            ; ---------------------------------------------------------------------------
00014034 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00014036 0000                       		dc.w @walk-Ani_Bomb
00014038 0000                       		dc.w @activated-Ani_Bomb
0001403A 0000                       		dc.w @fuse-Ani_Bomb
0001403C 0000                       		dc.w @shrapnel-Ani_Bomb
0001403E 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00014042 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00014048 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
0001404C 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00014050 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00014054                            		even
00014054                            		even
00014054                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00014054                            ; ---------------------------------------------------------------------------
00014054                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014054                            ; ---------------------------------------------------------------------------
00014054                            Map_Bomb_internal:
00014054 0000                       		dc.w @stand1-Map_Bomb_internal
00014056 0000                       		dc.w @stand2-Map_Bomb_internal
00014058 0000                       		dc.w @walk1-Map_Bomb_internal
0001405A 0000                       		dc.w @walk2-Map_Bomb_internal
0001405C 0000                       		dc.w @walk3-Map_Bomb_internal
0001405E 0000                       		dc.w @walk4-Map_Bomb_internal
00014060 0000                       		dc.w @activate1-Map_Bomb_internal
00014062 0000                       		dc.w @activate2-Map_Bomb_internal
00014064 0000                       		dc.w @fuse1-Map_Bomb_internal
00014066 0000                       		dc.w @fuse2-Map_Bomb_internal
00014068 0000                       		dc.w @shrapnel1-Map_Bomb_internal
0001406A 0000                       		dc.w @shrapnel2-Map_Bomb_internal
0001406C 03                         @stand1:	dc.b 3
0001406D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00014072 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014077 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001407C 03                         @stand2:	dc.b 3
0001407D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014082 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014087 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001408C 03                         @walk1:		dc.b 3
0001408D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014092 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00014097 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001409C 03                         @walk2:		dc.b 3
0001409D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140A2 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000140A7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000140AC 03                         @walk3:		dc.b 3
000140AD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000140B2 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000140B7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000140BC 03                         @walk4:		dc.b 3
000140BD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140C2 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000140C7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000140CC 02                         @activate1:	dc.b 2
000140CD F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
000140D2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140D7 02                         @activate2:	dc.b 2
000140D8 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140DD 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140E2 01                         @fuse1:		dc.b 1
000140E3 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
000140E8 01                         @fuse2:		dc.b 1
000140E9 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000140EE 01                         @shrapnel1:	dc.b 1
000140EF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000140F4 01                         @shrapnel2:	dc.b 1
000140F5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000140FA                            		even
000140FA                            		even
000140FA                            
000140FA                            		include	"_incObj\60 Orbinaut.asm"
000140FA                            ; ---------------------------------------------------------------------------
000140FA                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000140FA                            ; ---------------------------------------------------------------------------
000140FA                            
000140FA                            Orbinaut:
000140FA 7000                       		moveq	#0,d0
000140FC 1028 0024                  		move.b	obRoutine(a0),d0
00014100 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00014104 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00014108                            ; ===========================================================================
00014108 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
0001410A 0000                       		dc.w Orb_ChkSonic-Orb_Index
0001410C 0000                       		dc.w Orb_Display-Orb_Index
0001410E 0000                       		dc.w Orb_MoveOrb-Orb_Index
00014110 0000                       		dc.w Orb_ChkDel2-Orb_Index
00014112                            
00014112 =0000003C                  orb_parent:	equ $3C		; address of parent object
00014112                            ; ===========================================================================
00014112                            
00014112                            Orb_Main:	; Routine 0
00014112 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
0001411A 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00014120 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00014126 6700                       		beq.s	@isscrap
00014128 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
0001412E                            
0001412E                            	@isscrap:
0001412E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00014134 6600                       		bne.s	@notlabyrinth
00014136 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
0001413C                            
0001413C                            	@notlabyrinth:
0001413C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014142 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014148 117C 000B 0020             		move.b	#$B,obColType(a0)
0001414E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00014154 7400                       		moveq	#0,d2
00014156 45E8 0037                  		lea	$37(a0),a2
0001415A 264A                       		movea.l	a2,a3
0001415C 524A                       		addq.w	#1,a2
0001415E 7203                       		moveq	#3,d1
00014160                            
00014160                            @makesatellites:
00014160 6100 BCA6                  		bsr.w	FindNextFreeObj
00014164 6600                       		bne.s	@fail
00014166 5213                       		addq.b	#1,(a3)
00014168 3A09                       		move.w	a1,d5
0001416A 0445 D000                  		subi.w	#$D000,d5
0001416E EC4D                       		lsr.w	#6,d5
00014170 0245 007F                  		andi.w	#$7F,d5
00014174 14C5                       		move.b	d5,(a2)+
00014176 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014178 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
0001417E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00014184 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001418A 0029 0004 0001             		ori.b	#4,obRender(a1)
00014190 337C 0200 0018             		move.w	#$200,obPriority(a1)
00014196 137C 0008 0014             		move.b	#8,obActWid(a1)
0001419C 137C 0003 001A             		move.b	#3,obFrame(a1)
000141A2 137C 0098 0020             		move.b	#$98,obColType(a1)
000141A8 1342 0026                  		move.b	d2,obAngle(a1)
000141AC 0602 0040                  		addi.b	#$40,d2
000141B0 2348 003C                  		move.l	a0,orb_parent(a1)
000141B4 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
000141B8                            
000141B8                            	@fail:
000141B8 7001                       		moveq	#1,d0
000141BA 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
000141C0 6700                       		beq.s	@noflip		; if not, branch
000141C2 4440                       		neg.w	d0
000141C4                            
000141C4                            	@noflip:
000141C4 1140 0036                  		move.b	d0,$36(a0)
000141C8 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000141CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000141D2 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000141D8 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000141DE 6700                       		beq.s	@noflip2	; if not, branch
000141E0 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000141E4                            
000141E4                            	@noflip2:
000141E4 4E75                       		rts	
000141E6                            ; ===========================================================================
000141E6                            
000141E6                            Orb_ChkSonic:	; Routine 2
000141E6 3038 D008                  		move.w	(v_player+obX).w,d0
000141EA 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000141EE 6400                       		bcc.s	@isright	; if yes, branch
000141F0 4440                       		neg.w	d0
000141F2                            
000141F2                            	@isright:
000141F2 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000141F6 6400                       		bcc.s	@animate	; if not, branch
000141F8 3038 D00C                  		move.w	(v_player+obY).w,d0
000141FC 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00014200 6400                       		bcc.s	@isabove	; if yes, branch
00014202 4440                       		neg.w	d0
00014204                            
00014204                            	@isabove:
00014204 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00014208 6400                       		bcc.s	@animate	; if not, branch
0001420A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0001420E 6600                       		bne.s	@animate	; if yes, branch
00014210 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00014216                            
00014216                            @animate:
00014216 43F9 0000 0000             		lea	(Ani_Orb).l,a1
0001421C 6100 86F0                  		bsr.w	AnimateSprite
00014220 6000 0000                  		bra.w	Orb_ChkDel
00014224                            ; ===========================================================================
00014224                            
00014224                            Orb_Display:	; Routine 4
00014224 6100 B61E                  		bsr.w	SpeedToPos
00014228                            
00014228                            Orb_ChkDel:
00014246 6000 B610                  		bra.w	DisplaySprite
0001424A                            
0001424A                            @chkgone:
0001424A 45F8 FC00                  		lea	(v_objstate).w,a2
0001424E 7000                       		moveq	#0,d0
00014250 1028 0023                  		move.b	obRespawnNo(a0),d0
00014254 6700                       		beq.s	loc_11E34
00014256 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001425C                            
0001425C                            loc_11E34:
0001425C 45E8 0037                  		lea	$37(a0),a2
00014260 7400                       		moveq	#0,d2
00014262 141A                       		move.b	(a2)+,d2
00014264 5342                       		subq.w	#1,d2
00014266 6500                       		bcs.s	Orb_Delete
00014268                            
00014268                            loc_11E40:
00014268 7000                       		moveq	#0,d0
0001426A 101A                       		move.b	(a2)+,d0
0001426C ED48                       		lsl.w	#6,d0
0001426E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00014274 2240                       		movea.l	d0,a1
00014276 6100 B622                  		bsr.w	DeleteChild
0001427A 51CA FFEC                  		dbf	d2,loc_11E40
0001427E                            
0001427E                            Orb_Delete:
0001427E 6000 B618                  		bra.w	DeleteObject
00014282                            ; ===========================================================================
00014282                            
00014282                            Orb_MoveOrb:	; Routine 6
00014282 2268 003C                  		movea.l	orb_parent(a0),a1
00014286 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
0001428A 6600 B60C                  		bne.w	DeleteObject	; if not, delete
0001428E 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014294 6600                       		bne.s	@circle		; if not, branch
00014296 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
0001429C 6600                       		bne.s	@circle		; if not, branch
0001429E 5428 0024                  		addq.b	#2,obRoutine(a0)
000142A2 5329 0037                  		subq.b	#1,$37(a1)
000142A6 6600                       		bne.s	@fire
000142A8 5429 0024                  		addq.b	#2,obRoutine(a1)
000142AC                            
000142AC                            	@fire:
000142AC 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
000142B2 0829 0000 0022             		btst	#0,obStatus(a1)
000142B8 6700                       		beq.s	@noflip
000142BA 4468 0010                  		neg.w	obVelX(a0)
000142BE                            
000142BE                            	@noflip:
000142BE 6000 B598                  		bra.w	DisplaySprite
000142C2                            ; ===========================================================================
000142C2                            
000142C2                            @circle:
000142C2 1028 0026                  		move.b	obAngle(a0),d0
000142C6 4EB9 0000 3D28             		jsr	(CalcSine).l
000142CC E841                       		asr.w	#4,d1
000142CE D269 0008                  		add.w	obX(a1),d1
000142D2 3141 0008                  		move.w	d1,obX(a0)
000142D6 E840                       		asr.w	#4,d0
000142D8 D069 000C                  		add.w	obY(a1),d0
000142DC 3140 000C                  		move.w	d0,obY(a0)
000142E0 1029 0036                  		move.b	$36(a1),d0
000142E4 D128 0026                  		add.b	d0,obAngle(a0)
000142E8 6000 B56E                  		bra.w	DisplaySprite
000142EC                            ; ===========================================================================
000142EC                            
000142EC                            Orb_ChkDel2:	; Routine 8
000142EC 6100 B556                  		bsr.w	SpeedToPos
000142F0 4A28 0001                  		tst.b	obRender(a0)
000142F4 6A00 B5A2                  		bpl.w	DeleteObject
000142F8 6000 B55E                  		bra.w	DisplaySprite
000142F8 6000 B55E                  		bra.w	DisplaySprite
000142FC                            		include	"_anim\Orbinaut.asm"
000142FC                            ; ---------------------------------------------------------------------------
000142FC                            ; Animation script - Orbinaut enemy
000142FC                            ; ---------------------------------------------------------------------------
000142FC 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000142FE 0000                       		dc.w @angers-Ani_Orb
00014300 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00014304 00                         		even
00014304 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
0001430A 00                         		even
0001430A 00                         		even
0001430A                            Map_Orb:	include	"_maps\Orbinaut.asm"
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            Map_Orb_internal:
0001430A 0000                       		dc.w @normal-Map_Orb_internal
0001430C 0000                       		dc.w @medium-Map_Orb_internal
0001430E 0000                       		dc.w @angry-Map_Orb_internal
00014310 0000                       		dc.w @spikeball-Map_Orb_internal
00014312 01                         @normal:	dc.b 1
00014313 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014318 01                         @medium:	dc.b 1
00014319 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001431E 01                         @angry:		dc.b 1
0001431F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00014324 01                         @spikeball:	dc.b 1
00014325 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001432A                            		even
0001432A                            		even
0001432A                            
0001432A                            		include	"_incObj\16 Harpoon.asm"
0001432A                            ; ---------------------------------------------------------------------------
0001432A                            ; Object 16 - harpoon (LZ)
0001432A                            ; ---------------------------------------------------------------------------
0001432A                            
0001432A                            Harpoon:
0001432A 7000                       		moveq	#0,d0
0001432C 1028 0024                  		move.b	obRoutine(a0),d0
00014330 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00014334 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00014338                            ; ===========================================================================
00014338 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
0001433A 0000                       		dc.w Harp_Move-Harp_Index
0001433C 0000                       		dc.w Harp_Wait-Harp_Index
0001433E                            
0001433E =00000030                  harp_time:	equ $30		; time between stabbing/retracting
0001433E                            ; ===========================================================================
0001433E                            
0001433E                            Harp_Main:	; Routine 0
0001433E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014342 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
0001434A 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014350 0028 0004 0001             		ori.b	#4,obRender(a0)
00014356 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001435C 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014362 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014368 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
0001436E                            
0001436E                            Harp_Move:	; Routine 2
0001436E 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00014374 6100 8598                  		bsr.w	AnimateSprite
00014378 7000                       		moveq	#0,d0
0001437A 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
0001437E 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00014384 6000 D586                  		bra.w	RememberState
00014388                            
00014388                            	@types:
00014388 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001438E                            		even
0001438E                            
0001438E                            Harp_Wait:	; Routine 4
0001438E 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014392 6A00                       		bpl.s	@chkdel		; branch if time remains
00014394 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001439A 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
0001439E 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
000143A4                            
000143A4                            	@chkdel:
000143A4 6000 D566                  		bra.w	RememberState
000143A4 6000 D566                  		bra.w	RememberState
000143A8                            		include	"_anim\Harpoon.asm"
000143A8                            ; ---------------------------------------------------------------------------
000143A8                            ; Animation script - harpoon (LZ)
000143A8                            ; ---------------------------------------------------------------------------
000143A8 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
000143AA 0000                       		dc.w @h_retracting-Ani_Harp
000143AC 0000                       		dc.w @v_extending-Ani_Harp
000143AE 0000                       		dc.w @v_retracting-Ani_Harp
000143B0 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
000143B4 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
000143B8 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
000143BC 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
000143C0                            		even
000143C0                            		even
000143C0                            Map_Harp:	include	"_maps\Harpoon.asm"
000143C0                            ; --------------------------------------------------------------------------------
000143C0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000143C0                            ; --------------------------------------------------------------------------------
000143C0                            
000143C0                            SME_JPFHb:	
000143C0 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
000143C4 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
000143C8 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
000143CC 01                         SME_JPFHb_C:	dc.b 1	
000143CD FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
000143D2 01                         SME_JPFHb_12:	dc.b 1	
000143D3 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
000143D8 02                         SME_JPFHb_18:	dc.b 2	
000143D9 FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
000143DE FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
000143E3 01                         SME_JPFHb_23:	dc.b 1	
000143E4 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
000143E9 01                         SME_JPFHb_29:	dc.b 1	
000143EA E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
000143EF 02                         SME_JPFHb_2F:	dc.b 2	
000143F0 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
000143F5 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
000143FA                            		even
000143FA                            		even
000143FA                            		include	"_incObj\61 LZ Blocks.asm"
000143FA                            ; ---------------------------------------------------------------------------
000143FA                            ; Object 61 - blocks (LZ)
000143FA                            ; ---------------------------------------------------------------------------
000143FA                            
000143FA                            LabyrinthBlock:
000143FA 7000                       		moveq	#0,d0
000143FC 1028 0024                  		move.b	obRoutine(a0),d0
00014400 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00014404 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
00014408                            ; ===========================================================================
00014408 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
0001440A 0000                       		dc.w LBlk_Action-LBlk_Index
0001440C                            
0001440C 1010                       LBlk_Var:	dc.b $10, $10		; width, height
0001440E 200C                       		dc.b $20, $C
00014410 1010                       		dc.b $10, $10
00014412 1010                       		dc.b $10, $10
00014414                            
00014414 =00000016                  lblk_height:	equ $16		; block height
00014414 =00000034                  lblk_origX:	equ $34		; original x-axis position
00014414 =00000030                  lblk_origY:	equ $30		; original y-axis position
00014414 =00000036                  lblk_time:	equ $36		; time delay for block movement
00014414 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00014414                            ; ===========================================================================
00014414                            
00014414                            LBlk_Main:	; Routine 0
00014414 5428 0024                  		addq.b	#2,obRoutine(a0)
00014418 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014420 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00014426 117C 0004 0001             		move.b	#4,obRender(a0)
0001442C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014432 7000                       		moveq	#0,d0
00014434 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014438 E648                       		lsr.w	#3,d0		; read only the 1st digit
0001443A 0240 000E                  		andi.w	#$E,d0
0001443E 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014442 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014446 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
0001444A E248                       		lsr.w	#1,d0
0001444C 1140 001A                  		move.b	d0,obFrame(a0)
00014450 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014456 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
0001445C 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014460 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014464 6700                       		beq.s	LBlk_Action	; branch if 0
00014466 0C00 0007                  		cmpi.b	#7,d0
0001446A 6700                       		beq.s	LBlk_Action	; branch if 7
0001446C 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014472                            
00014472                            LBlk_Action:	; Routine 2
00014472 3F28 0008                  		move.w	obX(a0),-(sp)
00014476 7000                       		moveq	#0,d0
00014478 1028 0028                  		move.b	obSubtype(a0),d0
0001447C 0240 000F                  		andi.w	#$F,d0
00014480 D040                       		add.w	d0,d0
00014482 323B 0000                  		move.w	@index(pc,d0.w),d1
00014486 4EBB 1000                  		jsr	@index(pc,d1.w)
0001448A 381F                       		move.w	(sp)+,d4
0001448C 4A28 0001                  		tst.b	obRender(a0)
00014490 6A00                       		bpl.s	@chkdel
00014492 7200                       		moveq	#0,d1
00014494 1228 0014                  		move.b	obActWid(a0),d1
00014498 0641 000B                  		addi.w	#$B,d1
0001449C 7400                       		moveq	#0,d2
0001449E 1428 0016                  		move.b	lblk_height(a0),d2
000144A2 3602                       		move.w	d2,d3
000144A4 5243                       		addq.w	#1,d3
000144A6 6100 D8FC                  		bsr.w	SolidObject
000144AA 1144 003F                  		move.b	d4,$3F(a0)
000144AE 6100 0000                  		bsr.w	loc_12180
000144B2                            
000144B2                            @chkdel:
000144D0 6000 B386                  		bra.w	DisplaySprite
000144D4                            ; ===========================================================================
000144D4 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000144D8 0000 0000                  		dc.w @type02-@index, @type03-@index
000144DC 0000 0000                  		dc.w @type04-@index, @type05-@index
000144E0 0000 0000                  		dc.w @type06-@index, @type07-@index
000144E4                            ; ===========================================================================
000144E4                            
000144E4                            @type00:
000144E4 4E75                       		rts	
000144E6                            ; ===========================================================================
000144E6                            
000144E6                            @type01:
000144E6                            @type03:
000144E6 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000144EA 6600                       		bne.s	@wait01		; if yes, branch
000144EC 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000144F2 6700                       		beq.s	@donothing01	; if not, branch
000144F4 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000144FA                            
000144FA                            	@donothing01:
000144FA 4E75                       		rts	
000144FC                            ; ===========================================================================
000144FC                            
000144FC                            	@wait01:
000144FC 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
00014500 66F8                       		bne.s	@donothing01	; if time remains, branch
00014502 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
00014506 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
0001450A 4E75                       		rts	
0001450C                            ; ===========================================================================
0001450C                            
0001450C                            @type02:
0001450C                            @type06:
0001450C 6100 B336                  		bsr.w	SpeedToPos
00014510 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
00014514 6100 0000                  		bsr.w	ObjFloorDist
00014518 4A41                       		tst.w	d1		; has block hit the floor?
0001451A 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
0001451E 5241                       		addq.w	#1,d1
00014520 D368 000C                  		add.w	d1,obY(a0)
00014524 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
00014528 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001452C                            
0001452C                            	@nofloor02:
0001452C 4E75                       		rts	
0001452E                            ; ===========================================================================
0001452E                            
0001452E                            @type04:
0001452E 6100 B314                  		bsr.w	SpeedToPos
00014532 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
00014536 6100 0000                  		bsr.w	ObjHitCeiling
0001453A 4A41                       		tst.w	d1		; has block hit the ceiling?
0001453C 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014540 9368 000C                  		sub.w	d1,obY(a0)
00014544 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014548 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001454C                            
0001454C                            	@noceiling04:
0001454C 4E75                       		rts	
0001454E                            ; ===========================================================================
0001454E                            
0001454E                            @type05:
0001454E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
00014554 6600                       		bne.s	@notouch05	; if not, branch
00014556 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
0001455A 4228 0038                  		clr.b	lblk_untouched(a0)
0001455E                            
0001455E                            	@notouch05:
0001455E 4E75                       		rts	
00014560                            ; ===========================================================================
00014560                            
00014560                            @type07:
00014560 3038 F646                  		move.w	(v_waterpos1).w,d0
00014564 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014568 6700                       		beq.s	@stop07		; if yes, branch
0001456A 6400                       		bcc.s	@fall07		; branch if block is above water
0001456C 0C40 FFFE                  		cmpi.w	#-2,d0
00014570 6C00                       		bge.s	@loc_1214E
00014572 70FE                       		moveq	#-2,d0
00014574                            
00014574                            	@loc_1214E:
00014574 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014578 6100 0000                  		bsr.w	ObjHitCeiling
0001457C 4A41                       		tst.w	d1		; has block hit the ceiling?
0001457E 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014582 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014586                            
00014586                            	@noceiling07:
00014586 4E75                       		rts	
00014588                            ; ===========================================================================
00014588                            
00014588                            @fall07:
00014588 0C40 0002                  		cmpi.w	#2,d0
0001458C 6F00                       		ble.s	@loc_1216A
0001458E 7002                       		moveq	#2,d0
00014590                            
00014590                            	@loc_1216A:
00014590 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014594 6100 0000                  		bsr.w	ObjFloorDist
00014598 4A41                       		tst.w	d1
0001459A 6A00 0000                  		bpl.w	@stop07
0001459E 5241                       		addq.w	#1,d1
000145A0 D368 000C                  		add.w	d1,obY(a0)
000145A4                            
000145A4                            	@stop07:
000145A4 4E75                       		rts	
000145A6                            ; ===========================================================================
000145A6                            
000145A6                            loc_12180:
000145A6 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
000145AA 6700                       		beq.s	locret_121C0	; if yes, branch
000145AC 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
000145B2 6600                       		bne.s	loc_1219A	; if yes, branch
000145B4 4A28 003E                  		tst.b	$3E(a0)
000145B8 6700                       		beq.s	locret_121C0
000145BA 5928 003E                  		subq.b	#4,$3E(a0)
000145BE 6000                       		bra.s	loc_121A6
000145C0                            ; ===========================================================================
000145C0                            
000145C0                            loc_1219A:
000145C0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000145C6 6700                       		beq.s	locret_121C0
000145C8 5828 003E                  		addq.b	#4,$3E(a0)
000145CC                            
000145CC                            loc_121A6:
000145CC 1028 003E                  		move.b	$3E(a0),d0
000145D0 4EB9 0000 3D28             		jsr	(CalcSine).l
000145D6 323C 0400                  		move.w	#$400,d1
000145DA C1C1                       		muls.w	d1,d0
000145DC 4840                       		swap	d0
000145DE D068 0030                  		add.w	lblk_origY(a0),d0
000145E2 3140 000C                  		move.w	d0,obY(a0)
000145E6                            
000145E6                            locret_121C0:
000145E6 4E75                       		rts	
000145E6 4E75                       		rts	
000145E8                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000145E8                            Map_6865:
000145E8 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000145EA 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000145EC 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000145EE 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000145F0 01                         Map_6865_8: 	dc.b $1
000145F1 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000145F6 02                         Map_6865_E: 	dc.b $2
000145F7 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000145FC F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
00014601 01                         Map_6865_19: 	dc.b $1
00014602 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
00014607 01                         Map_6865_1F: 	dc.b $1
00014608 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
0001460E 00                         	even
0001460E 00                         	even
0001460E                            		include	"_incObj\62 Gargoyle.asm"
0001460E                            ; ---------------------------------------------------------------------------
0001460E                            ; Object 62 - gargoyle head (LZ)
0001460E                            ; ---------------------------------------------------------------------------
0001460E                            
0001460E                            Gargoyle:
0001460E 7000                       		moveq	#0,d0
00014610 1028 0024                  		move.b	obRoutine(a0),d0
00014614 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
00014618 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
0001461C 6000 D2EE                  		bra.w	RememberState
00014620                            ; ===========================================================================
00014620 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014622 0000                       		dc.w Gar_MakeFire-Gar_Index
00014624 0000                       		dc.w Gar_FireBall-Gar_Index
00014626 0000                       		dc.w Gar_AniFire-Gar_Index
00014628                            
00014628 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014630                            ; ===========================================================================
00014630                            
00014630                            Gar_Main:	; Routine 0
00014630 5428 0024                  		addq.b	#2,obRoutine(a0)
00014634 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001463C 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014642 0028 0004 0001             		ori.b	#4,obRender(a0)
00014648 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001464E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014654 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014658 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001465C 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014662 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014668 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001466E                            
0001466E                            Gar_MakeFire:	; Routine 2
0001466E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014672 6600                       		bne.s	@nofire		; if time remains, branch
00014674                            
00014674 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
0001467A 6100 B56A                  		bsr.w	ChkObjectVisible
0001467E 6600                       		bne.s	@nofire
00014680 6100 B770                  		bsr.w	FindFreeObj
00014684 6600                       		bne.s	@nofire
00014686 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
0001468A 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
0001468E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014694 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001469A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000146A0 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000146A6                            
000146A6                            	@nofire:
000146A6 4E75                       		rts	
000146A8                            ; ===========================================================================
000146A8                            
000146A8                            Gar_FireBall:	; Routine 4
000146A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000146AC 117C 0008 0016             		move.b	#8,obHeight(a0)
000146B2 117C 0008 0017             		move.b	#8,obWidth(a0)
000146B8 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000146C0 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
000146C6 0028 0004 0001             		ori.b	#4,obRender(a0)
000146CC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000146D2 117C 0098 0020             		move.b	#$98,obColType(a0)
000146D8 117C 0008 0014             		move.b	#8,obActWid(a0)
000146DE 117C 0002 001A             		move.b	#2,obFrame(a0)
000146E4 5068 000C                  		addq.w	#8,obY(a0)
000146E8 317C 0200 0010             		move.w	#$200,obVelX(a0)
000146EE 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000146F4 6600                       		bne.s	@noflip		; if not, branch
000146F6 4468 0010                  		neg.w	obVelX(a0)
000146FA                            
000146FA                            	@noflip:
00014704                            
00014704                            Gar_AniFire:	; Routine 6
00014704 1038 FE05                  		move.b	(v_framebyte).w,d0
00014708 0200 0007                  		andi.b	#7,d0
0001470C 6600                       		bne.s	@nochg
0001470E 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
00014714                            
00014714                            	@nochg:
00014714 6100 B12E                  		bsr.w	SpeedToPos
00014718 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
0001471E 6600                       		bne.s	@isright	; if not, branch
00014720 76F8                       		moveq	#-8,d3
00014722 6100 0000                  		bsr.w	ObjHitWallLeft
00014726 4A41                       		tst.w	d1
00014728 6B00 B16E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001472C 4E75                       		rts	
0001472E                            
0001472E                            	@isright:
0001472E 7608                       		moveq	#8,d3
00014730 6100 0000                  		bsr.w	ObjHitWallRight
00014734 4A41                       		tst.w	d1
00014736 6B00 B160                  		bmi.w	DeleteObject
0001473A 4E75                       		rts	
0001473A 4E75                       		rts	
0001473C                            Map_Gar:	include	"_maps\Gargoyle.asm"
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            ; Sprite mappings - gargoyle head (LZ)
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            Map_Gar_internal:
0001473C 0000                       		dc.w @head-Map_Gar_internal
0001473E 0000                       		dc.w @head-Map_Gar_internal
00014740 0000                       		dc.w @fireball1-Map_Gar_internal
00014742 0000                       		dc.w @fireball2-Map_Gar_internal
00014744 03                         @head:		dc.b 3
00014745 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001474A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001474F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00014754 01                         @fireball1:	dc.b 1
00014755 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001475A 01                         @fireball2:	dc.b 1
0001475B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014760                            		even
00014760                            		even
00014760                            		include	"_incObj\63 LZ Conveyor.asm"
00014760                            ; ---------------------------------------------------------------------------
00014760                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014760                            ; ---------------------------------------------------------------------------
00014760                            
00014760                            LabyrinthConvey:
00014760 7000                       		moveq	#0,d0
00014762 1028 0024                  		move.b	obRoutine(a0),d0
00014766 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
0001476A 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
0001478A                            
0001478A                            LCon_Display:
0001478A 6000 B0CC                  		bra.w	DisplaySprite
0001478E                            ; ===========================================================================
0001478E                            
0001478E                            loc_1236A:
0001478E 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014794 6600                       		bne.s	loc_12378
00014796 0C40 FF80                  		cmpi.w	#-$80,d0
0001479A 64EE                       		bcc.s	LCon_Display
0001479C                            
0001479C                            loc_12378:
0001479C 1028 002F                  		move.b	$2F(a0),d0
000147A0 6A00 B0F6                  		bpl.w	DeleteObject
000147A4 0240 007F                  		andi.w	#$7F,d0
000147A8 45F8 F7C1                  		lea	(v_obj63).w,a2
000147AC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000147B2 6000 B0E4                  		bra.w	DeleteObject
000147B6                            ; ===========================================================================
000147B6 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
000147B8 0000                       		dc.w loc_124B2-LCon_Index
000147BA 0000                       		dc.w loc_124C2-LCon_Index
000147BC 0000                       		dc.w loc_124DE-LCon_Index
000147BE                            ; ===========================================================================
000147BE                            
000147BE                            LCon_Main:	; Routine 0
000147BE 1028 0028                  		move.b	obSubtype(a0),d0
000147C2 6B00 0000                  		bmi.w	loc_12460
000147C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000147CA 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000147D2 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000147D8 0028 0004 0001             		ori.b	#4,obRender(a0)
000147DE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000147E4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000147EA 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000147F0 6600                       		bne.s	loc_123E2
000147F2 5828 0024                  		addq.b	#4,obRoutine(a0)
000147F6 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000147FC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014802 6000 0000                  		bra.w	loc_124DE
00014806                            ; ===========================================================================
00014806                            
00014806                            loc_123E2:
00014806 117C 0004 001A             		move.b	#4,obFrame(a0)
0001480C 7000                       		moveq	#0,d0
0001480E 1028 0028                  		move.b	obSubtype(a0),d0
00014812 3200                       		move.w	d0,d1
00014814 E648                       		lsr.w	#3,d0
00014816 0240 001E                  		andi.w	#$1E,d0
0001481A 45FA 0000                  		lea	LCon_Data(pc),a2
0001481E D4F2 0000                  		adda.w	(a2,d0.w),a2
00014822 315A 0038                  		move.w	(a2)+,$38(a0)
00014826 315A 0030                  		move.w	(a2)+,$30(a0)
0001482A 214A 003C                  		move.l	a2,$3C(a0)
0001482E 0241 000F                  		andi.w	#$F,d1
00014832 E549                       		lsl.w	#2,d1
00014834 1141 0038                  		move.b	d1,$38(a0)
00014838 117C 0004 003A             		move.b	#4,$3A(a0)
0001483E 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014842 6700                       		beq.s	loc_1244C
00014844 117C 0001 003B             		move.b	#1,$3B(a0)
0001484A 4428 003A                  		neg.b	$3A(a0)
0001484E 7200                       		moveq	#0,d1
00014850 1228 0038                  		move.b	$38(a0),d1
00014854 D228 003A                  		add.b	$3A(a0),d1
00014858 B228 0039                  		cmp.b	$39(a0),d1
0001485C 6500                       		bcs.s	loc_12448
0001485E 1001                       		move.b	d1,d0
00014860 7200                       		moveq	#0,d1
00014862 4A00                       		tst.b	d0
00014864 6A00                       		bpl.s	loc_12448
00014866 1228 0039                  		move.b	$39(a0),d1
0001486A 5901                       		subq.b	#4,d1
0001486C                            
0001486C                            loc_12448:
0001486C 1141 0038                  		move.b	d1,$38(a0)
00014870                            
00014870                            loc_1244C:
00014870 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014876 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001487C 6100 0000                  		bsr.w	LCon_ChangeDir
00014880 6000 0000                  		bra.w	loc_124B2
00014884                            ; ===========================================================================
00014884                            
00014884                            loc_12460:
00014884 1140 002F                  		move.b	d0,$2F(a0)
00014888 0240 007F                  		andi.w	#$7F,d0
0001488C 45F8 F7C1                  		lea	(v_obj63).w,a2
00014890 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014896 6600 B000                  		bne.w	DeleteObject
0001489A D040                       		add.w	d0,d0
0001489C 0240 001E                  		andi.w	#$1E,d0
000148A0 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
000148A4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000148AA D4F2 0000                  		adda.w	(a2,d0.w),a2
000148AE 321A                       		move.w	(a2)+,d1
000148B0 2248                       		movea.l	a0,a1
000148B2 6000                       		bra.s	LCon_MakePtfms
000148B4                            ; ===========================================================================
000148B4                            
000148B4                            LCon_Loop:
000148B4 6100 B53C                  		bsr.w	FindFreeObj
000148B8 6600                       		bne.s	loc_124AA
000148BA                            
000148BA                            LCon_MakePtfms:
000148BA 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
000148BE 335A 0008                  		move.w	(a2)+,obX(a1)
000148C2 335A 000C                  		move.w	(a2)+,obY(a1)
000148C6 301A                       		move.w	(a2)+,d0
000148C8 1340 0028                  		move.b	d0,obSubtype(a1)
000148CC                            
000148CC                            loc_124AA:
000148CC 51C9 FFE6                  		dbf	d1,LCon_Loop
000148D0                            
000148D0 588F                       		addq.l	#4,sp
000148D2 4E75                       		rts	
000148D4                            ; ===========================================================================
000148D4                            
000148D4                            loc_124B2:	; Routine 2
000148D4 7200                       		moveq	#0,d1
000148D6 1228 0014                  		move.b	obActWid(a0),d1
000148DA 4EB9 0000 8CAC             		jsr	(PlatformObject).l
000148E0 6000 0000                  		bra.w	sub_12502
000148E4                            ; ===========================================================================
000148E4                            
000148E4                            loc_124C2:	; Routine 4
000148E4 7200                       		moveq	#0,d1
000148E6 1228 0014                  		move.b	obActWid(a0),d1
000148EA 4EB9 0000 8E20             		jsr	(ExitPlatform).l
000148F0 3F28 0008                  		move.w	obX(a0),-(sp)
000148F4 6100 0000                  		bsr.w	sub_12502
000148F8 341F                       		move.w	(sp)+,d2
000148FA 4EF9 0000 938A             		jmp	(MvSonicOnPtfm2).l
00014900                            ; ===========================================================================
00014900                            
00014900                            loc_124DE:	; Routine 6
00014900 3038 FE04                  		move.w	(v_framecount).w,d0
00014904 0240 0003                  		andi.w	#3,d0
00014908 6600                       		bne.s	loc_124FC
0001490A 7201                       		moveq	#1,d1
0001490C 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014910 6700                       		beq.s	loc_124F2
00014912 4401                       		neg.b	d1
00014914                            
00014914                            loc_124F2:
00014914 D328 001A                  		add.b	d1,obFrame(a0)
00014918 0228 0003 001A             		andi.b	#3,obFrame(a0)
0001491E                            
0001491E                            loc_124FC:
0001491E 588F                       		addq.l	#4,sp
00014920 6000 CFEA                  		bra.w	RememberState
00014924                            
00014924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014924                            
00014924                            
00014924                            sub_12502:
00014924 4A38 F7EE                  		tst.b	(f_switch+$E).w
00014928 6700                       		beq.s	loc_12520
0001492A 4A28 003B                  		tst.b	$3B(a0)
0001492E 6600                       		bne.s	loc_12520
00014930 117C 0001 003B             		move.b	#1,$3B(a0)
00014936 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
0001493C 4428 003A                  		neg.b	$3A(a0)
00014940 6000                       		bra.s	loc_12534
00014942                            ; ===========================================================================
00014942                            
00014942                            loc_12520:
00014942 3028 0008                  		move.w	obX(a0),d0
00014946 B068 0034                  		cmp.w	$34(a0),d0
0001494A 6600                       		bne.s	loc_1256A
0001494C 3028 000C                  		move.w	obY(a0),d0
00014950 B068 0036                  		cmp.w	$36(a0),d0
00014954 6600                       		bne.s	loc_1256A
00014956                            
00014956                            loc_12534:
00014956 7200                       		moveq	#0,d1
00014958 1228 0038                  		move.b	$38(a0),d1
0001495C D228 003A                  		add.b	$3A(a0),d1
00014960 B228 0039                  		cmp.b	$39(a0),d1
00014964 6500                       		bcs.s	loc_12552
00014966 1001                       		move.b	d1,d0
00014968 7200                       		moveq	#0,d1
0001496A 4A00                       		tst.b	d0
0001496C 6A00                       		bpl.s	loc_12552
0001496E 1228 0039                  		move.b	$39(a0),d1
00014972 5901                       		subq.b	#4,d1
00014974                            
00014974                            loc_12552:
00014974 1141 0038                  		move.b	d1,$38(a0)
00014978 2268 003C                  		movea.l	$3C(a0),a1
0001497C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014982 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014988 6100 0000                  		bsr.w	LCon_ChangeDir
0001498C                            
0001498C                            loc_1256A:
0001498C 6100 AEB6                  		bsr.w	SpeedToPos
00014990 4E75                       		rts	
00014992                            ; End of function sub_12502
00014992                            
00014992                            
00014992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014992                            
00014992                            
00014992                            LCon_ChangeDir:
00014992 7000                       		moveq	#0,d0
00014994 343C FF00                  		move.w	#-$100,d2
00014998 3028 0008                  		move.w	obX(a0),d0
0001499C 9068 0034                  		sub.w	$34(a0),d0
000149A0 6400                       		bcc.s	loc_12584
000149A2 4440                       		neg.w	d0
000149A4 4442                       		neg.w	d2
000149A6                            
000149A6                            loc_12584:
000149A6 7200                       		moveq	#0,d1
000149A8 363C FF00                  		move.w	#-$100,d3
000149AC 3228 000C                  		move.w	obY(a0),d1
000149B0 9268 0036                  		sub.w	$36(a0),d1
000149B4 6400                       		bcc.s	loc_12598
000149B6 4441                       		neg.w	d1
000149B8 4443                       		neg.w	d3
000149BA                            
000149BA                            loc_12598:
000149BA B240                       		cmp.w	d0,d1
000149BC 6500                       		bcs.s	loc_125C2
000149BE 3028 0008                  		move.w	obX(a0),d0
000149C2 9068 0034                  		sub.w	$34(a0),d0
000149C6 6700                       		beq.s	loc_125AE
000149C8 48C0                       		ext.l	d0
000149CA E180                       		asl.l	#8,d0
000149CC 81C1                       		divs.w	d1,d0
000149CE 4440                       		neg.w	d0
000149D0                            
000149D0                            loc_125AE:
000149D0 3140 0010                  		move.w	d0,obVelX(a0)
000149D4 3143 0012                  		move.w	d3,obVelY(a0)
000149D8 4840                       		swap	d0
000149DA 3140 000A                  		move.w	d0,obX+2(a0)
000149DE 4268 000E                  		clr.w	obY+2(a0)
000149E2 4E75                       		rts	
000149E4                            ; ===========================================================================
000149E4                            
000149E4                            loc_125C2:
000149E4 3228 000C                  		move.w	obY(a0),d1
000149E8 9268 0036                  		sub.w	$36(a0),d1
000149EC 6700                       		beq.s	loc_125D4
000149EE 48C1                       		ext.l	d1
000149F0 E181                       		asl.l	#8,d1
000149F2 83C0                       		divs.w	d0,d1
000149F4 4441                       		neg.w	d1
000149F6                            
000149F6                            loc_125D4:
000149F6 3141 0012                  		move.w	d1,obVelY(a0)
000149FA 3142 0010                  		move.w	d2,obVelX(a0)
000149FE 4841                       		swap	d1
00014A00 3141 000E                  		move.w	d1,obY+2(a0)
00014A04 4268 000A                  		clr.w	obX+2(a0)
00014A08 4E75                       		rts	
00014A0A                            ; End of function LCon_ChangeDir
00014A0A                            
00014A0A                            ; ===========================================================================
00014A0A 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014A0C 0000                       		dc.w word_12610-LCon_Data
00014A0E 0000                       		dc.w word_12628-LCon_Data
00014A10 0000                       		dc.w word_1263C-LCon_Data
00014A12 0000                       		dc.w word_12650-LCon_Data
00014A14 0000                       		dc.w word_12668-LCon_Data
00014A16 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014A26 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014A32 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014A42 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014A4A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014A5E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014A72 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014A8A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A8A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A9E                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A9E                            ; ---------------------------------------------------------------------------
00014A9E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A9E                            ; ---------------------------------------------------------------------------
00014A9E                            Map_LConv_internal:
00014A9E 0000                       		dc.w @wheel1-Map_LConv_internal
00014AA0 0000                       		dc.w @wheel2-Map_LConv_internal
00014AA2 0000                       		dc.w @wheel3-Map_LConv_internal
00014AA4 0000                       		dc.w @wheel4-Map_LConv_internal
00014AA6 0000                       		dc.w @platform-Map_LConv_internal
00014AA8 01                         @wheel1:	dc.b 1
00014AA9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014AAE 01                         @wheel2:	dc.b 1
00014AAF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014AB4 01                         @wheel3:	dc.b 1
00014AB5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014ABA 01                         @wheel4:	dc.b 1
00014ABB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014AC0 01                         @platform:	dc.b 1
00014AC1 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014AC6                            		even
00014AC6                            		even
00014AC6                            		include	"_incObj\64 Bubbles.asm"
00014AC6                            ; ---------------------------------------------------------------------------
00014AC6                            ; Object 64 - bubbles (LZ)
00014AC6                            ; ---------------------------------------------------------------------------
00014AC6                            
00014AC6                            Bubble:
00014AC6 7000                       		moveq	#0,d0
00014AC8 1028 0024                  		move.b	obRoutine(a0),d0
00014ACC 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014AD0 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014AD4                            ; ===========================================================================
00014AD4 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014AD6 0000                       		dc.w Bub_Animate-Bub_Index
00014AD8 0000                       		dc.w Bub_ChkWater-Bub_Index
00014ADA 0000                       		dc.w Bub_Display-Bub_Index
00014ADC 0000                       		dc.w Bub_Delete-Bub_Index
00014ADE 0000                       		dc.w Bub_BblMaker-Bub_Index
00014AE0                            
00014AE0 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014AE0 =00000030                  bub_origX:	equ $30		; original x-axis position
00014AE0 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014AE0 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014AE0                            ; ===========================================================================
00014AE0                            
00014AE0                            Bub_Main:	; Routine 0
00014AE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00014AE4 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014AEC 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014AF2 117C 0084 0001             		move.b	#$84,obRender(a0)
00014AF8 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014AFE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014B04 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014B08 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014B0A                            
00014B0A 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014B0E 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014B12 1140 0032                  		move.b	d0,bub_time(a0)
00014B16 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014B1A 117C 0006 001C             		move.b	#6,obAnim(a0)
00014B20 6000 0000                  		bra.w	Bub_BblMaker
00014B24                            ; ===========================================================================
00014B24                            
00014B24                            @bubble:
00014B24 1140 001C                  		move.b	d0,obAnim(a0)
00014B28 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014B2E 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014B34 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014B3A 1140 0026                  		move.b	d0,obAngle(a0)
00014B3E                            
00014B3E                            Bub_Animate:	; Routine 2
00014B3E 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B44 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00014B4A 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014B50 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014B52                            
00014B52 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014B58                            
00014B58                            Bub_ChkWater:	; Routine 4
00014B58 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B5C B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014B60 6500                       		bcs.s	@wobble		; if yes, branch
00014B62                            
00014B62                            @burst:
00014B62 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014B68 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014B6C 6000 0000                  		bra.w	Bub_Display
00014B70                            ; ===========================================================================
00014B70                            
00014B70                            @wobble:
00014B70 1028 0026                  		move.b	obAngle(a0),d0
00014B74 5228 0026                  		addq.b	#1,obAngle(a0)
00014B78 0240 007F                  		andi.w	#$7F,d0
00014B7C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014B82 1031 0000                  		move.b	(a1,d0.w),d0
00014B86 4880                       		ext.w	d0
00014B88 D068 0030                  		add.w	bub_origX(a0),d0
00014B8C 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B90 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B94 6700                       		beq.s	@display
00014B96 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B9A 6700                       		beq.s	@display	; if not, branch
00014B9C                            
00014B9C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014BAA 43F8 D000                  		lea	(v_player).w,a1
00014BAE 4269 0010                  		clr.w	obVelX(a1)
00014BB2 4269 0012                  		clr.w	obVelY(a1)
00014BB6 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014BBA 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014BC0 337C 0023 003E             		move.w	#$23,$3E(a1)
00014BC6 137C 0000 003C             		move.b	#0,$3C(a1)
00014BCC 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014BD2 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014BD8 0829 0002 0022             		btst	#2,obStatus(a1)
00014BDE 6700 FF82                  		beq.w	@burst
00014BE2 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014BE8 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014BEE 137C 0009 0017             		move.b	#9,obWidth(a1)
00014BF4 5B69 000C                  		subq.w	#5,obY(a1)
00014BF8 6000 FF68                  		bra.w	@burst
00014BFC                            ; ===========================================================================
00014BFC                            
00014BFC                            @display:
00014BFC 6100 AC46                  		bsr.w	SpeedToPos
00014C00 4A28 0001                  		tst.b	obRender(a0)
00014C04 6A00                       		bpl.s	@delete
00014C06 4EF9 0000 F858             		jmp	(DisplaySprite).l
00014C0C                            
00014C0C                            	@delete:
00014C0C 4EF9 0000 F898             		jmp	(DeleteObject).l
00014C12                            ; ===========================================================================
00014C12                            
00014C12                            Bub_Display:	; Routine 6
00014C12 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014C18 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00014C1E 4A28 0001                  		tst.b	obRender(a0)
00014C22 6A00                       		bpl.s	@delete
00014C24 4EF9 0000 F858             		jmp	(DisplaySprite).l
00014C2A                            
00014C2A                            	@delete:
00014C2A 4EF9 0000 F898             		jmp	(DeleteObject).l
00014C30                            ; ===========================================================================
00014C30                            
00014C30                            Bub_Delete:	; Routine 8
00014C30 6000 AC66                  		bra.w	DeleteObject
00014C34                            ; ===========================================================================
00014C34                            
00014C34                            Bub_BblMaker:	; Routine $A
00014C34 4A68 0036                  		tst.w	$36(a0)
00014C38 6600                       		bne.s	@loc_12874
00014C3A 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C3E B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014C42 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014C46 4A28 0001                  		tst.b	obRender(a0)
00014C4A 6A00 0000                  		bpl.w	@chkdel
00014C4E 5368 0038                  		subq.w	#1,$38(a0)
00014C52 6A00 0000                  		bpl.w	@loc_12914
00014C56 317C 0001 0036             		move.w	#1,$36(a0)
00014C5C                            
00014C5C                            	@tryagain:
00014C5C 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014C62 3200                       		move.w	d0,d1
00014C64 0240 0007                  		andi.w	#7,d0
00014C68 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014C6C 64EE                       		bcc.s	@tryagain	; if yes, branch
00014C6E                            
00014C6E 1140 0034                  		move.b	d0,$34(a0)
00014C72 0241 000C                  		andi.w	#$C,d1
00014C76 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014C7C D2C1                       		adda.w	d1,a1
00014C7E 2149 003C                  		move.l	a1,$3C(a0)
00014C82 5328 0032                  		subq.b	#1,bub_time(a0)
00014C86 6A00                       		bpl.s	@loc_12872
00014C88 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C8E 08E8 0007 0036             		bset	#7,$36(a0)
00014C94                            
00014C94                            @loc_12872:
00014C94 6000                       		bra.s	@loc_1287C
00014C96                            ; ===========================================================================
00014C96                            
00014C96                            @loc_12874:
00014C96 5368 0038                  		subq.w	#1,$38(a0)
00014C9A 6A00 0000                  		bpl.w	@loc_12914
00014C9E                            
00014C9E                            @loc_1287C:
00014C9E 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014CA4 0240 001F                  		andi.w	#$1F,d0
00014CA8 3140 0038                  		move.w	d0,$38(a0)
00014CAC 6100 B144                  		bsr.w	FindFreeObj
00014CB0 6600                       		bne.s	@fail
00014CB2 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014CB6 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014CBC 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014CC2 0240 000F                  		andi.w	#$F,d0
00014CC6 5140                       		subq.w	#8,d0
00014CC8 D169 0008                  		add.w	d0,obX(a1)
00014CCC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014CD2 7000                       		moveq	#0,d0
00014CD4 1028 0034                  		move.b	$34(a0),d0
00014CD8 2468 003C                  		movea.l	$3C(a0),a2
00014CDC 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014CE2 0828 0007 0036             		btst	#7,$36(a0)
00014CE8 6700                       		beq.s	@fail
00014CEA 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014CF0 0240 0003                  		andi.w	#3,d0
00014CF4 6600                       		bne.s	@loc_buh
00014CF6 08E8 0006 0036             		bset	#6,$36(a0)
00014CFC 6600                       		bne.s	@fail
00014CFE 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014D04                            
00014D04                            @loc_buh:
00014D04 4A28 0034                  		tst.b	$34(a0)
00014D08 6600                       		bne.s	@fail
00014D0A 08E8 0006 0036             		bset	#6,$36(a0)
00014D10 6600                       		bne.s	@fail
00014D12 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014D18                            
00014D18                            	@fail:
00014D18 5328 0034                  		subq.b	#1,$34(a0)
00014D1C 6A00                       		bpl.s	@loc_12914
00014D1E 4EB9 0000 3D02             		jsr	(RandomNumber).l
00014D24 0240 007F                  		andi.w	#$7F,d0
00014D28 0640 0080                  		addi.w	#$80,d0
00014D2C D168 0038                  		add.w	d0,$38(a0)
00014D30 4268 0036                  		clr.w	$36(a0)
00014D34                            
00014D34                            @loc_12914:
00014D34 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014D3A 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00014D40                            
00014D40                            @chkdel:
00014D5E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D62 B068 000C                  		cmp.w	obY(a0),d0
00014D66 6500 AAF0                  		bcs.w	DisplaySprite
00014D6A 4E75                       		rts	
00014D6C                            ; ===========================================================================
00014D6C                            ; bubble production sequence
00014D6C                            
00014D6C                            ; 0 = small bubble, 1 =	large bubble
00014D6C                            
00014D6C 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014D7E                            
00014D7E                            ; ===========================================================================
00014D7E                            
00014D7E                            Bub_ChkSonic:
00014D7E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014D82 6B00                       		bmi.s	@loc_12998
00014D84 43F8 D000                  		lea	(v_player).w,a1
00014D88 3029 0008                  		move.w	obX(a1),d0
00014D8C 3228 0008                  		move.w	obX(a0),d1
00014D90 0441 0010                  		subi.w	#$10,d1
00014D94 B240                       		cmp.w	d0,d1
00014D96 6400                       		bcc.s	@loc_12998
00014D98 0641 0020                  		addi.w	#$20,d1
00014D9C B240                       		cmp.w	d0,d1
00014D9E 6500                       		bcs.s	@loc_12998
00014DA0 3029 000C                  		move.w	obY(a1),d0
00014DA4 3228 000C                  		move.w	obY(a0),d1
00014DA8 B240                       		cmp.w	d0,d1
00014DAA 6400                       		bcc.s	@loc_12998
00014DAC 0641 0010                  		addi.w	#$10,d1
00014DB0 B240                       		cmp.w	d0,d1
00014DB2 6500                       		bcs.s	@loc_12998
00014DB4 7001                       		moveq	#1,d0
00014DB6 4E75                       		rts	
00014DB8                            ; ===========================================================================
00014DB8                            
00014DB8                            @loc_12998:
00014DB8 7000                       		moveq	#0,d0
00014DBA 4E75                       		rts	
00014DBA 4E75                       		rts	
00014DBC                            		include	"_anim\Bubbles.asm"
00014DBC                            ; ---------------------------------------------------------------------------
00014DBC                            ; Animation script - bubbles (LZ)
00014DBC                            ; ---------------------------------------------------------------------------
00014DBC 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014DBE 0000                       		dc.w @medium-Ani_Bub
00014DC0 0000                       		dc.w @large-Ani_Bub
00014DC2 0000                       		dc.w @incroutine-Ani_Bub
00014DC4 0000                       		dc.w @incroutine-Ani_Bub
00014DC6 0000                       		dc.w @burst-Ani_Bub
00014DC8 0000                       		dc.w @bubmaker-Ani_Bub
00014DCA 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014DD0 00                         		even
00014DD0 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014DD6 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014DDE 00                         		even
00014DDE 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014DE0 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014DE6 00                         		even
00014DE6 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014DEC 00                         		even
00014DEC 00                         		even
00014DEC                            Map_Bub:	include	"_maps\Bubbles.asm"
00014DEC                            ; ---------------------------------------------------------------------------
00014DEC                            ; Sprite mappings - bubbles (LZ)
00014DEC                            ; ---------------------------------------------------------------------------
00014DEC                            Map_Bub_internal:
00014DEC 0000                       		dc.w @bubble1-Map_Bub_internal
00014DEE 0000                       		dc.w @bubble2-Map_Bub_internal
00014DF0 0000                       		dc.w @bubble3-Map_Bub_internal
00014DF2 0000                       		dc.w @bubble4-Map_Bub_internal
00014DF4 0000                       		dc.w @bubble5-Map_Bub_internal
00014DF6 0000                       		dc.w @bubble6-Map_Bub_internal
00014DF8 0000                       		dc.w @bubblefull-Map_Bub_internal
00014DFA 0000                       		dc.w @burst1-Map_Bub_internal
00014DFC 0000                       		dc.w @burst2-Map_Bub_internal
00014DFE 0000                       		dc.w @zero_sm-Map_Bub_internal
00014E00 0000                       		dc.w @five_sm-Map_Bub_internal
00014E02 0000                       		dc.w @three_sm-Map_Bub_internal
00014E04 0000                       		dc.w @one_sm-Map_Bub_internal
00014E06 0000                       		dc.w @zero-Map_Bub_internal
00014E08 0000                       		dc.w @five-Map_Bub_internal
00014E0A 0000                       		dc.w @four-Map_Bub_internal
00014E0C 0000                       		dc.w @three-Map_Bub_internal
00014E0E 0000                       		dc.w @two-Map_Bub_internal
00014E10 0000                       		dc.w @one-Map_Bub_internal
00014E12 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014E14 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014E16 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014E18 0000                       		dc.w @blank-Map_Bub_internal
00014E1A 01                         @bubble1:	dc.b 1
00014E1B FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014E20 01                         @bubble2:	dc.b 1
00014E21 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014E26 01                         @bubble3:	dc.b 1
00014E27 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014E2C 01                         @bubble4:	dc.b 1
00014E2D F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014E32 01                         @bubble5:	dc.b 1
00014E33 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014E38 01                         @bubble6:	dc.b 1
00014E39 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014E3E 01                         @bubblefull:	dc.b 1
00014E3F F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014E44 04                         @burst1:	dc.b 4
00014E45 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014E4A F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014E4F 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014E54 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014E59 04                         @burst2:	dc.b 4
00014E5A F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014E5F F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014E64 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014E69 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014E6E 01                         @zero_sm:	dc.b 1
00014E6F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014E74 01                         @five_sm:	dc.b 1
00014E75 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014E7A 01                         @three_sm:	dc.b 1
00014E7B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014E80 01                         @one_sm:	dc.b 1
00014E81 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014E86 01                         @zero:		dc.b 1
00014E87 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014E8C 01                         @five:		dc.b 1
00014E8D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E92 01                         @four:		dc.b 1
00014E93 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E98 01                         @three:		dc.b 1
00014E99 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E9E 01                         @two:		dc.b 1
00014E9F F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014EA4 01                         @one:		dc.b 1
00014EA5 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014EAA 01                         @bubmaker1:	dc.b 1
00014EAB F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014EB0 01                         @bubmaker2:	dc.b 1
00014EB1 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014EB6 01                         @bubmaker3:	dc.b 1
00014EB7 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014EBC 00                         @blank:		dc.b 0
00014EBE 00                         		even
00014EBE 00                         		even
00014EBE                            		include	"_incObj\65 Waterfalls.asm"
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE                            ; Object 65 - waterfalls (LZ)
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE                            
00014EBE                            Waterfall:
00014EBE 7000                       		moveq	#0,d0
00014EC0 1028 0024                  		move.b	obRoutine(a0),d0
00014EC4 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014EC8 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014ECC                            ; ===========================================================================
00014ECC 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014ECE 0000                       		dc.w WFall_Animate-WFall_Index
00014ED0 0000                       		dc.w WFall_ChkDel-WFall_Index
00014ED2 0000                       		dc.w WFall_OnWater-WFall_Index
00014ED4 0000                       		dc.w loc_12B36-WFall_Index
00014ED6                            ; ===========================================================================
00014ED6                            
00014ED6                            WFall_Main:	; Routine 0
00014ED6 5828 0024                  		addq.b	#4,obRoutine(a0)
00014EDA 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014EE2 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014EE8 0028 0004 0001             		ori.b	#4,obRender(a0)
00014EEE 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014EF4 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014EFA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014EFE 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014F00 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F06                            
00014F06                            	@under80:
00014F06 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014F0A 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014F0E 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014F12 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014F14                            
00014F14 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014F18 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014F1C 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014F22 6700                       		beq.s	@not49		; if not, branch
00014F24                            
00014F24 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014F2A                            
00014F2A                            	@not49:
00014F2A 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014F30 6700                       		beq.s	WFall_Animate	; if not, branch
00014F32 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014F38                            
00014F38                            WFall_Animate:	; Routine 2
00014F38 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014F3E 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00014F44                            
00014F44                            WFall_ChkDel:	; Routine 4
00014F44 6000 C9C6                  		bra.w	RememberState
00014F48                            ; ===========================================================================
00014F48                            
00014F48                            WFall_OnWater:	; Routine 6
00014F48 3038 F646                  		move.w	(v_waterpos1).w,d0
00014F4C 0440 0010                  		subi.w	#$10,d0
00014F50 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014F54 60E2                       		bra.s	WFall_Animate
00014F56                            ; ===========================================================================
00014F56                            
00014F56                            loc_12B36:	; Routine 8
00014F56 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014F5C 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014F62 6600                       		bne.s	@animate
00014F64 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F6A                            
00014F6A                            	@animate:
00014F6A 60CC                       		bra.s	WFall_Animate
00014F6A 60CC                       		bra.s	WFall_Animate
00014F6C                            		include	"_anim\Waterfalls.asm"
00014F6C                            ; ---------------------------------------------------------------------------
00014F6C                            ; Animation script - waterfall (LZ)
00014F6C                            ; ---------------------------------------------------------------------------
00014F6C 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014F6E 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014F74 00                         		even
00014F74 00                         		even
00014F74                            Map_WFall	include	"_maps\Waterfalls.asm"
00014F74                            ; ---------------------------------------------------------------------------
00014F74                            ; Sprite mappings - waterfalls (LZ)
00014F74                            ; ---------------------------------------------------------------------------
00014F74                            Map_WFall_internal:
00014F74 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014F76 0000                       		dc.w @cornerwide-Map_WFall_internal
00014F78 0000                       		dc.w @cornermedium-Map_WFall_internal
00014F7A 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014F7C 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014F7E 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014F80 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014F82 0000                       		dc.w @vertwide-Map_WFall_internal
00014F84 0000                       		dc.w @diagonal-Map_WFall_internal
00014F86 0000                       		dc.w @splash1-Map_WFall_internal
00014F88 0000                       		dc.w @splash2-Map_WFall_internal
00014F8A 0000                       		dc.w @splash3-Map_WFall_internal
00014F8C 01                         @vertnarrow:	dc.b 1
00014F8D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F92 02                         @cornerwide:	dc.b 2
00014F93 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F98 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F9D 02                         @cornermedium:	dc.b 2
00014F9E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014FA3 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014FA8 01                         @cornernarrow:	dc.b 1
00014FA9 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014FAE 02                         @cornermedium2:	dc.b 2
00014FAF F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014FB4 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014FB9 01                         @cornernarrow2:	dc.b 1
00014FBA F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014FBF 01                         @cornernarrow3:	dc.b 1
00014FC0 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014FC5 01                         @vertwide:	dc.b 1
00014FC6 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014FCB 02                         @diagonal:	dc.b 2
00014FCC F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014FD1 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014FD6 02                         @splash1:	dc.b 2
00014FD7 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014FDC F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014FE1 02                         @splash2:	dc.b 2
00014FE2 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014FE7 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014FEC 02                         @splash3:	dc.b 2
00014FED F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014FF2 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014FF8 00                         		even
00014FF8 00                         		even
00014FF8                            
00014FF8                            
00014FF8                            SpinDash_dust:				;TIS - Changed to allow for dynamic positioning
00014FF8                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014FF8 7000                       		moveq	#0,d0
00014FFA 1028 0024                  		move.b	$24(a0),d0
00014FFE 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00015002 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00015006                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015006 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00015008 0000                       		dc loc_1DD90-off_1DD2E; 1
0001500A 0000                       		dc loc_1DE46-off_1DD2E; 2
0001500C 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001500E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001500E                            
0001500E                            loc_1DD36:				; DATA XREF: h+6DBA?o
0001500E 5428 0024                  		addq.b	#2,$24(a0)
00015012 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
0001501A 0028 0004 0001             		or.b	#4,1(a0)
00015020 317C 0080 0018             		move.w	#$80,obPriority(a0)
00015026 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001502C 317C 07AC 0002             		move	#$7AC,2(a0)
00015032 317C D000 003E             		move	#-$3000,$3E(a0)
00015038 317C F580 003C             		move	#$F580,$3C(a0)
0001503E B0FC D1C0                  		cmp	#-$2E40,a0
00015042 6700                       		beq.s	loc_1DD8C
00015044 117C 0001 0034             		move.b	#1,$34(a0)
0001504A                            ;		cmp	#2,($FFFFFF70).w
0001504A                            ;		beq.s	loc_1DD8C
0001504A                            ;		move	#$48C,2(a0)
0001504A                            ;		move	#-$4FC0,$3E(a0)
0001504A                            ;		move	#-$6E80,$3C(a0)
0001504A                            
0001504A                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
0001504A                            ;		bsr.w	sub_16D6E
0001504A                            
0001504A                            loc_1DD90:				; DATA XREF: h+6DBA?o
0001504A 3468 003E                  		movea.w	$3E(a0),a2
0001504E 7000                       		moveq	#0,d0
00015050 1028 001C                  		move.b	$1C(a0),d0
00015054 D040                       		add	d0,d0
00015056 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001505A 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001505E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001505E 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015060 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015062 0000                       		dc loc_1DDCC-off_1DDA4; 2
00015064 0000                       		dc loc_1DE20-off_1DDA4; 3
00015066                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015066                            
00015066                            loc_1DDAC:				; DATA XREF: h+6E30?o
00015066 3178 F646 000C             		move	(v_waterpos1).w,$C(a0)	;TIS - Changed to variable name
0001506C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00015072 6700                       		beq.s	StandardWaterLevel	;TIS - if no, branch
00015074 3178 FF92 000C             		move	(v_watersplashpos).w,$C(a0)	;TIS - Dynamic water position
0001507A                            	StandardWaterLevel:
0001507A 4A28 001D                  		tst.b	$1D(a0)
0001507E 6600                       		bne.s	loc_1DE28
00015080 316A 0008 0008             		move	8(a2),8(a0)
00015086 117C 0000 0022             		move.b	#0,$22(a0)
0001508C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015092 6000                       		bra.s	loc_1DE28
00015094                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015094                            
00015094                            loc_1DDCC:				; DATA XREF: h+6E30?o
00015094                            ;		cmp.b	#$C,$28(a2)
00015094                            ;		bcs.s	loc_1DE3E
00015094 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001509A 6400                       		bcc.s	loc_1DE3E
0001509C 4A2A 0039                  		tst.b	$39(a2)
000150A0 6700                       		beq.s	loc_1DE3E
000150A2 316A 0008 0008             		move	8(a2),8(a0)
000150A8 316A 000C 000C             		move	$C(a2),$C(a0)
000150AE 116A 0022 0022             		move.b	$22(a2),$22(a0)
000150B4 0228 0001 0022             		and.b	#1,$22(a0)
000150BA 4A28 0034                  		tst.b	$34(a0)
000150BE 6700                       		beq.s	loc_1DE06
000150C0 5968 000C                  		sub	#4,$C(a0)
000150C4                            
000150C4                            loc_1DE06:				; CODE XREF: h+6E8A?j
000150C4 4A28 001D                  		tst.b	$1D(a0)
000150C8 6600                       		bne.s	loc_1DE28
000150CA 0268 7FFF 0002             		and	#$7FFF,2(a0)
000150D0 4A6A 0002                  		tst	2(a2)
000150D4 6A00                       		bpl.s	loc_1DE28
000150D6 0068 8000 0002             		or	#-$8000,2(a0)
000150DC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150DC                            
000150DC                            loc_1DE20:				; DATA XREF: h+6E30?o
000150DC                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000150DC 43F9 0000 0000             		lea	(off_1DF38).l,a1
000150E2 4EB9 0000 C90E             		jsr	AnimateSprite
000150E8 6100 0000                  		bsr.w	loc_1DEE4
000150EC 4EFA A76A                  		jmp	DisplaySprite
000150F0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150F0                            
000150F0                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000150F0 117C 0000 001C             		move.b	#0,$1C(a0)
000150F6 4E75                       		rts	
000150F8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150F8                            
000150F8                            loc_1DE46:				; DATA XREF: h+6DBA?o
000150F8 6000 A79E                  		bra.w	DeleteObject
000150FC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150FC                            
000150FC                            
000150FC                            
000150FC                            loc_1DE4A:
000150FC 3468 003E                  	movea.w	$3E(a0),a2
00015100 7210                       	moveq	#$10,d1
00015102 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00015108 6700                       	beq.s	loc_1DE64
0001510A 7206                       	moveq	#$6,d1
0001510C 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00015112 6700                       	beq.s	loc_1DE64
00015114 117C 0002 0024             	move.b	#2,$24(a0)
0001511A 117C 0000 0032             	move.b	#0,$32(a0)
00015120 4E75                       	rts
00015122                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015122                            
00015122                            loc_1DE64:				; CODE XREF: h+6EE0?j
00015122 5328 0032                  		subq.b	#1,$32(a0)
00015126 6A00                       		bpl.s	loc_1DEE0
00015128 117C 0003 0032             		move.b	#3,$32(a0)
0001512E 4EBA ACC2                  		jsr	FindFreeObj
00015132 6600                       		bne.s	loc_1DEE0
00015134 1290                       		move.b	0(a0),0(a1)
00015136 336A 0008 0008             		move	8(a2),8(a1)
0001513C 336A 000C 000C             		move	$C(a2),$C(a1)
00015142 4A28 0034                  		tst.b	$34(a0)
00015146 6700                       		beq.s	loc_1DE9A
00015148 5941                       		sub	#4,d1
0001514A                            
0001514A                            loc_1DE9A:				; CODE XREF: h+6F1E?j
0001514A D369 000C                  		add	d1,$C(a1)
0001514E 137C 0000 0022             		move.b	#0,$22(a1)
00015154 137C 0003 001C             		move.b	#3,$1C(a1)
0001515A 5429 0024                  		addq.b	#2,$24(a1)
0001515E 2368 0004 0004             		move.l	4(a0),4(a1)
00015164 1368 0001 0001             		move.b	1(a0),1(a1)
0001516A 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015170 137C 0004 0014             		move.b	#4,obActWid(a1)
00015176 3368 0002 0002             		move	2(a0),2(a1)
0001517C 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015182 0269 7FFF 0002             		and	#$7FFF,2(a1)
00015188 4A6A 0002                  		tst	2(a2)
0001518C 6A00                       		bpl.s	loc_1DEE0
0001518E 0069 8000 0002             		or	#-$8000,2(a1)
00015194                            
00015194                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015194 6100                       		bsr.s	loc_1DEE4
00015196 4E75                       		rts	
00015198                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015198                            
00015198                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00015198 7000                       		moveq	#0,d0
0001519A 1028 001A                  		move.b	$1A(a0),d0
0001519E B028 0030                  		cmp.b	$30(a0),d0
000151A2 6700 0000                  		beq.w	locret_1DF36
000151A6 1140 0030                  		move.b	d0,$30(a0)
000151AA 45F9 0000 0000             		lea	(off_1E074).l,a2
000151B0 D040                       		add	d0,d0
000151B2 D4F2 0000                  		add	(a2,d0.w),a2
000151B6 3A1A                       		move	(a2)+,d5
000151B8 5345                       		subq	#1,d5
000151BA 6B00 0000                  		bmi.w	locret_1DF36
000151BE 3828 003C                  		move $3C(a0),d4
000151C2                            
000151C2                            loc_1DF0A:				; CODE XREF: h+6FBE?j
000151C2 7200                       		moveq	#0,d1
000151C4 321A                       		move	(a2)+,d1
000151C6 3601                       		move	d1,d3
000151C8 E04B                       		lsr.w	#8,d3
000151CA 0243 00F0                  		and	#$F0,d3	; 'ð'
000151CE 0643 0010                  		add	#$10,d3
000151D2 0241 0FFF                  		and	#$FFF,d1
000151D6 EB89                       		lsl.l	#5,d1
000151D8 0681 0000 0000             		add.l	#Art_Dust,d1
000151DE 3404                       		move	d4,d2
000151E0 D843                       		add	d3,d4
000151E2 D843                       		add	d3,d4
000151E4 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
000151EA 51CD FFD6                  		dbf	d5,loc_1DF0A
000151EE 4E75                           rts
000151F0                            
000151F0                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000151F0 4E75                       		rts	
000151F2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151F2 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000151F4 0000                       		dc byte_1DF43-off_1DF38; 1
000151F6 0000                       		dc byte_1DF4F-off_1DF38; 2
000151F8 0000                       		dc byte_1DF58-off_1DF38; 3
000151FA 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000151FD 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00015209 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00015212 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00015218                            ; -------------------------------------------------------------------------------
00015218                            ; Unknown Sprite Mappings
00015218                            ; -------------------------------------------------------------------------------
00015218                            MapUnc_1DF5E:
00015218 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001521A 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001521C 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001521E 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00015220 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00015222 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00015224 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00015226 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00015228 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001522A 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
0001522C 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
0001522E 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00015230 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00015232 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00015234 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00015236 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00015238 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001523A 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
0001523C 0000                       	dc word_1E056-MapUnc_1DF5E; 18
0001523E 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015240 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00015242 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00015244 00                         word_1DF8A:	dc.b 0
00015245 01                         word_1DF8C:	dc.b 1
00015246 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001524B 01                         word_1DF96:	dc.b 1
0001524C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015251 01                         word_1DFA0:	dc.b 1
00015252 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015257 01                         word_1DFAA:	dc.b 1
00015258 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001525D 01                         word_1DFB4:	dc.b 1
0001525E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015263 01                         word_1DFBE:	dc.b 1
00015264 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015269 01                         word_1DFC8:	dc.b 1
0001526A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001526F 01                         word_1DFD2:	dc.b 1
00015270 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015275 01                         word_1DFDC:	dc.b 1
00015276 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001527B 01                         word_1DFE6:	dc.b 1
0001527C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015281 01                         word_1DFF0:	dc.b 1
00015282 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015287 01                         word_1DFFA:	dc.b 1
00015288 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001528D 02                         word_1E004:	dc.b 2
0001528E F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015293 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00015298 02                         word_1E016:	dc.b 2
00015299 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001529E 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000152A3 02                         word_1E028:	dc.b 2
000152A4 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000152A9 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000152AE 02                         word_1E03A:	dc.b 2
000152AF F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000152B4 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000152B9 01                         word_1E04C:	dc.b 1
000152BA F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
000152BF 01                         word_1E056:	dc.b 1
000152C0 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
000152C5 01                         word_1E060:	dc.b 1
000152C6 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
000152CB 01                         word_1E06A:	dc.b 1
000152CC F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000152D1 00                         	dc.b 0
000152D2 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000152D4 0000                       	dc word_1E0A2-off_1E074; 1
000152D6 0000                       	dc word_1E0A6-off_1E074; 2
000152D8 0000                       	dc word_1E0AA-off_1E074; 3
000152DA 0000                       	dc word_1E0AE-off_1E074; 4
000152DC 0000                       	dc word_1E0B2-off_1E074; 5
000152DE 0000                       	dc word_1E0B6-off_1E074; 6
000152E0 0000                       	dc word_1E0BA-off_1E074; 7
000152E2 0000                       	dc word_1E0BE-off_1E074; 8
000152E4 0000                       	dc word_1E0C2-off_1E074; 9
000152E6 0000                       	dc word_1E0C6-off_1E074; 10
000152E8 0000                       	dc word_1E0CA-off_1E074; 11
000152EA 0000                       	dc word_1E0CE-off_1E074; 12
000152EC 0000                       	dc word_1E0D2-off_1E074; 13
000152EE 0000                       	dc word_1E0D8-off_1E074; 14
000152F0 0000                       	dc word_1E0DE-off_1E074; 15
000152F2 0000                       	dc word_1E0E4-off_1E074; 16
000152F4 0000                       	dc word_1E0EA-off_1E074; 17
000152F6 0000                       	dc word_1E0EA-off_1E074; 18
000152F8 0000                       	dc word_1E0EA-off_1E074; 19
000152FA 0000                       	dc word_1E0EA-off_1E074; 20
000152FC 0000                       	dc word_1E0EC-off_1E074; 21
000152FE 0000                       word_1E0A0:	dc 0
00015300 0001                       word_1E0A2:	dc 1
00015302 7000                       	dc $7000
00015304 0001                       word_1E0A6:	dc 1
00015306 F008                       	dc $F008
00015308 0001                       word_1E0AA:	dc 1
0001530A F018                       	dc $F018
0001530C 0001                       word_1E0AE:	dc 1
0001530E F028                       	dc $F028
00015310 0001                       word_1E0B2:	dc 1
00015312 F038                       	dc $F038
00015314 0001                       word_1E0B6:	dc 1
00015316 F048                       	dc $F048
00015318 0001                       word_1E0BA:	dc 1
0001531A 7058                       	dc $7058
0001531C 0001                       word_1E0BE:	dc 1
0001531E 7060                       	dc $7060
00015320 0001                       word_1E0C2:	dc 1
00015322 7068                       	dc $7068
00015324 0001                       word_1E0C6:	dc 1
00015326 7070                       	dc $7070
00015328 0001                       word_1E0CA:	dc 1
0001532A 7078                       	dc $7078
0001532C 0001                       word_1E0CE:	dc 1
0001532E 7080                       	dc $7080
00015330 0002                       word_1E0D2:	dc 2
00015332 1088                       	dc $1088
00015334 708A                       	dc $708A
00015336 0002                       word_1E0D8:	dc 2
00015338 3092                       	dc $3092
0001533A 7096                       	dc $7096
0001533C 0002                       word_1E0DE:	dc 2
0001533E 509E                       	dc $509E
00015340 70A4                       	dc $70A4
00015342 0002                       word_1E0E4:	dc 2
00015344 50AC                       	dc $50AC
00015346 70B2                       	dc $70B2
00015348 0000                       word_1E0EA:	dc 0
0001534A 0001                       word_1E0EC:	dc 1
0001534C F0BA                       	dc $F0BA
0001534E                            	even
0001534E                            
0001534E                            ; ===========================================================================
0001534E                            
0001534E                            LoadPlayerPal:
0001534E 7000                       		moveq	#0,d0
00015350 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015354 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015358 4E75                       		rts
0001535A                            
0001535A                            	@palLUT:
0001535A 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
0001535F 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
00015366 00                         		even
00015366                            
00015366                            LoadPlayerWaterPal:
00015366 7000                       		moveq	#0,d0
00015368 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001536C 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015370 4E75                       		rts
00015372                            
00015372                            	@palLUT:
00015372 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00015377 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
0001537E 00                         		even
0001537E                            
0001537E                            LoadLifeIcon:
0001537E 7000                       		moveq	#0,d0
00015380 3038 FE10                  		move.w	(v_zone).w,d0	
00015384 E418                       		ror.b	#2,d0
00015386 EC48                               lsr.w 	#6,d0		
00015388 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
0001538C 4EB8 1798                  		jsr		AddPLC	
00015390 4E75                       		rts
00015392                            
00015392                            LoadLifeIcon_Table:
00015392                            		; GHZ
00015392 00                         		dc.b	plcid_LifeIcon
00015393 00                         		dc.b	plcid_LifeIcon
00015394 00                         		dc.b	plcid_LifeIcon	
00015395 00                         		dc.b	plcid_LifeIcon	
00015396                            		; LZ
00015396 00                         		dc.b	plcid_LifeIcon
00015397 00                         		dc.b	plcid_LifeIcon
00015398 00                         		dc.b	plcid_LifeIcon	
00015399 00                         		dc.b	plcid_LifeIconF	
0001539A                            		; MZ
0001539A 00                         		dc.b	plcid_LifeIconF
0001539B 00                         		dc.b	plcid_LifeIconF
0001539C 00                         		dc.b	plcid_LifeIconF
0001539D 00                         		dc.b	plcid_LifeIconF
0001539E                            		; SLZ
0001539E 00                         		dc.b	plcid_LifeIcon
0001539F 00                         		dc.b	plcid_LifeIcon
000153A0 00                         		dc.b	plcid_LifeIcon	
000153A1 00                         		dc.b	plcid_LifeIcon	
000153A2                            		; SYZ
000153A2 00                         		dc.b	plcid_LifeIconF
000153A3 00                         		dc.b	plcid_LifeIconF
000153A4 00                         		dc.b	plcid_LifeIconF
000153A5 00                         		dc.b	plcid_LifeIconF	
000153A6                            		; SBZ
000153A6 00                         		dc.b	plcid_LifeIconF
000153A7 00                         		dc.b	plcid_LifeIconF
000153A8 00                         		dc.b	plcid_LifeIconF
000153A9 00                         		dc.b	plcid_LifeIconF	
000153AA                            		even
000153AA                            
000153AA                            LoadSRAMConfig:
000153AA 13FC 0001 00A1 30F1                enableSRAM
000153B2                            
000153B2 41F9 0020 0001                     lea 	($200001).l,a0
000153B8 11E8 0001 FFBF             		move.b 	$1(a0), ($FFFFFFBF).w
000153BE 11E8 0003 FF8B             		move.b 	$3(a0), ($FFFFFF8B).w
000153C4                            
000153C4 13FC 0000 00A1 30F1                disableSRAM
000153CC 4E75                       		rts
000153CE                            
000153CE                            WhiteFlash:
000153CE 0CB8 0EEE 0EEE FB00        		cmpi.l	#$0EEE0EEE,($FFFFFB00).w	; are the first two colors white?
000153D6 6700                       		beq.s	@Return			; if yes, assume white flashing is still in progress and therefore skip it
000153D8 47F8 FA80                  		lea	($FFFFFA80).w,a3	; load palette location to a3
000153DC 49F8 CA00                  		lea	($FFFFCA00).w,a4	; load backup location to a4
000153E0 363C 007F                  		move.w	#$007F,d3		; set d3 to $7F (+1 for the first run)
000153E4                            
000153E4                            @BackupPal_Loop:
000153E4 38DB                       		move.w	(a3)+,(a4)+		; backup palette
000153E6 51CB FFFC                  		dbf	d3,@BackupPal_Loop	; loop
000153EA                            
000153EA 43F8 FA80                  		lea	($FFFFFA80).w,a1	; load palette location to a3
000153EE 323C 0EEE                  		move.w	#$EEE,d1		; set colour to white
000153F2 363C 007F                  		move.w	#$007F,d3		; set d3 to $7F (+1 for the first run)
000153F6                            
000153F6                            @MakeWhite_Loop:
000153F6 32C1                       		move.w	d1,(a1)+		; set new color
000153F8 51CB FFFC                  		dbf	d3,@MakeWhite_Loop	; loop
000153FC 11FC 0005 FFB1             		move.b	#5,(v_flashtimer).w	; Set flash timer
00015402                            @Return:
00015402 4E75                       		rts
00015404                            
00015404                            ; ---------------------------------------------------------------------------
00015404                            ; Object 01 - Sonic
00015404                            ; ---------------------------------------------------------------------------
00015404                            
00015404                            SonicPlayer:
00015404 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015408 6700                       		beq.s	Sonic_Normal	; if not, branch
0001540A 4EF9 0000 0000             		jmp	(DebugMode).l
00015410                            ; ===========================================================================
00015410                            
00015410                            Sonic_Normal:
00015410 7000                       		moveq	#0,d0
00015412 1028 0024                  		move.b	obRoutine(a0),d0
00015416 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
0001541A 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
0001541E                            ; ===========================================================================
0001541E 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015420 0000                       		dc.w Sonic_Control-Sonic_Index
00015422 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015424 0000                       		dc.w Sonic_Death-Sonic_Index
00015426 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015428                            ; ===========================================================================
00015428                            
00015428                            Sonic_Main:	; Routine 0
00015428 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001542E 5428 0024                  		addq.b	#2,obRoutine(a0)
00015432 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015438 117C 0009 0017             		move.b	#9,obWidth(a0)
0001543E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015446 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001544C 317C 0100 0018             		move.w	#$100,obPriority(a0)
00015452 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015458 117C 0004 0001             		move.b	#4,obRender(a0)
0001545E 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00015464 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
0001546A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015470 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015476 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
0001547C                            		
0001547C                            Sonic_Control:    ; Routine 2
0001547C 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015480 6700 0000                  		beq.w	@cont    
00015484 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015486                             
00015486                            	@cont: 
00015486 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
0001548A 6700                       		beq.s    loc_12C58    ; if not, branch
0001548C 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00015492 6700                       		beq.s    loc_12C58    ; if not, branch
00015494 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
0001549A 4238 F7CC                  		clr.b    (f_lockctrl).w
0001549E 4E75                       		rts
000154A0                            		
000154A0                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000154A0                            ; ---------------------------------------------------------------------------
000154A0                            ; Subroutine to    horizontally pan the camera view ahead of the player
000154A0                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000154A0                            ; ---------------------------------------------------------------------------
000154A0                            
000154A0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000154A0                            
000154A0                            
000154A0                            Sonic_PanCamera:
000154A0 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000154A4 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000154A8 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000154AA 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000154AC                            
000154AC                                @abs_inertia:
000154AC                            
000154AC                            ; These lines were intended to prevent the Camera from panning while
000154AC                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000154AC                            ; However, given that no such object exists in Sonic 1, I just went
000154AC                            ; ahead and commented these out.
000154AC                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
000154AC                                   ; bne.s	@reset_pan                   ; if not, branch
000154AC                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000154AC                                    ;bcs.s    @reset_pan                ; if so, branch
000154AC                            
000154AC                            ; These lines aren't part of the original routine; I added them myself.
000154AC                            ; If you've ported the Spin Dash, uncomment the following lines of code
000154AC                            ; to allow the camera to pan ahead while charging the Spin Dash:
000154AC 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000154B0 6700                               beq.s    @skip                    ; if not, branch
000154B2 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000154B8 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000154BA 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000154BC                            
000154BC                                @skip:
000154BC 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000154C0 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000154C2 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000154C6 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000154C8                            
000154C8                                @pan_right:
000154C8 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000154CA 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000154CE 6500                               bcs.s    @update_pan                ; if not, branch
000154D0 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000154D4 6000                               bra.s    @update_pan                ; branch
000154D6                            ; ---------------------------------------------------------------------------
000154D6                            
000154D6                                @pan_left:
000154D6 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000154D8 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000154DC 6400                               bcc.s    @update_pan                ; if not, branch
000154DE 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000154E2 6000                               bra.s    @update_pan                ; branch
000154E4                            ; ---------------------------------------------------------------------------
000154E4                            
000154E4                                @reset_pan:
000154E4 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000154E8 6700                               beq.s    @update_pan                ; if so, branch
000154EA 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000154EC                                 
000154EC                                @reset_right:
000154EC 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000154EE 6000                               bra.s    @update_pan                ; branch
000154F0                            ; ---------------------------------------------------------------------------
000154F0                            
000154F0                                @reset_left:
000154F0 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000154F2                            
000154F2                                @update_pan:
000154F2 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000154F6 4E75                               rts                                ; return
000154F8                                 
000154F8                            ; End of function Sonic_PanCamera
000154F8                            
000154F8                            
000154F8                            ; ===========================================================================
000154F8                            
000154F8                            loc_12C58:
000154F8 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000154FC 6600                       		bne.s	loc_12C64	; if yes, branch
000154FE 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015504                            
00015504                            loc_12C64:
00015504 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001550A 6600                       		bne.s	loc_12C7E	; if yes, branch
0001550C 7000                       		moveq	#0,d0
0001550E 1028 0022                  		move.b	obStatus(a0),d0
00015512 0240 0006                  		andi.w	#6,d0
00015516 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001551A 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
0001551E                            
0001551E                            loc_12C7E:
0001551E 6100                       		bsr.s	Sonic_Display
00015520 6100 0000                  		bsr.w	Sonic_Super
00015524 6100 0000                  		bsr.w	Sonic_RecordPosition
00015528 6100 0000                  		bsr.w	Sonic_Water
0001552C 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015532 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015538 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001553C 6700                       		beq.s	loc_12CA6
0001553E 4A28 001C                  		tst.b	obAnim(a0)
00015542 6600                       		bne.s	loc_12CA6
00015544 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001554A                            
0001554A                            loc_12CA6:
0001554A 6100 0000                  		bsr.w	Sonic_Animate
0001554E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015552 6B00                       		bmi.s	loc_12CB6
00015554 4EB9 0000 0000             		jsr	(ReactToItem).l
0001555A                            
0001555A                            loc_12CB6:
0001555A 6100 0000                  		bsr.w	Sonic_Loops
0001555E 6100 0000                  		bsr.w	Sonic_LoadGfx
00015562 4E75                       		rts	
00015564                            ; ===========================================================================
00015564 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015566 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015568 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001556A 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            ; Music	to play	after invincibility wears off
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            MusicList2:
0001556C 00                         		dc.b bgm_GHZ
0001556D 00                         		dc.b bgm_LZ
0001556E 00                         		dc.b bgm_MZ
0001556F 00                         		dc.b bgm_SLZ
00015570 00                         		dc.b bgm_SYZ
00015571 00                         		dc.b bgm_SBZ
00015572                            		; The ending doesn't get an entry
00015572                            		even
00015572                            
00015572                            		include	"_incObj\Sonic Display.asm"
00015572                            ; ---------------------------------------------------------------------------
00015572                            ; Subroutine to display Sonic and set music
00015572                            ; ---------------------------------------------------------------------------
00015572                            
00015572                            Sonic_Display:
00015572 3028 0030                  		move.w    flashtime(a0),d0
00015576 6700                       		beq.s    @showAfterImage
00015578 5368 0030                  		subq.w    #1,flashtime(a0)
0001557C E648                               	lsr.w    #3,d0
0001557E 6400                               	bcc.s    @chkinvincible
00015580                            
00015580                            	@showAfterImage:
00015580 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015584 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015586 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015588 4440                       		neg        d0                    ; if not, negate it
0001558A                            
0001558A                            	@AfterImage_Start:        
0001558A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001558E 6700                       		beq.s	@display	; if not, don't show the After Image
00015590                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
00015590                            		;blt.s    @display	; if not, don't show the After Image
00015590                            	
00015590                            	@AfterImage_Start2:    
00015590 6100 A860                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015594 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015596 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
0001559A 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000155A0 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000155A6 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000155AC                            
000155AC                                	@display:
000155AC 4EB9 0000 F858                     	jsr    (DisplaySprite).l
000155B2                            
000155B2                            	@chkinvincible:
000155B2 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000155B6 6700                       		beq.s	@chkshoes	; if not, branch
000155B8 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
000155BE 6700 0000                          beq		 @exit		
000155C2 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000155C6 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000155C8 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000155CC 6600                       		bne.s	@chkshoes
000155CE 4A38 F7AA                  		tst.b	(f_lockscreen).w
000155D2 6600                       		bne.s	@removeinvincible
000155D4 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000155DA 6500                       		bcs.s	@removeinvincible	
000155DC 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000155E2 6700                       		beq.s	@removeinvincible	
000155E4 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
000155EA 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
000155EC 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
000155F0 6000                       		bra.s	@playtune
000155F2                            		
000155F2                            @haveshoes:		
000155F2 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000155F6                            
000155F6                            @playtune: 
000155F6 4EB9 0000 12F8             		jsr	(PlaySound).l    ; play normal music
000155FC                            
000155FC                            	@removeinvincible:
000155FC 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015602                            
00015602                            	@chkshoes:
00015602 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015606 6700                       		beq.s	@exit		; if not, branch
00015608 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0001560E 6700 0000                          beq		 @exit			
00015612 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015616 6700                       		beq.s	@exit
00015618 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
0001561C 6600                       		bne.s	@exit
0001561E 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015624 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001562A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015630 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015636 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
0001563C 6700                       		beq.s	@exit
0001563E 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
00015644 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
00015646 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
0001564A 6000                       		bra.b	@playtune2
0001564C                            @isinvincible:		
0001564C 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015650                            @playtune2:
00015650 4EB9 0000 12F8             		jsr	(PlaySound).l    ; play normal music
00015656                            		
00015656                            	@exit:
00015656 4E75                       		rts	
00015656 4E75                       		rts	
00015658                            		include	"_incObj\Sonic RecordPosition.asm"
00015658                            ; ---------------------------------------------------------------------------
00015658                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015658                            ; ---------------------------------------------------------------------------
00015658                            
00015658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015658                            
00015658                            
00015658                            Sonic_RecordPosition:
00015658 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001565C 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015660 43F1 0000                  		lea	(a1,d0.w),a1
00015664 32E8 0008                  		move.w	obX(a0),(a1)+
00015668 32E8 000C                  		move.w	obY(a0),(a1)+
0001566C 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015670 4E75                       		rts	
00015672                            ; End of function Sonic_RecordPosition
00015672                            ; End of function Sonic_RecordPosition
00015672                            		include	"_incObj\Sonic Water.asm"
00015672                            ; ---------------------------------------------------------------------------
00015672                            ; Subroutine for Sonic when he's underwater
00015672                            ; ---------------------------------------------------------------------------
00015672                            
00015672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015672                            
00015672                            
00015672                            Sonic_Water:
00015672 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00015678 6600                       		bne.s	WaterTagforMZ	; if no, branch
0001567A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015680 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015682                            
00015682                            	Sonic_Water_Exit:
00015682 4E75                       		rts
00015684                            ; ===========================================================================
00015684                            LoadGFXLUTWat:	;TIS Water Palette List
00015684 0000 3016 0000 3A76 0000+          dc.l	Pal_LZWater,Pal_SonWater2,Pal_SonWater3,Pal_SonWater4,Pal_SonWater5,Pal_SonWater6,Pal_SonWater7,Pal_SonWater8,Pal_SonWater9,Pal_SonWater10,Pal_SonWater11	
000156B0                            
000156B0                            ; ===========================================================================
000156B0                            
000156B0                            	Sonic_Water_LZ:
000156B0 3038 F646                  		move.w	(v_waterpos1).w,d0
000156B4 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
000156B8 6C00 0000                  		bge.w	Abovewater	; if yes, branch
000156BC 6000 0000                  		bra	WaterStatus
000156C0                            	WaterTagforMZ:
000156C0 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS
000156C6 6700 0000                  		beq.w	Abovewater	; if yes, branch
000156CA                            		
000156CA 7000                       		moveq	#0,d0
000156CC 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000156D0 D040                               add.w    d0,d0
000156D2 D040                               add.w    d0,d0
000156D4 227B 00AE                  		movea.l    loadGFXLUTWat(pc,d0.w),a1  ;Load a separate list for water palettes
000156D8 303C 0007                  		move.w #$7,d0             ;TIS Length ($F = full line)
000156DC                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
000156DC 45F8 FB00                      	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000156E0 4EB8 26D6                  		jsr	Palload_Loop
000156E4                            	WaterStatus:
000156E4 08E8 0006 0022             		bset	#6,obStatus(a0)
000156EA 6600 FF96                  		bne.w	Sonic_Water_Exit
000156EE 6100 0000                  		bsr.w	ResumeMusic
000156F2 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000156F8 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000156FE 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
00015704 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
0001570A 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
00015710 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
00015716 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
0001571A 6700                       		beq.s	@Skip			; If not branch
0001571C 31FC 0500 F760             		move.w	#$500,(v_sonspeedmax).w
00015722 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w
00015728 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
0001572E                            @Skip		
0001572E E0E8 0010                  		asr	obVelX(a0)
00015732 E0E8 0012                  		asr	obVelY(a0)
00015736 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
0001573A 6700 FF46                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
0001573E                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
0001573E 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
0001574E 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS 
00015754 6600 0000                  		bne.w	@return
00015758                            		
00015758                            		
00015758                            	@return:
00015758 4E75                       		rts
0001575A                            
0001575A                            ; ===========================================================================
0001575A                            
0001575A                            LoadGFXLUT:	;TIS Dry Palette List
0001575A 0000 2DB6 0000 3936 0000+          dc.l   Pal_Sonic,Pal_Sonic2,Pal_Sonic3,Pal_Sonic4,Pal_Sonic5,Pal_Sonic6,Pal_Sonic7,Pal_Sonic8,Pal_Sonic8,Pal_Sonic9,Pal_Sonic10,Pal_Sonic11
0001578A                            
0001578A                            ; ===========================================================================
0001578A                            
0001578A                            Abovewater:
0001578A 7000                       		moveq	#0,d0
0001578C 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015790 D040                       		add.w    d0,d0
00015792 D040                               add.w    d0,d0
00015794 227B 00C4                  		movea.l    loadGFXLUT(pc,d0.w),a1  ;Load a separate list for palettes
00015798                            
00015798 303C 0007                  		move.w #$7,d0             ;TIS Length ($F = full line)
0001579C                            		;lea    (Pal_Sonic),a1  ;Palette location
0001579C 45F8 FB00                  		lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000157A0 4EB8 26D6                  		jsr	Palload_Loop
000157A4 08A8 0006 0022             		bclr	#6,obStatus(a0)
000157AA 6700 FED6                  		beq.w	Sonic_Water_Exit
000157AE 6100 0000                  		bsr.w	ResumeMusic
000157B2 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000157B8                            
000157B8 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000157BE 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000157C4 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000157CA 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000157CE 6700                       		beq.s	@Skip			; If not branch
000157D0 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
000157D6 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
000157DC 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
000157E2                            @Skip		
000157E2 E1E8 0012                  		asl	obVelY(a0)
000157E6 6700 FE9A                  		beq.w	Sonic_Water_Exit
000157EA 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000157F0 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
000157F6 6E00                       		bgt.s	@belowmaxspeed
000157F8 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
000157FE                            
000157FE                            	@belowmaxspeed:
00015808                            ; End of function Sonic_Water
00015808                            
00015808                            
00015808                            		include "_incObj\03 Hangable Sprite.asm"
00015808                            ; ===========================================================================
00015808                            ; ----------------------------------------------------------------------------
00015808                            ; Object 03 - Invisible sprite that you can hang on to
00015808                            ; ----------------------------------------------------------------------------
00015808                            ; Sprite_2C92C:
00015808                            Obj03:
00015808 7000                       	moveq    #0,d0
0001580A 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001580E 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015812 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015816                            ; ===========================================================================
00015816                            ; off_2C93A:
00015816                            Obj03_Index:
00015816 0000                           dc.w Obj03_Main-Obj03_Index
00015818 0000                               dc.w Obj03_Init-Obj03_Index
0001581A                            ; ===========================================================================
0001581A                            ; loc_2C93E:
0001581A                            Obj03_Init:
0001581A 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001581E 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015824 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
0001582A 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015830                            ; loc_2C954:
00015830                            Obj03_Main:
00015830 45E8 0030                      lea    $30(a0),a2
00015834 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015838 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001583C 6100                           bsr.s    Obj03_Check
0001583E                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001583E                            ;    addq.w    #1,a2                          ;disabled
0001583E                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001583E                            ;    bsr.s    Obj03_Check         	;disabled
0001583E 4EF9 0000 0000             	jmp		bonu_chkdel
00015844                            ; ===========================================================================
00015844                            ; loc_2C972:
00015844                            Obj03_Check:
00015844 4A12                       		tst.b	(a2)
00015846 6700                       		beq.s	loc_2C9A0
00015848 0200 0070                  		andi.b	#btnABC,d0
0001584C 6700 0000                  		beq.w	Obj03_Check_End
00015850 4238 F7C8                  		clr.b	f_lockmulti.w
00015854 4212                       		clr.b	(a2)
00015856 157C 0012 0002             		move.b	#$12,2(a2)
0001585C 0240 0F00                  		andi.w	#$F00,d0
00015860 6700                       		beq.s	loc_2C954
00015862 157C 003C 0002             		move.b	#$3C,2(a2)
00015868                            	
00015868                            loc_2C954:
00015868 337C FD00 0012             		move.w	#-$300,y_vel(a1)
0001586E 6000 0000                  		bra.w	Obj03_Check_End
00015872                            ; ===========================================================================
00015872                            
00015872                            loc_2C9A0:
00015872 4A2A 0002                  		tst.b	2(a2)
00015876 6700                       		beq.s	loc_2C972
00015878 532A 0002                  		subq.b	#1,2(a2)
0001587C 6600 0000                  		bne.w	Obj03_Check_End
00015880                            
00015880                            loc_2C972:
00015880 3029 0008                  		move.w	obX(a1),d0
00015884 9068 0008                  		sub.w	obX(a0),d0
00015888 0640 0018                  		addi.w	#$18,d0
0001588C 0C40 0030                  		cmpi.w	#$30,d0
00015890 6400 0000                  		bhs.w	Obj03_Check_End
00015894 3229 000C                  		move.w	obY(a1),d1
00015898 9268 000C                  		sub.w	obY(a0),d1
0001589C 0C41 0010                  		cmpi.w	#$10,d1
000158A0 6400 0000                  		bhs.w	Obj03_Check_End
000158A4 4A38 F7C8                  		tst.b	f_lockmulti.w
000158A8 6B00                       		bmi.s	Obj03_Check_End
000158AA 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000158B0 6400                       		bhs.s	Obj03_Check_End
000158B2 4A78 FFFA                  		tst.w	(f_debugmode).w
000158B6 6600                       		bne.s	Obj03_Check_End
000158B8 4269 0010                  		clr.w	x_vel(a1)
000158BC 4269 0012                  		clr.w	y_vel(a1)
000158C0 4269 0020                  		clr.w	obInertia(a1)
000158C4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000158CA 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
000158D0 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
000158D6 14BC 0001                  		move.b	#1,(a2)
000158DA                            
000158DA                            ; return_2CA08:
000158DA                            Obj03_Check_End:
000158DA 4E75                       		rts
000158DA 4E75                       		rts
000158DC                            
000158DC                            ; ===========================================================================
000158DC                            ; ---------------------------------------------------------------------------
000158DC                            ; Modes	for controlling	Sonic
000158DC                            ; ---------------------------------------------------------------------------
000158DC                            
000158DC                            Sonic_MdNormal:
000158DC                            		;bsr.w	Sonic_Peelout
000158DC                            		;bsr.w	Sonic_SpinDash
000158DC 6100 0000                  		bsr.w	Sonic_Jump
000158E0 6100 0000                  		bsr.w	Sonic_SlopeResist
000158E4 6100 0000                  		bsr.w	Sonic_Move
000158E8 6100 0000                  		bsr.w	Sonic_Roll
000158EC 6100 0000                  		bsr.w	Sonic_LevelBound
000158F0 4EB9 0000 F844             		jsr	(SpeedToPos).l
000158F6 6100 0000                  		bsr.w	Sonic_AnglePos
000158FA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000158FE 4E75                       		rts	
00015900                            
00015900                            ; ===========================================================================
00015900                            
00015900                            Sonic_MdJump:
00015900 6100 0000                  		bsr.w   Sonic_AirRoll
00015904 6100 0000                  		bsr.w	Sonic_JumpHeight
00015908 6100 0000                  		bsr.w	Sonic_JumpDirection
0001590C 6100 0000                  		bsr.w	Sonic_LevelBound
00015910 4EB9 0000 F80C             		jsr	(ObjectFall).l
00015916 0828 0006 0022             		btst	#6,obStatus(a0)
0001591C 6700                       		beq.s	loc_12E5C
0001591E 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015924                            
00015924                            loc_12E5C:
00015924 6100 0000                  		bsr.w	Sonic_JumpAngle
00015928 6100 0000                  		bsr.w	Sonic_Floor
0001592C 4E75                       		rts	
0001592E                            ; ===========================================================================
0001592E                            
0001592E                            Sonic_MdRoll:
0001592E 6100 0000                  		bsr.w	Sonic_Jump
00015932 6100 0000                  		bsr.w	Sonic_RollRepel
00015936 6100 0000                  		bsr.w	Sonic_RollSpeed
0001593A 6100 0000                  		bsr.w	Sonic_LevelBound
0001593E 4EB9 0000 F844             		jsr	(SpeedToPos).l
00015944 6100 0000                  		bsr.w	Sonic_AnglePos
00015948 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001594C 4E75                       		rts	
0001594E                            ; ===========================================================================
0001594E                            
0001594E                            Sonic_MdJump2:
0001594E 6100 0000                  		bsr.w	Sonic_HomingAttack
00015952 6100 0000                  		bsr.w	Sonic_JumpHeight
00015956 6100 0000                  		bsr.w	Sonic_JumpDirection
0001595A 6100 0000                  		bsr.w	Sonic_LevelBound
0001595E 4EB9 0000 F80C             		jsr	(ObjectFall).l
00015964 0828 0006 0022             		btst	#6,obStatus(a0)
0001596A 6700                       		beq.s	loc_12EA6
0001596C 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015972                            
00015972                            loc_12EA6:
00015972 6100 0000                  		bsr.w	Sonic_JumpAngle
00015976 6100 0000                  		bsr.w	Sonic_Floor
0001597A 4E75                       		rts	
0001597C                            
0001597C                            		include	"_incObj\Sonic Move.asm"
0001597C                            ; ---------------------------------------------------------------------------
0001597C                            ; Subroutine to	make Sonic walk/run
0001597C                            ; ---------------------------------------------------------------------------
0001597C                            
0001597C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001597C                            
0001597C                            
0001597C                            Sonic_Move:
0001597C 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015980 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015984 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015988 4A38 F7CA                  		tst.b	(f_jumponly).w
0001598C 6600 0000                  		bne.w	loc_12FEE
00015990 4A68 003E                  		tst.w	$3E(a0)
00015994 6600 0000                  		bne.w	Sonic_ResetScr
00015998 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001599E 6700                       		beq.s	@notleft	; if not, branch
000159A0 6100 0000                  		bsr.w	Sonic_MoveLeft
000159A4                            
000159A4                            	@notleft:
000159A4 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000159AA 6700                       		beq.s	@notright	; if not, branch
000159AC 6100 0000                  		bsr.w	Sonic_MoveRight
000159B0                            
000159B0                            	@notright:
000159B0 1028 0026                  		move.b	obAngle(a0),d0
000159B4 0600 0020                  		addi.b	#$20,d0
000159B8 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000159BC 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000159C0 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000159C4 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000159C8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000159CE 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000159D4 0828 0003 0022             		btst	#3,obStatus(a0)
000159DA 6700                       		beq.s	Sonic_Balance
000159DC 7000                       		moveq	#0,d0
000159DE 1028 003D                  		move.b	$3D(a0),d0
000159E2 ED48                       		lsl.w	#6,d0
000159E4 43F8 D000                  		lea	(v_objspace).w,a1
000159E8 43F1 0000                  		lea	(a1,d0.w),a1
000159EC 4A29 0022                  		tst.b	obStatus(a1)
000159F0 6B00                       		bmi.s	Sonic_LookUp
000159F2 7200                       		moveq	#0,d1
000159F4 1229 0014                  		move.b	obActWid(a1),d1
000159F8 3401                       		move.w	d1,d2
000159FA D442                       		add.w	d2,d2
000159FC 5942                       		subq.w	#4,d2
000159FE D268 0008                  		add.w	obX(a0),d1
00015A02 9269 0008                  		sub.w	obX(a1),d1
00015A06 0C41 0004                  		cmpi.w	#4,d1
00015A0A 6D00                       		blt.s	loc_12F6A
00015A0C B242                       		cmp.w	d2,d1
00015A0E 6C00                       		bge.s	loc_12F5A
00015A10 6000                       		bra.s	Sonic_LookUp
00015A12                            ; ===========================================================================
00015A12                            
00015A12                            Sonic_Balance:
00015A12 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015A18 0C41 000C                  		cmpi.w	#$C,d1
00015A1C 6D00                       		blt.s	Sonic_LookUp
00015A1E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015A24 6600                       		bne.s	loc_12F62
00015A26                            
00015A26                            loc_12F5A:
00015A26 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A2C 6000                       		bra.s	loc_12F70
00015A2E                            ; ===========================================================================
00015A2E                            
00015A2E                            loc_12F62:
00015A2E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00015A34 6600                       		bne.s	Sonic_LookUp
00015A36                            
00015A36                            loc_12F6A:
00015A36 08E8 0000 0022             		bset	#0,obStatus(a0)
00015A3C                            
00015A3C                            loc_12F70:
00015A3C 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00015A42 6000 0000                  		bra.w	Sonic_ResetScr
00015A46                            ; ===========================================================================
00015A46                            
00015A46                            Sonic_LookUp:
00015A46 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
00015A4C 6700                       		beq.s	Sonic_Duck	; if not, branch
00015A4E 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
00015A54 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
00015A5A 6700                       		beq.s	loc_12FC2
00015A5C 5478 F73E                  		addq.w	#2,(v_lookshift).w
00015A60 6000                       		bra.s	loc_12FC2
00015A62                            ; ===========================================================================
00015A62                            
00015A62                            Sonic_Duck:
00015A62 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015A68 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015A6A 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
00015A70 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
00015A76 6700                       		beq.s	loc_12FC2
00015A78 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015A7C 6000                       		bra.s	loc_12FC2
00015A7E                            ; =============================================
00015A7E                            ; ===========================================================================
00015A7E                            
00015A7E                            Sonic_ResetScr:
00015A7E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015A84                            		
00015A84                            Sonic_ResetScr_Part2:
00015A84 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00015A8A 6700                       		beq.s	loc_12FC2	; if yes, branch
00015A8C 6400                       		bcc.s	loc_12FBE
00015A8E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00015A92                            
00015A92                            loc_12FBE:
00015A92 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015A96                            
00015A96                            loc_12FC2:
00015A96 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015A9A 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
00015A9E 6600                       		bne.s	loc_12FEE	; if yes, branch
00015AA0 3028 0020                  		move.w	obInertia(a0),d0
00015AA4 6700                       		beq.s	loc_12FEE
00015AA6 6B00                       		bmi.s	loc_12FE2
00015AA8 9045                       		sub.w	d5,d0
00015AAA 6400                       		bcc.s	loc_12FDC
00015AAC 303C 0000                  		move.w	#0,d0
00015AB0                            
00015AB0                            loc_12FDC:
00015AB0 3140 0020                  		move.w	d0,obInertia(a0)
00015AB4 6000                       		bra.s	loc_12FEE
00015AB6                            ; ===========================================================================
00015AB6                            
00015AB6                            loc_12FE2:
00015AB6 D045                       		add.w	d5,d0
00015AB8 6400                       		bcc.s	loc_12FEA
00015ABA 303C 0000                  		move.w	#0,d0
00015ABE                            
00015ABE                            loc_12FEA:
00015ABE 3140 0020                  		move.w	d0,obInertia(a0)
00015AC2                            
00015AC2                            loc_12FEE:
00015AC2 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015AC6 6600                       		bne.s	loc_1300C 	;Peelout
00015AC8 1028 0026                  		move.b	obAngle(a0),d0
00015ACC 4EB9 0000 3D28             		jsr	(CalcSine).l
00015AD2 C3E8 0020                  		muls.w	obInertia(a0),d1
00015AD6 E081                       		asr.l	#8,d1
00015AD8 3141 0010                  		move.w	d1,obVelX(a0)
00015ADC C1E8 0020                  		muls.w	obInertia(a0),d0
00015AE0 E080                       		asr.l	#8,d0
00015AE2 3140 0012                  		move.w	d0,obVelY(a0)
00015AE6                            
00015AE6                            loc_1300C:
00015AE6 1028 0026                  		move.b	obAngle(a0),d0
00015AEA 0600 0040                  		addi.b	#$40,d0
00015AEE 6B00                       		bmi.s	locret_1307C
00015AF0 123C 0040                  		move.b	#$40,d1
00015AF4 4A68 0020                  		tst.w	obInertia(a0)
00015AF8 6700                       		beq.s	locret_1307C
00015AFA 6B00                       		bmi.s	loc_13024
00015AFC 4441                       		neg.w	d1
00015AFE                            
00015AFE                            loc_13024:
00015AFE 1028 0026                  		move.b	obAngle(a0),d0
00015B02 D001                       		add.b	d1,d0
00015B04 3F00                       		move.w	d0,-(sp)
00015B06 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015B0A 301F                       		move.w	(sp)+,d0
00015B0C 4A41                       		tst.w	d1
00015B0E 6A00                       		bpl.s	locret_1307C
00015B10 E141                       		asl.w	#8,d1
00015B12 0600 0020                  		addi.b	#$20,d0
00015B16 0200 00C0                  		andi.b	#$C0,d0
00015B1A 6700                       		beq.s	loc_13078
00015B1C 0C00 0040                  		cmpi.b	#$40,d0
00015B20 6700                       		beq.s	loc_13066
00015B22 0C00 0080                  		cmpi.b	#$80,d0
00015B26 6700                       		beq.s	loc_13060
00015B28 D368 0010                  		add.w	d1,obVelX(a0)
00015B2C 08E8 0005 0022             		bset	#5,obStatus(a0)
00015B32 317C 0000 0020             		move.w	#0,obInertia(a0)
00015B38 4E75                       		rts	
00015B3A                            ; ===========================================================================
00015B3A                            
00015B3A                            loc_13060:
00015B3A 9368 0012                  		sub.w	d1,obVelY(a0)
00015B3E 4E75                       		rts	
00015B40                            ; ===========================================================================
00015B40                            
00015B40                            loc_13066:
00015B40 9368 0010                  		sub.w	d1,obVelX(a0)
00015B44 08E8 0005 0022             		bset	#5,obStatus(a0)
00015B4A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015B50 4E75                       		rts	
00015B52                            ; ===========================================================================
00015B52                            
00015B52                            loc_13078:
00015B52 D368 0012                  		add.w	d1,obVelY(a0)
00015B56                            
00015B56                            locret_1307C:
00015B56 4E75                       		rts	
00015B58                            ; End of function Sonic_Move
00015B58                            
00015B58                            
00015B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B58                            
00015B58                            
00015B58                            Sonic_MoveLeft:
00015B58 3028 0020                  		move.w	obInertia(a0),d0
00015B5C 6700                       		beq.s	loc_13086
00015B5E 6A00                       		bpl.s	loc_130B2
00015B60                            
00015B60                            loc_13086:
00015B60 08E8 0000 0022             		bset	#0,$22(a0)
00015B66 6600                       		bne.s	loc_1309A
00015B68 08A8 0005 0022             		bclr	#5,$22(a0)
00015B6E 117C 0001 001D             		move.b	#1,$1D(a0)
00015B74                            
00015B74                            loc_1309A:
00015B74 9045                       		sub.w	d5,d0
00015B76 3206                       		move.w	d6,d1
00015B78 4441                       		neg.w	d1
00015B7A B041                       		cmp.w	d1,d0
00015B7C 6E00                       		bgt.s	loc_130A6
00015B7E D045                       		add.w	d5,d0
00015B80 B041                       		cmp.w	d1,d0
00015B82 6F00                       		ble.s	loc_130A6
00015B84 3001                       		move.w	d1,d0
00015B86                            
00015B86                            loc_130A6:
00015B86 3140 0020                  		move.w	d0,obInertia(a0)
00015B8A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015B90 4E75                       		rts
00015B92                            ; ===========================================================================
00015B92                            
00015B92                            loc_130B2:
00015B92 9044                       		sub.w	d4,d0
00015B94 6400                       		bcc.s	loc_130BA
00015B96 303C FF80                  		move.w	#-$80,d0
00015B9A                            
00015B9A                            loc_130BA:
00015B9A 3140 0020                  		move.w	d0,obInertia(a0)
00015B9E 1228 0026                  		move.b	obAngle(a0),d1
00015BA2 0601 0020                  		addi.b	#$20,d1
00015BA6 0201 00C0                  		andi.b	#$C0,d1
00015BAA 6600                       		bne.s	locret_130E8
00015BAC 0C40 0400                  		cmpi.w	#$400,d0
00015BB0 6D00                       		blt.s	locret_130E8
00015BB2 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015BB8 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015BC8 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015BCE 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015BD4                            		
00015BD4                            locret_130E8:
00015BD4 4E75                       		rts	
00015BD6                            ; End of function Sonic_MoveLeft
00015BD6                            
00015BD6                            
00015BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BD6                            
00015BD6                            
00015BD6                            Sonic_MoveRight:
00015BD6 3028 0020                  		move.w	obInertia(a0),d0
00015BDA 6B00                       		bmi.s	loc_13118
00015BDC 08A8 0000 0022             		bclr	#0,$22(a0)
00015BE2 6700                       		beq.s	loc_13104
00015BE4 08A8 0005 0022             		bclr	#5,$22(a0)
00015BEA 117C 0001 001D             		move.b	#1,$1D(a0)
00015BF0                            
00015BF0                            loc_13104:
00015BF0 D045                       		add.w	d5,d0
00015BF2 B046                       		cmp.w	d6,d0
00015BF4 6D00                       		blt.s	loc_1310C
00015BF6 9045                       		sub.w	d5,d0
00015BF8 B046                       		cmp.w	d6,d0
00015BFA 6C00                       		bge.s	loc_1310C
00015BFC 3006                       		move.w	d6,d0
00015BFE                            
00015BFE                            loc_1310C:
00015BFE 3140 0020                  		move.w	d0,obInertia(a0)
00015C02 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015C08 4E75                       		rts
00015C0A                            ; ===========================================================================
00015C0A                            
00015C0A                            loc_13118:
00015C0A D044                       		add.w	d4,d0
00015C0C 6400                       		bcc.s	loc_13120
00015C0E 303C 0080                  		move.w	#$80,d0
00015C12                            
00015C12                            loc_13120:
00015C12 3140 0020                  		move.w	d0,obInertia(a0)
00015C16 1228 0026                  		move.b	obAngle(a0),d1
00015C1A 0601 0020                  		addi.b	#$20,d1
00015C1E 0201 00C0                  		andi.b	#$C0,d1
00015C22 6600                       		bne.s	locret_1314E
00015C24 0C40 FC00                  		cmpi.w	#-$400,d0
00015C28 6E00                       		bgt.s	locret_1314E
00015C2A 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015C30 08E8 0000 0022             		bset	#0,obStatus(a0)
00015C40 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015C46 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015C4C                            		
00015C4C                            locret_1314E:
00015C4C 4E75                       		rts	
00015C4E                            ; End of function Sonic_MoveRight
00015C4E                            ; End of function Sonic_MoveRight
00015C4E                            		include	"_incObj\Sonic RollSpeed.asm"
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                            ; Subroutine to	change Sonic's speed as he rolls
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                            
00015C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C4E                            
00015C4E                            
00015C4E                            Sonic_RollSpeed:
00015C4E 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015C52 E346                       		asl.w	#1,d6
00015C54 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015C56 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015C5A E444                       		asr.w	#2,d4
00015C5C 4A38 F7CA                  		tst.b	(f_jumponly).w
00015C60 6600 0000                  		bne.w	loc_131CC
00015C64 4A68 003E                  		tst.w	$3E(a0)
00015C68 6600                       		bne.s	@notright
00015C6A 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015C70 6700                       		beq.s	@notleft	; if not, branch
00015C72 6100 0000                  		bsr.w	Sonic_RollLeft
00015C76                            
00015C76                            	@notleft:
00015C76 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015C7C 6700                       		beq.s	@notright	; if not, branch
00015C7E 6100 0000                  		bsr.w	Sonic_RollRight
00015C82                            
00015C82                            	@notright:
00015C82 3028 0020                  		move.w	obInertia(a0),d0
00015C86 6700                       		beq.s	loc_131AA
00015C88 6B00                       		bmi.s	loc_1319E
00015C8A 9045                       		sub.w	d5,d0
00015C8C 6400                       		bcc.s	loc_13198
00015C8E 303C 0000                  		move.w	#0,d0
00015C92                            
00015C92                            loc_13198:
00015C92 3140 0020                  		move.w	d0,obInertia(a0)
00015C96 6000                       		bra.s	loc_131AA
00015C98                            ; ===========================================================================
00015C98                            
00015C98                            loc_1319E:
00015C98 D045                       		add.w	d5,d0
00015C9A 6400                       		bcc.s	loc_131A6
00015C9C 303C 0000                  		move.w	#0,d0
00015CA0                            
00015CA0                            loc_131A6:
00015CA0 3140 0020                  		move.w	d0,obInertia(a0)
00015CA4                            
00015CA4                            loc_131AA:
00015CA4 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015CA8 6600                       		bne.s	loc_131CC	; if yes, branch
00015CAA 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015CB0 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015CB6 117C 0009 0017             		move.b	#9,obWidth(a0)
00015CBC 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015CC2 5B68 000C                  		subq.w	#5,obY(a0)
00015CC6                            
00015CC6                            loc_131CC:
00015CC6 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015CCC 6700                       		beq.s	@cont2
00015CCE 6400                       		bcc.s	@cont1
00015CD0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015CD4                            		
00015CD4                            @cont1:
00015CD4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015CD8                            		
00015CD8                            @cont2:
00015CD8 1028 0026                  		move.b	obAngle(a0),d0
00015CDC 4EB9 0000 3D28             		jsr	(CalcSine).l
00015CE2 C1E8 0020                  		muls.w	obInertia(a0),d0
00015CE6 E080                       		asr.l	#8,d0
00015CE8 3140 0012                  		move.w	d0,obVelY(a0)
00015CEC C3E8 0020                  		muls.w	obInertia(a0),d1
00015CF0 E081                       		asr.l	#8,d1
00015CF2 0C41 1000                  		cmpi.w	#$1000,d1
00015CF6 6F00                       		ble.s	loc_131F0
00015CF8 323C 1000                  		move.w	#$1000,d1
00015CFC                            
00015CFC                            loc_131F0:
00015CFC 0C41 F000                  		cmpi.w	#-$1000,d1
00015D00 6C00                       		bge.s	loc_131FA
00015D02 323C F000                  		move.w	#-$1000,d1
00015D06                            
00015D06                            loc_131FA:
00015D06 3141 0010                  		move.w	d1,obVelX(a0)
00015D0A 6000 FDDA                  		bra.w	loc_1300C
00015D0E                            ; End of function Sonic_RollSpeed
00015D0E                            
00015D0E                            
00015D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D0E                            
00015D0E                            
00015D0E                            Sonic_RollLeft:
00015D0E 3028 0020                  		move.w	obInertia(a0),d0
00015D12 6700                       		beq.s	loc_1320A
00015D14 6A00                       		bpl.s	loc_13218
00015D16                            
00015D16                            loc_1320A:
00015D16 08E8 0000 0022             		bset	#0,obStatus(a0)
00015D1C 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015D22 4E75                       		rts	
00015D24                            ; ===========================================================================
00015D24                            
00015D24                            loc_13218:
00015D24 9044                       		sub.w	d4,d0
00015D26 6400                       		bcc.s	loc_13220
00015D28 303C FF80                  		move.w	#-$80,d0
00015D2C                            
00015D2C                            loc_13220:
00015D2C 3140 0020                  		move.w	d0,obInertia(a0)
00015D30 4E75                       		rts	
00015D32                            ; End of function Sonic_RollLeft
00015D32                            
00015D32                            
00015D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D32                            
00015D32                            
00015D32                            Sonic_RollRight:
00015D32 3028 0020                  		move.w	obInertia(a0),d0
00015D36 6B00                       		bmi.s	loc_1323A
00015D38 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015D3E 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015D44 4E75                       		rts	
00015D46                            ; ===========================================================================
00015D46                            
00015D46                            loc_1323A:
00015D46 D044                       		add.w	d4,d0
00015D48 6400                       		bcc.s	loc_13242
00015D4A 303C 0080                  		move.w	#$80,d0
00015D4E                            
00015D4E                            loc_13242:
00015D4E 3140 0020                  		move.w	d0,obInertia(a0)
00015D52 4E75                       		rts	
00015D54                            ; End of function Sonic_RollRight
00015D54                            ; End of function Sonic_RollRight
00015D54                            		include	"_incObj\Sonic JumpDirection.asm"
00015D54                            ; ---------------------------------------------------------------------------
00015D54                            ; Subroutine to	change Sonic's direction while jumping
00015D54                            ; ---------------------------------------------------------------------------
00015D54                            
00015D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D54                            
00015D54                            
00015D54                            Sonic_JumpDirection:
00015D54 3C38 F760                  		move.w	($FFFFF760).w,d6
00015D58 3A38 F762                  		move.w	($FFFFF762).w,d5
00015D5C E345                       		asl.w	#1,d5
00015D5E 3028 0010                  		move.w	$10(a0),d0	
00015D62 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015D68 6700                       		beq.s	loc_13278; if not, branch	
00015D6A 08E8 0000 0022             		bset	#0,$22(a0)	
00015D70 9045                       		sub.w	d5,d0	
00015D72 3206                       		move.w	d6,d1	
00015D74 4441                       		neg.w	d1	
00015D76 B041                       		cmp.w	d1,d0	
00015D78 6E00                       		bgt.s	loc_13278	
00015D7A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015D7C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015D7E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015D80 3001                       		move.w	d1,d0
00015D82                            
00015D82                            loc_13278:
00015D82 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015D88 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015D8A 08A8 0000 0022             		bclr	#0,$22(a0)	
00015D90 D045                       		add.w	d5,d0	
00015D92 B046                       		cmp.w	d6,d0	
00015D94 6D00                       		blt.s	Obj01_JumpMove
00015D96 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015D98 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015D9A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015D9C 3006                       		move.w	d6,d0
00015D9E                            
00015D9E                            Obj01_JumpMove:
00015D9E 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015DA2                            
00015DA2                            Obj01_ResetScr2:
00015DA2 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015DA8 6700                       		beq.s	loc_132A4	; if yes, branch
00015DAA 6400                       		bcc.s	loc_132A0
00015DAC 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015DB0                            
00015DB0                            loc_132A0:
00015DB0 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015DB4                            
00015DB4                            loc_132A4:
00015DB4 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015DBA 6500                       		bcs.s	locret_132D2	; if yes, branch
00015DBC 3028 0010                  		move.w	obVelX(a0),d0
00015DC0 3200                       		move.w	d0,d1
00015DC2 EA41                       		asr.w	#5,d1
00015DC4 6700                       		beq.s	locret_132D2
00015DC6 6B00                       		bmi.s	loc_132C6
00015DC8 9041                       		sub.w	d1,d0
00015DCA 6400                       		bcc.s	loc_132C0
00015DCC 303C 0000                  		move.w	#0,d0
00015DD0                            
00015DD0                            loc_132C0:
00015DD0 3140 0010                  		move.w	d0,obVelX(a0)
00015DD4 4E75                       		rts	
00015DD6                            ; ===========================================================================
00015DD6                            
00015DD6                            loc_132C6:
00015DD6 9041                       		sub.w	d1,d0
00015DD8 6500                       		bcs.s	loc_132CE
00015DDA 303C 0000                  		move.w	#0,d0
00015DDE                            
00015DDE                            loc_132CE:
00015DDE 3140 0010                  		move.w	d0,obVelX(a0)
00015DE2                            
00015DE2                            locret_132D2:
00015DE2 4E75                       		rts	
00015DE4                            ; End of function Sonic_JumpDirection
00015DE4                            ; End of function Sonic_JumpDirection
00015DE4                            		include "_incObj\Sonic Peelout.asm"
00015DE4                            ; ---------------------------------------------------------------------------
00015DE4                            ; Subroutine to make Sonic perform a peelout
00015DE4                            ; ---------------------------------------------------------------------------
00015DE4                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DE4                            
00015DE4                            Sonic_Peelout:
00015DE4 0828 0001 0039             		btst	#1,$39(a0)
00015DEA 6600                       		bne.s	SCDPeelout_Launch
00015DEC 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015DF2 6600                       		bne.s	@return
00015DF4 1038 F603                  		move.b	($FFFFF603).w,d0
00015DF8 0200 0070                  		andi.b	#%01110000,d0
00015DFC 6700 0000                  		beq.w	@return
00015E00 117C 0001 001C             		move.b	#1,$1C(a0)
00015E06 317C 0000 003A             		move.w	#0,$3A(a0)
00015E0C 303C 00D2                  		move.w	#$D2,d0
00015E10 4EB9 0000 12FE             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015E16                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015E16 588F                       		addq.l	#4,sp
00015E18 08E8 0001 0039             		bset	#1,$39(a0)
00015E1E                            		
00015E1E 4268 0020                  		clr.w	obInertia(a0)
00015E22                             
00015E22 6100 0000                  		bsr.w	Sonic_LevelBound
00015E26 6100 0000                  		bsr.w	Sonic_AnglePos
00015E2A                             
00015E2A                            	@return:
00015E2A 4E75                       		rts	
00015E2C                            ; ---------------------------------------------------------------------------
00015E2C                             
00015E2C                            SCDPeelout_Launch:
00015E2C 0828 0001 0039             		btst	#1,$39(a0)
00015E32 1038 F602                  		move.b	($FFFFF602).w,d0
00015E36 0800 0000                  		btst	#0,d0
00015E3A 6600 0000                  		bne.w	SCDPeelout_Charge
00015E3E 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015E44 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015E4A 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015E4E 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015E54 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015E5A 3028 0020                  		move.w	obInertia(a0),d0
00015E5E 0440 0800                  		subi.w	#$800,d0
00015E62 D040                       		add.w	d0,d0
00015E64 0240 1F00                  		andi.w	#$1F00,d0
00015E68 4440                       		neg.w	d0
00015E6A 0640 2000                  		addi.w	#$2000,d0
00015E6E 31C0 C904                  		move.w	d0,($FFFFC904).w
00015E72 0828 0000 0022             		btst	#0,$22(a0)
00015E78 6700                       		beq.s	@dontflip
00015E7A 4468 0020                  		neg.w	obInertia(a0)
00015E7E                             
00015E7E                            @dontflip:
00015E7E 08A8 0007 0022             		bclr	#7,$22(a0)
00015E84 303C 00D3                  		move.w	#$D3,d0
00015E88 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
00015E8E                            	;	sfx 	sfx_PeeloutRelease
00015E8E 1028 0026                  		move.b	obAngle(a0),d0
00015E92 4EB9 0000 3D28             		jsr	(CalcSine).l
00015E98 C3E8 0020                  		muls.w	obInertia(a0),d1
00015E9C E081                       		asr.l	#8,d1
00015E9E 3141 0010                  		move.w	d1,obVelX(a0)
00015EA2 C1E8 0020                  		muls.w	obInertia(a0),d0
00015EA6 E080                       		asr.l	#8,d0
00015EA8 3140 0012                  		move.w	d0,obVelY(a0)	
00015EAC 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015EB0                            ; ---------------------------------------------------------------------------
00015EB0                             
00015EB0                            SCDPeelout_Charge:				; If still charging the dash...
00015EB0 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015EB4 3401                       		move.w	d1,d2
00015EB6 D241                       		add.w	d1,d1
00015EB8 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015EBC 6700                       		beq.s	@noshoes
00015EBE E242                       		asr.w	#1,d2
00015EC0 9242                       		sub.w	d2,d1
00015EC2                            
00015EC2                            @noshoes:
00015EC2 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015EC8 B268 0020                  		cmp.w	obInertia(a0),d1
00015ECC 6E00                       		bgt.s	@inctimer
00015ECE 3141 0020                  		move.w	d1,obInertia(a0)
00015ED2                            
00015ED2                            @inctimer:
00015ED2 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015ED6 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015EDC 6500                       		bcs.s	SCDPeelout_ResetScr
00015EDE 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015EE4 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015EEA                            		
00015EEA                            SCDPeelout_Stop_Sound:
00015EEA 303C 00D4                  		move.w	#$D4,d0
00015EEE 4EB9 0000 12FE             		jsr		(PlaySound_Special).l
00015EF4                            	;	sfx 	sfx_PeeloutStop
00015EF4 4268 0020                  		clr.w	obInertia(a0)
00015EF8                            
00015EF8                            SCDPeelout_ResetScr:
00015EF8 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015EFA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015F00 6700                       		beq.s	@finish
00015F02 6400                       		bcc.s	@skip
00015F04 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015F08                             
00015F08                            	@skip:
00015F08 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015F0C                             
00015F0C                            	@finish:
00015F0C 6100 0000                  		bsr.w	Sonic_LevelBound
00015F10 6100 0000                  		bsr.w	Sonic_AnglePos
00015F14 4E75                       		rts
00015F16                            		
00015F16                            		
00015F16                            		include "_incObj\Sonic Spindash.asm"
00015F16                            ; ---------------------------------------------------------------------------
00015F16                            ; Subroutine to make Sonic perform a spindash
00015F16                            ; ---------------------------------------------------------------------------
00015F16                             
00015F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F16                             
00015F16                             
00015F16                            Sonic_SpinDash:
00015F16 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015F1A 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015F1C 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015F22 6600                       		bne.s	locret2_1AC8C		; if not, return
00015F24 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015F28 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015F2C 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015F30 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015F36 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015F3A 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; play spin sound
00015F40 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015F42 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015F48 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015F4E                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015F4E                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015F4E 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015F54                            						; the smoke/dust object
00015F54                            loc2_1AC84:
00015F54 6100 0000                  		bsr.w	Sonic_LevelBound
00015F58 6100 0000                  		bsr.w	Sonic_AnglePos
00015F5C                            
00015F5C                            locret2_1AC8C:
00015F5C 4E75                       		rts	
00015F5E                            ; ---------------------------------------------------------------------------
00015F5E                            
00015F5E                            loc2_1AC8E:	
00015F5E 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015F64 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015F68 0800 0001                  		btst	#1,d0			; check down button
00015F6C 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015F70 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015F76 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015F7C 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015F82 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015F86 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015F8C 7000                       		moveq	#0,d0
00015F8E 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015F92 D040                       		add.w	d0,d0			; double it
00015F94 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015F9A 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015F9E 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015FA2 D040                       		add.w	d0,d0			; double it
00015FA4 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015FA8 4440                       		neg.w	d0			; negate it
00015FAA 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015FAE 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015FB2 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015FB8 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015FBA 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015FBE                            
00015FBE                            loc2_1ACF4:
00015FBE 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015FC4 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015FCA 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015FCE 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; play it!
00015FD4 1028 0026                  		move.b	obAngle(a0),d0
00015FD8 4EB9 0000 3D28             		jsr	(CalcSine).l
00015FDE C3E8 0020                  		muls.w	obInertia(a0),d1
00015FE2 E081                       		asr.l	#8,d1
00015FE4 3141 0010                  		move.w	d1,obVelX(a0)
00015FE8 C1E8 0020                  		muls.w	obInertia(a0),d0
00015FEC E080                       		asr.l	#8,d0
00015FEE 3140 0012                  		move.w	d0,obVelY(a0)
00015FF2                            	
00015FF2 6000                       		bra.s	loc2_1AD78
00015FF4                            ; ===========================================================================
00015FF4                            Dash_Speeds:
00015FF4 0700                       		dc.w  $700		; 0
00015FF6 0780                       		dc.w  $780		; 1
00015FF8 0800                       		dc.w  $800		; 2
00015FFA 0880                       		dc.w  $880		; 3
00015FFC 0900                       		dc.w  $900		; 4
00015FFE 0980                       		dc.w  $980		; 5
00016000 0A00                       		dc.w  $A00		; 6
00016002 0A80                       		dc.w  $A80		; 7
00016004 0B00                       		dc.w  $B00		; 8
00016006                            ; ===========================================================================
00016006                            
00016006                            loc2_1AD30:				; If still charging the dash...
00016006 4A68 003A                  		tst.w	$3A(a0)		; check charge count
0001600A 6700                       		beq.s	loc2_1AD48	; if zero, branch
0001600C 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00016010 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00016012 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00016016 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00016018 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
0001601E                            
0001601E                            loc2_1AD48:
0001601E 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00016022 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00016026 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
0001602A 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00016030 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00016034 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
0001603A 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; play charge sound
00016040 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00016046 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
0001604C 6500                       		bcs.s	loc2_1AD78		; if not, then branch
0001604E 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00016054                            
00016054                            loc2_1AD78:
00016054 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00016056 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
0001605C 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
0001605E 6400                       		bcc.s	loc2_1AD88
00016060 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00016064                            
00016064                            loc2_1AD88:
00016064 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016068                            
00016068                            loc2_1AD8C:
00016068 6100 0000                  		bsr.w	Sonic_LevelBound
0001606C 6100 0000                  		bsr.w	Sonic_AnglePos
00016070                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00016070 4E75                       		rts
00016072                            ; End of subroutine Sonic_SpinDash
00016072                            ; End of subroutine Sonic_SpinDash
00016072                            		include	"_incObj\Sonic HomingAttack.asm"
00016072                            ; ===========================================================================
00016072                            ; ---------------------------------------------------------------------------
00016072                            ; Subroutine to perform Homing Attack
00016072                            ; ---------------------------------------------------------------------------
00016072                            
00016072                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00016072                            
00016072                            Sonic_HomingAttack:     
00016072 4A38 F5C9                  		tst.b	(v_gshield)
00016076 6700                       		beq.s	@Return2
00016078 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
0001607E 6700                       		beq.s	@Homing_Process		; if yes, branch
00016080 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00016086 6600                       		bne.s	@Homing_Perform
00016088 4E75                       		rts
0001608A                            	@Return2:
0001608A 4E75                       		rts
0001608C                            ; ---------------------------------------------------------------------------
0001608C                            @Homing_Process:
0001608C 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00016090 6600                       		bne.s	@SetSpeeds		; if not, branch
00016092 4238 F5CD                  		clr.b	(v_homingattack).w
00016096 4E75                       		rts
00016098                            
00016098                            	@SetSpeeds:
00016098 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
0001609C                            
0001609C                            			
0001609C                            
0001609C 3229 000C                  		move.w	obY(a1),d1
000160A0 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
000160A4 3429 0008                  		move.w	obX(a1),d2
000160A8 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
000160AC 4EB9 0000 3FBA                             jsr     (CalcAngle).l		; Calcuate Angle
000160B2 4EB9 0000 3D28                             jsr     (CalcSine).l		; Get Sine
000160B8 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
000160BC 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
000160C0 C1C3                       		muls.w	d3,d0
000160C2 C3C3                       		muls.w	d3,d1
000160C4 E080                       		asr.l	#8,d0
000160C6 E081                       		asr.l	#8,d1
000160C8 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
000160CC 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
000160D0 3140 0020                  		move.w	d0,obInertia(a0)
000160D4 4E75                       		rts
000160D6                            
000160D6                            ; ---------------------------------------------------------------------------
000160D6                            @Homing_Perform:
000160D6 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000160DC 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
000160DE 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
000160E0 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
000160E2 3C3C 005F                  		move.w	#$5F,d6
000160E6 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
000160EA 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
000160EE                            		
000160EE                            	@ObjectsLoop:                  
000160EE 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
000160F2 6A00                       		bpl.s	@NextObject		; if yes, branch
000160F4 4A29 0020                  		tst.b	obColType(a1)			; load touch response
000160F8 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
000160FA                            
000160FA                            	@NextObject:
000160FA 43E9 0040                  		lea	$40(a1),a1		; load next object slot
000160FE 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
00016102                            		
00016102 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
00016108 6200 0000                  		bhi.w	Sonic_JumpDash
0001610C                            
0001610C                            
0001610C                            
0001610C 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
00016112 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
00016118 303C 00BC                  		move.w	#$BC,d0			; play JD sound
0001611C 4EF9 0000 12FE             		jmp	(PlaySound_Special).l   ;
00016122                            
00016122                            
00016122                            ; ---------------------------------------------------------------------------
00016122                            @Homing_TestObject:
00016122 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
00016126 1011                       		move.b	(a1),d0
00016128                            		
00016128                            	@CheckID:
00016128 B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
0001612A 6700                       		beq.s	@CalcXDist		; if object is in list, branch
0001612C 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
0001612E 60CA                       		bra.s	@NextObject		; the object is not in list, quit
00016130                            		
00016130                            	@CalcXDist:
00016130 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
00016134 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
00016138 6A00                       		bpl.s	@ObjAhead
0001613A                            
0001613A                            	; Object is behind Sonic
0001613A 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00016140 67B8                       		beq.s	@NextObject		; if not, we can't home at object
00016142 6000                       		bra.s	@CalcYDist
00016144                            
00016144                            	@ObjAhead:
00016144 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
0001614A 66AE                       		bne.s	@NextObject		; if not, we can't home at object
0001614C                            
0001614C                            	@CalcYDist:
0001614C 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
00016150 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
00016154                            		
00016154                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
00016154 3002                       		move.w	d2,d0			; d0 -> d2
00016156 4840                       		swap	d0
00016158 3001                       		move.w	d1,d0			; d0 -> d2 d1
0001615A C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
0001615C C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
0001615E D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00016160 B483                       		cmp.l	d3,d2			; is new distance shorter after all?
00016162 6400 FF96                  		bcc.w	@NextObject		; if not, branch
00016166                            
00016166 2602                       		move.l	d2,d3			; set new distance
00016168 3800                       		move.w	d0,d4			; set new Xdist
0001616A 4840                       		swap	d0
0001616C 3A00                       		move.w	d0,d5			; set new Ydist
0001616E 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
00016172 6000 FF86                  		bra.w	@NextObject
00016176                            
00016176                            
00016176                            ; ---------------------------------------------------------------------------
00016176                            ; Object ids that are available for homming
00016176                            ; NOTE: They should go in increasing order (1,2,3..)
00016176                            ; ---------------------------------------------------------------------------
00016176                            
00016176                            @Homing_ObjectList:
00016176 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00016180 5055 6078                  		dc.b	$50, $55, $60, $78
00016184 FF                         		dc.b	-1	; mark end of list
00016186 00                         		even
00016186                            
00016186                            
00016186                            ; ===========================================================================
00016186                            ; ---------------------------------------------------------------------------
00016186                            ; Subroutine to perform Jump Dash
00016186                            ; ---------------------------------------------------------------------------
00016186                            
00016186                            Sonic_JumpDash:
00016186 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
0001618A 6600                       		bne.s	@Return			; if yes, branch
0001618C 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
00016192 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
00016196 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
0001619C 6700                       		beq.s	@ChkShoes
0001619E 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
000161A2                            	
000161A2                            	@ChkShoes:
000161A2 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
000161A6 6700                       		beq.s	@SetSpeeds		; if not, branch
000161A8 0640 0200                  		addi.w	#$200,d0
000161AC                            
000161AC                            	;@ChkOrientation:
000161AC                            		;btst	#0,obStatus(a0)
000161AC                            		;beq.s	@SetSpeeds
000161AC                            		;neg.w	d0
000161AC                            
000161AC                            	@SetSpeeds:
000161AC 3140 0012                  		move.w	d0,obVelY(a0)
000161B0 3140 0020                  		move.w	d0,obInertia(a0)
000161B4                            		;move.w	#0,obVelY(a0)
000161B4 303C 00BC                  		move.w	#$BC,d0			; play JD sound
000161B8 4EF9 0000 12FE             		jmp	(PlaySound_Special).l   ;
000161BE                            
000161BE                            	@Return:
000161BE 4E75                       		rts
000161C0                            
000161C0                            ; -------------------------------------------------------------------------
000161C0                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
000161C0                            ; Jumpdash again when he has performed a Jumpdash
000161C0                            ; -------------------------------------------------------------------------
000161C0                            
000161C0                            BounceJD:
000161C0 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
000161C6 6600                       		bne.s	BounceJD_End	; if not, branch
000161C8 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
000161CC 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
000161D0 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000161D6 303C FF10                  		move.w	#-$F0,d0
000161DA 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
000161E0 6600                       		bne.s	@MoveAhead		; if not, we can't move right
000161E2 4440                       		neg.w	d0
000161E4                            
000161E4                            	@MoveAhead:
000161E4 3140 0010                  		move.w	d0,obVelX(a0)
000161E8                            	@Cont:
000161E8 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
000161EE 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
000161F4 6700                       		beq.s	BounceJD_Shoes	; if not, branch
000161F6 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
000161FC                            		
000161FC                            BounceJD_Shoes:
000161FC 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
00016200 6700                       		beq.s	BounceJD_End	; if not, branch
00016202 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
00016208                            		
00016208                            BounceJD_End:
00016208 4E75                       		rts			; return
0001620A                            ; End of function BounceJD
0001620A                            ; End of function BounceJD
0001620A                            
0001620A                            Sonic_AirRoll:
0001620A 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00016210 6600                               bne.s   AirRoll_Return   ; if not, return
00016212                            
00016212                            AirRoll_CheckBtn:
00016212 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00016216 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
0001621A 6700                               beq.s	AirRoll_Return
0001621C 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00016222                                   ; move.w	#$BC,d0
00016222                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00016222                            
00016222                            AirRoll_Return:
00016222 4E75                               rts
00016224                            ; ===========================================================================
00016224                            ; ---------------------------------------------------------------------------
00016224                            ; Unused subroutine to squash Sonic
00016224                            ; ---------------------------------------------------------------------------
00016224 1028 0026                  		move.b	obAngle(a0),d0
00016228 0600 0020                  		addi.b	#$20,d0
0001622C 0200 00C0                  		andi.b	#$C0,d0
00016230 6600                       		bne.s	locret_13302
00016232 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016236 4A41                       		tst.w	d1
00016238 6A00                       		bpl.s	locret_13302
0001623A 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00016240 317C 0000 0010             		move.w	#0,obVelX(a0)
00016246 317C 0000 0012             		move.w	#0,obVelY(a0)
0001624C 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00016252                            
00016252                            locret_13302:
00016252 4E75                       		rts		
00016254                            		include	"_incObj\Sonic LevelBound.asm"
00016254                            ; ---------------------------------------------------------------------------
00016254                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00016254                            ; ---------------------------------------------------------------------------
00016254                            
00016254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016254                            
00016254                            
00016254                            Sonic_LevelBound:
00016254 2228 0008                  		move.l	obX(a0),d1
00016258 3028 0010                  		move.w	obVelX(a0),d0
0001625C 48C0                       		ext.l	d0
0001625E E180                       		asl.l	#8,d0
00016260 D280                       		add.l	d0,d1
00016262 4841                       		swap	d1
00016264 3038 F728                  		move.w	(v_limitleft2).w,d0
00016268 0640 0010                  		addi.w	#$10,d0
0001626C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001626E 6200                       		bhi.s	@sides		; if yes, branch
00016270 3038 F72A                  		move.w	(v_limitright2).w,d0
00016274 0640 0128                  		addi.w	#$128,d0
00016278 4A38 F7AA                  		tst.b	(f_lockscreen).w
0001627C 6600                       		bne.s	@screenlocked
0001627E 0640 0040                  		addi.w	#$40,d0
00016282                            
00016282                            	@screenlocked:
00016282 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016284 6300                       		bls.s	@sides		; if yes, branch
00016286                            
00016286                            	@chkbottom:
00016286 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001628A 0640 00E0                  		addi.w	#$E0,d0
0001628E B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00016292 6D00                       		blt.s	@bottom		; if yes, branch
00016294 4E75                       		rts	
00016296                            ; ===========================================================================
00016296                            
00016296                            @bottom:
00016296 3038 F726                  		move.w (v_limitbtm1).w,d0 
0001629A 3238 F72E                  		move.w (v_limitbtm2).w,d1 
0001629E B240                       		cmp.w d0,d1 ; screen still scrolling down? 
000162A0 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
000162A2 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
000162A8 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
000162AC 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
000162B2 6500 0000                  		bcs.w	Kill_transport
000162B6 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
000162BA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000162C0 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
000162C6 4E75                       		rts	
000162C8                            @dontkill: 
000162C8 4E75                       		rts
000162CA                            ; ===========================================================================
000162CA                            
000162CA                            @sides:
000162CA 3140 0008                  		move.w	d0,obX(a0)
000162CE 317C 0000 000A             		move.w	#0,obX+2(a0)
000162D4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
000162DA 317C 0000 0020             		move.w	#0,obInertia(a0)
000162E0 60A4                       		bra.s	@chkbottom
000162E2                            
000162E2                            Kill_transport: 
000162E2 4EF9 0000 0000                     	jmp        (KillSonic).l
000162E8                            
000162E8                            ; End of function Sonic_LevelBound
000162E8                            ; End of function Sonic_LevelBound
000162E8                            		include	"_incObj\Sonic Roll.asm"
000162E8                            ; ---------------------------------------------------------------------------
000162E8                            ; Subroutine allowing Sonic to roll when he's moving
000162E8                            ; ---------------------------------------------------------------------------
000162E8                            
000162E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162E8                            
000162E8                            
000162E8                            Sonic_Roll:
000162E8 4A38 F7CA                  		tst.b	(f_jumponly).w
000162EC 6600                       		bne.s	@noroll
000162EE 3028 0020                  		move.w	obInertia(a0),d0
000162F2 6A00                       		bpl.s	@ispositive
000162F4 4440                       		neg.w	d0
000162F6                            
000162F6                            	@ispositive:
000162F6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000162FA 6500                       		bcs.s	@noroll		; if not, branch
000162FC 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016300 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00016304 6600                       		bne.s	@noroll		; if yes, branch
00016306 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
0001630C 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
0001630E                            
0001630E                            	@noroll:
0001630E 4E75                       		rts	
00016310                            ; ===========================================================================
00016310                            
00016310                            Sonic_ChkRoll:
00016310 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00016316 6700                       		beq.s	@roll		; if not, branch
00016318 4E75                       		rts	
0001631A                            ; ===========================================================================
0001631A                            
0001631A                            @roll:
0001631A 08E8 0002 0022             		bset	#2,obStatus(a0)
00016320 117C 000E 0016             		move.b	#$E,obHeight(a0)
00016326 117C 0007 0017             		move.b	#7,obWidth(a0)
0001632C 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016332 5A68 000C                  		addq.w	#5,obY(a0)
00016340 4A68 0020                  		tst.w	obInertia(a0)
00016344 6600                       		bne.s	@ismoving
00016346 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
0001634C                            
0001634C                            	@ismoving:
0001634C 4E75                       		rts	
0001634E                            ; End of function Sonic_Roll
0001634E                            ; End of function Sonic_Roll
0001634E                            		include	"_incObj\Sonic Jump.asm"
0001634E                            ; ---------------------------------------------------------------------------
0001634E                            ; Subroutine allowing Sonic to jump
0001634E                            ; ---------------------------------------------------------------------------
0001634E                            
0001634E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001634E                            
0001634E                            
0001634E                            Sonic_Jump:
0001634E 1038 F603                  		move.b	(v_jpadpress2).w,d0
00016352 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016356 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001635A 7000                       		moveq	#0,d0
0001635C 1028 0026                  		move.b	obAngle(a0),d0
00016360 0600 0080                  		addi.b	#$80,d0
00016364 6100 0000                  		bsr.w	sub_14D48
00016368 0C41 0006                  		cmpi.w	#6,d1
0001636C 6D00 0000                  		blt.w	locret_1348E
00016370 343C 0680                  		move.w	#$680,d2
00016374 0828 0006 0022             		btst	#6,obStatus(a0)
0001637A 6700                       		beq.s	loc_1341C
0001637C 343C 0380                  		move.w	#$380,d2
00016380                            
00016380                            loc_1341C:
00016380 7000                       		moveq	#0,d0
00016382 1028 0026                  		move.b	obAngle(a0),d0
00016386 0400 0040                  		subi.b	#$40,d0
0001638A 4EB9 0000 3D28             		jsr	(CalcSine).l
00016390 C3C2                       		muls.w	d2,d1
00016392 E081                       		asr.l	#8,d1
00016394 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00016398 C1C2                       		muls.w	d2,d0
0001639A E080                       		asr.l	#8,d0
0001639C D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
000163A0 08E8 0001 0022             		bset	#1,obStatus(a0)
000163A6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000163AC 588F                       		addq.l	#4,sp
000163AE 117C 0001 003C             		move.b	#1,$3C(a0)
000163B4 4228 0038                  		clr.b	$38(a0)
000163C2 117C 0013 0016             		move.b	#$13,obHeight(a0)
000163C8 117C 0009 0017             		move.b	#9,obWidth(a0)
000163CE 117C 000E 0016             		move.b	#$E,obHeight(a0)
000163D4 117C 0007 0017             		move.b	#7,obWidth(a0)
000163DA                            Result_Check:
000163DA 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
000163DE 6700                       		beq.s   NormalJump ; If not, branch
000163E0 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
000163E6 6000                       		bra.s   cont ; Continue
000163E8                            NormalJump:
000163E8 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
000163EE                            cont:
000163EE 08E8 0002 0022             		bset	#2,obStatus(a0)
000163F4 5A68 000C                  		addq.w	#5,obY(a0)
000163F8                            
000163F8                            locret_1348E:
000163F8 4E75                       		rts	
000163FA                            ; ===========================================================================
000163FA                            
000163FA                            ; End of function Sonic_Jump
000163FA                            ; End of function Sonic_Jump
000163FA                            		include	"_incObj\Sonic JumpHeight.asm"
000163FA                            ; ---------------------------------------------------------------------------
000163FA                            ; Subroutine controlling Sonic's jump height/duration
000163FA                            ; ---------------------------------------------------------------------------
000163FA                            
000163FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163FA                            
000163FA                            
000163FA                            Sonic_JumpHeight:
000163FA 4A28 003C                  		tst.b	$3C(a0)
000163FE 6700                       		beq.s	loc_134C4
00016400 323C FC00                  		move.w	#-$400,d1
00016404 0828 0006 0022             		btst	#6,obStatus(a0)
0001640A 6700                       		beq.s	loc_134AE
0001640C 323C FE00                  		move.w	#-$200,d1
00016410                            
00016410                            loc_134AE:
00016410 B268 0012                  		cmp.w	obVelY(a0),d1
00016414 6F00                       		ble.s	locret_134C2
00016416 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001641A 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
0001641E 6600                       		bne.s	locret_134C2	; if yes, branch
00016420 3141 0012                  		move.w	d1,obVelY(a0)
00016424                            
00016424                            locret_134C2:
00016424 4A38 F7C8                          tst.b   (f_lockmulti).w      ; Are Controls locked?
00016428 66FA                               bne.s   locret_134C2            ; If so, branch, and do not bother with Super code
0001642A 1038 F603                          move.b  (v_jpadpress2).w,d0
0001642E 0200 0010                          andi.b  #btnB,d0 ; is a jump button pressed?
00016432 6600 0000                  		bne.w	Sonic_CheckGoSuper
00016436 4E75                       		rts	
00016438                            ; ===========================================================================
00016438                            
00016438                            loc_134C4:
00016438 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
0001643E 6C00                       		bge.s	locret_134D2
00016440 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00016446                            
00016446                            locret_134D2:		
00016446 4E75                       		rts	
00016448                            ; End of function Sonic_JumpHeight
00016448                            
00016448                            
00016448                            ; ---------------------------------------------------------------------------
00016448                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
00016448                            ; if he has enough rings and emeralds
00016448                            ; ---------------------------------------------------------------------------
00016448                            
00016448                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00016448                            
00016448                            Sonic_CheckGoSuper:
00016448 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001644C 6600 0000                  		bne.w	Sonic_RevertToNormal			; if yes, branch	
00016450 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; does Sonic have at least 50 rings?
00016456 6500                       		bcs.s	return_1ABA4		; if not, branch	
00016458 11FC 0001 F5D8             		move.b	#1,(Super_Sonic_palette).w
0001645E 11FC 000F F5DE             		move.b	#$F,(Palette_timer).w
00016464 11FC 0001 FE19             		move.b	#1,(Super_Sonic_flag).w
0001646A 4238 FE2E                  		clr.b	(v_shoes).w ; clear speed shoes
0001646E 11FC 0001 F7C8             		move.b    #$1,(f_lockmulti).w
00016474 117C 0000 001C             		move.b    #id_Transform,obAnim(a0)   
0001647A 4EB9 0000 0000             		jsr		Super_and_Invincibility_Stars				
00016480 11FC 008D D200             		move.b	#id_SuperStars,($FFFFD200).w				
00016486 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
0001648C 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
00016492 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
00016498 317C 0000 0032             		move.w	#0,invtime(a0)
0001649E 11FC 0001 FE2D             		move.b #1,(v_invinc).w ; make Sonic invincible	
000164A4 303C 00D6                  		move.w	#$D6,d0         ; 
000164A8 4EB9 0000 12FE             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
000164AE 303C 0087                  		move.w	#$87,d0         
000164B2 4EF9 0000 12F8             		jmp	(PlaySound).l	; load the invincibility song and return also playmusic doesn't exist
000164B8                            
000164B8                            ; ---------------------------------------------------------------------------
000164B8                            return_1ABA4:
000164B8 4E75                       		rts
000164BA                            		
000164BA                            ; End of subroutine Sonic_CheckGoSuper		
000164BA                            ; ---------------------------------------------------------------------------
000164BA                            ; Subroutine doing the extra logic for Super Sonic
000164BA                            ; ---------------------------------------------------------------------------
000164BA                            
000164BA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000164BA                            
000164BA                            ; loc_1ABA6:
000164BA                            Sonic_Super:
000164BA 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
000164BE 6700 0000                  		beq.w	return_1AC3C
000164C2 4A38 FE1E                  		tst.b	(f_timecount).w
000164C6 6700                       		beq.s	Sonic_RevertToNormal ; ?
000164C8 5378 F670                  		subq.w	#1,(v_pal_buffer+$20).w
000164CC 6A00 0000                  		bpl.w	return_1AC3C
000164D0 31FC 003C F670             		move.w	#60,(v_pal_buffer+$20).w	; Reset frame counter to 60
000164D6 4A78 FE20                  		tst.w	(v_rings).w
000164DA 6700                       		beq.s	Sonic_RevertToNormal
000164DC 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w
000164E2 0C78 0001 FE20             		cmpi.w	#1,(v_rings).w
000164E8 6700                       		beq.s	@update
000164EA 0C78 000A FE20             		cmpi.w	#10,(v_rings).w
000164F0 6700                       		beq.s	@update
000164F2 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w
000164F8 6600                       		bne.s	@update2
000164FA                            @update
000164FA 0038 0080 FE1D             		ori.b	#$80,(f_ringcount).w
00016500                            @update2
00016500 5378 FE20                  		subq.w	#1,(v_rings).w
00016504 6600                       		bne.s	return_1AC3C
00016506                            ; loc_1ABF2:
00016506                            Sonic_RevertToNormal:
00016506 4238 F7C8                  		clr.b   (f_lockmulti).w
0001650A 11FC 0002 F5D8             		move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
00016510 31FC 0028 F5CC             		move.w	#$28,($FFFFF5CC).w	; Unknown
00016516 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
0001651C 11FC 0000 F7C8             		move.b    #0,(f_lockmulti).w	
00016522 317C 0001 0032             		move.w	#1,invtime(a0)				
00016528 117C 0001 001D             		move.b	#1,next_anim(a0)	; Change animation back to normal ?
0001652E 4238 D200                  		clr.b	($FFFFD200).w	; clear Obj7E (super sonic stars object) at $FFFFD200		
00016532 4238 FE2D                  		clr.b 	(v_invinc).w
00016536 4238 FE2E                  		clr.b 	(v_shoes).w 
0001653A 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001653E 4EB9 0000 12F8             		jsr		(PlaySound).l    ; play normal music		
00016544 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
0001654A 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00016550 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00016556 0828 0006 0022             		btst	#6,obStatus(a0)	; Check if underwater, return if not
0001655C 6700                       		beq.s	return_1AC3C
0001655E 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w
00016564 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w
0001656A 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w
00016570                            		
00016570                            return_1AC3C:
00016570 4E75                       		rts
00016572                            ; End of subroutine Sonic_Super	
00016572                            
00016572                            
00016572                            ; ---------------------------------------------------------------------------
00016572                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
00016572                            ; ---------------------------------------------------------------------------
00016572                            
00016572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016572                            
00016572                            
00016572                            Super_and_Invincibility_Stars:
00016572 4278 D032                  		clr.w	($FFFFD032).w		; clear time limit of the invincibility
00016576 2F08                       		move.l	a0,-(sp)
00016578 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
0001657C 4EBA 931A                  		jsr		DeleteObject		; delete stars
00016580 41F8 D240                  		lea		($FFFFD240).w,a0	; stars object ($3802)
00016584 4EBA 9312                  		jsr		DeleteObject		; delete stars
00016588 41F8 D280                  		lea		($FFFFD280).w,a0	; stars object ($3803)
0001658C 4EBA 930A                  		jsr		DeleteObject		; delete stars
00016590 41F8 D2C0                  		lea		($FFFFD2C0).w,a0	; stars object ($3804)
00016594 4EBA 9302                  		jsr		DeleteObject		; delete stars
00016598 205F                       		move.l	(sp)+,a0
0001659A 4E75                       		rts
0001659C                            ; End of function Super_and_Invincibility_Stars
0001659C                            ; End of function Super_and_Invincibility_Stars
0001659C                            		include	"_incObj\Sonic SlopeResist.asm"
0001659C                            ; ---------------------------------------------------------------------------
0001659C                            ; Subroutine to	slow Sonic walking up a	slope
0001659C                            ; ---------------------------------------------------------------------------
0001659C                            
0001659C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001659C                            
0001659C                            
0001659C                            Sonic_SlopeResist:
0001659C 1028 0026                  		move.b	obAngle(a0),d0
000165A0 0600 0060                  		addi.b	#$60,d0
000165A4 0C00 00C0                  		cmpi.b	#$C0,d0
000165A8 6400                       		bcc.s	locret_13508
000165AA 1028 0026                  		move.b	obAngle(a0),d0
000165AE 4EB9 0000 3D28             		jsr	(CalcSine).l
000165B4 C1FC 0020                  		muls.w	#$20,d0
000165B8 E080                       		asr.l	#8,d0
000165BA 4A68 0020                  		tst.w	obInertia(a0)
000165BE 6700                       		beq.s	locret_13508
000165C0 6B00                       		bmi.s	loc_13504
000165C2 4A40                       		tst.w	d0
000165C4 6700                       		beq.s	locret_13502
000165C6 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
000165CA                            
000165CA                            locret_13502:
000165CA 4E75                       		rts	
000165CC                            ; ===========================================================================
000165CC                            
000165CC                            loc_13504:
000165CC D168 0020                  		add.w	d0,obInertia(a0)
000165D0                            
000165D0                            locret_13508:
000165D0 4E75                       		rts	
000165D2                            ; End of function Sonic_SlopeResist
000165D2                            ; End of function Sonic_SlopeResist
000165D2                            		include	"_incObj\Sonic RollRepel.asm"
000165D2                            ; ---------------------------------------------------------------------------
000165D2                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000165D2                            ; ---------------------------------------------------------------------------
000165D2                            
000165D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165D2                            
000165D2                            
000165D2                            Sonic_RollRepel:
000165D2 1028 0026                  		move.b	obAngle(a0),d0
000165D6 0600 0060                  		addi.b	#$60,d0
000165DA 0C00 00C0                  		cmpi.b	#-$40,d0
000165DE 6400                       		bcc.s	locret_13544
000165E0 1028 0026                  		move.b	obAngle(a0),d0
000165E4 4EB9 0000 3D28             		jsr	(CalcSine).l
000165EA C1FC 0050                  		muls.w	#$50,d0
000165EE E080                       		asr.l	#8,d0
000165F0 4A68 0020                  		tst.w	obInertia(a0)
000165F4 6B00                       		bmi.s	loc_1353A
000165F6 4A40                       		tst.w	d0
000165F8 6A00                       		bpl.s	loc_13534
000165FA E480                       		asr.l	#2,d0
000165FC                            
000165FC                            loc_13534:
000165FC D168 0020                  		add.w	d0,obInertia(a0)
00016600 4E75                       		rts	
00016602                            ; ===========================================================================
00016602                            
00016602                            loc_1353A:
00016602 4A40                       		tst.w	d0
00016604 6B00                       		bmi.s	loc_13540
00016606 E480                       		asr.l	#2,d0
00016608                            
00016608                            loc_13540:
00016608 D168 0020                  		add.w	d0,obInertia(a0)
0001660C                            
0001660C                            locret_13544:
0001660C 4E75                       		rts	
0001660E                            ; End of function Sonic_RollRepel
0001660E                            ; End of function Sonic_RollRepel
0001660E                            		include	"_incObj\Sonic SlopeRepel.asm"
0001660E                            ; ---------------------------------------------------------------------------
0001660E                            ; Subroutine to	push Sonic down	a slope
0001660E                            ; ---------------------------------------------------------------------------
0001660E                            
0001660E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001660E                            
0001660E                            
0001660E                            Sonic_SlopeRepel:
0001660E 4E71                       		nop	
00016610 4A28 0038                  		tst.b	$38(a0)
00016614 6600                       		bne.s	locret_13580
00016616 4A68 003E                  		tst.w	$3E(a0)
0001661A 6600                       		bne.s	loc_13582
0001661C 1028 0026                  		move.b	obAngle(a0),d0
00016620 0600 0020                  		addi.b	#$20,d0
00016624 0200 00C0                  		andi.b	#$C0,d0
00016628 6700                       		beq.s	locret_13580
0001662A 3028 0020                  		move.w	obInertia(a0),d0
0001662E 6A00                       		bpl.s	loc_1356A
00016630 4440                       		neg.w	d0
00016632                            
00016632                            loc_1356A:
00016632 0C40 0280                  		cmpi.w	#$280,d0
00016636 6400                       		bcc.s	locret_13580
00016638 4268 0020                  		clr.w	obInertia(a0)
0001663C 08E8 0001 0022             		bset	#1,obStatus(a0)
00016642 317C 001E 003E             		move.w	#$1E,$3E(a0)
00016648                            
00016648                            locret_13580:
00016648 4E75                       		rts	
0001664A                            ; ===========================================================================
0001664A                            
0001664A                            loc_13582:
0001664A 5368 003E                  		subq.w	#1,$3E(a0)
0001664E 4E75                       		rts	
00016650                            ; End of function Sonic_SlopeRepel
00016650                            ; End of function Sonic_SlopeRepel
00016650                            		include	"_incObj\Sonic JumpAngle.asm"
00016650                            ; ---------------------------------------------------------------------------
00016650                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00016650                            ; ---------------------------------------------------------------------------
00016650                            
00016650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016650                            
00016650                            
00016650                            Sonic_JumpAngle:
00016650 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016654 6700                       		beq.s	locret_135A2	; if already 0,	branch
00016656 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00016658                            
00016658 5400                       		addq.b	#2,d0		; increase angle
0001665A 6400                       		bcc.s	loc_13596
0001665C 7000                       		moveq	#0,d0
0001665E                            
0001665E                            loc_13596:
0001665E 6000                       		bra.s	loc_1359E
00016660                            ; ===========================================================================
00016660                            
00016660                            loc_13598:
00016660 5500                       		subq.b	#2,d0		; decrease angle
00016662 6400                       		bcc.s	loc_1359E
00016664 7000                       		moveq	#0,d0
00016666                            
00016666                            loc_1359E:
00016666 1140 0026                  		move.b	d0,obAngle(a0)
0001666A                            
0001666A                            locret_135A2:
0001666A 4E75                       		rts	
0001666C                            ; End of function Sonic_JumpAngle
0001666C                            ; End of function Sonic_JumpAngle
0001666C                            		include	"_incObj\Sonic Floor.asm"
0001666C                            ; ---------------------------------------------------------------------------
0001666C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001666C                            ; ---------------------------------------------------------------------------
0001666C                            
0001666C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001666C                            
0001666C                            
0001666C                            Sonic_Floor:
0001666C 3228 0010                  		move.w	obVelX(a0),d1
00016670 3428 0012                  		move.w	obVelY(a0),d2
00016674 4EB9 0000 3FBA             		jsr	(CalcAngle).l
0001667A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001667E 0400 0020                  		subi.b	#$20,d0
00016682 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00016686 0200 00C0                  		andi.b	#$C0,d0
0001668A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001668E 0C00 0040                  		cmpi.b	#$40,d0
00016692 6700 0000                  		beq.w	loc_13680
00016696 0C00 0080                  		cmpi.b	#$80,d0
0001669A 6700 0000                  		beq.w	loc_136E2
0001669E 0C00 00C0                  		cmpi.b	#$C0,d0
000166A2 6700 0000                  		beq.w	loc_1373E
000166A6 6100 0000                  		bsr.w	Sonic_HitWall
000166AA 4A41                       		tst.w	d1
000166AC 6A00                       		bpl.s	loc_135F0
000166AE 9368 0008                  		sub.w	d1,obX(a0)
000166B2 317C 0000 0010             		move.w	#0,obVelX(a0)
000166B8                            
000166B8                            loc_135F0:
000166B8 6100 0000                  		bsr.w	sub_14EB4
000166BC 4A41                       		tst.w	d1
000166BE 6A00                       		bpl.s	loc_13602
000166C0 D368 0008                  		add.w	d1,obX(a0)
000166C4 317C 0000 0010             		move.w	#0,obVelX(a0)
000166CA                            
000166CA                            loc_13602:
000166CA 6100 0000                  		bsr.w	Sonic_HitFloor
000166CE 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000166D2 4A41                       		tst.w	d1
000166D4 6A00                       		bpl.s	locret_1367E
000166D6 1428 0012                  		move.b	obVelY(a0),d2
000166DA 5002                       		addq.b	#8,d2
000166DC 4402                       		neg.b	d2
000166DE B202                       		cmp.b	d2,d1
000166E0 6C00                       		bge.s	loc_1361E
000166E2 B002                       		cmp.b	d2,d0
000166E4 6D00                       		blt.s	locret_1367E
000166E6                            
000166E6                            loc_1361E:
000166E6 D368 000C                  		add.w	d1,obY(a0)
000166EA 1143 0026                  		move.b	d3,obAngle(a0)
000166EE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000166F2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000166F8 1003                       		move.b	d3,d0
000166FA 0600 0020                  		addi.b	#$20,d0
000166FE 0200 0040                  		andi.b	#$40,d0
00016702 6600                       		bne.s	loc_1365C
00016704 1003                       		move.b	d3,d0
00016706 0600 0010                  		addi.b	#$10,d0
0001670A 0200 0020                  		andi.b	#$20,d0
0001670E 6700                       		beq.s	loc_1364E
00016710 E0E8 0012                  		asr	obVelY(a0)
00016714 6000                       		bra.s	loc_13670
00016716                            ; ===========================================================================
00016716                            
00016716                            loc_1364E:
00016716 317C 0000 0012             		move.w	#0,obVelY(a0)
0001671C 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016722 4E75                       		rts	
00016724                            ; ===========================================================================
00016724                            
00016724                            loc_1365C:
00016724 317C 0000 0010             		move.w	#0,obVelX(a0)
0001672A 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00016730 6F00                       		ble.s	loc_13670
00016732 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00016738                            
00016738                            loc_13670:
00016738 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001673E 4A03                       		tst.b	d3
00016740 6A00                       		bpl.s	locret_1367E
00016742 4468 0020                  		neg.w	obInertia(a0)
00016746                            
00016746                            locret_1367E:
00016746 4E75                       		rts	
00016748                            ; ===========================================================================
00016748                            
00016748                            loc_13680:
00016748 6100 0000                  		bsr.w	Sonic_HitWall
0001674C 4A41                       		tst.w	d1
0001674E 6A00                       		bpl.s	loc_1369A
00016750 9368 0008                  		sub.w	d1,obX(a0)
00016754 317C 0000 0010             		move.w	#0,obVelX(a0)
0001675A 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016760 4E75                       		rts	
00016762                            ; ===========================================================================
00016762                            
00016762                            loc_1369A:
00016762 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016766 4A41                       		tst.w	d1
00016768 6A00                       		bpl.s	loc_136B4
0001676A 9368 000C                  		sub.w	d1,obY(a0)
0001676E 4A68 0012                  		tst.w	obVelY(a0)
00016772 6A00                       		bpl.s	locret_136B2
00016774 317C 0000 0012             		move.w	#0,obVelY(a0)
0001677A                            
0001677A                            locret_136B2:
0001677A 4E75                       		rts	
0001677C                            ; ===========================================================================
0001677C                            
0001677C                            loc_136B4:
0001677C 4A68 0012                  		tst.w	obVelY(a0)
00016780 6B00                       		bmi.s	locret_136E0
00016782 6100 0000                  		bsr.w	Sonic_HitFloor
00016786 4A41                       		tst.w	d1
00016788 6A00                       		bpl.s	locret_136E0
0001678A D368 000C                  		add.w	d1,obY(a0)
0001678E 1143 0026                  		move.b	d3,obAngle(a0)
00016792 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016796 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001679C 317C 0000 0012             		move.w	#0,obVelY(a0)
000167A2 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000167A8                            
000167A8                            locret_136E0:
000167A8 4E75                       		rts	
000167AA                            ; ===========================================================================
000167AA                            
000167AA                            loc_136E2:
000167AA 6100 0000                  		bsr.w	Sonic_HitWall
000167AE 4A41                       		tst.w	d1
000167B0 6A00                       		bpl.s	loc_136F4
000167B2 9368 0008                  		sub.w	d1,obX(a0)
000167B6 317C 0000 0010             		move.w	#0,obVelX(a0)
000167BC                            
000167BC                            loc_136F4:
000167BC 6100 0000                  		bsr.w	sub_14EB4
000167C0 4A41                       		tst.w	d1
000167C2 6A00                       		bpl.s	loc_13706
000167C4 D368 0008                  		add.w	d1,obX(a0)
000167C8 317C 0000 0010             		move.w	#0,obVelX(a0)
000167CE                            
000167CE                            loc_13706:
000167CE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000167D2 4A41                       		tst.w	d1
000167D4 6A00                       		bpl.s	locret_1373C
000167D6 9368 000C                  		sub.w	d1,obY(a0)
000167DA 1003                       		move.b	d3,d0
000167DC 0600 0020                  		addi.b	#$20,d0
000167E0 0200 0040                  		andi.b	#$40,d0
000167E4 6600                       		bne.s	loc_13726
000167E6 317C 0000 0012             		move.w	#0,obVelY(a0)
000167EC 4E75                       		rts	
000167EE                            ; ===========================================================================
000167EE                            
000167EE                            loc_13726:
000167EE 1143 0026                  		move.b	d3,obAngle(a0)
000167F2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000167F6 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000167FC 4A03                       		tst.b	d3
000167FE 6A00                       		bpl.s	locret_1373C
00016800 4468 0020                  		neg.w	obInertia(a0)
00016804                            
00016804                            locret_1373C:
00016804 4E75                       		rts	
00016806                            ; ===========================================================================
00016806                            
00016806                            loc_1373E:
00016806 6100 0000                  		bsr.w	sub_14EB4
0001680A 4A41                       		tst.w	d1
0001680C 6A00                       		bpl.s	loc_13758
0001680E D368 0008                  		add.w	d1,obX(a0)
00016812 317C 0000 0010             		move.w	#0,obVelX(a0)
00016818 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001681E 4E75                       		rts	
00016820                            ; ===========================================================================
00016820                            
00016820                            loc_13758:
00016820 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016824 4A41                       		tst.w	d1
00016826 6A00                       		bpl.s	loc_13772
00016828 9368 000C                  		sub.w	d1,obY(a0)
0001682C 4A68 0012                  		tst.w	obVelY(a0)
00016830 6A00                       		bpl.s	locret_13770
00016832 317C 0000 0012             		move.w	#0,obVelY(a0)
00016838                            
00016838                            locret_13770:
00016838 4E75                       		rts	
0001683A                            ; ===========================================================================
0001683A                            
0001683A                            loc_13772:
0001683A 4A68 0012                  		tst.w	obVelY(a0)
0001683E 6B00                       		bmi.s	locret_1379E
00016840 6100 0000                  		bsr.w	Sonic_HitFloor
00016844 4A41                       		tst.w	d1
00016846 6A00                       		bpl.s	locret_1379E
00016848 D368 000C                  		add.w	d1,obY(a0)
0001684C 1143 0026                  		move.b	d3,obAngle(a0)
00016850 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016854 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001685A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016860 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016866                            
00016866                            locret_1379E:
00016866 4E75                       		rts	
00016868                            ; End of function Sonic_Floor
00016868                            ; End of function Sonic_Floor
00016868                            		include	"_incObj\Sonic ResetOnFloor.asm"
00016868                            ; ---------------------------------------------------------------------------
00016868                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016868                            ; ---------------------------------------------------------------------------
00016868                            
00016868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016868                            
00016868                            
00016868                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00016868 4238 F5CD                  		clr.b	(v_homingattack).w
0001686C 08A8 0005 0022                     	bclr    #5,$22(a0)
00016872 08A8 0001 0022                     	bclr    #1,$22(a0)
00016878 0828 0002 0022                     	btst    #2,$22(a0)
0001687E 6700                               	beq.s    loc_137E4
00016880 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016886 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001688C 117C 0009 0017             		move.b	#9,obWidth(a0)
00016892 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016898 5B68 000C                  		subq.w	#5,obY(a0)
0001689C                            
0001689C                            loc_137E4:
0001689C 117C 0000 003C             		move.b	#0,$3C(a0)
000168A2 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
000168A8 4E75                       		rts	
000168AA                            ; End of function Sonic_ResetOnFloor
000168AA                            ; End of function Sonic_ResetOnFloor
000168AA                            		include	"_incObj\Sonic (part 2).asm"
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            ; Sonic	when he	gets hurt
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            
000168AA                            Sonic_Hurt:	; Routine 4
000168AA 4EB9 0000 F844             		jsr	(SpeedToPos).l
000168B0 0668 0030 0012             		addi.w	#$30,obVelY(a0)
000168B6 0828 0006 0022             		btst	#6,obStatus(a0)
000168BC 6700                       		beq.s	loc_1380C
000168BE 0468 0020 0012             		subi.w	#$20,obVelY(a0)
000168C4                            
000168C4                            loc_1380C:
000168C4 6100 0000                  		bsr.w	Sonic_HurtStop
000168C8 6100 F98A                  		bsr.w	Sonic_LevelBound
000168CC 6100 ED8A                  		bsr.w	Sonic_RecordPosition
000168D0 6100 0000                  		bsr.w	Sonic_Animate
000168D4 6100 0000                  		bsr.w	Sonic_LoadGfx
000168D8 4EF9 0000 F858             		jmp	(DisplaySprite).l
000168DE                            
000168DE                            ; ---------------------------------------------------------------------------
000168DE                            ; Subroutine to	stop Sonic falling after he's been hurt
000168DE                            ; ---------------------------------------------------------------------------
000168DE                            
000168DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168DE                            
000168DE                            
000168DE                            Sonic_HurtStop:
000168DE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000168E2 0640 00E0                  		addi.w	#$E0,d0
000168E6                            		;cmp.w	obY(a0),d0
000168E6                            		;bcs.w	KillSonic
000168E6 6100 FD84                  		bsr.w	Sonic_Floor
000168EA 0828 0001 0022             		btst	#1,obStatus(a0)
000168F0 6600                       		bne.s	locret_13860
000168F2 7000                       		moveq	#0,d0
000168F4 3140 0012                  		move.w	d0,obVelY(a0)
000168F8 3140 0010                  		move.w	d0,obVelX(a0)
000168FC 3140 0020                  		move.w	d0,obInertia(a0)
00016900 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016906 5528 0024                  		subq.b	#2,obRoutine(a0)
0001690A 317C 0078 0030             		move.w	#$78,$30(a0)
00016910                            
00016910                            locret_13860:
00016910 4E75                       		rts	
00016912                            ; End of function Sonic_HurtStop
00016912                            
00016912                            ; ---------------------------------------------------------------------------
00016912                            ; Sonic	when he	dies
00016912                            ; ---------------------------------------------------------------------------
00016912                            
00016912                            Sonic_Death:	; Routine 6
00016912 6100 0000                  		bsr.w	GameOver
00016916 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001691C 6100 ED3A                  		bsr.w	Sonic_RecordPosition
00016920 6100 0000                  		bsr.w	Sonic_Animate
00016924 6100 0000                  		bsr.w	Sonic_LoadGfx
00016928 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001692E                            
0001692E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001692E                            
0001692E                            GameOver:
0001692E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016932 0640 0100                  		addi.w	#$100,d0
00016936 B068 000C                  		cmp.w	obY(a0),d0
0001693A 6400 0000                  		bcc.w	locret_13900
0001693E 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
00016944 5428 0024                  		addq.b	#2,obRoutine(a0)
00016948 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001694C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016950 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
00016954 6600                       		bne.s	loc_138D4
00016956 317C 0000 003A             		move.w	#0,$3A(a0)
0001695C 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016962 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016968 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
0001696E 4238 FE1A                  		clr.b	(f_timeover).w
00016972                            
00016972                            loc_138C2:
00016972                            		;music	bgm_TimeOver,0,0,0	; play time over music
0001697C 7003                       		moveq	#3,d0
0001697E 4EF9 0000 1798             		jmp	(AddPLC).l	; load game over patterns
00016984                            		
00016984                            ; ===========================================================================
00016984                            
00016984                            loc_138D4:
00016984 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001698A 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001698E 6700                       		beq.s	locret_13900	; if not, branch
00016990 317C 0000 003A             		move.w	#0,$3A(a0)
00016996 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001699C 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000169A2 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
000169A8 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000169AE 60C2                       		bra.s	loc_138C2
000169B0                            		
000169B0                            
000169B0                            ; ===========================================================================
000169B0                            
000169B0                            locret_13900:
000169B0 4E75                       		rts	
000169B2                            ; End of function GameOver
000169B2                            
000169B2                            ; ---------------------------------------------------------------------------
000169B2                            ; Sonic	when the level is restarted
000169B2                            ; ---------------------------------------------------------------------------
000169B2                            
000169B2                            Sonic_ResetLevel:; Routine 8
000169B2 4A68 003A                  		tst.w	$3A(a0)
000169B6 6700                       		beq.s	locret_13914
000169B8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000169BC 6600                       		bne.s	locret_13914
000169BE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000169C4                            
000169C4                            	locret_13914:
000169C4 4E75                       		rts	
000169C4 4E75                       		rts	
000169C6                            		include	"_incObj\Sonic Loops.asm"
000169C6                            ; ---------------------------------------------------------------------------
000169C6                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000169C6                            ; ---------------------------------------------------------------------------
000169C6                            
000169C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169C6                            
000169C6                            
000169C6                            Sonic_Loops:
000169C6 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
000169CC 6700                       		beq.s	@isstarlight	; if yes, branch
000169CE 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
000169D2 6600 0000                  		bne.w	@noloops	; if not, branch
000169D6                            
000169D6                            	@isstarlight:
000169D6 3028 000C                  		move.w	obY(a0),d0
000169DA E248                       		lsr.w	#1,d0
000169DC 0240 0380                  		andi.w	#$380,d0
000169E0 1228 0008                  		move.b	obX(a0),d1
000169E4 0241 007F                  		andi.w	#$7F,d1
000169E8 D041                       		add.w	d1,d0
000169EA 43F8 A400                  		lea	(v_lvllayout).w,a1
000169EE 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000169F2                            
000169F2 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
000169F6 6700 F918                  		beq.w	Sonic_ChkRoll	; if yes, branch
000169FA B238 F7AF                  		cmp.b	(v_256roll2).w,d1
000169FE 6700 F910                  		beq.w	Sonic_ChkRoll
00016A02                            
00016A02 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016A06 6700                       		beq.s	@chkifleft	; if yes, branch
00016A08 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016A0C 6700                       		beq.s	@chkifinair
00016A0E 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016A14 4E75                       		rts	
00016A16                            ; ===========================================================================
00016A16                            
00016A16                            @chkifinair:
00016A16 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016A1C 6700                       		beq.s	@chkifleft	; if not, branch
00016A1E                            
00016A1E 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016A24 4E75                       		rts	
00016A26                            ; ===========================================================================
00016A26                            
00016A26                            @chkifleft:
00016A26 3428 0008                  		move.w	obX(a0),d2
00016A2A 0C02 002C                  		cmpi.b	#$2C,d2
00016A2E 6400                       		bcc.s	@chkifright
00016A30                            
00016A30 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016A36 4E75                       		rts	
00016A38                            ; ===========================================================================
00016A38                            
00016A38                            @chkifright:
00016A38 0C02 00E0                  		cmpi.b	#$E0,d2
00016A3C 6500                       		bcs.s	@chkangle1
00016A3E                            
00016A3E 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016A44 4E75                       		rts	
00016A46                            ; ===========================================================================
00016A46                            
00016A46                            @chkangle1:
00016A46 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016A4C 6600                       		bne.s	@chkangle2	; if yes, branch
00016A4E                            
00016A4E 1228 0026                  		move.b	obAngle(a0),d1
00016A52 6700                       		beq.s	@done
00016A54 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016A58 6200                       		bhi.s	@done		; if yes, branch
00016A5A 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016A60 4E75                       		rts	
00016A62                            ; ===========================================================================
00016A62                            
00016A62                            @chkangle2:
00016A62 1228 0026                  		move.b	obAngle(a0),d1
00016A66 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
00016A6A 6300                       		bls.s	@done		; if yes, branch
00016A6C 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
00016A72                            
00016A72                            @noloops:
00016A72                            @done:
00016A72 4E75                       		rts	
00016A74                            ; End of function Sonic_Loops
00016A74                            ; End of function Sonic_Loops
00016A74                            		include	"_incObj\Sonic Animate.asm"
00016A74                            ; ---------------------------------------------------------------------------
00016A74                            ; Subroutine to	animate	Sonic's sprites
00016A74                            ; ---------------------------------------------------------------------------
00016A74                            
00016A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A74                            
00016A74                            
00016A74                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016A74 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
00016A7A 4A38 FE19                          tst.b	(Super_Sonic_flag).w	    ; is sonic super?
00016A7E 6700                       		beq.s	 Sonic_Animatecont	    ; if not, branch
00016A80 43F9 0000 0000             		lea	(Ani_SuperSonic).l,a1	
00016A86                            
00016A86                            Sonic_Animatecont:	
00016A86 7000                       		moveq	#0,d0
00016A88 1028 001C                  		move.b	obAnim(a0),d0
00016A8C B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016A90 6700                       		beq.s	@do		; if not, branch
00016A92 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016A96 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016A9A 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
00016A9E                            		
00016A9E 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016AA4                            
00016AA4                            	@do:
00016AA4 D040                       		add.w	d0,d0
00016AA6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016AAA 1011                       		move.b	(a1),d0
00016AAC 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016AAE 1228 0022                  		move.b	obStatus(a0),d1
00016AB2 0201 0001                  		andi.b	#1,d1
00016AB6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016ABC 8328 0001                  		or.b	d1,obRender(a0)
00016AC0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016AC4 6A00                       		bpl.s	@delay		; if time remains, branch
00016AC6 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016ACA                            
00016ACA                            @loadframe:
00016ACA 7200                       		moveq	#0,d1
00016ACC 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016AD0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016AD4 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016AD8 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016ADC                            
00016ADC                            	@next:
00016ADC 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016AE0 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016AE4                            
00016AE4                            	@delay:
00016AE4 4E75                       		rts	
00016AE6                            ; ===========================================================================
00016AE6                            
00016AE6                            @end_FF:
00016AE6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016AE8 6600                       		bne.s	@end_FE		; if not, branch
00016AEA 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016AEE 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016AF2 60E8                       		bra.s	@next
00016AF4                            ; ===========================================================================
00016AF4                            
00016AF4                            @end_FE:
00016AF4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016AF6 6600                       		bne.s	@end_FD		; if not, branch
00016AF8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016AFC 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016B00 9200                       		sub.b	d0,d1
00016B02 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016B06 60D4                       		bra.s	@next
00016B08                            ; ===========================================================================
00016B08                            
00016B08                            @end_FD:
00016B08 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016B0A 6600                       		bne.s	@end		; if not, branch
00016B0C 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016B12                            
00016B12                            	@end:
00016B12 4E75                       		rts	
00016B14                            ; ===========================================================================
00016B14                            
00016B14                            @walkrunroll:
00016B14 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016B18 6ACA                       		bpl.s	@delay		; if time remains, branch
00016B1A 5200                       		addq.b	#1,d0		; is animation walking/running?
00016B1C 6600 0000                  		bne.w	@rolljump	; if not, branch
00016B20 7200                       		moveq	#0,d1
00016B22 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016B26 6B00                       		bmi.s	@ble 			; better handling of angles
00016B28 6700                       		beq.s	@ble
00016B2A 5300                       		subq.b	#1,d0
00016B2C                            
00016B2C                            	@ble:																
00016B2C 1428 0022                  		move.b	obStatus(a0),d2
00016B30 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016B34 6600                       		bne.s	@flip		; if yes, branch
00016B36 4600                       		not.b	d0		; reverse angle
00016B38                            
00016B38                            	@flip:
00016B38 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016B3C 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016B3E 7203                       		moveq	#3,d1
00016B40                            
00016B40                            	@noinvert:
00016B40 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016B46 B302                       		eor.b	d1,d2
00016B48 8528 0001                  		or.b	d2,obRender(a0)
00016B4C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
00016B52 6600 0000                  		bne.w	@push		; if yes, branch
00016B56                            
00016B56 E808                       		lsr.b	#4,d0		; divide angle by $10
00016B58 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016B5C 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016B60 6A00                       		bpl.s	@nomodspeed
00016B62 4442                       		neg.w	d2		; modulus speed
00016B64                            
00016B64                            	@nomodspeed:
00016B64 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; is sonic super?
00016B68 6700                       		beq.s	@cont		; if not, branch
00016B6A 43F9 0000 0000             		lea	(SuperSonAni_Run).l,a1 ; use	running	animation
00016B70 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016B74 6400                       		bcc.s	@running	; if yes, branch
00016B76 43F9 0000 0000             		lea	(SuperSonAni_Walk).l,a1 ; use walking animation
00016B7C                            	
00016B7C                            	@cont:	
00016B7C 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use Dashing animation
00016B82 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016B86 6400                       		bcc.s	@maxrunning	; if yes, branch
00016B88                            
00016B88 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016B8E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016B92 6400                       		bcc.s	@running	; if yes, branch
00016B94                            
00016B94 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016B9A                            
00016B9A                            	@running:
00016B9A D000                       		add.b	d0,d0
00016B9C D000                       		add.b	d0,d0
00016B9E 1600                       		move.b	d0,d3
00016BA0 4442                       		neg.w	d2
00016BA2 0642 0780                  		addi.w	#$780,d2
00016BA6 6A00                       		bpl.s	@belowmax
00016BA8 7400                       		moveq	#0,d2		; max animation speed
00016BAA 6000                       		bra.s	@belowmax
00016BAC                            
00016BAC                            	@maxrunning:
00016BAC D000                       		add.b d0,d0
00016BAE 1600                       		move.b d0,d3
00016BB0 4442                       		neg.w d2
00016BB2 0642 0800                  		addi.w #$800, d2
00016BB6 6A00                       		bpl.s @belowmax
00016BB8 7400                       		moveq #0, d2 
00016BBA                            
00016BBA                            	@belowmax:
00016BBA E04A                       		lsr.w	#8,d2
00016BBC 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016BC0 6100 FF08                  		bsr.w	@loadframe
00016BC4 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016BC8 4E75                       		rts	
00016BCA                            ; ===========================================================================
00016BCA                            
00016BCA                            @rolljump:
00016BCA 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016BCC 6600                       		bne.s	@push		; if not, branch
00016BCE 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016BD2 6A00                       		bpl.s	@nomodspeed2
00016BD4 4442                       		neg.w	d2
00016BD6                            
00016BD6                            	@nomodspeed2:
00016BD6 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016BDC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016BE0 6400                       		bcc.s	@rollfast	; if yes, branch
00016BE2 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016BE8                            
00016BE8                            	@rollfast:
00016BE8 4442                       		neg.w	d2
00016BEA 0642 0400                  		addi.w	#$400,d2
00016BEE 6A00                       		bpl.s	@belowmax2
00016BF0 7400                       		moveq	#0,d2
00016BF2                            
00016BF2                            	@belowmax2:
00016BF2 E04A                       		lsr.w	#8,d2
00016BF4 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016BF8 1228 0022                  		move.b	obStatus(a0),d1
00016BFC 0201 0001                  		andi.b	#1,d1
00016C00 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016C06 8328 0001                  		or.b	d1,obRender(a0)
00016C0A 6000 FEBE                  		bra.w	@loadframe
00016C0E                            ; ===========================================================================
00016C0E                            
00016C0E                            @push:
00016C0E 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016C12 6B00                       		bmi.s	@negspeed
00016C14 4442                       		neg.w	d2
00016C16                            
00016C16                            	@negspeed:
00016C16 0642 0800                  		addi.w	#$800,d2
00016C1A 6A00                       		bpl.s	@belowmax3	
00016C1C 7400                       		moveq	#0,d2
00016C1E                            
00016C1E                            	@belowmax3:
00016C1E EC4A                       		lsr.w	#6,d2
00016C20 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016C24 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016C2A 1228 0022                  		move.b	obStatus(a0),d1
00016C2E 0201 0001                  		andi.b	#1,d1
00016C32 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016C38 8328 0001                  		or.b	d1,obRender(a0)
00016C3C 6000 FE8C                  		bra.w	@loadframe
00016C40                            
00016C40                            ; End of function Sonic_Animate
00016C40                            ; End of function Sonic_Animate
00016C40                            		include	"_anim\Sonic.asm"
00016C40                            ; ---------------------------------------------------------------------------
00016C40                            ; Animation script - Sonic
00016C40                            ; ---------------------------------------------------------------------------
00016C40                            Ani_Sonic:
00016C40                            
00016C40 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016C42 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016C44 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016C46 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016C48 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016C4A 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016C4C 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016C4E 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016C50 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016C52 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016C54 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016C56 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016C58 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016C5A 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016C5C 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016C5E 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016C60 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016C62 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016C64 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016C66 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016C68 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016C6A 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016C6C 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016C6E 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016C70 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016C72 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016C74 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016C76 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016C78 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016C7A 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016C7C 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016C7E 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016C80 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016C82 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016C84 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016C86 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016C88 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016C8A 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016C8C 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
00016C8E 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
00016C90                            
00016C90 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016C9E 00                         		even
00016C9E FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016CAC 00                         		even
00016CAC FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016CB3 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016CBA 00                         		even
00016CBA FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016CC1 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016CC8 00                         		even
00016CC8 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016CD6 00                         		even
00016CD6                            SonAni_Wait:	
00016CD6 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016CE5 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016CF4 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016D03 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016D12 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016D21 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016D30 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016D3F 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016D4E 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016D56                            		even
00016D56 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016D5C                            		even
00016D5C 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016D62 00                         		even
00016D62 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016D68 00                         		even
00016D68 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016D6C 00                         		even
00016D6C 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016D70 00                         		even
00016D70 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016D74 00                         		even
00016D74 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016D78 00                         		even
00016D78 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016D82                            		even
00016D82 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016D88 00                         		even
00016D88 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016D92 00                         		even
00016D92 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016D9C 00                         		even
00016D9C 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016DA0                            		even
00016DA0 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
00016DAC                            		even
00016DAC 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
00016DB0                            		even
00016DB0 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016DB4 00                         		even
00016DB4 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
00016DB8                            		even
00016DB8 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016DBC 00                         		even
00016DBC 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016DC0 00                         		even
00016DC0 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016DC4 00                         		even
00016DC4 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016DC8 00                         		even
00016DC8                            SonAni_WaterSlide:
00016DC8 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016DCC                            		even
00016DCC 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016DD0                            		even
00016DD0 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016DD8 00                         		even
00016DD8 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016DDC                            		even
00016DDC FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016DEA 00                         		even
00016DEA 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016DF6                            		even
00016DF6 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016DFC 00                         		even
00016DFC 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016E00                            		even
00016E00 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016E04                            		even
00016E04 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016E0E 00                         		even
00016E0E 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016E17 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016E1F 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016E26 3334 35                    		dc.b	$33, $34, $35
00016E29 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016E30                            		even
00016E30 1977 78FF                  SonAni_Hang2:	dc.b $19, fr_vhang1, fr_vhang2, $FF	
00016E34                            		even
00016E34 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
00016E38                            		even
00016E38                            SonAni_Transform:
00016E38 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016E42 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016E4E                            		even
00016E4E                            
00016E4E =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016E4E =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016E4E =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016E4E =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016E4E =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016E4E =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016E4E =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016E4E =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016E4E =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016E4E =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016E4E =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016E4E =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016E4E =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016E4E =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016E4E =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016E4E =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016E4E =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016E4E =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016E4E =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016E4E =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016E4E =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016E4E =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016E4E =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016E4E =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016E4E =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016E4E =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016E4E =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016E4E =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016E4E =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016E4E =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016E4E =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016E4E =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016E4E =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016E4E =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016E4E =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016E4E =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016E4E =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016E4E =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016E4E =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016E4E =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016E4E =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016E4E                            		include	"_anim\Super Sonic.asm"		
00016E4E                            ; ---------------------------------------------------------------------------
00016E4E                            ; Animation script - Super Sonic
00016E4E                            ; ---------------------------------------------------------------------------
00016E4E                            Ani_SuperSonic:
00016E4E                            
00016E4E 0000                       ptr_SuperWalk:	dc.w SuperSonAni_Walk-Ani_SuperSonic
00016E50 0000                       ptr_SuperRun:	dc.w SuperSonAni_Run-Ani_SuperSonic
00016E52 0000                       ptr_SuperRoll:	dc.w SuperSonAni_Roll-Ani_SuperSonic
00016E54 0000                       ptr_SuperRoll2:	dc.w SuperSonAni_Roll2-Ani_SuperSonic
00016E56 0000                       ptr_SuperPush:	dc.w SuperSonAni_Push-Ani_SuperSonic
00016E58 0000                       ptr_SuperWait:	dc.w SuperSonAni_Wait-Ani_SuperSonic
00016E5A 0000                       ptr_SuperBalance:	dc.w SuperSonAni_Balance-Ani_SuperSonic
00016E5C 0000                       ptr_SuperLookUp:	dc.w SuperSonAni_LookUp-Ani_SuperSonic
00016E5E 0000                       ptr_SuperDuck:	dc.w SuperSonAni_Duck-Ani_SuperSonic
00016E60 0000                       ptr_SuperWarp1:	dc.w SuperSonAni_Warp1-Ani_Sonic
00016E62 0000                       ptr_SuperWarp2:	dc.w SuperSonAni_Warp2-Ani_Sonic
00016E64 0000                       ptr_SuperWarp3:	dc.w SuperSonAni_Warp3-Ani_Sonic
00016E66 0000                       ptr_SuperWarp4:	dc.w SuperSonAni_Warp4-Ani_Sonic
00016E68 0000                       ptr_SuperStop:	dc.w SuperSonAni_Stop-Ani_SuperSonic
00016E6A 0000                       ptr_SuperFloat1:	dc.w SuperSonAni_Float1-Ani_SuperSonic
00016E6C 0000                       ptr_SuperFloat2:	dc.w SuperSonAni_Float2-Ani_SuperSonic
00016E6E 0000                       ptr_SuperSpring:	dc.w SuperSonAni_Spring-Ani_SuperSonic
00016E70 0000                       ptr_SuperHang:	dc.w SuperSonAni_Hang-Ani_SuperSonic
00016E72 0000                       ptr_SuperLeap1:	dc.w SuperSonAni_Leap1-Ani_SuperSonic
00016E74 0000                       ptr_SuperLeap2:	dc.w SuperSonAni_Leap2-Ani_SuperSonic
00016E76 0000                       ptr_SuperSurf:	dc.w SuperSonAni_Surf-Ani_SuperSonic
00016E78 0000                       ptr_SuperGetAir:	dc.w SuperSonAni_GetAir-Ani_SuperSonic
00016E7A 0000                       ptr_SuperBurnt:	dc.w SuperSonAni_Burnt-Ani_SuperSonic
00016E7C 0000                       ptr_SuperDrown:	dc.w SuperSonAni_Drown-Ani_SuperSonic
00016E7E 0000                       ptr_SuperDeath:	dc.w SuperSonAni_Death-Ani_SuperSonic
00016E80 0000                       ptr_SuperHurt:	dc.w SuperSonAni_Hurt-Ani_SuperSonic
00016E82 0000                       ptr_SuperWaterSlide:	dc.w SuperSonAni_WaterSlide-Ani_Sonic
00016E84 0000                       ptr_SuperNull:	dc.w SuperSonAni_Null-Ani_Sonic
00016E86 0000                       ptr_SuperFloat3:	dc.w SuperSonAni_Float3-Ani_SuperSonic
00016E88 0000                       ptr_SuperFloat4:	dc.w SuperSonAni_Float4-Ani_SuperSonic
00016E8A 0000                       ptr_SuperMaxRun:	dc.w SuperSonAni_MaxRun-Ani_SuperSonic
00016E8C 0000                       ptr_SuperSpindash:	dc.w SuperSonAni_SpinDash-Ani_Sonic ;1F
00016E8E 0000                       ptr_SuperHurt2:	dc.w SuperSonAni_Hurt2-Ani_Sonic
00016E90 0000                       ptr_SuperGetUp:	dc.w SuperSonAni_GetUp-Ani_Sonic
00016E92 0000                       ptr_SuperBlink:	dc.w SuperSonAni_Blink-Ani_SuperSonic
00016E94 0000                       ptr_SuperSit:	dc.w SuperSonAni_Sit-Ani_Sonic
00016E96 0000                       ptr_SuperPeelout:	dc.w SuperSonAni_Peelout-Ani_SuperSonic
00016E98 0000                       ptr_SuperHang2:	dc.w SuperSonAni_Hang2-Ani_SuperSonic
00016E9A                            
00016E9A                            
00016E9A FF10 1112 1314 150E 0FFF+  SuperSonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016EA8 00                         		even
00016EA8 FFCD CECF D0CD CECF D0FF+  SuperSonAni_Run:	dc.b $FF, $CD,  $CE,  $CF,  $D0,  $CD,  $CE,  $CF,  $D0, afEnd, afEnd, afEnd, afEnd
00016EB6 00                         		even
00016EB6 FE5E 5F60 6162 66          SuperSonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016EBD 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016EC4 00                         		even
00016EC4 FE5E 5F60 6162 66          SuperSonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016ECB 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016ED2 00                         		even
00016ED2 FD89 8A8B 8C8D 8E8F 90FF+  SuperSonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016EE0 00                         		even
00016EE0                            SuperSonAni_Wait:	
00016EE0 05AA AAAB ABAC ACFE 06     		dc.b   5,  $AA, $AA, $AB, $AB, $AC, $AC, $FE, 6
00016EEA 00                         		even
00016EEA 0F72 7374 75FF             SuperSonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016EF0                            		even
00016EF0 030C 0DFE 01               SuperSonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016EF6 00                         		even
00016EF6 0270 71FE 01               SuperSonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016EFC 00                         		even
00016EFC 3F67 FF                    SuperSonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016F00 00                         		even
00016F00 3F68 FF                    SuperSonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016F04 00                         		even
00016F04 3F69 FF                    SuperSonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016F08 00                         		even
00016F08 3F6A FF                    SuperSonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016F0C 00                         		even
00016F0C 026B 6C6C 6D6D 6E6E FD00   SuperSonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016F16                            		even
00016F16 077C 82FE 02               SuperSonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016F1C 00                         		even
00016F1C 037C 7D7E 7F80 817B FF     SuperSonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016F26 00                         		even
00016F26 0783 8483 8483 84FD 00     SuperSonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016F30 00                         		even
00016F30 0485 86FF                  SuperSonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016F34                            		even
00016F34 0F87 8787 FE01             SuperSonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016F3A                            		even
00016F3A 0F87 88FE 01               SuperSonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016F40 00                         		even
00016F40 3F91 FF                    SuperSonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016F44 00                         		even
00016F44 0B95 9512 13FD 00          SuperSonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016F4C 00                         		even
00016F4C 2092 FF                    SuperSonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016F50 00                         		even
00016F50 2F93 FF                    SuperSonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016F54 00                         		even
00016F54 0394 FF                    SuperSonAni_Death:	dc.b 3,	fr_death, afEnd
00016F58 00                         		even
00016F58 0396 FF                    SuperSonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016F5C 00                         		even
00016F5C                            SuperSonAni_WaterSlide:
00016F5C 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016F60                            		even
00016F60 7700 FD00                  SuperSonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016F64                            		even
00016F64 037C 7E80 817B FF          SuperSonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016F6C 00                         		even
00016F6C 037C FD00                  SuperSonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016F70                            		even
00016F70 FFDD DEDD DEFF FFFF FFFF+  SuperSonAni_MaxRun:  dc.b $FF, $DD, $DE, $DD, $DE, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016F7E 00                         		even
00016F7E 009B 9C9B 9D9B 9E9B 9F9B+  SuperSonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016F8A                            		even
00016F8A 0298 9699 FF               SuperSonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016F90 00                         		even
00016F90 030B FD00                  SuperSonAni_GetUp:	dc.b 3, $B,$FD,  0
00016F94                            		even
00016F94 0102 FD00                  SuperSonAni_Blink:	dc.b   1,  2,$FD,  0
00016F98                            		even
00016F98 0808 0909 0A0A 09FE 05     SuperSonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016FA2 00                         		even
00016FA2 000E 0E0E 0E0E 0E0F 0F     SuperSonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016FAB 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016FB3 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016FBA 3334 35                    		dc.b	$33, $34, $35
00016FBD 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016FC4                            		even
00016FC4 1077 78FF                  SuperSonAni_Hang2:	dc.b $10, fr_vhang1, fr_vhang2, $FF	
00016FC8                            		even
00016FC8                            		
00016FC8 =FFFFFEF9                  id_SuperWalk:	equ (ptr_Walk-Ani_SuperSonic)/2	; 0
00016FC8 =FFFFFEFA                  id_SuperRun:		equ (ptr_Run-Ani_SuperSonic)/2	; 1
00016FC8 =FFFFFEFB                  id_SuperRoll:	equ (ptr_Roll-Ani_SuperSonic)/2	; 2
00016FC8 =FFFFFEFC                  id_SuperRoll2:	equ (ptr_Roll2-Ani_SuperSonic)/2	; 3
00016FC8 =FFFFFEFD                  id_SuperPush:	equ (ptr_Push-Ani_SuperSonic)/2	; 4
00016FC8 =FFFFFEFE                  id_SuperWait:	equ (ptr_Wait-Ani_SuperSonic)/2	; 5
00016FC8 =FFFFFEFF                  id_SuperBalance:	equ (ptr_Balance-Ani_SuperSonic)/2	; 6
00016FC8 =FFFFFF00                  id_SuperLookUp:	equ (ptr_LookUp-Ani_SuperSonic)/2	; 7
00016FC8 =FFFFFF01                  id_SuperDuck:	equ (ptr_Duck-Ani_SuperSonic)/2	; 8
00016FC8 =FFFFFF06                  id_SuperStop:	equ (ptr_Stop-Ani_SuperSonic)/2	; $D
00016FC8 =FFFFFF09                  id_SuperSpring:	equ (ptr_Spring-Ani_SuperSonic)/2	; $10
00016FC8 =FFFFFF0A                  id_SuperHang:	equ (ptr_Hang-Ani_SuperSonic)/2	; $11
00016FC8 =FFFFFF17                  id_SuperMaxRun:	equ (ptr_MaxRun-Ani_SuperSonic)/2	; $1E
00016FC8 =FFFFFF18                  id_SuperSpindash:	equ (ptr_Spindash-Ani_SuperSonic)/2	; $1F
00016FC8 =FFFFFF1D                  id_SuperPeelout:	equ (ptr_Peelout-Ani_SuperSonic)/2	; $25
00016FC8 =FFFFFF1E                  id_SuperHang2:		equ	(ptr_Hang2-Ani_SuperSonic)/2
00016FC8 =FFFFFF1E                  id_SuperHang2:		equ	(ptr_Hang2-Ani_SuperSonic)/2
00016FC8                            		include	"_incObj\Sonic LoadGfx.asm"
00016FC8                            ; ---------------------------------------------------------------------------
00016FC8                            ; Sonic	graphics loading subroutine
00016FC8                            ; ---------------------------------------------------------------------------
00016FC8                            
00016FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FC8                            
00016FC8                            
00016FC8                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016FC8 7000                       		moveq	#0,d0
00016FCA 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016FCE B038 F766                  		cmp.b	($FFFFF766).w,d0
00016FD2 6700                       		beq.s	locret_13C96
00016FD4 11C0 F766                  		move.b	d0,($FFFFF766).w
00016FD8 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016FDE D040                       		add.w	d0,d0
00016FE0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016FE4 7A00                       		moveq	#0,d5
00016FE6 1A1A                       		move.b	(a2)+,d5
00016FE8 5345                       		subq.w	#1,d5
00016FEA 6B00                       		bmi.s	locret_13C96
00016FEC 383C F000                  		move.w	#$F000,d4
00016FF0 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016FF6                            
00016FF6                            SPLC_ReadEntry:
00016FF6 7200                       		moveq	#0,d1
00016FF8 121A                       		move.b	(a2)+,d1
00016FFA E149                       		lsl.w	#8,d1
00016FFC 121A                       		move.b	(a2)+,d1
00016FFE 3601                       		move.w	d1,d3
00017000 E04B                       		lsr.w	#8,d3
00017002 0243 00F0                  		andi.w	#$F0,d3
00017006 0643 0010                  		addi.w	#$10,d3
0001700A 0241 0FFF                  		andi.w	#$FFF,d1
0001700E EB89                       		lsl.l	#5,d1
00017010 D286                       		add.l	d6,d1
00017012 3404                       		move.w	d4,d2
00017014 D843                       		add.w	d3,d4
00017016 D843                       		add.w	d3,d4
00017018 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
0001701E 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00017022                            
00017022                            locret_13C96:
00017022 4E75                       		rts	
00017024                            ; End of function Sonic_LoadGfx
00017024                            ; End of function Sonic_LoadGfx
00017024                            
00017024                            		include	"_incObj\0A Drowning Countdown.asm"
00017024                            ; ---------------------------------------------------------------------------
00017024                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00017024                            ; Sonic's mouth (LZ)
00017024                            ; ---------------------------------------------------------------------------
00017024                            
00017024                            DrownCount:
00017024 7000                       		moveq	#0,d0
00017026 1028 0024                  		move.b	obRoutine(a0),d0
0001702A 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
0001702E 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00017032                            ; ===========================================================================
00017032                            Drown_Index:
00017032 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00017034 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00017036 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00017038 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
0001703A 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
0001703C 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
0001703E 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00017040 0000                       			dc.w Drown_Display-Drown_Index
00017042 0000                       			dc.w Drown_Delete-Drown_Index
00017044                            
00017044 =00000030                  drown_origX:		equ $30		; original x-axis position
00017044 =00000038                  drown_time:		equ $38		; time between each number changes
00017044                            
00017044 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00017044 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00017044 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00017044 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00017044 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00017044 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00017044 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00017044                            ; ===========================================================================
00017044                            
00017044                            Drown_Main:	; Routine 0
00017044 5428 0024                  		addq.b	#2,obRoutine(a0)
00017048 217C 0001 4DEC 0004        		move.l	#Map_Bub,obMap(a0)
00017050 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00017056 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
0001705C 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
0001705E 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00017064                            
00017064                            	Drown_IsSYZ:	
00017064 117C 0084 0001             		move.b	#$84,obRender(a0)
0001706A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00017070 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017076 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
0001707A 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
0001707C                            
0001707C 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00017080 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00017088 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001708E 0240 007F                  		andi.w	#$7F,d0
00017092 1140 0033                  		move.b	d0,$33(a0)
00017096 6000 0000                  		bra.w	Drown_Countdown
0001709A                            ; ===========================================================================
0001709A                            
0001709A                            @smallbubble:
0001709A 1140 001C                  		move.b	d0,obAnim(a0)
0001709E 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
000170A4 317C FF78 0012             		move.w	#-$88,obVelY(a0)
000170AA                            
000170AA                            Drown_Animate:	; Routine 2
000170AA 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000170B0 4EB9 0000 C90E             		jsr	(AnimateSprite).l
000170B6                            
000170B6                            Drown_ChkWater:	; Routine 4
000170B6 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
000170BC 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
000170BE 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
000170C2 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
000170C6 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
000170CA 6200                       		bhi.s	Display_Next		; if so, branch TIS
000170CC                            		
000170CC                            
000170CC                            Normal_Water_Level:
000170CC 3038 F646                  		move.w	(v_waterpos1).w,d0
000170D0 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
000170D4 6500                       		bcs.s	Wobble		; if not, branch
000170D6                            Display_Next:	;TIS		
000170D6 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
000170DC 5E28 001C                  		addq.b	#7,obAnim(a0)
000170E0 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
000170E6 6700                       		beq.s	Drown_Display
000170E8 6000                       		bra.s	Drown_Display
000170EA                            ; ===========================================================================
000170EA                            
000170EA                            Wobble:
000170EA 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
000170EE 6700                       		beq.s	@notunnel	; if not, branch
000170F0 5868 0030                  		addq.w	#4,drown_origX(a0)
000170F4                            
000170F4                            	@notunnel:
000170F4 1028 0026                  		move.b	obAngle(a0),d0
000170F8 5228 0026                  		addq.b	#1,obAngle(a0)
000170FC 0240 007F                  		andi.w	#$7F,d0
00017100 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00017106 1031 0000                  		move.b	(a1,d0.w),d0
0001710A 4880                       		ext.w	d0
0001710C D068 0030                  		add.w	drown_origX(a0),d0
00017110 3140 0008                  		move.w	d0,obX(a0)
00017114 6100                       		bsr.s	Drown_ShowNumber
00017116 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001711C 4A28 0001                  		tst.b	obRender(a0)
00017120 6A00                       		bpl.s	@delete
00017122 4EF9 0000 F858             		jmp	(DisplaySprite).l
00017128                            
00017128                            	@delete:
00017128 4EF9 0000 F898             		jmp	(DeleteObject).l
0001712E                            ; ===========================================================================
0001712E                            
0001712E                            Drown_Display:	; Routine 6, Routine $E
0001712E 6100                       		bsr.s	Drown_ShowNumber
00017130 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017136 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001713C 4EF9 0000 F858             		jmp	(DisplaySprite).l
00017142                            ; ===========================================================================
00017142                            
00017142                            Drown_Delete:	; Routine 8, Routine $10
00017142 4EF9 0000 F898             		jmp	(DeleteObject).l
00017148                            ; ===========================================================================
00017148                            
00017148                            Drown_AirLeft:	; Routine $C
00017148 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001714E 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00017150 5368 0038                  		subq.w	#1,drown_time(a0)
00017154 6600                       		bne.s	@display
00017156 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
0001715C 5E28 001C                  		addq.b	#7,obAnim(a0)
00017160 60CC                       		bra.s	Drown_Display
00017162                            ; ===========================================================================
00017162                            
00017162                            	@display:
00017162 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017168 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001716E 4A28 0001                  		tst.b	obRender(a0)
00017172 6A00                       		bpl.s	Drown_AirLeft_Delete
00017174 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001717A                            
0001717A                            Drown_AirLeft_Delete:	
0001717A 4EF9 0000 F898             		jmp	(DeleteObject).l
00017180                            ; ===========================================================================
00017180                            
00017180                            Drown_ShowNumber:
00017180 4A68 0038                  		tst.w	drown_time(a0)
00017184 6700                       		beq.s	@nonumber
00017186 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001718A 6600                       		bne.s	@nonumber	; if time remains, branch
0001718C 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00017192 6400                       		bcc.s	@nonumber
00017194                            
00017194 317C 000F 0038             		move.w	#15,drown_time(a0)
0001719A 4268 0012                  		clr.w	obVelY(a0)
0001719E 117C 0080 0001             		move.b	#$80,obRender(a0)
000171A4 3028 0008                  		move.w	obX(a0),d0
000171A8 9078 F700                  		sub.w	(v_screenposx).w,d0
000171AC 0640 0080                  		addi.w	#$80,d0
000171B0 3140 0008                  		move.w	d0,obX(a0)
000171B4 3028 000C                  		move.w	obY(a0),d0
000171B8 9078 F704                  		sub.w	(v_screenposy).w,d0
000171BC 0640 0080                  		addi.w	#$80,d0
000171C0 3140 000A                  		move.w	d0,obScreenY(a0)
000171C4 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000171CA                            
000171CA                            	@nonumber:
000171CA 4E75                       		rts	
000171CC                            ; ===========================================================================
000171CC                            Drown_WobbleData:
000171CC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000171DC 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000171EC 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
000171FC 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001720C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001721C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001722C FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
0001723C FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
0001724C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001725C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001726C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001727C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001728C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001729C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000172AC FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000172BC FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000172CC                            ; ===========================================================================
000172CC                            
000172CC                            Drown_Countdown:; Routine $A
000172CC 4A68 002C                  		tst.w	$2C(a0)
000172D0 6600 0000                  		bne.w	@loc_13F86
000172D4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000172DA 6400 0000                  		bcc.w	@nocountdown
000172DE 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000172E4 6700 0000                  		beq.w	@nocountdown	; if not, branch
000172E8                            
000172E8 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000172EC 6A00 0000                  		bpl.w	@nochange	; branch if time remains
000172F0 317C 003B 0038             		move.w	#59,drown_time(a0)
000172F6 317C 0001 0036             		move.w	#1,$36(a0)
000172FC 4EB9 0000 3D02             		jsr	(RandomNumber).l
00017302 0240 0001                  		andi.w	#1,d0
00017306 1140 0034                  		move.b	d0,$34(a0)
0001730A 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
0001730E 0C40 0019                  		cmpi.w	#25,d0
00017312 6700                       		beq.s	@warnsound	; play sound if	air is 25
00017314 0C40 0014                  		cmpi.w	#20,d0
00017318 6700                       		beq.s	@warnsound
0001731A 0C40 000F                  		cmpi.w	#15,d0
0001731E 6700                       		beq.s	@warnsound
00017320 0C40 000C                  		cmpi.w	#12,d0
00017324 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00017326                            
00017326                            	@skipmusic:
00017330 5328 0032                  		subq.b	#1,$32(a0)
00017334 6A00                       		bpl.s	@reduceair
00017336 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001733C 08E8 0007 0036             		bset	#7,$36(a0)
00017342 6000                       		bra.s	@reduceair
00017344                            ; ===========================================================================
00017344                            
00017344                            @warnsound:
0001734E                            
0001734E                            @reduceair:
0001734E 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00017352 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00017356                            
00017356                            		; Sonic drowns here
00017356 6100 0000                  		bsr.w	ResumeMusic
0001735A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001736A 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
00017370 117C 000A 0034             		move.b	#$A,$34(a0)
00017376 317C 0001 0036             		move.w	#1,$36(a0)
0001737C 317C 0078 002C             		move.w	#$78,$2C(a0)
00017382 2F08                       		move.l	a0,-(sp)
00017384 41F8 D000                  		lea	(v_player).w,a0
00017388 6100 F4DE                  		bsr.w	Sonic_ResetOnFloor
0001738C 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00017392 08E8 0001 0022             		bset	#1,obStatus(a0)
00017398 08E8 0007 0002             		bset	#7,obGfx(a0)
0001739E 317C 0000 0012             		move.w	#0,obVelY(a0)
000173A4 317C 0000 0010             		move.w	#0,obVelX(a0)
000173AA 317C 0000 0020             		move.w	#0,obInertia(a0)
000173B0 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
000173B6 205F                       		movea.l	(sp)+,a0
000173B8 4E75                       		rts	
000173BA                            ; ===========================================================================
000173BA                            
000173BA                            @loc_13F86:
000173BA 5368 002C                  		subq.w	#1,$2C(a0)
000173BE 6600                       		bne.s	@loc_13F94
000173C0 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
000173C6 4E75                       		rts	
000173C8                            ; ===========================================================================
000173C8                            
000173C8                            	@loc_13F94:
000173C8 2F08                       		move.l	a0,-(sp)
000173CA 41F8 D000                  		lea	(v_player).w,a0
000173CE 4EB9 0000 F844             		jsr	(SpeedToPos).l
000173D4 0668 0010 0012             		addi.w	#$10,obVelY(a0)
000173DA 205F                       		movea.l	(sp)+,a0
000173DC 6000                       		bra.s	@nochange
000173DE                            ; ===========================================================================
000173DE                            
000173DE                            @gotomakenum:
000173DE 6000                       		bra.s	@makenum
000173E0                            ; ===========================================================================
000173E0                            
000173E0                            @nochange:
000173E0 4A68 0036                  		tst.w	$36(a0)
000173E4 6700 0000                  		beq.w	@nocountdown
000173E8 5368 003A                  		subq.w	#1,$3A(a0)
000173EC 6A00 0000                  		bpl.w	@nocountdown
000173F0                            
000173F0                            @makenum:
000173F0 4EB9 0000 3D02             		jsr	(RandomNumber).l
000173F6 0240 000F                  		andi.w	#$F,d0
000173FA 3140 003A                  		move.w	d0,$3A(a0)
000173FE 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
00017404 6600 0000                  		bne.w	@nocountdown
00017408 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
0001740C 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00017412 7006                       		moveq	#6,d0
00017414 0838 0000 D022             		btst	#0,(v_player+obStatus).w
0001741A 6700                       		beq.s	@noflip
0001741C 4440                       		neg.w	d0
0001741E 137C 0040 0026             		move.b	#$40,obAngle(a1)
00017424                            
00017424                            	@noflip:
00017424 D169 0008                  		add.w	d0,obX(a1)
00017428 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
0001742E 137C 0006 0028             		move.b	#6,obSubtype(a1)
00017434 4A68 002C                  		tst.w	$2C(a0)
00017438 6700 0000                  		beq.w	@loc_1403E
0001743C 0268 0007 003A             		andi.w	#7,$3A(a0)
00017442 0668 0000 003A             		addi.w	#0,$3A(a0)
00017448 3038 D00C                  		move.w	(v_player+obY).w,d0
0001744C 0440 000C                  		subi.w	#$C,d0
00017450 3340 000C                  		move.w	d0,obY(a1)
00017454 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001745A 1340 0026                  		move.b	d0,obAngle(a1)
0001745E 3038 FE04                  		move.w	(v_framecount).w,d0
00017462 0200 0003                  		andi.b	#3,d0
00017466 6600                       		bne.s	@loc_14082
00017468 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001746E 6000                       		bra.s	@loc_14082
00017470                            ; ===========================================================================
00017470                            
00017470                            @loc_1403E:
00017470 0828 0007 0036             		btst	#7,$36(a0)
00017476 6700                       		beq.s	@loc_14082
00017478 3438 FE14                  		move.w	(v_air).w,d2
0001747C E24A                       		lsr.w	#1,d2
0001747E 4EB9 0000 3D02             		jsr	(RandomNumber).l
00017484 0240 0003                  		andi.w	#3,d0
00017488 6600                       		bne.s	@loc_1406A
0001748A 08E8 0006 0036             		bset	#6,$36(a0)
00017490 6600                       		bne.s	@loc_14082
00017492 1342 0028                  		move.b	d2,obSubtype(a1)
00017496 337C 001C 0038             		move.w	#$1C,drown_time(a1)
0001749C                            
0001749C                            	@loc_1406A:
0001749C 4A28 0034                  		tst.b	$34(a0)
000174A0 6600                       		bne.s	@loc_14082
000174A2 08E8 0006 0036             		bset	#6,$36(a0)
000174A8 6600                       		bne.s	@loc_14082
000174AA 1342 0028                  		move.b	d2,obSubtype(a1)
000174AE 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000174B4                            
000174B4                            @loc_14082:
000174B4 5328 0034                  		subq.b	#1,$34(a0)
000174B8 6A00                       		bpl.s	@nocountdown
000174BA 4268 0036                  		clr.w	$36(a0)
000174BE                            
000174BE                            @nocountdown:
000174BE 4E75                       		rts	
000174BE 4E75                       		rts	
000174C0                            
000174C0                            
000174C0                            ; ---------------------------------------------------------------------------
000174C0                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000174C0                            ; ---------------------------------------------------------------------------
000174C0                            
000174C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174C0                            
000174C0                            
000174C0                            ResumeMusic:
000174C0                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
000174C0                            		;bhi.s	@over12		; if yes, branch
000174C0                            		;move.b	(v_Saved_music),d0
000174C0                            		;tst.b	(v_invinc).w ; is Sonic invincible?
000174C0                            		;beq.s	@notinvinc ; if not, branch
000174C0                            		;move.w	#bgm_Invincible,d0
000174C0                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
000174C0                            		;beq.s	@notinvinc	; if not, branch
000174C0                            		;move.w	#bgm_Ending,d0
000174C0                            
000174C0                            	;@notinvinc:
000174C0                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
000174C0                            		;beq.s	@playselected ; if not, branch
000174C0                            		;move.w	#bgm_Boss,d0
000174C0                            
000174C0                            	;@playselected:
000174C0                            		;jsr	(PlaySound).l
000174C0                            
000174C0                            	;@over12:
000174C0 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
000174C6 4238 D372                  		clr.b	(v_objspace+$340+$32).w
000174CA 4E75                       		rts	
000174CC                            
000174CC                            ;End of function ResumeMusic
000174CC                            
000174CC                            ; ===========================================================================
000174CC                            
000174CC                            		include	"_anim\Drowning Countdown.asm"
000174CC                            ; ---------------------------------------------------------------------------
000174CC                            ; Animation script - countdown numbers and bubbles (LZ)
000174CC                            ; ---------------------------------------------------------------------------
000174CC 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
000174CE 0000                       		dc.w @oneappear-Ani_Drown
000174D0 0000                       		dc.w @twoappear-Ani_Drown
000174D2 0000                       		dc.w @threeappear-Ani_Drown
000174D4 0000                       		dc.w @fourappear-Ani_Drown
000174D6 0000                       		dc.w @fiveappear-Ani_Drown
000174D8 0000                       		dc.w @smallbubble-Ani_Drown
000174DA 0000                       		dc.w @zeroflash-Ani_Drown
000174DC 0000                       		dc.w @oneflash-Ani_Drown
000174DE 0000                       		dc.w @twoflash-Ani_Drown
000174E0 0000                       		dc.w @threeflash-Ani_Drown
000174E2 0000                       		dc.w @fourflash-Ani_Drown
000174E4 0000                       		dc.w @fiveflash-Ani_Drown
000174E6 0000                       		dc.w @blank-Ani_Drown
000174E8 0000                       		dc.w @mediumbubble-Ani_Drown
000174EA 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
000174F4 00                         		even
000174F4 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
000174FE 00                         		even
000174FE 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00017508 00                         		even
00017508 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00017512 00                         		even
00017512 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
0001751C 00                         		even
0001751C 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00017526 00                         		even
00017526 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
0001752C 00                         		even
0001752C 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00017534 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
0001753C 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00017544 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
0001754C 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00017554 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
0001755C 0EFC                       @blank:		dc.b $E, afRoutine
0001755E 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00017564                            		even
00017564                            		even
00017564                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00017564                            ; ---------------------------------------------------------------------------
00017564                            ; Sprite mappings - drowning countdown numbers (LZ)
00017564                            ; ---------------------------------------------------------------------------
00017564                            Map_Drown_internal:
00017564 0000                       		dc.w @num-Map_Drown_internal
00017566 01                         @num:		dc.b 1
00017567 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001756C                            		even
0001756C                            		even
0001756C                            
0001756C                            ; --------------------------------------------------
0001756C                            ; Subroutine to load the shield's art over DMA
0001756C                            ; --------------------------------------------------
0001756C                            
0001756C                            PLCLoad_Shields:
0001756C 7000                       		moveq	#0,d0
0001756E 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00017572 B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00017576 6700                       		beq.s	locret2_13C96
00017578 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
0001757C 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00017580 D040                       		add.w   d0,d0
00017582 D4F2 0000                  		adda.w  (a2,D0),a2
00017586 3A1A                       		move.w  (a2)+,d5
00017588 5345                       		subq.w  #1,d5
0001758A 6B00                       		bmi.s	locret2_13C96
0001758C 3828 0036                  		move.w  shield_vram_art(A0),d4
00017590                            
00017590                            loc_199BE:
00017590 7200                       		moveq	#0,d1
00017592 121A                       		move.b	(a2)+,d1
00017594 E149                       		lsl.w	#8,d1
00017596 121A                       		move.b	(a2)+,d1
00017598 3601                       		move.w	d1,d3
0001759A E04B                       		lsr.w	#8,d3
0001759C 0243 00F0                  		andi.w	#$F0,d3
000175A0 0643 0010                  		addi.w	#$10,d3
000175A4 0241 0FFF                  		andi.w	#$FFF,d1
000175A8 EB89                       		lsl.l	#5,d1
000175AA D2A8 0038                  		add.l   shield_Art_Address(a0),d1
000175AE 3404                       		move.w  d4,d2
000175B0 D843                       		add.w   d3,d4
000175B2 D843                       		add.w   d3,d4
000175B4 4EB9 0000 14D4             		jsr     (QueueDMATransfer).l
000175BA 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
000175BE                            
000175BE                            locret2_13C96:
000175BE 4E75                       		rts	
000175C0                            ; End of function PLCLoad_Shields
000175C0                            
000175C0                            		include	"_incObj\4E Silver Shield.asm"
000175C0                            ; ---------------------------------------------------------------------------
000175C0                            ; Object 4E - Silver Shield
000175C0                            ; ---------------------------------------------------------------------------
000175C0                            SPShieldItem: ; XREF: Obj_Index
000175C0 7000                       		moveq	#0,d0
000175C2 1028 0024                  		move.b	obRoutine(a0),d0
000175C6 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
000175CA 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
000175CE                            ; ===========================================================================
000175CE                            ; off_1D900:
000175CE                            SPShieldItem_Index:
000175CE 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
000175D0 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
000175D2                            ; ===========================================================================
000175D2                            ; loc_1D904:
000175D2                            SPShieldItem_Init:
000175D2 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000175DA 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000175E2 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000175EA 117C 0004 0001             		move.b	#4,obRender(a0)
000175F0 317C 0080 0018             		move.w	#$80,obPriority(a0)
000175F6 117C 0018 0014             		move.b	#$18,obActWid(a0)
000175FC 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017602 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017608 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001760E 6700                       		beq.s	@animclear
00017610 08E8 0007 0002             		bset	#7,obGfx(a0)
00017616                            
00017616                            @animclear:
00017616 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001761C 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017622 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017626                            ; loc_1D92C:
00017626                            SPShieldItem_Main:
00017626 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
0001762A 4A38 FE2D                  		tst.b	(v_invinc).w
0001762E 6600                       		bne.s	@return
00017630                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017630                            		;beq.s	@return	; If so, do not display and do not update variables
00017630 4A38 F5CA                  		tst.b	(v_SpShield).w
00017634 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00017638 316A 0008 0008             		move.w	obX(a2),obX(a0)
0001763E 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017644 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001764A 4A6A 0002                  		tst.w	obGFX(a2)
0001764E 6A00                       		bpl.s	@nothighpriority
00017650 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017656                            
00017656                            		@nothighpriority:
00017656 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001765C 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00017662 4EB9 0001 756C             		jsr	(PLCLoad_Shields).l
00017668 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001766E                            ; ---------------------------------------------------------------------------
0001766E                            ; ===========================================================================
0001766E                            
0001766E                            @return:
0001766E 4E75                       		rts
00017670                            
00017670                            SPShieldItem_Destroy:
00017670 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017674 4E75                       		rts
00017676                            ; ===========================================================================
00017676                            ; ===========================================================================
00017676                            		include	"_incObj\04 Gold Shield.asm"
00017676                            ; ---------------------------------------------------------------------------
00017676                            ; Object 04 - Gold Shield
00017676                            ; ---------------------------------------------------------------------------
00017676                            GShieldItem: ; XREF: Obj_Index
00017676 7000                       		moveq	#0,d0
00017678 1028 0024                  		move.b	obRoutine(a0),d0
0001767C 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00017680 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00017684                            ; ===========================================================================
00017684                            ; off_1D900:
00017684                            GShieldItem_Index:
00017684 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00017686 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00017688                            ; ===========================================================================
00017688                            ; loc_1D904:
00017688                            GShieldItem_Init:
00017688 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017690 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017698 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000176A0 117C 0004 0001             		move.b	#4,obRender(a0)
000176A6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000176AC 117C 0018 0014             		move.b	#$18,obActWid(a0)
000176B2 317C 0541 0002             		move.w	#$541,obGfx(a0)
000176B8 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000176BE 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000176C4 6700                       		beq.s	@animclear
000176C6 08E8 0007 0002             		bset	#7,obGfx(a0)
000176CC                            
000176CC                            @animclear:
000176CC 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000176D2 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000176D8 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000176DC                            ; loc_1D92C:
000176DC                            GShieldItem_Main:
000176DC 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000176E0 4A38 FE2D                  		tst.b	(v_invinc).w
000176E4 6600                       		bne.s	@return
000176E6                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000176E6                            		;beq.s	@return	; If so, do not display and do not update variables
000176E6 4A38 F5C9                  		tst.b	(v_GShield).w
000176EA 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
000176EE 316A 0008 0008             		move.w	obX(a2),obX(a0)
000176F4 316A 000C 000C             		move.w	obY(a2),obY(a0)
000176FA 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017700 4A6A 0002                  		tst.w	obGFX(a2)
00017704 6A00                       		bpl.s	@nothighpriority
00017706 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
0001770C                            
0001770C                            		@nothighpriority:
0001770C 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017712 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00017718 4EB9 0001 756C             		jsr	(PLCLoad_Shields).l
0001771E 4EF9 0000 F858             		jmp	(DisplaySprite).l
00017724                            ; ---------------------------------------------------------------------------
00017724                            ; ===========================================================================
00017724                            
00017724                            @return:
00017724 4E75                       		rts
00017726                            
00017726                            GShieldItem_Destroy:
00017726 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
0001772A 4E75                       		rts
0001772C                            ; ===========================================================================
0001772C                            ; ===========================================================================
0001772C                            		include	"_incObj\07 Red Shield.asm"
0001772C                            ; ---------------------------------------------------------------------------
0001772C                            ; Object 07 - Red Shield
0001772C                            ; ---------------------------------------------------------------------------
0001772C                            RShieldItem: ; XREF: Obj_Index
0001772C 7000                       		moveq	#0,d0
0001772E 1028 0024                  		move.b	obRoutine(a0),d0
00017732 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
00017736 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
0001773A                            ; ===========================================================================
0001773A                            ; off_1D900:
0001773A                            RShieldItem_Index:
0001773A 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
0001773C 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
0001773E                            ; ===========================================================================
0001773E                            ; loc_1D904:
0001773E                            RShieldItem_Init:
0001773E 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017746 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
0001774E 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017756 117C 0004 0001             		move.b	#4,obRender(a0)
0001775C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017762 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017768 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001776E 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017774 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001777A 6700                       		beq.s	@animclear
0001777C 08E8 0007 0002             		bset	#7,obGfx(a0)
00017782                            
00017782                            @animclear:
00017782 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017788 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
0001778E 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017792                            ; loc_1D92C:
00017792                            RShieldItem_Main:
00017792 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017796 4A38 FE2D                  		tst.b	(v_invinc).w
0001779A 6600                       		bne.s	@return
0001779C                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
0001779C                            		;beq.s	@return	; If so, do not display and do not update variables
0001779C 4A38 F5C8                  		tst.b	(v_RShield).w
000177A0 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
000177A4 316A 0008 0008             		move.w	obX(a2),obX(a0)
000177AA 316A 000C 000C             		move.w	obY(a2),obY(a0)
000177B0 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
000177B6 4A6A 0002                  		tst.w	obGFX(a2)
000177BA 6A00                       		bpl.s	@nothighpriority
000177BC 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000177C2                            
000177C2                            		@nothighpriority:
000177C2 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000177C8 4EB9 0000 C90E             		jsr	(AnimateSprite).l
000177CE 4EB9 0001 756C             		jsr	(PLCLoad_Shields).l
000177D4 4EF9 0000 F858             		jmp	(DisplaySprite).l
000177DA                            ; ---------------------------------------------------------------------------
000177DA                            ; ===========================================================================
000177DA                            
000177DA                            @return:
000177DA 4E75                       		rts
000177DC                            
000177DC                            RShieldItem_Destroy:
000177DC 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000177E0 4E75                       		rts
000177E2                            ; ===========================================================================
000177E2                            ; ===========================================================================
000177E2                            		include	"_incObj\38 Shield.asm"
000177E2                            ; ---------------------------------------------------------------------------
000177E2                            ; Object 38 - Shield
000177E2                            ; ---------------------------------------------------------------------------
000177E2                            ShieldItem: ; XREF: Obj_Index
000177E2 7000                       		moveq	#0,d0
000177E4 1028 0024                  		move.b	obRoutine(a0),d0
000177E8 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
000177EC 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
000177F0                            ; ===========================================================================
000177F0                            ; off_1D900:
000177F0                            ShieldItem_Index:
000177F0 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
000177F2 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
000177F4                            ; ===========================================================================
000177F4                            ; loc_1D904:
000177F4                            ShieldItem_Init:
000177F4 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000177FC 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017804 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
0001780C 117C 0004 0001             		move.b	#4,obRender(a0)
00017812 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017818 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001781E 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017824 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
0001782A 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017830 6700                       		beq.s	loc_195F0S
00017832 08E8 0007 0002             		bset	#7,obGfx(a0)
00017838                            
00017838                            loc_195F0S:
00017838 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001783E 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017844 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017848                            ; loc_1D92C:
00017848                            ShieldItem_Main:
00017848 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
0001784C 4A38 FE2D                  		tst.b	(v_invinc).w
00017850 6600                       		bne.s	return_1D976
00017852                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017852                            		;beq.s	return_1D976	; If so, do not display and do not update variables
00017852 4A38 FE2C                  		tst.b	(v_shield).w
00017856 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
0001785A 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017860 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017866 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001786C 4A6A 0002                  		tst.w	obGFX(a2)
00017870 6A00                       		bpl.s	@nothighpriority
00017872 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017878                            
00017878                            		@nothighpriority:
00017878 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001787E 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00017884 4EB9 0001 756C             		jsr	(PLCLoad_Shields).l
0001788A 4EF9 0000 F858             		jmp	(DisplaySprite).l
00017890                            ; ---------------------------------------------------------------------------
00017890                            ; ===========================================================================
00017890                            
00017890                            return_1D976:
00017890 4E75                       		rts
00017892                            
00017892                            ShieldItem_Destroy:
00017892 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017896 4E75                       		rts
00017898                            ; ===========================================================================
00017898                            ; ===========================================================================
00017898                            		include	"_incObj\19 Invincibility Stars.asm"	
00017898                            ; ---------------------------------------------------------------------------
00017898                            ; Object 10 - invincibility stars
00017898                            ; ---------------------------------------------------------------------------
00017898 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
00017898 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
00017898 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
00017898 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
00017898                            
00017898                            InvStarsObj: 
00017898 7000                       		moveq	#0,d0
0001789A 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
0001789E 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000178A2 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000178A6                            ; ===========================================================================
000178A6 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
000178A8 0000                       		dc.w @MainObject-InvStars_Index
000178AA 0000                       		dc.w @SubObject-InvStars_Index
000178AC                            ; ===========================================================================
000178AC                            
000178AC                            	@SubObjectsData:
000178AC 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000178B0 0B00                       		dc.w $0B00 ; speed index,sub3 anim
000178B2 0000 0000                  		dc.l Ani_InvStars3
000178B6 160D                       		dc.w $160D
000178B8 0000 0000                  		dc.l Ani_InvStars4
000178BC 2C0D                       		dc.w $2C0D
000178BE                            ; ===========================================================================
000178BE                            
000178BE                            	@InitObjects:
000178BE 223C 0000 0000             		move.l	#Unc_Stars,d1
000178C4 343C ABC0                  		move.w	#$ABC0,d2
000178C8 363C 0220                  		move.w	#$220,d3
000178CC 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
000178D2 7400                       		moveq	#0,d2
000178D4 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
000178D8 43D0                       		lea	(a0),a1
000178DA 7203                       		moveq	#3,d1
000178DC                            		
000178DC                            	@initStars:
000178DC 1290                       		move.b	(a0),(a1) ; load obj35
000178DE 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
000178E4 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
000178EC 337C 055E 0002             		move.w	#$55E,obGfx(a1)
000178F2 137C 0044 0001             		move.b  #%001000100,obRender(a1)
000178F8 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
000178FE 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
00017904 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00017908 5242                       		addq.w	#1,d2
0001790A 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
0001790E 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
00017912 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00017916 51C9 FFC4                  		dbf	d1,@initStars
0001791A                            
0001791A 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
00017920 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00017926                            
00017926                            	@MainObject:
00017926 43F8 D000                  		lea (v_player).w,a1 ; a1=character
0001792A 4A38 FE2D                  		tst.b   (v_invinc).w
0001792E 6700 0000                  		beq.w	JmpTo_DeleteObject
00017932 3029 0008                  		move.w	obX(a1),d0
00017936 3140 0008                  		move.w	d0,obX(a0)
0001793A 3229 000C                  		move.w	obY(a1),d1
0001793E 3141 000C                  		move.w	d1,obY(a0)
00017942 45E8 0010                  		lea	sub2_x_pos(a0),a2
00017946 47F9 0000 0000             		lea	Ani_InvStars1,a3
0001794C 7A00                       		moveq	#0,d5
0001794E                            
0001794E                            	@getFrame_main:
0001794E 3428 0038                  		move.w	$38(a0),d2
00017952 1A33 2000                  		move.b	(a3,d2.w),d5
00017956 6A00                       		bpl.s	@setFrameAndPosition_main
00017958 4268 0038                  		clr.w	$38(a0)
0001795C 60F0                       		bra.s	@getFrame_main
0001795E                            ; ===========================================================================
0001795E                            
0001795E                            	@setFrameAndPosition_main:
0001795E 5268 0038                  		addq.w	#1,$38(a0)
00017962 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00017968 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001796C 6100 0000                  		bsr.w	InvStars_get_speed
00017970 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017972 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017974 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017976 0646 0020                  		addi.w	#$20,d6
0001797A 6100 0000                  		bsr.w	InvStars_get_speed
0001797E 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017980 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017982 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017984 7012                       		moveq	#$12,d0
00017986 0829 0000 0022             		btst	#0,obStatus(a1)
0001798C 6700                       		beq.s	@display_main
0001798E 4440                       		neg.w	d0
00017990                            
00017990                            	@display_main:
00017990 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
00017994 303C 0080                  		move.w	#(1*$80),d0
00017998 4EF9 0000 F884             		jmp	DisplaySprite2
0001799E                            ; ===========================================================================
0001799E                            
0001799E                            	@SubObject:
0001799E 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
000179A2 4A38 FE2D                  		tst.b   (v_invinc).w
000179A6 6700 0000                  		beq.w	JmpTo_DeleteObject
000179AA 4BF8 F7A8                  		lea		(v_trackpos).w,a5
000179AE 4DF8 CB00                  		lea		(v_tracksonic).w,a6
000179B2                            
000179B2                            	@getPosition_sub:
000179B2 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000179B6 E509                       		lsl.b	#2,d1
000179B8 3401                       		move.w	d1,d2
000179BA D241                       		add.w	d1,d1
000179BC D242                       		add.w	d2,d1
000179BE 3015                       		move.w	(a5),d0
000179C0 9001                       		sub.b	d1,d0
000179C2 45F6 0000                  		lea	(a6,d0.w),a2
000179C6 301A                       		move.w	(a2)+,d0
000179C8 321A                       		move.w	(a2)+,d1
000179CA 3140 0008                  		move.w	d0,obX(a0)
000179CE 3141 000C                  		move.w	d1,obY(a0)
000179D2 45E8 0010                  		lea	sub2_x_pos(a0),a2
000179D6 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000179DA                            
000179DA                            	@getFrame_sub:
000179DA 3428 0038                  		move.w	$38(a0),d2
000179DE 1A33 2000                  		move.b	(a3,d2.w),d5
000179E2 6A00                       		bpl.s	@setFrameAndPosition_sub
000179E4 4268 0038                  		clr.w	$38(a0)
000179E8 60F0                       		bra.s	@getFrame_sub
000179EA                            ; ===========================================================================
000179EA                            
000179EA                            	@setFrameAndPosition_sub:
000179EA 4845                       		swap	d5
000179EC D428 0035                  		add.b	$35(a0),d2
000179F0 1A33 2000                  		move.b	(a3,d2.w),d5
000179F4 5268 0038                  		addq.w	#1,$38(a0)
000179F8 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
000179FC 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00017A00 6100                       		bsr.s	InvStars_get_speed
00017A02 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017A04 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017A06 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017A08 0646 0020                  		addi.w	#$20,d6
00017A0C 4845                       		swap	d5
00017A0E 6100                       		bsr.s	InvStars_get_speed
00017A10 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017A12 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017A14 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017A16 7002                       		moveq	#2,d0
00017A18 0829 0000 0022             		btst	#0,obStatus(a1)
00017A1E 6700                       		beq.s	loc_1DB20
00017A20 4440                       		neg.w	d0
00017A22                            
00017A22                            loc_1DB20:
00017A22 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00017A26 303C 0080                  		move.w    #(1*$80),d0
00017A2A 4EF9 0000 F884             		jmp    DisplaySprite2
00017A30                            ; ===========================================================================
00017A30                            
00017A30                            InvStars_get_speed:
00017A30 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
00017A34 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00017A38 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00017A3C 4882                       		ext.w	d2
00017A3E 4883                       		ext.w	d3
00017A40 D440                       		add.w	d0,d2 ; add object x position to x-move speed
00017A42 D641                       		add.w	d1,d3 ; add object y position to y-move speed
00017A44 4E75                       		rts
00017A46                            
00017A46                            InvStars_Speeds: ; x-move speed,	y-move speed	
00017A46 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
00017A56 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
00017A66 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
00017A76 FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00017A86                            
00017A86                            ; ---------------------------------------------------------------------------
00017A86                            ; Animation script - invincibility stars
00017A86                            ; ---------------------------------------------------------------------------
00017A86                            
00017A86                            ; The animation script differs from the animate_sprite subroutine
00017A86                            ; Every positive byte - mapping
00017A86                            ; Every negative byte - loop flag 
00017A86                            
00017A86 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00017A94 00                         		even
00017A94 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
00017A9F 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
00017AAA 00                         		even
00017AAA 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
00017AB7 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00017AC4 00                         		even
00017AC4 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
00017AD1 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
00017ADE 00                         		even			
00017ADE                            ; ---------------------------------------------------------------------------
00017ADE                            JmpTo_DeleteObject:
00017ADE 4EF9 0000 F898             		jmp		(DeleteObject).l
00017ADE 4EF9 0000 F898             		jmp		(DeleteObject).l
00017AE4                            		include	"_incObj\8D Super Stars.asm"			
00017AE4                            ; ---------------------------------------------------------------------------
00017AE4                            ; Object 91 - Super Sonic Stars
00017AE4                            ; ---------------------------------------------------------------------------
00017AE4                            
00017AE4                            SuperStars:					; XREF: Obj_Index					  ; ...
00017AE4 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
00017AEA 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
00017AEE                            								; In this case, VRAM = $541*20
00017AEE 363C 0100                  		move.w	#$100,d3
00017AF2 4EB9 0000 14D4             		jsr	(QueueDMATransfer).l
00017AF8 7000                       		moveq	#0,d0
00017AFA 1028 0024                  		move.b	obRoutine(a0),d0
00017AFE 323B 0000                  		move.w	SuperStars_States(pc,d0.w),d1
00017B02 4EFB 1000                  		jmp	SuperStars_States(pc,d1.w)
00017B06                            ; ---------------------------------------------------------------------------
00017B06 0000 0000                  SuperStars_States:	dc.w SuperStars_Init-SuperStars_States,SuperStars_Main-SuperStars_States; 0	; ...
00017B0A                            ; ---------------------------------------------------------------------------
00017B0A                            
00017B0A                            SuperStars_Init:					  ; ...
00017B0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00017B0E 217C 0000 0000 0004        		move.l	#SuperStars_MapUnc_1E1BE,4(a0)
00017B16 117C 0004 0001             		move.b	#4,obRender(a0)
00017B1C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017B22 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017B28 317C 055E 0002             		move.w	#$55E,art_tile(a0)
00017B2E 0838 0007 D002             		btst	#7,(v_player+art_tile).w
00017B34 6700                       		beq.s	SuperStars_Main
00017B36 08E8 0007 0002             		bset	#7,art_tile(a0)
00017B3C                            ; loc_1E138:
00017B3C                            SuperStars_Main:
00017B3C 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00017B40 6700                       		beq.s	JmpTo8_DeleteObject
00017B42 4A28 0030                  		tst.b	$30(a0)
00017B46 6700                       		beq.s	loc_1E188
00017B48 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00017B4C 6A00                       		bpl.s	loc_1E170
00017B4E 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00017B54 5228 001A                  		addq.b	#1,mapping_frame(a0)
00017B58 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00017B5E 6500                       		bcs.s	loc_1E170
00017B60 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017B66 117C 0000 0030             		move.b	#0,$30(a0)
00017B6C 117C 0001 0031             		move.b	#1,$31(a0)
00017B72 4E75                       		rts
00017B74                            ; ===========================================================================
00017B74                            
00017B74                            loc_1E170:
00017B74 4A28 0031                  		tst.b	$31(a0)
00017B78 6600                       		bne.s	JmpTo6_DisplaySprite
00017B7A                            
00017B7A                            loc_1E176:
00017B7A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017B80 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017B86                            
00017B86                            JmpTo6_DisplaySprite:
00017B86 4EF9 0000 F858             		jmp	DisplaySprite
00017B8C                            ; ===========================================================================
00017B8C                            
00017B8C                            loc_1E188:
00017B8C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017B90 6600                       		bne.s	loc_1E1AA
00017B92 3038 D020                  		move.w	(v_player+obInertia).w,d0
00017B96 6A00                       		bpl.s	loc_1E196
00017B98 4440                       		neg.w	d0
00017B9A                            
00017B9A                            loc_1E196:
00017B9A 0C40 0800                  		cmpi.w	#$800,d0
00017B9E 6500                       		bcs.s	loc_1E1AA
00017BA0 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017BA6 117C 0001 0030             		move.b	#1,$30(a0)
00017BAC 60CC                       		bra.s	loc_1E176
00017BAE                            ; ===========================================================================
00017BAE                            
00017BAE                            loc_1E1AA:
00017BAE 117C 0000 0030             		move.b	#0,$30(a0)
00017BB4 117C 0000 0031             		move.b	#0,$31(a0)
00017BBA 4E75                       		rts
00017BBC                            ; ===========================================================================
00017BBC                            
00017BBC                            JmpTo8_DeleteObject:
00017BBC 4EF9 0000 F898             		jmp	DeleteObject
00017BC2                            ; ===========================================================================
00017BC2                            
00017BC2                            ; -------------------------------------------------------------------------------
00017BC2                            ; sprite mappings
00017BC2                            ; -------------------------------------------------------------------------------
00017BC2                            ;Obj8F_MapUnc_1E1BE:
00017BC2                            SuperStars_MapUnc_1E1BE:	include "_maps/Super Stars.asm"	
00017BC2                            ; --------------------------------------------------------------------------------
00017BC2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017BC2                            ; --------------------------------------------------------------------------------
00017BC2                            
00017BC2                            SME_fq6vL:	
00017BC2 0000 0000                  		dc.w SME_fq6vL_C-SME_fq6vL, SME_fq6vL_21-SME_fq6vL	
00017BC6 0000 0000                  		dc.w SME_fq6vL_36-SME_fq6vL, SME_fq6vL_4B-SME_fq6vL	
00017BCA 0000 0000                  		dc.w SME_fq6vL_60-SME_fq6vL, SME_fq6vL_75-SME_fq6vL	
00017BCE 04                         SME_fq6vL_C:	dc.b 4	
00017BCF F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017BD4 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017BD9 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017BDE 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017BE3 04                         SME_fq6vL_21:	dc.b 4	
00017BE4 F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017BE9 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017BEE 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017BF3 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017BF8 04                         SME_fq6vL_36:	dc.b 4	
00017BF9 E80A 0005 E8               		dc.b $E8, $A, 0, 5, $E8	
00017BFE E80A 0805 00               		dc.b $E8, $A, 8, 5, 0	
00017C03 000A 1005 E8               		dc.b 0, $A, $10, 5, $E8	
00017C08 000A 1805 00               		dc.b 0, $A, $18, 5, 0	
00017C0D 04                         SME_fq6vL_4B:	dc.b 4	
00017C0E F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017C13 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017C18 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017C1D 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017C22 04                         SME_fq6vL_60:	dc.b 4	
00017C23 F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017C28 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017C2D 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017C32 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017C37 00                         SME_fq6vL_75:	dc.b 0	
00017C38                            		even
00017C38                            		even
00017C38                            
00017C38                            Unc_SuperSonic_stars:	incbin "artunc/Super Stars.bin"
00017DF8                            			even
00017DF8                            			even
00017DF8                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00017DF8                            ; ---------------------------------------------------------------------------
00017DF8                            ; Object 4A - special stage entry from beta
00017DF8                            ; ---------------------------------------------------------------------------
00017DF8                            
00017DF8                            VanishSonic:
00017DF8 7000                       		moveq	#0,d0
00017DFA 1028 0024                  		move.b	obRoutine(a0),d0
00017DFE 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017E02 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017E06                            ; ===========================================================================
00017E06 0000                       Van_Index:	dc.w Van_Main-Van_Index
00017E08 0000                       		dc.w Van_RmvSonic-Van_Index
00017E0A 0000                       		dc.w Van_LoadSonic-Van_Index
00017E0C                            
00017E0C =00000030                  van_time:	equ $30		; time for Sonic to disappear
00017E0C                            ; ===========================================================================
00017E0C                            
00017E0C                            Van_Main:	; Routine 0
00017E0C 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017E10 6700                       		beq.s	@isempty	; if yes, branch
00017E12 4E75                       		rts	
00017E14                            
00017E14                            	@isempty:
00017E14 5428 0024                  		addq.b	#2,obRoutine(a0)
00017E18 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017E20 117C 0004 0001             		move.b	#4,obRender(a0)
00017E26 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017E2C 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017E32 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017E38 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017E3E                            
00017E3E                            Van_RmvSonic:	; Routine 2
00017E3E 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017E44 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017E4A 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017E50 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017E56 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00017E5C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017E62 6600                       		bne.s	@display
00017E64 4A38 D000                  		tst.b	(v_player).w
00017E68 6700                       		beq.s	@display
00017E6A 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017E7A                            
00017E7A                            	@display:
00017E7A 4EF9 0000 F858             		jmp	(DisplaySprite).l
00017E80                            ; ===========================================================================
00017E80                            
00017E80                            Van_LoadSonic:	; Routine 4
00017E80 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017E84 6600                       		bne.s	@wait		; if time remains, branch
00017E86 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017E8C 4EF9 0000 F898             		jmp	(DeleteObject).l
00017E92                            
00017E92                            	@wait:
00017E92 4E75                       		rts	
00017E92 4E75                       		rts	
00017E94                            		include	"_incObj\08 Water Splash.asm"
00017E94                            ; ---------------------------------------------------------------------------
00017E94                            ; Object 08 - water splash (LZ)
00017E94                            ; ---------------------------------------------------------------------------
00017E94                            
00017E94                            Splash:
00017E94 7000                       		moveq	#0,d0
00017E96 1028 0024                  		move.b	obRoutine(a0),d0
00017E9A 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017E9E 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017EA2                            ; ===========================================================================
00017EA2 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017EA4 0000                       		dc.w Spla_Display-Spla_Index
00017EA6 0000                       		dc.w Spla_Delete-Spla_Index
00017EA8                            ; ===========================================================================
00017EA8                            
00017EA8                            Spla_Main:    ; Routine 0
00017EA8 5428 0024                          addq.b    #2,obRoutine(a0)
00017EAC 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017EB4 0028 0004 0001                     ori.b    #4,obRender(a0)
00017EBA 117C 0001 0018                     move.b    #1,obPriority(a0)
00017EC0 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017EC6 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017ECC 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017ED2                            
00017ED2                            Spla_Display:    ; Routine 2
00017ED2                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017ED2 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017ED8 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017EDE 4EB9 0000 C90E                     jsr    (AnimateSprite).l
00017EE4 4EF9 0000 F858                     jmp    (DisplaySprite).l
00017EEA                            ; ===========================================================================
00017EEA                            
00017EEA                            Spla_Delete:	; Routine 4
00017EEA 4EF9 0000 F898             		jmp	(DeleteObject).l	; delete when animation	is complete
00017EEA 4EF9 0000 F898             		jmp	(DeleteObject).l	; delete when animation	is complete
00017EF0                            		include	"_anim\Shield and Invincibility.asm"
00017EF0                            ; ---------------------------------------------------------------------------
00017EF0                            ; Animation script - shield and invincibility stars
00017EF0                            ; ---------------------------------------------------------------------------
00017EF0 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017EF2 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017EF2 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017F0C                            Map_Shield:	include	"_maps\Shield.asm"
00017F0C                            ; --------------------------------------------------------------------------------
00017F0C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017F0C                            ; --------------------------------------------------------------------------------
00017F0C                            
00017F0C                            SME_ocN6K:	
00017F0C 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
00017F10 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017F14 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
00017F18 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
00017F1C 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
00017F20 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
00017F24 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
00017F26 00                         SME_ocN6K_1A:	dc.b 0	
00017F27 04                         SME_ocN6K_1B:	dc.b 4	
00017F28 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017F2D E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017F32 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017F37 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017F3C 04                         SME_ocN6K_30:	dc.b 4	
00017F3D E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017F42 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017F47 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017F4C 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017F51 04                         SME_ocN6K_45:	dc.b 4	
00017F52 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017F57 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017F5C 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017F61 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017F66 04                         SME_ocN6K_5A:	dc.b 4	
00017F67 E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
00017F6C E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
00017F71 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017F76 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017F7B 02                         SME_ocN6K_6F:	dc.b 2	
00017F7C E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017F81 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017F86 02                         SME_ocN6K_7A:	dc.b 2	
00017F87 E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
00017F8C 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017F91 02                         SME_ocN6K_85:	dc.b 2	
00017F92 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017F97 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
00017F9C 02                         SME_ocN6K_90:	dc.b 2	
00017F9D E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017FA2 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017FA7 02                         SME_ocN6K_9B:	dc.b 2	
00017FA8 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
00017FAD 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017FB2 04                         SME_ocN6K_A6:	dc.b 4	
00017FB3 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017FB8 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
00017FBD 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017FC2 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017FC7 04                         SME_ocN6K_BB:	dc.b 4	
00017FC8 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017FCD E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017FD2 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017FD7 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017FDC 04                         SME_ocN6K_D0:	dc.b 4	
00017FDD E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017FE2 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017FE7 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017FEC 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017FF2 00                         		even
00017FF2 00                         		even
00017FF2                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
00017FF2                            ; --------------------------------------------------------------------------------
00017FF2                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
00017FF2                            
00017FF2                            SME_yRIsY:	
00017FF2 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
00017FF6 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
00017FFA 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017FFE 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00018002 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00018006 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
0001800A 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
0001800C 0000                       SME_yRIsY_1A:	dc.b 0, 0	
0001800E 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
00018018 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00018022 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
0001802C 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00018036 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
0001803C 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
00018042 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
00018048 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
0001804E 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00018054 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
0001805E 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00018068 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00018072                            		even
00018072                            		even
00018072                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00018072                            ; ================================================================================
00018072                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00018072                            ; ================================================================================
00018072                            
00018072                            InvStarMap:
00018072 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00018076 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
0001807A 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
0001807E 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00018082 0000                       	dc.w InvStarMap_8-InvStarMap
00018084 01                         InvStarMap_1: dc.b $1
00018085 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
0001808A 01                         InvStarMap_2: dc.b $1
0001808B F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00018090 01                         InvStarMap_3: dc.b $1
00018091 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00018096 01                         InvStarMap_4: dc.b $1
00018097 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
0001809C 01                         InvStarMap_5: dc.b $1
0001809D F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
000180A2 01                         InvStarMap_6: dc.b $1
000180A3 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
000180A8 01                         InvStarMap_7: dc.b $1
000180A9 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
000180AE 01                         InvStarMap_8: dc.b $1
000180AF F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
000180B4                            	even
000180B4                            	even
000180B4                            		include	"_anim\Special Stage Entry (Unused).asm"
000180B4                            ; ---------------------------------------------------------------------------
000180B4                            ; Animation script - special stage entry effect from beta
000180B4                            ; ---------------------------------------------------------------------------
000180B4 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
000180B6 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
000180CA                            		even
000180CA                            		even
000180CA                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
000180CA                            ; ---------------------------------------------------------------------------
000180CA                            ; Sprite mappings - special stage entry	from beta
000180CA                            ; ---------------------------------------------------------------------------
000180CA                            Map_Vanish_internal:
000180CA 0000                       		dc.w @flash1-Map_Vanish_internal
000180CC 0000                       		dc.w @flash2-Map_Vanish_internal
000180CE 0000                       		dc.w @flash3-Map_Vanish_internal
000180D0 0000                       		dc.w @sparkle1-Map_Vanish_internal
000180D2 0000                       		dc.w @sparkle2-Map_Vanish_internal
000180D4 0000                       		dc.w @sparkle3-Map_Vanish_internal
000180D6 0000                       		dc.w @sparkle4-Map_Vanish_internal
000180D8 0000                       		dc.w @blank-Map_Vanish_internal
000180DA 03                         @flash1:	dc.b 3
000180DB F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000180E0 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000180E5 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000180EA 03                         @flash2:	dc.b 3
000180EB F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000180F0 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000180F5 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000180FA 05                         @flash3:	dc.b 5
000180FB E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00018100 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00018105 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001810A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001810F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00018114 09                         @sparkle1:	dc.b 9
00018115 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001811A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001811F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00018124 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00018129 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001812E F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00018133 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00018138 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001813D F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00018142 12                         @sparkle2:	dc.b $12
00018143 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00018148 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001814D F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00018152 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00018157 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001815C 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00018161 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00018166 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001816B 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00018170 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00018175 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001817A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001817F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00018184 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00018189 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001818E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00018193 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00018198 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001819D 11                         @sparkle3:	dc.b $11
0001819E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000181A3 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000181A8 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000181AD 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000181B2 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000181B7 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000181BC 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000181C1 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000181C6 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000181CB 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000181D0 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000181D5 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000181DA F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000181DF 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000181E4 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000181E9 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000181EE 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000181F3 09                         @sparkle4:	dc.b 9
000181F4 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000181F9 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000181FE 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00018203 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00018208 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001820D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00018212 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00018217 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001821C 04                         		dc.b 4
0001821D 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00018222                            		even
00018222                            		even
00018222                            		include	"_anim\Water Splash.asm"
00018222                            ; ---------------------------------------------------------------------------
00018222                            ; Animation script - water splash (LZ)
00018222                            ; ---------------------------------------------------------------------------
00018222 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00018224 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
0001822A 00                         		even
0001822A 00                         		even
0001822A                            Map_Splash:	include	"_maps\Water Splash.asm"
0001822A                            ; ---------------------------------------------------------------------------
0001822A                            ; Sprite mappings - water splash (LZ)
0001822A                            ; ---------------------------------------------------------------------------
0001822A                            Map_Splash_internal:
0001822A 0000                       		dc.w @splash1-Map_Splash_internal
0001822C 0000                       		dc.w @splash2-Map_Splash_internal
0001822E 0000                       		dc.w @splash3-Map_Splash_internal
00018230 02                         @splash1:	dc.b 2
00018231 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00018236 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001823B 02                         @splash2:	dc.b 2
0001823C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00018241 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00018246 01                         @splash3:	dc.b 1
00018247 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001824C                            		even
0001824C                            		even
0001824C                            
0001824C                            		include	"_incObj\Sonic AnglePos.asm"
0001824C                            ; ---------------------------------------------------------------------------
0001824C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001824C                            ; ---------------------------------------------------------------------------
0001824C                            
0001824C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001824C                            
0001824C                            
0001824C                            Sonic_AnglePos:
0001824C 0828 0003 0022             		btst	#3,obStatus(a0)
00018252 6700                       		beq.s	loc_14602
00018254 7000                       		moveq	#0,d0
00018256 11C0 F768                  		move.b	d0,($FFFFF768).w
0001825A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001825E 4E75                       		rts	
00018260                            ; ===========================================================================
00018260                            
00018260                            loc_14602:
00018260 7003                       		moveq	#3,d0
00018262 11C0 F768                  		move.b	d0,($FFFFF768).w
00018266 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001826A 1028 0026                  		move.b	obAngle(a0),d0
0001826E 0600 0020                  		addi.b	#$20,d0
00018272 6A00                       		bpl.s	loc_14624
00018274 1028 0026                  		move.b	obAngle(a0),d0
00018278 6A00                       		bpl.s	loc_1461E
0001827A 5300                       		subq.b	#1,d0
0001827C                            
0001827C                            loc_1461E:
0001827C 0600 0020                  		addi.b	#$20,d0
00018280 6000                       		bra.s	loc_14630
00018282                            ; ===========================================================================
00018282                            
00018282                            loc_14624:
00018282 1028 0026                  		move.b	obAngle(a0),d0
00018286 6A00                       		bpl.s	loc_1462C
00018288 5200                       		addq.b	#1,d0
0001828A                            
0001828A                            loc_1462C:
0001828A 0600 001F                  		addi.b	#$1F,d0
0001828E                            
0001828E                            loc_14630:
0001828E 0200 00C0                  		andi.b	#$C0,d0
00018292 0C00 0040                  		cmpi.b	#$40,d0
00018296 6700 0000                  		beq.w	Sonic_WalkVertL
0001829A 0C00 0080                  		cmpi.b	#$80,d0
0001829E 6700 0000                  		beq.w	Sonic_WalkCeiling
000182A2 0C00 00C0                  		cmpi.b	#$C0,d0
000182A6 6700 0000                  		beq.w	Sonic_WalkVertR
000182AA 3428 000C                  		move.w	obY(a0),d2
000182AE 3628 0008                  		move.w	obX(a0),d3
000182B2 7000                       		moveq	#0,d0
000182B4 1028 0016                  		move.b	obHeight(a0),d0
000182B8 4880                       		ext.w	d0
000182BA D440                       		add.w	d0,d2
000182BC 1028 0017                  		move.b	obWidth(a0),d0
000182C0 4880                       		ext.w	d0
000182C2 D640                       		add.w	d0,d3
000182C4 49F8 F768                  		lea	($FFFFF768).w,a4
000182C8 367C 0010                  		movea.w	#$10,a3
000182CC 3C3C 0000                  		move.w	#0,d6
000182D0 7A0D                       		moveq	#$D,d5
000182D2 6100 0000                  		bsr.w	FindFloor
000182D6 3F01                       		move.w	d1,-(sp)
000182D8 3428 000C                  		move.w	obY(a0),d2
000182DC 3628 0008                  		move.w	obX(a0),d3
000182E0 7000                       		moveq	#0,d0
000182E2 1028 0016                  		move.b	obHeight(a0),d0
000182E6 4880                       		ext.w	d0
000182E8 D440                       		add.w	d0,d2
000182EA 1028 0017                  		move.b	obWidth(a0),d0
000182EE 4880                       		ext.w	d0
000182F0 4440                       		neg.w	d0
000182F2 D640                       		add.w	d0,d3
000182F4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000182F8 367C 0010                  		movea.w	#$10,a3
000182FC 3C3C 0000                  		move.w	#0,d6
00018300 7A0D                       		moveq	#$D,d5
00018302 6100 0000                  		bsr.w	FindFloor
00018306 301F                       		move.w	(sp)+,d0
00018308 6100 0000                  		bsr.w	Sonic_Angle
0001830C 4A41                       		tst.w	d1
0001830E 6700                       		beq.s	locret_146BE
00018310 6A00                       		bpl.s	loc_146C0
00018312 0C41 FFF2                  		cmpi.w	#-$E,d1
00018316 6D00                       		blt.s	locret_146E6
00018318 D368 000C                  		add.w	d1,obY(a0)
0001831C                            
0001831C                            locret_146BE:
0001831C 4E75                       		rts	
0001831E                            ; ===========================================================================
0001831E                            
0001831E                            loc_146C0:
0001831E 0C41 000E                  		cmpi.w	#$E,d1
00018322 6E00                       		bgt.s	loc_146CC
00018324                            
00018324                            loc_146C6:
00018324 D368 000C                  		add.w	d1,obY(a0)
00018328 4E75                       		rts	
0001832A                            ; ===========================================================================
0001832A                            
0001832A                            loc_146CC:
0001832A 4A28 0038                  		tst.b	$38(a0)
0001832E 66F4                       		bne.s	loc_146C6
00018330 08E8 0001 0022             		bset	#1,obStatus(a0)
00018336 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001833C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018342 4E75                       		rts	
00018344                            ; ===========================================================================
00018344                            
00018344                            locret_146E6:
00018344 4E75                       		rts	
00018346                            ; End of function Sonic_AnglePos
00018346                            
00018346                            ; ===========================================================================
00018346 2428 0008                  		move.l	obX(a0),d2
0001834A 3028 0010                  		move.w	obVelX(a0),d0
0001834E 48C0                       		ext.l	d0
00018350 E180                       		asl.l	#8,d0
00018352 9480                       		sub.l	d0,d2
00018354 2142 0008                  		move.l	d2,obX(a0)
00018358 303C 0038                  		move.w	#$38,d0
0001835C 48C0                       		ext.l	d0
0001835E E180                       		asl.l	#8,d0
00018360 9680                       		sub.l	d0,d3
00018362 2143 000C                  		move.l	d3,obY(a0)
00018366 4E75                       		rts	
00018368                            ; ===========================================================================
00018368                            
00018368                            locret_1470A:
00018368 4E75                       		rts	
0001836A                            ; ===========================================================================
0001836A 2628 000C                  		move.l	obY(a0),d3
0001836E 3028 0012                  		move.w	obVelY(a0),d0
00018372 0440 0038                  		subi.w	#$38,d0
00018376 3140 0012                  		move.w	d0,obVelY(a0)
0001837A 48C0                       		ext.l	d0
0001837C E180                       		asl.l	#8,d0
0001837E 9680                       		sub.l	d0,d3
00018380 2143 000C                  		move.l	d3,obY(a0)
00018384 4E75                       		rts	
00018386 4E75                       		rts	
00018388                            ; ===========================================================================
00018388 2428 0008                  		move.l	obX(a0),d2
0001838C 2628 000C                  		move.l	obY(a0),d3
00018390 3028 0010                  		move.w	obVelX(a0),d0
00018394 48C0                       		ext.l	d0
00018396 E180                       		asl.l	#8,d0
00018398 9480                       		sub.l	d0,d2
0001839A 3028 0012                  		move.w	obVelY(a0),d0
0001839E 48C0                       		ext.l	d0
000183A0 E180                       		asl.l	#8,d0
000183A2 9680                       		sub.l	d0,d3
000183A4 2142 0008                  		move.l	d2,obX(a0)
000183A8 2143 000C                  		move.l	d3,obY(a0)
000183AC 4E75                       		rts	
000183AE                            
000183AE                            ; ---------------------------------------------------------------------------
000183AE                            ; Subroutine to	change Sonic's angle as he walks along the floor
000183AE                            ; ---------------------------------------------------------------------------
000183AE                            
000183AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183AE                            
000183AE                            
000183AE                            Sonic_Angle:
000183AE 1438 F76A                  		move.b	($FFFFF76A).w,d2
000183B2 B240                       		cmp.w	d0,d1
000183B4 6F00                       		ble.s	loc_1475E
000183B6 1438 F768                  		move.b	($FFFFF768).w,d2
000183BA 3200                       		move.w	d0,d1
000183BC                            
000183BC                            loc_1475E:
000183BC 0802 0000                  		btst	#0,d2
000183C0 6600                       		bne.s	loc_1476A
000183C2 1142 0026                  		move.b	d2,obAngle(a0)
000183C6 4E75                       		rts	
000183C8                            ; ===========================================================================
000183C8                            
000183C8                            loc_1476A:
000183C8 1428 0026                  		move.b	obAngle(a0),d2
000183CC 0602 0020                  		addi.b	#$20,d2
000183D0 0202 00C0                  		andi.b	#$C0,d2
000183D4 1142 0026                  		move.b	d2,obAngle(a0)
000183D8 4E75                       		rts	
000183DA                            ; End of function Sonic_Angle
000183DA                            
000183DA                            ; ---------------------------------------------------------------------------
000183DA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000183DA                            ; ---------------------------------------------------------------------------
000183DA                            
000183DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183DA                            
000183DA                            
000183DA                            Sonic_WalkVertR:
000183DA 3428 000C                  		move.w	obY(a0),d2
000183DE 3628 0008                  		move.w	obX(a0),d3
000183E2 7000                       		moveq	#0,d0
000183E4 1028 0017                  		move.b	obWidth(a0),d0
000183E8 4880                       		ext.w	d0
000183EA 4440                       		neg.w	d0
000183EC D440                       		add.w	d0,d2
000183EE 1028 0016                  		move.b	obHeight(a0),d0
000183F2 4880                       		ext.w	d0
000183F4 D640                       		add.w	d0,d3
000183F6 49F8 F768                  		lea	($FFFFF768).w,a4
000183FA 367C 0010                  		movea.w	#$10,a3
000183FE 3C3C 0000                  		move.w	#0,d6
00018402 7A0D                       		moveq	#$D,d5
00018404 6100 0000                  		bsr.w	FindWall
00018408 3F01                       		move.w	d1,-(sp)
0001840A 3428 000C                  		move.w	obY(a0),d2
0001840E 3628 0008                  		move.w	obX(a0),d3
00018412 7000                       		moveq	#0,d0
00018414 1028 0017                  		move.b	obWidth(a0),d0
00018418 4880                       		ext.w	d0
0001841A D440                       		add.w	d0,d2
0001841C 1028 0016                  		move.b	obHeight(a0),d0
00018420 4880                       		ext.w	d0
00018422 D640                       		add.w	d0,d3
00018424 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018428 367C 0010                  		movea.w	#$10,a3
0001842C 3C3C 0000                  		move.w	#0,d6
00018430 7A0D                       		moveq	#$D,d5
00018432 6100 0000                  		bsr.w	FindWall
00018436 301F                       		move.w	(sp)+,d0
00018438 6100 FF74                  		bsr.w	Sonic_Angle
0001843C 4A41                       		tst.w	d1
0001843E 6700                       		beq.s	locret_147F0
00018440 6A00                       		bpl.s	loc_147F2
00018442 0C41 FFF2                  		cmpi.w	#-$E,d1
00018446 6D00 FF20                  		blt.w	locret_1470A
0001844A D368 0008                  		add.w	d1,obX(a0)
0001844E                            
0001844E                            locret_147F0:
0001844E 4E75                       		rts	
00018450                            ; ===========================================================================
00018450                            
00018450                            loc_147F2:
00018450 0C41 000E                  		cmpi.w	#$E,d1
00018454 6E00                       		bgt.s	loc_147FE
00018456                            
00018456                            loc_147F8:
00018456 D368 0008                  		add.w	d1,obX(a0)
0001845A 4E75                       		rts	
0001845C                            ; ===========================================================================
0001845C                            
0001845C                            loc_147FE:
0001845C 4A28 0038                  		tst.b	$38(a0)
00018460 66F4                       		bne.s	loc_147F8
00018462 08E8 0001 0022             		bset	#1,obStatus(a0)
00018468 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001846E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018474 4E75                       		rts	
00018476                            ; End of function Sonic_WalkVertR
00018476                            
00018476                            ; ---------------------------------------------------------------------------
00018476                            ; Subroutine allowing Sonic to walk upside-down
00018476                            ; ---------------------------------------------------------------------------
00018476                            
00018476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018476                            
00018476                            
00018476                            Sonic_WalkCeiling:
00018476 3428 000C                  		move.w	obY(a0),d2
0001847A 3628 0008                  		move.w	obX(a0),d3
0001847E 7000                       		moveq	#0,d0
00018480 1028 0016                  		move.b	obHeight(a0),d0
00018484 4880                       		ext.w	d0
00018486 9440                       		sub.w	d0,d2
00018488 0A42 000F                  		eori.w	#$F,d2
0001848C 1028 0017                  		move.b	obWidth(a0),d0
00018490 4880                       		ext.w	d0
00018492 D640                       		add.w	d0,d3
00018494 49F8 F768                  		lea	($FFFFF768).w,a4
00018498 367C FFF0                  		movea.w	#-$10,a3
0001849C 3C3C 1000                  		move.w	#$1000,d6
000184A0 7A0D                       		moveq	#$D,d5
000184A2 6100 0000                  		bsr.w	FindFloor
000184A6 3F01                       		move.w	d1,-(sp)
000184A8 3428 000C                  		move.w	obY(a0),d2
000184AC 3628 0008                  		move.w	obX(a0),d3
000184B0 7000                       		moveq	#0,d0
000184B2 1028 0016                  		move.b	obHeight(a0),d0
000184B6 4880                       		ext.w	d0
000184B8 9440                       		sub.w	d0,d2
000184BA 0A42 000F                  		eori.w	#$F,d2
000184BE 1028 0017                  		move.b	obWidth(a0),d0
000184C2 4880                       		ext.w	d0
000184C4 9640                       		sub.w	d0,d3
000184C6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000184CA 367C FFF0                  		movea.w	#-$10,a3
000184CE 3C3C 1000                  		move.w	#$1000,d6
000184D2 7A0D                       		moveq	#$D,d5
000184D4 6100 0000                  		bsr.w	FindFloor
000184D8 301F                       		move.w	(sp)+,d0
000184DA 6100 FED2                  		bsr.w	Sonic_Angle
000184DE 4A41                       		tst.w	d1
000184E0 6700                       		beq.s	locret_14892
000184E2 6A00                       		bpl.s	loc_14894
000184E4 0C41 FFF2                  		cmpi.w	#-$E,d1
000184E8 6D00 FE5A                  		blt.w	locret_146E6
000184EC 9368 000C                  		sub.w	d1,obY(a0)
000184F0                            
000184F0                            locret_14892:
000184F0 4E75                       		rts	
000184F2                            ; ===========================================================================
000184F2                            
000184F2                            loc_14894:
000184F2 0C41 000E                  		cmpi.w	#$E,d1
000184F6 6E00                       		bgt.s	loc_148A0
000184F8                            
000184F8                            loc_1489A:
000184F8 9368 000C                  		sub.w	d1,obY(a0)
000184FC 4E75                       		rts	
000184FE                            ; ===========================================================================
000184FE                            
000184FE                            loc_148A0:
000184FE 4A28 0038                  		tst.b	$38(a0)
00018502 66F4                       		bne.s	loc_1489A
00018504 08E8 0001 0022             		bset	#1,obStatus(a0)
0001850A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018510 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018516 4E75                       		rts	
00018518                            ; End of function Sonic_WalkCeiling
00018518                            
00018518                            ; ---------------------------------------------------------------------------
00018518                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00018518                            ; ---------------------------------------------------------------------------
00018518                            
00018518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018518                            
00018518                            
00018518                            Sonic_WalkVertL:
00018518 3428 000C                  		move.w	obY(a0),d2
0001851C 3628 0008                  		move.w	obX(a0),d3
00018520 7000                       		moveq	#0,d0
00018522 1028 0017                  		move.b	obWidth(a0),d0
00018526 4880                       		ext.w	d0
00018528 9440                       		sub.w	d0,d2
0001852A 1028 0016                  		move.b	obHeight(a0),d0
0001852E 4880                       		ext.w	d0
00018530 9640                       		sub.w	d0,d3
00018532 0A43 000F                  		eori.w	#$F,d3
00018536 49F8 F768                  		lea	($FFFFF768).w,a4
0001853A 367C FFF0                  		movea.w	#-$10,a3
0001853E 3C3C 0800                  		move.w	#$800,d6
00018542 7A0D                       		moveq	#$D,d5
00018544 6100 0000                  		bsr.w	FindWall
00018548 3F01                       		move.w	d1,-(sp)
0001854A 3428 000C                  		move.w	obY(a0),d2
0001854E 3628 0008                  		move.w	obX(a0),d3
00018552 7000                       		moveq	#0,d0
00018554 1028 0017                  		move.b	obWidth(a0),d0
00018558 4880                       		ext.w	d0
0001855A D440                       		add.w	d0,d2
0001855C 1028 0016                  		move.b	obHeight(a0),d0
00018560 4880                       		ext.w	d0
00018562 9640                       		sub.w	d0,d3
00018564 0A43 000F                  		eori.w	#$F,d3
00018568 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001856C 367C FFF0                  		movea.w	#-$10,a3
00018570 3C3C 0800                  		move.w	#$800,d6
00018574 7A0D                       		moveq	#$D,d5
00018576 6100 0000                  		bsr.w	FindWall
0001857A 301F                       		move.w	(sp)+,d0
0001857C 6100 FE30                  		bsr.w	Sonic_Angle
00018580 4A41                       		tst.w	d1
00018582 6700                       		beq.s	locret_14934
00018584 6A00                       		bpl.s	loc_14936
00018586 0C41 FFF2                  		cmpi.w	#-$E,d1
0001858A 6D00 FDDC                  		blt.w	locret_1470A
0001858E 9368 0008                  		sub.w	d1,obX(a0)
00018592                            
00018592                            locret_14934:
00018592 4E75                       		rts	
00018594                            ; ===========================================================================
00018594                            
00018594                            loc_14936:
00018594 0C41 000E                  		cmpi.w	#$E,d1
00018598 6E00                       		bgt.s	loc_14942
0001859A                            
0001859A                            loc_1493C:
0001859A 9368 0008                  		sub.w	d1,obX(a0)
0001859E 4E75                       		rts	
000185A0                            ; ===========================================================================
000185A0                            
000185A0                            loc_14942:
000185A0 4A28 0038                  		tst.b	$38(a0)
000185A4 66F4                       		bne.s	loc_1493C
000185A6 08E8 0001 0022             		bset	#1,obStatus(a0)
000185AC 08A8 0005 0022             		bclr	#5,obStatus(a0)
000185B2 117C 0001 001D             		move.b	#1,obNextAni(a0)
000185B8 4E75                       		rts	
000185BA                            ; End of function Sonic_WalkVertL
000185BA                            ; End of function Sonic_WalkVertL
000185BA                            
000185BA                            		include	"_incObj\sub FindNearestTile.asm"
000185BA                            ; ---------------------------------------------------------------------------
000185BA                            ; Subroutine to	find which tile	the object is standing on
000185BA                            
000185BA                            ; input:
000185BA                            ;	d2 = y-position of object's bottom edge
000185BA                            ;	d3 = x-position of object
000185BA                            
000185BA                            ; output:
000185BA                            ;	a1 = address within 256x256 mappings where object is standing
000185BA                            ;	     (refers to a 16x16 tile number)
000185BA                            ; ---------------------------------------------------------------------------
000185BA                            
000185BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185BA                            
000185BA                            
000185BA                            FindNearestTile:
000185BA 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000185BC E248                       		lsr.w	#1,d0
000185BE 0240 0380                  		andi.w	#$380,d0
000185C2 3203                       		move.w	d3,d1		; get x-pos. of object
000185C4 E049                       		lsr.w	#8,d1
000185C6 0241 007F                  		andi.w	#$7F,d1
000185CA D041                       		add.w	d1,d0		; combine
000185CC 72FF                       		moveq	#-1,d1
000185CE 43F8 A400                  		lea	(v_lvllayout).w,a1
000185D2 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000185D6 6700                       		beq.s	@blanktile	; branch if 0
000185D8 6B00                       		bmi.s	@specialtile	; branch if >$7F
000185DA 5301                       		subq.b	#1,d1
000185DC 4881                       		ext.w	d1
000185DE EE59                       		ror.w	#7,d1
000185E0 3002                       		move.w	d2,d0
000185E2 D040                       		add.w	d0,d0
000185E4 0240 01E0                  		andi.w	#$1E0,d0
000185E8 D240                       		add.w	d0,d1
000185EA 3003                       		move.w	d3,d0
000185EC E648                       		lsr.w	#3,d0
000185EE 0240 001E                  		andi.w	#$1E,d0
000185F2 D240                       		add.w	d0,d1
000185F4                            
000185F4                            @blanktile:
000185F4 2241                       		movea.l	d1,a1
000185F6 4E75                       		rts	
000185F8                            ; ===========================================================================
000185F8                            
000185F8                            @specialtile:
000185F8 0241 007F                  		andi.w	#$7F,d1
000185FC 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00018602 6700                       		beq.s	@treatasnormal	; if not, branch
00018604 5241                       		addq.w	#1,d1
00018606 0C41 0029                  		cmpi.w	#$29,d1
0001860A 6600                       		bne.s	@treatasnormal
0001860C 323C 0051                  		move.w	#$51,d1
00018610                            
00018610                            	@treatasnormal:
00018610 5301                       		subq.b	#1,d1
00018612 EE59                       		ror.w	#7,d1
00018614 3002                       		move.w	d2,d0
00018616 D040                       		add.w	d0,d0
00018618 0240 01E0                  		andi.w	#$1E0,d0
0001861C D240                       		add.w	d0,d1
0001861E 3003                       		move.w	d3,d0
00018620 E648                       		lsr.w	#3,d0
00018622 0240 001E                  		andi.w	#$1E,d0
00018626 D240                       		add.w	d0,d1
00018628 2241                       		movea.l	d1,a1
0001862A 4E75                       		rts	
0001862C                            ; End of function FindNearestTile
0001862C                            ; End of function FindNearestTile
0001862C                            		include	"_incObj\sub FindFloor.asm"
0001862C                            ; ---------------------------------------------------------------------------
0001862C                            ; Subroutine to	find the floor
0001862C                            
0001862C                            ; input:
0001862C                            ;	d2 = y-position of object's bottom edge
0001862C                            ;	d3 = x-position of object
0001862C                            ;	d5 = bit to test for solidness
0001862C                            
0001862C                            ; output:
0001862C                            ;	d1 = distance to the floor
0001862C                            ;	a1 = address within 256x256 mappings where object is standing
0001862C                            ;	     (refers to a 16x16 tile number)
0001862C                            ;	(a4) = floor angle
0001862C                            ; ---------------------------------------------------------------------------
0001862C                            
0001862C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001862C                            
0001862C                            
0001862C                            FindFloor:
0001862C 618C                       		bsr.s	FindNearestTile
0001862E 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00018630 3800                       		move.w	d0,d4
00018632 0240 07FF                  		andi.w	#$7FF,d0
00018636 6700                       		beq.s	@isblank	; branch if tile is blank
00018638 0B04                       		btst	d5,d4		; is the tile solid?
0001863A 6600                       		bne.s	@issolid	; if yes, branch
0001863C                            
0001863C                            @isblank:
0001863C D44B                       		add.w	a3,d2
0001863E 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00018642 944B                       		sub.w	a3,d2
00018644 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00018648 4E75                       		rts	
0001864A                            ; ===========================================================================
0001864A                            
0001864A                            @issolid:
0001864A 2478 F796                  		movea.l	(v_collindex).w,a2
0001864E 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00018652 0240 00FF                  		andi.w	#$FF,d0
00018656 67E4                       		beq.s	@isblank	; branch if 0
00018658 45F9 0000 0000             		lea	(AngleMap).l,a2
0001865E 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00018662 E948                       		lsl.w	#4,d0
00018664 3203                       		move.w	d3,d1		; get x-pos. of object
00018666 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
0001866A 6700                       		beq.s	@noflip		; if not, branch
0001866C 4641                       		not.w	d1
0001866E 4414                       		neg.b	(a4)
00018670                            
00018670                            	@noflip:
00018670 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00018674 6700                       		beq.s	@noflip2	; if not, branch
00018676 0614 0040                  		addi.b	#$40,(a4)
0001867A 4414                       		neg.b	(a4)
0001867C 0414 0040                  		subi.b	#$40,(a4)
00018680                            
00018680                            	@noflip2:
00018680 0241 000F                  		andi.w	#$F,d1
00018684 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00018686 45F9 0000 0000             		lea	(CollArray1).l,a2
0001868C 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00018690 4880                       		ext.w	d0
00018692 BD44                       		eor.w	d6,d4
00018694 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00018698 6700                       		beq.s	@noflip3	; if not, branch
0001869A 4440                       		neg.w	d0
0001869C                            
0001869C                            	@noflip3:
0001869C 4A40                       		tst.w	d0
0001869E 679C                       		beq.s	@isblank	; branch if height is 0
000186A0 6B00                       		bmi.s	@negfloor	; branch if height is negative
000186A2 0C00 0010                  		cmpi.b	#$10,d0
000186A6 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
000186A8 3202                       		move.w	d2,d1		; get y-pos. of object
000186AA 0241 000F                  		andi.w	#$F,d1
000186AE D041                       		add.w	d1,d0
000186B0 323C 000F                  		move.w	#$F,d1
000186B4 9240                       		sub.w	d0,d1		; return distance to floor
000186B6 4E75                       		rts	
000186B8                            ; ===========================================================================
000186B8                            
000186B8                            @negfloor:
000186B8 3202                       		move.w	d2,d1
000186BA 0241 000F                  		andi.w	#$F,d1
000186BE D041                       		add.w	d1,d0
000186C0 6A00 FF7A                  		bpl.w	@isblank
000186C4                            
000186C4                            @maxfloor:
000186C4 944B                       		sub.w	a3,d2
000186C6 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000186CA D44B                       		add.w	a3,d2
000186CC 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000186D0 4E75                       		rts	
000186D2                            ; End of function FindFloor
000186D2                            
000186D2                            
000186D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186D2                            
000186D2                            
000186D2                            FindFloor2:
000186D2 6100 FEE6                  		bsr.w	FindNearestTile
000186D6 3011                       		move.w	(a1),d0
000186D8 3800                       		move.w	d0,d4
000186DA 0240 07FF                  		andi.w	#$7FF,d0
000186DE 6700                       		beq.s	@isblank2
000186E0 0B04                       		btst	d5,d4
000186E2 6600                       		bne.s	@issolid
000186E4                            
000186E4                            @isblank2:
000186E4 323C 000F                  		move.w	#$F,d1
000186E8 3002                       		move.w	d2,d0
000186EA 0240 000F                  		andi.w	#$F,d0
000186EE 9240                       		sub.w	d0,d1
000186F0 4E75                       		rts	
000186F2                            ; ===========================================================================
000186F2                            
000186F2                            @issolid:
000186F2 2478 F796                  		movea.l	(v_collindex).w,a2
000186F6 1032 0000                  		move.b	(a2,d0.w),d0
000186FA 0240 00FF                  		andi.w	#$FF,d0
000186FE 67E4                       		beq.s	@isblank2
00018700 45F9 0000 0000             		lea	(AngleMap).l,a2
00018706 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001870A E948                       		lsl.w	#4,d0
0001870C 3203                       		move.w	d3,d1
0001870E 0804 000B                  		btst	#$B,d4
00018712 6700                       		beq.s	@noflip
00018714 4641                       		not.w	d1
00018716 4414                       		neg.b	(a4)
00018718                            
00018718                            	@noflip:
00018718 0804 000C                  		btst	#$C,d4
0001871C 6700                       		beq.s	@noflip2
0001871E 0614 0040                  		addi.b	#$40,(a4)
00018722 4414                       		neg.b	(a4)
00018724 0414 0040                  		subi.b	#$40,(a4)
00018728                            
00018728                            	@noflip2:
00018728 0241 000F                  		andi.w	#$F,d1
0001872C D240                       		add.w	d0,d1
0001872E 45F9 0000 0000             		lea	(CollArray1).l,a2
00018734 1032 1000                  		move.b	(a2,d1.w),d0
00018738 4880                       		ext.w	d0
0001873A BD44                       		eor.w	d6,d4
0001873C 0804 000C                  		btst	#$C,d4
00018740 6700                       		beq.s	@noflip3
00018742 4440                       		neg.w	d0
00018744                            
00018744                            	@noflip3:
00018744 4A40                       		tst.w	d0
00018746 679C                       		beq.s	@isblank2
00018748 6B00                       		bmi.s	@negfloor
0001874A 3202                       		move.w	d2,d1
0001874C 0241 000F                  		andi.w	#$F,d1
00018750 D041                       		add.w	d1,d0
00018752 323C 000F                  		move.w	#$F,d1
00018756 9240                       		sub.w	d0,d1
00018758 4E75                       		rts	
0001875A                            ; ===========================================================================
0001875A                            
0001875A                            @negfloor:
0001875A 3202                       		move.w	d2,d1
0001875C 0241 000F                  		andi.w	#$F,d1
00018760 D041                       		add.w	d1,d0
00018762 6A00 FF80                  		bpl.w	@isblank2
00018766 4641                       		not.w	d1
00018768 4E75                       		rts	
0001876A                            ; End of function FindFloor2
0001876A                            ; End of function FindFloor2
0001876A                            		include	"_incObj\sub FindWall.asm"
0001876A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001876A                            
0001876A                            
0001876A                            FindWall:
0001876A 6100 FE4E                  		bsr.w	FindNearestTile
0001876E 3011                       		move.w	(a1),d0
00018770 3800                       		move.w	d0,d4
00018772 0240 07FF                  		andi.w	#$7FF,d0
00018776 6700                       		beq.s	loc_14B1E
00018778 0B04                       		btst	d5,d4
0001877A 6600                       		bne.s	loc_14B2C
0001877C                            
0001877C                            loc_14B1E:
0001877C D64B                       		add.w	a3,d3
0001877E 6100 0000                  		bsr.w	FindWall2
00018782 964B                       		sub.w	a3,d3
00018784 0641 0010                  		addi.w	#$10,d1
00018788 4E75                       		rts	
0001878A                            ; ===========================================================================
0001878A                            
0001878A                            loc_14B2C:
0001878A 2478 F796                  		movea.l	(v_collindex).w,a2
0001878E 1032 0000                  		move.b	(a2,d0.w),d0
00018792 0240 00FF                  		andi.w	#$FF,d0
00018796 67E4                       		beq.s	loc_14B1E
00018798 45F9 0000 0000             		lea	(AngleMap).l,a2
0001879E 18B2 0000                  		move.b	(a2,d0.w),(a4)
000187A2 E948                       		lsl.w	#4,d0
000187A4 3202                       		move.w	d2,d1
000187A6 0804 000C                  		btst	#$C,d4
000187AA 6700                       		beq.s	loc_14B5A
000187AC 4641                       		not.w	d1
000187AE 0614 0040                  		addi.b	#$40,(a4)
000187B2 4414                       		neg.b	(a4)
000187B4 0414 0040                  		subi.b	#$40,(a4)
000187B8                            
000187B8                            loc_14B5A:
000187B8 0804 000B                  		btst	#$B,d4
000187BC 6700                       		beq.s	loc_14B62
000187BE 4414                       		neg.b	(a4)
000187C0                            
000187C0                            loc_14B62:
000187C0 0241 000F                  		andi.w	#$F,d1
000187C4 D240                       		add.w	d0,d1
000187C6 45F9 0000 0000             		lea	(CollArray2).l,a2
000187CC 1032 1000                  		move.b	(a2,d1.w),d0
000187D0 4880                       		ext.w	d0
000187D2 BD44                       		eor.w	d6,d4
000187D4 0804 000B                  		btst	#$B,d4
000187D8 6700                       		beq.s	loc_14B7E
000187DA 4440                       		neg.w	d0
000187DC                            
000187DC                            loc_14B7E:
000187DC 4A40                       		tst.w	d0
000187DE 679C                       		beq.s	loc_14B1E
000187E0 6B00                       		bmi.s	loc_14B9A
000187E2 0C00 0010                  		cmpi.b	#$10,d0
000187E6 6700                       		beq.s	loc_14BA6
000187E8 3203                       		move.w	d3,d1
000187EA 0241 000F                  		andi.w	#$F,d1
000187EE D041                       		add.w	d1,d0
000187F0 323C 000F                  		move.w	#$F,d1
000187F4 9240                       		sub.w	d0,d1
000187F6 4E75                       		rts	
000187F8                            ; ===========================================================================
000187F8                            
000187F8                            loc_14B9A:
000187F8 3203                       		move.w	d3,d1
000187FA 0241 000F                  		andi.w	#$F,d1
000187FE D041                       		add.w	d1,d0
00018800 6A00 FF7A                  		bpl.w	loc_14B1E
00018804                            
00018804                            loc_14BA6:
00018804 964B                       		sub.w	a3,d3
00018806 6100 0000                  		bsr.w	FindWall2
0001880A D64B                       		add.w	a3,d3
0001880C 0441 0010                  		subi.w	#$10,d1
00018810 4E75                       		rts	
00018812                            ; End of function FindWall
00018812                            
00018812                            
00018812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018812                            
00018812                            
00018812                            FindWall2:
00018812 6100 FDA6                  		bsr.w	FindNearestTile
00018816 3011                       		move.w	(a1),d0
00018818 3800                       		move.w	d0,d4
0001881A 0240 07FF                  		andi.w	#$7FF,d0
0001881E 6700                       		beq.s	loc_14BC6
00018820 0B04                       		btst	d5,d4
00018822 6600                       		bne.s	loc_14BD4
00018824                            
00018824                            loc_14BC6:
00018824 323C 000F                  		move.w	#$F,d1
00018828 3003                       		move.w	d3,d0
0001882A 0240 000F                  		andi.w	#$F,d0
0001882E 9240                       		sub.w	d0,d1
00018830 4E75                       		rts	
00018832                            ; ===========================================================================
00018832                            
00018832                            loc_14BD4:
00018832 2478 F796                  		movea.l	(v_collindex).w,a2
00018836 1032 0000                  		move.b	(a2,d0.w),d0
0001883A 0240 00FF                  		andi.w	#$FF,d0
0001883E 67E4                       		beq.s	loc_14BC6
00018840 45F9 0000 0000             		lea	(AngleMap).l,a2
00018846 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001884A E948                       		lsl.w	#4,d0
0001884C 3202                       		move.w	d2,d1
0001884E 0804 000C                  		btst	#$C,d4
00018852 6700                       		beq.s	loc_14C02
00018854 4641                       		not.w	d1
00018856 0614 0040                  		addi.b	#$40,(a4)
0001885A 4414                       		neg.b	(a4)
0001885C 0414 0040                  		subi.b	#$40,(a4)
00018860                            
00018860                            loc_14C02:
00018860 0804 000B                  		btst	#$B,d4
00018864 6700                       		beq.s	loc_14C0A
00018866 4414                       		neg.b	(a4)
00018868                            
00018868                            loc_14C0A:
00018868 0241 000F                  		andi.w	#$F,d1
0001886C D240                       		add.w	d0,d1
0001886E 45F9 0000 0000             		lea	(CollArray2).l,a2
00018874 1032 1000                  		move.b	(a2,d1.w),d0
00018878 4880                       		ext.w	d0
0001887A BD44                       		eor.w	d6,d4
0001887C 0804 000B                  		btst	#$B,d4
00018880 6700                       		beq.s	loc_14C26
00018882 4440                       		neg.w	d0
00018884                            
00018884                            loc_14C26:
00018884 4A40                       		tst.w	d0
00018886 679C                       		beq.s	loc_14BC6
00018888 6B00                       		bmi.s	loc_14C3C
0001888A 3203                       		move.w	d3,d1
0001888C 0241 000F                  		andi.w	#$F,d1
00018890 D041                       		add.w	d1,d0
00018892 323C 000F                  		move.w	#$F,d1
00018896 9240                       		sub.w	d0,d1
00018898 4E75                       		rts	
0001889A                            ; ===========================================================================
0001889A                            
0001889A                            loc_14C3C:
0001889A 3203                       		move.w	d3,d1
0001889C 0241 000F                  		andi.w	#$F,d1
000188A0 D041                       		add.w	d1,d0
000188A2 6A00 FF80                  		bpl.w	loc_14BC6
000188A6 4641                       		not.w	d1
000188A8 4E75                       		rts	
000188AA                            ; End of function FindWall2
000188AA                            ; End of function FindWall2
000188AA                            
000188AA                            ; ---------------------------------------------------------------------------
000188AA                            ; Unused floor/wall subroutine - logs something	to do with collision
000188AA                            ; ---------------------------------------------------------------------------
000188AA                            
000188AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188AA                            
000188AA                            
000188AA                            FloorLog_Unk:
000188AA 4E75                       		rts	
000188AC                            
000188AC 43F9 0000 0000             		lea	(CollArray1).l,a1
000188B2 45F9 0000 0000             		lea	(CollArray1).l,a2
000188B8 363C 00FF                  		move.w	#$FF,d3
000188BC                            
000188BC                            loc_14C5E:
000188BC 7A10                       		moveq	#$10,d5
000188BE 343C 000F                  		move.w	#$F,d2
000188C2                            
000188C2                            loc_14C64:
000188C2 7800                       		moveq	#0,d4
000188C4 323C 000F                  		move.w	#$F,d1
000188C8                            
000188C8                            loc_14C6A:
000188C8 3019                       		move.w	(a1)+,d0
000188CA EAA8                       		lsr.l	d5,d0
000188CC D944                       		addx.w	d4,d4
000188CE 51C9 FFF8                  		dbf	d1,loc_14C6A
000188D2                            
000188D2 34C4                       		move.w	d4,(a2)+
000188D4 92FC 0020                  		suba.w	#$20,a1
000188D8 5345                       		subq.w	#1,d5
000188DA 51CA FFE6                  		dbf	d2,loc_14C64
000188DE                            
000188DE D2FC 0020                  		adda.w	#$20,a1
000188E2 51CB FFD8                  		dbf	d3,loc_14C5E
000188E6                            
000188E6 43F9 0000 0000             		lea	(CollArray1).l,a1
000188EC 45F9 0000 0000             		lea	(CollArray2).l,a2
000188F2 6100                       		bsr.s	FloorLog_Unk2
000188F4 43F9 0000 0000             		lea	(CollArray1).l,a1
000188FA 45F9 0000 0000             		lea	(CollArray1).l,a2
00018900                            
00018900                            ; End of function FloorLog_Unk
00018900                            
00018900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018900                            
00018900                            
00018900                            FloorLog_Unk2:
00018900 363C 0FFF                  		move.w	#$FFF,d3
00018904                            
00018904                            loc_14CA6:
00018904 7400                       		moveq	#0,d2
00018906 323C 000F                  		move.w	#$F,d1
0001890A 3019                       		move.w	(a1)+,d0
0001890C 6700                       		beq.s	loc_14CD4
0001890E 6B00                       		bmi.s	loc_14CBE
00018910                            
00018910                            loc_14CB2:
00018910 E248                       		lsr.w	#1,d0
00018912 6400                       		bhs.s	loc_14CB8
00018914 5202                       		addq.b	#1,d2
00018916                            
00018916                            loc_14CB8:
00018916 51C9 FFF8                  		dbf	d1,loc_14CB2
0001891A                            
0001891A 6000                       		bra.s	loc_14CD6
0001891C                            ; ===========================================================================
0001891C                            
0001891C                            loc_14CBE:
0001891C 0C40 FFFF                  		cmpi.w	#-1,d0
00018920 6700                       		beq.s	loc_14CD0
00018922                            
00018922                            loc_14CC4:
00018922 E348                       		lsl.w	#1,d0
00018924 6400                       		bhs.s	loc_14CCA
00018926 5302                       		subq.b	#1,d2
00018928                            
00018928                            loc_14CCA:
00018928 51C9 FFF8                  		dbf	d1,loc_14CC4
0001892C                            
0001892C 6000                       		bra.s	loc_14CD6
0001892E                            ; ===========================================================================
0001892E                            
0001892E                            loc_14CD0:
0001892E 303C 0010                  		move.w	#$10,d0
00018932                            
00018932                            loc_14CD4:
00018932 3400                       		move.w	d0,d2
00018934                            
00018934                            loc_14CD6:
00018934 14C2                       		move.b	d2,(a2)+
00018936 51CB FFCC                  		dbf	d3,loc_14CA6
0001893A                            
0001893A 4E75                       		rts	
0001893C                            
0001893C                            ; End of function FloorLog_Unk2
0001893C                            
0001893C                            
0001893C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001893C                            
0001893C                            
0001893C                            Sonic_WalkSpeed:
0001893C 2628 0008                  		move.l	obX(a0),d3
00018940 2428 000C                  		move.l	obY(a0),d2
00018944 3228 0010                  		move.w	obVelX(a0),d1
00018948 48C1                       		ext.l	d1
0001894A E181                       		asl.l	#8,d1
0001894C D681                       		add.l	d1,d3
0001894E 3228 0012                  		move.w	obVelY(a0),d1
00018952 48C1                       		ext.l	d1
00018954 E181                       		asl.l	#8,d1
00018956 D481                       		add.l	d1,d2
00018958 4842                       		swap	d2
0001895A 4843                       		swap	d3
0001895C 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00018960 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018964 1200                       		move.b	d0,d1
00018966 0600 0020                  		addi.b	#$20,d0
0001896A 6A00                       		bpl.s	loc_14D1A
0001896C 1001                       		move.b	d1,d0
0001896E 6A00                       		bpl.s	loc_14D14
00018970 5300                       		subq.b	#1,d0
00018972                            
00018972                            loc_14D14:
00018972 0600 0020                  		addi.b	#$20,d0
00018976 6000                       		bra.s	loc_14D24
00018978                            ; ===========================================================================
00018978                            
00018978                            loc_14D1A:
00018978 1001                       		move.b	d1,d0
0001897A 6A00                       		bpl.s	loc_14D20
0001897C 5200                       		addq.b	#1,d0
0001897E                            
0001897E                            loc_14D20:
0001897E 0600 001F                  		addi.b	#$1F,d0
00018982                            
00018982                            loc_14D24:
00018982 0200 00C0                  		andi.b	#$C0,d0
00018986 6700 0000                  		beq.w	loc_14DF0
0001898A 0C00 0080                  		cmpi.b	#$80,d0
0001898E 6700 0000                  		beq.w	loc_14F7C
00018992 0201 0038                  		andi.b	#$38,d1
00018996 6600                       		bne.s	loc_14D3C
00018998 5042                       		addq.w	#8,d2
0001899A                            
0001899A                            loc_14D3C:
0001899A 0C00 0040                  		cmpi.b	#$40,d0
0001899E 6700 0000                  		beq.w	loc_1504A
000189A2 6000 0000                  		bra.w	loc_14EBC
000189A6                            
000189A6                            ; End of function Sonic_WalkSpeed
000189A6                            
000189A6                            
000189A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189A6                            
000189A6                            
000189A6                            sub_14D48:
000189A6 11C0 F768                  		move.b	d0,(v_anglebuffer).w
000189AA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000189AE 0600 0020                  		addi.b	#$20,d0
000189B2 0200 00C0                  		andi.b	#$C0,d0
000189B6 0C00 0040                  		cmpi.b	#$40,d0
000189BA 6700 0000                  		beq.w	loc_14FD6
000189BE 0C00 0080                  		cmpi.b	#$80,d0
000189C2 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000189C6 0C00 00C0                  		cmpi.b	#$C0,d0
000189CA 6700 0000                  		beq.w	sub_14E50
000189CE                            
000189CE                            ; End of function sub_14D48
000189CE                            
000189CE                            ; ---------------------------------------------------------------------------
000189CE                            ; Subroutine to	make Sonic land	on the floor after jumping
000189CE                            ; ---------------------------------------------------------------------------
000189CE                            
000189CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189CE                            
000189CE                            
000189CE                            Sonic_HitFloor:
000189CE 3428 000C                  		move.w	obY(a0),d2
000189D2 3628 0008                  		move.w	obX(a0),d3
000189D6 7000                       		moveq	#0,d0
000189D8 1028 0016                  		move.b	obHeight(a0),d0
000189DC 4880                       		ext.w	d0
000189DE D440                       		add.w	d0,d2
000189E0 1028 0017                  		move.b	obWidth(a0),d0
000189E4 4880                       		ext.w	d0
000189E6 D640                       		add.w	d0,d3
000189E8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000189EC 367C 0010                  		movea.w	#$10,a3
000189F0 3C3C 0000                  		move.w	#0,d6
000189F4 7A0D                       		moveq	#$D,d5
000189F6 6100 FC34                  		bsr.w	FindFloor
000189FA 3F01                       		move.w	d1,-(sp)
000189FC 3428 000C                  		move.w	obY(a0),d2
00018A00 3628 0008                  		move.w	obX(a0),d3
00018A04 7000                       		moveq	#0,d0
00018A06 1028 0016                  		move.b	obHeight(a0),d0
00018A0A 4880                       		ext.w	d0
00018A0C D440                       		add.w	d0,d2
00018A0E 1028 0017                  		move.b	obWidth(a0),d0
00018A12 4880                       		ext.w	d0
00018A14 9640                       		sub.w	d0,d3
00018A16 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018A1A 367C 0010                  		movea.w	#$10,a3
00018A1E 3C3C 0000                  		move.w	#0,d6
00018A22 7A0D                       		moveq	#$D,d5
00018A24 6100 FC06                  		bsr.w	FindFloor
00018A28 301F                       		move.w	(sp)+,d0
00018A2A 143C 0000                  		move.b	#0,d2
00018A2E                            
00018A2E                            loc_14DD0:
00018A2E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00018A32 B240                       		cmp.w	d0,d1
00018A34 6F00                       		ble.s	loc_14DDE
00018A36 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018A3A C141                       		exg	d0,d1
00018A3C                            
00018A3C                            loc_14DDE:
00018A3C 0803 0000                  		btst	#0,d3
00018A40 6700                       		beq.s	locret_14DE6
00018A42 1602                       		move.b	d2,d3
00018A44                            
00018A44                            locret_14DE6:
00018A44 4E75                       		rts	
00018A46                            
00018A46                            ; End of function Sonic_HitFloor
00018A46                            
00018A46                            ; ===========================================================================
00018A46 3428 000C                  		move.w	obY(a0),d2
00018A4A 3628 0008                  		move.w	obX(a0),d3
00018A4E                            
00018A4E                            loc_14DF0:
00018A4E 0642 000A                  		addi.w	#$A,d2
00018A52 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A56 367C 0010                  		movea.w	#$10,a3
00018A5A 3C3C 0000                  		move.w	#0,d6
00018A5E 7A0E                       		moveq	#$E,d5
00018A60 6100 FBCA                  		bsr.w	FindFloor
00018A64 143C 0000                  		move.b	#0,d2
00018A68                            
00018A68                            loc_14E0A:
00018A68 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018A6C 0803 0000                  		btst	#0,d3
00018A70 6700                       		beq.s	locret_14E16
00018A72 1602                       		move.b	d2,d3
00018A74                            
00018A74                            locret_14E16:
00018A74 4E75                       		rts	
00018A76                            
00018A76                            		include	"_incObj\sub ObjFloorDist.asm"
00018A76                            ; ---------------------------------------------------------------------------
00018A76                            ; Subroutine to find the distance of an object to the floor
00018A76                            
00018A76                            ; input:
00018A76                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00018A76                            
00018A76                            ; output:
00018A76                            ;	d1 = distance to the floor
00018A76                            ;	d3 = floor angle
00018A76                            ;	a1 = address within 256x256 mappings where object is standing
00018A76                            ;	     (refers to a 16x16 tile number)
00018A76                            ;	(a4) = floor angle
00018A76                            ; ---------------------------------------------------------------------------
00018A76                            
00018A76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A76                            
00018A76                            
00018A76                            ObjFloorDist:
00018A76 3628 0008                  		move.w	obX(a0),d3
00018A7A                            
00018A7A                            
00018A7A                            ObjFloorDist2:
00018A7A 3428 000C                  		move.w	obY(a0),d2
00018A7E 7000                       		moveq	#0,d0
00018A80 1028 0016                  		move.b	obHeight(a0),d0
00018A84 4880                       		ext.w	d0
00018A86 D440                       		add.w	d0,d2
00018A88 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A8C 18BC 0000                  		move.b	#0,(a4)
00018A90 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00018A94 3C3C 0000                  		move.w	#0,d6
00018A98 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00018A9A 6100 FB90                  		bsr.w	FindFloor
00018A9E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018AA2 0803 0000                  		btst	#0,d3
00018AA6 6700                       		beq.s	locret_14E4E
00018AA8 163C 0000                  		move.b	#0,d3
00018AAC                            
00018AAC                            	locret_14E4E:
00018AAC 4E75                       		rts	
00018AAE                            
00018AAE                            ; End of function ObjFloorDist2
00018AAE                            ; End of function ObjFloorDist2
00018AAE                            
00018AAE                            
00018AAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018AAE                            
00018AAE                            
00018AAE                            sub_14E50:
00018AAE 3428 000C                  		move.w	obY(a0),d2
00018AB2 3628 0008                  		move.w	obX(a0),d3
00018AB6 7000                       		moveq	#0,d0
00018AB8 1028 0017                  		move.b	obWidth(a0),d0
00018ABC 4880                       		ext.w	d0
00018ABE 9440                       		sub.w	d0,d2
00018AC0 1028 0016                  		move.b	obHeight(a0),d0
00018AC4 4880                       		ext.w	d0
00018AC6 D640                       		add.w	d0,d3
00018AC8 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018ACC 367C 0010                  		movea.w	#$10,a3
00018AD0 3C3C 0000                  		move.w	#0,d6
00018AD4 7A0E                       		moveq	#$E,d5
00018AD6 6100 FC92                  		bsr.w	FindWall
00018ADA 3F01                       		move.w	d1,-(sp)
00018ADC 3428 000C                  		move.w	obY(a0),d2
00018AE0 3628 0008                  		move.w	obX(a0),d3
00018AE4 7000                       		moveq	#0,d0
00018AE6 1028 0017                  		move.b	obWidth(a0),d0
00018AEA 4880                       		ext.w	d0
00018AEC D440                       		add.w	d0,d2
00018AEE 1028 0016                  		move.b	obHeight(a0),d0
00018AF2 4880                       		ext.w	d0
00018AF4 D640                       		add.w	d0,d3
00018AF6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018AFA 367C 0010                  		movea.w	#$10,a3
00018AFE 3C3C 0000                  		move.w	#0,d6
00018B02 7A0E                       		moveq	#$E,d5
00018B04 6100 FC64                  		bsr.w	FindWall
00018B08 301F                       		move.w	(sp)+,d0
00018B0A 143C 00C0                  		move.b	#-$40,d2
00018B0E 6000 FF1E                  		bra.w	loc_14DD0
00018B12                            
00018B12                            ; End of function sub_14E50
00018B12                            
00018B12                            
00018B12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B12                            
00018B12                            
00018B12                            sub_14EB4:
00018B12 3428 000C                  		move.w	obY(a0),d2
00018B16 3628 0008                  		move.w	obX(a0),d3
00018B1A                            
00018B1A                            loc_14EBC:
00018B1A 0643 000A                  		addi.w	#$A,d3
00018B1E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B22 367C 0010                  		movea.w	#$10,a3
00018B26 3C3C 0000                  		move.w	#0,d6
00018B2A 7A0E                       		moveq	#$E,d5
00018B2C 6100 FC3C                  		bsr.w	FindWall
00018B30 143C 00C0                  		move.b	#-$40,d2
00018B34 6000 FF32                  		bra.w	loc_14E0A
00018B38                            
00018B38                            ; End of function sub_14EB4
00018B38                            
00018B38                            ; ---------------------------------------------------------------------------
00018B38                            ; Subroutine to	detect when an object hits a wall to its right
00018B38                            ; ---------------------------------------------------------------------------
00018B38                            
00018B38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B38                            
00018B38                            
00018B38                            ObjHitWallRight:
00018B38 D668 0008                  		add.w	obX(a0),d3
00018B3C 3428 000C                  		move.w	obY(a0),d2
00018B40 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B44 18BC 0000                  		move.b	#0,(a4)
00018B48 367C 0010                  		movea.w	#$10,a3
00018B4C 3C3C 0000                  		move.w	#0,d6
00018B50 7A0E                       		moveq	#$E,d5
00018B52 6100 FC16                  		bsr.w	FindWall
00018B56 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018B5A 0803 0000                  		btst	#0,d3
00018B5E 6700                       		beq.s	locret_14F06
00018B60 163C 00C0                  		move.b	#-$40,d3
00018B64                            
00018B64                            locret_14F06:
00018B64 4E75                       		rts	
00018B66                            
00018B66                            ; End of function ObjHitWallRight
00018B66                            
00018B66                            ; ---------------------------------------------------------------------------
00018B66                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018B66                            ; touches them
00018B66                            ; ---------------------------------------------------------------------------
00018B66                            
00018B66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B66                            
00018B66                            
00018B66                            Sonic_DontRunOnWalls:
00018B66 3428 000C                  		move.w	obY(a0),d2
00018B6A 3628 0008                  		move.w	obX(a0),d3
00018B6E 7000                       		moveq	#0,d0
00018B70 1028 0016                  		move.b	obHeight(a0),d0
00018B74 4880                       		ext.w	d0
00018B76 9440                       		sub.w	d0,d2
00018B78 0A42 000F                  		eori.w	#$F,d2
00018B7C 1028 0017                  		move.b	obWidth(a0),d0
00018B80 4880                       		ext.w	d0
00018B82 D640                       		add.w	d0,d3
00018B84 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B88 367C FFF0                  		movea.w	#-$10,a3
00018B8C 3C3C 1000                  		move.w	#$1000,d6
00018B90 7A0E                       		moveq	#$E,d5
00018B92 6100 FA98                  		bsr.w	FindFloor
00018B96 3F01                       		move.w	d1,-(sp)
00018B98 3428 000C                  		move.w	obY(a0),d2
00018B9C 3628 0008                  		move.w	obX(a0),d3
00018BA0 7000                       		moveq	#0,d0
00018BA2 1028 0016                  		move.b	obHeight(a0),d0
00018BA6 4880                       		ext.w	d0
00018BA8 9440                       		sub.w	d0,d2
00018BAA 0A42 000F                  		eori.w	#$F,d2
00018BAE 1028 0017                  		move.b	obWidth(a0),d0
00018BB2 4880                       		ext.w	d0
00018BB4 9640                       		sub.w	d0,d3
00018BB6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018BBA 367C FFF0                  		movea.w	#-$10,a3
00018BBE 3C3C 1000                  		move.w	#$1000,d6
00018BC2 7A0E                       		moveq	#$E,d5
00018BC4 6100 FA66                  		bsr.w	FindFloor
00018BC8 301F                       		move.w	(sp)+,d0
00018BCA 143C 0080                  		move.b	#-$80,d2
00018BCE 6000 FE5E                  		bra.w	loc_14DD0
00018BD2                            ; End of function Sonic_DontRunOnWalls
00018BD2                            
00018BD2                            ; ===========================================================================
00018BD2 3428 000C                  		move.w	obY(a0),d2
00018BD6 3628 0008                  		move.w	obX(a0),d3
00018BDA                            
00018BDA                            loc_14F7C:
00018BDA 0442 000A                  		subi.w	#$A,d2
00018BDE 0A42 000F                  		eori.w	#$F,d2
00018BE2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BE6 367C FFF0                  		movea.w	#-$10,a3
00018BEA 3C3C 1000                  		move.w	#$1000,d6
00018BEE 7A0E                       		moveq	#$E,d5
00018BF0 6100 FA3A                  		bsr.w	FindFloor
00018BF4 143C 0080                  		move.b	#-$80,d2
00018BF8 6000 FE6E                  		bra.w	loc_14E0A
00018BFC                            
00018BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BFC                            
00018BFC                            
00018BFC                            ObjHitCeiling:
00018BFC 3428 000C                  		move.w	obY(a0),d2
00018C00 3628 0008                  		move.w	obX(a0),d3
00018C04 7000                       		moveq	#0,d0
00018C06 1028 0016                  		move.b	obHeight(a0),d0
00018C0A 4880                       		ext.w	d0
00018C0C 9440                       		sub.w	d0,d2
00018C0E 0A42 000F                  		eori.w	#$F,d2
00018C12 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018C16 367C FFF0                  		movea.w	#-$10,a3
00018C1A 3C3C 1000                  		move.w	#$1000,d6
00018C1E 7A0E                       		moveq	#$E,d5
00018C20 6100 FA0A                  		bsr.w	FindFloor
00018C24 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018C28 0803 0000                  		btst	#0,d3
00018C2C 6700                       		beq.s	locret_14FD4
00018C2E 163C 0080                  		move.b	#-$80,d3
00018C32                            
00018C32                            locret_14FD4:
00018C32 4E75                       		rts	
00018C34                            ; End of function ObjHitCeiling
00018C34                            
00018C34                            ; ===========================================================================
00018C34                            
00018C34                            loc_14FD6:
00018C34 3428 000C                  		move.w	obY(a0),d2
00018C38 3628 0008                  		move.w	obX(a0),d3
00018C3C 7000                       		moveq	#0,d0
00018C3E 1028 0017                  		move.b	obWidth(a0),d0
00018C42 4880                       		ext.w	d0
00018C44 9440                       		sub.w	d0,d2
00018C46 1028 0016                  		move.b	obHeight(a0),d0
00018C4A 4880                       		ext.w	d0
00018C4C 9640                       		sub.w	d0,d3
00018C4E 0A43 000F                  		eori.w	#$F,d3
00018C52 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018C56 367C FFF0                  		movea.w	#-$10,a3
00018C5A 3C3C 0800                  		move.w	#$800,d6
00018C5E 7A0E                       		moveq	#$E,d5
00018C60 6100 FB08                  		bsr.w	FindWall
00018C64 3F01                       		move.w	d1,-(sp)
00018C66 3428 000C                  		move.w	obY(a0),d2
00018C6A 3628 0008                  		move.w	obX(a0),d3
00018C6E 7000                       		moveq	#0,d0
00018C70 1028 0017                  		move.b	obWidth(a0),d0
00018C74 4880                       		ext.w	d0
00018C76 D440                       		add.w	d0,d2
00018C78 1028 0016                  		move.b	obHeight(a0),d0
00018C7C 4880                       		ext.w	d0
00018C7E 9640                       		sub.w	d0,d3
00018C80 0A43 000F                  		eori.w	#$F,d3
00018C84 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018C88 367C FFF0                  		movea.w	#-$10,a3
00018C8C 3C3C 0800                  		move.w	#$800,d6
00018C90 7A0E                       		moveq	#$E,d5
00018C92 6100 FAD6                  		bsr.w	FindWall
00018C96 301F                       		move.w	(sp)+,d0
00018C98 143C 0040                  		move.b	#$40,d2
00018C9C 6000 FD90                  		bra.w	loc_14DD0
00018CA0                            
00018CA0                            ; ---------------------------------------------------------------------------
00018CA0                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018CA0                            ; ---------------------------------------------------------------------------
00018CA0                            
00018CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018CA0                            
00018CA0                            
00018CA0                            Sonic_HitWall:
00018CA0 3428 000C                  		move.w	obY(a0),d2
00018CA4 3628 0008                  		move.w	obX(a0),d3
00018CA8                            
00018CA8                            loc_1504A:
00018CA8 0443 000A                  		subi.w	#$A,d3
00018CAC 0A43 000F                  		eori.w	#$F,d3
00018CB0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018CB4 367C FFF0                  		movea.w	#-$10,a3
00018CB8 3C3C 0800                  		move.w	#$800,d6
00018CBC 7A0E                       		moveq	#$E,d5
00018CBE 6100 FAAA                  		bsr.w	FindWall
00018CC2 143C 0040                  		move.b	#$40,d2
00018CC6 6000 FDA0                  		bra.w	loc_14E0A
00018CCA                            ; End of function Sonic_HitWall
00018CCA                            
00018CCA                            ; ---------------------------------------------------------------------------
00018CCA                            ; Subroutine to	detect when an object hits a wall to its left
00018CCA                            ; ---------------------------------------------------------------------------
00018CCA                            
00018CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018CCA                            
00018CCA                            
00018CCA                            ObjHitWallLeft:
00018CCA D668 0008                  		add.w	obX(a0),d3
00018CCE 3428 000C                  		move.w	obY(a0),d2
00018CD2                            		; Engine bug: colliding with left walls is erratic with this function.
00018CD2                            		; The cause is this: a missing instruction to flip collision on the found
00018CD2                            		; 16x16 block; this one:
00018CD2                            		;eori.w	#$F,d3
00018CD2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018CD6 18BC 0000                  		move.b	#0,(a4)
00018CDA 367C FFF0                  		movea.w	#-$10,a3
00018CDE 3C3C 0800                  		move.w	#$800,d6
00018CE2 7A0E                       		moveq	#$E,d5
00018CE4 6100 FA84                  		bsr.w	FindWall
00018CE8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018CEC 0803 0000                  		btst	#0,d3
00018CF0 6700                       		beq.s	locret_15098
00018CF2 163C 0040                  		move.b	#$40,d3
00018CF6                            
00018CF6                            locret_15098:
00018CF6 4E75                       		rts	
00018CF8                            ; End of function ObjHitWallLeft
00018CF8                            
00018CF8                            ; ===========================================================================
00018CF8                            
00018CF8                            		include	"_incObj\66 Rotating Junction.asm"
00018CF8                            ; ---------------------------------------------------------------------------
00018CF8                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018CF8                            ; ---------------------------------------------------------------------------
00018CF8                            
00018CF8                            Junction:
00018CF8 7000                       		moveq	#0,d0
00018CFA 1028 0024                  		move.b	obRoutine(a0),d0
00018CFE 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018D02 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018D06                            ; ===========================================================================
00018D06 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018D08 0000                       		dc.w Jun_Action-Jun_Index
00018D0A 0000                       		dc.w Jun_Display-Jun_Index
00018D0C 0000                       		dc.w Jun_Release-Jun_Index
00018D0E                            
00018D0E =00000034                  jun_frame:	equ $34		; current frame
00018D0E =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018D0E =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018D0E                            ; ===========================================================================
00018D0E                            
00018D0E                            Jun_Main:	; Routine 0
00018D0E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018D12 323C 0001                  		move.w	#1,d1
00018D16 2248                       		movea.l	a0,a1
00018D18 6000                       		bra.s	@makeitem
00018D1A                            ; ===========================================================================
00018D1A                            
00018D1A                            	@repeat:
00018D1A 4EB9 0000 FDF2             		jsr	FindFreeObj
00018D20 6600                       		bne.s	@fail
00018D22 12BC 0066                  		move.b	#id_Junction,0(a1)
00018D26 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018D2A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018D30 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018D36 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018D3C 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00018D42                            
00018D42                            @makeitem:
00018D42 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018D4A 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00018D50 0029 0004 0001             		ori.b	#4,obRender(a1)
00018D56 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018D5C                            
00018D5C                            	@fail:
00018D5C 51C9 FFBC                  		dbf	d1,@repeat
00018D60                            
00018D60 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018D66 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018D6C 317C 003C 0030             		move.w	#$3C,$30(a0)
00018D72 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018D78 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018D7E                            
00018D7E                            Jun_Action:	; Routine 2
00018D7E 6100 0000                  		bsr.w	Jun_ChkSwitch
00018D82 4A28 0001                  		tst.b	obRender(a0)
00018D86 6A00 0000                  		bpl.w	Jun_Display
00018D8A 323C 0030                  		move.w	#$30,d1
00018D8E 3401                       		move.w	d1,d2
00018D90 3602                       		move.w	d2,d3
00018D92 5243                       		addq.w	#1,d3
00018D94 3828 0008                  		move.w	obX(a0),d4
00018D98 6100 900A                  		bsr.w	SolidObject
00018D9C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018DA2 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018DA6                            
00018DA6 43F8 D000                  		lea	(v_player).w,a1
00018DAA 720E                       		moveq	#$E,d1
00018DAC 3029 0008                  		move.w	obX(a1),d0
00018DB0 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018DB4 6500                       		bcs.s	@isleft		; if yes, branch
00018DB6 7207                       		moveq	#7,d1		
00018DB8                            
00018DB8                            	@isleft:
00018DB8 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018DBC 6600                       		bne.s	Jun_Display	; if not, branch
00018DBE                            
00018DBE 1141 0032                  		move.b	d1,$32(a0)
00018DC2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018DC6 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018DCC 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018DD2 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018DD8 337C 0000 0010             		move.w	#0,obVelX(a1)
00018DDE 337C 0000 0012             		move.w	#0,obVelY(a1)
00018DE4 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018DEA 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018DF0 08E9 0001 0022             		bset	#1,obStatus(a1)
00018DF6 3429 0008                  		move.w	obX(a1),d2
00018DFA 3629 000C                  		move.w	obY(a1),d3
00018DFE 6100 0000                  		bsr.w	Jun_ChgPos
00018E02 D569 0008                  		add.w	d2,obX(a1)
00018E06 D769 000C                  		add.w	d3,obY(a1)
00018E0A E0E9 0008                  		asr	obX(a1)
00018E0E E0E9 000C                  		asr	obY(a1)
00018E12                            
00018E12                            Jun_Display:	; Routine 4
00018E12 6000 8AF8                  		bra.w	RememberState
00018E16                            ; ===========================================================================
00018E16                            
00018E16                            Jun_Release:	; Routine 6
00018E16 1028 001A                  		move.b	obFrame(a0),d0
00018E1A 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018E1E 6700                       		beq.s	@release	; if yes, branch
00018E20 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018E24 6600                       		bne.s	@dontrelease	; if not, branch
00018E26                            
00018E26                            	@release:
00018E26 B028 0032                  		cmp.b	$32(a0),d0
00018E2A 6700                       		beq.s	@dontrelease
00018E2C 43F8 D000                  		lea	(v_player).w,a1
00018E30 337C 0000 0010             		move.w	#0,obVelX(a1)
00018E36 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018E3C 0C00 0004                  		cmpi.b	#4,d0
00018E40 6700                       		beq.s	@isdown
00018E42 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018E48 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018E4E                            
00018E4E                            	@isdown:
00018E4E 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018E52 5928 0024                  		subq.b	#4,obRoutine(a0)
00018E56                            
00018E56                            	@dontrelease:
00018E56 6100                       		bsr.s	Jun_ChkSwitch
00018E58 6100                       		bsr.s	Jun_ChgPos
00018E5A 6000 8AB0                  		bra.w	RememberState
00018E5E                            
00018E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018E5E                            
00018E5E                            
00018E5E                            Jun_ChkSwitch:
00018E5E 45F8 F7E0                  		lea	(f_switch).w,a2
00018E62 7000                       		moveq	#0,d0
00018E64 1028 0038                  		move.b	jun_switch(a0),d0
00018E68 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018E6E 6700                       		beq.s	@unpressed	; if not, branch
00018E70                            
00018E70 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018E74 6600                       		bne.s	@animate	; if yes, branch
00018E76 4428 0034                  		neg.b	jun_frame(a0)
00018E7A 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018E80 6000                       		bra.s	@animate
00018E82                            ; ===========================================================================
00018E82                            
00018E82                            @unpressed:
00018E82 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018E86                            
00018E86                            @animate:
00018E86 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018E8A 6A00                       		bpl.s	@nochange	; if time remains, branch
00018E8C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018E92 1228 0034                  		move.b	jun_frame(a0),d1
00018E96 1028 001A                  		move.b	obFrame(a0),d0
00018E9A D001                       		add.b	d1,d0
00018E9C 0200 000F                  		andi.b	#$F,d0
00018EA0 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018EA4                            
00018EA4                            	@nochange:
00018EA4 4E75                       		rts	
00018EA6                            ; End of function Jun_ChkSwitch
00018EA6                            
00018EA6                            
00018EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018EA6                            
00018EA6                            
00018EA6                            Jun_ChgPos:
00018EA6 43F8 D000                  		lea	(v_player).w,a1
00018EAA 7000                       		moveq	#0,d0
00018EAC 1028 001A                  		move.b	obFrame(a0),d0
00018EB0 D040                       		add.w	d0,d0
00018EB2 45FB 0000                  		lea	@data(pc,d0.w),a2
00018EB6 101A                       		move.b	(a2)+,d0
00018EB8 4880                       		ext.w	d0
00018EBA D068 0008                  		add.w	obX(a0),d0
00018EBE 3340 0008                  		move.w	d0,obX(a1)
00018EC2 101A                       		move.b	(a2)+,d0
00018EC4 4880                       		ext.w	d0
00018EC6 D068 000C                  		add.w	obY(a0),d0
00018ECA 3340 000C                  		move.w	d0,obY(a1)
00018ECE 4E75                       		rts	
00018ED0                            
00018ED0                            
00018ED0 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018ED4 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018ED8 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018EDC 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018EE0 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018EE4 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018EE8 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018EEC E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018EEC E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018EF0                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018EF0                            ; ---------------------------------------------------------------------------
00018EF0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018EF0                            ; ---------------------------------------------------------------------------
00018EF0                            Map_Jun_internal:
00018EF0 0000                       		dc.w @gap0-Map_Jun_internal
00018EF2 0000                       		dc.w @gap1-Map_Jun_internal
00018EF4 0000                       		dc.w @gap2-Map_Jun_internal
00018EF6 0000                       		dc.w @gap3-Map_Jun_internal
00018EF8 0000                       		dc.w @gap4-Map_Jun_internal
00018EFA 0000                       		dc.w @gap5-Map_Jun_internal
00018EFC 0000                       		dc.w @gap6-Map_Jun_internal
00018EFE 0000                       		dc.w @gap7-Map_Jun_internal
00018F00 0000                       		dc.w @gap8-Map_Jun_internal
00018F02 0000                       		dc.w @gap9-Map_Jun_internal
00018F04 0000                       		dc.w @gapA-Map_Jun_internal
00018F06 0000                       		dc.w @gapB-Map_Jun_internal
00018F08 0000                       		dc.w @gapC-Map_Jun_internal
00018F0A 0000                       		dc.w @gapD-Map_Jun_internal
00018F0C 0000                       		dc.w @gapE-Map_Jun_internal
00018F0E 0000                       		dc.w @gapF-Map_Jun_internal
00018F10 0000                       		dc.w @circle-Map_Jun_internal
00018F12 06                         @gap0:		dc.b 6
00018F13 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018F18 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018F1D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018F22 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018F27 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018F2C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018F31 06                         @gap1:		dc.b 6
00018F32 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018F37 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018F3C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018F41 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018F46 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018F4B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018F50 06                         @gap2:		dc.b 6
00018F51 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018F56 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018F5B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018F60 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018F65 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018F6A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018F6F 06                         @gap3:		dc.b 6
00018F70 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018F75 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018F7A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018F7F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018F84 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018F89 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018F8E 06                         @gap4:		dc.b 6
00018F8F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018F94 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018F99 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018F9E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018FA3 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018FA8 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018FAD 06                         @gap5:		dc.b 6
00018FAE 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018FB3 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018FB8 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018FBD 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018FC2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018FC7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018FCC 06                         @gap6:		dc.b 6
00018FCD 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018FD2 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018FD7 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018FDC 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018FE1 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018FE6 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018FEB 06                         @gap7:		dc.b 6
00018FEC 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018FF1 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018FF6 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018FFB F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00019000 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00019005 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001900A 06                         @gap8:		dc.b 6
0001900B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00019010 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00019015 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001901A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001901F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00019024 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00019029 06                         @gap9:		dc.b 6
0001902A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001902F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00019034 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00019039 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001903E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00019043 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00019048 06                         @gapA:		dc.b 6
00019049 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001904E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00019053 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00019058 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001905D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00019062 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00019067 06                         @gapB:		dc.b 6
00019068 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001906D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00019072 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00019077 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001907C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00019081 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00019086 06                         @gapC:		dc.b 6
00019087 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001908C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00019091 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00019096 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001909B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000190A0 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000190A5 06                         @gapD:		dc.b 6
000190A6 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000190AB D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000190B0 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000190B5 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000190BA E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000190BF E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000190C4 06                         @gapE:		dc.b 6
000190C5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000190CA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000190CF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000190D4 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000190D9 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000190DE E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000190E3 06                         @gapF:		dc.b 6
000190E4 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000190E9 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000190EE DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000190F3 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000190F8 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000190FD F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00019102 0C                         @circle:	dc.b $C
00019103 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00019108 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001910D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00019112 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00019117 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001911C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00019121 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00019126 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001912B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00019130 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00019135 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001913A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00019140 00                         		even
00019140 00                         		even
00019140                            		include	"_incObj\67 Running Disc.asm"
00019140                            ; ---------------------------------------------------------------------------
00019140                            ; Object 67 - disc that	you run	around (SBZ)
00019140                            ; ---------------------------------------------------------------------------
00019140                            
00019140                            RunningDisc:
00019140 7000                       		moveq	#0,d0
00019142 1028 0024                  		move.b	obRoutine(a0),d0
00019146 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
0001914A 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
0001914E                            ; ===========================================================================
0001914E 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00019150 0000                       		dc.w Disc_Action-Disc_Index
00019152                            
00019152 =00000032                  disc_origX:	equ $32		; original x-axis position
00019152 =00000030                  disc_origY:	equ $30		; original y-axis position
00019152                            ; ===========================================================================
00019152                            
00019152                            Disc_Main:	; Routine 0
00019152 5428 0024                  		addq.b	#2,obRoutine(a0)
00019156 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
0001915E 317C C344 0002             		move.w	#$C344,obGfx(a0)
00019164 117C 0004 0001             		move.b	#4,obRender(a0)
0001916A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019170 117C 0008 0014             		move.b	#8,obActWid(a0)
00019176 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001917C 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00019182 117C 0018 0034             		move.b	#$18,$34(a0)
00019188 117C 0048 0038             		move.b	#$48,$38(a0)
0001918E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00019192 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00019196 6700                       		beq.s	@typeis0	; branch if 0
00019198 117C 0010 0034             		move.b	#$10,$34(a0)
0001919E 117C 0038 0038             		move.b	#$38,$38(a0)
000191A4                            
000191A4                            	@typeis0:
000191A4 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000191A8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000191AC 4881                       		ext.w	d1
000191AE E741                       		asl.w	#3,d1
000191B0 3141 0036                  		move.w	d1,$36(a0)
000191B4 1028 0022                  		move.b	obStatus(a0),d0
000191B8 E418                       		ror.b	#2,d0
000191BA 0200 00C0                  		andi.b	#$C0,d0
000191BE 1140 0026                  		move.b	d0,obAngle(a0)
000191C2                            
000191C2                            Disc_Action:	; Routine 2
000191C2 6100 0000                  		bsr.w	Disc_MoveSonic
000191C6 6100 0000                  		bsr.w	Disc_MoveSpot
000191CA 6000 0000                  		bra.w	Disc_ChkDel
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            Disc_MoveSonic:
000191CE 7400                       		moveq	#0,d2
000191D0 1428 0038                  		move.b	$38(a0),d2
000191D4 3602                       		move.w	d2,d3
000191D6 D643                       		add.w	d3,d3
000191D8 43F8 D000                  		lea	(v_player).w,a1
000191DC 3029 0008                  		move.w	obX(a1),d0
000191E0 9068 0032                  		sub.w	disc_origX(a0),d0
000191E4 D042                       		add.w	d2,d0
000191E6 B043                       		cmp.w	d3,d0
000191E8 6400                       		bcc.s	loc_155A8
000191EA 3229 000C                  		move.w	obY(a1),d1
000191EE 9268 0030                  		sub.w	disc_origY(a0),d1
000191F2 D242                       		add.w	d2,d1
000191F4 B243                       		cmp.w	d3,d1
000191F6 6400                       		bcc.s	loc_155A8
000191F8 0829 0001 0022             		btst	#1,obStatus(a1)
000191FE 6700                       		beq.s	loc_155B8
00019200 4228 003A                  		clr.b	$3A(a0)
00019204 4E75                       		rts	
00019206                            ; ===========================================================================
00019206                            
00019206                            loc_155A8:
00019206 4A28 003A                  		tst.b	$3A(a0)
0001920A 6700                       		beq.s	locret_155B6
0001920C 4229 0038                  		clr.b	$38(a1)
00019210 4228 003A                  		clr.b	$3A(a0)
00019214                            
00019214                            locret_155B6:
00019214 4E75                       		rts	
00019216                            ; ===========================================================================
00019216                            
00019216                            loc_155B8:
00019216 4A28 003A                  		tst.b	$3A(a0)
0001921A 6600                       		bne.s	loc_155E2
0001921C 117C 0001 003A             		move.b	#1,$3A(a0)
00019222 0829 0002 0022             		btst	#2,obStatus(a1)
00019228 6600                       		bne.s	loc_155D0
0001922A 4229 001C                  		clr.b	obAnim(a1)
0001922E                            
0001922E                            loc_155D0:
0001922E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019234 137C 0001 001D             		move.b	#1,obNextAni(a1)
0001923A 137C 0001 0038             		move.b	#1,$38(a1)
00019240                            
00019240                            loc_155E2:
00019240 3029 0020                  		move.w	obInertia(a1),d0
00019244 4A68 0036                  		tst.w	$36(a0)
00019248 6A00                       		bpl.s	loc_15608
0001924A 0C40 FC00                  		cmpi.w	#-$400,d0
0001924E 6F00                       		ble.s	loc_155FA
00019250 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00019256 4E75                       		rts	
00019258                            ; ===========================================================================
00019258                            
00019258                            loc_155FA:
00019258 0C40 F100                  		cmpi.w	#-$F00,d0
0001925C 6C00                       		bge.s	locret_15606
0001925E 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00019264                            
00019264                            locret_15606:
00019264 4E75                       		rts	
00019266                            ; ===========================================================================
00019266                            
00019266                            loc_15608:
00019266 0C40 0400                  		cmpi.w	#$400,d0
0001926A 6C00                       		bge.s	loc_15616
0001926C 337C 0400 0020             		move.w	#$400,obInertia(a1)
00019272 4E75                       		rts	
00019274                            ; ===========================================================================
00019274                            
00019274                            loc_15616:
00019274 0C40 0F00                  		cmpi.w	#$F00,d0
00019278 6F00                       		ble.s	locret_15622
0001927A 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00019280                            
00019280                            locret_15622:
00019280 4E75                       		rts	
00019282                            ; ===========================================================================
00019282                            
00019282                            Disc_MoveSpot:
00019282 3028 0036                  		move.w	$36(a0),d0
00019286 D168 0026                  		add.w	d0,obAngle(a0)
0001928A 1028 0026                  		move.b	obAngle(a0),d0
0001928E 4EB9 0000 3D28             		jsr	(CalcSine).l
00019294 3428 0030                  		move.w	disc_origY(a0),d2
00019298 3628 0032                  		move.w	disc_origX(a0),d3
0001929C 7800                       		moveq	#0,d4
0001929E 1828 0034                  		move.b	$34(a0),d4
000192A2 E14C                       		lsl.w	#8,d4
000192A4 2A04                       		move.l	d4,d5
000192A6 C9C0                       		muls.w	d0,d4
000192A8 4844                       		swap	d4
000192AA CBC1                       		muls.w	d1,d5
000192AC 4845                       		swap	d5
000192AE D842                       		add.w	d2,d4
000192B0 DA43                       		add.w	d3,d5
000192B2 3144 000C                  		move.w	d4,obY(a0)
000192B6 3145 0008                  		move.w	d5,obX(a0)
000192BA 4E75                       		rts	
000192BC                            ; ===========================================================================
000192BC                            
000192BC                            Disc_ChkDel:
000192D8 4EF9 0000 F858             		jmp	(DisplaySprite).l
000192DE                            
000192DE                            	@delete:
000192DE 4EF9 0000 F898             		jmp	(DeleteObject).l
000192DE 4EF9 0000 F898             		jmp	(DeleteObject).l
000192E4                            Map_Disc:	include	"_maps\Running Disc.asm"
000192E4                            ; ---------------------------------------------------------------------------
000192E4                            ; Sprite mappings - disc that you run around (SBZ)
000192E4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000192E4                            ; part of the level tiles.)
000192E4                            ; ---------------------------------------------------------------------------
000192E4                            Map_Disc_internal:
000192E4 0000                       		dc.w @spot-Map_Disc_internal
000192E6 01                         @spot:		dc.b 1
000192E7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000192EC                            		even
000192EC                            		even
000192EC                            		include	"_incObj\68 Conveyor Belt.asm"
000192EC                            ; ---------------------------------------------------------------------------
000192EC                            ; Object 68 - conveyor belts (SBZ)
000192EC                            ; ---------------------------------------------------------------------------
000192EC                            
000192EC                            Conveyor:
000192EC 7000                       		moveq	#0,d0
000192EE 1028 0024                  		move.b	obRoutine(a0),d0
000192F2 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
000192F6 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
000192FA                            ; ===========================================================================
000192FA 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
000192FC 0000                       		dc.w Conv_Action-Conv_Index
000192FE                            
000192FE =00000036                  conv_speed:	equ $36
000192FE =00000038                  conv_width:	equ $38
000192FE                            ; ===========================================================================
000192FE                            
000192FE                            Conv_Main:	; Routine 0
000192FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00019302 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00019308 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001930C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00019310 6700                       		beq.s	@typeis0	; if zero, branch
00019312 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00019318                            
00019318                            	@typeis0:
00019318 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001931C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00019320 4881                       		ext.w	d1
00019322 E841                       		asr.w	#4,d1
00019324 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00019328                            
00019328                            Conv_Action:	; Routine 2
00019328 6100                       		bsr.s	@movesonic
00019346 4E75                       		rts	
00019348                            
00019348                            	@delete:
00019348 4EF9 0000 F898             		jmp	(DeleteObject).l
0001934E                            ; ===========================================================================
0001934E                            
0001934E                            @movesonic:
0001934E 7400                       		moveq	#0,d2
00019350 1428 0038                  		move.b	conv_width(a0),d2
00019354 3602                       		move.w	d2,d3
00019356 D643                       		add.w	d3,d3
00019358 43F8 D000                  		lea	(v_player).w,a1
0001935C 3029 0008                  		move.w	obX(a1),d0
00019360 9068 0008                  		sub.w	obX(a0),d0
00019364 D042                       		add.w	d2,d0
00019366 B043                       		cmp.w	d3,d0
00019368 6400                       		bcc.s	@notonconveyor
0001936A 3229 000C                  		move.w	obY(a1),d1
0001936E 9268 000C                  		sub.w	obY(a0),d1
00019372 0641 0030                  		addi.w	#$30,d1
00019376 0C41 0030                  		cmpi.w	#$30,d1
0001937A 6400                       		bcc.s	@notonconveyor
0001937C 0829 0001 0022             		btst	#1,obStatus(a1)
00019382 6600                       		bne.s	@notonconveyor
00019384 3028 0036                  		move.w	conv_speed(a0),d0
00019388 D169 0008                  		add.w	d0,obX(a1)
0001938C                            
0001938C                            	@notonconveyor:
0001938C 4E75                       		rts	
0001938C 4E75                       		rts	
0001938E                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001938E                            ; ---------------------------------------------------------------------------
0001938E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001938E                            ; ---------------------------------------------------------------------------
0001938E                            
0001938E                            SpinPlatform:
0001938E 7000                       		moveq	#0,d0
00019390 1028 0024                  		move.b	obRoutine(a0),d0
00019394 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00019398 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001939C                            ; ===========================================================================
0001939C 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001939E 0000                       		dc.w Spin_Trapdoor-Spin_Index
000193A0 0000                       		dc.w Spin_Spinner-Spin_Index
000193A2                            
000193A2 =00000030                  spin_timer:	equ $30		; time counter until change
000193A2 =00000032                  spin_timelen:	equ $32		; time between changes (general)
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            Spin_Main:	; Routine 0
000193A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000193A6 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000193AE 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000193B4 0028 0004 0001             		ori.b	#4,obRender(a0)
000193BA 117C 0080 0014             		move.b	#$80,obActWid(a0)
000193C0 7000                       		moveq	#0,d0
000193C2 1028 0028                  		move.b	obSubtype(a0),d0
000193C6 0240 000F                  		andi.w	#$F,d0
000193CA C0FC 003C                  		mulu.w	#$3C,d0
000193CE 3140 0032                  		move.w	d0,spin_timelen(a0)
000193D2 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000193D6 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000193D8                            
000193D8 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000193DC 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000193E4 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000193EA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000193F0 117C 0002 001C             		move.b	#2,obAnim(a0)
000193F6 7000                       		moveq	#0,d0
000193F8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000193FC 3200                       		move.w	d0,d1
000193FE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019402 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00019406 3140 0030                  		move.w	d0,spin_timer(a0)
0001940A 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001940E 0241 0070                  		andi.w	#$70,d1
00019412 0641 0010                  		addi.w	#$10,d1
00019416 E549                       		lsl.w	#2,d1
00019418 5341                       		subq.w	#1,d1
0001941A 3141 0036                  		move.w	d1,$36(a0)
0001941E 6000                       		bra.s	Spin_Spinner
00019420                            ; ===========================================================================
00019420                            
00019420                            Spin_Trapdoor:	; Routine 2
00019420 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00019424 6A00                       		bpl.s	@animate	; if time remains, branch
00019426                            
00019426 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001942C 0868 0000 001C             		bchg	#0,obAnim(a0)
00019432 4A28 0001                  		tst.b	obRender(a0)
00019436 6A00                       		bpl.s	@animate
00019442                            
00019442                            	@animate:
00019442 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00019448 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001944E 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00019452 6600                       		bne.s	@notsolid	; if not, branch
00019454 323C 004B                  		move.w	#$4B,d1
00019458 343C 000C                  		move.w	#$C,d2
0001945C 3602                       		move.w	d2,d3
0001945E 5243                       		addq.w	#1,d3
00019460 3828 0008                  		move.w	obX(a0),d4
00019464 6100 893E                  		bsr.w	SolidObject
00019468 6000 84A2                  		bra.w	RememberState
0001946C                            ; ===========================================================================
0001946C                            
0001946C                            @notsolid:
0001946C 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00019472 6700                       		beq.s	@display	; if not, branch
00019474 43F8 D000                  		lea	(v_player).w,a1
00019478 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001947E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019484 4228 0025                  		clr.b	obSolid(a0)
00019488                            
00019488                            	@display:
00019488 6000 8482                  		bra.w	RememberState
0001948C                            ; ===========================================================================
0001948C                            
0001948C                            Spin_Spinner:	; Routine 4
0001948C 3038 FE04                  		move.w	(v_framecount).w,d0
00019490 C068 0036                  		and.w	$36(a0),d0
00019494 6600                       		bne.s	@delay
00019496 117C 0001 0034             		move.b	#1,$34(a0)
0001949C                            
0001949C                            	@delay:
0001949C 4A28 0034                  		tst.b	$34(a0)
000194A0 6700                       		beq.s	@animate
000194A2 5368 0030                  		subq.w	#1,spin_timer(a0)
000194A6 6A00                       		bpl.s	@animate
000194A8 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000194AE 4228 0034                  		clr.b	$34(a0)
000194B2 0868 0000 001C             		bchg	#0,obAnim(a0)
000194B8                            
000194B8                            	@animate:
000194B8 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000194BE 4EB9 0000 C90E             		jsr	(AnimateSprite).l
000194C4 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000194C8 6600                       		bne.s	@notsolid2	; if not, branch
000194CA 323C 001B                  		move.w	#$1B,d1
000194CE 343C 0007                  		move.w	#7,d2
000194D2 3602                       		move.w	d2,d3
000194D4 5243                       		addq.w	#1,d3
000194D6 3828 0008                  		move.w	obX(a0),d4
000194DA 6100 88C8                  		bsr.w	SolidObject
000194DE 6000 842C                  		bra.w	RememberState
000194E2                            ; ===========================================================================
000194E2                            
000194E2                            @notsolid2:
000194E2 0828 0003 0022             		btst	#3,obStatus(a0)
000194E8 6700                       		beq.s	@display
000194EA 43F8 D000                  		lea	(v_player).w,a1
000194EE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000194F4 08A8 0003 0022             		bclr	#3,obStatus(a0)
000194FA 4228 0025                  		clr.b	obSolid(a0)
000194FE                            
000194FE                            	@display:
000194FE 6000 840C                  		bra.w	RememberState
000194FE 6000 840C                  		bra.w	RememberState
00019502                            		include	"_anim\SBZ Spinning Platforms.asm"
00019502                            ; ---------------------------------------------------------------------------
00019502                            ; Animation script - trapdoor (SBZ)
00019502                            ; ---------------------------------------------------------------------------
00019502 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00019504 0000                       		dc.w @trapclose-Ani_Spin
00019506 0000                       		dc.w @spin1-Ani_Spin
00019508 0000                       		dc.w @spin2-Ani_Spin
0001950A 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00019510 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00019516 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001952A 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001953E                            		even
0001953E                            		even
0001953E                            Map_Trap:	include	"_maps\Trapdoor.asm"
0001953E                            ; ---------------------------------------------------------------------------
0001953E                            ; Sprite mappings - trapdoor (SBZ)
0001953E                            ; ---------------------------------------------------------------------------
0001953E                            Map_Trap_internal:
0001953E 0000                       		dc.w @closed-Map_Trap_internal
00019540 0000                       		dc.w @half-Map_Trap_internal
00019542 0000                       		dc.w @open-Map_Trap_internal
00019544 04                         @closed:	dc.b 4
00019545 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001954A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001954F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00019554 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00019559 08                         @half:		dc.b 8
0001955A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001955F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00019564 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00019569 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001956E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00019573 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00019578 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001957D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00019582 04                         @open:		dc.b 4
00019583 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00019588 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001958D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00019592 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00019598 00                         		even
00019598 00                         		even
00019598                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00019598                            ; ---------------------------------------------------------------------------
00019598                            ; Sprite mappings - spinning platforms (SBZ)
00019598                            ; ---------------------------------------------------------------------------
00019598                            Map_Spin_internal:
00019598 0000                       		dc.w @flat-Map_Spin_internal
0001959A 0000                       		dc.w @spin1-Map_Spin_internal
0001959C 0000                       		dc.w @spin2-Map_Spin_internal
0001959E 0000                       		dc.w @spin3-Map_Spin_internal
000195A0 0000                       		dc.w @spin4-Map_Spin_internal
000195A2 02                         @flat:		dc.b 2
000195A3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000195A8 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000195AD 02                         @spin1:		dc.b 2
000195AE F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000195B3 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000195B8 02                         @spin2:		dc.b 2
000195B9 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000195BE 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000195C3 02                         @spin3:		dc.b 2
000195C4 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000195C9 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000195CE 02                         @spin4:		dc.b 2
000195CF F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000195D4 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000195DA 00                         		even
000195DA 00                         		even
000195DA                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000195DA                            ; ---------------------------------------------------------------------------
000195DA                            ; Object 6A - ground saws and pizza cutters (SBZ)
000195DA                            ; ---------------------------------------------------------------------------
000195DA                            
000195DA                            Saws:
000195DA 7000                       		moveq	#0,d0
000195DC 1028 0024                  		move.b	obRoutine(a0),d0
000195E0 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000195E4 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
000195E8                            ; ===========================================================================
000195E8 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
000195EA 0000                       		dc.w Saw_Action-Saw_Index
000195EC                            
000195EC =0000003A                  saw_origX:	equ $3A		; original x-axis position
000195EC =00000038                  saw_origY:	equ $38		; original y-axis position
000195EC =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
000195EC                            ; ===========================================================================
000195EC                            
000195EC                            Saw_Main:	; Routine 0
000195EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000195F0 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
000195F8 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
000195FE 117C 0004 0001             		move.b	#4,obRender(a0)
00019604 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001960A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00019610 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019616 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
0001961C 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00019622 6400                       		bcc.s	Saw_Action	; if yes, branch
00019624 117C 00A2 0020             		move.b	#$A2,obColType(a0)
0001962A                            
0001962A                            Saw_Action:	; Routine 2
0001962A 7000                       		moveq	#0,d0
0001962C 1028 0028                  		move.b	obSubtype(a0),d0
00019630 0240 0007                  		andi.w	#7,d0
00019634 D040                       		add.w	d0,d0
00019636 323B 0000                  		move.w	@index(pc,d0.w),d1
0001963A 4EBB 1000                  		jsr	@index(pc,d1.w)
0001965A 4EF9 0000 F858             		jmp	(DisplaySprite).l
00019660                            
00019660                            	@delete:
00019660 4EF9 0000 F898             		jmp	(DeleteObject).l
00019666                            ; ===========================================================================
00019666 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001966C 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00019670                            ; ===========================================================================
00019670                            
00019670                            @type00:
00019670 4E75                       		rts			; doesn't move
00019672                            ; ===========================================================================
00019672                            
00019672                            @type01:
00019672 323C 0060                  		move.w	#$60,d1
00019676 7000                       		moveq	#0,d0
00019678 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001967C 0828 0000 0022             		btst	#0,obStatus(a0)
00019682 6700                       		beq.s	@noflip01
00019684 4440                       		neg.w	d0
00019686 D041                       		add.w	d1,d0
00019688                            
00019688                            	@noflip01:
00019688 3228 003A                  		move.w	saw_origX(a0),d1
0001968C 9240                       		sub.w	d0,d1
0001968E 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00019692                            
00019692 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019696 6A00                       		bpl.s	@sameframe01
00019698 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
0001969E 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
000196A4                            
000196A4                            	@sameframe01:
000196A4 4A28 0001                  		tst.b	obRender(a0)
000196A8 6A00                       		bpl.s	@nosound01
000196AA 3038 FE04                  		move.w	(v_framecount).w,d0
000196AE 0240 000F                  		andi.w	#$F,d0
000196B2 6600                       		bne.s	@nosound01
000196BE                            
000196BE                            	@nosound01:
000196BE 4E75                       		rts	
000196C0                            ; ===========================================================================
000196C0                            
000196C0                            @type02:
000196C0 323C 0030                  		move.w	#$30,d1
000196C4 7000                       		moveq	#0,d0
000196C6 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000196CA 0828 0000 0022             		btst	#0,obStatus(a0)
000196D0 6700                       		beq.s	@noflip02
000196D2 4440                       		neg.w	d0
000196D4 0640 0080                  		addi.w	#$80,d0
000196D8                            
000196D8                            	@noflip02:
000196D8 3228 0038                  		move.w	saw_origY(a0),d1
000196DC 9240                       		sub.w	d0,d1
000196DE 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000196E2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000196E6 6A00                       		bpl.s	@sameframe02
000196E8 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000196EE 0868 0000 001A             		bchg	#0,obFrame(a0)
000196F4                            
000196F4                            	@sameframe02:
000196F4 4A28 0001                  		tst.b	obRender(a0)
000196F8 6A00                       		bpl.s	@nosound02
000196FA 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000196FE 0C00 0018                  		cmpi.b	#$18,d0
00019702 6600                       		bne.s	@nosound02
0001970E                            
0001970E                            	@nosound02:
0001970E 4E75                       		rts	
00019710                            ; ===========================================================================
00019710                            
00019710                            @type03:
00019710 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00019714 6600                       		bne.s	@here03		; if yes, branch
00019716                            
00019716 3038 D008                  		move.w	(v_player+obX).w,d0
0001971A 0440 00C0                  		subi.w	#$C0,d0
0001971E 6500                       		bcs.s	@nosaw03x
00019720 9068 0008                  		sub.w	obX(a0),d0
00019724 6500                       		bcs.s	@nosaw03x
00019726 3038 D00C                  		move.w	(v_player+obY).w,d0
0001972A 0440 0080                  		subi.w	#$80,d0
0001972E B068 000C                  		cmp.w	obY(a0),d0
00019732 6400                       		bcc.s	@nosaw03y
00019734 0640 0100                  		addi.w	#$100,d0
00019738 B068 000C                  		cmp.w	obY(a0),d0
0001973C 6500                       		bcs.s	@nosaw03y
0001973E 117C 0001 003D             		move.b	#1,saw_here(a0)
00019744 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
0001974A 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019750 117C 0002 001A             		move.b	#2,obFrame(a0)
00019760                            
00019760                            	@nosaw03x:
00019760 588F                       		addq.l	#4,sp
00019762                            
00019762                            	@nosaw03y:
00019762 4E75                       		rts	
00019764                            ; ===========================================================================
00019764                            
00019764                            @here03:
00019764 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001976A 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019770 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019774 6A00                       		bpl.s	@sameframe03
00019776 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001977C 0868 0000 001A             		bchg	#0,obFrame(a0)
00019782                            
00019782                            	@sameframe03:
00019782 4E75                       		rts	
00019784                            ; ===========================================================================
00019784                            
00019784                            @type04:
00019784 4A28 003D                  		tst.b	saw_here(a0)
00019788 6600                       		bne.s	@here04
0001978A 3038 D008                  		move.w	(v_player+obX).w,d0
0001978E 0640 00E0                  		addi.w	#$E0,d0
00019792 9068 0008                  		sub.w	obX(a0),d0
00019796 6400                       		bcc.s	@nosaw04x
00019798 3038 D00C                  		move.w	(v_player+obY).w,d0
0001979C 0440 0080                  		subi.w	#$80,d0
000197A0 B068 000C                  		cmp.w	obY(a0),d0
000197A4 6400                       		bcc.s	@nosaw04y
000197A6 0640 0100                  		addi.w	#$100,d0
000197AA B068 000C                  		cmp.w	obY(a0),d0
000197AE 6500                       		bcs.s	@nosaw04y
000197B0 117C 0001 003D             		move.b	#1,saw_here(a0)
000197B6 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000197BC 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000197C2 117C 0002 001A             		move.b	#2,obFrame(a0)
000197D2                            
000197D2                            	@nosaw04x:
000197D2 588F                       		addq.l	#4,sp
000197D4                            
000197D4                            	@nosaw04y:
000197D4 4E75                       		rts	
000197D6                            ; ===========================================================================
000197D6                            
000197D6                            @here04:
000197D6 4EB9 0000 F844             		jsr	(SpeedToPos).l
000197DC 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000197E2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000197E6 6A00                       		bpl.s	@sameframe04
000197E8 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000197EE 0868 0000 001A             		bchg	#0,obFrame(a0)
000197F4                            
000197F4                            	@sameframe04:
000197F4 4E75                       		rts	
000197F4 4E75                       		rts	
000197F6                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
000197F6                            ; ---------------------------------------------------------------------------
000197F6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000197F6                            ; ---------------------------------------------------------------------------
000197F6                            Map_Saw_internal:
000197F6 0000                       		dc.w @pizzacutter1-Map_Saw_internal
000197F8 0000                       		dc.w @pizzacutter2-Map_Saw_internal
000197FA 0000                       		dc.w @groundsaw1-Map_Saw_internal
000197FC 0000                       		dc.w @groundsaw2-Map_Saw_internal
000197FE 07                         @pizzacutter1:	dc.b 7
000197FF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019804 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019809 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001980E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00019813 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019818 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001981D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019822 07                         @pizzacutter2:	dc.b 7
00019823 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019828 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001982D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00019832 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019837 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001983C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019841 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019846 04                         @groundsaw1:	dc.b 4
00019847 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001984C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019851 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00019856 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001985B 04                         @groundsaw2:	dc.b 4
0001985C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019861 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019866 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001986B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019870                            		even
00019870                            		even
00019870                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00019870                            ; ---------------------------------------------------------------------------
00019870                            ; Object 6B - stomper and sliding door (SBZ)
00019870                            ; ---------------------------------------------------------------------------
00019870                            
00019870                            ScrapStomp:
00019870 7000                       		moveq	#0,d0
00019872 1028 0024                  		move.b	obRoutine(a0),d0
00019876 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
0001987A 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
0001987E                            ; ===========================================================================
0001987E 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00019880 0000                       		dc.w Sto_Action-Sto_Index
00019882                            
00019882 =00000016                  sto_height:	equ $16
00019882 =00000034                  sto_origX:	equ $34		; original x-axis position
00019882 =00000030                  sto_origY:	equ $30		; original y-axis position
00019882 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00019882                            
00019882 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00019886 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001988A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001988E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00019892 8040 0005                  		dc.b  $80, $40,	  0,   5
00019896                            ; ===========================================================================
00019896                            
00019896                            Sto_Main:	; Routine 0
00019896 5428 0024                  		addq.b	#2,obRoutine(a0)
0001989A 7000                       		moveq	#0,d0
0001989C 1028 0028                  		move.b	obSubtype(a0),d0
000198A0 E448                       		lsr.w	#2,d0
000198A2 0240 001C                  		andi.w	#$1C,d0
000198A6 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
000198AA 115B 0014                  		move.b	(a3)+,obActWid(a0)
000198AE 115B 0016                  		move.b	(a3)+,sto_height(a0)
000198B2 E448                       		lsr.w	#2,d0
000198B4 1140 001A                  		move.b	d0,obFrame(a0)
000198B8 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
000198C0 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
000198C6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
000198CC 6600                       		bne.s	@isSBZ12	; if not, branch
000198CE 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
000198D4 6700                       		beq.s	@isSBZ3
000198D6                            
000198D6                            @chkdel:
000198D6 45F8 FC00                  		lea	(v_objstate).w,a2
000198DA 7000                       		moveq	#0,d0
000198DC 1028 0023                  		move.b	obRespawnNo(a0),d0
000198E0 6700                       		beq.s	@delete
000198E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000198E8                            
000198E8                            	@delete:
000198E8 4EF9 0000 F898             		jmp	(DeleteObject).l
000198EE                            ; ===========================================================================
000198EE                            
000198EE                            @isSBZ3:
000198EE 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
000198F4 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
000198FA 6600                       		bne.s	@isSBZ12
000198FC 45F8 FC00                  		lea	(v_objstate).w,a2
00019900 7000                       		moveq	#0,d0
00019902 1028 0023                  		move.b	obRespawnNo(a0),d0
00019906 6700                       		beq.s	@isSBZ12
00019908 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001990E 6700                       		beq.s	@isSBZ12
00019910 4238 F7CB                  		clr.b	(v_obj6B).w
00019914 60C0                       		bra.s	@chkdel
00019916                            ; ===========================================================================
00019916                            
00019916                            @isSBZ12:
00019916 0028 0004 0001             		ori.b	#4,obRender(a0)
0001991C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019922 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019928 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
0001992E 7000                       		moveq	#0,d0
00019930 101B                       		move.b	(a3)+,d0
00019932 3140 003C                  		move.w	d0,$3C(a0)
00019936 7000                       		moveq	#0,d0
00019938 1028 0028                  		move.b	obSubtype(a0),d0
0001993C 6A00                       		bpl.s	Sto_Action
0001993E 0200 000F                  		andi.b	#$F,d0
00019942 1140 003E                  		move.b	d0,$3E(a0)
00019946 1153 0028                  		move.b	(a3),obSubtype(a0)
0001994A 0C13 0005                  		cmpi.b	#5,(a3)
0001994E 6600                       		bne.s	@chkgone
00019950 08E8 0004 0001             		bset	#4,obRender(a0)
00019956                            
00019956                            	@chkgone:
00019956 45F8 FC00                  		lea	(v_objstate).w,a2
0001995A 7000                       		moveq	#0,d0
0001995C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019960 6700                       		beq.s	Sto_Action
00019962 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019968                            
00019968                            Sto_Action:	; Routine 2
00019968 3F28 0008                  		move.w	obX(a0),-(sp)
0001996C 7000                       		moveq	#0,d0
0001996E 1028 0028                  		move.b	obSubtype(a0),d0
00019972 0240 000F                  		andi.w	#$F,d0
00019976 D040                       		add.w	d0,d0
00019978 323B 0000                  		move.w	@index(pc,d0.w),d1
0001997C 4EBB 1000                  		jsr	@index(pc,d1.w)
00019980 381F                       		move.w	(sp)+,d4
00019982 4A28 0001                  		tst.b	obRender(a0)
00019986 6A00                       		bpl.s	@chkdel
00019988 7200                       		moveq	#0,d1
0001998A 1228 0014                  		move.b	obActWid(a0),d1
0001998E 0641 000B                  		addi.w	#$B,d1
00019992 7400                       		moveq	#0,d2
00019994 1428 0016                  		move.b	sto_height(a0),d2
00019998 3602                       		move.w	d2,d3
0001999A 5243                       		addq.w	#1,d3
0001999C 6100 8406                  		bsr.w	SolidObject
000199A0                            
000199A0                            	@chkdel:
000199BC 4EF9 0000 F858             		jmp	(DisplaySprite).l
000199C2                            
000199C2                            	@chkgone:
000199C2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
000199C8 6600                       		bne.s	@delete
000199CA 4238 F7CB                  		clr.b	(v_obj6B).w
000199CE 45F8 FC00                  		lea	(v_objstate).w,a2
000199D2 7000                       		moveq	#0,d0
000199D4 1028 0023                  		move.b	obRespawnNo(a0),d0
000199D8 6700                       		beq.s	@delete
000199DA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000199E0                            
000199E0                            	@delete:
000199E0 4EF9 0000 F898             		jmp	(DeleteObject).l
000199E6                            ; ===========================================================================
000199E6 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000199EA 0000 0000                  		dc.w @type02-@index, @type03-@index
000199EE 0000 0000                  		dc.w @type04-@index, @type05-@index
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            @type00:
000199F2 4E75                       		rts
000199F4                            ; ===========================================================================
000199F4                            
000199F4                            @type01:
000199F4 4A28 0038                  		tst.b	sto_active(a0)
000199F8 6600                       		bne.s	@isactive01
000199FA 45F8 F7E0                  		lea	(f_switch).w,a2
000199FE 7000                       		moveq	#0,d0
00019A00 1028 003E                  		move.b	$3E(a0),d0
00019A04 0832 0000 0000             		btst	#0,(a2,d0.w)
00019A0A 6700                       		beq.s	@loc_15DC2
00019A0C 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A12                            
00019A12                            	@isactive01:
00019A12 3028 003C                  		move.w	$3C(a0),d0
00019A16 B068 003A                  		cmp.w	$3A(a0),d0
00019A1A 6700                       		beq.s	@loc_15DE0
00019A1C 5468 003A                  		addq.w	#2,$3A(a0)
00019A20                            
00019A20                            	@loc_15DC2:
00019A20 3028 003A                  		move.w	$3A(a0),d0
00019A24 0828 0000 0022             		btst	#0,obStatus(a0)
00019A2A 6700                       		beq.s	@noflip01
00019A2C 4440                       		neg.w	d0
00019A2E 0640 0080                  		addi.w	#$80,d0
00019A32                            
00019A32                            	@noflip01:
00019A32 3228 0034                  		move.w	sto_origX(a0),d1
00019A36 9240                       		sub.w	d0,d1
00019A38 3141 0008                  		move.w	d1,obX(a0)
00019A3C 4E75                       		rts	
00019A3E                            ; ===========================================================================
00019A3E                            
00019A3E                            @loc_15DE0:
00019A3E 5228 0028                  		addq.b	#1,obSubtype(a0)
00019A42 317C 00B4 0036             		move.w	#$B4,$36(a0)
00019A48 4228 0038                  		clr.b	sto_active(a0)
00019A4C 45F8 FC00                  		lea	(v_objstate).w,a2
00019A50 7000                       		moveq	#0,d0
00019A52 1028 0023                  		move.b	obRespawnNo(a0),d0
00019A56 67C8                       		beq.s	@loc_15DC2
00019A58 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019A5E 60C0                       		bra.s	@loc_15DC2
00019A60                            ; ===========================================================================
00019A60                            
00019A60                            @type02:
00019A60 4A28 0038                  		tst.b	sto_active(a0)
00019A64 6600                       		bne.s	@isactive02
00019A66 5368 0036                  		subq.w	#1,$36(a0)
00019A6A 6600                       		bne.s	@loc_15E1E
00019A6C 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A72                            
00019A72                            	@isactive02:
00019A72 4A68 003A                  		tst.w	$3A(a0)
00019A76 6700                       		beq.s	@loc_15E3C
00019A78 5568 003A                  		subq.w	#2,$3A(a0)
00019A7C                            
00019A7C                            	@loc_15E1E:
00019A7C 3028 003A                  		move.w	$3A(a0),d0
00019A80 0828 0000 0022             		btst	#0,obStatus(a0)
00019A86 6700                       		beq.s	@noflip02
00019A88 4440                       		neg.w	d0
00019A8A 0640 0080                  		addi.w	#$80,d0
00019A8E                            
00019A8E                            	@noflip02:
00019A8E 3228 0034                  		move.w	sto_origX(a0),d1
00019A92 9240                       		sub.w	d0,d1
00019A94 3141 0008                  		move.w	d1,obX(a0)
00019A98 4E75                       		rts	
00019A9A                            ; ===========================================================================
00019A9A                            
00019A9A                            @loc_15E3C:
00019A9A 5328 0028                  		subq.b	#1,obSubtype(a0)
00019A9E 4228 0038                  		clr.b	sto_active(a0)
00019AA2 45F8 FC00                  		lea	(v_objstate).w,a2
00019AA6 7000                       		moveq	#0,d0
00019AA8 1028 0023                  		move.b	obRespawnNo(a0),d0
00019AAC 67CE                       		beq.s	@loc_15E1E
00019AAE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00019AB4 60C6                       		bra.s	@loc_15E1E
00019AB6                            ; ===========================================================================
00019AB6                            
00019AB6                            @type03:
00019AB6 4A28 0038                  		tst.b	sto_active(a0)
00019ABA 6600                       		bne.s	@isactive03
00019ABC 4A68 003A                  		tst.w	$3A(a0)
00019AC0 6700                       		beq.s	@loc_15E6A
00019AC2 5368 003A                  		subq.w	#1,$3A(a0)
00019AC6 6000                       		bra.s	@loc_15E8E
00019AC8                            ; ===========================================================================
00019AC8                            
00019AC8                            @loc_15E6A:
00019AC8 5368 0036                  		subq.w	#1,$36(a0)
00019ACC 6A00                       		bpl.s	@loc_15E8E
00019ACE 317C 003C 0036             		move.w	#$3C,$36(a0)
00019AD4 117C 0001 0038             		move.b	#1,sto_active(a0)
00019ADA                            
00019ADA                            @isactive03:
00019ADA 5068 003A                  		addq.w	#8,$3A(a0)
00019ADE 3028 003A                  		move.w	$3A(a0),d0
00019AE2 B068 003C                  		cmp.w	$3C(a0),d0
00019AE6 6600                       		bne.s	@loc_15E8E
00019AE8 4228 0038                  		clr.b	sto_active(a0)
00019AEC                            
00019AEC                            @loc_15E8E:
00019AEC 3028 003A                  		move.w	$3A(a0),d0
00019AF0 0828 0000 0022             		btst	#0,obStatus(a0)
00019AF6 6700                       		beq.s	@noflip03
00019AF8 4440                       		neg.w	d0
00019AFA 0640 0038                  		addi.w	#$38,d0
00019AFE                            
00019AFE                            	@noflip03:
00019AFE 3228 0030                  		move.w	sto_origY(a0),d1
00019B02 D240                       		add.w	d0,d1
00019B04 3141 000C                  		move.w	d1,obY(a0)
00019B08 4E75                       		rts	
00019B0A                            ; ===========================================================================
00019B0A                            
00019B0A                            @type04:
00019B0A 4A28 0038                  		tst.b	sto_active(a0)
00019B0E 6600                       		bne.s	@isactive04
00019B10 4A68 003A                  		tst.w	$3A(a0)
00019B14 6700                       		beq.s	@loc_15EBE
00019B16 5168 003A                  		subq.w	#8,$3A(a0)
00019B1A 6000                       		bra.s	@loc_15EF0
00019B1C                            ; ===========================================================================
00019B1C                            
00019B1C                            @loc_15EBE:
00019B1C 5368 0036                  		subq.w	#1,$36(a0)
00019B20 6A00                       		bpl.s	@loc_15EF0
00019B22 317C 003C 0036             		move.w	#$3C,$36(a0)
00019B28 117C 0001 0038             		move.b	#1,sto_active(a0)
00019B2E                            
00019B2E                            @isactive04:
00019B2E 3028 003A                  		move.w	$3A(a0),d0
00019B32 B068 003C                  		cmp.w	$3C(a0),d0
00019B36 6700                       		beq.s	@loc_15EE0
00019B38 5068 003A                  		addq.w	#8,$3A(a0)
00019B3C 6000                       		bra.s	@loc_15EF0
00019B3E                            ; ===========================================================================
00019B3E                            
00019B3E                            @loc_15EE0:
00019B3E 5368 0036                  		subq.w	#1,$36(a0)
00019B42 6A00                       		bpl.s	@loc_15EF0
00019B44 317C 003C 0036             		move.w	#$3C,$36(a0)
00019B4A 4228 0038                  		clr.b	sto_active(a0)
00019B4E                            
00019B4E                            @loc_15EF0:
00019B4E 3028 003A                  		move.w	$3A(a0),d0
00019B52 0828 0000 0022             		btst	#0,obStatus(a0)
00019B58 6700                       		beq.s	@noflip04
00019B5A 4440                       		neg.w	d0
00019B5C 0640 0038                  		addi.w	#$38,d0
00019B60                            
00019B60                            	@noflip04:
00019B60 3228 0030                  		move.w	sto_origY(a0),d1
00019B64 D240                       		add.w	d0,d1
00019B66 3141 000C                  		move.w	d1,obY(a0)
00019B6A 4E75                       		rts	
00019B6C                            ; ===========================================================================
00019B6C                            
00019B6C                            @type05:
00019B6C 4A28 0038                  		tst.b	sto_active(a0)
00019B70 6600                       		bne.s	@loc_15F3E
00019B72 45F8 F7E0                  		lea	(f_switch).w,a2
00019B76 7000                       		moveq	#0,d0
00019B78 1028 003E                  		move.b	$3E(a0),d0
00019B7C 0832 0000 0000             		btst	#0,(a2,d0.w)
00019B82 6700                       		beq.s	@locret_15F5C
00019B84 117C 0001 0038             		move.b	#1,sto_active(a0)
00019B8A 45F8 FC00                  		lea	(v_objstate).w,a2
00019B8E 7000                       		moveq	#0,d0
00019B90 1028 0023                  		move.b	obRespawnNo(a0),d0
00019B94 6700                       		beq.s	@loc_15F3E
00019B96 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019B9C                            
00019B9C                            @loc_15F3E:
00019B9C 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019BA4 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019BAC 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019BB2 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019BB8 6700                       		beq.s	@loc_15F5E
00019BBA                            
00019BBA                            @locret_15F5C:
00019BBA 4E75                       		rts	
00019BBC                            ; ===========================================================================
00019BBC                            
00019BBC                            @loc_15F5E:
00019BBC 4228 0028                  		clr.b	obSubtype(a0)
00019BC0 4228 0038                  		clr.b	sto_active(a0)
00019BC4 4E75                       		rts	
00019BC4 4E75                       		rts	
00019BC6                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019BC6                            ; ---------------------------------------------------------------------------
00019BC6                            ; Sprite mappings - stomper and	platforms (SBZ)
00019BC6                            ; ---------------------------------------------------------------------------
00019BC6                            Map_Stomp_internal:
00019BC6 0000                       		dc.w @door-Map_Stomp_internal
00019BC8 0000                       		dc.w @stomper-Map_Stomp_internal
00019BCA 0000                       		dc.w @stomper-Map_Stomp_internal
00019BCC 0000                       		dc.w @stomper-Map_Stomp_internal
00019BCE 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019BD0 04                         @door:		dc.b 4
00019BD1 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019BD6 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019BDB F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019BE0 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019BE5 08                         @stomper:	dc.b 8
00019BE6 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019BEB E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019BF0 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019BF5 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019BFA 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019BFF 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019C04 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019C09 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019C0E 0E                         @bigdoor:	dc.b $E
00019C0F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019C14 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019C19 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019C1E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00019C23 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019C28 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019C2D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00019C32 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00019C37 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019C3C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00019C41 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00019C46 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019C4B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00019C50 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00019C56 00                         		even
00019C56 00                         		even
00019C56                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00019C56                            ; ---------------------------------------------------------------------------
00019C56                            ; Object 6C - vanishing	platforms (SBZ)
00019C56                            ; ---------------------------------------------------------------------------
00019C56                            
00019C56                            VanishPlatform:
00019C56 7000                       		moveq	#0,d0
00019C58 1028 0024                  		move.b	obRoutine(a0),d0
00019C5C 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019C60 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00019C64                            ; ===========================================================================
00019C64 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00019C66 0000                       		dc.w VanP_Vanish-VanP_Index
00019C68 0000                       		dc.w VanP_Appear-VanP_Index
00019C6A 0000                       		dc.w loc_16068-VanP_Index
00019C6C                            
00019C6C =00000030                  vanp_timer:	equ $30		; counter for time until event
00019C6C =00000032                  vanp_timelen:	equ $32		; time between events (general)
00019C6C                            ; ===========================================================================
00019C6C                            
00019C6C                            VanP_Main:	; Routine 0
00019C6C 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019C70 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00019C78 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00019C7E 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00019C84 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00019C86 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00019C8C                            
00019C8C                            	VanP_IsSYZ:	
00019C8C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019C92 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019C98 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019C9E 7000                       		moveq	#0,d0
00019CA0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019CA4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019CA8 5240                       		addq.w	#1,d0		; add 1
00019CAA EF48                       		lsl.w	#7,d0		; multiply by $80
00019CAC 3200                       		move.w	d0,d1
00019CAE 5340                       		subq.w	#1,d0
00019CB0 3140 0030                  		move.w	d0,vanp_timer(a0)
00019CB4 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019CB8 7000                       		moveq	#0,d0
00019CBA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019CBE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019CC2 0641 0080                  		addi.w	#$80,d1
00019CC6 C0C1                       		mulu.w	d1,d0
00019CC8 E088                       		lsr.l	#8,d0
00019CCA 3140 0036                  		move.w	d0,$36(a0)
00019CCE 5341                       		subq.w	#1,d1
00019CD0 3141 0038                  		move.w	d1,$38(a0)
00019CD4                            
00019CD4                            loc_16068:	; Routine 6
00019CD4 3038 FE04                  		move.w	(v_framecount).w,d0
00019CD8 9068 0036                  		sub.w	$36(a0),d0
00019CDC C068 0038                  		and.w	$38(a0),d0
00019CE0 6600                       		bne.s	@animate
00019CE2 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019CE6 6000                       		bra.s	VanP_Vanish
00019CE8                            ; ===========================================================================
00019CE8                            
00019CE8                            @animate:
00019CE8 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019CEE 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00019CF4 4EF9 0001 190C             		jmp	RememberState
00019CFA                            ; ===========================================================================
00019CFA                            
00019CFA                            VanP_Vanish:	; Routine 2
00019CFA                            VanP_Appear:	; Routine 4
00019CFA 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019CFE 6A00                       		bpl.s	@wait
00019D00 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019D06 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019D0A 6700                       		beq.s	@isvanishing	; if yes, branch
00019D0C 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019D12                            
00019D12                            	@isvanishing:
00019D12 0868 0000 001C             		bchg	#0,obAnim(a0)
00019D18                            
00019D18                            	@wait:
00019D18 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019D1E 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00019D24 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019D2A 6600                       		bne.s	@notsolid	; if yes, branch
00019D2C 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00019D32 6600                       		bne.s	@loc_160D6
00019D34 7200                       		moveq	#0,d1
00019D36 1228 0014                  		move.b	obActWid(a0),d1
00019D3A 4EB9 0000 8CAC             		jsr	(PlatformObject).l
00019D40 4EF9 0001 190C             		jmp	RememberState
00019D46                            ; ===========================================================================
00019D46                            
00019D46                            @loc_160D6:
00019D46 7200                       		moveq	#0,d1
00019D48 1228 0014                  		move.b	obActWid(a0),d1
00019D4C 4EB9 0000 8E20             		jsr	(ExitPlatform).l
00019D52 3428 0008                  		move.w	obX(a0),d2
00019D56 4EB9 0000 938A             		jsr	(MvSonicOnPtfm2).l
00019D5C 4EF9 0001 190C             		jmp	RememberState
00019D62                            ; ===========================================================================
00019D62                            
00019D62                            @notsolid:
00019D62 0828 0003 0022             		btst	#3,obStatus(a0)
00019D68 6700                       		beq.s	@display
00019D6A 43F8 D000                  		lea	(v_player).w,a1
00019D6E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019D74 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019D7A 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019D80 4228 0025                  		clr.b	obSolid(a0)
00019D84                            
00019D84                            	@display:
00019D84 4EF9 0001 190C             		jmp	RememberState
00019D84 4EF9 0001 190C             		jmp	RememberState
00019D8A                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019D8A                            ; ---------------------------------------------------------------------------
00019D8A                            ; Animation script - vanishing platforms (SBZ)
00019D8A                            ; ---------------------------------------------------------------------------
00019D8A 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019D8C 0000                       		dc.w @appear-Ani_Van
00019D8E 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
00019D98                            		even
00019D98 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019DA2                            		even
00019DA2                            		even
00019DA2                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019DA2                            ; --------------------------------------------------------------------------------
00019DA2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019DA2                            ; --------------------------------------------------------------------------------
00019DA2                            
00019DA2                            SME_Mrcg1:	
00019DA2 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
00019DA6 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019DAA 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019DAE 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
00019DB0 01                         SME_Mrcg1_E:	dc.b 1	
00019DB1 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00019DB6 04                         SME_Mrcg1_14:	dc.b 4	
00019DB7 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019DBC F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019DC1 F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
00019DC6 F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019DCB 01                         SME_Mrcg1_29:	dc.b 1	
00019DCC F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
00019DD1 02                         SME_Mrcg1_2F:	dc.b 2	
00019DD2 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019DD7 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019DDC 01                         SME_Mrcg1_3A:	dc.b 1	
00019DDD F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
00019DE2 01                         SME_Mrcg1_40:	dc.b 1	
00019DE3 F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
00019DE8 00                         SME_Mrcg1_46:	dc.b 0	
00019DEA 00                         		even
00019DEA 00                         		even
00019DEA                            		include	"_incObj\6E Electrocuter.asm"
00019DEA                            ; ---------------------------------------------------------------------------
00019DEA                            ; Object 6E - electrocution orbs (SBZ)
00019DEA                            ; ---------------------------------------------------------------------------
00019DEA                            
00019DEA                            Electro:
00019DEA 7000                       		moveq	#0,d0
00019DEC 1028 0024                  		move.b	obRoutine(a0),d0
00019DF0 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019DF4 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019DF8                            ; ===========================================================================
00019DF8 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019DFA 0000                       		dc.w Elec_Shock-Elec_Index
00019DFC                            
00019DFC =00000034                  elec_freq:	equ $34		; frequency
00019DFC                            ; ===========================================================================
00019DFC                            
00019DFC                            Elec_Main:	; Routine 0
00019DFC 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E00 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019E08 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019E0E 0028 0004 0001             		ori.b	#4,obRender(a0)
00019E14 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019E1A 7000                       		moveq	#0,d0
00019E1C 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019E20 E948                       		lsl.w	#4,d0		; multiply by $10
00019E22 5340                       		subq.w	#1,d0
00019E24 3140 0034                  		move.w	d0,elec_freq(a0)
00019E28                            
00019E28                            Elec_Shock:	; Routine 2
00019E28 3038 FE04                  		move.w	(v_framecount).w,d0
00019E2C C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019E30 6600                       		bne.s	@animate	; if not, branch
00019E32                            
00019E32 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019E38 4A28 0001                  		tst.b	obRender(a0)
00019E3C 6A00                       		bpl.s	@animate
00019E48                            
00019E48                            	@animate:
00019E48 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019E4E 4EB9 0000 C90E             		jsr	(AnimateSprite).l
00019E54 117C 0000 0020             		move.b	#0,obColType(a0)
00019E5A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019E60 6600                       		bne.s	@display	; if not, branch
00019E62 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019E68                            
00019E68                            	@display:
00019E68 4EF9 0001 190C             		jmp	RememberState
00019E68 4EF9 0001 190C             		jmp	RememberState
00019E6E                            		include	"_anim\Electrocuter.asm"
00019E6E                            ; ---------------------------------------------------------------------------
00019E6E                            ; Animation script - electrocution orbs (SBZ)
00019E6E                            ; ---------------------------------------------------------------------------
00019E6E 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019E70 0000                       		dc.w byte_161D0-Ani_Elec
00019E72 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019E76 00                         		even
00019E76 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019E86                            		even
00019E86                            		even
00019E86                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019E86                            ; --------------------------------------------------------------------------------
00019E86                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019E86                            ; --------------------------------------------------------------------------------
00019E86                            
00019E86                            SME_KiF9w:	
00019E86 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019E8A 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019E8E 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019E92 02                         SME_KiF9w_C:	dc.b 2	
00019E93 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019E98 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E9D 03                         SME_KiF9w_17:	dc.b 3	
00019E9E F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019EA3 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019EA8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019EAD 05                         SME_KiF9w_27:	dc.b 5	
00019EAE F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019EB3 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019EB8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019EBD F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019EC2 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019EC7 04                         SME_KiF9w_41:	dc.b 4	
00019EC8 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019ECD 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019ED2 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019ED7 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019EDC 06                         SME_KiF9w_56:	dc.b 6	
00019EDD F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019EE2 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019EE7 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019EEC F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019EF1 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019EF6 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019EFB 04                         SME_KiF9w_75:	dc.b 4	
00019EFC F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019F01 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019F06 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019F0B F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019F10                            		even
00019F10                            		even
00019F10                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019F10                            ; ---------------------------------------------------------------------------
00019F10                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019F10                            ; ---------------------------------------------------------------------------
00019F10                            
00019F10                            SpinConvey:
00019F10 7000                       		moveq	#0,d0
00019F12 1028 0024                  		move.b	obRoutine(a0),d0
00019F16 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019F1A 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019F3A                            
00019F3A                            SpinC_Display:
00019F3A 4EF9 0000 F858             		jmp	(DisplaySprite).l
00019F40                            ; ===========================================================================
00019F40                            
00019F40                            loc_1629A:
00019F40 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019F46 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019F48 0C40 FF80                  		cmpi.w	#-$80,d0
00019F4C 64EC                       		bcc.s	SpinC_Display
00019F4E                            
00019F4E                            SpinC_Act1or2:
00019F4E 1028 002F                  		move.b	$2F(a0),d0
00019F52 6A00                       		bpl.s	SpinC_Delete
00019F54 0240 007F                  		andi.w	#$7F,d0
00019F58 45F8 F7C1                  		lea	(v_obj63).w,a2
00019F5C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019F62                            
00019F62                            SpinC_Delete:
00019F62 4EF9 0000 F898             		jmp	(DeleteObject).l
00019F68                            ; ===========================================================================
00019F68 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019F6A 0000                       		dc.w loc_163D8-SpinC_Index
00019F6C                            ; ===========================================================================
00019F6C                            
00019F6C                            SpinC_Main:	; Routine 0
00019F6C 1028 0028                  		move.b	obSubtype(a0),d0
00019F70 6B00 0000                  		bmi.w	loc_16380
00019F74 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F78 217C 0001 9598 0004        		move.l	#Map_Spin,obMap(a0)
00019F80 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019F86 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019F8C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019F92 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019F98 7000                       		moveq	#0,d0
00019F9A 1028 0028                  		move.b	obSubtype(a0),d0
00019F9E 3200                       		move.w	d0,d1
00019FA0 E648                       		lsr.w	#3,d0
00019FA2 0240 001E                  		andi.w	#$1E,d0
00019FA6 45FA 0000                  		lea	off_164A6(pc),a2
00019FAA D4F2 0000                  		adda.w	(a2,d0.w),a2
00019FAE 315A 0038                  		move.w	(a2)+,$38(a0)
00019FB2 315A 0030                  		move.w	(a2)+,$30(a0)
00019FB6 214A 003C                  		move.l	a2,$3C(a0)
00019FBA 0241 000F                  		andi.w	#$F,d1
00019FBE E549                       		lsl.w	#2,d1
00019FC0 1141 0038                  		move.b	d1,$38(a0)
00019FC4 117C 0004 003A             		move.b	#4,$3A(a0)
00019FCA 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019FCE 6700                       		beq.s	loc_16356
00019FD0 117C 0001 003B             		move.b	#1,$3B(a0)
00019FD6 4428 003A                  		neg.b	$3A(a0)
00019FDA 7200                       		moveq	#0,d1
00019FDC 1228 0038                  		move.b	$38(a0),d1
00019FE0 D228 003A                  		add.b	$3A(a0),d1
00019FE4 B228 0039                  		cmp.b	$39(a0),d1
00019FE8 6500                       		bcs.s	loc_16352
00019FEA 1001                       		move.b	d1,d0
00019FEC 7200                       		moveq	#0,d1
00019FEE 4A00                       		tst.b	d0
00019FF0 6A00                       		bpl.s	loc_16352
00019FF2 1228 0039                  		move.b	$39(a0),d1
00019FF6 5901                       		subq.b	#4,d1
00019FF8                            
00019FF8                            loc_16352:
00019FF8 1141 0038                  		move.b	d1,$38(a0)
00019FFC                            
00019FFC                            loc_16356:
00019FFC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001A002 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001A008 4A41                       		tst.w	d1
0001A00A 6600                       		bne.s	loc_1636C
0001A00C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A012                            
0001A012                            loc_1636C:
0001A012 0C41 0008                  		cmpi.w	#8,d1
0001A016 6600                       		bne.s	loc_16378
0001A018 117C 0000 001C             		move.b	#0,obAnim(a0)
0001A01E                            
0001A01E                            loc_16378:
0001A01E 6100 A972                  		bsr.w	LCon_ChangeDir
0001A022 6000 0000                  		bra.w	loc_163D8
0001A026                            ; ===========================================================================
0001A026                            
0001A026                            loc_16380:
0001A026 1140 002F                  		move.b	d0,$2F(a0)
0001A02A 0240 007F                  		andi.w	#$7F,d0
0001A02E 45F8 F7C1                  		lea	(v_obj63).w,a2
0001A032 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001A038 6700                       		beq.s	loc_1639A
0001A03A 4EF9 0000 F898             		jmp	(DeleteObject).l
0001A040                            ; ===========================================================================
0001A040                            
0001A040                            loc_1639A:
0001A040 D040                       		add.w	d0,d0
0001A042 0240 001E                  		andi.w	#$1E,d0
0001A046 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
0001A04A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001A050 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A054 321A                       		move.w	(a2)+,d1
0001A056 2248                       		movea.l	a0,a1
0001A058 6000                       		bra.s	SpinC_LoadPform
0001A05A                            ; ===========================================================================
0001A05A                            
0001A05A                            SpinC_Loop:
0001A05A 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001A060 6600                       		bne.s	loc_163D0
0001A062                            
0001A062                            SpinC_LoadPform:
0001A062 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001A066 335A 0008                  		move.w	(a2)+,obX(a1)
0001A06A 335A 000C                  		move.w	(a2)+,obY(a1)
0001A06E 301A                       		move.w	(a2)+,d0
0001A070 1340 0028                  		move.b	d0,obSubtype(a1)
0001A074                            
0001A074                            loc_163D0:
0001A074 51C9 FFE4                  		dbf	d1,SpinC_Loop
0001A078                            
0001A078 588F                       		addq.l	#4,sp
0001A07A 4E75                       		rts	
0001A07C                            ; ===========================================================================
0001A07C                            
0001A07C                            loc_163D8:	; Routine 2
0001A07C 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
0001A082 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001A088 4A28 001A                  		tst.b	obFrame(a0)
0001A08C 6600                       		bne.s	loc_16404
0001A08E 3F28 0008                  		move.w	obX(a0),-(sp)
0001A092 6100 0000                  		bsr.w	loc_16424
0001A096 323C 001B                  		move.w	#$1B,d1
0001A09A 343C 0007                  		move.w	#7,d2
0001A09E 3602                       		move.w	d2,d3
0001A0A0 5243                       		addq.w	#1,d3
0001A0A2 381F                       		move.w	(sp)+,d4
0001A0A4 4EF9 0001 1DA4             		jmp	SolidObject
0001A0AA                            ; ===========================================================================
0001A0AA                            
0001A0AA                            loc_16404:
0001A0AA 0828 0003 0022             		btst	#3,obStatus(a0)
0001A0B0 6700                       		beq.s	loc_16420
0001A0B2 43F8 D000                  		lea	(v_objspace).w,a1
0001A0B6 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001A0BC 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001A0C2 4228 0025                  		clr.b	obSolid(a0)
0001A0C6                            
0001A0C6                            loc_16420:
0001A0C6 6000 0000                  		bra.w	loc_16424
0001A0CA                            
0001A0CA                            loc_16424:
0001A0CA 3028 0008                  		move.w	obX(a0),d0
0001A0CE B068 0034                  		cmp.w	$34(a0),d0
0001A0D2 6600                       		bne.s	loc_16484
0001A0D4 3028 000C                  		move.w	obY(a0),d0
0001A0D8 B068 0036                  		cmp.w	$36(a0),d0
0001A0DC 6600                       		bne.s	loc_16484
0001A0DE 7200                       		moveq	#0,d1
0001A0E0 1228 0038                  		move.b	$38(a0),d1
0001A0E4 D228 003A                  		add.b	$3A(a0),d1
0001A0E8 B228 0039                  		cmp.b	$39(a0),d1
0001A0EC 6500                       		bcs.s	loc_16456
0001A0EE 1001                       		move.b	d1,d0
0001A0F0 7200                       		moveq	#0,d1
0001A0F2 4A00                       		tst.b	d0
0001A0F4 6A00                       		bpl.s	loc_16456
0001A0F6 1228 0039                  		move.b	$39(a0),d1
0001A0FA 5901                       		subq.b	#4,d1
0001A0FC                            
0001A0FC                            loc_16456:
0001A0FC 1141 0038                  		move.b	d1,$38(a0)
0001A100 2268 003C                  		movea.l	$3C(a0),a1
0001A104 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001A10A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001A110 4A41                       		tst.w	d1
0001A112 6600                       		bne.s	loc_16474
0001A114 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A11A                            
0001A11A                            loc_16474:
0001A11A 0C41 0008                  		cmpi.w	#8,d1
0001A11E 6600                       		bne.s	loc_16480
0001A120 117C 0000 001C             		move.b	#0,obAnim(a0)
0001A126                            
0001A126                            loc_16480:
0001A126 6100 A86A                  		bsr.w	LCon_ChangeDir
0001A12A                            
0001A12A                            loc_16484:
0001A12A 4EF9 0000 F844             		jmp	(SpeedToPos).l
0001A12A 4EF9 0000 F844             		jmp	(SpeedToPos).l
0001A130                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001A130                            ; ---------------------------------------------------------------------------
0001A130                            ; Animation script - platform on conveyor belt (SBZ)
0001A130                            ; ---------------------------------------------------------------------------
0001A130 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
0001A132 0000                       		dc.w @still-Ani_SpinConvey
0001A134 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001A141 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001A148 00                         		even
0001A148 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001A14C 00                         		even
0001A14C 00                         		even
0001A14C                            
0001A14C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001A152 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001A158 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001A16C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001A180 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001A194 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001A1A8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001A1BC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001A1D0                            ; ===========================================================================
0001A1D0                            
0001A1D0                            		include	"_incObj\70 Girder Block.asm"
0001A1D0                            ; ---------------------------------------------------------------------------
0001A1D0                            ; Object 70 - large girder block (SBZ)
0001A1D0                            ; ---------------------------------------------------------------------------
0001A1D0                            
0001A1D0                            Girder:
0001A1D0 7000                       		moveq	#0,d0
0001A1D2 1028 0024                  		move.b	obRoutine(a0),d0
0001A1D6 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001A1DA 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001A1DE                            ; ===========================================================================
0001A1DE 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
0001A1E0 0000                       		dc.w Gird_Action-Gird_Index
0001A1E2                            
0001A1E2 =00000016                  gird_height:	equ $16
0001A1E2 =00000032                  gird_origX:	equ $32		; original x-axis position
0001A1E2 =00000030                  gird_origY:	equ $30		; original y-axis position
0001A1E2 =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001A1E2 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001A1E2 =0000003A                  gird_delay:	equ $3A		; delay for movement
0001A1E2                            ; ===========================================================================
0001A1E2                            
0001A1E2                            Gird_Main:	; Routine 0
0001A1E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A1E6 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001A1EE 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001A1F4 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A1FA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A200 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001A206 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001A20C 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
0001A212 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001A218 6100 0000                  		bsr.w	Gird_ChgMove
0001A21C                            
0001A21C                            Gird_Action:	; Routine 2
0001A21C 3F28 0008                  		move.w	obX(a0),-(sp)
0001A220 4A68 003A                  		tst.w	gird_delay(a0)
0001A224 6700                       		beq.s	@beginmove
0001A226 5368 003A                  		subq.w	#1,gird_delay(a0)
0001A22A 6600                       		bne.s	@solid
0001A22C                            
0001A22C                            	@beginmove:
0001A22C 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001A232 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001A236 6600                       		bne.s	@solid		; if time remains, branch
0001A238 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001A23C                            
0001A23C                            	@solid:
0001A23C 381F                       		move.w	(sp)+,d4
0001A23E 4A28 0001                  		tst.b	obRender(a0)
0001A242 6A00                       		bpl.s	@chkdel
0001A244 7200                       		moveq	#0,d1
0001A246 1228 0014                  		move.b	obActWid(a0),d1
0001A24A 0641 000B                  		addi.w	#$B,d1
0001A24E 7400                       		moveq	#0,d2
0001A250 1428 0016                  		move.b	gird_height(a0),d2
0001A254 3602                       		move.w	d2,d3
0001A256 5243                       		addq.w	#1,d3
0001A258 4EB9 0001 1DA4             		jsr	SolidObject
0001A25E                            
0001A25E                            	@chkdel:
0001A27A 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001A280                            
0001A280                            	@delete:
0001A280 4EF9 0000 F898             		jmp	(DeleteObject).l
0001A286                            ; ===========================================================================
0001A286                            
0001A286                            Gird_ChgMove:
0001A286 1028 0038                  		move.b	gird_set(a0),d0
0001A28A 0240 0018                  		andi.w	#$18,d0
0001A28E 43F9 0000 0000             		lea	(@settings).l,a1
0001A294 43F1 0000                  		lea	(a1,d0.w),a1
0001A298 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001A29C 3159 0012                  		move.w	(a1)+,obVelY(a0)
0001A2A0 3159 0034                  		move.w	(a1)+,gird_time(a0)
0001A2A4 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001A2A8 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001A2AE 4E75                       		rts	
0001A2B0                            ; ===========================================================================
0001A2B0                            @settings:	;   x-speed, y-speed, duration
0001A2B0 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001A2B8 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
0001A2C0 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001A2C8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A2C8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A2D0                            Map_Gird:	include	"_maps\Girder Block.asm"
0001A2D0                            ; ---------------------------------------------------------------------------
0001A2D0                            ; Sprite mappings - large girder block (SBZ)
0001A2D0                            ; ---------------------------------------------------------------------------
0001A2D0                            Map_Gird_internal:
0001A2D0 0000                       		dc.w @girder-Map_Gird_internal
0001A2D2 0C                         @girder:	dc.b $C
0001A2D3 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001A2D8 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001A2DD E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001A2E2 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001A2E7 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001A2EC 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001A2F1 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001A2F6 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001A2FB E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001A300 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001A305 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001A30A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001A310 00                         		even
0001A310 00                         		even
0001A310                            		include	"_incObj\72 Teleporter.asm"
0001A310                            ; ---------------------------------------------------------------------------
0001A310                            ; Object 72 - teleporter (SBZ)
0001A310                            ; ---------------------------------------------------------------------------
0001A310                            
0001A310                            Teleport:
0001A310 7000                       		moveq	#0,d0
0001A312 1028 0024                  		move.b	obRoutine(a0),d0
0001A316 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001A31A 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001A33A 4E75                       		rts	
0001A33C                            
0001A33C                            	@delete:
0001A33C 4EF9 0000 F898             		jmp	(DeleteObject).l
0001A342                            ; ===========================================================================
0001A342 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001A344 0000                       		dc.w loc_166C8-Tele_Index
0001A346 0000                       		dc.w loc_1675E-Tele_Index
0001A348 0000                       		dc.w loc_16798-Tele_Index
0001A34A                            ; ===========================================================================
0001A34A                            
0001A34A                            Tele_Main:	; Routine 0
0001A34A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A34E 1028 0028                  		move.b	obSubtype(a0),d0
0001A352 D040                       		add.w	d0,d0
0001A354 0240 001E                  		andi.w	#$1E,d0
0001A358 45FA 0000                  		lea	Tele_Data(pc),a2
0001A35C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A360 315A 003A                  		move.w	(a2)+,$3A(a0)
0001A364 214A 003C                  		move.l	a2,$3C(a0)
0001A368 315A 0036                  		move.w	(a2)+,$36(a0)
0001A36C 315A 0038                  		move.w	(a2)+,$38(a0)
0001A370                            
0001A370                            loc_166C8:	; Routine 2
0001A370 43F8 D000                  		lea	(v_player).w,a1
0001A374 3029 0008                  		move.w	obX(a1),d0
0001A378 9068 0008                  		sub.w	obX(a0),d0
0001A37C 0828 0000 0022             		btst	#0,obStatus(a0)
0001A382 6700                       		beq.s	loc_166E0
0001A384 0640 000F                  		addi.w	#$F,d0
0001A388                            
0001A388                            loc_166E0:
0001A388 0C40 0010                  		cmpi.w	#$10,d0
0001A38C 6400                       		bcc.s	locret_1675C
0001A38E 3229 000C                  		move.w	obY(a1),d1
0001A392 9268 000C                  		sub.w	obY(a0),d1
0001A396 0641 0020                  		addi.w	#$20,d1
0001A39A 0C41 0040                  		cmpi.w	#$40,d1
0001A39E 6400                       		bcc.s	locret_1675C
0001A3A0 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A3A4 6600                       		bne.s	locret_1675C
0001A3A6 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001A3AC 6600                       		bne.s	loc_1670E
0001A3AE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001A3B4 6500                       		bcs.s	locret_1675C
0001A3B6                            
0001A3B6                            loc_1670E:
0001A3B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A3BA 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001A3C0 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001A3C6 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001A3CC 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A3D2 337C 0000 0012             		move.w	#0,obVelY(a1)
0001A3D8 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001A3DE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001A3E4 08E9 0001 0022             		bset	#1,obStatus(a1)
0001A3EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A3F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A3F6 4228 0032                  		clr.b	$32(a0)
0001A404                            
0001A404                            locret_1675C:
0001A404 4E75                       		rts	
0001A406                            ; ===========================================================================
0001A406                            
0001A406                            loc_1675E:	; Routine 4
0001A406 43F8 D000                  		lea	(v_player).w,a1
0001A40A 1028 0032                  		move.b	$32(a0),d0
0001A40E 5428 0032                  		addq.b	#2,$32(a0)
0001A412 4EB9 0000 3D28             		jsr	(CalcSine).l
0001A418 EA40                       		asr.w	#5,d0
0001A41A 3428 000C                  		move.w	obY(a0),d2
0001A41E 9440                       		sub.w	d0,d2
0001A420 3342 000C                  		move.w	d2,obY(a1)
0001A424 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001A42A 6600                       		bne.s	locret_16796
0001A42C 6100 0000                  		bsr.w	sub_1681C
0001A430 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A43E                            
0001A43E                            locret_16796:
0001A43E 4E75                       		rts	
0001A440                            ; ===========================================================================
0001A440                            
0001A440                            loc_16798:	; Routine 6
0001A440 588F                       		addq.l	#4,sp
0001A442 43F8 D000                  		lea	(v_player).w,a1
0001A446 5328 002E                  		subq.b	#1,$2E(a0)
0001A44A 6A00                       		bpl.s	loc_167DA
0001A44C 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001A452 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A458 7200                       		moveq	#0,d1
0001A45A 1228 003A                  		move.b	$3A(a0),d1
0001A45E 5801                       		addq.b	#4,d1
0001A460 B228 003B                  		cmp.b	$3B(a0),d1
0001A464 6500                       		bcs.s	loc_167C2
0001A466 7200                       		moveq	#0,d1
0001A468 6000                       		bra.s	loc_16800
0001A46A                            ; ===========================================================================
0001A46A                            
0001A46A                            loc_167C2:
0001A46A 1141 003A                  		move.b	d1,$3A(a0)
0001A46E 2468 003C                  		movea.l	$3C(a0),a2
0001A472 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001A478 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001A47E 6000 0000                  		bra.w	sub_1681C
0001A482                            ; ===========================================================================
0001A482                            
0001A482                            loc_167DA:
0001A482 2429 0008                  		move.l	obX(a1),d2
0001A486 2629 000C                  		move.l	obY(a1),d3
0001A48A 3029 0010                  		move.w	obVelX(a1),d0
0001A48E 48C0                       		ext.l	d0
0001A490 E180                       		asl.l	#8,d0
0001A492 D480                       		add.l	d0,d2
0001A494 3029 0012                  		move.w	obVelY(a1),d0
0001A498 48C0                       		ext.l	d0
0001A49A E180                       		asl.l	#8,d0
0001A49C D680                       		add.l	d0,d3
0001A49E 2342 0008                  		move.l	d2,obX(a1)
0001A4A2 2343 000C                  		move.l	d3,obY(a1)
0001A4A6 4E75                       		rts	
0001A4A8                            ; ===========================================================================
0001A4A8                            
0001A4A8                            loc_16800:
0001A4A8 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001A4AE 4228 0024                  		clr.b	obRoutine(a0)
0001A4B2 4238 F7C8                  		clr.b	(f_lockmulti).w
0001A4B6 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A4BC 337C 0200 0012             		move.w	#$200,obVelY(a1)
0001A4C2 4E75                       		rts	
0001A4C4                            
0001A4C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A4C4                            
0001A4C4                            
0001A4C4                            sub_1681C:
0001A4C4 7000                       		moveq	#0,d0
0001A4C6 343C 1000                  		move.w	#$1000,d2
0001A4CA 3028 0036                  		move.w	$36(a0),d0
0001A4CE 9069 0008                  		sub.w	obX(a1),d0
0001A4D2 6C00                       		bge.s	loc_16830
0001A4D4 4440                       		neg.w	d0
0001A4D6 4442                       		neg.w	d2
0001A4D8                            
0001A4D8                            loc_16830:
0001A4D8 7200                       		moveq	#0,d1
0001A4DA 363C 1000                  		move.w	#$1000,d3
0001A4DE 3228 0038                  		move.w	$38(a0),d1
0001A4E2 9269 000C                  		sub.w	obY(a1),d1
0001A4E6 6C00                       		bge.s	loc_16844
0001A4E8 4441                       		neg.w	d1
0001A4EA 4443                       		neg.w	d3
0001A4EC                            
0001A4EC                            loc_16844:
0001A4EC B240                       		cmp.w	d0,d1
0001A4EE 6500                       		bcs.s	loc_1687A
0001A4F0 7200                       		moveq	#0,d1
0001A4F2 3228 0038                  		move.w	$38(a0),d1
0001A4F6 9269 000C                  		sub.w	obY(a1),d1
0001A4FA 4841                       		swap	d1
0001A4FC 83C3                       		divs.w	d3,d1
0001A4FE 7000                       		moveq	#0,d0
0001A500 3028 0036                  		move.w	$36(a0),d0
0001A504 9069 0008                  		sub.w	obX(a1),d0
0001A508 6700                       		beq.s	loc_16866
0001A50A 4840                       		swap	d0
0001A50C 81C1                       		divs.w	d1,d0
0001A50E                            
0001A50E                            loc_16866:
0001A50E 3340 0010                  		move.w	d0,obVelX(a1)
0001A512 3343 0012                  		move.w	d3,obVelY(a1)
0001A516 4A41                       		tst.w	d1
0001A518 6A00                       		bpl.s	loc_16874
0001A51A 4441                       		neg.w	d1
0001A51C                            
0001A51C                            loc_16874:
0001A51C 3141 002E                  		move.w	d1,$2E(a0)
0001A520 4E75                       		rts	
0001A522                            ; ===========================================================================
0001A522                            
0001A522                            loc_1687A:
0001A522 7000                       		moveq	#0,d0
0001A524 3028 0036                  		move.w	$36(a0),d0
0001A528 9069 0008                  		sub.w	obX(a1),d0
0001A52C 4840                       		swap	d0
0001A52E 81C2                       		divs.w	d2,d0
0001A530 7200                       		moveq	#0,d1
0001A532 3228 0038                  		move.w	$38(a0),d1
0001A536 9269 000C                  		sub.w	obY(a1),d1
0001A53A 6700                       		beq.s	loc_16898
0001A53C 4841                       		swap	d1
0001A53E 83C0                       		divs.w	d0,d1
0001A540                            
0001A540                            loc_16898:
0001A540 3341 0012                  		move.w	d1,obVelY(a1)
0001A544 3342 0010                  		move.w	d2,obVelX(a1)
0001A548 4A40                       		tst.w	d0
0001A54A 6A00                       		bpl.s	loc_168A6
0001A54C 4440                       		neg.w	d0
0001A54E                            
0001A54E                            loc_168A6:
0001A54E 3140 002E                  		move.w	d0,$2E(a0)
0001A552 4E75                       		rts	
0001A554                            ; End of function sub_1681C
0001A554                            
0001A554                            ; ===========================================================================
0001A554 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001A55A 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001A560 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
0001A564 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001A56A 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001A570 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001A576 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001A57C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001A582 0884 0298 0894             		dc.w $884, $298, $894
0001A588 0270 0894 0190             		dc.w $270, $894, $190
0001A58E 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001A594 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001A59A 1184 0498 1158             		dc.w $1184, $498, $1158
0001A5A0 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001A5A6 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001A5AC 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001A5B2 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001A5B8 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001A5BE 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001A5C4 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001A5CA 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001A5D0 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001A5D6 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A5D6 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A5DC                            
0001A5DC                            		include	"_incObj\78 Caterkiller.asm"
0001A5DC                            ; ---------------------------------------------------------------------------
0001A5DC                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001A5DC                            ; ---------------------------------------------------------------------------
0001A5DC                            
0001A5DC                            Caterkiller:
0001A5DC 7000                       		moveq	#0,d0
0001A5DE 1028 0024                  		move.b	obRoutine(a0),d0
0001A5E2 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001A5E6 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001A5EA                            ; ===========================================================================
0001A5EA 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001A5EC 0000                       		dc.w Cat_Head-Cat_Index
0001A5EE 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A5F0 0000                       		dc.w Cat_BodySeg2-Cat_Index
0001A5F2 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A5F4 0000                       		dc.w Cat_Delete-Cat_Index
0001A5F6 0000                       		dc.w loc_16CC0-Cat_Index
0001A5F8                            
0001A5F8 =0000003C                  cat_parent:	equ $3C		; address of parent object
0001A5F8                            ; ===========================================================================
0001A5F8                            
0001A5F8                            locret_16950:
0001A5F8 4E75                       		rts	
0001A5FA                            ; ===========================================================================
0001A5FA                            
0001A5FA                            Cat_Main:	; Routine 0
0001A5FA 117C 0007 0016             		move.b	#7,obHeight(a0)
0001A600 117C 0008 0017             		move.b	#8,obWidth(a0)
0001A606 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001A60C 4EB9 0001 8A76             		jsr	(ObjFloorDist).l
0001A612 4A41                       		tst.w	d1
0001A614 6AE2                       		bpl.s	locret_16950
0001A616 D368 000C                  		add.w	d1,obY(a0)
0001A61A 4268 0012                  		clr.w	obVelY(a0)
0001A61E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A622 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
0001A62A 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001A630 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
0001A636 6700                       		beq.s	@isscrapbrain
0001A638 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001A63E                            
0001A63E                            	@isscrapbrain:
0001A63E 0228 0003 0001             		andi.b	#3,obRender(a0)
0001A644 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A64A 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001A650 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A656 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A65C 117C 000B 0020             		move.b	#$B,obColType(a0)
0001A662 3428 0008                  		move.w	obX(a0),d2
0001A666 7A0C                       		moveq	#$C,d5
0001A668 0828 0000 0022             		btst	#0,obStatus(a0)
0001A66E 6700                       		beq.s	@noflip
0001A670 4445                       		neg.w	d5
0001A672                            
0001A672                            	@noflip:
0001A672 1C3C 0004                  		move.b	#4,d6
0001A676 7600                       		moveq	#0,d3
0001A678 7804                       		moveq	#4,d4
0001A67A 2448                       		movea.l	a0,a2
0001A67C 7202                       		moveq	#2,d1
0001A67E                            
0001A67E                            Cat_Loop:
0001A67E 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001A684 6600 0000                  			bne.w	Cat_ChkGone
0001A688 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001A68C 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001A690 5406                       		addq.b	#2,d6		; alternate between the two
0001A692 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001A698 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001A69E 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001A6A4 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A6AA 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001A6B0 D445                       		add.w	d5,d2
0001A6B2 3342 0008                  		move.w	d2,obX(a1)
0001A6B6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A6BC 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001A6C2 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001A6C8 137C 0008 001A             		move.b	#8,obFrame(a1)
0001A6CE 234A 003C                  		move.l	a2,cat_parent(a1)
0001A6D2 1344 003C                  		move.b	d4,cat_parent(a1)
0001A6D6 5804                       		addq.b	#4,d4
0001A6D8 2449                       		movea.l	a1,a2
0001A6DA                            
0001A6DA                            	@fail:
0001A6DA 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001A6DE                            
0001A6DE 117C 0007 002A             		move.b	#7,$2A(a0)
0001A6E4 4228 003C                  		clr.b	cat_parent(a0)
0001A6E8                            
0001A6E8                            Cat_Head:	; Routine 2
0001A6E8 4A28 0022                  		tst.b	obStatus(a0)
0001A6EC 6B00 0000                  		bmi.w	loc_16C96
0001A6F0 7000                       		moveq	#0,d0
0001A6F2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A6F6 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001A6FA 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001A6FE 1228 002B                  		move.b	$2B(a0),d1
0001A702 6A00                       		bpl.s	@display
0001A704 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A70A 1028 0026                  		move.b	obAngle(a0),d0
0001A70E 0240 007F                  		andi.w	#$7F,d0
0001A712 5828 0026                  		addq.b	#4,obAngle(a0)
0001A716 1031 0000                  		move.b	(a1,d0.w),d0
0001A71A 6A00                       		bpl.s	@animate
0001A71C 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A722 6000                       		bra.s	@display
0001A724                            
0001A724                            	@animate:
0001A724 0201 0010                  		andi.b	#$10,d1
0001A728 D001                       		add.b	d1,d0
0001A72A 1140 001A                  		move.b	d0,obFrame(a0)
0001A72E                            
0001A72E                            	@display:
0001A74C 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001A752                            
0001A752                            	Cat_ChkGone:
0001A752 45F8 FC00                  		lea	(v_objstate).w,a2
0001A756 7000                       		moveq	#0,d0
0001A758 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A75C 6700                       		beq.s	@delete
0001A75E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A764                            
0001A764                            	@delete:
0001A764 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001A76A 4E75                       		rts	
0001A76C                            ; ===========================================================================
0001A76C                            
0001A76C                            Cat_Delete:	; Routine $A
0001A76C 4EF9 0000 F898             		jmp	(DeleteObject).l
0001A772                            ; ===========================================================================
0001A772 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001A774 0000                       		dc.w loc_16B02-Cat_Index2
0001A776                            ; ===========================================================================
0001A776                            
0001A776                            @wait:
0001A776 5328 002A                  		subq.b	#1,$2A(a0)
0001A77A 6B00                       		bmi.s	@move
0001A77C 4E75                       		rts	
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            @move:
0001A77E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A782 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A788 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001A78E 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001A794 0868 0004 002B             		bchg	#4,$2B(a0)
0001A79A 6600                       		bne.s	loc_16AFC
0001A79C 4268 0010                  		clr.w	obVelX(a0)
0001A7A0 4468 001C                  		neg.w	obAnim(a0)
0001A7A4                            
0001A7A4                            loc_16AFC:
0001A7A4 08E8 0007 002B             		bset	#7,$2B(a0)
0001A7AA                            
0001A7AA                            loc_16B02:
0001A7AA 5328 002A                  		subq.b	#1,$2A(a0)
0001A7AE 6B00                       		bmi.s	@loc_16B5E
0001A7B0 4A68 0010                  			tst.w	obVelX(a0)
0001A7B4 6700                       			beq.s	@notmoving
0001A7B6 2428 0008                  			move.l	obX(a0),d2
0001A7BA 2602                       			move.l	d2,d3
0001A7BC 3028 0010                  		move.w	obVelX(a0),d0
0001A7C0 0828 0000 0022             		btst	#0,obStatus(a0)
0001A7C6 6700                       		beq.s	@noflip
0001A7C8 4440                       		neg.w	d0
0001A7CA                            
0001A7CA                            	@noflip:
0001A7CA 48C0                       		ext.l	d0
0001A7CC E180                       		asl.l	#8,d0
0001A7CE D480                       		add.l	d0,d2
0001A7D0 2142 0008                  		move.l	d2,obX(a0)
0001A7D4 4843                       			swap	d3
0001A7D6 B668 0008                  			cmp.w	obX(a0),d3
0001A7DA 6700                       			beq.s	@notmoving
0001A7DC 4EB9 0001 8A76             			jsr	(ObjFloorDist).l
0001A7E2 0C41 FFF8                  			cmpi.w	#-8,d1
0001A7E6 6D00                       			blt.s	@loc_16B70
0001A7E8 0C41 000C                  			cmpi.w	#$C,d1
0001A7EC 6C00                       			bge.s	@loc_16B70
0001A7EE D368 000C                  			add.w	d1,obY(a0)
0001A7F2 7000                       		moveq	#0,d0
0001A7F4 1028 003C                  		move.b	cat_parent(a0),d0
0001A7F8 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A7FC 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A802 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A806                            
0001A806                            	@notmoving:
0001A806 4E75                       		rts	
0001A808                            ; ===========================================================================
0001A808                            
0001A808                            @loc_16B5E:
0001A808 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A80C 117C 0007 002A             		move.b	#7,$2A(a0)
0001A812 4268 0010                  			clr.w	obVelX(a0)
0001A816 4268 001C                  			clr.w	obAnim(a0)
0001A81A 4E75                       		rts	
0001A81C                            ; ===========================================================================
0001A81C                            
0001A81C                            @loc_16B70:
0001A81C 7000                       			moveq	#0,d0
0001A81E 1028 003C                  			move.b	cat_parent(a0),d0
0001A822 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
0001A828 4468 000A                  			neg.w	obX+2(a0)
0001A82C 6700                       			beq.s	@loc_1730A
0001A82E 0828 0000 0022             			btst	#0,obStatus(a0)
0001A834 6700                       			beq.s	@loc_1730A
0001A836 5368 0008                  			subq.w	#1,obX(a0)
0001A83A 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A83E 7000                       			moveq	#0,d0
0001A840 1028 003C                  			move.b	cat_parent(a0),d0
0001A844 4230 002C                  			clr.b	$2C(a0,d0)
0001A848                            	@loc_1730A:
0001A848 0868 0000 0022             			bchg	#0,obStatus(a0)
0001A84E 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
0001A854 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A858 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A85E 4E75                       		rts	
0001A860                            ; ===========================================================================
0001A860                            
0001A860                            Cat_BodySeg2:	; Routine 6
0001A860 2268 003C                  		movea.l	cat_parent(a0),a1
0001A864 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A86A 6A00                       		bpl.s	Cat_BodySeg1
0001A86C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A872 1028 0026                  		move.b	obAngle(a0),d0
0001A876 0240 007F                  		andi.w	#$7F,d0
0001A87A 5828 0026                  		addq.b	#4,obAngle(a0)
0001A87E 4A31 0004                  		tst.b	4(a1,d0.w)
0001A882 6A00                       		bpl.s	Cat_AniBody
0001A884 5828 0026                  		addq.b	#4,obAngle(a0)
0001A888                            
0001A888                            Cat_AniBody:
0001A888 1031 0000                  		move.b	(a1,d0.w),d0
0001A88C 5000                       		addq.b	#8,d0
0001A88E 1140 001A                  		move.b	d0,obFrame(a0)
0001A892                            
0001A892                            Cat_BodySeg1:	; Routine 4, 8
0001A892 2268 003C                  		movea.l	cat_parent(a0),a1
0001A896 4A28 0022                  		tst.b	obStatus(a0)
0001A89A 6B00 0000                  		bmi.w	loc_16C90
0001A89E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A8A4 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
0001A8AA 6700 0000                  		beq.w	loc_16C64
0001A8AE 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
0001A8B4 3029 0010                  		move.w	obVelX(a1),d0
0001A8B8 D068 001C                  			add.w	obAnim(a0),d0
0001A8BC 3140 0010                  		move.w	d0,obVelX(a0)
0001A8C0 2428 0008                  		move.l	obX(a0),d2
0001A8C4 2602                       		move.l	d2,d3
0001A8C6 3028 0010                  		move.w	obVelX(a0),d0
0001A8CA 0828 0000 0022             		btst	#0,obStatus(a0)
0001A8D0 6700                       		beq.s	loc_16C0C
0001A8D2 4440                       		neg.w	d0
0001A8D4                            
0001A8D4                            loc_16C0C:
0001A8D4 48C0                       		ext.l	d0
0001A8D6 E180                       		asl.l	#8,d0
0001A8D8 D480                       		add.l	d0,d2
0001A8DA 2142 0008                  		move.l	d2,obX(a0)
0001A8DE 4843                       		swap	d3
0001A8E0 B668 0008                  		cmp.w	obX(a0),d3
0001A8E4 6700                       		beq.s	loc_16C64
0001A8E6 7000                       		moveq	#0,d0
0001A8E8 1028 003C                  		move.b	cat_parent(a0),d0
0001A8EC 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A8F0 0C01 0080                  		cmpi.b	#$80,d1
0001A8F4 6600                       		bne.s	loc_16C50
0001A8F6 1181 002C                  			move.b	d1,$2C(a0,d0)
0001A8FA 4468 000A                  			neg.w	obX+2(a0)
0001A8FE 6700                       			beq.s	locj_173E4
0001A900 0828 0000 0022             			btst	#0,obStatus(a0)
0001A906 6700                       			beq.s	locj_173E4
0001A908 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
0001A90E 6600                       			bne.s	locj_173E4
0001A910 5368 0008                  			subq.w	#1,obX(a0)
0001A914 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A918 7000                       			moveq	#0,d0
0001A91A 1028 003C                  			move.b	cat_parent(a0),d0
0001A91E 4230 002C                  			clr.b	$2C(a0,d0)
0001A922                            	locj_173E4:
0001A922 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A928 1168 0022 0001             		move.b	obStatus(a0),1(a0)
0001A92E 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A932 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A938 6000                       		bra.s	loc_16C64
0001A93A                            ; ===========================================================================
0001A93A                            
0001A93A                            loc_16C50:
0001A93A 4881                       		ext.w	d1
0001A93C D368 000C                  		add.w	d1,obY(a0)
0001A940 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A944 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A94A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A94E                            
0001A94E                            loc_16C64:
0001A94E 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
0001A954 6700                       		beq.s	loc_16C90
0001A956 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
0001A95A 6700                       		beq.s	loc_16C7C
0001A95C 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
0001A962 6600                       		bne.s	loc_16C82
0001A964                            
0001A964                            loc_16C7C:
0001A964 4229 0020                  		clr.b    $20(a1)
0001A968 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001A96E                            
0001A96E                            loc_16C82:
0001A96E 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001A974                            
0001A974                            ; ===========================================================================
0001A974 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
0001A97C                            ; ===========================================================================
0001A97C                            
0001A97C                            loc_16C90:
0001A97C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001A982                            
0001A982                            loc_16C96:
0001A982 7000                       		moveq	#0,d0
0001A984 1028 0024                  		move.b	obRoutine(a0),d0
0001A988 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
0001A98C 0828 0000 0022             		btst	#0,obStatus(a0)
0001A992 6700                       		beq.s	loc_16CAA
0001A994 4440                       		neg.w	d0
0001A996                            
0001A996                            loc_16CAA:
0001A996 3140 0010                  		move.w	d0,obVelX(a0)
0001A99A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A9A0 117C 000C 0024             		move.b	#$C,obRoutine(a0)
0001A9A6 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
0001A9AC                            
0001A9AC                            loc_16CC0:	; Routine $C
0001A9AC 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001A9B2 4A68 0012                  		tst.w	obVelY(a0)
0001A9B6 6B00                       		bmi.s	loc_16CE0
0001A9B8 4EB9 0001 8A76             		jsr	(ObjFloorDist).l
0001A9BE 4A41                       		tst.w	d1
0001A9C0 6A00                       		bpl.s	loc_16CE0
0001A9C2 D368 000C                  		add.w	d1,obY(a0)
0001A9C6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A9CC                            
0001A9CC                            loc_16CE0:
0001A9CC 4A28 0001                  		tst.b	obRender(a0)
0001A9D0 6A00 FD80                  		bpl.w	Cat_ChkGone
0001A9D4 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001A9D4 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001A9DA                            		include	"_anim\Caterkiller.asm"
0001A9DA                            ; ---------------------------------------------------------------------------
0001A9DA                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A9DA                            ; ---------------------------------------------------------------------------
0001A9DA 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A9EA 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A9FA 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001AA0A 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001AA1A 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001AA2A 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001AA3A 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001AA4A 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001AA5A                            		even
0001AA5A                            		even
0001AA5A                            Map_Cat:	include	"_maps\Caterkiller.asm"
0001AA5A                            ; ---------------------------------------------------------------------------
0001AA5A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001AA5A                            ; ---------------------------------------------------------------------------
0001AA5A                            Map_Cat_internal:
0001AA5A 0000                       		dc.w byte_16D9E-Map_Cat_internal
0001AA5C 0000                       		dc.w byte_16DA4-Map_Cat_internal
0001AA5E 0000                       		dc.w byte_16DAA-Map_Cat_internal
0001AA60 0000                       		dc.w byte_16DB0-Map_Cat_internal
0001AA62 0000                       		dc.w byte_16DB6-Map_Cat_internal
0001AA64 0000                       		dc.w byte_16DBC-Map_Cat_internal
0001AA66 0000                       		dc.w byte_16DC2-Map_Cat_internal
0001AA68 0000                       		dc.w byte_16DC8-Map_Cat_internal
0001AA6A 0000                       		dc.w byte_16DCE-Map_Cat_internal
0001AA6C 0000                       		dc.w byte_16DD4-Map_Cat_internal
0001AA6E 0000                       		dc.w byte_16DDA-Map_Cat_internal
0001AA70 0000                       		dc.w byte_16DE0-Map_Cat_internal
0001AA72 0000                       		dc.w byte_16DE6-Map_Cat_internal
0001AA74 0000                       		dc.w byte_16DEC-Map_Cat_internal
0001AA76 0000                       		dc.w byte_16DF2-Map_Cat_internal
0001AA78 0000                       		dc.w byte_16DF8-Map_Cat_internal
0001AA7A 0000                       		dc.w byte_16DFE-Map_Cat_internal
0001AA7C 0000                       		dc.w byte_16E04-Map_Cat_internal
0001AA7E 0000                       		dc.w byte_16E0A-Map_Cat_internal
0001AA80 0000                       		dc.w byte_16E10-Map_Cat_internal
0001AA82 0000                       		dc.w byte_16E16-Map_Cat_internal
0001AA84 0000                       		dc.w byte_16E1C-Map_Cat_internal
0001AA86 0000                       		dc.w byte_16E22-Map_Cat_internal
0001AA88 0000                       		dc.w byte_16E28-Map_Cat_internal
0001AA8A 01                         byte_16D9E:	dc.b 1
0001AA8B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001AA90 01                         byte_16DA4:	dc.b 1
0001AA91 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001AA96 01                         byte_16DAA:	dc.b 1
0001AA97 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001AA9C 01                         byte_16DB0:	dc.b 1
0001AA9D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001AAA2 01                         byte_16DB6:	dc.b 1
0001AAA3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001AAA8 01                         byte_16DBC:	dc.b 1
0001AAA9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001AAAE 01                         byte_16DC2:	dc.b 1
0001AAAF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001AAB4 01                         byte_16DC8:	dc.b 1
0001AAB5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001AABA 01                         byte_16DCE:	dc.b 1
0001AABB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001AAC0 01                         byte_16DD4:	dc.b 1
0001AAC1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001AAC6 01                         byte_16DDA:	dc.b 1
0001AAC7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001AACC 01                         byte_16DE0:	dc.b 1
0001AACD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001AAD2 01                         byte_16DE6:	dc.b 1
0001AAD3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001AAD8 01                         byte_16DEC:	dc.b 1
0001AAD9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001AADE 01                         byte_16DF2:	dc.b 1
0001AADF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001AAE4 01                         byte_16DF8:	dc.b 1
0001AAE5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001AAEA 01                         byte_16DFE:	dc.b 1
0001AAEB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001AAF0 01                         byte_16E04:	dc.b 1
0001AAF1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001AAF6 01                         byte_16E0A:	dc.b 1
0001AAF7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001AAFC 01                         byte_16E10:	dc.b 1
0001AAFD EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001AB02 01                         byte_16E16:	dc.b 1
0001AB03 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001AB08 01                         byte_16E1C:	dc.b 1
0001AB09 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001AB0E 01                         byte_16E22:	dc.b 1
0001AB0F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001AB14 01                         byte_16E28:	dc.b 1
0001AB15 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001AB1A                            		even
0001AB1A                            		even
0001AB1A                            
0001AB1A                            		include	"_incObj\79 Lamppost.asm"
0001AB1A                            ; ---------------------------------------------------------------------------
0001AB1A                            ; Object 79 - lamppost
0001AB1A                            ; ---------------------------------------------------------------------------
0001AB1A                            
0001AB1A                            Lamppost:
0001AB1A 7000                       		moveq	#0,d0
0001AB1C 1028 0024                  		move.b	obRoutine(a0),d0
0001AB20 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001AB24 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001AB28 4EF9 0001 190C             		jmp	(RememberState).l
0001AB2E                            ; ===========================================================================
0001AB2E 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001AB30 0000                       		dc.w Lamp_Blue-Lamp_Index
0001AB32 0000                       		dc.w Lamp_Finish-Lamp_Index
0001AB34 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001AB36                            
0001AB36 =00000030                  lamp_origX:	equ $30		; original x-axis position
0001AB36 =00000032                  lamp_origY:	equ $32		; original y-axis position
0001AB36 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001AB36                            ; ===========================================================================
0001AB36                            
0001AB36                            Lamp_Main:	; Routine 0
0001AB36 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB3A 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001AB42 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001AB48 117C 0004 0001             		move.b	#4,obRender(a0)
0001AB4E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001AB54 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001AB5A 45F8 FC00                  		lea	(v_objstate).w,a2
0001AB5E 7000                       		moveq	#0,d0
0001AB60 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AB64 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AB6A 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001AB70 6600                       		bne.s	@red
0001AB72 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AB76 0201 007F                  		andi.b	#$7F,d1
0001AB7A 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001AB7E 0202 007F                  		andi.b	#$7F,d2
0001AB82 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AB84 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001AB86                            
0001AB86                            @red:
0001AB86 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AB8C 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AB92 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AB98 4E75                       		rts	
0001AB9A                            
0001AB9A                            ; ===========================================================================
0001AB9A                            
0001AB9A                            Lamp_Blue:	; Routine 2
0001AB9A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001AB9E 6600 0000                  		bne.w	@donothing	; if yes, branch
0001ABA2 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001ABA6 6B00 0000                  		bmi.w	@donothing
0001ABAA 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001ABAE 0201 007F                  		andi.b	#$7F,d1
0001ABB2 1428 0028                  		move.b	obSubtype(a0),d2
0001ABB6 0202 007F                  		andi.b	#$7F,d2
0001ABBA B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001ABBC 6500                       		bcs.s	@chkhit		; if yes, branch
0001ABBE 45F8 FC00                  		lea	(v_objstate).w,a2
0001ABC2 7000                       		moveq	#0,d0
0001ABC4 1028 0023                  		move.b	obRespawnNo(a0),d0
0001ABC8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001ABCE 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001ABD4 117C 0003 001A             		move.b	#3,obFrame(a0)
0001ABDA 6000 0000                  		bra.w	@donothing
0001ABDE                            ; ===========================================================================
0001ABDE                            
0001ABDE                            @chkhit:
0001ABDE 3038 D008                  		move.w	(v_player+obX).w,d0
0001ABE2 9068 0008                  		sub.w	obX(a0),d0
0001ABE6 5040                       		addq.w	#8,d0
0001ABE8 0C40 0010                  		cmpi.w	#$10,d0
0001ABEC 6400 0000                  		bcc.w	@donothing
0001ABF0 3038 D00C                  		move.w	(v_player+obY).w,d0
0001ABF4 9068 000C                  		sub.w	obY(a0),d0
0001ABF8 0640 0040                  		addi.w	#$40,d0
0001ABFC 0C40 0068                  		cmpi.w	#$68,d0
0001AC00 6400                       		bcc.s	@donothing
0001AC02                            
0001AC0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC10 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001AC16 6600                       		bne.s	@fail
0001AC18 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001AC1C 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001AC22 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001AC28 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001AC2E 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001AC34 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001AC3C 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001AC42 137C 0004 0001             		move.b	#4,obRender(a1)
0001AC48 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AC4E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001AC54 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001AC5A 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001AC60                            
0001AC60                            	@fail:
0001AC60 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001AC66 6100 0000                  		bsr.w	Lamp_StoreInfo
0001AC6A 45F8 FC00                  		lea	(v_objstate).w,a2
0001AC6E 7000                       		moveq	#0,d0
0001AC70 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AC74 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AC7A                            
0001AC7A                            	@donothing:
0001AC7A 4E75                       		rts	
0001AC7C                            ; ===========================================================================
0001AC7C                            
0001AC7C                            Lamp_Finish:	; Routine 4	
0001AC7C 4E75                       		rts	
0001AC7E                            ; ===========================================================================
0001AC7E                            
0001AC7E                            Lamp_Twirl:	; Routine 6
0001AC7E 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001AC82 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001AC84 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AC8A                            
0001AC8A                            	@continue:
0001AC8A 1028 0026                  		move.b	obAngle(a0),d0
0001AC8E 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001AC94 0400 0040                  		subi.b	#$40,d0
0001AC98 4EB9 0000 3D28             		jsr	(CalcSine).l
0001AC9E C3FC 0C00                  		muls.w	#$C00,d1
0001ACA2 4841                       		swap	d1
0001ACA4 D268 0030                  		add.w	lamp_origX(a0),d1
0001ACA8 3141 0008                  		move.w	d1,obX(a0)
0001ACAC C1FC 0C00                  		muls.w	#$C00,d0
0001ACB0 4840                       		swap	d0
0001ACB2 D068 0032                  		add.w	lamp_origY(a0),d0
0001ACB6 3140 000C                  		move.w	d0,obY(a0)
0001ACBA 4E75                       		rts	
0001ACBC                            ; ===========================================================================
0001ACBC                            ; ---------------------------------------------------------------------------
0001ACBC                            ; Subroutine to	store information when you hit a lamppost
0001ACBC                            ; ---------------------------------------------------------------------------
0001ACBC                            
0001ACBC                            Lamp_StoreInfo:
0001ACBC 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001ACC2 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001ACC8 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001ACCE 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001ACD4 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001ACDA 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001ACE0 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001ACE6 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001ACEC 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001ACF2 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001ACF8 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001ACFE 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001AD04 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001AD0A 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001AD10 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001AD16 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001AD1C 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001AD22 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001AD28 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001AD2E 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001AD34 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001AD3A 11F8 F5C4 FF96             		move.b	(v_tagwater).w,(v_tagwaterlamp).w ; water switcher state TIS
0001AD40 11F8 FF92 FF94             		move.b	(v_watersplashpos).w,(v_watersplashposlamp).w ; water splash y-pos TIS
0001AD46 4E75                       		rts	
0001AD48                            
0001AD48                            ; ---------------------------------------------------------------------------
0001AD48                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001AD48                            ; ---------------------------------------------------------------------------
0001AD48                            
0001AD48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AD48                            
0001AD48                            
0001AD48                            Lamp_LoadInfo:
0001AD48 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001AD4E 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001AD54 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001AD5A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001AD60 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001AD66 4278 FE20                  		clr.w	(v_rings).w
0001AD6A 4238 FE1B                  		clr.b	(v_lifecount).w
0001AD6E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001AD74 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001AD7A 5338 FE24                  		subq.b	#1,(v_timesec).w
0001AD7E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001AD84 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AD8A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001AD90 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001AD96 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001AD9C 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001ADA2 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001ADA8 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001ADAE 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001ADB4 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001ADBA 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001ADC0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001ADC6 11F8 FF96 F5C4             		move.b	(v_tagwaterlamp).w,(v_tagwater).w ; water switcher state TIS
0001ADCC 11F8 FF94 FF92             		move.b	(v_watersplashposlamp).w,(v_watersplashpos).w ; water splash y-pos TIS
0001ADD2 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001ADD8 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001ADDE 6600                       		bne.s	@notlabyrinth	; if not, branch
0001ADE0                            
0001ADE0 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001ADE6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001ADEC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001ADF2                            
0001ADF2                            	@notlabyrinth:
0001ADF2 4A38 FE30                  		tst.b	(v_lastlamp).w
0001ADF6 6A00                       		bpl.s	locret_170F6
0001ADF8 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001ADFC 0440 00A0                  		subi.w	#$A0,d0
0001AE00 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001AE04                            
0001AE04                            locret_170F6:
0001AE04 4E75                       		rts	
0001AE04 4E75                       		rts	
0001AE06                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001AE06                            ; --------------------------------------------------------------------------------
0001AE06                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AE06                            ; --------------------------------------------------------------------------------
0001AE06                            
0001AE06                            SME_JfaKr:	
0001AE06 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001AE0A 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001AE0E 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001AE10 0A                         SME_JfaKr_A:	dc.b $A	
0001AE11 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001AE16 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AE1B D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001AE20 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001AE25 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AE2A F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AE2F 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AE34 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AE39 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AE3E 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AE43 08                         SME_JfaKr_3D:	dc.b 8	
0001AE44 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AE49 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AE4E F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AE53 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AE58 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AE5D 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AE62 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AE67 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AE6C 02                         SME_JfaKr_66:	dc.b 2	
0001AE6D F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001AE72 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001AE77 0A                         SME_JfaKr_71:	dc.b $A	
0001AE78 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AE7D E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AE82 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AE87 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AE8C 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AE91 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AE96 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AE9B 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AEA0 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001AEA5 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001AEAA 0A                         SME_JfaKr_A4:	dc.b $A	
0001AEAB E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AEB0 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AEB5 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AEBA F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AEBF 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AEC4 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AEC9 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AECE 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AED3 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001AED8 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001AEDE 00                         		even
0001AEDE 00                         		even
0001AEDE                            		include	"_incObj\7D Hidden Bonuses.asm"
0001AEDE                            ; ---------------------------------------------------------------------------
0001AEDE                            ; Object 7D - hidden points at the end of a level
0001AEDE                            ; ---------------------------------------------------------------------------
0001AEDE                            
0001AEDE                            HiddenBonus:
0001AEDE 7000                       		moveq	#0,d0
0001AEE0 1028 0024                  		move.b	obRoutine(a0),d0
0001AEE4 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001AEE8 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001AEEC                            ; ===========================================================================
0001AEEC 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001AEEE 0000                       		dc.w Bonus_Display-Bonus_Index
0001AEF0                            
0001AEF0 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001AEF0                            ; ===========================================================================
0001AEF0                            
0001AEF0                            Bonus_Main:	; Routine 0
0001AEF0 7410                       		moveq	#$10,d2
0001AEF2 3602                       		move.w	d2,d3
0001AEF4 D643                       		add.w	d3,d3
0001AEF6 43F8 D000                  		lea	(v_player).w,a1
0001AEFA 3029 0008                  		move.w	obX(a1),d0
0001AEFE 9068 0008                  		sub.w	obX(a0),d0
0001AF02 D042                       		add.w	d2,d0
0001AF04 B043                       		cmp.w	d3,d0
0001AF06 6400                       		bcc.s	bonu_chkdel
0001AF08 3229 000C                  		move.w	obY(a1),d1
0001AF0C 9268 000C                  		sub.w	obY(a0),d1
0001AF10 D242                       		add.w	d2,d1
0001AF12 B243                       		cmp.w	d3,d1
0001AF14 6400                       		bcc.s	bonu_chkdel
0001AF16 4A78 FE08                  		tst.w	(v_debuguse).w
0001AF1A 6600                       		bne.s	bonu_chkdel
0001AF1C 4A38 F7CD                  		tst.b	(f_bigring).w
0001AF20 6600                       		bne.s	bonu_chkdel
0001AF22 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AF26 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001AF2E 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001AF34 0028 0004 0001             		ori.b	#4,obRender(a0)
0001AF3A 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AF40 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001AF46 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001AF4C 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001AF5C 7000                       		moveq	#0,d0
0001AF5E 1028 0028                  		move.b	obSubtype(a0),d0
0001AF62 D040                       		add.w	d0,d0
0001AF64 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001AF68 4EB9 0000 0000             		jsr	(AddPoints).l
0001AF6E                            
0001AF6E                            bonu_chkdel:
0001AF8A 4E75                       		rts	
0001AF8C                            
0001AF8C                            	@delete:
0001AF8C 4EF9 0000 F898             		jmp	(DeleteObject).l
0001AF92                            
0001AF92                            ; ===========================================================================
0001AF92 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001AF94 03E8                       		dc.w 1000
0001AF96 0064                       		dc.w 100
0001AF98 000A                       		dc.w 10
0001AF9A                            ; ===========================================================================
0001AF9A                            
0001AF9A                            Bonus_Display:	; Routine 2
0001AF9A 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001AF9E 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001AFBC 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001AFC2                            
0001AFC2                            Bonus_Display_Delete:	
0001AFC2 4EF9 0000 F898             		jmp	(DeleteObject).l
0001AFC2 4EF9 0000 F898             		jmp	(DeleteObject).l
0001AFC8                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001AFC8                            ; ---------------------------------------------------------------------------
0001AFC8                            ; Sprite mappings - hidden points at the end of	a level
0001AFC8                            ; ---------------------------------------------------------------------------
0001AFC8                            Map_Bonus_internal:
0001AFC8 0000                       		dc.w @blank-Map_Bonus_internal
0001AFCA 0000                       		dc.w @10000-Map_Bonus_internal
0001AFCC 0000                       		dc.w @1000-Map_Bonus_internal
0001AFCE 0000                       		dc.w @100-Map_Bonus_internal
0001AFD0 00                         @blank:		dc.b 0
0001AFD1 01                         @10000:		dc.b 1
0001AFD2 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001AFD7 01                         @1000:		dc.b 1
0001AFD8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001AFDD 01                         @100:		dc.b 1
0001AFDE F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001AFE4 00                         		even
0001AFE4 00                         		even
0001AFE4                            
0001AFE4                            		include	"_incObj\8A Credits.asm"
0001AFE4                            ; ---------------------------------------------------------------------------
0001AFE4                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001AFE4                            ; ---------------------------------------------------------------------------
0001AFE4                            
0001AFE4                            CreditsText:
0001AFE4 7000                       		moveq	#0,d0
0001AFE6 1028 0024                  		move.b	obRoutine(a0),d0
0001AFEA 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001AFEE 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001AFF2                            ; ===========================================================================
0001AFF2 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001AFF4 0000                       		dc.w Cred_Display-Cred_Index
0001AFF6                            ; ===========================================================================
0001AFF6                            
0001AFF6                            Cred_Main:	; Routine 0
0001AFF6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AFFA 317C 0120 0008             		move.w	#$120,obX(a0)
0001B000 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001B006 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001B00E 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001B014 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001B018 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001B01C 117C 0000 0001             		move.b	#0,obRender(a0)
0001B022 317C 0000 0018             		move.w	#0,obPriority(a0)
0001B028                            
0001B028 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001B02E 6600                       		bne.s	Cred_Display	; if not, branch
0001B030                            
0001B030 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001B036 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001B03C 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001B040 6700                       		beq.s	Cred_Display	; if not, branch
0001B042 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001B048 6600                       		bne.s	Cred_Display	; if not, branch
0001B04A 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001B050 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001B056 4EF9 0000 F898             		jmp	(DeleteObject).l
0001B05C                            ; ===========================================================================
0001B05C                            
0001B05C                            Cred_Display:	; Routine 2
0001B05C 4EF9 0000 F858             		jmp	DisplaySprite
0001B05C 4EF9 0000 F858             		jmp	DisplaySprite
0001B062                            Map_Cred:	include	"_maps\Credits.asm"
0001B062                            ; ---------------------------------------------------------------------------
0001B062                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001B062                            ; ---------------------------------------------------------------------------
0001B062                            Map_Cred_internal:
0001B062 0000                       		dc.w @staff-Map_Cred_internal
0001B064 0000                       		dc.w @gameplan-Map_Cred_internal
0001B066 0000                       		dc.w @program-Map_Cred_internal
0001B068 0000                       		dc.w @character-Map_Cred_internal
0001B06A 0000                       		dc.w @design-Map_Cred_internal
0001B06C 0000                       		dc.w @soundproduce-Map_Cred_internal
0001B06E 0000                       		dc.w @soundprogram-Map_Cred_internal
0001B070 0000                       		dc.w @thanks-Map_Cred_internal
0001B072 0000                       		dc.w @presentedby-Map_Cred_internal
0001B074 0000                       		dc.w @tryagain-Map_Cred_internal
0001B076 0000                       		dc.w @sonicteam-Map_Cred_internal
0001B078 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001B079 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001B07E F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001B083 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001B088 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001B08D F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001B092 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001B097 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001B09C F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001B0A1 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001B0A6 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001B0AB F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001B0B0 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001B0B5 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001B0BA F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001B0BF 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001B0C0 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001B0C5 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001B0CA 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001B0CF 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001B0D4 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B0D9 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001B0DE 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001B0E3 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001B0E8 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001B0ED                            
0001B0ED B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B0F2 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B0F7 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B0FC B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B101 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B106 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001B107 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B10C 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B111 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001B116 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001B11B 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001B120 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001B125 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001B12A                            
0001B12A B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001B12F B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001B134 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001B139 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001B13E B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001B143 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001B148 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001B14D B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001B152                            
0001B152 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001B157 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001B15C                            
0001B15C D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001B161 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001B166 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001B16B D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001B170 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001B175 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001B17A                            
0001B17A F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001B17F F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001B184 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001B189 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001B18A 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001B18F 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B194 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001B199                            
0001B199 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B19E B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B1A3 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B1A8 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B1AD B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001B1B2 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001B1B3 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001B1B8 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001B1BD 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001B1C2 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001B1C7 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001B1CC 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001B1D1                            
0001B1D1 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B1D6 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B1DB B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B1E0 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B1E5 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B1EA 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001B1EB 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B1F0 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001B1F5 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001B1FA 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001B1FF 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001B204 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B209 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001B20E 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001B213 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001B218 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001B21D                            
0001B21D B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001B222 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001B227 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001B22C B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001B231 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001B236 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001B23B B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001B240 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001B245                            
0001B245 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001B24A D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001B24F D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001B254 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001B259 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001B25E D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001B263 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001B268 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001B26D D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001B272 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001B277 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001B278 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001B27D D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001B282 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001B287 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001B28C D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001B291 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001B296 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001B29B D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001B2A0 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001B2A5 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001B2AA D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001B2AF D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001B2B4 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001B2B9 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001B2BE 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001B2C3 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001B2C8 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001B2CD 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001B2D2 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001B2D7 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001B2DC 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001B2E1 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001B2E6 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001B2EB 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001B2EC 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B2F1 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001B2F6 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B2FB 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001B300 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001B305 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001B30A 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001B30F 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B314                            
0001B314 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001B319 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001B31E B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001B323 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001B328 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001B32D B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001B332                            
0001B332 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001B337 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B33C D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001B341 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001B342 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B347 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B34C 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B351 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001B356 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001B35B 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001B360 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001B365 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001B36A 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001B36F                            
0001B36F B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001B374 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001B379                            
0001B379 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001B37E D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B383 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001B388 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001B38D D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001B392 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001B393 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001B398 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001B39D 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001B3A2 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001B3A7 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001B3AC 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001B3B1 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001B3B6 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001B3BB 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001B3BC E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001B3C1 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001B3C6 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001B3CB E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001B3D0 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001B3D5 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001B3DA                            
0001B3DA 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001B3DF 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001B3E4 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001B3E9 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001B3EE 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001B3F3 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001B3F8 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001B3FD 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001B402                            		even
0001B402                            		even
0001B402                            
0001B402                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001B402                            ; ---------------------------------------------------------------------------
0001B402                            ; Object 3D - Eggman (GHZ)
0001B402                            ; ---------------------------------------------------------------------------
0001B402                            
0001B402                            BossGreenHill:
0001B402 7000                       		moveq	#0,d0
0001B404 1028 0024                  		move.b	obRoutine(a0),d0
0001B408 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001B40C 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001B410                            ; ===========================================================================
0001B410 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001B412 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001B414 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001B416 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001B418                            
0001B418 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001B41A 0401                       		dc.b 4,	1
0001B41C 0607                       		dc.b 6,	7
0001B41E                            ; ===========================================================================
0001B41E                            
0001B41E                            BGHZ_Main:	; Routine 0
0001B41E 45F9 0001 B418             		lea	(BGHZ_ObjData).l,a2
0001B424 2248                       		movea.l	a0,a1
0001B426 7202                       		moveq	#2,d1
0001B428 6000                       		bra.s	BGHZ_LoadBoss
0001B42A                            ; ===========================================================================
0001B42A                            
0001B42A                            BGHZ_Loop:
0001B42A 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001B430 6600                       		bne.s	loc_17772
0001B432                            
0001B432                            BGHZ_LoadBoss:
0001B432 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B436 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001B43A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B440 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B446 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001B44E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B454 137C 0004 0001             		move.b	#4,obRender(a1)
0001B45A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B460 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001B466 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B46A 2348 0034                  		move.l	a0,$34(a1)
0001B46E 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001B472                            
0001B472                            loc_17772:
0001B472 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B478 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B47E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B484 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B48A                            
0001B48A                            
0001B48A                            BGHZ_ShipMain:	; Routine 2
0001B48A 7000                       		moveq	#0,d0
0001B48C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B490 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001B494 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001B498 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B49E 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001B4A4 1028 0022                  		move.b	obStatus(a0),d0
0001B4A8 0200 0003                  		andi.b	#3,d0
0001B4AC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B4B2 8128 0001                  		or.b	d0,obRender(a0)
0001B4B6 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B4BC                            ; ===========================================================================
0001B4BC 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001B4BE 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001B4C0 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001B4C2 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001B4C4 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001B4C6 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001B4C8 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001B4CA                            ; ===========================================================================
0001B4CA                            
0001B4CA                            BGHZ_ShipStart:
0001B4CA 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001B4D0 6100 0000                  		bsr.w	BossMove
0001B4D4 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001B4DA 6600                       		bne.s	loc_177E6
0001B4DC 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001B4E2 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001B4E6                            
0001B4E6                            loc_177E6:
0001B4E6 1028 003F                  		move.b	$3F(a0),d0
0001B4EA 4EB9 0000 3D28             		jsr	(CalcSine).l
0001B4F0 EC40                       		asr.w	#6,d0
0001B4F2 D068 0038                  		add.w	$38(a0),d0
0001B4F6 3140 000C                  		move.w	d0,obY(a0)
0001B4FA 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B500 5428 003F                  		addq.b	#2,$3F(a0)
0001B504 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001B50A 6400                       		bcc.s	locret_1784A
0001B50C 4A28 0022                  		tst.b	obStatus(a0)
0001B510 6B00                       		bmi.s	loc_1784C
0001B512 4A28 0020                  		tst.b	obColType(a0)
0001B516 6600                       		bne.s	locret_1784A
0001B518 4A28 003E                  		tst.b	$3E(a0)
0001B51C 6600                       		bne.s	BGHZ_ShipFlash
0001B51E 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001B52E                            
0001B52E                            BGHZ_ShipFlash:
0001B52E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001B532 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B534 4A51                       		tst.w	(a1)
0001B536 6600                       		bne.s	loc_1783C
0001B538 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001B53C                            
0001B53C                            loc_1783C:
0001B53C 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001B53E 5328 003E                  		subq.b	#1,$3E(a0)
0001B542 6600                       		bne.s	locret_1784A
0001B544 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B54A                            
0001B54A                            locret_1784A:
0001B54A 4E75                       		rts	
0001B54C                            ; ===========================================================================
0001B54C                            
0001B54C                            loc_1784C:
0001B54C 7064                       		moveq	#100,d0
0001B54E 6100 0000                  		bsr.w	AddPoints
0001B552 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001B558 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001B55E 4E75                       		rts	
0001B55E 4E75                       		rts	
0001B560                            
0001B560                            ; ---------------------------------------------------------------------------
0001B560                            ; Defeated boss	subroutine
0001B560                            ; ---------------------------------------------------------------------------
0001B560                            
0001B560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B560                            
0001B560                            
0001B560                            BossDefeated:
0001B560 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001B564 0200 0007                  		andi.b	#7,d0
0001B568 6600                       		bne.s	locret_178A2
0001B56A 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001B570 6600                       		bne.s	locret_178A2
0001B572 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001B576 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B57C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B582 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001B588 3200                       		move.w	d0,d1
0001B58A 7200                       		moveq	#0,d1
0001B58C 1200                       		move.b	d0,d1
0001B58E E409                       		lsr.b	#2,d1
0001B590 0441 0020                  		subi.w	#$20,d1
0001B594 D369 0008                  		add.w	d1,obX(a1)
0001B598 E048                       		lsr.w	#8,d0
0001B59A E608                       		lsr.b	#3,d0
0001B59C D169 000C                  		add.w	d0,obY(a1)
0001B5A0                            
0001B5A0                            locret_178A2:
0001B5A0 4E75                       		rts	
0001B5A2                            ; End of function BossDefeated
0001B5A2                            
0001B5A2                            ; ---------------------------------------------------------------------------
0001B5A2                            ; Subroutine to	move a boss
0001B5A2                            ; ---------------------------------------------------------------------------
0001B5A2                            
0001B5A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5A2                            
0001B5A2                            
0001B5A2                            BossMove:
0001B5A2 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001B5A8 E188                       		lsl.l	#8,d0
0001B5AA D1A8 0030                  		add.l	d0,$30(a0)
0001B5AE E18A                       		lsl.l	#8,d2
0001B5B0 D5A8 0038                  		add.l	d2,$38(a0)
0001B5B4 4E75                       		rts
0001B5B6                            ; End of function BossMove
0001B5B6                            
0001B5B6                            ; ===========================================================================
0001B5B6                            
0001B5B6                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001B5B6                            
0001B5B6                            BGHZ_MakeBall:
0001B5B6 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001B5BC 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B5C2 6100 FFDE                  		bsr.w	BossMove
0001B5C6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B5CC 6600                       		bne.s	loc_17916
0001B5CE 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B5D4 317C 0000 0012             		move.w	#0,obVelY(a0)
0001B5DA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B5DE 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001B5E4 6600                       		bne.s	loc_17910
0001B5E6 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001B5EA 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001B5F0 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B5F6 2348 0034                  		move.l	a0,$34(a1)
0001B5FA                            
0001B5FA                            loc_17910:
0001B5FA 317C 0077 003C             		move.w	#$77,$3C(a0)
0001B600                            
0001B600                            loc_17916:
0001B600 6000 FEE4                  		bra.w	loc_177E6
0001B604                            ; ===========================================================================
0001B604                            
0001B604                            BGHZ_ShipMove:
0001B604 5368 003C                  		subq.w	#1,$3C(a0)
0001B608 6A00                       		bpl.s	BGHZ_Reverse
0001B60A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B60E 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B614 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001B61A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B620 6600                       		bne.s	BGHZ_Reverse
0001B622 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001B628 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001B62E                            
0001B62E                            BGHZ_Reverse:
0001B62E 0828 0000 0022             		btst	#0,obStatus(a0)
0001B634 6600                       		bne.s	loc_17950
0001B636 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001B63A                            
0001B63A                            loc_17950:
0001B63A 6000 FEAA                  		bra.w	loc_177E6
0001B63E                            ; ===========================================================================
0001B63E                            
0001B63E                            loc_17954:
0001B63E 5368 003C                  		subq.w	#1,$3C(a0)
0001B642 6B00                       		bmi.s	loc_17960
0001B644 6100 FF5C                  		bsr.w	BossMove
0001B648 6000                       		bra.s	loc_17976
0001B64A                            ; ===========================================================================
0001B64A                            
0001B64A                            loc_17960:
0001B64A 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B650 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B656 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B65A 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B660                            
0001B660                            loc_17976:
0001B660 6000 FE84                  		bra.w	loc_177E6
0001B664                            ; ===========================================================================
0001B664                            
0001B664                            loc_1797A:
0001B664 5368 003C                  		subq.w	#1,$3C(a0)
0001B668 6B00                       		bmi.s	loc_17984
0001B66A 6000 FEF4                  		bra.w	BossDefeated
0001B66E                            ; ===========================================================================
0001B66E                            
0001B66E                            loc_17984:
0001B66E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B674 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B67A 4268 0010                  		clr.w	obVelX(a0)
0001B67E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B682 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B688 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B68C 6600                       		bne.s	locret_179AA
0001B68E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B694                            
0001B694                            locret_179AA:
0001B694 4E75                       		rts	
0001B696                            ; ===========================================================================
0001B696                            
0001B696                            loc_179AC:
0001B696 5268 003C                  		addq.w	#1,$3C(a0)
0001B69A 6700                       		beq.s	loc_179BC
0001B69C 6A00                       		bpl.s	loc_179C2
0001B69E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B6A4 6000                       		bra.s	loc_179EE
0001B6A6                            ; ===========================================================================
0001B6A6                            
0001B6A6                            loc_179BC:
0001B6A6 4268 0012                  		clr.w	obVelY(a0)
0001B6AA 6000                       		bra.s	loc_179EE
0001B6AC                            ; ===========================================================================
0001B6AC                            
0001B6AC                            loc_179C2:
0001B6AC 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B6B2 6500                       		bcs.s	loc_179DA
0001B6B4 6700                       		beq.s	loc_179E0
0001B6B6 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B6BC 6500                       		bcs.s	loc_179EE
0001B6BE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6C2 6000                       		bra.s	loc_179EE
0001B6C4                            ; ===========================================================================
0001B6C4                            
0001B6C4                            loc_179DA:
0001B6C4 5168 0012                  		subq.w	#8,obVelY(a0)
0001B6C8 6000                       		bra.s	loc_179EE
0001B6CA                            ; ===========================================================================
0001B6CA                            
0001B6CA                            loc_179E0:
0001B6CA 4268 0012                          clr.w    obVelY(a0)
0001B6CE 4A38 FE2D                          tst.b     (v_invinc).w
0001B6D2 6600                               bne.s   @boss_invinc
0001B6D4 4A38 FE2E                          tst.b     (v_shoes).w
0001B6D8 6600                               bne.s   @boss_shoes
0001B6DA                            
0001B6DA 1038 F5C6                          move.b   (v_Saved_music),d0
0001B6DE 6000 0000                          bra.w      @boss_play
0001B6E2                            
0001B6E2                            @boss_invinc:
0001B6E2 103C 0000                          move.b #bgm_Invincible,d0
0001B6E6                            
0001B6E6                            @boss_shoes:
0001B6E6 103C 0000                          move.b #bgm_Ending,d0
0001B6EA                            
0001B6EA                            @boss_play:
0001B6EA 4EB8 12F8                          jsr PlaySound
0001B6EE                            
0001B6EE                            loc_179EE:
0001B6EE 6100 FEB2                  		bsr.w	BossMove
0001B6F2 6000 FDF2                  		bra.w	loc_177E6
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            loc_179F6:
0001B6F6 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B6FC 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B702 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001B708 6700                       		beq.s	loc_17A10
0001B70A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B70E 6000                       		bra.s	loc_17A16
0001B710                            ; ===========================================================================
0001B710                            
0001B710                            loc_17A10:
0001B710 4A28 0001                  		tst.b	obRender(a0)
0001B714 6A00                       		bpl.s	BGHZ_ShipDel
0001B716                            
0001B716                            loc_17A16:
0001B716 6100 FE8A                  		bsr.w	BossMove
0001B71A 6000 FDCA                  		bra.w	loc_177E6
0001B71E                            ; ===========================================================================
0001B71E                            
0001B71E                            BGHZ_ShipDel:
0001B71E 4EF9 0000 F898             		jmp	(DeleteObject).l
0001B724                            ; ===========================================================================
0001B724                            
0001B724                            BGHZ_FaceMain:	; Routine 4
0001B724 7000                       		moveq	#0,d0
0001B726 7201                       		moveq	#1,d1
0001B728 2268 0034                  		movea.l	$34(a0),a1
0001B72C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B730 5900                       		subq.b	#4,d0
0001B732 6600                       		bne.s	loc_17A3E
0001B734 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001B73A 6600                       		bne.s	loc_17A46
0001B73C 7204                       		moveq	#4,d1
0001B73E                            
0001B73E                            loc_17A3E:
0001B73E 5D00                       		subq.b	#6,d0
0001B740 6B00                       		bmi.s	loc_17A46
0001B742 720A                       		moveq	#$A,d1
0001B744 6000                       		bra.s	loc_17A5A
0001B746                            ; ===========================================================================
0001B746                            
0001B746                            loc_17A46:
0001B746 4A29 0020                  		tst.b	obColType(a1)
0001B74A 6600                       		bne.s	loc_17A50
0001B74C 7205                       		moveq	#5,d1
0001B74E 6000                       		bra.s	loc_17A5A
0001B750                            ; ===========================================================================
0001B750                            
0001B750                            loc_17A50:
0001B750 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B756 6500                       		bcs.s	loc_17A5A
0001B758 7204                       		moveq	#4,d1
0001B75A                            
0001B75A                            loc_17A5A:
0001B75A 1141 001C                  		move.b	d1,obAnim(a0)
0001B75E 5500                       		subq.b	#2,d0
0001B760 6600                       		bne.s	BGHZ_FaceDisp
0001B762 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B768 4A28 0001                  		tst.b	obRender(a0)
0001B76C 6A00                       		bpl.s	BGHZ_FaceDel
0001B76E                            
0001B76E                            BGHZ_FaceDisp:
0001B76E 6000                       		bra.s	BGHZ_Display
0001B770                            ; ===========================================================================
0001B770                            
0001B770                            BGHZ_FaceDel:
0001B770 4EF9 0000 F898             		jmp	(DeleteObject).l
0001B776                            ; ===========================================================================
0001B776                            
0001B776                            BGHZ_FlameMain:	; Routine 6
0001B776 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B77C 2268 0034                  		movea.l	$34(a0),a1
0001B780 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001B786 6600                       		bne.s	loc_17A96
0001B788 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B78E 4A28 0001                  		tst.b	obRender(a0)
0001B792 6A00                       		bpl.s	BGHZ_FlameDel
0001B794 6000                       		bra.s	BGHZ_FlameDisp
0001B796                            ; ===========================================================================
0001B796                            
0001B796                            loc_17A96:
0001B796 3029 0010                  		move.w	obVelX(a1),d0
0001B79A 6700                       		beq.s	BGHZ_FlameDisp
0001B79C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B7A2                            
0001B7A2                            BGHZ_FlameDisp:
0001B7A2 6000                       		bra.s	BGHZ_Display
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            BGHZ_FlameDel:
0001B7A4 4EF9 0000 F898             		jmp	(DeleteObject).l
0001B7AA                            ; ===========================================================================
0001B7AA                            
0001B7AA                            BGHZ_Display:
0001B7AA 2268 0034                  		movea.l	$34(a0),a1
0001B7AE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B7B4 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B7BA 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B7C0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B7C6 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001B7CC 1028 0022                  		move.b	obStatus(a0),d0
0001B7D0 0200 0003                  		andi.b	#3,d0
0001B7D4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B7DA 8128 0001                  		or.b	d0,obRender(a0)
0001B7DE 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B7DE 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B7E4                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001B7E4                            ; ---------------------------------------------------------------------------
0001B7E4                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B7E4                            ; ---------------------------------------------------------------------------
0001B7E4                            
0001B7E4                            BossBall:
0001B7E4 7000                       		moveq	#0,d0
0001B7E6 1028 0024                  		move.b	obRoutine(a0),d0
0001B7EA 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001B7EE 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001B7F2                            ; ===========================================================================
0001B7F2 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001B7F4 0000                       		dc.w GBall_Base-GBall_Index
0001B7F6 0000                       		dc.w GBall_Display2-GBall_Index
0001B7F8 0000                       		dc.w loc_17C68-GBall_Index
0001B7FA 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001B7FC                            ; ===========================================================================
0001B7FC                            
0001B7FC                            GBall_Main:	; Routine 0
0001B7FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B800 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001B806 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001B80C 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001B814 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001B81A 45E8 0028                  		lea	obSubtype(a0),a2
0001B81E 14FC 0000                  		move.b	#0,(a2)+
0001B822 7205                       		moveq	#5,d1
0001B824 2248                       		movea.l	a0,a1
0001B826 6000                       		bra.s	loc_17B60
0001B828                            ; ===========================================================================
0001B828                            
0001B828                            GBall_MakeLinks:
0001B828 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001B82E 6600                       		bne.s	GBall_MakeBall
0001B830 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B836 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B83C 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001B840 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001B846 237C 0000 94A4 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001B84E 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001B854 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B85A 5228 0028                  		addq.b	#1,obSubtype(a0)
0001B85E                            
0001B85E                            loc_17B60:
0001B85E 3A09                       		move.w	a1,d5
0001B860 0445 D000                  		subi.w	#$D000,d5
0001B864 EC4D                       		lsr.w	#6,d5
0001B866 0245 007F                  		andi.w	#$7F,d5
0001B86A 14C5                       		move.b	d5,(a2)+
0001B86C 137C 0004 0001             		move.b	#4,obRender(a1)
0001B872 137C 0008 0014             		move.b	#8,obActWid(a1)
0001B878 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001B87E 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001B884 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001B888                            
0001B888                            GBall_MakeBall:
0001B888 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001B88E 237C 0000 9A00 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001B896 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001B89C 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B8A2 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001B8A8 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001B8AE 4E75                       		rts	
0001B8B0                            ; ===========================================================================
0001B8B0                            
0001B8B0 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B8B6                            
0001B8B6                            ; ===========================================================================
0001B8B6                            
0001B8B6                            GBall_Base:	; Routine 2
0001B8B6 47F9 0001 B8B0             		lea	(GBall_PosData).l,a3
0001B8BC 45E8 0028                  		lea	obSubtype(a0),a2
0001B8C0 7C00                       		moveq	#0,d6
0001B8C2 1C1A                       		move.b	(a2)+,d6
0001B8C4                            
0001B8C4                            loc_17BC6:
0001B8C4 7800                       		moveq	#0,d4
0001B8C6 181A                       		move.b	(a2)+,d4
0001B8C8 ED4C                       		lsl.w	#6,d4
0001B8CA 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001B8D0 2244                       		movea.l	d4,a1
0001B8D2 101B                       		move.b	(a3)+,d0
0001B8D4 B029 003C                  		cmp.b	$3C(a1),d0
0001B8D8 6700                       		beq.s	loc_17BE0
0001B8DA 5229 003C                  		addq.b	#1,$3C(a1)
0001B8DE                            
0001B8DE                            loc_17BE0:
0001B8DE 51CE FFE4                  		dbf	d6,loc_17BC6
0001B8E2                            
0001B8E2 B029 003C                  		cmp.b	$3C(a1),d0
0001B8E6 6600                       		bne.s	loc_17BFA
0001B8E8 2268 0034                  		movea.l	$34(a0),a1
0001B8EC 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001B8F2 6600                       		bne.s	loc_17BFA
0001B8F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B8F8                            
0001B8F8                            loc_17BFA:
0001B8F8 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B8FE 6700                       		beq.s	GBall_Display
0001B900 5268 0032                  		addq.w	#1,$32(a0)
0001B904                            
0001B904                            GBall_Display:
0001B904 6100 0000                  		bsr.w	sub_17C2A
0001B908 1028 0026                  		move.b	obAngle(a0),d0
0001B90C 4EB9 0000 9416             		jsr	(Swing_Move2).l
0001B912 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B918                            ; ===========================================================================
0001B918                            
0001B918                            GBall_Display2:	; Routine 4
0001B918 6100 0000                  		bsr.w	sub_17C2A
0001B91C 4EB9 0000 93D6             		jsr	(Obj48_Move).l
0001B922 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B928                            
0001B928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B928                            
0001B928                            
0001B928                            sub_17C2A:
0001B928 2268 0034                  		movea.l	$34(a0),a1
0001B92C 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001B932 6400                       		bcc.s	loc_17C3C
0001B934 0868 0000 001A             		bchg	#0,obFrame(a0)
0001B93A                            
0001B93A                            loc_17C3C:
0001B93A 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001B940 3029 000C                  		move.w	obY(a1),d0
0001B944 D068 0032                  		add.w	$32(a0),d0
0001B948 3140 0038                  		move.w	d0,$38(a0)
0001B94C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B952 4A29 0022                  		tst.b	obStatus(a1)
0001B956 6A00                       		bpl.s	locret_17C66
0001B958 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B95C 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B962                            
0001B962                            locret_17C66:
0001B962 4E75                       		rts	
0001B964                            ; End of function sub_17C2A
0001B964                            
0001B964                            ; ===========================================================================
0001B964                            
0001B964                            loc_17C68:	; Routine 6
0001B964 2268 0034                  		movea.l	$34(a0),a1
0001B968 4A29 0022                  		tst.b	obStatus(a1)
0001B96C 6A00                       		bpl.s	GBall_Display3
0001B96E 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B972 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B978                            
0001B978                            GBall_Display3:
0001B978 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B97E                            ; ===========================================================================
0001B97E                            
0001B97E                            GBall_ChkVanish:; Routine 8
0001B97E 7000                       		moveq	#0,d0
0001B980 4A28 001A                  		tst.b	obFrame(a0)
0001B984 6600                       		bne.s	GBall_Vanish
0001B986 5200                       		addq.b	#1,d0
0001B988                            
0001B988                            GBall_Vanish:
0001B988 1140 001A                  		move.b	d0,obFrame(a0)
0001B98C 2268 0034                  		movea.l	$34(a0),a1
0001B990 4A29 0022                  		tst.b	obStatus(a1)
0001B994 6A00                       		bpl.s	GBall_Display4
0001B996 117C 0000 0020             		move.b	#0,obColType(a0)
0001B99C 6100 FBC2                  		bsr.w	BossDefeated
0001B9A0 5328 003C                  		subq.b	#1,$3C(a0)
0001B9A4 6A00                       		bpl.s	GBall_Display4
0001B9A6 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001B9AA 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B9B0                            
0001B9B0                            GBall_Display4:
0001B9B0 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B9B0 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001B9B6                            		include	"_anim\Eggman.asm"
0001B9B6                            ; ---------------------------------------------------------------------------
0001B9B6                            ; Animation script - Eggman (bosses)
0001B9B6                            ; ---------------------------------------------------------------------------
0001B9B6 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001B9B8 0000                       		dc.w @facenormal1-Ani_Eggman
0001B9BA 0000                       		dc.w @facenormal2-Ani_Eggman
0001B9BC 0000                       		dc.w @facenormal3-Ani_Eggman
0001B9BE 0000                       		dc.w @facelaugh-Ani_Eggman
0001B9C0 0000                       		dc.w @facehit-Ani_Eggman
0001B9C2 0000                       		dc.w @facepanic-Ani_Eggman
0001B9C4 0000                       		dc.w @blank-Ani_Eggman
0001B9C6 0000                       		dc.w @flame1-Ani_Eggman
0001B9C8 0000                       		dc.w @flame2-Ani_Eggman
0001B9CA 0000                       		dc.w @facedefeat-Ani_Eggman
0001B9CC 0000                       		dc.w @escapeflame-Ani_Eggman
0001B9CE 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001B9D2 00                         		even
0001B9D2 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001B9D6                            		even
0001B9D6 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001B9DA                            		even
0001B9DA 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001B9DE                            		even
0001B9DE 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001B9E2                            		even
0001B9E2 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001B9E6                            		even
0001B9E6 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001B9EA                            		even
0001B9EA 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001B9EE 00                         		even
0001B9EE 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001B9F2                            		even
0001B9F2 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001B9F6                            		even
0001B9F6 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001B9FA 00                         		even
0001B9FA 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001BA06 00                         		even
0001BA06 00                         		even
0001BA06                            Map_Eggman:	include	"_maps\Eggman.asm"
0001BA06                            ; --------------------------------------------------------------------------------
0001BA06                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001BA06                            ; --------------------------------------------------------------------------------
0001BA06                            
0001BA06                            SME_F_pyS:	
0001BA06 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001BA0A 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001BA0E 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001BA12 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001BA16 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001BA1A 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001BA1E 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001BA20 05                         SME_F_pyS_1A:	dc.b 5	
0001BA21 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001BA26 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001BA2B FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001BA30 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001BA35 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001BA3A 03                         SME_F_pyS_34:	dc.b 3	
0001BA3B E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001BA40 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001BA45 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001BA4A 03                         SME_F_pyS_44:	dc.b 3	
0001BA4B E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001BA50 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001BA55 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001BA5A 04                         SME_F_pyS_54:	dc.b 4	
0001BA5B E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001BA60 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001BA65 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001BA6A EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BA6F 04                         SME_F_pyS_69:	dc.b 4	
0001BA70 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001BA75 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001BA7A EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001BA7F EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BA84 04                         SME_F_pyS_7E:	dc.b 4	
0001BA85 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001BA8A EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001BA8F EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001BA94 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BA99 04                         SME_F_pyS_93:	dc.b 4	
0001BA9A E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001BA9F E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001BAA4 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001BAA9 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001BAAE 07                         SME_F_pyS_A8:	dc.b 7	
0001BAAF E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001BAB4 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001BAB9 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001BABE EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001BAC3 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001BAC8 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001BACD EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001BAD2 01                         SME_F_pyS_CC:	dc.b 1	
0001BAD3 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001BAD8 01                         SME_F_pyS_D2:	dc.b 1	
0001BAD9 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001BADE 00                         SME_F_pyS_D8:	dc.b 0	
0001BADF 02                         SME_F_pyS_D9:	dc.b 2	
0001BAE0 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001BAE5 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001BAEA 02                         SME_F_pyS_E4:	dc.b 2	
0001BAEB F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001BAF0 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001BAF6 00                         		even
0001BAF6 00                         		even
0001BAF6                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001BAF6                            ; ---------------------------------------------------------------------------
0001BAF6                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001BAF6                            ; ---------------------------------------------------------------------------
0001BAF6                            Map_BossItems_internal:
0001BAF6 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001BAF8 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001BAFA 0000                       		dc.w @cross-Map_BossItems_internal
0001BAFC 0000                       		dc.w @widepipe-Map_BossItems_internal
0001BAFE 0000                       		dc.w @pipe-Map_BossItems_internal
0001BB00 0000                       		dc.w @spike-Map_BossItems_internal
0001BB02 0000                       		dc.w @legmask-Map_BossItems_internal
0001BB04 0000                       		dc.w @legs-Map_BossItems_internal
0001BB06 01                         @chainanchor1:	dc.b 1
0001BB07 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001BB0C 02                         @chainanchor2:	dc.b 2
0001BB0D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001BB12 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BB18 00                         		even
0001BB18 01                         @cross:		dc.b 1
0001BB19 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001BB1E 01                         @widepipe:	dc.b 1
0001BB1F 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001BB24 01                         @pipe:		dc.b 1
0001BB25 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001BB2A 04                         @spike:		dc.b 4
0001BB2B F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001BB30 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001BB35 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001BB3A 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001BB40 00                         		even
0001BB40 02                         @legmask:	dc.b 2
0001BB41 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001BB46 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001BB4C 00                         		even
0001BB4C 02                         @legs:		dc.b 2
0001BB4D 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001BB52 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001BB58 00                         		even
0001BB58 00                         		even
0001BB58                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001BB58                            ; ---------------------------------------------------------------------------
0001BB58                            ; Object 77 - Eggman (LZ)
0001BB58                            ; ---------------------------------------------------------------------------
0001BB58                            
0001BB58                            BossLabyrinth:
0001BB58 7000                       		moveq	#0,d0
0001BB5A 1028 0024                  		move.b	obRoutine(a0),d0
0001BB5E 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001BB62 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001BB66                            ; ===========================================================================
0001BB66 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001BB68 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001BB6A 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001BB6C 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001BB6E                            
0001BB6E 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001BB70 0401                       		dc.b 4,	1
0001BB72 0607                       		dc.b 6,	7
0001BB74                            ; ===========================================================================
0001BB74                            
0001BB74                            Obj77_Main:	; Routine 0
0001BB74 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001BB7A 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001BB80 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BB86 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BB8C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB92 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BB98 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BB9E 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001BBA2 2248                       		movea.l	a0,a1
0001BBA4 7202                       		moveq	#2,d1
0001BBA6 6000                       		bra.s	Obj77_LoadBoss
0001BBA8                            ; ===========================================================================
0001BBA8                            
0001BBA8                            Obj77_Loop:
0001BBA8 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001BBAE 6600                       		bne.s	Obj77_ShipMain
0001BBB0 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001BBB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BBBA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BBC0                            
0001BBC0                            Obj77_LoadBoss:
0001BBC0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BBC6 4229 0025                  		clr.b	ob2ndRout(a1)
0001BBCA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BBCE 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BBD2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001BBD8 237C 0001 BA06 0004        		move.l	#Map_Eggman,obMap(a1)
0001BBE0 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BBE6 137C 0004 0001             		move.b	#4,obRender(a1)
0001BBEC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BBF2 2348 0034                  		move.l	a0,$34(a1)
0001BBF6 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001BBFA                            
0001BBFA                            Obj77_ShipMain:	; Routine 2
0001BBFA 43F8 D000                  		lea	(v_player).w,a1
0001BBFE 7000                       		moveq	#0,d0
0001BC00 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BC04 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001BC08 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001BC0C 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001BC12 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001BC18 7003                       		moveq	#3,d0
0001BC1A C028 0022                  		and.b	obStatus(a0),d0
0001BC1E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BC24 8128 0001                  		or.b	d0,obRender(a0)
0001BC28 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001BC2E                            ; ===========================================================================
0001BC2E 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001BC32 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001BC36 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001BC3A 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            loc_17F1E:
0001BC3E 3029 0008                  		move.w	obX(a1),d0
0001BC42 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001BC46 6500                       		bcs.s	loc_17F38
0001BC48 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BC4E 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001BC54 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC58                            
0001BC58                            loc_17F38:
0001BC58 6100 F948                  		bsr.w	BossMove
0001BC5C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BC62 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BC68                            
0001BC68                            loc_17F48:
0001BC68 4A28 003D                  		tst.b	$3D(a0)
0001BC6C 6600                       		bne.s	loc_17F8E
0001BC6E 4A28 0022                  		tst.b	obStatus(a0)
0001BC72 6B00                       		bmi.s	loc_17F92
0001BC74 4A28 0020                  		tst.b	obColType(a0)
0001BC78 6600                       		bne.s	locret_17F8C
0001BC7A 4A28 003E                  		tst.b	$3E(a0)
0001BC7E 6600                       		bne.s	loc_17F70
0001BC80 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BC90                            
0001BC90                            loc_17F70:
0001BC90 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BC94 7000                       		moveq	#0,d0
0001BC96 4A51                       		tst.w	(a1)
0001BC98 6600                       		bne.s	loc_17F7E
0001BC9A 303C 0EEE                  		move.w	#cWhite,d0
0001BC9E                            
0001BC9E                            loc_17F7E:
0001BC9E 3280                       		move.w	d0,(a1)
0001BCA0 5328 003E                  		subq.b	#1,$3E(a0)
0001BCA4 6600                       		bne.s	locret_17F8C
0001BCA6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BCAC                            
0001BCAC                            locret_17F8C:
0001BCAC 4E75                       		rts	
0001BCAE                            ; ===========================================================================
0001BCAE                            
0001BCAE                            loc_17F8E:
0001BCAE 6000 F8B0                  		bra.w	BossDefeated
0001BCB2                            ; ===========================================================================
0001BCB2                            
0001BCB2                            loc_17F92:
0001BCB2 7064                       		moveq	#100,d0
0001BCB4 6100 0000                  		bsr.w	AddPoints
0001BCB8 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001BCBE 4E75                       		rts	
0001BCC0                            ; ===========================================================================
0001BCC0                            
0001BCC0                            loc_17FA0:
0001BCC0 70FE                       		moveq	#-2,d0
0001BCC2 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001BCC8 6500                       		bcs.s	loc_17FB6
0001BCCA 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001BCD0 4268 0010                  		clr.w	obVelX(a0)
0001BCD4 5240                       		addq.w	#1,d0
0001BCD6                            
0001BCD6                            loc_17FB6:
0001BCD6 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001BCDC 6E00                       		bgt.s	loc_17FCA
0001BCDE 317C 0500 0038             		move.w	#$500,$38(a0)
0001BCE4 4268 0012                  		clr.w	obVelY(a0)
0001BCE8 5240                       		addq.w	#1,d0
0001BCEA                            
0001BCEA                            loc_17FCA:
0001BCEA 6600                       		bne.s	loc_17FDC
0001BCEC 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BCF2 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001BCF8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCFC                            
0001BCFC                            loc_17FDC:
0001BCFC 6000 FF5A                  		bra.w	loc_17F38
0001BD00                            ; ===========================================================================
0001BD00                            
0001BD00                            loc_17FE0:
0001BD00 70FE                       		moveq	#-2,d0
0001BD02 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001BD08 6500                       		bcs.s	loc_17FF6
0001BD0A 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001BD10 4268 0010                  		clr.w	obVelX(a0)
0001BD14 5240                       		addq.w	#1,d0
0001BD16                            
0001BD16                            loc_17FF6:
0001BD16 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001BD1C 6E00                       		bgt.s	loc_1800A
0001BD1E 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001BD24 4268 0012                  		clr.w	obVelY(a0)
0001BD28 5240                       		addq.w	#1,d0
0001BD2A                            
0001BD2A                            loc_1800A:
0001BD2A 6600                       		bne.s	loc_1801A
0001BD2C 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BD32 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD36 4228 003F                  		clr.b	$3F(a0)
0001BD3A                            
0001BD3A                            loc_1801A:
0001BD3A 6000 FF1C                  		bra.w	loc_17F38
0001BD3E                            ; ===========================================================================
0001BD3E                            
0001BD3E                            loc_1801E:
0001BD3E 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001BD44 6E00                       		bgt.s	loc_1804E
0001BD46 317C 0100 0038             		move.w	#$100,$38(a0)
0001BD4C 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BD52 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001BD58 4A28 003D                  		tst.b	$3D(a0)
0001BD5C 6700                       		beq.s	loc_18046
0001BD5E E1E8 0010                  		asl	obVelX(a0)
0001BD62 E1E8 0012                  		asl	obVelY(a0)
0001BD66                            
0001BD66                            loc_18046:
0001BD66 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD6A 6000 FEEC                  		bra.w	loc_17F38
0001BD6E                            ; ===========================================================================
0001BD6E                            
0001BD6E                            loc_1804E:
0001BD6E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BD74 5428 003F                  		addq.b	#2,$3F(a0)
0001BD78 1028 003F                  		move.b	$3F(a0),d0
0001BD7C 4EB9 0000 3D28             		jsr	(CalcSine).l
0001BD82 4A41                       		tst.w	d1
0001BD84 6A00                       		bpl.s	loc_1806C
0001BD86 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BD8C                            
0001BD8C                            loc_1806C:
0001BD8C E840                       		asr.w	#4,d0
0001BD8E 4840                       		swap	d0
0001BD90 4240                       		clr.w	d0
0001BD92 D0A8 0030                  		add.l	$30(a0),d0
0001BD96 4840                       		swap	d0
0001BD98 3140 0008                  		move.w	d0,obX(a0)
0001BD9C 3028 0012                  		move.w	obVelY(a0),d0
0001BDA0 3238 D00C                  		move.w	(v_player+obY).w,d1
0001BDA4 9268 000C                  		sub.w	obY(a0),d1
0001BDA8 6500                       		bcs.s	loc_180A2
0001BDAA 0441 0048                  		subi.w	#$48,d1
0001BDAE 6500                       		bcs.s	loc_180A2
0001BDB0 E240                       		asr.w	#1,d0
0001BDB2 0441 0028                  		subi.w	#$28,d1
0001BDB6 6500                       		bcs.s	loc_180A2
0001BDB8 E240                       		asr.w	#1,d0
0001BDBA 0441 0028                  		subi.w	#$28,d1
0001BDBE 6500                       		bcs.s	loc_180A2
0001BDC0 7000                       		moveq	#0,d0
0001BDC2                            
0001BDC2                            loc_180A2:
0001BDC2 48C0                       		ext.l	d0
0001BDC4 E180                       		asl.l	#8,d0
0001BDC6 4A28 003D                  		tst.b	$3D(a0)
0001BDCA 6700                       		beq.s	loc_180AE
0001BDCC D080                       		add.l	d0,d0
0001BDCE                            
0001BDCE                            loc_180AE:
0001BDCE D1A8 0038                  		add.l	d0,$38(a0)
0001BDD2 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BDD8 6000 FE8E                  		bra.w	loc_17F48
0001BDDC                            ; ===========================================================================
0001BDDC                            
0001BDDC                            loc_180BC:
0001BDDC 70FE                       		moveq	#-2,d0
0001BDDE 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001BDE4 6500                       		bcs.s	loc_180D2
0001BDE6 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001BDEC 4268 0010                  		clr.w	obVelX(a0)
0001BDF0 5240                       		addq.w	#1,d0
0001BDF2                            
0001BDF2                            loc_180D2:
0001BDF2 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001BDF8 6E00                       		bgt.s	loc_180E6
0001BDFA 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001BE00 4268 0012                  		clr.w	obVelY(a0)
0001BE04 5240                       		addq.w	#1,d0
0001BE06                            
0001BE06                            loc_180E6:
0001BE06 6600                       		bne.s	loc_180F2
0001BE08 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BE0C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BE12                            
0001BE12                            loc_180F2:
0001BE12 6000 FE44                  		bra.w	loc_17F38
0001BE16                            ; ===========================================================================
0001BE16                            
0001BE16                            loc_180F6:
0001BE16 4A28 003D                  		tst.b	$3D(a0)
0001BE1A 6600                       		bne.s	loc_18112
0001BE1C 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001BE22 6D00                       		blt.s	loc_18126
0001BE24 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001BE2A 6E00                       		bgt.s	loc_18126
0001BE2C 117C 0032 003C             		move.b	#$32,$3C(a0)
0001BE32                            
0001BE32                            loc_18112:
0001BE32 4A38 FE2D                          tst.b     (v_invinc).w
0001BE36 6600                               bne.s   @boss_invinc
0001BE38                            
0001BE38 1038 F5C6                          move.b   (v_Saved_music),d0
0001BE3C 6000 0000                          bra.w      @boss_play
0001BE40                            
0001BE40                            @boss_invinc:
0001BE40 103C 0000                          move.b #bgm_Invincible,d0
0001BE44                            
0001BE44                            @boss_play:
0001BE44 4EB8 12F8                          jsr PlaySound
0001BE48 4238 F7AA                          clr.b    (f_lockscreen).w
0001BE4C 08E8 0000 0022                     bset    #0,obStatus(a0)
0001BE52 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001BE56                            
0001BE56                            loc_18126:
0001BE56 6000 FE00                  		bra.w	loc_17F38
0001BE5A                            ; ===========================================================================
0001BE5A                            
0001BE5A                            loc_1812A:
0001BE5A 4A28 003D                  		tst.b	$3D(a0)
0001BE5E 6600                       		bne.s	loc_18136
0001BE60 5328 003C                  		subq.b	#1,$3C(a0)
0001BE64 6600                       		bne.s	loc_1814E
0001BE66                            
0001BE66                            loc_18136:
0001BE66 4228 003C                  		clr.b	$3C(a0)
0001BE6A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BE70 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BE76 4228 003D                  		clr.b	$3D(a0)
0001BE7A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BE7E                            
0001BE7E                            loc_1814E:
0001BE7E 6000 FDD8                  		bra.w	loc_17F38
0001BE82                            ; ===========================================================================
0001BE82                            
0001BE82                            loc_18152:
0001BE82 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001BE88 6400                       		bcc.s	loc_18160
0001BE8A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BE8E 6000                       		bra.s	loc_18166
0001BE90                            ; ===========================================================================
0001BE90                            
0001BE90                            loc_18160:
0001BE90 4A28 0001                  		tst.b	obRender(a0)
0001BE94 6A00                       		bpl.s	Obj77_ShipDel
0001BE96                            
0001BE96                            loc_18166:
0001BE96 6000 FDC0                  		bra.w	loc_17F38
0001BE9A                            ; ===========================================================================
0001BE9A                            
0001BE9A                            Obj77_ShipDel:
0001BE9A 4EF9 0000 F898             		jmp	(DeleteObject).l
0001BEA0                            ; ===========================================================================
0001BEA0                            
0001BEA0                            Obj77_FaceMain:	; Routine 4
0001BEA0 2268 0034                  		movea.l	$34(a0),a1
0001BEA4 1011                       		move.b	(a1),d0
0001BEA6 B010                       		cmp.b	(a0),d0
0001BEA8 6600                       		bne.s	Obj77_FaceDel
0001BEAA 7000                       		moveq	#0,d0
0001BEAC 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BEB0 7201                       		moveq	#1,d1
0001BEB2 4A28 003D                  		tst.b	$3D(a0)
0001BEB6 6700                       		beq.s	loc_1818C
0001BEB8 720A                       		moveq	#$A,d1
0001BEBA 6000                       		bra.s	loc_181A0
0001BEBC                            ; ===========================================================================
0001BEBC                            
0001BEBC                            loc_1818C:
0001BEBC 4A29 0020                  		tst.b	obColType(a1)
0001BEC0 6600                       		bne.s	loc_18196
0001BEC2 7205                       		moveq	#5,d1
0001BEC4 6000                       		bra.s	loc_181A0
0001BEC6                            ; ===========================================================================
0001BEC6                            
0001BEC6                            loc_18196:
0001BEC6 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BECC 6500                       		bcs.s	loc_181A0
0001BECE 7204                       		moveq	#4,d1
0001BED0                            
0001BED0                            loc_181A0:
0001BED0 1141 001C                  		move.b	d1,obAnim(a0)
0001BED4 0C00 000E                  		cmpi.b	#$E,d0
0001BED8 6600                       		bne.s	loc_181B6
0001BEDA 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BEE0 4A28 0001                  		tst.b	obRender(a0)
0001BEE4 6A00                       		bpl.s	Obj77_FaceDel
0001BEE6                            
0001BEE6                            loc_181B6:
0001BEE6 6000                       		bra.s	Obj77_Display
0001BEE8                            ; ===========================================================================
0001BEE8                            
0001BEE8                            Obj77_FaceDel:
0001BEE8 4EF9 0000 F898             		jmp	(DeleteObject).l
0001BEEE                            ; ===========================================================================
0001BEEE                            
0001BEEE                            Obj77_FlameMain:; Routine 6
0001BEEE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BEF4 2268 0034                  		movea.l	$34(a0),a1
0001BEF8 1011                       		move.b	(a1),d0
0001BEFA B010                       		cmp.b	(a0),d0
0001BEFC 6600                       		bne.s	Obj77_FlameDel
0001BEFE 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001BF04 6600                       		bne.s	loc_181F0
0001BF06 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BF0C 4A28 0001                  		tst.b	1(a0)
0001BF10 6A00                       		bpl.s	Obj77_FlameDel
0001BF12 6000                       		bra.s	loc_181F0
0001BF14                            ; ===========================================================================
0001BF14 4A69 0010                  		tst.w	obVelX(a1)
0001BF18 6700                       		beq.s	loc_181F0
0001BF1A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BF20                            
0001BF20                            loc_181F0:
0001BF20 6000                       		bra.s	Obj77_Display
0001BF22                            ; ===========================================================================
0001BF22                            
0001BF22                            Obj77_FlameDel:
0001BF22 4EF9 0000 F898             		jmp	(DeleteObject).l
0001BF28                            ; ===========================================================================
0001BF28                            
0001BF28                            Obj77_Display:
0001BF28 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001BF2E 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001BF34 2268 0034                  		movea.l	$34(a0),a1
0001BF38 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BF3E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BF44 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BF4A 7003                       		moveq	#3,d0
0001BF4C C028 0022                  		and.b	obStatus(a0),d0
0001BF50 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BF56 8128 0001                  		or.b	d0,obRender(a0)
0001BF5A 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001BF5A 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001BF60                            		include	"_incObj\73 Boss - Marble.asm"
0001BF60                            ; ---------------------------------------------------------------------------
0001BF60                            ; Object 73 - Eggman (MZ)
0001BF60                            ; ---------------------------------------------------------------------------
0001BF60                            
0001BF60                            BossMarble:
0001BF60 7000                       		moveq	#0,d0
0001BF62 1028 0024                  		move.b	obRoutine(a0),d0
0001BF66 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001BF6A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001BF6E                            ; ===========================================================================
0001BF6E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001BF70 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001BF72 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001BF74 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001BF76 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001BF78                            
0001BF78 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BF7C 0401 0200                  		dc.b 4,	1, $02, $00
0001BF80 0607 0200                  		dc.b 6,	7, $02, $00
0001BF84 0800 0180                  		dc.b 8,	0, $01, $80
0001BF88                            ; ===========================================================================
0001BF88                            
0001BF88                            Obj73_Main:	; Routine 0
0001BF88 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BF8E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BF94 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BF9A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BFA0 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001BFA4 2248                       		movea.l	a0,a1
0001BFA6 7203                       		moveq	#3,d1
0001BFA8 6000                       		bra.s	Obj73_LoadBoss
0001BFAA                            ; ===========================================================================
0001BFAA                            
0001BFAA                            Obj73_Loop:
0001BFAA 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001BFB0 6600                       		bne.s	Obj73_ShipMain
0001BFB2 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001BFB6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BFBC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BFC2                            
0001BFC2                            Obj73_LoadBoss:
0001BFC2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BFC8 4229 0025                  		clr.b	ob2ndRout(a1)
0001BFCC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BFD0 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BFD4 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001BFD8 237C 0001 BA06 0004        		move.l	#Map_Eggman,obMap(a1)
0001BFE0 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BFE6 137C 0004 0001             		move.b	#4,obRender(a1)
0001BFEC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BFF2 2348 0034                  		move.l	a0,$34(a1)
0001BFF6 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001BFFA                            
0001BFFA                            Obj73_ShipMain:	; Routine 2
0001BFFA 7000                       		moveq	#0,d0
0001BFFC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C000 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001C004 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001C008 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001C00E 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001C014 7003                       		moveq	#3,d0
0001C016 C028 0022                  		and.b	obStatus(a0),d0
0001C01A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C020 8128 0001                  		or.b	d0,obRender(a0)
0001C024 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001C02A                            ; ===========================================================================
0001C02A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001C02C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001C02E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001C030 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001C032 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001C034                            ; ===========================================================================
0001C034                            
0001C034                            loc_18302:
0001C034 1028 003F                  		move.b	$3F(a0),d0
0001C038 5428 003F                  		addq.b	#2,$3F(a0)
0001C03C 4EB9 0000 3D28             		jsr	(CalcSine).l
0001C042 E440                       		asr.w	#2,d0
0001C044 3140 0012                  		move.w	d0,obVelY(a0)
0001C048 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C04E 6100 F552                  		bsr.w	BossMove
0001C052 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001C058 6600                       		bne.s	loc_18334
0001C05A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C05E 4228 0028                  		clr.b	obSubtype(a0)
0001C062 42A8 0010                  		clr.l	obVelX(a0)
0001C066                            
0001C066                            loc_18334:
0001C066 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001C06C 1140 0034                  		move.b	d0,$34(a0)
0001C070                            
0001C070                            loc_1833E:
0001C070 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C076 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C07C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001C082 6400                       		bcc.s	locret_18390
0001C084 4A28 0022                  		tst.b	obStatus(a0)
0001C088 6B00                       		bmi.s	loc_18392
0001C08A 4A28 0020                  		tst.b	obColType(a0)
0001C08E 6600                       		bne.s	locret_18390
0001C090 4A28 003E                  		tst.b	$3E(a0)
0001C094 6600                       		bne.s	loc_18374
0001C096 117C 0028 003E             		move.b	#$28,$3E(a0)
0001C0A6                            
0001C0A6                            loc_18374:
0001C0A6 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C0AA 7000                       		moveq	#0,d0
0001C0AC 4A51                       		tst.w	(a1)
0001C0AE 6600                       		bne.s	loc_18382
0001C0B0 303C 0EEE                  		move.w	#cWhite,d0
0001C0B4                            
0001C0B4                            loc_18382:
0001C0B4 3280                       		move.w	d0,(a1)
0001C0B6 5328 003E                  		subq.b	#1,$3E(a0)
0001C0BA 6600                       		bne.s	locret_18390
0001C0BC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C0C2                            
0001C0C2                            locret_18390:
0001C0C2 4E75                       		rts	
0001C0C4                            ; ===========================================================================
0001C0C4                            
0001C0C4                            loc_18392:
0001C0C4 7064                       		moveq	#100,d0
0001C0C6 6100 0000                  		bsr.w	AddPoints
0001C0CA 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001C0D0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C0D6 4268 0010                  		clr.w	obVelX(a0)
0001C0DA 4E75                       		rts	
0001C0DC                            ; ===========================================================================
0001C0DC                            
0001C0DC                            loc_183AA:
0001C0DC 7000                       		moveq	#0,d0
0001C0DE 1028 0028                  		move.b	obSubtype(a0),d0
0001C0E2 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001C0E6 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001C0EA 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001C0F0 6000 FF7E                  		bra.w	loc_1833E
0001C0F4                            ; ===========================================================================
0001C0F4 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001C0F6 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001C0F8 0000                       		dc.w loc_183CA-off_183C2
0001C0FA 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001C0FC                            ; ===========================================================================
0001C0FC                            
0001C0FC                            loc_183CA:
0001C0FC 4A68 0010                  		tst.w	obVelX(a0)
0001C100 6600                       		bne.s	loc_183FE
0001C102 7040                       		moveq	#$40,d0
0001C104 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C10A 6700                       		beq.s	loc_183E6
0001C10C 6500                       		bcs.s	loc_183DE
0001C10E 4440                       		neg.w	d0
0001C110                            
0001C110                            loc_183DE:
0001C110 3140 0012                  		move.w	d0,obVelY(a0)
0001C114 6000 F48C                  		bra.w	BossMove
0001C118                            ; ===========================================================================
0001C118                            
0001C118                            loc_183E6:
0001C118 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C11E 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001C124 0828 0000 0022             		btst	#0,obStatus(a0)
0001C12A 6600                       		bne.s	loc_183FE
0001C12C 4468 0010                  		neg.w	obVelX(a0)
0001C130                            
0001C130                            loc_183FE:
0001C130 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001C136 6400                       		bcc.s	Obj73_MakeLava
0001C138 6100 F468                  		bsr.w	BossMove
0001C13C 5968 0012                  		subq.w	#4,obVelY(a0)
0001C140                            
0001C140                            Obj73_MakeLava:
0001C140 5328 0034                  		subq.b	#1,$34(a0)
0001C144 6400                       		bcc.s	loc_1845C
0001C146 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001C14C 6600                       		bne.s	loc_1844A
0001C14E 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001C152 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001C158 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001C15E 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001C164 80FC 0050                  		divu.w	#$50,d0
0001C168 4840                       		swap	d0
0001C16A 0640 1878                  		addi.w	#$1878,d0
0001C16E 3340 0008                  		move.w	d0,obX(a1)
0001C172 EE09                       		lsr.b	#7,d1
0001C174 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001C17A                            
0001C17A                            loc_1844A:
0001C17A 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001C180 0200 001F                  		andi.b	#$1F,d0
0001C184 0600 0040                  		addi.b	#$40,d0
0001C188 1140 0034                  		move.b	d0,$34(a0)
0001C18C                            
0001C18C                            loc_1845C:
0001C18C 0828 0000 0022             		btst	#0,obStatus(a0)
0001C192 6700                       		beq.s	loc_18474
0001C194 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001C19A 6D00                       		blt.s	locret_1849C
0001C19C 317C 1910 0030             		move.w	#$1910,$30(a0)
0001C1A2 6000                       		bra.s	loc_18482
0001C1A4                            ; ===========================================================================
0001C1A4                            
0001C1A4                            loc_18474:
0001C1A4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001C1AA 6E00                       		bgt.s	locret_1849C
0001C1AC 317C 1830 0030             		move.w	#$1830,$30(a0)
0001C1B2                            
0001C1B2                            loc_18482:
0001C1B2 4268 0010                  		clr.w	obVelX(a0)
0001C1B6 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001C1BC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C1C2 6400                       		bcc.s	loc_18498
0001C1C4 4468 0012                  		neg.w	obVelY(a0)
0001C1C8                            
0001C1C8                            loc_18498:
0001C1C8 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C1CC                            
0001C1CC                            locret_1849C:
0001C1CC 4E75                       		rts	
0001C1CE                            ; ===========================================================================
0001C1CE                            
0001C1CE                            Obj73_MakeLava2:
0001C1CE 6100 F3D2                  		bsr.w	BossMove
0001C1D2 3028 0038                  		move.w	$38(a0),d0
0001C1D6 0440 022C                  		subi.w	#$22C,d0
0001C1DA 6E00                       		bgt.s	locret_184F4
0001C1DC 303C 022C                  		move.w	#$22C,d0
0001C1E0 4A68 0012                  		tst.w	obVelY(a0)
0001C1E4 6700                       		beq.s	loc_184EA
0001C1E6 4268 0012                  		clr.w	obVelY(a0)
0001C1EA 317C 0050 003C             		move.w	#$50,$3C(a0)
0001C1F0 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C1F6 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001C1FC 6600                       		bne.s	loc_184EA
0001C1FE 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001C204 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001C20A 0669 0018 000C             		addi.w	#$18,obY(a1)
0001C210 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001C214 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001C21A                            
0001C21A                            loc_184EA:
0001C21A 5368 003C                  		subq.w	#1,$3C(a0)
0001C21E 6600                       		bne.s	locret_184F4
0001C220 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C224                            
0001C224                            locret_184F4:
0001C224 4E75                       		rts	
0001C226                            ; ===========================================================================
0001C226                            
0001C226                            loc_184F6:
0001C226 5368 003C                  		subq.w	#1,$3C(a0)
0001C22A 6B00                       		bmi.s	loc_18500
0001C22C 6000 F332                  		bra.w	BossDefeated
0001C230                            ; ===========================================================================
0001C230                            
0001C230                            loc_18500:
0001C230 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C236 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C23C 4268 0010                  		clr.w	obVelX(a0)
0001C240 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C244 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001C24A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C24E 6600                       		bne.s	locret_1852A
0001C250 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C256 4268 0012                  		clr.w	obVelY(a0)
0001C25A                            
0001C25A                            locret_1852A:
0001C25A 4E75                       		rts	
0001C25C                            ; ===========================================================================
0001C25C                            
0001C25C                            loc_1852C:
0001C25C 5268 003C                  		addq.w	#1,$3C(a0)
0001C260 6700                       		beq.s	loc_18544
0001C262 6A00                       		bpl.s	loc_1854E
0001C264 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001C26A 6400                       		bcc.s	loc_18544
0001C26C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C272 6000                       		bra.s	loc_1857A
0001C274                            ; ===========================================================================
0001C274                            
0001C274                            loc_18544:
0001C274 4268 0012                  		clr.w	obVelY(a0)
0001C278 4268 003C                  		clr.w	$3C(a0)
0001C27C 6000                       		bra.s	loc_1857A
0001C27E                            ; ===========================================================================
0001C27E                            
0001C27E                            loc_1854E:
0001C27E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001C284 6500                       		bcs.s	loc_18566
0001C286 6700                       		beq.s	loc_1856C
0001C288 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001C28E 6500                       		bcs.s	loc_1857A
0001C290 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C294 6000                       		bra.s	loc_1857A
0001C296                            ; ===========================================================================
0001C296                            
0001C296                            loc_18566:
0001C296 5168 0012                  		subq.w	#8,obVelY(a0)
0001C29A 6000                       		bra.s	loc_1857A
0001C29C                            ; ===========================================================================
0001C29C                            
0001C29C                            loc_1856C:
0001C29C 4268 0012                  		clr.w	obVelY(a0)
0001C2AA                            
0001C2AA                            loc_1857A:
0001C2AA 6100 F2F6                  		bsr.w	BossMove
0001C2AE 6000 FDC0                  		bra.w	loc_1833E
0001C2B2                            ; ===========================================================================
0001C2B2                            
0001C2B2                            loc_18582:
0001C2B2 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001C2B8 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C2BE 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001C2C4 6400                       		bcc.s	loc_1859C
0001C2C6 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C2CA 6000                       		bra.s	loc_185A2
0001C2CC                            ; ===========================================================================
0001C2CC                            
0001C2CC                            loc_1859C:
0001C2CC 4A28 0001                  		tst.b	obRender(a0)
0001C2D0 6A00                       		bpl.s	Obj73_ShipDel
0001C2D2                            
0001C2D2                            loc_185A2:
0001C2D2 6100 F2CE                  		bsr.w	BossMove
0001C2D6 6000 FD98                  		bra.w	loc_1833E
0001C2DA                            ; ===========================================================================
0001C2DA                            
0001C2DA                            Obj73_ShipDel:
0001C2DA 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C2E0                            ; ===========================================================================
0001C2E0                            
0001C2E0                            Obj73_FaceMain:	; Routine 4
0001C2E0 7000                       		moveq	#0,d0
0001C2E2 7201                       		moveq	#1,d1
0001C2E4 2268 0034                  		movea.l	$34(a0),a1
0001C2E8 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C2EC 5540                       		subq.w	#2,d0
0001C2EE 6600                       		bne.s	loc_185D2
0001C2F0 0829 0001 0028             		btst	#1,obSubtype(a1)
0001C2F6 6700                       		beq.s	loc_185DA
0001C2F8 4A69 0012                  		tst.w	obVelY(a1)
0001C2FC 6600                       		bne.s	loc_185DA
0001C2FE 7204                       		moveq	#4,d1
0001C300 6000                       		bra.s	loc_185EE
0001C302                            ; ===========================================================================
0001C302                            
0001C302                            loc_185D2:
0001C302 5500                       		subq.b	#2,d0
0001C304 6B00                       		bmi.s	loc_185DA
0001C306 720A                       		moveq	#$A,d1
0001C308 6000                       		bra.s	loc_185EE
0001C30A                            ; ===========================================================================
0001C30A                            
0001C30A                            loc_185DA:
0001C30A 4A29 0020                  		tst.b	obColType(a1)
0001C30E 6600                       		bne.s	loc_185E4
0001C310 7205                       		moveq	#5,d1
0001C312 6000                       		bra.s	loc_185EE
0001C314                            ; ===========================================================================
0001C314                            
0001C314                            loc_185E4:
0001C314 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C31A 6500                       		bcs.s	loc_185EE
0001C31C 7204                       		moveq	#4,d1
0001C31E                            
0001C31E                            loc_185EE:
0001C31E 1141 001C                  		move.b	d1,obAnim(a0)
0001C322 5900                       		subq.b	#4,d0
0001C324 6600                       		bne.s	loc_18602
0001C326 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C32C 4A28 0001                  		tst.b	obRender(a0)
0001C330 6A00                       		bpl.s	Obj73_FaceDel
0001C332                            
0001C332                            loc_18602:
0001C332 6000                       		bra.s	Obj73_Display
0001C334                            ; ===========================================================================
0001C334                            
0001C334                            Obj73_FaceDel:
0001C334 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C33A                            ; ===========================================================================
0001C33A                            
0001C33A                            Obj73_FlameMain:; Routine 6
0001C33A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C340 2268 0034                  		movea.l	$34(a0),a1
0001C344 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C34A 6D00                       		blt.s	loc_1862A
0001C34C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C352 4A28 0001                  		tst.b	obRender(a0)
0001C356 6A00                       		bpl.s	Obj73_FlameDel
0001C358 6000                       		bra.s	loc_18636
0001C35A                            ; ===========================================================================
0001C35A                            
0001C35A                            loc_1862A:
0001C35A 4A69 0010                  		tst.w	obVelX(a1)
0001C35E 6700                       		beq.s	loc_18636
0001C360 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C366                            
0001C366                            loc_18636:
0001C366 6000                       		bra.s	Obj73_Display
0001C368                            ; ===========================================================================
0001C368                            
0001C368                            Obj73_FlameDel:
0001C368 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C36E                            ; ===========================================================================
0001C36E                            
0001C36E                            Obj73_Display:
0001C36E 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001C374 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001C37A                            
0001C37A                            loc_1864A:
0001C37A 2268 0034                  		movea.l	$34(a0),a1
0001C37E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C384 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C38A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C390 7003                       		moveq	#3,d0
0001C392 C028 0022                  		and.b	obStatus(a0),d0
0001C396 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C39C 8128 0001                  		or.b	d0,obRender(a0)
0001C3A0 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001C3A6                            ; ===========================================================================
0001C3A6                            
0001C3A6                            Obj73_TubeMain:	; Routine 8
0001C3A6 2268 0034                  		movea.l	$34(a0),a1
0001C3AA 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C3B0 6600                       		bne.s	loc_18688
0001C3B2 4A28 0001                  		tst.b	obRender(a0)
0001C3B6 6A00                       		bpl.s	Obj73_TubeDel
0001C3B8                            
0001C3B8                            loc_18688:
0001C3B8 217C 0001 BAF6 0004        		move.l	#Map_BossItems,obMap(a0)
0001C3C0 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C3C6 117C 0004 001A             		move.b	#4,obFrame(a0)
0001C3CC 60AC                       		bra.s	loc_1864A
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            Obj73_TubeDel:
0001C3CE 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C3CE 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C3D4                            		include	"_incObj\74 MZ Boss Fire.asm"
0001C3D4                            ; ---------------------------------------------------------------------------
0001C3D4                            ; Object 74 - lava that	Eggman drops (MZ)
0001C3D4                            ; ---------------------------------------------------------------------------
0001C3D4                            
0001C3D4                            BossFire:
0001C3D4 7000                       		moveq	#0,d0
0001C3D6 1028 0024                  		move.b	obRoutine(a0),d0
0001C3DA 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001C3DE 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001C3E2 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001C3E8                            ; ===========================================================================
0001C3E8 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001C3EA 0000                       		dc.w Obj74_Action-Obj74_Index
0001C3EC 0000                       		dc.w loc_18886-Obj74_Index
0001C3EE 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001C3F0                            ; ===========================================================================
0001C3F0                            
0001C3F0                            Obj74_Main:	; Routine 0
0001C3F0 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C3F6 117C 0008 0017             		move.b	#8,obWidth(a0)
0001C3FC 217C 0000 D560 0004        		move.l	#Map_Fire,obMap(a0)
0001C404 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001C40A 117C 0004 0001             		move.b	#4,obRender(a0)
0001C410 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001C416 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C41C 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C422 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C426 4A28 0028                  		tst.b	obSubtype(a0)
0001C42A 6600                       		bne.s	loc_1870A
0001C42C 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C432 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C436 6000 0000                  		bra.w	loc_18886
0001C43A                            ; ===========================================================================
0001C43A                            
0001C43A                            loc_1870A:
0001C43A 117C 001E 0029             		move.b	#$1E,$29(a0)
0001C44A                            
0001C44A                            Obj74_Action:	; Routine 2
0001C44A 7000                       		moveq	#0,d0
0001C44C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C450 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001C454 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001C458 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001C45E 43F9 0001 083C             		lea	(Ani_Fire).l,a1
0001C464 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001C46A 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001C470 6200                       		bhi.s	Obj74_Delete
0001C472 4E75                       		rts	
0001C474                            ; ===========================================================================
0001C474                            
0001C474                            Obj74_Delete:
0001C474 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C47A                            ; ===========================================================================
0001C47A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001C47C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001C47E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001C480 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001C482                            ; ===========================================================================
0001C482                            
0001C482                            Obj74_Drop:
0001C482 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C488 5328 0029                  		subq.b	#1,$29(a0)
0001C48C 6A00                       		bpl.s	locret_18780
0001C48E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C494 4228 0028                  		clr.b	obSubtype(a0)
0001C498 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C49E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C4A4 6100 C5D0                  		bsr.w	ObjFloorDist
0001C4A8 4A41                       		tst.w	d1
0001C4AA 6A00                       		bpl.s	locret_18780
0001C4AC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4B0                            
0001C4B0                            locret_18780:
0001C4B0 4E75                       		rts	
0001C4B2                            ; ===========================================================================
0001C4B2                            
0001C4B2                            Obj74_MakeFlame:
0001C4B2 5568 000C                  		subq.w	#2,obY(a0)
0001C4B6 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C4BC 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001C4C2 4268 0012                  		clr.w	obVelY(a0)
0001C4C6 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C4CC 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C4D2 117C 0003 0029             		move.b	#3,$29(a0)
0001C4D8 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001C4DE 6600                       		bne.s	loc_187CA
0001C4E0 47D1                       		lea	(a1),a3
0001C4E2 45D0                       		lea	(a0),a2
0001C4E4 7003                       		moveq	#3,d0
0001C4E6                            
0001C4E6                            Obj74_Loop:
0001C4E6 26DA                       		move.l	(a2)+,(a3)+
0001C4E8 26DA                       		move.l	(a2)+,(a3)+
0001C4EA 26DA                       		move.l	(a2)+,(a3)+
0001C4EC 26DA                       		move.l	(a2)+,(a3)+
0001C4EE 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001C4F2                            
0001C4F2 4469 0010                  		neg.w	obVelX(a1)
0001C4F6 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001C4FA                            
0001C4FA                            loc_187CA:
0001C4FA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4FE 4E75                       		rts	
0001C500                            
0001C500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C500                            
0001C500                            
0001C500                            Obj74_Duplicate2:
0001C500 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001C506 6600                       		bne.s	locret_187EE
0001C508 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C50E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C514 12BC 0074                  		move.b	#id_BossFire,(a1)
0001C518 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001C51E                            
0001C51E                            locret_187EE:
0001C51E 4E75                       		rts	
0001C520                            ; End of function Obj74_Duplicate2
0001C520                            
0001C520                            ; ===========================================================================
0001C520                            
0001C520                            Obj74_Duplicate:
0001C520 6100 C554                  		bsr.w	ObjFloorDist
0001C524 4A41                       		tst.w	d1
0001C526 6A00                       		bpl.s	loc_18826
0001C528 3028 0008                  		move.w	obX(a0),d0
0001C52C 0C40 1940                  		cmpi.w	#$1940,d0
0001C530 6E00                       		bgt.s	loc_1882C
0001C532 3228 0030                  		move.w	$30(a0),d1
0001C536 B240                       		cmp.w	d0,d1
0001C538 6700                       		beq.s	loc_1881E
0001C53A 0240 0010                  		andi.w	#$10,d0
0001C53E 0241 0010                  		andi.w	#$10,d1
0001C542 B240                       		cmp.w	d0,d1
0001C544 6700                       		beq.s	loc_1881E
0001C546 61B8                       		bsr.s	Obj74_Duplicate2
0001C548 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001C54E                            
0001C54E                            loc_1881E:
0001C54E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C554 4E75                       		rts	
0001C556                            ; ===========================================================================
0001C556                            
0001C556                            loc_18826:
0001C556 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C55A 4E75                       		rts	
0001C55C                            ; ===========================================================================
0001C55C                            
0001C55C                            loc_1882C:
0001C55C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C560 4E75                       		rts	
0001C562                            ; ===========================================================================
0001C562                            
0001C562                            Obj74_FallEdge:
0001C562 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C568 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001C56E 3028 0008                  		move.w	obX(a0),d0
0001C572 9068 0032                  		sub.w	$32(a0),d0
0001C576 6A00                       		bpl.s	loc_1884A
0001C578 4440                       		neg.w	d0
0001C57A                            
0001C57A                            loc_1884A:
0001C57A 0C40 0012                  		cmpi.w	#$12,d0
0001C57E 6600                       		bne.s	loc_18856
0001C580 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001C586                            
0001C586                            loc_18856:
0001C586 6100 C4EE                  		bsr.w	ObjFloorDist
0001C58A 4A41                       		tst.w	d1
0001C58C 6A00                       		bpl.s	locret_1887E
0001C58E 5328 0029                  		subq.b	#1,$29(a0)
0001C592 6700                       		beq.s	Obj74_Delete2
0001C594 4268 0012                  		clr.w	obVelY(a0)
0001C598 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001C59E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C5A4 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C5AA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C5AE                            
0001C5AE                            locret_1887E:
0001C5AE 4E75                       		rts	
0001C5B0                            ; ===========================================================================
0001C5B0                            
0001C5B0                            Obj74_Delete2:
0001C5B0 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C5B6                            ; ===========================================================================
0001C5B6                            
0001C5B6                            loc_18886:	; Routine 4
0001C5B6 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C5BC 5328 0029                  		subq.b	#1,$29(a0)
0001C5C0 6600                       		bne.s	Obj74_Animate
0001C5C2 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C5C8 5968 000C                  		subq.w	#4,obY(a0)
0001C5CC 4228 0020                  		clr.b	obColType(a0)
0001C5D0                            
0001C5D0                            Obj74_Animate:
0001C5D0 43F9 0001 083C             		lea	(Ani_Fire).l,a1
0001C5D6 4EF9 0000 C90E             		jmp	(AnimateSprite).l
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC                            Obj74_Delete3:	; Routine 6
0001C5DC 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C5DC 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C5E2                            
0001C5E2                            	Obj7A_Delete:
0001C5E2 4EF9 0000 F898             		jmp	(DeleteObject).l
0001C5E8                            
0001C5E8                            		include	"_incObj\7A Boss - Star Light.asm"
0001C5E8                            ; ---------------------------------------------------------------------------
0001C5E8                            ; Object 7A - Eggman (SLZ)
0001C5E8                            ; ---------------------------------------------------------------------------
0001C5E8                            
0001C5E8                            BossStarLight:
0001C5E8 7000                       		moveq	#0,d0
0001C5EA 1028 0024                  		move.b	obRoutine(a0),d0
0001C5EE 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001C5F2 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001C5F6                            ; ===========================================================================
0001C5F6 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001C5F8 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001C5FA 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001C5FC 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001C5FE 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001C600                            
0001C600 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001C604 0401 0200                  		dc.b 4,	1, $02, $00
0001C608 0607 0200                  		dc.b 6,	7, $02, $00
0001C60C 0800 0180                  		dc.b 8,	0, $01, $80
0001C610                            ; ===========================================================================
0001C610                            
0001C610                            Obj7A_Main:
0001C610 317C 2188 0008             		move.w	#$2188,obX(a0)
0001C616 317C 0228 000C             		move.w	#$228,obY(a0)
0001C61C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C622 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C628 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C62E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C634 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001C638 2248                       		movea.l	a0,a1
0001C63A 7203                       		moveq	#3,d1
0001C63C 6000                       		bra.s	Obj7A_LoadBoss
0001C63E                            ; ===========================================================================
0001C63E                            
0001C63E                            Obj7A_Loop:
0001C63E 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001C644 6600                       		bne.s	loc_1895C
0001C646 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001C64A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C650 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C656                            
0001C656                            Obj7A_LoadBoss:
0001C656 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C65C 4229 0025                  		clr.b	ob2ndRout(a1)
0001C660 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C664 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C668 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C66C 237C 0001 BA06 0004        		move.l	#Map_Eggman,obMap(a1)
0001C674 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C67A 137C 0004 0001             		move.b	#4,obRender(a1)
0001C680 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C686 2348 0034                  		move.l	a0,$34(a1)
0001C68A 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001C68E                            
0001C68E                            loc_1895C:
0001C68E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C692 45E8 002A                  		lea	$2A(a0),a2
0001C696 705E                       		moveq	#$5E,d0
0001C698 723E                       		moveq	#$3E,d1
0001C69A                            
0001C69A                            loc_18968:
0001C69A B011                       		cmp.b	(a1),d0
0001C69C 6600                       		bne.s	loc_18974
0001C69E 4A29 0028                  		tst.b	obSubtype(a1)
0001C6A2 6700                       		beq.s	loc_18974
0001C6A4 34C9                       		move.w	a1,(a2)+
0001C6A6                            
0001C6A6                            loc_18974:
0001C6A6 D2FC 0040                  		adda.w	#$40,a1
0001C6AA 51C9 FFEE                  		dbf	d1,loc_18968
0001C6AE                            
0001C6AE                            Obj7A_ShipMain:	; Routine 2
0001C6AE 7000                       		moveq	#0,d0
0001C6B0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C6B4 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001C6B8 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001C6BC 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001C6C2 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001C6C8 7003                       		moveq	#3,d0
0001C6CA C028 0022                  		and.b	obStatus(a0),d0
0001C6CE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C6D4 8128 0001                  		or.b	d0,obRender(a0)
0001C6D8 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001C6DE                            ; ===========================================================================
0001C6DE 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001C6E0 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001C6E2 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001C6E4 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001C6E6 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001C6E8 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001C6EA                            ; ===========================================================================
0001C6EA                            
0001C6EA                            loc_189B8:
0001C6EA 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C6F0 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001C6F6 6400                       		bcc.s	loc_189CA
0001C6F8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C6FC                            
0001C6FC                            loc_189CA:
0001C6FC 6100 EEA4                  		bsr.w	BossMove
0001C700 1028 003F                  		move.b	$3F(a0),d0
0001C704 5428 003F                  		addq.b	#2,$3F(a0)
0001C708 4EB9 0000 3D28             		jsr	(CalcSine).l
0001C70E EC40                       		asr.w	#6,d0
0001C710 D068 0038                  		add.w	$38(a0),d0
0001C714 3140 000C                  		move.w	d0,obY(a0)
0001C718 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C71E 6000                       		bra.s	loc_189FE
0001C720                            ; ===========================================================================
0001C720                            
0001C720                            loc_189EE:
0001C720 6100 EE80                  		bsr.w	BossMove
0001C724 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C72A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C730                            
0001C730                            loc_189FE:
0001C730 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C736 6400                       		bcc.s	locret_18A44
0001C738 4A28 0022                  		tst.b	obStatus(a0)
0001C73C 6B00                       		bmi.s	loc_18A46
0001C73E 4A28 0020                  		tst.b	obColType(a0)
0001C742 6600                       		bne.s	locret_18A44
0001C744 4A28 003E                  		tst.b	$3E(a0)
0001C748 6600                       		bne.s	loc_18A28
0001C74A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C75A                            
0001C75A                            loc_18A28:
0001C75A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C75E 7000                       		moveq	#0,d0
0001C760 4A51                       		tst.w	(a1)
0001C762 6600                       		bne.s	loc_18A36
0001C764 303C 0EEE                  		move.w	#cWhite,d0
0001C768                            
0001C768                            loc_18A36:
0001C768 3280                       		move.w	d0,(a1)
0001C76A 5328 003E                  		subq.b	#1,$3E(a0)
0001C76E 6600                       		bne.s	locret_18A44
0001C770 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C776                            
0001C776                            locret_18A44:
0001C776 4E75                       		rts	
0001C778                            ; ===========================================================================
0001C778                            
0001C778                            loc_18A46:
0001C778 7064                       		moveq	#100,d0
0001C77A 6100 0000                  		bsr.w	AddPoints
0001C77E 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C784 117C 0078 003C             		move.b	#$78,$3C(a0)
0001C78A 4268 0010                  		clr.w	obVelX(a0)
0001C78E 4E75                       		rts	
0001C790                            ; ===========================================================================
0001C790                            
0001C790                            loc_18A5E:
0001C790 3028 0030                  		move.w	$30(a0),d0
0001C794 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C79A 0828 0000 0022             		btst	#0,obStatus(a0)
0001C7A0 6600                       		bne.s	loc_18A7C
0001C7A2 4468 0010                  		neg.w	obVelX(a0)
0001C7A6 0C40 2008                  		cmpi.w	#$2008,d0
0001C7AA 6E00                       		bgt.s	loc_18A88
0001C7AC 6000                       		bra.s	loc_18A82
0001C7AE                            ; ===========================================================================
0001C7AE                            
0001C7AE                            loc_18A7C:
0001C7AE 0C40 2138                  		cmpi.w	#$2138,d0
0001C7B2 6D00                       		blt.s	loc_18A88
0001C7B4                            
0001C7B4                            loc_18A82:
0001C7B4 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C7BA                            
0001C7BA                            loc_18A88:
0001C7BA 3028 0008                  		move.w	8(a0),d0
0001C7BE 72FF                       		moveq	#-1,d1
0001C7C0 7402                       		moveq	#2,d2
0001C7C2 45E8 002A                  		lea	$2A(a0),a2
0001C7C6 7828                       		moveq	#$28,d4
0001C7C8 4A68 0010                  		tst.w	obVelX(a0)
0001C7CC 6A00                       		bpl.s	loc_18A9E
0001C7CE 4444                       		neg.w	d4
0001C7D0                            
0001C7D0                            loc_18A9E:
0001C7D0 321A                       		move.w	(a2)+,d1
0001C7D2 2641                       		movea.l	d1,a3
0001C7D4 082B 0003 0022             		btst	#3,obStatus(a3)
0001C7DA 6600                       		bne.s	loc_18AB4
0001C7DC 362B 0008                  		move.w	8(a3),d3
0001C7E0 D644                       		add.w	d4,d3
0001C7E2 9640                       		sub.w	d0,d3
0001C7E4 6700                       		beq.s	loc_18AC0
0001C7E6                            
0001C7E6                            loc_18AB4:
0001C7E6 51CA FFE8                  		dbf	d2,loc_18A9E
0001C7EA                            
0001C7EA 1142 0028                  		move.b	d2,obSubtype(a0)
0001C7EE 6000 FF0C                  		bra.w	loc_189CA
0001C7F2                            ; ===========================================================================
0001C7F2                            
0001C7F2                            loc_18AC0:
0001C7F2 1142 0028                  		move.b	d2,obSubtype(a0)
0001C7F6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C7FA 117C 0028 003C             		move.b	#$28,$3C(a0)
0001C800 6000 FEFA                  		bra.w	loc_189CA
0001C804                            ; ===========================================================================
0001C804                            
0001C804                            Obj7A_MakeBall:
0001C804 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001C80A 6600                       		bne.s	loc_18B36
0001C80C 70FF                       		moveq	#-1,d0
0001C80E 1028 0028                  		move.b	obSubtype(a0),d0
0001C812 4880                       		ext.w	d0
0001C814 6B00                       		bmi.s	loc_18B40
0001C816 5540                       		subq.w	#2,d0
0001C818 4440                       		neg.w	d0
0001C81A D040                       		add.w	d0,d0
0001C81C 43E8 002A                  		lea	$2A(a0),a1
0001C820 3031 0000                  		move.w	(a1,d0.w),d0
0001C824 2440                       		movea.l	d0,a2
0001C826 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C82A 723E                       		moveq	#$3E,d1
0001C82C                            
0001C82C                            loc_18AFA:
0001C82C B0A9 003C                  		cmp.l	$3C(a1),d0
0001C830 6700                       		beq.s	loc_18B40
0001C832 D2FC 0040                  		adda.w	#$40,a1
0001C836 51C9 FFF4                  		dbf	d1,loc_18AFA
0001C83A                            
0001C83A 2F08                       		move.l	a0,-(sp)
0001C83C 41D2                       		lea	(a2),a0
0001C83E 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001C844 205F                       		movea.l	(sp)+,a0
0001C846 6600                       		bne.s	loc_18B40
0001C848 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001C84C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C852 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C858 0669 0020 000C             		addi.w	#$20,obY(a1)
0001C85E 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001C864 234A 003C                  		move.l	a2,$3C(a1)
0001C868                            
0001C868                            loc_18B36:
0001C868 5328 003C                  		subq.b	#1,$3C(a0)
0001C86C 6700                       		beq.s	loc_18B40
0001C86E 6000 FEC0                  		bra.w	loc_189FE
0001C872                            ; ===========================================================================
0001C872                            
0001C872                            loc_18B40:
0001C872 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C876 6000 FE84                  		bra.w	loc_189CA
0001C87A                            ; ===========================================================================
0001C87A                            
0001C87A                            loc_18B48:
0001C87A 5328 003C                  		subq.b	#1,$3C(a0)
0001C87E 6B00                       		bmi.s	loc_18B52
0001C880 6000 ECDE                  		bra.w	BossDefeated
0001C884                            ; ===========================================================================
0001C884                            
0001C884                            loc_18B52:
0001C884 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C888 4268 0012                  		clr.w	obVelY(a0)
0001C88C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C892 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C898 4268 0010                  		clr.w	obVelX(a0)
0001C89C 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001C8A2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C8A6 6600                       		bne.s	loc_18B7C
0001C8A8 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C8AE                            
0001C8AE                            loc_18B7C:
0001C8AE 6000 FE80                  		bra.w	loc_189FE
0001C8B2                            ; ===========================================================================
0001C8B2                            
0001C8B2                            loc_18B80:
0001C8B2 5228 003C                  		addq.b	#1,$3C(a0)
0001C8B6 6700                       		beq.s	loc_18B90
0001C8B8 6A00                       		bpl.s	loc_18B96
0001C8BA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C8C0 6000                       		bra.s	loc_18BC2
0001C8C2                            ; ===========================================================================
0001C8C2                            
0001C8C2                            loc_18B90:
0001C8C2 4268 0012                  		clr.w	obVelY(a0)
0001C8C6 6000                       		bra.s	loc_18BC2
0001C8C8                            ; ===========================================================================
0001C8C8                            
0001C8C8                            loc_18B96:
0001C8C8 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001C8CE 6500                       		bcs.s	loc_18BAE
0001C8D0 6700                       		beq.s	loc_18BB4
0001C8D2 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001C8D8 6500                       		bcs.s	loc_18BC2
0001C8DA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8DE 6000                       		bra.s	loc_18BC2
0001C8E0                            ; ===========================================================================
0001C8E0                            
0001C8E0                            loc_18BAE:
0001C8E0 5168 0012                  		subq.w	#8,obVelY(a0)
0001C8E4 6000                       		bra.s	loc_18BC2
0001C8E6                            ; ===========================================================================
0001C8E6                            
0001C8E6                            loc_18BB4:
0001C8E6 4268 0012                          	clr.w    obVelY(a0)
0001C8EA 4A38 FE2D                          	tst.b     (v_invinc).w
0001C8EE 6600                               	bne.s   @boss_invinc
0001C8F0                            
0001C8F0 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C8F4 6000 0000                          	bra.w      @boss_play
0001C8F8                            
0001C8F8                            	@boss_invinc:
0001C8F8 103C 0000                          	move.b #bgm_Invincible,d0
0001C8FC                            
0001C8FC                            	@boss_play:
0001C8FC 4EB8 12F8                          	jsr PlaySound
0001C900                            
0001C900                            loc_18BC2:
0001C900 6000 FE1E                  		bra.w	loc_189EE
0001C904                            ; ===========================================================================
0001C904                            
0001C904                            loc_18BC6:
0001C904 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C90A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C910 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001C916 6400                       		bcc.s	loc_18BE0
0001C918 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C91C 6000                       		bra.s	loc_18BE8
0001C91E                            ; ===========================================================================
0001C91E                            
0001C91E                            loc_18BE0:
0001C91E 4A28 0001                  		tst.b	obRender(a0)
0001C922 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001C926                            
0001C926                            loc_18BE8:
0001C926 6100 EC7A                  		bsr.w	BossMove
0001C92A 6000 FDD0                  		bra.w	loc_189CA
0001C92E                            ; ===========================================================================
0001C92E                            
0001C92E                            Obj7A_FaceMain:	; Routine 4
0001C92E 7000                       		moveq	#0,d0
0001C930 7201                       		moveq	#1,d1
0001C932 2268 0034                  		movea.l	$34(a0),a1
0001C936 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C93A 0C00 0006                  		cmpi.b	#6,d0
0001C93E 6B00                       		bmi.s	loc_18C06
0001C940 720A                       		moveq	#$A,d1
0001C942 6000                       		bra.s	loc_18C1A
0001C944                            ; ===========================================================================
0001C944                            
0001C944                            loc_18C06:
0001C944 4A29 0020                  		tst.b	obColType(a1)
0001C948 6600                       		bne.s	loc_18C10
0001C94A 7205                       		moveq	#5,d1
0001C94C 6000                       		bra.s	loc_18C1A
0001C94E                            ; ===========================================================================
0001C94E                            
0001C94E                            loc_18C10:
0001C94E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C954 6500                       		bcs.s	loc_18C1A
0001C956 7204                       		moveq	#4,d1
0001C958                            
0001C958                            loc_18C1A:
0001C958 1141 001C                  		move.b	d1,obAnim(a0)
0001C95C 0C00 000A                  		cmpi.b	#$A,d0
0001C960 6600                       		bne.s	loc_18C32
0001C962 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C968 4A28 0001                  		tst.b	obRender(a0)
0001C96C 6A00 FC74                  		bpl.w	Obj7A_Delete
0001C970                            
0001C970                            loc_18C32:
0001C970 6000                       		bra.s	loc_18C6C
0001C972                            ; ===========================================================================
0001C972                            
0001C972                            Obj7A_FlameMain:; Routine 6
0001C972 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C978 2268 0034                  		movea.l	$34(a0),a1
0001C97C 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C982 6600                       		bne.s	loc_18C56
0001C984 4A28 0001                  		tst.b	obRender(a0)
0001C988 6A00 FC58                  		bpl.w	Obj7A_Delete
0001C98C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C992 6000                       		bra.s	loc_18C6C
0001C994                            ; ===========================================================================
0001C994                            
0001C994                            loc_18C56:
0001C994 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C99A 6E00                       		bgt.s	loc_18C6C
0001C99C 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C9A2 6D00                       		blt.s	loc_18C6C
0001C9A4 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C9AA                            
0001C9AA                            loc_18C6C:
0001C9AA 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001C9B0 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001C9B6                            
0001C9B6                            loc_18C78:
0001C9B6 2268 0034                  		movea.l	$34(a0),a1
0001C9BA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C9C0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C9C6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C9CC 7003                       		moveq	#3,d0
0001C9CE C028 0022                  		and.b	obStatus(a0),d0
0001C9D2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C9D8 8128 0001                  		or.b	d0,obRender(a0)
0001C9DC 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001C9E2                            ; ===========================================================================
0001C9E2                            
0001C9E2                            Obj7A_TubeMain:	; Routine 8
0001C9E2 2268 0034                  		movea.l	$34(a0),a1
0001C9E6 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C9EC 6600                       		bne.s	loc_18CB8
0001C9EE 4A28 0001                  		tst.b	obRender(a0)
0001C9F2 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001C9F6                            
0001C9F6                            loc_18CB8:
0001C9F6 217C 0001 BAF6 0004        		move.l	#Map_BossItems,obMap(a0)
0001C9FE 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001CA04 117C 0003 001A             		move.b	#3,obFrame(a0)
0001CA0A 60AA                       		bra.s	loc_18C78
0001CA0A 60AA                       		bra.s	loc_18C78
0001CA0C                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001CA0C                            ; ---------------------------------------------------------------------------
0001CA0C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001CA0C                            ; ---------------------------------------------------------------------------
0001CA0C                            
0001CA0C                            BossSpikeball:
0001CA0C 7000                       		moveq	#0,d0
0001CA0E 1028 0024                  		move.b	obRoutine(a0),d0
0001CA12 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001CA16 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001CA1A 3028 0030                  		move.w	$30(a0),d0
0001CA1E 0240 FF80                  		andi.w	#$FF80,d0
0001CA22 3238 F700                  		move.w	(v_screenposx).w,d1
0001CA26 0441 0080                  		subi.w	#$80,d1
0001CA2A 0241 FF80                  		andi.w	#$FF80,d1
0001CA2E 9041                       		sub.w	d1,d0
0001CA30 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001CA34 0C40 0280                  		cmpi.w	#$280,d0
0001CA38 6200 FBA8                  		bhi.w	Obj7A_Delete
0001CA3C 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001CA42                            ; ===========================================================================
0001CA42 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001CA44 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001CA46 0000                       		dc.w loc_18DC6-Obj7B_Index
0001CA48 0000                       		dc.w loc_18EAA-Obj7B_Index
0001CA4A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001CA4C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001CA4E                            ; ===========================================================================
0001CA4E                            
0001CA4E                            Obj7B_Main:	; Routine 0
0001CA4E 217C 0001 3E18 0004        		move.l	#Map_SSawBall,obMap(a0)
0001CA56 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001CA5C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CA62 0028 0004 0001             		ori.b	#4,obRender(a0)
0001CA68 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001CA6E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001CA74 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001CA7A 2268 003C                  		movea.l	$3C(a0),a1
0001CA7E 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001CA84 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001CA8A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CA90 3028 0008                  		move.w	obX(a0),d0
0001CA94 B069 0008                  		cmp.w	obX(a1),d0
0001CA98 6E00                       		bgt.s	loc_18D68
0001CA9A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CAA0 117C 0002 003A             		move.b	#2,$3A(a0)
0001CAA6                            
0001CAA6                            loc_18D68:
0001CAA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CAAA                            
0001CAAA                            Obj7B_Fall:	; Routine 2
0001CAAA 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001CAB0 2268 003C                  		movea.l	$3C(a0),a1
0001CAB4 45F9 0000 0000             		lea	(word_19018).l,a2
0001CABA 7000                       		moveq	#0,d0
0001CABC 1029 001A                  		move.b	obFrame(a1),d0
0001CAC0 3228 0008                  		move.w	8(a0),d1
0001CAC4 9268 0030                  		sub.w	$30(a0),d1
0001CAC8 6400                       		bcc.s	loc_18D8E
0001CACA 5440                       		addq.w	#2,d0
0001CACC                            
0001CACC                            loc_18D8E:
0001CACC D040                       		add.w	d0,d0
0001CACE 3228 0034                  		move.w	$34(a0),d1
0001CAD2 D272 0000                  		add.w	(a2,d0.w),d1
0001CAD6 B268 000C                  		cmp.w	obY(a0),d1
0001CADA 6E00                       		bgt.s	locret_18DC4
0001CADC 2268 003C                  		movea.l	$3C(a0),a1
0001CAE0 7202                       		moveq	#2,d1
0001CAE2 0828 0000 0022             		btst	#0,obStatus(a0)
0001CAE8 6700                       		beq.s	loc_18DAE
0001CAEA 7200                       		moveq	#0,d1
0001CAEC                            
0001CAEC                            loc_18DAE:
0001CAEC 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001CAF2 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001CAF8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CAFE 6000 0000                  		bra.w	loc_18FA2
0001CB02                            ; ===========================================================================
0001CB02                            
0001CB02                            locret_18DC4:
0001CB02 4E75                       		rts	
0001CB04                            ; ===========================================================================
0001CB04                            
0001CB04                            loc_18DC6:	; Routine 4
0001CB04 2268 003C                  		movea.l	$3C(a0),a1
0001CB08 7000                       		moveq	#0,d0
0001CB0A 1028 003A                  		move.b	$3A(a0),d0
0001CB0E 9029 003A                  		sub.b	$3A(a1),d0
0001CB12 6700                       		beq.s	loc_18E2A
0001CB14 6400                       		bcc.s	loc_18DDA
0001CB16 4400                       		neg.b	d0
0001CB18                            
0001CB18                            loc_18DDA:
0001CB18 323C F7E8                  		move.w	#-$818,d1
0001CB1C 343C FEEC                  		move.w	#-$114,d2
0001CB20 0C00 0001                  		cmpi.b	#1,d0
0001CB24 6700                       		beq.s	loc_18E00
0001CB26 323C F6A0                  		move.w	#-$960,d1
0001CB2A 343C FF0C                  		move.w	#-$F4,d2
0001CB2E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001CB34 6D00                       		blt.s	loc_18E00
0001CB36 323C F5E0                  		move.w	#-$A20,d1
0001CB3A 343C FF80                  		move.w	#-$80,d2
0001CB3E                            
0001CB3E                            loc_18E00:
0001CB3E 3141 0012                  		move.w	d1,obVelY(a0)
0001CB42 3142 0010                  		move.w	d2,obVelX(a0)
0001CB46 3028 0008                  		move.w	obX(a0),d0
0001CB4A 9068 0030                  		sub.w	$30(a0),d0
0001CB4E 6400                       		bcc.s	loc_18E16
0001CB50 4468 0010                  		neg.w	obVelX(a0)
0001CB54                            
0001CB54                            loc_18E16:
0001CB54 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CB5A 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CB60 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB64 6000 0000                  		bra.w	loc_18EAA
0001CB68                            ; ===========================================================================
0001CB68                            
0001CB68                            loc_18E2A:
0001CB68 45F9 0000 0000             		lea	(word_19018).l,a2
0001CB6E 7000                       		moveq	#0,d0
0001CB70 1029 001A                  		move.b	obFrame(a1),d0
0001CB74 343C 0028                  		move.w	#$28,d2
0001CB78 3228 0008                  		move.w	obX(a0),d1
0001CB7C 9268 0030                  		sub.w	$30(a0),d1
0001CB80 6400                       		bcc.s	loc_18E48
0001CB82 4442                       		neg.w	d2
0001CB84 5440                       		addq.w	#2,d0
0001CB86                            
0001CB86                            loc_18E48:
0001CB86 D040                       		add.w	d0,d0
0001CB88 3228 0034                  		move.w	$34(a0),d1
0001CB8C D272 0000                  		add.w	(a2,d0.w),d1
0001CB90 3141 000C                  		move.w	d1,obY(a0)
0001CB94 D468 0030                  		add.w	$30(a0),d2
0001CB98 3142 0008                  		move.w	d2,obX(a0)
0001CB9C 4268 000E                  		clr.w	obY+2(a0)
0001CBA0 4268 000A                  		clr.w	obX+2(a0)
0001CBA4 5368 0028                  		subq.w	#1,obSubtype(a0)
0001CBA8 6600                       		bne.s	loc_18E7A
0001CBAA 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CBB0 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001CBB6 4E75                       		rts	
0001CBB8                            ; ===========================================================================
0001CBB8                            
0001CBB8                            loc_18E7A:
0001CBB8 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001CBBE 6600                       		bne.s	loc_18E88
0001CBC0 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001CBC6                            
0001CBC6                            loc_18E88:
0001CBC6 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001CBCC 6600                       		bne.s	loc_18E96
0001CBCE 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001CBD4                            
0001CBD4                            loc_18E96:
0001CBD4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001CBD8 6E00                       		bgt.s	locret_18EA8
0001CBDA 0868 0000 001A             		bchg	#0,obFrame(a0)
0001CBE0 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CBE6                            
0001CBE6                            locret_18EA8:
0001CBE6 4E75                       		rts	
0001CBE8                            ; ===========================================================================
0001CBE8                            
0001CBE8                            loc_18EAA:	; Routine 6
0001CBE8 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001CBEC 707A                       		moveq	#id_BossStarLight,d0
0001CBEE 7240                       		moveq	#$40,d1
0001CBF0 743E                       		moveq	#$3E,d2
0001CBF2                            
0001CBF2                            loc_18EB4:
0001CBF2 B011                       		cmp.b	(a1),d0
0001CBF4 6700                       		beq.s	loc_18EC0
0001CBF6 D2C1                       		adda.w	d1,a1
0001CBF8 51CA FFF8                  		dbf	d2,loc_18EB4
0001CBFC                            
0001CBFC 6000                       		bra.s	loc_18F38
0001CBFE                            ; ===========================================================================
0001CBFE                            
0001CBFE                            loc_18EC0:
0001CBFE 3029 0008                  		move.w	obX(a1),d0
0001CC02 3229 000C                  		move.w	obY(a1),d1
0001CC06 3428 0008                  		move.w	obX(a0),d2
0001CC0A 3628 000C                  		move.w	obY(a0),d3
0001CC0E 45FA 0000                  		lea	byte_19022(pc),a2
0001CC12 47FA 0000                  		lea	byte_19026(pc),a3
0001CC16 181A                       		move.b	(a2)+,d4
0001CC18 4884                       		ext.w	d4
0001CC1A D044                       		add.w	d4,d0
0001CC1C 181B                       		move.b	(a3)+,d4
0001CC1E 4884                       		ext.w	d4
0001CC20 D444                       		add.w	d4,d2
0001CC22 B440                       		cmp.w	d0,d2
0001CC24 6500                       		bcs.s	loc_18F38
0001CC26 181A                       		move.b	(a2)+,d4
0001CC28 4884                       		ext.w	d4
0001CC2A D044                       		add.w	d4,d0
0001CC2C 181B                       		move.b	(a3)+,d4
0001CC2E 4884                       		ext.w	d4
0001CC30 D444                       		add.w	d4,d2
0001CC32 B042                       		cmp.w	d2,d0
0001CC34 6500                       		bcs.s	loc_18F38
0001CC36 181A                       		move.b	(a2)+,d4
0001CC38 4884                       		ext.w	d4
0001CC3A D244                       		add.w	d4,d1
0001CC3C 181B                       		move.b	(a3)+,d4
0001CC3E 4884                       		ext.w	d4
0001CC40 D644                       		add.w	d4,d3
0001CC42 B641                       		cmp.w	d1,d3
0001CC44 6500                       		bcs.s	loc_18F38
0001CC46 181A                       		move.b	(a2)+,d4
0001CC48 4884                       		ext.w	d4
0001CC4A D244                       		add.w	d4,d1
0001CC4C 181B                       		move.b	(a3)+,d4
0001CC4E 4884                       		ext.w	d4
0001CC50 D644                       		add.w	d4,d3
0001CC52 B243                       		cmp.w	d3,d1
0001CC54 6500                       		bcs.s	loc_18F38
0001CC56 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC5A 4268 0028                  		clr.w	obSubtype(a0)
0001CC5E 4229 0020                  		clr.b	obColType(a1)
0001CC62 5329 0021                  		subq.b	#1,obColProp(a1)
0001CC66 6600                       		bne.s	loc_18F38
0001CC68 08E9 0007 0022             		bset	#7,obStatus(a1)
0001CC6E 4268 0010                  		clr.w	obVelX(a0)
0001CC72 4268 0012                  		clr.w	obVelY(a0)
0001CC76                            
0001CC76                            loc_18F38:
0001CC76 4A68 0012                  		tst.w	obVelY(a0)
0001CC7A 6A00                       		bpl.s	loc_18F5C
0001CC7C 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001CC82 3028 0034                  		move.w	$34(a0),d0
0001CC86 0440 002F                  		subi.w	#$2F,d0
0001CC8A B068 000C                  		cmp.w	obY(a0),d0
0001CC8E 6E00                       		bgt.s	loc_18F58
0001CC90 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001CC96                            
0001CC96                            loc_18F58:
0001CC96 6000 FF20                  		bra.w	loc_18E7A
0001CC9A                            ; ===========================================================================
0001CC9A                            
0001CC9A                            loc_18F5C:
0001CC9A 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001CCA0 2268 003C                  		movea.l	$3C(a0),a1
0001CCA4 45F9 0000 0000             		lea	(word_19018).l,a2
0001CCAA 7000                       		moveq	#0,d0
0001CCAC 1029 001A                  		move.b	obFrame(a1),d0
0001CCB0 3228 0008                  		move.w	obX(a0),d1
0001CCB4 9268 0030                  		sub.w	$30(a0),d1
0001CCB8 6400                       		bcc.s	loc_18F7E
0001CCBA 5440                       		addq.w	#2,d0
0001CCBC                            
0001CCBC                            loc_18F7E:
0001CCBC D040                       		add.w	d0,d0
0001CCBE 3228 0034                  		move.w	$34(a0),d1
0001CCC2 D272 0000                  		add.w	(a2,d0.w),d1
0001CCC6 B268 000C                  		cmp.w	obY(a0),d1
0001CCCA 6ECA                       		bgt.s	loc_18F58
0001CCCC 2268 003C                  		movea.l	$3C(a0),a1
0001CCD0 7202                       		moveq	#2,d1
0001CCD2 4A68 0010                  		tst.w	obVelX(a0)
0001CCD6 6B00                       		bmi.s	loc_18F9C
0001CCD8 7200                       		moveq	#0,d1
0001CCDA                            
0001CCDA                            loc_18F9C:
0001CCDA 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001CCE0                            
0001CCE0                            loc_18FA2:
0001CCE0 1341 003A                  		move.b	d1,$3A(a1)
0001CCE4 1141 003A                  		move.b	d1,$3A(a0)
0001CCE8 B229 001A                  		cmp.b	obFrame(a1),d1
0001CCEC 6700                       		beq.s	loc_19008
0001CCEE 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001CCF4 6700                       		beq.s	loc_19008
0001CCF6 4229 0025                  		clr.b	ob2ndRout(a1)
0001CCFA 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001CD00 45F8 D000                  		lea	(v_objspace).w,a2
0001CD04 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001CD0A 446A 0012                  		neg.w	obVelY(a2)
0001CD0E 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001CD14 6600                       		bne.s	loc_18FDC
0001CD16 E0EA 0012                  		asr	obVelY(a2)
0001CD1A                            
0001CD1A                            loc_18FDC:
0001CD1A 08EA 0001 0022             		bset	#1,obStatus(a2)
0001CD20 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001CD26 422A 003C                  		clr.b	$3C(a2)
0001CD2A 2F08                       		move.l	a0,-(sp)
0001CD2C 41D2                       		lea	(a2),a0
0001CD2E 4EB9 0001 6310             		jsr	(Sonic_ChkRoll).l
0001CD34 205F                       		movea.l	(sp)+,a0
0001CD36 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001CD46                            
0001CD46                            loc_19008:
0001CD46 4268 0010                  		clr.w	obVelX(a0)
0001CD4A 4268 0012                  		clr.w	obVelY(a0)
0001CD4E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CD52 6000 FE64                  		bra.w	loc_18E7A
0001CD56                            ; ===========================================================================
0001CD56 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001CD60                            		even
0001CD60 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001CD64                            		even
0001CD64 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001CD68                            		even
0001CD68                            ; ===========================================================================
0001CD68                            
0001CD68                            Obj7B_Explode:	; Routine 8
0001CD68 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001CD6C 4228 0024                  		clr.b	obRoutine(a0)
0001CD70 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001CD76 6700                       		beq.s	Obj7B_MakeFrag
0001CD78 4E75                       		rts	
0001CD7A                            ; ===========================================================================
0001CD7A                            
0001CD7A                            Obj7B_MakeFrag:
0001CD7A 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001CD80 7203                       		moveq	#3,d1
0001CD82 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001CD86                            
0001CD86                            Obj7B_Loop:
0001CD86 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001CD8C 6600                       		bne.s	loc_1909A
0001CD8E 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001CD92 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001CD98 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001CDA0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CDA6 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001CDAC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CDB2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CDB8 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001CDBC 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001CDC0 137C 0098 0020             		move.b	#$98,obColType(a1)
0001CDC6 0029 0004 0001             		ori.b	#4,obRender(a1)
0001CDCC 08E9 0007 0001             		bset	#7,obRender(a1)
0001CDD2 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001CDD8                            
0001CDD8                            loc_1909A:
0001CDD8 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001CDDC                            
0001CDDC 4E75                       		rts	
0001CDDE                            ; ===========================================================================
0001CDDE FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001CDE2 FF60 FDC0                  		dc.w -$A0, -$240
0001CDE6 0100 FCC0                  		dc.w $100, -$340
0001CDEA 00A0 FDC0                  		dc.w $A0, -$240
0001CDEE                            ; ===========================================================================
0001CDEE                            
0001CDEE                            Obj7B_MoveFrag:	; Routine $A
0001CDEE 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001CDF4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CDFA 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001CE00 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001CE06 7004                       		moveq	#4,d0
0001CE08 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CE0C E448                       		lsr.w	#2,d0
0001CE0E 1140 001A                  		move.b	d0,obFrame(a0)
0001CE12 4A28 0001                  		tst.b	1(a0)
0001CE16 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001CE1A 4E75                       		rts	
0001CE1A 4E75                       		rts	
0001CE1C                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001CE1C                            ; ---------------------------------------------------------------------------
0001CE1C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001CE1C                            ; ---------------------------------------------------------------------------
0001CE1C                            Map_BSBall_internal:
0001CE1C 0000                       		dc.w @fireball1-Map_BSBall_internal
0001CE1E 0000                       		dc.w @fireball2-Map_BSBall_internal
0001CE20 01                         @fireball1:	dc.b 1
0001CE21 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001CE26 01                         @fireball2:	dc.b 1
0001CE27 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001CE2C                            		even
0001CE2C                            		even
0001CE2C                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001CE2C                            ; ---------------------------------------------------------------------------
0001CE2C                            ; Object 75 - Eggman (SYZ)
0001CE2C                            ; ---------------------------------------------------------------------------
0001CE2C                            
0001CE2C                            BossSpringYard:
0001CE2C 7000                       		moveq	#0,d0
0001CE2E 1028 0024                  		move.b	obRoutine(a0),d0
0001CE32 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001CE36 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001CE3A                            ; ===========================================================================
0001CE3A 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001CE3C 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001CE3E 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001CE40 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001CE42 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001CE44                            
0001CE44 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001CE48 0401 0280                  		dc.b 4,	1, $02, $80
0001CE4C 0607 0280                  		dc.b 6,	7, $02, $80
0001CE50 0800 0280                  		dc.b 8,	0, $02, $80
0001CE54                            ; ===========================================================================
0001CE54                            
0001CE54                            Obj75_Main:	; Routine 0
0001CE54 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001CE5A 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001CE60 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CE66 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001CE6C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CE72 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001CE78 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001CE7C 2248                       		movea.l	a0,a1
0001CE7E 7203                       		moveq	#3,d1
0001CE80 6000                       		bra.s	Obj75_LoadBoss
0001CE82                            ; ===========================================================================
0001CE82                            
0001CE82                            Obj75_Loop:
0001CE82 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001CE88 6600                       		bne.s	Obj75_ShipMain
0001CE8A 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001CE8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CE94 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CE9A                            
0001CE9A                            Obj75_LoadBoss:
0001CE9A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CEA0 4229 0025                  		clr.b	ob2ndRout(a1)
0001CEA4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CEA8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CEAC 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001CEB0 237C 0001 BA06 0004        		move.l	#Map_Eggman,obMap(a1)
0001CEB8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001CEBE 137C 0004 0001             		move.b	#4,obRender(a1)
0001CEC4 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001CECA 2348 0034                  		move.l	a0,$34(a1)
0001CECE 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001CED2                            
0001CED2                            Obj75_ShipMain:	; Routine 2
0001CED2 7000                       		moveq	#0,d0
0001CED4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CED8 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001CEDC 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001CEE0 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001CEE6 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001CEEC 7003                       		moveq	#3,d0
0001CEEE C028 0022                  		and.b	obStatus(a0),d0
0001CEF2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001CEF8 8128 0001                  		or.b	d0,obRender(a0)
0001CEFC 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001CF02                            ; ===========================================================================
0001CF02 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001CF06 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001CF0A 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001CF0E                            ; ===========================================================================
0001CF0E                            
0001CF0E                            loc_191CC:
0001CF0E 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001CF14 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001CF1A 6400                       		bcc.s	loc_191DE
0001CF1C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CF20                            
0001CF20                            loc_191DE:
0001CF20 1028 003F                  		move.b	$3F(a0),d0
0001CF24 5428 003F                  		addq.b	#2,$3F(a0)
0001CF28 4EB9 0000 3D28             		jsr	(CalcSine).l
0001CF2E E440                       		asr.w	#2,d0
0001CF30 3140 0012                  		move.w	d0,obVelY(a0)
0001CF34                            
0001CF34                            loc_191F2:
0001CF34 6100 E66C                  		bsr.w	BossMove
0001CF38 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001CF3E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CF44                            
0001CF44                            loc_19202:
0001CF44 3028 0008                  		move.w	8(a0),d0
0001CF48 0440 2C00                  		subi.w	#$2C00,d0
0001CF4C EA48                       		lsr.w	#5,d0
0001CF4E 1140 0034                  		move.b	d0,$34(a0)
0001CF52 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001CF58 6400                       		bcc.s	locret_19256
0001CF5A 4A28 0022                  		tst.b	obStatus(a0)
0001CF5E 6B00                       		bmi.s	loc_19258
0001CF60 4A28 0020                  		tst.b	obColType(a0)
0001CF64 6600                       		bne.s	locret_19256
0001CF66 4A28 003E                  		tst.b	$3E(a0)
0001CF6A 6600                       		bne.s	loc_1923A
0001CF6C 117C 0020 003E             		move.b	#$20,$3E(a0)
0001CF7C                            
0001CF7C                            loc_1923A:
0001CF7C 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001CF80 7000                       		moveq	#0,d0
0001CF82 4A51                       		tst.w	(a1)
0001CF84 6600                       		bne.s	loc_19248
0001CF86 303C 0EEE                  		move.w	#cWhite,d0
0001CF8A                            
0001CF8A                            loc_19248:
0001CF8A 3280                       		move.w	d0,(a1)
0001CF8C 5328 003E                  		subq.b	#1,$3E(a0)
0001CF90 6600                       		bne.s	locret_19256
0001CF92 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CF98                            
0001CF98                            locret_19256:
0001CF98 4E75                       		rts	
0001CF9A                            ; ===========================================================================
0001CF9A                            
0001CF9A                            loc_19258:
0001CF9A 7064                       		moveq	#100,d0
0001CF9C 6100 0000                  		bsr.w	AddPoints
0001CFA0 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001CFA6 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001CFAC 4268 0010                  		clr.w	obVelX(a0)
0001CFB0 4E75                       		rts	
0001CFB2                            ; ===========================================================================
0001CFB2                            
0001CFB2                            loc_19270:
0001CFB2 3028 0030                  		move.w	$30(a0),d0
0001CFB6 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001CFBC 0828 0000 0022             		btst	#0,obStatus(a0)
0001CFC2 6600                       		bne.s	loc_1928E
0001CFC4 4468 0010                  		neg.w	obVelX(a0)
0001CFC8 0C40 2C08                  		cmpi.w	#$2C08,d0
0001CFCC 6E00                       		bgt.s	loc_1929E
0001CFCE 6000                       		bra.s	loc_19294
0001CFD0                            ; ===========================================================================
0001CFD0                            
0001CFD0                            loc_1928E:
0001CFD0 0C40 2D38                  		cmpi.w	#$2D38,d0
0001CFD4 6D00                       		blt.s	loc_1929E
0001CFD6                            
0001CFD6                            loc_19294:
0001CFD6 0868 0000 0022             		bchg	#0,obStatus(a0)
0001CFDC 4228 003D                  		clr.b	$3D(a0)
0001CFE0                            
0001CFE0                            loc_1929E:
0001CFE0 0440 2C10                  		subi.w	#$2C10,d0
0001CFE4 0240 001F                  		andi.w	#$1F,d0
0001CFE8 0440 001F                  		subi.w	#$1F,d0
0001CFEC 6A00                       		bpl.s	loc_192AE
0001CFEE 4440                       		neg.w	d0
0001CFF0                            
0001CFF0                            loc_192AE:
0001CFF0 5340                       		subq.w	#1,d0
0001CFF2 6E00                       		bgt.s	loc_192E8
0001CFF4 4A28 003D                  		tst.b	$3D(a0)
0001CFF8 6600                       		bne.s	loc_192E8
0001CFFA 3238 D008                  		move.w	(v_player+obX).w,d1
0001CFFE 0441 2C00                  		subi.w	#$2C00,d1
0001D002 EA41                       		asr.w	#5,d1
0001D004 B228 0034                  		cmp.b	$34(a0),d1
0001D008 6600                       		bne.s	loc_192E8
0001D00A 7000                       		moveq	#0,d0
0001D00C 1028 0034                  		move.b	$34(a0),d0
0001D010 EB40                       		asl.w	#5,d0
0001D012 0640 2C10                  		addi.w	#$2C10,d0
0001D016 3140 0030                  		move.w	d0,$30(a0)
0001D01A 6100 0000                  		bsr.w	Obj75_FindBlocks
0001D01E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D022 4268 0028                  		clr.w	obSubtype(a0)
0001D026 4268 0010                  		clr.w	obVelX(a0)
0001D02A                            
0001D02A                            loc_192E8:
0001D02A 6000 FEF4                  		bra.w	loc_191DE
0001D02E                            ; ===========================================================================
0001D02E                            
0001D02E                            loc_192EC:
0001D02E 7000                       		moveq	#0,d0
0001D030 1028 0028                  		move.b	obSubtype(a0),d0
0001D034 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001D038 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001D03C                            ; ===========================================================================
0001D03C 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001D03E 0000                       		dc.w loc_19348-off_192FA
0001D040 0000                       		dc.w loc_1938E-off_192FA
0001D042 0000                       		dc.w loc_193D0-off_192FA
0001D044                            ; ===========================================================================
0001D044                            
0001D044                            loc_19302:
0001D044 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001D04A 3028 0038                  		move.w	$38(a0),d0
0001D04E 0C40 0556                  		cmpi.w	#$556,d0
0001D052 6500                       		bcs.s	loc_19344
0001D054 317C 0556 0038             		move.w	#$556,$38(a0)
0001D05A 4268 003C                  		clr.w	$3C(a0)
0001D05E 70FF                       		moveq	#-1,d0
0001D060 3028 0036                  		move.w	$36(a0),d0
0001D064 6700                       		beq.s	loc_1933C
0001D066 2240                       		movea.l	d0,a1
0001D068 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D06E 117C 00FF 0029             		move.b	#-1,$29(a0)
0001D074 2348 0034                  		move.l	a0,$34(a1)
0001D078 317C 0032 003C             		move.w	#$32,$3C(a0)
0001D07E                            
0001D07E                            loc_1933C:
0001D07E 4268 0012                  		clr.w	obVelY(a0)
0001D082 5428 0028                  		addq.b	#2,obSubtype(a0)
0001D086                            
0001D086                            loc_19344:
0001D086 6000 FEAC                  		bra.w	loc_191F2
0001D08A                            ; ===========================================================================
0001D08A                            
0001D08A                            loc_19348:
0001D08A 5368 003C                  		subq.w	#1,$3C(a0)
0001D08E 6A00                       		bpl.s	loc_19366
0001D090 5428 0028                  		addq.b	#2,obSubtype(a0)
0001D094 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001D09A 4A68 0036                  		tst.w	$36(a0)
0001D09E 6600                       		bne.s	loc_19362
0001D0A0 E0E8 0012                  		asr	obVelY(a0)
0001D0A4                            
0001D0A4                            loc_19362:
0001D0A4 7000                       		moveq	#0,d0
0001D0A6 6000                       		bra.s	loc_1937C
0001D0A8                            ; ===========================================================================
0001D0A8                            
0001D0A8                            loc_19366:
0001D0A8 7000                       		moveq	#0,d0
0001D0AA 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001D0B0 6E00                       		bgt.s	loc_1937C
0001D0B2 7002                       		moveq	#2,d0
0001D0B4 0828 0001 003D             		btst	#1,$3D(a0)
0001D0BA 6700                       		beq.s	loc_1937C
0001D0BC 4440                       		neg.w	d0
0001D0BE                            
0001D0BE                            loc_1937C:
0001D0BE D068 0038                  		add.w	$38(a0),d0
0001D0C2 3140 000C                  		move.w	d0,obY(a0)
0001D0C6 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001D0CC 6000 FE76                  		bra.w	loc_19202
0001D0D0                            ; ===========================================================================
0001D0D0                            
0001D0D0                            loc_1938E:
0001D0D0 303C 04DA                  		move.w	#$4DA,d0
0001D0D4 4A68 0036                  		tst.w	$36(a0)
0001D0D8 6700                       		beq.s	loc_1939C
0001D0DA 0440 0018                  		subi.w	#$18,d0
0001D0DE                            
0001D0DE                            loc_1939C:
0001D0DE B068 0038                  		cmp.w	$38(a0),d0
0001D0E2 6D00                       		blt.s	loc_193BE
0001D0E4 317C 0008 003C             		move.w	#8,$3C(a0)
0001D0EA 4A68 0036                  		tst.w	$36(a0)
0001D0EE 6700                       		beq.s	loc_193B4
0001D0F0 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001D0F6                            
0001D0F6                            loc_193B4:
0001D0F6 5428 0028                  		addq.b	#2,obSubtype(a0)
0001D0FA 4268 0012                  		clr.w	obVelY(a0)
0001D0FE 6000                       		bra.s	loc_193CC
0001D100                            ; ===========================================================================
0001D100                            
0001D100                            loc_193BE:
0001D100 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001D106 6C00                       		bge.s	loc_193CC
0001D108 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001D10E                            
0001D10E                            loc_193CC:
0001D10E 6000 FE24                  		bra.w	loc_191F2
0001D112                            ; ===========================================================================
0001D112                            
0001D112                            loc_193D0:
0001D112 5368 003C                  		subq.w	#1,$3C(a0)
0001D116 6E00                       		bgt.s	loc_19406
0001D118 6B00                       		bmi.s	loc_193EE
0001D11A 70FF                       		moveq	#-1,d0
0001D11C 3028 0036                  		move.w	$36(a0),d0
0001D120 6700                       		beq.s	loc_193E8
0001D122 2240                       		movea.l	d0,a1
0001D124 137C 000A 0029             		move.b	#$A,$29(a1)
0001D12A                            
0001D12A                            loc_193E8:
0001D12A 4268 0036                  		clr.w	$36(a0)
0001D12E 6000                       		bra.s	loc_19406
0001D130                            ; ===========================================================================
0001D130                            
0001D130                            loc_193EE:
0001D130 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001D136 6600                       		bne.s	loc_19406
0001D138 4228 0029                  		clr.b	$29(a0)
0001D13C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001D140 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001D146 6000                       		bra.s	loc_19446
0001D148                            ; ===========================================================================
0001D148                            
0001D148                            loc_19406:
0001D148 7001                       		moveq	#1,d0
0001D14A 4A68 0036                  		tst.w	$36(a0)
0001D14E 6700                       		beq.s	loc_19410
0001D150 7002                       		moveq	#2,d0
0001D152                            
0001D152                            loc_19410:
0001D152 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001D158 6700                       		beq.s	loc_19424
0001D15A 6D00                       		blt.s	loc_1941C
0001D15C 4440                       		neg.w	d0
0001D15E                            
0001D15E                            loc_1941C:
0001D15E 4A68 0036                  		tst.w	$36(a0)
0001D162 D168 0038                  		add.w	d0,$38(a0)
0001D166                            
0001D166                            loc_19424:
0001D166 7000                       		moveq	#0,d0
0001D168 4A68 0036                  		tst.w	$36(a0)
0001D16C 6700                       		beq.s	loc_19438
0001D16E 7002                       		moveq	#2,d0
0001D170 0828 0000 003D             		btst	#0,$3D(a0)
0001D176 6700                       		beq.s	loc_19438
0001D178 4440                       		neg.w	d0
0001D17A                            
0001D17A                            loc_19438:
0001D17A D068 0038                  		add.w	$38(a0),d0
0001D17E 3140 000C                  		move.w	d0,obY(a0)
0001D182 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D188                            
0001D188                            loc_19446:
0001D188 6000 FDBA                  		bra.w	loc_19202
0001D18C                            
0001D18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D18C                            
0001D18C                            
0001D18C                            Obj75_FindBlocks:
0001D18C 4268 0036                  		clr.w	$36(a0)
0001D190 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001D194 703E                       		moveq	#$3E,d0
0001D196 7276                       		moveq	#$76,d1
0001D198 1428 0034                  		move.b	$34(a0),d2
0001D19C                            
0001D19C                            Obj75_FindLoop:
0001D19C B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001D19E 6600                       		bne.s	loc_1946A	; if not, branch
0001D1A0 B429 0028                  		cmp.b	obSubtype(a1),d2
0001D1A4 6600                       		bne.s	loc_1946A
0001D1A6 3149 0036                  		move.w	a1,$36(a0)
0001D1AA 6000                       		bra.s	locret_19472
0001D1AC                            ; ===========================================================================
0001D1AC                            
0001D1AC                            loc_1946A:
0001D1AC 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001D1B0 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001D1B4                            
0001D1B4                            locret_19472:
0001D1B4 4E75                       		rts	
0001D1B6                            ; End of function Obj75_FindBlocks
0001D1B6                            
0001D1B6                            ; ===========================================================================
0001D1B6                            
0001D1B6                            loc_19474:
0001D1B6 5368 003C                  		subq.w	#1,$3C(a0)
0001D1BA 6B00                       		bmi.s	loc_1947E
0001D1BC 6000 E3A2                  		bra.w	BossDefeated
0001D1C0                            ; ===========================================================================
0001D1C0                            
0001D1C0                            loc_1947E:
0001D1C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D1C4 4268 0012                  		clr.w	obVelY(a0)
0001D1C8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1CE 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001D1D4 4268 0010                  		clr.w	obVelX(a0)
0001D1D8 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001D1DE 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001D1E2 6600                       		bne.s	loc_194A8
0001D1E4 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001D1EA                            
0001D1EA                            loc_194A8:
0001D1EA 6000 FD58                  		bra.w	loc_19202
0001D1EE                            ; ===========================================================================
0001D1EE                            
0001D1EE                            loc_194AC:
0001D1EE 5268 003C                  		addq.w	#1,$3C(a0)
0001D1F2 6700                       		beq.s	loc_194BC
0001D1F4 6A00                       		bpl.s	loc_194C2
0001D1F6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001D1FC 6000                       		bra.s	loc_194EE
0001D1FE                            ; ===========================================================================
0001D1FE                            
0001D1FE                            loc_194BC:
0001D1FE 4268 0012                  		clr.w	obVelY(a0)
0001D202 6000                       		bra.s	loc_194EE
0001D204                            ; ===========================================================================
0001D204                            
0001D204                            loc_194C2:
0001D204 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001D20A 6500                       		bcs.s	loc_194DA
0001D20C 6700                       		beq.s	loc_194E0
0001D20E 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001D214 6500                       		bcs.s	loc_194EE
0001D216 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D21A 6000                       		bra.s	loc_194EE
0001D21C                            ; ===========================================================================
0001D21C                            
0001D21C                            loc_194DA:
0001D21C 5168 0012                  		subq.w	#8,obVelY(a0)
0001D220 6000                       		bra.s	loc_194EE
0001D222                            ; ===========================================================================
0001D222                            
0001D222                            loc_194E0:
0001D222 4268 0012                  		clr.w    obVelY(a0)
0001D226 4A38 FE2D                          	tst.b     (v_invinc).w
0001D22A 6600                               	bne.s   @boss_invinc
0001D22C                            
0001D22C 1038 F5C6                          	move.b   (v_Saved_music),d0
0001D230 6000 0000                          	bra.w      @boss_play
0001D234                            
0001D234                            @boss_invinc:
0001D234 103C 0000                          	move.b #bgm_Invincible,d0
0001D238                            
0001D238                            @boss_play:
0001D238 4EB8 12F8                          	jsr PlaySound
0001D23C                            
0001D23C                            loc_194EE:
0001D23C 6000 FCF6                  		bra.w	loc_191F2
0001D240                            ; ===========================================================================
0001D240                            
0001D240                            loc_194F2:
0001D240 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D246 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D24C 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001D252 6400                       		bcc.s	loc_1950C
0001D254 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D258 6000                       		bra.s	loc_19512
0001D25A                            ; ===========================================================================
0001D25A                            
0001D25A                            loc_1950C:
0001D25A 4A28 0001                  		tst.b	obRender(a0)
0001D25E 6A00                       		bpl.s	Obj75_ShipDelete
0001D260                            
0001D260                            loc_19512:
0001D260 6100 E340                  		bsr.w	BossMove
0001D264 6000 FCBA                  		bra.w	loc_191DE
0001D268                            ; ===========================================================================
0001D268                            
0001D268                            Obj75_ShipDelete:
0001D268 4EF9 0000 F898             		jmp	(DeleteObject).l
0001D26E                            ; ===========================================================================
0001D26E                            
0001D26E                            Obj75_FaceMain:	; Routine 4
0001D26E 7201                       		moveq	#1,d1
0001D270 2268 0034                  		movea.l	$34(a0),a1
0001D274 7000                       		moveq	#0,d0
0001D276 1029 0025                  		move.b	ob2ndRout(a1),d0
0001D27A 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001D27E 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001D282 1141 001C                  		move.b	d1,obAnim(a0)
0001D286 1010                       		move.b	(a0),d0
0001D288 B011                       		cmp.b	(a1),d0
0001D28A 6600                       		bne.s	Obj75_FaceDelete
0001D28C 6000                       		bra.s	loc_195BE
0001D28E                            ; ===========================================================================
0001D28E                            
0001D28E                            Obj75_FaceDelete:
0001D28E 4EF9 0000 F898             		jmp	(DeleteObject).l
0001D294                            ; ===========================================================================
0001D294 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001D298 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001D29C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001D2A0                            ; ===========================================================================
0001D2A0                            
0001D2A0                            loc_19552:
0001D2A0 720A                       		moveq	#$A,d1
0001D2A2 4E75                       		rts	
0001D2A4                            ; ===========================================================================
0001D2A4                            
0001D2A4                            loc_19556:
0001D2A4 7206                       		moveq	#6,d1
0001D2A6 4E75                       		rts	
0001D2A8                            ; ===========================================================================
0001D2A8                            
0001D2A8                            loc_1955A:
0001D2A8 7000                       		moveq	#0,d0
0001D2AA 1029 0028                  		move.b	obSubtype(a1),d0
0001D2AE 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001D2B2 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001D2B6                            ; ===========================================================================
0001D2B6 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001D2BA 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001D2BE                            ; ===========================================================================
0001D2BE                            
0001D2BE                            loc_19570:
0001D2BE 6000                       		bra.s	loc_19574
0001D2C0                            ; ===========================================================================
0001D2C0                            
0001D2C0                            loc_19572:
0001D2C0 7206                       		moveq	#6,d1
0001D2C2                            
0001D2C2                            loc_19574:
0001D2C2 4A29 0020                  		tst.b	obColType(a1)
0001D2C6 6600                       		bne.s	loc_1957E
0001D2C8 7205                       		moveq	#5,d1
0001D2CA 4E75                       		rts	
0001D2CC                            ; ===========================================================================
0001D2CC                            
0001D2CC                            loc_1957E:
0001D2CC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001D2D2 6500                       		bcs.s	locret_19588
0001D2D4 7204                       		moveq	#4,d1
0001D2D6                            
0001D2D6                            locret_19588:
0001D2D6 4E75                       		rts	
0001D2D8                            ; ===========================================================================
0001D2D8                            
0001D2D8                            Obj75_FlameMain:; Routine 6
0001D2D8 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D2DE 2268 0034                  		movea.l	$34(a0),a1
0001D2E2 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D2E8 6600                       		bne.s	loc_195AA
0001D2EA 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D2F0 4A28 0001                  		tst.b	1(a0)
0001D2F4 6A00                       		bpl.s	Obj75_FlameDelete
0001D2F6 6000                       		bra.s	loc_195B6
0001D2F8                            ; ===========================================================================
0001D2F8                            
0001D2F8                            loc_195AA:
0001D2F8 4A69 0010                  		tst.w	obVelX(a1)
0001D2FC 6700                       		beq.s	loc_195B6
0001D2FE 117C 0008 001C             		move.b	#8,obAnim(a0)
0001D304                            
0001D304                            loc_195B6:
0001D304 6000                       		bra.s	loc_195BE
0001D306                            ; ===========================================================================
0001D306                            
0001D306                            Obj75_FlameDelete:
0001D306 4EF9 0000 F898             		jmp	(DeleteObject).l
0001D30C                            ; ===========================================================================
0001D30C                            
0001D30C                            loc_195BE:
0001D30C 43F9 0001 B9B6             		lea	(Ani_Eggman).l,a1
0001D312 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001D318 2268 0034                  		movea.l	$34(a0),a1
0001D31C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D322 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D328                            
0001D328                            loc_195DA:
0001D328 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D32E 7003                       		moveq	#3,d0
0001D330 C028 0022                  		and.b	obStatus(a0),d0
0001D334 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D33A 8128 0001                  		or.b	d0,obRender(a0)
0001D33E 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001D344                            ; ===========================================================================
0001D344                            
0001D344                            Obj75_SpikeMain:; Routine 8
0001D344 217C 0001 BAF6 0004        		move.l	#Map_BossItems,obMap(a0)
0001D34C 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001D352 117C 0005 001A             		move.b	#5,obFrame(a0)
0001D358 2268 0034                  		movea.l	$34(a0),a1
0001D35C 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D362 6600                       		bne.s	loc_1961C
0001D364 4A28 0001                  		tst.b	obRender(a0)
0001D368 6A00                       		bpl.s	Obj75_SpikeDelete
0001D36A                            
0001D36A                            loc_1961C:
0001D36A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D370 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D376 3028 003C                  		move.w	$3C(a0),d0
0001D37A 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001D380 6600                       		bne.s	loc_19652
0001D382 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001D388 6700                       		beq.s	loc_1964C
0001D38A 4A29 0028                  		tst.b	obSubtype(a1)
0001D38E 6600                       		bne.s	loc_19658
0001D390 0C40 0094                  		cmpi.w	#$94,d0
0001D394 6C00                       		bge.s	loc_19658
0001D396 5E40                       		addq.w	#7,d0
0001D398 6000                       		bra.s	loc_19658
0001D39A                            ; ===========================================================================
0001D39A                            
0001D39A                            loc_1964C:
0001D39A 4A69 003C                  		tst.w	$3C(a1)
0001D39E 6A00                       		bpl.s	loc_19658
0001D3A0                            
0001D3A0                            loc_19652:
0001D3A0 4A40                       		tst.w	d0
0001D3A2 6F00                       		ble.s	loc_19658
0001D3A4 5B40                       		subq.w	#5,d0
0001D3A6                            
0001D3A6                            loc_19658:
0001D3A6 3140 003C                  		move.w	d0,$3C(a0)
0001D3AA E440                       		asr.w	#2,d0
0001D3AC D168 000C                  		add.w	d0,obY(a0)
0001D3B0 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D3B6 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001D3BC 4228 0020                  		clr.b	obColType(a0)
0001D3C0 2268 0034                  		movea.l	$34(a0),a1
0001D3C4 4A29 0020                  		tst.b	obColType(a1)
0001D3C8 6700                       		beq.s	loc_19688
0001D3CA 4A29 0029                  		tst.b	$29(a1)
0001D3CE 6600                       		bne.s	loc_19688
0001D3D0 117C 0084 0020             		move.b	#$84,obColType(a0)
0001D3D6                            
0001D3D6                            loc_19688:
0001D3D6 6000 FF50                  		bra.w	loc_195DA
0001D3DA                            ; ===========================================================================
0001D3DA                            
0001D3DA                            Obj75_SpikeDelete:
0001D3DA 4EF9 0000 F898             		jmp	(DeleteObject).l
0001D3DA 4EF9 0000 F898             		jmp	(DeleteObject).l
0001D3E0                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001D3E0                            ; ---------------------------------------------------------------------------
0001D3E0                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001D3E0                            ; ---------------------------------------------------------------------------
0001D3E0                            
0001D3E0                            BossBlock:
0001D3E0 7000                       		moveq	#0,d0
0001D3E2 1028 0024                  		move.b	obRoutine(a0),d0
0001D3E6 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001D3EA 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001D3EE                            ; ===========================================================================
0001D3EE 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001D3F0 0000                       		dc.w Obj76_Action-Obj76_Index
0001D3F2 0000                       		dc.w loc_19762-Obj76_Index
0001D3F4                            ; ===========================================================================
0001D3F4                            
0001D3F4                            Obj76_Main:	; Routine 0
0001D3F4 7800                       		moveq	#0,d4
0001D3F6 3A3C 2C10                  		move.w	#$2C10,d5
0001D3FA 7C09                       		moveq	#9,d6
0001D3FC 43D0                       		lea	(a0),a1
0001D3FE 6000                       		bra.s	Obj76_MakeBlock
0001D400                            ; ===========================================================================
0001D400                            
0001D400                            Obj76_Loop:
0001D400 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001D406 6600                       		bne.s	Obj76_ExitLoop
0001D408                            
0001D408                            Obj76_MakeBlock:
0001D408 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001D40C 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001D414 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001D41A 137C 0004 0001             		move.b	#4,obRender(a1)
0001D420 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D426 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D42C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D432 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001D436 337C 0582 000C             		move.w	#$582,obY(a1)
0001D43C 3344 0028                  		move.w	d4,obSubtype(a1)
0001D440 0644 0101                  		addi.w	#$101,d4
0001D444 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001D448 5429 0024                  		addq.b	#2,obRoutine(a1)
0001D44C 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001D450                            
0001D450                            Obj76_ExitLoop:
0001D450 4E75                       		rts	
0001D452                            ; ===========================================================================
0001D452                            
0001D452                            Obj76_Action:	; Routine 2
0001D452 1028 0029                  		move.b	$29(a0),d0
0001D456 B028 0028                  		cmp.b	obSubtype(a0),d0
0001D45A 6700                       		beq.s	Obj76_Solid
0001D45C 4A00                       		tst.b	d0
0001D45E 6B00                       		bmi.s	loc_19718
0001D460                            
0001D460                            loc_19712:
0001D460 6100 0000                  		bsr.w	Obj76_Break
0001D464 6000                       		bra.s	Obj76_Display
0001D466                            ; ===========================================================================
0001D466                            
0001D466                            loc_19718:
0001D466 2268 0034                  		movea.l	$34(a0),a1
0001D46A 4A29 0021                  		tst.b	obColProp(a1)
0001D46E 67F0                       		beq.s	loc_19712
0001D470 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D476 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D47C 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001D482 B2C8                       		cmpa.w	a0,a1
0001D484 6500                       		bcs.s	Obj76_Display
0001D486 3029 0012                  		move.w	obVelY(a1),d0
0001D48A 48C0                       		ext.l	d0
0001D48C E080                       		asr.l	#8,d0
0001D48E D168 000C                  		add.w	d0,obY(a0)
0001D492 6000                       		bra.s	Obj76_Display
0001D494                            ; ===========================================================================
0001D494                            
0001D494                            Obj76_Solid:
0001D494 323C 001B                  		move.w	#$1B,d1
0001D498 343C 0010                  		move.w	#$10,d2
0001D49C 363C 0011                  		move.w	#$11,d3
0001D4A0 3828 0008                  		move.w	obX(a0),d4
0001D4A4 4EB9 0001 1DA4             		jsr	(SolidObject).l
0001D4AA                            
0001D4AA                            Obj76_Display:
0001D4AA 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001D4B0                            ; ===========================================================================
0001D4B0                            
0001D4B0                            loc_19762:	; Routine 4
0001D4B0 4A28 0001                  		tst.b	obRender(a0)
0001D4B4 6A00                       		bpl.s	Obj76_Delete
0001D4B6 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001D4BC 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001D4C2                            ; ===========================================================================
0001D4C2                            
0001D4C2                            Obj76_Delete:
0001D4C2 4EF9 0000 F898             		jmp	(DeleteObject).l
0001D4C8                            
0001D4C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4C8                            
0001D4C8                            
0001D4C8                            Obj76_Break:
0001D4C8 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001D4CC 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001D4D0 7801                       		moveq	#1,d4
0001D4D2 7203                       		moveq	#3,d1
0001D4D4 7438                       		moveq	#$38,d2
0001D4D6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D4DA 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D4E0 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D4E6 43D0                       		lea	(a0),a1
0001D4E8 6000                       		bra.s	Obj76_MakeFrag
0001D4EA                            ; ===========================================================================
0001D4EA                            
0001D4EA                            Obj76_LoopFrag:
0001D4EA 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001D4F0 6600                       		bne.s	loc_197D4
0001D4F2                            
0001D4F2                            Obj76_MakeFrag:
0001D4F2 45D0                       		lea	(a0),a2
0001D4F4 47D1                       		lea	(a1),a3
0001D4F6 7603                       		moveq	#3,d3
0001D4F8                            
0001D4F8                            loc_197AA:
0001D4F8 26DA                       		move.l	(a2)+,(a3)+
0001D4FA 26DA                       		move.l	(a2)+,(a3)+
0001D4FC 26DA                       		move.l	(a2)+,(a3)+
0001D4FE 26DA                       		move.l	(a2)+,(a3)+
0001D500 51CB FFF6                  		dbf	d3,loc_197AA
0001D504                            
0001D504 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001D508 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D50C 361D                       		move.w	(a5)+,d3
0001D50E D769 0008                  		add.w	d3,obX(a1)
0001D512 361D                       		move.w	(a5)+,d3
0001D514 D769 000C                  		add.w	d3,obY(a1)
0001D518 1344 001A                  		move.b	d4,obFrame(a1)
0001D51C 5244                       		addq.w	#1,d4
0001D51E 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001D522                            
0001D522                            loc_197D4:
0001D52C                            ; End of function Obj76_Break
0001D52C                            
0001D52C                            ; ===========================================================================
0001D52C FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001D530 0180 FE00                  		dc.w $180, -$200
0001D534 FF00 FF00                  		dc.w -$100, -$100
0001D538 0100 FF00                  		dc.w $100, -$100
0001D53C FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001D540 0010 0000                  		dc.w $10, 0
0001D544 0000 0010                  		dc.w 0,	$10
0001D548 0010 0010                  		dc.w $10, $10
0001D548 0010 0010                  		dc.w $10, $10
0001D54C                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001D54C                            ; ---------------------------------------------------------------------------
0001D54C                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001D54C                            ; ---------------------------------------------------------------------------
0001D54C                            Map_BossBlock_internal:
0001D54C 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001D54E 0000                       		dc.w @topleft-Map_BossBlock_internal
0001D550 0000                       		dc.w @topright-Map_BossBlock_internal
0001D552 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001D554 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001D556 02                         @wholeblock:	dc.b 2
0001D557 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001D55C 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001D561 00                         		dc.b 0
0001D562 01                         @topleft:	dc.b 1
0001D563 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001D568 01                         @topright:	dc.b 1
0001D569 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001D56E 01                         @bottomleft:	dc.b 1
0001D56F F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001D574 01                         @bottomright:	dc.b 1
0001D575 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001D57A                            		even
0001D57A                            		even
0001D57A                            
0001D57A                            loc_1982C:
0001D57A 4EF9 0000 F898             		jmp	(DeleteObject).l
0001D580                            
0001D580                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001D580                            ; ---------------------------------------------------------------------------
0001D580                            ; Object 82 - Eggman (SBZ2)
0001D580                            ; ---------------------------------------------------------------------------
0001D580                            
0001D580                            ScrapEggman:
0001D580 7000                       		moveq	#0,d0
0001D582 1028 0024                  		move.b	obRoutine(a0),d0
0001D586 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001D58A 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001D58E                            ; ===========================================================================
0001D58E 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001D590 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001D592 0000                       		dc.w SEgg_Switch-SEgg_Index
0001D594                            
0001D594 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001D597 0400 03                    		dc.b 4,	0, 3
0001D59A                            ; ===========================================================================
0001D59A                            
0001D59A                            SEgg_Main:	; Routine 0
0001D59A 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001D59E 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001D5A4 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001D5AA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D5B0 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001D5B6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D5BC 4228 0025                  		clr.b	ob2ndRout(a0)
0001D5C0 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001D5C4 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001D5C8 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001D5CC 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001D5D4 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D5DA 117C 0004 0001             		move.b	#4,obRender(a0)
0001D5E0 08E8 0007 0001             		bset	#7,obRender(a0)
0001D5E6 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D5EC 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001D5F2 6600                       		bne.s	SEgg_Eggman
0001D5F4 2348 0034                  		move.l	a0,$34(a1)
0001D5F8 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001D5FC 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001D602 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001D608 4228 0025                  		clr.b	ob2ndRout(a0)
0001D60C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001D610 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001D614 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001D618 237C 0000 E090 0004        		move.l	#Map_But,obMap(a1)
0001D620 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001D626 137C 0004 0001             		move.b	#4,obRender(a1)
0001D62C 08E9 0007 0001             		bset	#7,obRender(a1)
0001D632 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D638 137C 0000 001A             		move.b	#0,obFrame(a1)
0001D63E                            
0001D63E                            SEgg_Eggman:	; Routine 2
0001D63E 7000                       		moveq	#0,d0
0001D640 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D644 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001D648 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001D64C 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001D650 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001D656 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001D65C                            ; ===========================================================================
0001D65C 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001D65E 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001D660 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001D662 0000                       		dc.w loc_19934-SEgg_EggIndex
0001D664                            ; ===========================================================================
0001D664                            
0001D664                            SEgg_ChkSonic:
0001D664 3028 0008                  		move.w	obX(a0),d0
0001D668 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D66C 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001D670 6400                       		bcc.s	loc_19934	; if not, branch
0001D672 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D676 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001D67C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D682                            
0001D682                            loc_19934:
0001D682 4EF9 0000 F844             		jmp	(SpeedToPos).l
0001D688                            ; ===========================================================================
0001D688                            
0001D688                            SEgg_PreLeap:
0001D688 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001D68C 6600                       		bne.s	loc_19954	; if time remains, branch
0001D68E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D692 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D698 5868 000C                  		addq.w	#4,obY(a0)
0001D69C 317C 000F 003C             		move.w	#15,$3C(a0)
0001D6A2                            
0001D6A2                            loc_19954:
0001D6A2 60DE                       		bra.s	loc_19934
0001D6A4                            ; ===========================================================================
0001D6A4                            
0001D6A4                            SEgg_Leap:
0001D6A4 5368 003C                  		subq.w	#1,$3C(a0)
0001D6A8 6E00                       		bgt.s	loc_199D0
0001D6AA 6600                       		bne.s	loc_1996A
0001D6AC 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001D6B2 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001D6B8                            
0001D6B8                            loc_1996A:
0001D6B8 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001D6BE 6E00                       		bgt.s	loc_19976
0001D6C0 4268 0010                  		clr.w	obVelX(a0)
0001D6C4                            
0001D6C4                            loc_19976:
0001D6C4 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001D6CA 4A68 0012                  		tst.w	obVelY(a0)
0001D6CE 6B00                       		bmi.s	SEgg_FindBlocks
0001D6D0 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001D6D6 6500                       		bcs.s	SEgg_FindBlocks
0001D6D8 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001D6DE 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001D6E4 6500                       		bcs.s	SEgg_FindBlocks
0001D6E6 317C 029B 000C             		move.w	#$29B,obY(a0)
0001D6EC 4268 0012                  		clr.w	obVelY(a0)
0001D6F0                            
0001D6F0                            SEgg_FindBlocks:
0001D6F0 3028 0010                  		move.w	obVelX(a0),d0
0001D6F4 8068 0012                  		or.w	obVelY(a0),d0
0001D6F8 6600                       		bne.s	loc_199D0
0001D6FA 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001D6FE 703E                       		moveq	#$3E,d0
0001D700 7240                       		moveq	#$40,d1
0001D702                            
0001D702                            SEgg_FindLoop:	
0001D702 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001D704 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001D708 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001D70C                            
0001D70C 6600                       		bne.s	loc_199D0
0001D70E 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001D714 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D718 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D71E                            
0001D71E                            loc_199D0:
0001D71E 6000 FF62                  		bra.w	loc_19934
0001D722                            ; ===========================================================================
0001D722                            
0001D722                            SEgg_Switch:	; Routine 4
0001D722 7000                       		moveq	#0,d0
0001D724 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D728 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001D72C 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001D730                            ; ===========================================================================
0001D730 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001D732 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001D734                            ; ===========================================================================
0001D734                            
0001D734                            loc_199E6:
0001D734 2268 0034                  		movea.l	$34(a0),a1
0001D738 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001D73E 6600                       		bne.s	SEgg_SwDisplay
0001D740 117C 0001 001A             		move.b	#1,obFrame(a0)
0001D746 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D74A                            
0001D74A                            SEgg_SwDisplay:
0001D74A 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001D74A 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001D750                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001D750                            ; ---------------------------------------------------------------------------
0001D750                            ; Animation script - Eggman (SBZ2)
0001D750                            ; ---------------------------------------------------------------------------
0001D750 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001D752 0000                       		dc.w @laugh-Ani_SEgg
0001D754 0000                       		dc.w @jump1-Ani_SEgg
0001D756 0000                       		dc.w @intube-Ani_SEgg
0001D758 0000                       		dc.w @running-Ani_SEgg
0001D75A 0000                       		dc.w @jump2-Ani_SEgg
0001D75C 0000                       		dc.w @starjump-Ani_SEgg
0001D75E 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001D762 00                         		even
0001D762 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001D766 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001D76E 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001D772 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001D778 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001D77E 00                         		even
0001D77E 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001D782 00                         		even
0001D782 00                         		even
0001D782                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001D782                            ; --------------------------------------------------------------------------------
0001D782                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D782                            ; --------------------------------------------------------------------------------
0001D782                            
0001D782                            SME_y00JM:	
0001D782 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001D786 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001D78A 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001D78E 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001D792 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001D796 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001D798 03                         SME_y00JM_16:	dc.b 3	
0001D799 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D79E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D7A3 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D7A8 07                         SME_y00JM_26:	dc.b 7	
0001D7A9 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001D7AE 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D7B3 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D7B8 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001D7BD F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001D7C2 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001D7C7 F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001D7CC 07                         SME_y00JM_4A:	dc.b 7	
0001D7CD E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001D7D2 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001D7D7 F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001D7DC F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001D7E1 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001D7E6 F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001D7EB 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001D7F0 04                         SME_y00JM_6E:	dc.b 4	
0001D7F1 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001D7F6 F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001D7FB 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001D800 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001D805 07                         SME_y00JM_83:	dc.b 7	
0001D806 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D80B F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D810 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001D815 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001D81A E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001D81F E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001D824 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001D829 04                         SME_y00JM_A7:	dc.b 4	
0001D82A E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D82F E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D834 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D839 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D83E 07                         SME_y00JM_BC:	dc.b 7	
0001D83F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D844 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D849 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D84E 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D853 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D858 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001D85D F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001D862 05                         SME_y00JM_E0:	dc.b 5	
0001D863 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D868 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D86D 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D872 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D877 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D87C 06                         SME_y00JM_FA:	dc.b 6	
0001D87D EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001D882 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001D887 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001D88C 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001D891 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001D896 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001D89B 08                         SME_y00JM_119:	dc.b 8	
0001D89C E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D8A1 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D8A6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D8AB 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D8B0 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001D8B5 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001D8BA 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001D8BF 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001D8C4 03                         SME_y00JM_142:	dc.b 3	
0001D8C5 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001D8CA F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001D8CF EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001D8D4                            		even
0001D8D4                            		even
0001D8D4                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001D8D4                            ; ---------------------------------------------------------------------------
0001D8D4                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001D8D4                            ; ---------------------------------------------------------------------------
0001D8D4                            
0001D8D4                            FalseFloor:
0001D8D4 7000                       		moveq	#0,d0
0001D8D6 1028 0024                  		move.b	obRoutine(a0),d0
0001D8DA 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001D8DE 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001D8E2                            ; ===========================================================================
0001D8E2 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001D8E4 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001D8E6 0000                       		dc.w loc_19C36-FFloor_Index
0001D8E8 0000                       		dc.w loc_19C62-FFloor_Index
0001D8EA 0000                       		dc.w loc_19C72-FFloor_Index
0001D8EC 0000                       		dc.w loc_19C80-FFloor_Index
0001D8EE                            ; ===========================================================================
0001D8EE                            
0001D8EE                            FFloor_Main:	; Routine 0
0001D8EE 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001D8F4 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001D8FA 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001D900 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001D906 117C 0004 0001             		move.b	#4,obRender(a0)
0001D90C 08E8 0007 0001             		bset	#7,obRender(a0)
0001D912 7800                       		moveq	#0,d4
0001D914 3A3C 1B10                  		move.w	#$1B10,d5
0001D918 7C07                       		moveq	#7,d6
0001D91A 45E8 0030                  		lea	$30(a0),a2
0001D91E                            
0001D91E                            FFloor_MakeBlock:
0001D91E 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001D924 6600                       		bne.s	FFloor_ExitMake
0001D926 34C9                       		move.w	a1,(a2)+
0001D928 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001D92C 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001D934 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001D93A 137C 0004 0001             		move.b	#4,obRender(a1)
0001D940 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D946 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D94C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D952 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001D956 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001D95C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001D960 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D966 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001D96A                            
0001D96A                            FFloor_ExitMake:
0001D96A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D96E 4E75                       		rts	
0001D970                            ; ===========================================================================
0001D970                            
0001D970                            FFloor_ChkBreak:; Routine 2
0001D970 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D976 6600                       		bne.s	FFloor_Solid	; if not, branch
0001D978 4228 001A                  		clr.b	obFrame(a0)
0001D97C 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001D980                            
0001D980                            FFloor_Solid:
0001D980 7000                       		moveq	#0,d0
0001D982 1028 001A                  		move.b	obFrame(a0),d0
0001D986 4400                       		neg.b	d0
0001D988 4880                       		ext.w	d0
0001D98A 5040                       		addq.w	#8,d0
0001D98C E940                       		asl.w	#4,d0
0001D98E 383C 1C00                  		move.w	#$1C00,d4
0001D992 9840                       		sub.w	d0,d4
0001D994 1140 0014                  		move.b	d0,obActWid(a0)
0001D998 3144 0008                  		move.w	d4,obX(a0)
0001D99C 720B                       		moveq	#$B,d1
0001D99E D240                       		add.w	d0,d1
0001D9A0 7410                       		moveq	#$10,d2
0001D9A2 7611                       		moveq	#$11,d3
0001D9A4 4EF9 0001 1DA4             		jmp	(SolidObject).l
0001D9AA                            ; ===========================================================================
0001D9AA                            
0001D9AA                            loc_19C36:	; Routine 4
0001D9AA 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001D9B0 6400                       		bcc.s	FFloor_Solid2
0001D9B2 70FF                       		moveq	#-1,d0
0001D9B4 1028 001A                  		move.b	obFrame(a0),d0
0001D9B8 4880                       		ext.w	d0
0001D9BA D040                       		add.w	d0,d0
0001D9BC 3030 0030                  		move.w	$30(a0,d0.w),d0
0001D9C0 2240                       		movea.l	d0,a1
0001D9C2 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001D9C8 5228 001A                  		addq.b	#1,obFrame(a0)
0001D9CC 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001D9D2 6700                       		beq.s	loc_19C62
0001D9D4                            
0001D9D4                            FFloor_Solid2:
0001D9D4 60AA                       		bra.s	FFloor_Solid
0001D9D6                            ; ===========================================================================
0001D9D6                            
0001D9D6                            loc_19C62:	; Routine 6
0001D9D6 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001D9DC 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001D9E2 6000 FB96                  		bra.w	loc_1982C
0001D9E6                            ; ===========================================================================
0001D9E6                            
0001D9E6                            loc_19C72:	; Routine 8
0001D9E6 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D9EC 6700                       		beq.s	FFloor_Break	; if yes, branch
0001D9EE 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001D9F4                            ; ===========================================================================
0001D9F4                            
0001D9F4                            loc_19C80:	; Routine $A
0001D9F4 4A28 0001                  		tst.b	obRender(a0)
0001D9F8 6A00 FB80                  		bpl.w	loc_1982C
0001D9FC 4EB9 0000 F80C             		jsr	(ObjectFall).l
0001DA02 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001DA08                            ; ===========================================================================
0001DA08                            
0001DA08                            FFloor_Break:
0001DA08 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001DA0C 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001DA10 7801                       		moveq	#1,d4
0001DA12 7203                       		moveq	#3,d1
0001DA14 7438                       		moveq	#$38,d2
0001DA16 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DA1A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001DA20 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DA26 43D0                       		lea	(a0),a1
0001DA28 6000                       		bra.s	FFloor_MakeFrag
0001DA2A                            ; ===========================================================================
0001DA2A                            
0001DA2A                            FFloor_LoopFrag:
0001DA2A 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001DA30 6600                       		bne.s	FFloor_BreakSnd
0001DA32                            
0001DA32                            FFloor_MakeFrag:
0001DA32 45D0                       		lea	(a0),a2
0001DA34 47D1                       		lea	(a1),a3
0001DA36 7603                       		moveq	#3,d3
0001DA38                            
0001DA38                            loc_19CC4:
0001DA38 26DA                       		move.l	(a2)+,(a3)+
0001DA3A 26DA                       		move.l	(a2)+,(a3)+
0001DA3C 26DA                       		move.l	(a2)+,(a3)+
0001DA3E 26DA                       		move.l	(a2)+,(a3)+
0001DA40 51CB FFF6                  		dbf	d3,loc_19CC4
0001DA44                            
0001DA44 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001DA48 361D                       		move.w	(a5)+,d3
0001DA4A D769 0008                  		add.w	d3,obX(a1)
0001DA4E 361D                       		move.w	(a5)+,d3
0001DA50 D769 000C                  		add.w	d3,obY(a1)
0001DA54 1344 001A                  		move.b	d4,obFrame(a1)
0001DA58 5244                       		addq.w	#1,d4
0001DA5A 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001DA5E                            
0001DA5E                            FFloor_BreakSnd:
0001DA68 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001DA6E                            ; ===========================================================================
0001DA6E 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001DA72 0120 00C0                  		dc.w $120, $C0
0001DA76 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001DA7A 0010 0000                  		dc.w $10, 0
0001DA7E 0000 0010                  		dc.w 0,	$10
0001DA82 0010 0010                  		dc.w $10, $10
0001DA82 0010 0010                  		dc.w $10, $10
0001DA86                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001DA86                            ; ---------------------------------------------------------------------------
0001DA86                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001DA86                            ; ---------------------------------------------------------------------------
0001DA86                            Map_FFloor_internal:
0001DA86 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001DA88 0000                       		dc.w @topleft-Map_FFloor_internal
0001DA8A 0000                       		dc.w @topright-Map_FFloor_internal
0001DA8C 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001DA8E 0000                       		dc.w @bottomright-Map_FFloor_internal
0001DA90 01                         @wholeblock:	dc.b 1
0001DA91 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001DA96 02                         @topleft:	dc.b 2
0001DA97 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001DA9C F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001DAA1 00                         		dc.b 0
0001DAA2 02                         @topright:	dc.b 2
0001DAA3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001DAA8 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001DAAD 00                         		dc.b 0
0001DAAE 02                         @bottomleft:	dc.b 2
0001DAAF F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001DAB4 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001DAB9 00                         		dc.b 0
0001DABA 02                         @bottomright:	dc.b 2
0001DABB F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001DAC0 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001DAC6 00                         		even
0001DAC6 00                         		even
0001DAC6                            		include	"_incObj\85 Boss - Final.asm"
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            ; Object 85 - Eggman (FZ)
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            
0001DAC6                            Obj85_Delete:
0001DAC6 4EF9 0000 F898             		jmp	(DeleteObject).l
0001DACC                            ; ===========================================================================
0001DACC                            
0001DACC                            BossFinal:
0001DACC 7000                       		moveq	#0,d0
0001DACE 1028 0024                  		move.b	obRoutine(a0),d0
0001DAD2 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001DAD6 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001DADA                            ; ===========================================================================
0001DADA 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001DADC 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001DADE 0000                       		dc.w loc_1A38E-Obj85_Index
0001DAE0 0000                       		dc.w loc_1A346-Obj85_Index
0001DAE2 0000                       		dc.w loc_1A2C6-Obj85_Index
0001DAE4 0000                       		dc.w loc_1A3AC-Obj85_Index
0001DAE6 0000                       		dc.w loc_1A264-Obj85_Index
0001DAE8                            
0001DAE8 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001DAEE 0001 D782                  		dc.l Map_SEgg		; mappings pointer
0001DAF2 25B0 0590 0300             		dc.w $25B0, $590, $300
0001DAF8 0000 0000                  		dc.l Map_EggCyl
0001DAFC 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001DB02 0000 0000                  		dc.l Map_FZLegs
0001DB06 26E0 0596 0470             		dc.w $26E0, $596, $470
0001DB0C 0001 D782                  		dc.l Map_SEgg
0001DB10 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DB16 0001 BA06                  		dc.l Map_Eggman
0001DB1A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DB20 0001 BA06                  		dc.l Map_Eggman
0001DB24                            
0001DB24                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001DB24 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001DB2A 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001DB30 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001DB36 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001DB3C 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001DB42 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001DB48                            ; ===========================================================================
0001DB48                            
0001DB48                            Obj85_Main:	; Routine 0
0001DB48 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001DB4C 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001DB50 2248                       		movea.l	a0,a1
0001DB52 7205                       		moveq	#5,d1
0001DB54 6000                       		bra.s	Obj85_LoadBoss
0001DB56                            ; ===========================================================================
0001DB56                            
0001DB56                            Obj85_Loop:
0001DB56 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001DB5C 6600                       		bne.s	loc_19E20
0001DB5E                            
0001DB5E                            Obj85_LoadBoss:
0001DB5E 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001DB62 335A 0008                  		move.w	(a2)+,obX(a1)
0001DB66 335A 000C                  		move.w	(a2)+,obY(a1)
0001DB6A 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001DB6E 235A 0004                  		move.l	(a2)+,obMap(a1)
0001DB72 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001DB76 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001DB7A 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001DB7E 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001DB82 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001DB86 137C 0004 0001             		move.b	#4,obRender(a1)
0001DB8C 08E8 0007 0001             		bset	#7,obRender(a0)
0001DB92 2348 0034                  		move.l	a0,$34(a1)
0001DB96 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001DB9A                            
0001DB9A                            loc_19E20:
0001DB9A 45E8 0036                  		lea	$36(a0),a2
0001DB9E 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001DBA4 6600                       		bne.s	loc_19E5A
0001DBA6 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001DBAA 3489                       		move.w	a1,(a2)
0001DBAC 2348 0034                  		move.l	a0,$34(a1)
0001DBB0 45E8 0038                  		lea	$38(a0),a2
0001DBB4 7400                       		moveq	#0,d2
0001DBB6 7203                       		moveq	#3,d1
0001DBB8                            
0001DBB8                            loc_19E3E:
0001DBB8 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001DBBE 6600                       		bne.s	loc_19E5A
0001DBC0 34C9                       		move.w	a1,(a2)+
0001DBC2 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001DBC6 2348 0034                  		move.l	a0,$34(a1)
0001DBCA 1342 0028                  		move.b	d2,obSubtype(a1)
0001DBCE 5442                       		addq.w	#2,d2
0001DBD0 51C9 FFE6                  		dbf	d1,loc_19E3E
0001DBD4                            
0001DBD4                            loc_19E5A:
0001DBD4 317C 0000 0034             		move.w	#0,$34(a0)
0001DBDA 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001DBE0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DBE6                            
0001DBE6                            Obj85_Eggman:	; Routine 2
0001DBE6 7000                       		moveq	#0,d0
0001DBE8 1028 0034                  		move.b	$34(a0),d0
0001DBEC 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001DBF0 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001DBF4 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001DBFA                            ; ===========================================================================
0001DBFA 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001DBFE 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001DC02 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001DC06 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001DC0A                            ; ===========================================================================
0001DC0A                            
0001DC0A                            loc_19E90:
0001DC0A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001DC0E 6600                       		bne.s	loc_19EA2
0001DC10 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001DC16 6500                       		bcs.s	loc_19EA2
0001DC18 5428 0034                  		addq.b	#2,$34(a0)
0001DC1C                            
0001DC1C                            loc_19EA2:
0001DC1C 52B8 F636                  		addq.l	#1,(v_random).w
0001DC20 4E75                       		rts	
0001DC22                            ; ===========================================================================
0001DC22                            
0001DC22                            loc_19EA8:
0001DC22 4A68 0030                  		tst.w	$30(a0)
0001DC26 6A00                       		bpl.s	loc_19F10
0001DC28 4268 0030                  		clr.w	$30(a0)
0001DC2C 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001DC32 0240 000C                  		andi.w	#$C,d0
0001DC36 3200                       		move.w	d0,d1
0001DC38 5441                       		addq.w	#2,d1
0001DC3A 4A80                       		tst.l	d0
0001DC3C 6A00                       		bpl.s	loc_19EC6
0001DC3E C340                       		exg	d1,d0
0001DC40                            
0001DC40                            loc_19EC6:
0001DC40 43FA 0000                  		lea	word_19FD6(pc),a1
0001DC44 3031 0000                  		move.w	(a1,d0.w),d0
0001DC48 3231 1000                  		move.w	(a1,d1.w),d1
0001DC4C 3140 0030                  		move.w	d0,$30(a0)
0001DC50 74FF                       		moveq	#-1,d2
0001DC52 3430 0038                  		move.w	$38(a0,d0.w),d2
0001DC56 2242                       		movea.l	d2,a1
0001DC58 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DC5E 337C FFFF 0030             		move.w	#-1,$30(a1)
0001DC64 3430 1038                  		move.w	$38(a0,d1.w),d2
0001DC68 2242                       		movea.l	d2,a1
0001DC6A 137C 0001 0029             		move.b	#1,$29(a1)
0001DC70 337C 0000 0030             		move.w	#0,$30(a1)
0001DC76 317C 0001 0032             		move.w	#1,$32(a0)
0001DC7C 4228 0035                  		clr.b	$35(a0)
0001DC8A                            
0001DC8A                            loc_19F10:
0001DC8A 4A68 0032                  		tst.w	$32(a0)
0001DC8E 6B00 0000                  		bmi.w	loc_19FA6
0001DC92 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001DC98 3038 D008                  		move.w	(v_player+obX).w,d0
0001DC9C 9068 0008                  		sub.w	obX(a0),d0
0001DCA0 6500                       		bcs.s	loc_19F2E
0001DCA2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DCA8                            
0001DCA8                            loc_19F2E:
0001DCA8 323C 002B                  		move.w	#$2B,d1
0001DCAC 343C 0014                  		move.w	#$14,d2
0001DCB0 363C 0014                  		move.w	#$14,d3
0001DCB4 3828 0008                  		move.w	obX(a0),d4
0001DCB8 4EB9 0001 1DA4             		jsr	(SolidObject).l
0001DCBE 4A44                       		tst.w	d4
0001DCC0 6E00                       		bgt.s	loc_19F50
0001DCC2                            
0001DCC2                            loc_19F48:
0001DCC2 4A28 0035                  		tst.b	$35(a0)
0001DCC6 6600                       		bne.s	loc_19F88
0001DCC8 6000                       		bra.s	loc_19F96
0001DCCA                            ; ===========================================================================
0001DCCA                            
0001DCCA                            loc_19F50:
0001DCCA 5E78 F636                  		addq.w	#7,(v_random).w
0001DCCE 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001DCD4 66EC                       		bne.s	loc_19F48
0001DCD6 303C 0300                  		move.w	#$300,d0
0001DCDA 0828 0000 0022             		btst	#0,obStatus(a0)
0001DCE0 6600                       		bne.s	loc_19F6A
0001DCE2 4440                       		neg.w	d0
0001DCE4                            
0001DCE4                            loc_19F6A:
0001DCE4 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001DCE8 4A28 0035                  		tst.b	$35(a0)
0001DCEC 6600                       		bne.s	loc_19F88
0001DCEE 5328 0021                  		subq.b	#1,obColProp(a0)
0001DCF2 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001DCF8 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DCFE                            
0001DCFE                            loc_19F88:
0001DCFE 5328 0035                  		subq.b	#1,$35(a0)
0001DD02 6700                       		beq.s	loc_19F96
0001DD04 117C 0003 001C             		move.b	#3,obAnim(a0)
0001DD0A 6000                       		bra.s	loc_19F9C
0001DD0C                            ; ===========================================================================
0001DD0C                            
0001DD0C                            loc_19F96:
0001DD0C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DD12                            
0001DD12                            loc_19F9C:
0001DD12 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001DD16 4EF9 0000 C90E             		jmp	(AnimateSprite).l
0001DD1C                            ; ===========================================================================
0001DD1C                            
0001DD1C                            loc_19FA6:
0001DD1C 4A28 0021                  		tst.b	obColProp(a0)
0001DD20 6700                       		beq.s	loc_19FBC
0001DD22 5428 0034                  		addq.b	#2,$34(a0)
0001DD26 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DD2C 4268 0032                  		clr.w	$32(a0)
0001DD30 4E75                       		rts	
0001DD32                            ; ===========================================================================
0001DD32                            
0001DD32                            loc_19FBC:
0001DD32 7064                       			moveq	#100,d0
0001DD34 6100 0000                  			bsr.w	AddPoints
0001DD38 117C 0006 0034             		move.b	#6,$34(a0)
0001DD3E 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001DD44 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DD4A 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001DD50 4E75                       		rts	
0001DD52                            ; ===========================================================================
0001DD52 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001DD62                            ; ===========================================================================
0001DD62                            
0001DD62                            loc_19FE6:
0001DD62 70FF                       		moveq	#-1,d0
0001DD64 3028 0036                  		move.w	$36(a0),d0
0001DD68 2240                       		movea.l	d0,a1
0001DD6A 4A68 0030                  		tst.w	$30(a0)
0001DD6E 6A00                       		bpl.s	loc_1A000
0001DD70 4268 0030                  		clr.w	$30(a0)
0001DD74 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DD7A 6100                       		bsr.s	loc_1A020
0001DD7C                            
0001DD7C                            loc_1A000:
0001DD7C 700F                       		moveq	#$F,d0
0001DD7E C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001DD82 6600                       		bne.s	loc_1A00A
0001DD84 6100                       		bsr.s	loc_1A020
0001DD86                            
0001DD86                            loc_1A00A:
0001DD86 4A68 0032                  		tst.w	$32(a0)
0001DD8A 6700                       		beq.s	locret_1A01E
0001DD8C 5528 0034                  		subq.b	#2,$34(a0)
0001DD90 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DD96 4268 0032                  		clr.w	$32(a0)
0001DD9A                            
0001DD9A                            locret_1A01E:
0001DD9A 4E75                       		rts	
0001DD9C                            ; ===========================================================================
0001DD9C                            
0001DD9C                            loc_1A020:
0001DDA6                            ; ===========================================================================
0001DDA6                            
0001DDA6                            loc_1A02A:
0001DDA6 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001DDAC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DDB2 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001DDB8 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DDBE 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DDC4 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001DDCA 6500                       		bcs.s	loc_1A070
0001DDCC 317C 059C 000C             		move.w	#$59C,obY(a0)
0001DDD2 5428 0034                  		addq.b	#2,$34(a0)
0001DDD6 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001DDDC 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001DDE2 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001DDE8 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001DDEC                            
0001DDEC                            loc_1A070:
0001DDEC 6000 0000                  		bra.w	loc_1A166
0001DDF0                            ; ===========================================================================
0001DDF0                            
0001DDF0                            loc_1A074:
0001DDF0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DDF6 117C 0004 001C             		move.b	#4,obAnim(a0)
0001DDFC 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001DE02 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DE08 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001DE0E 6500                       		bcs.s	loc_1A09A
0001DE10 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001DE16                            
0001DE16                            loc_1A09A:
0001DE16 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001DE1C 3028 0008                  		move.w	obX(a0),d0
0001DE20 9078 D008                  		sub.w	(v_player+obX).w,d0
0001DE24 6A00                       		bpl.s	loc_1A0B4
0001DE26 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001DE2C 6000 0000                  		bra.w	loc_1A0F2
0001DE30                            ; ===========================================================================
0001DE30                            
0001DE30                            loc_1A0B4:
0001DE30 0440 0070                  		subi.w	#$70,d0
0001DE34 6500                       		bcs.s	loc_1A0F2
0001DE36 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DE3C 5140                       		subq.w	#8,d0
0001DE3E 6500                       		bcs.s	loc_1A0F2
0001DE40 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DE46 5140                       		subq.w	#8,d0
0001DE48 6500                       		bcs.s	loc_1A0F2
0001DE4A 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DE50 5140                       		subq.w	#8,d0
0001DE52 6500                       		bcs.s	loc_1A0F2
0001DE54 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DE5A 5140                       		subq.w	#8,d0
0001DE5C 6500                       		bcs.s	loc_1A0F2
0001DE5E 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DE64 0440 0038                  		subi.w	#$38,d0
0001DE68 6500                       		bcs.s	loc_1A0F2
0001DE6A 4268 0010                  		clr.w	obVelX(a0)
0001DE6E                            
0001DE6E                            loc_1A0F2:
0001DE6E 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001DE74 6500                       		bcs.s	loc_1A110
0001DE76 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001DE7C 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001DE82 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001DE88 5428 0034                  		addq.b	#2,$34(a0)
0001DE8C                            
0001DE8C                            loc_1A110:
0001DE8C 6000                       		bra.s	loc_1A15C
0001DE8E                            ; ===========================================================================
0001DE8E                            
0001DE8E                            loc_1A112:
0001DE8E 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001DE94 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001DE9A 6500                       		bcs.s	loc_1A124
0001DE9C 4268 0010                  		clr.w	obVelX(a0)
0001DEA0                            
0001DEA0                            loc_1A124:
0001DEA0 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001DEA6 4A68 0012                  		tst.w	obVelY(a0)
0001DEAA 6B00                       		bmi.s	loc_1A142
0001DEAC 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001DEB2 6500                       		bcs.s	loc_1A142
0001DEB4 317C 0592 000C             		move.w	#$592,obY(a0)
0001DEBA 4268 0012                  		clr.w	obVelY(a0)
0001DEBE                            
0001DEBE                            loc_1A142:
0001DEBE 3028 0010                  		move.w	obVelX(a0),d0
0001DEC2 8068 0012                  		or.w	obVelY(a0),d0
0001DEC6 6600                       		bne.s	loc_1A15C
0001DEC8 5428 0034                  		addq.b	#2,$34(a0)
0001DECC 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001DED2 117C 0001 0021             		move.b	#1,obColProp(a0)
0001DED8                            
0001DED8                            loc_1A15C:
0001DED8 43FA F876                  		lea	Ani_SEgg(pc),a1
0001DEDC 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001DEE2                            
0001DEE2                            loc_1A166:
0001DEE2 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001DEE8 6C00                       		bge.s	loc_1A172
0001DEEA 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001DEEE                            
0001DEEE                            loc_1A172:
0001DEEE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001DEF4 6C00                       		bge.s	locret_1A190
0001DEF6 323C 001B                  		move.w	#$1B,d1
0001DEFA 343C 0070                  		move.w	#$70,d2
0001DEFE 363C 0071                  		move.w	#$71,d3
0001DF02 3828 0008                  		move.w	obX(a0),d4
0001DF06 4EF9 0001 1DA4             		jmp	(SolidObject).l
0001DF0C                            ; ===========================================================================
0001DF0C                            
0001DF0C                            locret_1A190:
0001DF0C 4E75                       		rts	
0001DF0E                            ; ===========================================================================
0001DF0E                            
0001DF0E                            loc_1A192:
0001DF0E 217C 0001 BA06 0004        		move.l	#Map_Eggman,obMap(a0)
0001DF16 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DF1C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DF22 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DF28 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001DF2E 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001DF34 6400                       		bcc.s	loc_1A1D0
0001DF36 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001DF3C 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001DF42 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DF48 5428 0034                  		addq.b	#2,$34(a0)
0001DF4C                            
0001DF4C                            loc_1A1D0:
0001DF4C 6000 FF8A                  		bra.w	loc_1A15C
0001DF50                            ; ===========================================================================
0001DF50                            
0001DF50                            loc_1A1D4:
0001DF50 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DF56 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001DF5C 4A68 0030                  		tst.w	$30(a0)
0001DF60 6600                       		bne.s	loc_1A1FC
0001DF62 4A28 0020                  		tst.b	obColType(a0)
0001DF66 6600                       		bne.s	loc_1A216
0001DF68 317C 001E 0030             		move.w	#$1E,$30(a0)
0001DF6E 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DF74                            
0001DF74                            loc_1A1FC:
0001DF74 5368 0030                  		subq.w	#1,$30(a0)
0001DF78 6600                       		bne.s	loc_1A216
0001DF7A 4A28 0022                  		tst.b	obStatus(a0)
0001DF7E 6A00                       		bpl.s	loc_1A210
0001DF80 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001DF86 6000                       		bra.s	loc_1A216
0001DF88                            ; ===========================================================================
0001DF88                            
0001DF88                            loc_1A210:
0001DF88 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DF8E                            
0001DF8E                            loc_1A216:
0001DF8E 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001DF94 6D00                       		blt.s	loc_1A23A
0001DF96 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001DF9C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001DFA2 4278 D020                  		clr.w	(v_player+obInertia).w
0001DFA6 4A68 0012                  		tst.w	obVelY(a0)
0001DFAA 6A00                       		bpl.s	loc_1A248
0001DFAC 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001DFB2                            
0001DFB2                            loc_1A23A:
0001DFB2 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001DFB8 6D00                       		blt.s	loc_1A248
0001DFBA 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001DFC0                            
0001DFC0                            loc_1A248:
0001DFC0 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001DFC6 6500                       		bcs.s	loc_1A260
0001DFC8 4A28 0001                  		tst.b	obRender(a0)
0001DFCC 6B00                       		bmi.s	loc_1A260
0001DFCE 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001DFD4 6000 FAF0                  		bra.w	Obj85_Delete
0001DFD8                            ; ===========================================================================
0001DFD8                            
0001DFD8                            loc_1A260:
0001DFD8 6000 FEFE                  		bra.w	loc_1A15C
0001DFDC                            ; ===========================================================================
0001DFDC                            
0001DFDC                            loc_1A264:	; Routine 4
0001DFDC 2268 0034                  		movea.l	$34(a0),a1
0001DFE0 1011                       		move.b	(a1),d0
0001DFE2 B010                       		cmp.b	(a0),d0
0001DFE4 6600 FAE0                  		bne.w	Obj85_Delete
0001DFE8 117C 0007 001C             		move.b	#7,obAnim(a0)
0001DFEE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DFF4 6C00                       		bge.s	loc_1A280
0001DFF6 6000                       		bra.s	loc_1A2A6
0001DFF8                            ; ===========================================================================
0001DFF8                            
0001DFF8                            loc_1A280:
0001DFF8 4A69 0010                  		tst.w	obVelX(a1)
0001DFFC 6700                       		beq.s	loc_1A28C
0001DFFE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001E004                            
0001E004                            loc_1A28C:
0001E004 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001E008 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001E00E                            
0001E00E                            loc_1A296:
0001E00E 2268 0034                  		movea.l	$34(a0),a1
0001E012 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001E018 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001E01E                            
0001E01E                            loc_1A2A6:
0001E01E 2268 0034                  		movea.l	$34(a0),a1
0001E022 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001E028 7003                       		moveq	#3,d0
0001E02A C028 0022                  		and.b	obStatus(a0),d0
0001E02E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001E034 8128 0001                  		or.b	d0,obRender(a0)
0001E038 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001E03E                            ; ===========================================================================
0001E03E                            
0001E03E                            loc_1A2C6:	; Routine 6
0001E03E 2268 0034                  		movea.l	$34(a0),a1
0001E042 1011                       		move.b	(a1),d0
0001E044 B010                       		cmp.b	(a0),d0
0001E046 6600 FA7E                  		bne.w	Obj85_Delete
0001E04A 0CA9 0001 BA06 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E052 6700                       		beq.s	loc_1A2E4
0001E054 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001E05A 60C2                       		bra.s	loc_1A2A6
0001E05C                            ; ===========================================================================
0001E05C                            
0001E05C                            loc_1A2E4:
0001E05C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E062 4A29 0021                  		tst.b	obColProp(a1)
0001E066 6F00                       		ble.s	loc_1A312
0001E068 117C 0006 001C             		move.b	#6,obAnim(a0)
0001E06E 217C 0001 BA06 0004        		move.l	#Map_Eggman,obMap(a0)
0001E076 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001E07C 43FA D938                  		lea	Ani_Eggman(pc),a1
0001E080 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001E086 6000 FF86                  		bra.w	loc_1A296
0001E08A                            ; ===========================================================================
0001E08A                            
0001E08A                            loc_1A312:
0001E08A 4A28 0001                  		tst.b	1(a0)
0001E08E 6A00 FA36                  		bpl.w	Obj85_Delete
0001E092 6100 D4CC                  		bsr.w	BossDefeated
0001E096 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001E09C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E0A2 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001E0AA 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001E0B0 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001E0B4 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001E0BA 6000 FF52                  		bra.w	loc_1A296
0001E0BE                            ; ===========================================================================
0001E0BE                            
0001E0BE                            loc_1A346:	; Routine 8
0001E0BE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001E0C4 2268 0034                  		movea.l	$34(a0),a1
0001E0C8 0CA9 0001 BA06 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E0D0 6700                       		beq.s	loc_1A35E
0001E0D2 6000 FF4A                  		bra.w	loc_1A2A6
0001E0D6                            ; ===========================================================================
0001E0D6                            
0001E0D6                            loc_1A35E:
0001E0D6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001E0DC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001E0E2 4A28 001E                  		tst.b	obTimeFrame(a0)
0001E0E6 6600                       		bne.s	loc_1A376
0001E0E8 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001E0EE                            
0001E0EE                            loc_1A376:
0001E0EE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001E0F2 6E00                       		bgt.s	loc_1A38A
0001E0F4 5228 001A                  		addq.b	#1,obFrame(a0)
0001E0F8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001E0FE 6E00 F9C6                  		bgt.w	Obj85_Delete
0001E102                            
0001E102                            loc_1A38A:
0001E102 6000 FF0A                  		bra.w	loc_1A296
0001E106                            ; ===========================================================================
0001E106                            
0001E106                            loc_1A38E:	; Routine $A
0001E106 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001E10C 3038 D008                  		move.w	(v_player+obX).w,d0
0001E110 9068 0008                  		sub.w	obX(a0),d0
0001E114 6500                       		bcs.s	loc_1A3A6
0001E116 4A28 0001                  		tst.b	obRender(a0)
0001E11A 6A00 F9AA                  		bpl.w	Obj85_Delete
0001E11E                            
0001E11E                            loc_1A3A6:
0001E11E 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001E124                            ; ===========================================================================
0001E124                            
0001E124                            loc_1A3AC:	; Routine $C
0001E124 117C 0000 001A             		move.b	#0,obFrame(a0)
0001E12A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001E130 2268 0034                  		movea.l	$34(a0),a1
0001E134 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001E13A 6600                       		bne.s	loc_1A3D0
0001E13C 0CA9 0001 BA06 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E144 6700 F980                  		beq.w	Obj85_Delete
0001E148                            
0001E148                            loc_1A3D0:
0001E148 6000 FED4                  		bra.w	loc_1A2A6
0001E14C                            		
0001E14C                            BossModeMusic:
0001E14C 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001E152 6600 0000                  		bne.w	NormalMode
0001E156 4EF9 0000 0000             		jmp	PinchMode
0001E15C                            
0001E15C                            NormalMode:
0001E15C 303C 00AC                  		move.w	#$AC,d0
0001E160 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001E166 4E75                       		rts
0001E168                            
0001E168                            PinchMode:
0001E168 303C 0094                  		move.w	#$94,d0
0001E16C 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001E172 303C 00E2                  		move.w	#$E2,d0
0001E176 4EB9 0000 12F8             		jsr	(PlaySound).l
0001E17C 4E75                       		rts		
0001E17C 4E75                       		rts		
0001E17E                            		include	"_anim\FZ Eggman in Ship.asm"
0001E17E                            ; ---------------------------------------------------------------------------
0001E17E                            ; Animation script - Eggman (FZ)
0001E17E                            ; ---------------------------------------------------------------------------
0001E17E 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001E180 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001E184                            		even
0001E184                            		even
0001E184                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001E184                            ; ---------------------------------------------------------------------------
0001E184                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001E184                            ; ---------------------------------------------------------------------------
0001E184                            Map_FZDamaged_internal:
0001E184 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001E186 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001E188 06                         @damage1:	dc.b 6
0001E189 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001E18E EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001E193 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E198 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E19D FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E1A2 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E1A7 06                         @damage2:	dc.b 6
0001E1A8 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001E1AD EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001E1B2 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E1B7 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E1BC FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E1C1 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E1C6                            		even
0001E1C6                            		even
0001E1C6                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001E1C6                            ; ---------------------------------------------------------------------------
0001E1C6                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001E1C6                            ; ---------------------------------------------------------------------------
0001E1C6                            Map_FZLegs_internal:
0001E1C6 0000                       		dc.w @extended-Map_FZLegs_internal
0001E1C8 0000                       		dc.w @halfway-Map_FZLegs_internal
0001E1CA 0000                       		dc.w @retracted-Map_FZLegs_internal
0001E1CC 02                         @extended:	dc.b 2
0001E1CD 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001E1D2 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001E1D7 03                         @halfway:	dc.b 3
0001E1D8 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001E1DD 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001E1E2 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001E1E7 02                         @retracted:	dc.b 2
0001E1E8 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001E1ED 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001E1F2                            		even
0001E1F2                            		even
0001E1F2                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001E1F2                            ; ---------------------------------------------------------------------------
0001E1F2                            ; Object 84 - cylinder Eggman hides in (FZ)
0001E1F2                            ; ---------------------------------------------------------------------------
0001E1F2                            
0001E1F2                            Obj84_Delete:
0001E1F2 4EF9 0000 F898             		jmp	(DeleteObject).l
0001E1F8                            ; ===========================================================================
0001E1F8                            
0001E1F8                            EggmanCylinder:
0001E1F8 7000                       		moveq	#0,d0
0001E1FA 1028 0024                  		move.b	obRoutine(a0),d0
0001E1FE 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001E202 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001E206                            ; ===========================================================================
0001E206 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001E208 0000                       		dc.w loc_1A4CE-Obj84_Index
0001E20A 0000                       		dc.w loc_1A57E-Obj84_Index
0001E20C                            
0001E20C 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001E210 2550 0620                  		dc.w $2550, $620
0001E214 2490 04C0                  		dc.w $2490, $4C0
0001E218 2510 04C0                  		dc.w $2510, $4C0
0001E21C                            ; ===========================================================================
0001E21C                            
0001E21C                            Obj84_Main:	; Routine
0001E21C 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001E220 7000                       		moveq	#0,d0
0001E222 1028 0028                  		move.b	obSubtype(a0),d0
0001E226 D040                       		add.w	d0,d0
0001E228 D2C0                       		adda.w	d0,a1
0001E22A 117C 0004 0001             		move.b	#4,obRender(a0)
0001E230 08E8 0007 0001             		bset	#7,obRender(a0)
0001E236 08E8 0004 0001             		bset	#4,obRender(a0)
0001E23C 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E242 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001E24A 3159 0008                  		move.w	(a1)+,obX(a0)
0001E24E 3151 000C                  		move.w	(a1),obY(a0)
0001E252 3159 0038                  		move.w	(a1)+,$38(a0)
0001E256 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001E25C 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001E262 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001E268 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001E26E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E274 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E278                            
0001E278                            loc_1A4CE:	; Routine 2
0001E278 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E27E 6F00                       		ble.s	loc_1A4DC
0001E280 08E8 0001 0001             		bset	#1,obRender(a0)
0001E286                            
0001E286                            loc_1A4DC:
0001E286 42A8 003C                  		clr.l	$3C(a0)
0001E28A 4A28 0029                  		tst.b	$29(a0)
0001E28E 6700                       		beq.s	loc_1A4EA
0001E290 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E294                            
0001E294                            loc_1A4EA:
0001E294 2028 003C                  		move.l	$3C(a0),d0
0001E298 2228 0038                  		move.l	$38(a0),d1
0001E29C D280                       		add.l	d0,d1
0001E29E 4841                       		swap	d1
0001E2A0 3141 000C                  		move.w	d1,obY(a0)
0001E2A4 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001E2AA 6600                       		bne.s	loc_1A524
0001E2AC 4A68 0030                  		tst.w	$30(a0)
0001E2B0 6A00                       		bpl.s	loc_1A524
0001E2B2 70F6                       		moveq	#-$A,d0
0001E2B4 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E2BA 6F00                       		ble.s	loc_1A514
0001E2BC 700E                       		moveq	#$E,d0
0001E2BE                            
0001E2BE                            loc_1A514:
0001E2BE D240                       		add.w	d0,d1
0001E2C0 2268 0034                  		movea.l	$34(a0),a1
0001E2C4 3341 000C                  		move.w	d1,obY(a1)
0001E2C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E2CE                            
0001E2CE                            loc_1A524:
0001E2CE 323C 002B                  		move.w	#$2B,d1
0001E2D2 343C 0060                  		move.w	#$60,d2
0001E2D6 363C 0061                  		move.w	#$61,d3
0001E2DA 3828 0008                  		move.w	obX(a0),d4
0001E2DE 4EB9 0001 1DA4             		jsr	(SolidObject).l
0001E2E4 7000                       		moveq	#0,d0
0001E2E6 3228 003C                  		move.w	$3C(a0),d1
0001E2EA 6A00                       		bpl.s	loc_1A550
0001E2EC 4441                       		neg.w	d1
0001E2EE 5141                       		subq.w	#8,d1
0001E2F0 6500                       		bcs.s	loc_1A55C
0001E2F2 5200                       		addq.b	#1,d0
0001E2F4 E841                       		asr.w	#4,d1
0001E2F6 D041                       		add.w	d1,d0
0001E2F8 6000                       		bra.s	loc_1A55C
0001E2FA                            ; ===========================================================================
0001E2FA                            
0001E2FA                            loc_1A550:
0001E2FA 0441 0027                  		subi.w	#$27,d1
0001E2FE 6500                       		bcs.s	loc_1A55C
0001E300 5200                       		addq.b	#1,d0
0001E302 E841                       		asr.w	#4,d1
0001E304 D041                       		add.w	d1,d0
0001E306                            
0001E306                            loc_1A55C:
0001E306 1140 001A                  		move.b	d0,obFrame(a0)
0001E30A 3038 D008                  		move.w	(v_player+obX).w,d0
0001E30E 9068 0008                  		sub.w	obX(a0),d0
0001E312 6B00                       		bmi.s	loc_1A578
0001E314 0440 0140                  		subi.w	#$140,d0
0001E318 6B00                       		bmi.s	loc_1A578
0001E31A 4A28 0001                  		tst.b	obRender(a0)
0001E31E 6A00 FED2                  		bpl.w	Obj84_Delete
0001E322                            
0001E322                            loc_1A578:
0001E322 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001E328                            ; ===========================================================================
0001E328                            
0001E328                            loc_1A57E:	; Routine 4
0001E328 7000                       		moveq	#0,d0
0001E32A 1028 0028                  		move.b	obSubtype(a0),d0
0001E32E 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001E332 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001E336 6000 FF5C                  		bra.w	loc_1A4EA
0001E33A                            ; ===========================================================================
0001E33A 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001E33C 0000                       		dc.w loc_1A598-off_1A590
0001E33E 0000                       		dc.w loc_1A604-off_1A590
0001E340 0000                       		dc.w loc_1A604-off_1A590
0001E342                            ; ===========================================================================
0001E342                            
0001E342                            loc_1A598:
0001E342 4A28 0029                  		tst.b	$29(a0)
0001E346 6600                       		bne.s	loc_1A5D4
0001E348 2268 0034                  		movea.l	$34(a0),a1
0001E34C 4A29 0021                  		tst.b	obColProp(a1)
0001E350 6600                       		bne.s	loc_1A5B4
0001E352 6100 D20C                  		bsr.w	BossDefeated
0001E356 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001E35E                            
0001E35E                            loc_1A5B4:
0001E35E 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001E366 6400                       		bcc.s	locret_1A602
0001E368 42A8 003C                  		clr.l	$3C(a0)
0001E36C 2268 0034                  		movea.l	$34(a0),a1
0001E370 5369 0032                  		subq.w	#1,$32(a1)
0001E374 4269 0030                  		clr.w	$30(a1)
0001E378 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E37C 4E75                       		rts	
0001E37E                            ; ===========================================================================
0001E37E                            
0001E37E                            loc_1A5D4:
0001E37E 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001E384 6C00                       		bge.s	loc_1A5E4
0001E386 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001E38E                            
0001E38E                            loc_1A5E4:
0001E38E 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001E396 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001E39C 6E00                       		bgt.s	locret_1A602
0001E39E 4268 003E                  		clr.w	$3E(a0)
0001E3A2 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001E3A8 4228 0029                  		clr.b	$29(a0)
0001E3AC                            
0001E3AC                            locret_1A602:
0001E3AC 4E75                       		rts	
0001E3AE                            ; ===========================================================================
0001E3AE                            
0001E3AE                            loc_1A604:
0001E3AE 08E8 0001 0001             		bset	#1,obRender(a0)
0001E3B4 4A28 0029                  		tst.b	$29(a0)
0001E3B8 6600                       		bne.s	loc_1A646
0001E3BA 2268 0034                  		movea.l	$34(a0),a1
0001E3BE 4A29 0021                  		tst.b	obColProp(a1)
0001E3C2 6600                       		bne.s	loc_1A626
0001E3C4 6100 D19A                  		bsr.w	BossDefeated
0001E3C8 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001E3D0                            
0001E3D0                            loc_1A626:
0001E3D0 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001E3D8 6400                       		bcc.s	locret_1A674
0001E3DA 42A8 003C                  		clr.l	$3C(a0)
0001E3DE 2268 0034                  		movea.l	$34(a0),a1
0001E3E2 5369 0032                  		subq.w	#1,$32(a1)
0001E3E6 4269 0030                  		clr.w	$30(a1)
0001E3EA 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E3EE 4E75                       		rts	
0001E3F0                            ; ===========================================================================
0001E3F0                            
0001E3F0                            loc_1A646:
0001E3F0 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001E3F6 6D00                       		blt.s	loc_1A656
0001E3F8 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001E400                            
0001E400                            loc_1A656:
0001E400 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001E408 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001E40E 6D00                       		blt.s	locret_1A674
0001E410 4268 003E                  		clr.w	$3E(a0)
0001E414 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001E41A 4228 0029                  		clr.b	$29(a0)
0001E41E                            
0001E41E                            locret_1A674:
0001E41E 4E75                       		rts	
0001E41E 4E75                       		rts	
0001E420                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001E420                            ; --------------------------------------------------------------------------------
0001E420                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E420                            ; --------------------------------------------------------------------------------
0001E420                            
0001E420                            SME_SCUpI:	
0001E420 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001E424 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001E428 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001E42C 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001E430 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001E434 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001E438 06                         SME_SCUpI_18:	dc.b 6	
0001E439 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E43E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E443 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E448 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E44D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E452 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E457 08                         SME_SCUpI_37:	dc.b 8	
0001E458 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E45D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E462 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E467 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E46C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E471 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E476 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E47B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E480 0A                         SME_SCUpI_60:	dc.b $A	
0001E481 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E486 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E48B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E490 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E495 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E49A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E49F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4A4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E4A9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E4AE A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4B3 0C                         SME_SCUpI_93:	dc.b $C	
0001E4B4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E4B9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E4BE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E4C3 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E4C8 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E4CD D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E4D2 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4D7 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E4DC F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E4E1 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E4E6 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E4EB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4F0 0D                         SME_SCUpI_D0:	dc.b $D	
0001E4F1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E4F6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E4FB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E500 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E505 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E50A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E50F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E514 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E519 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E51E 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E523 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E528 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E52D A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E532 0E                         SME_SCUpI_112:	dc.b $E	
0001E533 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E538 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E53D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E542 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E547 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E54C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E551 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E556 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E55B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E560 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E565 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E56A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E56F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E574 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E579 0E                         SME_SCUpI_159:	dc.b $E	
0001E57A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E57F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E584 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E589 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E58E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E593 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E598 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E59D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E5A2 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E5A7 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E5AC 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E5B1 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E5B6 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E5BB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E5C0 0E                         SME_SCUpI_1A0:	dc.b $E	
0001E5C1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E5C6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E5CB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E5D0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E5D5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E5DA D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E5DF D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E5E4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E5E9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E5EE 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E5F3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E5F8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E5FD 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E602 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E607 0E                         SME_SCUpI_1E7:	dc.b $E	
0001E608 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E60D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E612 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E617 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E61C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E621 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E626 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E62B F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E630 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E635 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E63A 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E63F 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E644 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E649 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E64E 0E                         SME_SCUpI_22E:	dc.b $E	
0001E64F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E654 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E659 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E65E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E663 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E668 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E66D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E672 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E677 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E67C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E681 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E686 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E68B 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E690 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E695 0E                         SME_SCUpI_275:	dc.b $E	
0001E696 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E69B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E6A0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E6A5 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E6AA B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E6AF D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E6B4 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E6B9 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E6BE F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E6C3 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E6C8 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E6CD 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E6D2 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E6D7 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E6DC 02                         SME_SCUpI_2BC:	dc.b 2	
0001E6DD F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001E6E2 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001E6E8 00                         		even
0001E6E8 00                         		even
0001E6E8                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001E6E8                            ; ---------------------------------------------------------------------------
0001E6E8                            ; Object 86 - energy balls (FZ)
0001E6E8                            ; ---------------------------------------------------------------------------
0001E6E8                            
0001E6E8                            BossPlasma:
0001E6E8 7000                       		moveq	#0,d0
0001E6EA 1028 0024                  		move.b	obRoutine(a0),d0
0001E6EE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001E6F2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001E6F6                            ; ===========================================================================
0001E6F6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001E6F8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001E6FA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001E6FC 0000                       		dc.w loc_1A962-Obj86_Index
0001E6FE 0000                       		dc.w loc_1A982-Obj86_Index
0001E700                            ; ===========================================================================
0001E700                            
0001E700                            Obj86_Main:	; Routine 0
0001E700 317C 2588 0008             		move.w	#$2588,obX(a0)
0001E706 317C 053C 000C             		move.w	#$53C,obY(a0)
0001E70C 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E712 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001E71A 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E720 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E726 117C 0008 0017             		move.b	#8,obWidth(a0)
0001E72C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001E732 117C 0004 0001             		move.b	#4,obRender(a0)
0001E738 08E8 0007 0001             		bset	#7,obRender(a0)
0001E73E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E742                            
0001E742                            Obj86_Generator:; Routine 2
0001E742 2268 0034                  		movea.l	$34(a0),a1
0001E746 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001E74C 6600                       		bne.s	loc_1A850
0001E74E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001E752 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001E758 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001E75E                            ; ===========================================================================
0001E75E                            
0001E75E                            loc_1A850:
0001E75E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E764 4A28 0029                  		tst.b	$29(a0)
0001E768 6700                       		beq.s	loc_1A86C
0001E76A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E76E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E774 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001E77A                            
0001E77A                            loc_1A86C:
0001E77A 323C 0013                  		move.w	#$13,d1
0001E77E 343C 0008                  		move.w	#8,d2
0001E782 363C 0011                  		move.w	#$11,d3
0001E786 3828 0008                  		move.w	obX(a0),d4
0001E78A 4EB9 0001 1DA4             		jsr	(SolidObject).l
0001E790 3038 D008                  		move.w	(v_player+obX).w,d0
0001E794 9068 0008                  		sub.w	obX(a0),d0
0001E798 6B00                       		bmi.s	loc_1A89A
0001E79A 0440 0140                  		subi.w	#$140,d0
0001E79E 6B00                       		bmi.s	loc_1A89A
0001E7A0 4A28 0001                  		tst.b	obRender(a0)
0001E7A4 6A00 FA4C                  		bpl.w	Obj84_Delete
0001E7A8                            
0001E7A8                            loc_1A89A:
0001E7A8 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001E7AC 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001E7B2 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001E7B8                            ; ===========================================================================
0001E7B8                            
0001E7B8                            Obj86_MakeBalls:; Routine 4
0001E7B8 4A28 0029                  		tst.b	$29(a0)
0001E7BC 6700 0000                  		beq.w	loc_1A954
0001E7C0 4228 0029                  		clr.b	$29(a0)
0001E7C4 D068 0030                  		add.w	$30(a0),d0
0001E7C8 0240 001E                  		andi.w	#$1E,d0
0001E7CC D4C0                       		adda.w	d0,a2
0001E7CE 5868 0030                  		addq.w	#4,$30(a0)
0001E7D2 4268 0032                  		clr.w	$32(a0)
0001E7D6 7403                       		moveq	#3,d2
0001E7D8                            
0001E7D8                            Obj86_Loop:
0001E7D8 4EB9 0000 FE08             		jsr	(FindNextFreeObj).l
0001E7DE 6600 0000                  		bne.w	loc_1A954
0001E7E2 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001E7E6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E7EC 337C 053C 000C             		move.w	#$53C,obY(a1)
0001E7F2 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001E7F8 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001E7FE 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001E806 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001E80C 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001E812 137C 0000 0020             		move.b	#0,obColType(a1)
0001E818 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001E81E 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001E824 137C 0004 0001             		move.b	#4,obRender(a1)
0001E82A 08E9 0007 0001             		bset	#7,obRender(a1)
0001E830 2348 0034                  		move.l	a0,$34(a1)
0001E834 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001E83A 3228 0032                  		move.w	$32(a0),d1
0001E83E C3FC FFB1                  		muls.w	#-$4F,d1
0001E842 0641 2578                  		addi.w	#$2578,d1
0001E846 0240 001F                  		andi.w	#$1F,d0
0001E84A 0440 0010                  		subi.w	#$10,d0
0001E84E D041                       		add.w	d1,d0
0001E850 3340 0030                  		move.w	d0,$30(a1)
0001E854 5268 0032                  		addq.w	#1,$32(a0)
0001E858 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001E85E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001E862                            
0001E862                            loc_1A954:
0001E862 4A68 0032                  		tst.w	$32(a0)
0001E866 6600                       		bne.s	loc_1A95E
0001E868 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E86C                            
0001E86C                            loc_1A95E:
0001E86C 6000 FF0C                  		bra.w	loc_1A86C
0001E870                            ; ===========================================================================
0001E870                            
0001E870                            loc_1A962:	; Routine 6
0001E870 117C 0002 001C             		move.b	#2,obAnim(a0)
0001E876 4A68 0038                  		tst.w	$38(a0)
0001E87A 6600                       		bne.s	loc_1A97E
0001E87C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001E882 2268 0034                  		movea.l	$34(a0),a1
0001E886 337C FFFF 0032             		move.w	#-1,$32(a1)
0001E88C                            
0001E88C                            loc_1A97E:
0001E88C 6000 FEEC                  		bra.w	loc_1A86C
0001E890                            ; ===========================================================================
0001E890                            
0001E890                            loc_1A982:	; Routine 8
0001E890 7000                       		moveq	#0,d0
0001E892 1028 0025                  		move.b	ob2ndRout(a0),d0
0001E896 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001E89A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001E89E 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001E8A2 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001E8A8 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001E8AE                            ; ===========================================================================
0001E8AE 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001E8B0 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001E8B2 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001E8B4                            ; ===========================================================================
0001E8B4                            
0001E8B4                            loc_1A9A6:
0001E8B4 3028 0030                  		move.w	$30(a0),d0
0001E8B8 9068 0008                  		sub.w	obX(a0),d0
0001E8BC E940                       		asl.w	#4,d0
0001E8BE 3140 0010                  		move.w	d0,obVelX(a0)
0001E8C2 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E8C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E8CC 4E75                       		rts	
0001E8CE                            ; ===========================================================================
0001E8CE                            
0001E8CE                            loc_1A9C0:
0001E8CE 4A68 0010                  		tst.w	obVelX(a0)
0001E8D2 6700                       		beq.s	loc_1A9E6
0001E8D4 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001E8DA 3028 0008                  		move.w	obX(a0),d0
0001E8DE 9068 0030                  		sub.w	$30(a0),d0
0001E8E2 6400                       		bcc.s	loc_1A9E6
0001E8E4 4268 0010                  		clr.w	obVelX(a0)
0001E8E8 D168 0008                  		add.w	d0,obX(a0)
0001E8EC 2268 0034                  		movea.l	$34(a0),a1
0001E8F0 5369 0032                  		subq.w	#1,$32(a1)
0001E8F4                            
0001E8F4                            loc_1A9E6:
0001E8F4 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E8FA 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E8FE 6600                       		bne.s	locret_1AA1C
0001E900 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E904 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E90A 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001E910 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E916 7000                       		moveq	#0,d0
0001E918 3038 D008                  		move.w	(v_player+obX).w,d0
0001E91C 9068 0008                  		sub.w	obX(a0),d0
0001E920 3140 0010                  		move.w	d0,obVelX(a0)
0001E924 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001E92A                            
0001E92A                            locret_1AA1C:
0001E92A 4E75                       		rts	
0001E92C                            ; ===========================================================================
0001E92C                            
0001E92C                            loc_1AA1E:
0001E92C 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001E932 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001E938 6400                       		bcc.s	loc_1AA34
0001E93A 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E93E 6700                       		beq.s	loc_1AA34
0001E940 4E75                       		rts	
0001E942                            ; ===========================================================================
0001E942                            
0001E942                            loc_1AA34:
0001E942 2268 0034                  		movea.l	$34(a0),a1
0001E946 5369 0038                  		subq.w	#1,$38(a1)
0001E94A 6000 F8A6                  		bra.w	Obj84_Delete
0001E94A 6000 F8A6                  		bra.w	Obj84_Delete
0001E94E                            		include	"_anim\Plasma Ball Launcher.asm"
0001E94E                            ; ---------------------------------------------------------------------------
0001E94E                            ; Animation script - energy ball launcher (FZ)
0001E94E                            ; ---------------------------------------------------------------------------
0001E94E 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001E950 0000                       		dc.w @redsparking-Ani_PLaunch
0001E952 0000                       		dc.w @whitesparking-Ani_PLaunch
0001E954 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001E958 00                         		even
0001E958 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001E95E                            		even
0001E95E 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001E964                            		even
0001E964                            		even
0001E964                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001E964                            ; ---------------------------------------------------------------------------
0001E964                            ; Sprite mappings - energy ball	launcher (FZ)
0001E964                            ; ---------------------------------------------------------------------------
0001E964                            Map_PLaunch_internal:
0001E964 0000                       		dc.w @red-Map_PLaunch_internal
0001E966 0000                       		dc.w @white-Map_PLaunch_internal
0001E968 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001E96A 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001E96C 01                         @red:		dc.b 1
0001E96D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001E972 01                         @white:		dc.b 1
0001E973 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001E978 01                         @sparking1:	dc.b 1
0001E979 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001E97E 01                         @sparking2:	dc.b 1
0001E97F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001E984                            		even
0001E984                            		even
0001E984                            		include	"_anim\Plasma Balls.asm"
0001E984                            ; ---------------------------------------------------------------------------
0001E984                            ; Animation script - energy balls (FZ)
0001E984                            ; ---------------------------------------------------------------------------
0001E984 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001E986 0000                       		dc.w @short-Ani_Plasma
0001E988 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001E997 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001E9A6 0A05 FF                    		dc.b $A, 5, afEnd
0001E9AA 00                         		even
0001E9AA 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001E9B4                            		even
0001E9B4                            		even
0001E9B4                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001E9B4                            ; ---------------------------------------------------------------------------
0001E9B4                            ; Sprite mappings - energy balls (FZ)
0001E9B4                            ; ---------------------------------------------------------------------------
0001E9B4                            Map_Plasma_internal:
0001E9B4 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001E9B6 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001E9B8 0000                       		dc.w @white1-Map_Plasma_internal
0001E9BA 0000                       		dc.w @white2-Map_Plasma_internal
0001E9BC 0000                       		dc.w @white3-Map_Plasma_internal
0001E9BE 0000                       		dc.w @white4-Map_Plasma_internal
0001E9C0 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001E9C2 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001E9C4 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001E9C6 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001E9C8 0000                       		dc.w @blank-Map_Plasma_internal
0001E9CA 02                         @fuzzy1:	dc.b 2
0001E9CB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001E9D0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001E9D5 02                         @fuzzy2:	dc.b 2
0001E9D6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001E9DB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001E9E0 02                         @white1:	dc.b 2
0001E9E1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001E9E6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001E9EB 02                         @white2:	dc.b 2
0001E9EC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001E9F1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001E9F6 02                         @white3:	dc.b 2
0001E9F7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001E9FC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001EA01 02                         @white4:	dc.b 2
0001EA02 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001EA07 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001EA0C 01                         @fuzzy3:	dc.b 1
0001EA0D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001EA12 01                         @fuzzy4:	dc.b 1
0001EA13 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001EA18 02                         @fuzzy5:	dc.b 2
0001EA19 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001EA1E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001EA23 02                         @fuzzy6:	dc.b 2
0001EA24 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001EA29 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001EA2E 00                         @blank:		dc.b 0
0001EA30 00                         		even
0001EA30 00                         		even
0001EA30                            
0001EA30                            		include	"_incObj\3E Prison Capsule.asm"
0001EA30                            ; ---------------------------------------------------------------------------
0001EA30                            ; Object 3E - prison capsule
0001EA30                            ; ---------------------------------------------------------------------------
0001EA30                            
0001EA30                            Prison:
0001EA30 7000                       		moveq	#0,d0
0001EA32 1028 0024                  		move.b	obRoutine(a0),d0
0001EA36 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001EA3A 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001EA5A 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001EA60                            
0001EA60                            	@delete:
0001EA60 4EF9 0000 F898             		jmp	(DeleteObject).l
0001EA66                            ; ===========================================================================
0001EA66 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001EA68 0000                       		dc.w Pri_BodyMain-Pri_Index
0001EA6A 0000                       		dc.w Pri_Switched-Pri_Index
0001EA6C 0000                       		dc.w Pri_Explosion-Pri_Index
0001EA6E 0000                       		dc.w Pri_Explosion-Pri_Index
0001EA70 0000                       		dc.w Pri_Explosion-Pri_Index
0001EA72 0000                       		dc.w Pri_Animals-Pri_Index
0001EA74 0000                       		dc.w Pri_EndAct-Pri_Index
0001EA76                            
0001EA76 =00000030                  pri_origY:	equ $30		; original y-axis position
0001EA76                            
0001EA76 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001EA7A 040C 0501                  		dc.b 4,	$C, 5, 1
0001EA7E 0610 0403                  		dc.b 6,	$10, 4,	3
0001EA82 0810 0305                  		dc.b 8,	$10, 3,	5
0001EA86                            ; ===========================================================================
0001EA86                            
0001EA86                            Pri_Main:	; Routine 0
0001EA86 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001EA8E 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001EA94 117C 0004 0001             		move.b	#4,obRender(a0)
0001EA9A 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001EAA0 7000                       		moveq	#0,d0
0001EAA2 1028 0028                  		move.b	obSubtype(a0),d0
0001EAA6 E548                       		lsl.w	#2,d0
0001EAA8 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001EAAC 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001EAB0 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001EAB4 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001EAB8 3028 0018                  		move.w obPriority(a0),d0 
0001EABC E248                       		lsr.w #1,d0 
0001EABE 0240 0380                  		andi.w #$380,d0 
0001EAC2 3140 0018                  		move.w d0,obPriority(a0)		
0001EAC6 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001EACA 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001EACE 6600                       		bne.s	@not02		; if not, branch
0001EAD0                            
0001EAD0 117C 0006 0020             		move.b	#6,obColType(a0)
0001EAD6 117C 0008 0021             		move.b	#8,obColProp(a0)
0001EADC                            
0001EADC                            	@not02:
0001EADC 4E75                       		rts	
0001EADE                            ; ===========================================================================
0001EADE                            
0001EADE                            Pri_BodyMain:	; Routine 2
0001EADE 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001EAE4 6700                       		beq.s	@chkopened
0001EAE6 323C 002B                  		move.w	#$2B,d1
0001EAEA 343C 0018                  		move.w	#$18,d2
0001EAEE 363C 0018                  		move.w	#$18,d3
0001EAF2 3828 0008                  		move.w	obX(a0),d4
0001EAF6 4EF9 0001 1DA4             		jmp	(SolidObject).l
0001EAFC                            ; ===========================================================================
0001EAFC                            
0001EAFC                            @chkopened:
0001EAFC 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001EB00 6700                       		beq.s	@open		; if yes, branch
0001EB02 4228 0025                  		clr.b	ob2ndRout(a0)
0001EB06 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EB0C 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EB12                            
0001EB12                            	@open:
0001EB12 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001EB18                            		
0001EB18                            	@rts:
0001EB18 4E75                       		rts
0001EB1A                            ; ===========================================================================
0001EB1A                            
0001EB1A                            Pri_Switched:	; Routine 4
0001EB1A 323C 0017                  		move.w	#$17,d1
0001EB1E 343C 0008                  		move.w	#8,d2
0001EB22 363C 0008                  		move.w	#8,d3
0001EB26 3828 0008                  		move.w	obX(a0),d4
0001EB2A 4EB9 0001 1DA4             		jsr	(SolidObject).l
0001EB30 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001EB36 4EB9 0000 C90E             		jsr	(AnimateSprite).l
0001EB3C 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001EB42 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001EB46 6700                       		beq.s	@open2		; if yes, branch
0001EB48                            
0001EB48 5068 000C                  		addq.w	#8,obY(a0)
0001EB4C 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001EB52 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001EB58 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001EB5C 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001EB60 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001EB66 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001EB6C 4228 0025                  		clr.b	ob2ndRout(a0)
0001EB70 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EB76 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EB7C 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001EB80 6700                       		beq.s	@open2
0001EB82 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001EB90                            
0001EB90                            	@open2:
0001EB90 4E75                       		rts	
0001EB92                            ; ===========================================================================
0001EB92                            
0001EB92                            Pri_Explosion:	; Routine 6, 8, $A
0001EB92 7007                       		moveq	#7,d0
0001EB94 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EB98 6600                       		bne.s	@noexplosion
0001EB9A 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001EBA0 6600                       		bne.s	@noexplosion
0001EBA2 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001EBA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EBAC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EBB2 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001EBB8 7200                       		moveq	#0,d1
0001EBBA 1200                       		move.b	d0,d1
0001EBBC E409                       		lsr.b	#2,d1
0001EBBE 0441 0020                  		subi.w	#$20,d1
0001EBC2 D369 0008                  		add.w	d1,obX(a1)
0001EBC6 E048                       		lsr.w	#8,d0
0001EBC8 E608                       		lsr.b	#3,d0
0001EBCA D169 000C                  		add.w	d0,obY(a1)
0001EBCE                            
0001EBCE                            	@noexplosion:
0001EBCE 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EBD2 6700                       		beq.s	@makeanimal
0001EBD4 4E75                       		rts	
0001EBD6                            ; ===========================================================================
0001EBD6                            
0001EBD6                            @makeanimal:
0001EBD6 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001EBDC 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001EBE2 117C 0006 001A             		move.b	#6,obFrame(a0)
0001EBE8 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001EBEE 0668 0020 000C             		addi.w	#$20,obY(a0)
0001EBF4 7C07                       		moveq	#7,d6
0001EBF6 3A3C 009A                  		move.w	#$9A,d5
0001EBFA 78E4                       		moveq	#-$1C,d4
0001EBFC                            
0001EBFC                            	@loop:
0001EBFC 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001EC02 6600                       		bne.s	@fail
0001EC04 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EC08 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EC0E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EC14 D969 0008                  		add.w	d4,obX(a1)
0001EC18 5E44                       		addq.w	#7,d4
0001EC1A 3345 0036                  		move.w	d5,$36(a1)
0001EC1E 5145                       		subq.w	#8,d5
0001EC20 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001EC24                            
0001EC24                            	@fail:
0001EC24 4E75                       		rts	
0001EC26                            ; ===========================================================================
0001EC26                            
0001EC26                            Pri_Animals:	; Routine $C
0001EC26 7007                       		moveq	#7,d0
0001EC28 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EC2C 6600                       		bne.s	@noanimal
0001EC2E 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001EC34 6600                       		bne.s	@noanimal
0001EC36 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EC3A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EC40 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EC46 4EB9 0000 3D02             		jsr	(RandomNumber).l
0001EC4C 0240 001F                  		andi.w	#$1F,d0
0001EC50 5D40                       		subq.w	#6,d0
0001EC52 4A41                       		tst.w	d1
0001EC54 6A00                       		bpl.s	@ispositive
0001EC56 4440                       		neg.w	d0
0001EC58                            
0001EC58                            	@ispositive:
0001EC58 D169 0008                  		add.w	d0,obX(a1)
0001EC5C 337C 000C 0036             		move.w	#$C,$36(a1)
0001EC62                            
0001EC62                            	@noanimal:
0001EC62 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EC66 6600                       		bne.s	@wait
0001EC68 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EC6C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001EC72                            
0001EC72                            	@wait:
0001EC72 4E75                       		rts	
0001EC74                            ; ===========================================================================
0001EC74                            
0001EC74                            Pri_EndAct:	; Routine $E
0001EC74 703E                       		moveq	#$3E,d0
0001EC76 7228                       		moveq	#id_Animals,d1
0001EC78 7440                       		moveq	#$40,d2
0001EC7A 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001EC7E                            
0001EC7E                            	@findanimal:
0001EC7E B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001EC80 6700                       		beq.s	@found		; if yes, branch
0001EC82 D2C2                       		adda.w	d2,a1		; next object RAM
0001EC84 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001EC88                            
0001EC88 4EB9 0001 10C6             		jsr	(GotThroughAct1).l
0001EC8E 4EF9 0000 F898             		jmp	(DeleteObject).l
0001EC94                            
0001EC94                            	@found:
0001EC94 4E75                       		rts	
0001EC94 4E75                       		rts	
0001EC96                            		include	"_anim\Prison Capsule.asm"
0001EC96                            ; ---------------------------------------------------------------------------
0001EC96                            ; Animation script - prison capsule
0001EC96                            ; ---------------------------------------------------------------------------
0001EC96 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001EC98 0000                       		dc.w @switchflash-Ani_Pri
0001EC9A 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001EC9E                            		even
0001EC9E                            		even
0001EC9E                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001EC9E                            ; ---------------------------------------------------------------------------
0001EC9E                            ; Sprite mappings - prison capsule
0001EC9E                            ; ---------------------------------------------------------------------------
0001EC9E                            Map_Pri_internal:
0001EC9E 0000                       		dc.w @capsule-Map_Pri_internal
0001ECA0 0000                       		dc.w @switch1-Map_Pri_internal
0001ECA2 0000                       		dc.w @broken-Map_Pri_internal
0001ECA4 0000                       		dc.w @switch2-Map_Pri_internal
0001ECA6 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001ECA8 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001ECAA 0000                       		dc.w @blank-Map_Pri_internal
0001ECAC 07                         @capsule:	dc.b 7
0001ECAD E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001ECB2 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001ECB7 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001ECBC F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001ECC1 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001ECC6 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001ECCB 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001ECD0 01                         @switch1:	dc.b 1
0001ECD1 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001ECD6 06                         @broken:	dc.b 6
0001ECD7 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001ECDC 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001ECE1 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001ECE6 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001ECEB 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001ECF0 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001ECF5 01                         @switch2:	dc.b 1
0001ECF6 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001ECFB 02                         @unusedthing1:	dc.b 2
0001ECFC E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001ED01 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001ED06 01                         @unusedthing2:	dc.b 1
0001ED07 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001ED0C 00                         @blank:		dc.b 0
0001ED0E 00                         		even
0001ED0E 00                         		even
0001ED0E                            
0001ED0E                            		include	"_incObj\sub ReactToItem.asm"
0001ED0E                            ; ---------------------------------------------------------------------------
0001ED0E                            ; Subroutine to react to obColType(a0)
0001ED0E                            ; ---------------------------------------------------------------------------
0001ED0E                            
0001ED0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED0E                            
0001ED0E                            
0001ED0E                            ReactToItem:
0001ED0E 4E71                       		nop	
0001ED10 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001ED14 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001ED18 5142                       		subq.w	#8,d2
0001ED1A 7A00                       		moveq	#0,d5
0001ED1C 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001ED20 5705                       		subq.b	#3,d5
0001ED22 9645                       		sub.w	d5,d3
0001ED24 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001ED2A 6600                       		bne.s	@notducking	; if not, branch
0001ED2C 0643 000C                  		addi.w	#$C,d3
0001ED30 7A0A                       		moveq	#$A,d5
0001ED32                            
0001ED32                            	@notducking:
0001ED32 383C 0010                  		move.w	#$10,d4
0001ED36 DA45                       		add.w	d5,d5
0001ED38 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001ED3C 3C3C 005F                  		move.w	#$5F,d6
0001ED40                            
0001ED40                            @loop:
0001ED40 4A29 0001                  		tst.b	obRender(a1)
0001ED44 6A00                       		bpl.s	@next
0001ED46 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001ED4A 6600                       		bne.s	@proximity	; if nonzero, branch
0001ED4C                            
0001ED4C                            	@next:
0001ED4C 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001ED50 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001ED54                            
0001ED54 7000                       		moveq	#0,d0
0001ED56 4E75                       		rts	
0001ED58                            ; ===========================================================================
0001ED58                            @sizes:		;   width, height
0001ED58 1414                       		dc.b  $14, $14		; $01
0001ED5A 0C14                       		dc.b   $C, $14		; $02
0001ED5C 140C                       		dc.b  $14,  $C		; $03
0001ED5E 0410                       		dc.b	4, $10		; $04
0001ED60 0C12                       		dc.b   $C, $12		; $05
0001ED62 1010                       		dc.b  $10, $10		; $06
0001ED64 0606                       		dc.b	6,   6		; $07
0001ED66 180C                       		dc.b  $18,  $C		; $08
0001ED68 0C10                       		dc.b   $C, $10		; $09
0001ED6A 100C                       		dc.b  $10,  $C		; $0A
0001ED6C 0808                       		dc.b	8,   8		; $0B
0001ED6E 1410                       		dc.b  $14, $10		; $0C
0001ED70 1408                       		dc.b  $14,   8		; $0D
0001ED72 0E0E                       		dc.b   $E,  $E		; $0E
0001ED74 1818                       		dc.b  $18, $18		; $0F
0001ED76 2810                       		dc.b  $28, $10		; $10
0001ED78 1018                       		dc.b  $10, $18		; $11
0001ED7A 0810                       		dc.b	8, $10		; $12
0001ED7C 2070                       		dc.b  $20, $70		; $13
0001ED7E 4020                       		dc.b  $40, $20		; $14
0001ED80 8020                       		dc.b  $80, $20		; $15
0001ED82 2020                       		dc.b  $20, $20		; $16
0001ED84 0808                       		dc.b	8,   8		; $17
0001ED86 0404                       		dc.b	4,   4		; $18
0001ED88 2008                       		dc.b  $20,   8		; $19
0001ED8A 0C0C                       		dc.b   $C,  $C		; $1A
0001ED8C 0804                       		dc.b	8,   4		; $1B
0001ED8E 1804                       		dc.b  $18,   4		; $1C
0001ED90 2804                       		dc.b  $28,   4		; $1D
0001ED92 0408                       		dc.b	4,   8		; $1E
0001ED94 0418                       		dc.b	4, $18		; $1F
0001ED96 0428                       		dc.b	4, $28		; $20
0001ED98 0420                       		dc.b	4, $20		; $21
0001ED9A 1818                       		dc.b  $18, $18		; $22
0001ED9C 0C18                       		dc.b   $C, $18		; $23
0001ED9E 4808                       		dc.b  $48,   8		; $24
0001EDA0                            ; ===========================================================================
0001EDA0                            
0001EDA0                            @proximity:
0001EDA0 0240 003F                  		andi.w	#$3F,d0
0001EDA4 D040                       		add.w	d0,d0
0001EDA6 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001EDAA 7200                       		moveq	#0,d1
0001EDAC 121A                       		move.b	(a2)+,d1
0001EDAE 3029 0008                  		move.w	obX(a1),d0
0001EDB2 9041                       		sub.w	d1,d0
0001EDB4 9042                       		sub.w	d2,d0
0001EDB6 6400                       		bcc.s	@outsidex	; branch if not touching
0001EDB8 D241                       		add.w	d1,d1
0001EDBA D041                       		add.w	d1,d0
0001EDBC 6500                       		bcs.s	@withinx	; branch if touching
0001EDBE 6000 FF8C                  		bra.w	@next
0001EDC2                            ; ===========================================================================
0001EDC2                            
0001EDC2                            @outsidex:
0001EDC2 B044                       		cmp.w	d4,d0
0001EDC4 6200 FF86                  		bhi.w	@next
0001EDC8                            
0001EDC8                            @withinx:
0001EDC8 7200                       		moveq	#0,d1
0001EDCA 121A                       		move.b	(a2)+,d1
0001EDCC 3029 000C                  		move.w	obY(a1),d0
0001EDD0 9041                       		sub.w	d1,d0
0001EDD2 9043                       		sub.w	d3,d0
0001EDD4 6400                       		bcc.s	@outsidey	; branch if not touching
0001EDD6 D241                       		add.w	d1,d1
0001EDD8 D240                       		add.w	d0,d1
0001EDDA 6500                       		bcs.s	@withiny	; branch if touching
0001EDDC 6000 FF6E                  		bra.w	@next
0001EDE0                            
0001EDE0                            ; ===========================================================================
0001EDE0                            
0001EDE0                            @outsidey:
0001EDE0 B045                       		cmp.w	d5,d0
0001EDE2 6200 FF68                  		bhi.w	@next
0001EDE6                            
0001EDE6                            @withiny:
0001EDE6                            	@chktype:
0001EDE6 1229 0020                          	move.b	obColType(a1),d1 ; load collision type
0001EDEA 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001EDEE 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001EDF2 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001EDF6 6700 0000                  		beq.w	React_Special	; if yes, branch
0001EDFA 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001EDFC 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001EE00                            
0001EE00                            ; obColType is $40-$7F (powerups)
0001EE00                            
0001EE00 1029 0020                  		move.b	obColType(a1),d0
0001EE04 0200 003F                  		andi.b	#$3F,d0
0001EE08 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001EE0C 6700                       		beq.s	React_Monitor	; if yes, branch
0001EE0E 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001EE14 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001EE18 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001EE1C                            
0001EE1C                            	@invincible:
0001EE1C 4E75                       		rts	
0001EE1E                            ; ===========================================================================
0001EE1E                            
0001EE1E                            React_Monitor:
0001EE1E 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001EE22 6A00                       		bpl.s	@movingdown	; if not, branch
0001EE24                            
0001EE24 3028 000C                  		move.w	obY(a0),d0
0001EE28 0440 0010                  		subi.w	#$10,d0
0001EE2C B069 000C                  		cmp.w	obY(a1),d0
0001EE30 6500                       		bcs.s	@donothing
0001EE32 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001EE36 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001EE3C 4A29 0025                  		tst.b	ob2ndRout(a1)
0001EE40 6600                       		bne.s	@donothing
0001EE42 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001EE46 4E75                       		rts	
0001EE48                            ; ===========================================================================
0001EE48                            
0001EE48                            @movingdown:
0001EE48 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001EE4E 6600                       		bne.s	@donothing
0001EE50 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001EE54 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001EE58 4EB9 0001 61C0             		jsr		BounceJD
0001EE5E                            
0001EE5E                            	@donothing:
0001EE5E 4E75                       		rts	
0001EE60                            ; ===========================================================================
0001EE60                            
0001EE60                            React_Enemy:
0001EE60 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EE64 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001EE66 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001EE6C 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001EE70 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001EE76 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001EE7A                            
0001EE7A                            	@donthurtsonic:
0001EE7A 4A29 0021                  		tst.b	obColProp(a1)
0001EE7E 6700                       		beq.s	breakenemy
0001EE80                            
0001EE80 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001EE84 4468 0012                  		neg.w	obVelY(a0)
0001EE88 E0E8 0010                  		asr	obVelX(a0)
0001EE8C E0E8 0012                  		asr	obVelY(a0)
0001EE90 137C 0000 0020             		move.b	#0,obColType(a1)
0001EE96 5329 0021                  		subq.b	#1,obColProp(a1)
0001EE9A 6600                       		bne.s	@flagnotclear
0001EE9C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EEA2                            
0001EEA2                            	@flagnotclear:
0001EEA2 4E75                       		rts	
0001EEA4                            ; ===========================================================================
0001EEA4                            
0001EEA4                            breakenemy:
0001EEA4 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EEAA 7000                       		moveq	#0,d0
0001EEAC 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001EEB0 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001EEB4 0C40 0006                  		cmpi.w	#6,d0
0001EEB8 6500                       		bcs.s	@bonusokay
0001EEBA 7006                       		moveq	#6,d0		; max bonus is lvl6
0001EEBC                            
0001EEBC                            	@bonusokay:
0001EEBC 3340 003E                  		move.w	d0,$3E(a1)
0001EEC0 303B 0000                  		move.w	@points(pc,d0.w),d0
0001EEC4 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001EECA 6500                       		bcs.s	@lessthan16	; if not, branch
0001EECC 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001EED0 337C 000A 003E             		move.w	#$A,$3E(a1)
0001EED6                            
0001EED6                            	@lessthan16:
0001EED6 6100 0000                  		bsr.w	AddPoints
0001EEDA 4EB9 0001 61C0             		jsr		BounceJD
0001EEE0 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001EEE4 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001EEEA 4A68 0012                  		tst.w	obVelY(a0)
0001EEEE 6B00                       		bmi.s	@bouncedown
0001EEF0 3028 000C                  		move.w	obY(a0),d0
0001EEF4 B069 000C                  		cmp.w	obY(a1),d0
0001EEF8 6400                       		bcc.s	@bounceup
0001EEFA 4468 0012                  		neg.w	obVelY(a0)
0001EEFE 4E75                       		rts	
0001EF00                            ; ===========================================================================
0001EF00                            
0001EF00                            	@bouncedown:
0001EF00 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001EF06 4E75                       		rts	
0001EF08                            
0001EF08                            	@bounceup:
0001EF08 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001EF0E 4E75                       		rts	
0001EF10                            
0001EF10 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001EF18                            
0001EF18                            ; ===========================================================================
0001EF18                            
0001EF18                            React_Caterkiller:
0001EF18 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EF1E                            
0001EF1E                            React_ChkHurt:
0001EF1E 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EF22 6700                       		beq.s	notinvincible	; if not, branch
0001EF24                            
0001EF24                            	isflashing:
0001EF24 70FF                       		moveq	#-1,d0
0001EF26 4E75                       		rts	
0001EF28                            ; ===========================================================================
0001EF28                            
0001EF28                            	notinvincible:
0001EF28 4E71                       		nop	
0001EF2A 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001EF2E 66F4                       		bne.s	isflashing	; if yes, branch
0001EF30 2449                       		movea.l	a1,a2
0001EF32                            
0001EF32                            ; End of function ReactToItem
0001EF32                            ; continue straight to HurtSonic
0001EF32                            
0001EF32                            ; ---------------------------------------------------------------------------
0001EF32                            ; Hurting Sonic	subroutine
0001EF32                            ; ---------------------------------------------------------------------------
0001EF32                            
0001EF32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF32                            
0001EF32                            
0001EF32                            HurtSonic:
0001EF32 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001EF36 6600                       		bne.s	@hasshield	; if yes, branch
0001EF38 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001EF3C 6600                       		bne.s	@hasshield	; if yes, branch
0001EF3E 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001EF42 6600                       		bne.s	@hasshield	; if yes, branch
0001EF44 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001EF48 6600                       		bne.s	@hasshield	; if yes, branch
0001EF4A 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001EF4E 6700 0000                  		beq.w	@norings	; if not, branch
0001EF52                            
0001EF52 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
0001EF58 6600                       		bne.s	@hasshield
0001EF5A 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001EF5E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EF64 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EF6A                            
0001EF6A                            	@hasshield:
0001EF6A 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001EF70 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001EF72 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001EF76 6700 FFAC                  		beq.w	isflashing
0001EF7A 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001EF7E 6700 FFA4                  		beq.w	isflashing
0001EF82                            
0001EF82                            	@hasrshield:
0001EF82 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001EF88 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001EF8A 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001EF8E 6700 FF94                  		beq.w 	isflashing
0001EF92 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001EF96 6700 FF8C                  		beq.w 	isflashing
0001EF9A 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001EF9E 6700 FF84                  		beq.w 	isflashing
0001EFA2 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001EFA6 6700 FF7C                  		beq.w 	isflashing
0001EFAA 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001EFAE 6700 FF74                  		beq.w 	isflashing
0001EFB2 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001EFB6 6700 FF6C                  		beq.w 	isflashing
0001EFBA 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001EFBE 6700 FF64                  		beq.w 	isflashing
0001EFC2 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001EFC6 6700 FF5C                  		beq.w 	isflashing
0001EFCA                            
0001EFCA                            	@hasspshield:
0001EFCA 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001EFD0 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001EFD4 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001EFD8 6700 FF4A                  		beq.w 	isflashing
0001EFDC 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001EFE0 6700 FF42                  		beq.w 	isflashing
0001EFE4 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001EFE8 6700 FF3A                  		beq.w 	isflashing
0001EFEC 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001EFF0 6700 FF32                  		beq.w 	isflashing
0001EFF4 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001EFF8 6700 FF2A                  		beq.w 	isflashing
0001EFFC 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001F000 6700 FF22                  		beq.w 	isflashing
0001F004 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001F008 6700 FF1A                  		beq.w 	isflashing
0001F00C 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001F010 6700 FF12                  		beq.w 	isflashing
0001F014 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001F018 6700 FF0A                  		beq.w 	isflashing
0001F01C 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001F020 6700 FF02                  		beq.w 	isflashing
0001F024                            
0001F024 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001F028 6700 FE7A                  		beq.w 	breakenemy
0001F02C 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001F030 6700 FE72                  		beq.w 	breakenemy
0001F034 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001F038 6700 FE6A                  		beq.w 	breakenemy
0001F03C 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001F040 6700 FEE2                  		beq.w 	isflashing
0001F044 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001F048 6700 FE5A                  		beq.w 	breakenemy
0001F04C                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001F04C                            		;beq.w 	breakenemy
0001F04C 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001F050 6700 FE52                  		beq.w 	breakenemy
0001F054 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001F058 6700 FE4A                  		beq.w 	breakenemy
0001F05C                            
0001F05C                            	@hurtcont:
0001F05C 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001F062                            		;move.b	#0,(v_gshield).w	; remove g shield
0001F062 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001F068                            		
0001F068 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001F06E 6700                       		beq.s	@gshieldcheck	;if not, branch
0001F070 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001F074                            		
0001F074                            	@gshieldcheck:
0001F074 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001F07A 6700                       		beq.s	@hurtcont2			;if not, branch
0001F07C 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001F080                            		
0001F080                            	@hurtcont2:
0001F080 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001F086 4EB9 0001 6868             		jsr		Sonic_ResetOnFloor
0001F08C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F092 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001F098 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001F09E 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001F0A4 6700                       		beq.s	@isdry		; if not, branch
0001F0A6                            
0001F0A6 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001F0AC 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001F0B2                            
0001F0B2                            	@isdry:
0001F0B2 3028 0008                  		move.w	obX(a0),d0
0001F0B6 B06A 0008                  		cmp.w	obX(a2),d0
0001F0BA 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001F0BC 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001F0C0                            
0001F0C0                            	@isleft:
0001F0C0 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001F0C6 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001F0CC 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001F0D2 317C 0120 0030             		move.w	#$120,$30(a0)
0001F0D8 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001F0DC 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F0DE 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001F0E2 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F0E4 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F0EA 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001F0F0 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F0F6 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F0FA 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F0FE 6600                       		bne.s	@sound		; if not, branch
0001F100 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F104 6600                       		bne.s	@sound		; if not, branch
0001F106 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F10A                            
0001F10A                            	@sound:
0001F10A 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001F110 70FF                       		moveq	#-1,d0
0001F112 4E75                       		rts	
0001F114                            
0001F114                            	@hurtelec:
0001F114 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001F11A 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F120 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F124 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F128 66E0                       		bne.s	@sound		; if not, branch
0001F12A 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F12E 66DA                       		bne.s	@sound		; if not, branch
0001F130 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F134                            ; ===========================================================================
0001F134                            
0001F134                            @norings:
0001F134 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001F138 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001F13C                            
0001F13C                            ; ---------------------------------------------------------------------------
0001F13C                            ; Subroutine to	kill Sonic
0001F13C                            ; ---------------------------------------------------------------------------
0001F13C                            
0001F13C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F13C                            
0001F13C                            
0001F13C                            KillSonic:
0001F13C 11FC 0002 F5D8             		move.b    #2,(Super_Sonic_palette).w; Remove rotating palette
0001F142 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001F146 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001F14A 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001F14E 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001F154 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001F15A 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001F160 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001F166 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001F16C 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001F172 4EB9 0001 6868             		jsr		Sonic_ResetOnFloor
0001F178 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F17E 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001F184 317C 0000 0010             		move.w	#0,obVelX(a0)
0001F18A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F190 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001F196 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001F19A 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001F19C 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001F1A0 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001F1A2 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001F1A8 08E8 0007 0002             		bset	#7,obGfx(a0)
0001F1AE 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001F1B2 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001F1B6 6600                       		bne.s	@sound
0001F1B8 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001F1BC                            
0001F1BC                            	@sound:
0001F1BC 4EB9 0000 12FE             		jsr	(PlaySound_Special).l
0001F1C2                            
0001F1C2                            	@dontdie:
0001F1C2 70FF                       		moveq	#-1,d0
0001F1C4 4E75                       		rts	
0001F1C6                            ; End of function KillSonic
0001F1C6                            Kill_Lava:	
0001F1C6 08E8 0007 0002             	bset	#7,obGfx(a0)
0001F1CC 117C 0016 001C             	move.b	#$16,$1C(a0)
0001F1D2 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001F1D6 4EB9 0000 12FE                 jsr		(PlaySound_Special).l
0001F1DC                            
0001F1DC                            
0001F1DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1DC                            
0001F1DC                            
0001F1DC                            React_Special:
0001F1DC 1229 0020                  		move.b	obColType(a1),d1
0001F1E0 0201 003F                  		andi.b	#$3F,d1
0001F1E4 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001F1E8 6700                       		beq.s	@caterkiller	; if yes, branch
0001F1EA 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001F1EE 6700                       		beq.s	@yadrin		; if yes, branch
0001F1F0 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001F1F4 6700                       		beq.s	@D7orE1		; if yes, branch
0001F1F6 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001F1FA 6700                       		beq.s	@D7orE1		; if yes, branch
0001F1FC 4E75                       		rts	
0001F1FE                            ; ===========================================================================
0001F1FE                            
0001F1FE                            @caterkiller:
0001F1FE 6000 FD18                  		bra.w	React_Caterkiller
0001F202                            ; ===========================================================================
0001F202                            
0001F202                            @yadrin:
0001F202 9A40                       		sub.w	d0,d5
0001F204 0C45 0008                  		cmpi.w	#8,d5
0001F208 6400                       		bcc.s	@normalenemy
0001F20A 3029 0008                  		move.w	obX(a1),d0
0001F20E 5940                       		subq.w	#4,d0
0001F210 0829 0000 0022             		btst	#0,obStatus(a1)
0001F216 6700                       		beq.s	@noflip
0001F218 0440 0010                  		subi.w	#$10,d0
0001F21C                            
0001F21C                            	@noflip:
0001F21C 9042                       		sub.w	d2,d0
0001F21E 6400                       		bcc.s	@loc_1B13C
0001F220 0640 0018                  		addi.w	#$18,d0
0001F224 6500                       		bcs.s	@loc_1B140
0001F226 6000                       		bra.s	@normalenemy
0001F228                            ; ===========================================================================
0001F228                            
0001F228                            	@loc_1B13C:
0001F228 B044                       		cmp.w	d4,d0
0001F22A 6200                       		bhi.s	@normalenemy
0001F22C                            
0001F22C                            	@loc_1B140:
0001F22C 6000 FCF0                  		bra.w	React_ChkHurt
0001F230                            ; ===========================================================================
0001F230                            
0001F230                            	@normalenemy:
0001F230 6000 FC2E                  		bra.w	React_Enemy
0001F234                            ; ===========================================================================
0001F234                            
0001F234                            @D7orE1:
0001F234 5229 0021                  		addq.b	#1,obColProp(a1)
0001F238 4E75                       		rts	
0001F23A                            ; End of function React_Special
0001F23A                            
0001F23A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F23A                            
0001F23A                            React_ChkWaterTag:
0001F23A 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F240 6600 0000                  		bne	NotWaterTag
0001F244 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001F24A                            	NotWaterTag:
0001F24A 4E75                       		rts
0001F24C                            
0001F24C                            React_WaterTag:
0001F24C 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F252 6700 0000                  		beq	SkipWaterTag
0001F256 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001F25C                            	SkipWaterTag:
0001F25C 4E75                       		rts
0001F25C 4E75                       		rts
0001F25E                            
0001F25E                            ; ---------------------------------------------------------------------------
0001F25E                            ; Subroutine to	show the special stage layout
0001F25E                            ; ---------------------------------------------------------------------------
0001F25E                            
0001F25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F25E                            
0001F25E                            
0001F25E                            SS_ShowLayout:
0001F25E 6100 0000                  		bsr.w	SS_AniWallsRings
0001F262 6100 0000                  		bsr.w	SS_AniItems
0001F266 3F05                       		move.w	d5,-(sp)
0001F268 43F8 8000                  		lea	($FFFF8000).w,a1
0001F26C 1038 F780                  		move.b	(v_ssangle).w,d0
0001F270 0200 00FC                  		andi.b	#$FC,d0
0001F274 4EB9 0000 3D28             		jsr	(CalcSine).l
0001F27A 3800                       		move.w	d0,d4
0001F27C 3A01                       		move.w	d1,d5
0001F27E C9FC 0018                  		muls.w	#$18,d4
0001F282 CBFC 0018                  		muls.w	#$18,d5
0001F286 7400                       		moveq	#0,d2
0001F288 3438 F700                  		move.w	(v_screenposx).w,d2
0001F28C 84FC 0018                  		divu.w	#$18,d2
0001F290 4842                       		swap	d2
0001F292 4442                       		neg.w	d2
0001F294 0642 FF4C                  		addi.w	#-$B4,d2
0001F298 7600                       		moveq	#0,d3
0001F29A 3638 F704                  		move.w	(v_screenposy).w,d3
0001F29E 86FC 0018                  		divu.w	#$18,d3
0001F2A2 4843                       		swap	d3
0001F2A4 4443                       		neg.w	d3
0001F2A6 0643 FF4C                  		addi.w	#-$B4,d3
0001F2AA 3E3C 000F                  		move.w	#$F,d7
0001F2AE                            
0001F2AE                            loc_1B19E:
0001F2AE 48A7 E000                  		movem.w	d0-d2,-(sp)
0001F2B2 48A7 C000                  		movem.w	d0-d1,-(sp)
0001F2B6 4440                       		neg.w	d0
0001F2B8 C3C2                       		muls.w	d2,d1
0001F2BA C1C3                       		muls.w	d3,d0
0001F2BC 2C00                       		move.l	d0,d6
0001F2BE DC81                       		add.l	d1,d6
0001F2C0 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001F2C4 C1C2                       		muls.w	d2,d0
0001F2C6 C3C3                       		muls.w	d3,d1
0001F2C8 D280                       		add.l	d0,d1
0001F2CA 2406                       		move.l	d6,d2
0001F2CC 3C3C 000F                  		move.w	#$F,d6
0001F2D0                            
0001F2D0                            loc_1B1C0:
0001F2D0 2002                       		move.l	d2,d0
0001F2D2 E080                       		asr.l	#8,d0
0001F2D4 32C0                       		move.w	d0,(a1)+
0001F2D6 2001                       		move.l	d1,d0
0001F2D8 E080                       		asr.l	#8,d0
0001F2DA 32C0                       		move.w	d0,(a1)+
0001F2DC D485                       		add.l	d5,d2
0001F2DE D284                       		add.l	d4,d1
0001F2E0 51CE FFEE                  		dbf	d6,loc_1B1C0
0001F2E4                            
0001F2E4 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001F2E8 0643 0018                  		addi.w	#$18,d3
0001F2EC 51CF FFC0                  		dbf	d7,loc_1B19E
0001F2F0                            
0001F2F0 3A1F                       		move.w	(sp)+,d5
0001F2F2 41F9 00FF 0000             		lea	($FF0000).l,a0
0001F2F8 7000                       		moveq	#0,d0
0001F2FA 3038 F704                  		move.w	(v_screenposy).w,d0
0001F2FE 80FC 0018                  		divu.w	#$18,d0
0001F302 C0FC 0080                  		mulu.w	#$80,d0
0001F306 D1C0                       		adda.l	d0,a0
0001F308 7000                       		moveq	#0,d0
0001F30A 3038 F700                  		move.w	(v_screenposx).w,d0
0001F30E 80FC 0018                  		divu.w	#$18,d0
0001F312 D0C0                       		adda.w	d0,a0
0001F314 49F8 8000                  		lea	($FFFF8000).w,a4
0001F318 3E3C 000F                  		move.w	#$F,d7
0001F31C                            
0001F31C                            loc_1B20C:
0001F31C 3C3C 000F                  		move.w	#$F,d6
0001F320                            
0001F320                            loc_1B210:
0001F320 7000                       		moveq	#0,d0
0001F322 1018                       		move.b	(a0)+,d0
0001F324 6700                       		beq.s	loc_1B268
0001F326 0C00 004E                  		cmpi.b	#$4E,d0
0001F32A 6200                       		bhi.s	loc_1B268
0001F32C 3614                       		move.w	(a4),d3
0001F32E 0643 0120                  		addi.w	#$120,d3
0001F332 0C43 0070                  		cmpi.w	#$70,d3
0001F336 6500                       		blo.s	loc_1B268
0001F338 0C43 01D0                  		cmpi.w	#$1D0,d3
0001F33C 6400                       		bhs.s	loc_1B268
0001F33E 342C 0002                  		move.w	2(a4),d2
0001F342 0642 00F0                  		addi.w	#$F0,d2
0001F346 0C42 0070                  		cmpi.w	#$70,d2
0001F34A 6500                       		blo.s	loc_1B268
0001F34C 0C42 0170                  		cmpi.w	#$170,d2
0001F350 6400                       		bhs.s	loc_1B268
0001F352 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001F358 E748                       		lsl.w	#3,d0
0001F35A 4BF5 0000                  		lea	(a5,d0.w),a5
0001F35E 225D                       		movea.l	(a5)+,a1
0001F360 321D                       		move.w	(a5)+,d1
0001F362 D241                       		add.w	d1,d1
0001F364 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001F368 365D                       		movea.w	(a5)+,a3
0001F36A 7200                       		moveq	#0,d1
0001F36C 1219                       		move.b	(a1)+,d1
0001F36E 5301                       		subq.b	#1,d1
0001F370 6B00                       		bmi.s	loc_1B268
0001F372 4EB9 0000 FACA             		jsr	(sub_D762).l
0001F378                            
0001F378                            loc_1B268:
0001F378 584C                       		addq.w	#4,a4
0001F37A 51CE FFA4                  		dbf	d6,loc_1B210
0001F37E                            
0001F37E 41E8 0070                  		lea	$70(a0),a0
0001F382 51CF FF98                  		dbf	d7,loc_1B20C
0001F386                            
0001F386 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001F38A 0C05 0050                  		cmpi.b	#$50,d5
0001F38E 6700                       		beq.s	loc_1B288
0001F390 24BC 0000 0000             		move.l	#0,(a2)
0001F396 4E75                       		rts	
0001F398                            ; ===========================================================================
0001F398                            
0001F398                            loc_1B288:
0001F398 157C 0000 FFFB             		move.b	#0,-5(a2)
0001F39E 4E75                       		rts	
0001F3A0                            ; End of function SS_ShowLayout
0001F3A0                            
0001F3A0                            ; ---------------------------------------------------------------------------
0001F3A0                            ; Subroutine to	animate	walls and rings	in the special stage
0001F3A0                            ; ---------------------------------------------------------------------------
0001F3A0                            
0001F3A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F3A0                            
0001F3A0                            
0001F3A0                            SS_AniWallsRings:
0001F3A0 43F9 00FF 400C             		lea	($FF400C).l,a1
0001F3A6 7000                       		moveq	#0,d0
0001F3A8 1038 F780                  		move.b	(v_ssangle).w,d0
0001F3AC E408                       		lsr.b	#2,d0
0001F3AE 0240 000F                  		andi.w	#$F,d0
0001F3B2 7223                       		moveq	#$23,d1
0001F3B4                            
0001F3B4                            loc_1B2A4:
0001F3B4 3280                       		move.w	d0,(a1)
0001F3B6 5049                       		addq.w	#8,a1
0001F3B8 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001F3BC                            
0001F3BC 43F9 00FF 4005             		lea	($FF4005).l,a1
0001F3C2 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001F3C6 6A00                       		bpl.s	loc_1B2C8
0001F3C8 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001F3CE 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001F3D2 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001F3D8                            
0001F3D8                            loc_1B2C8:
0001F3D8 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001F3DE 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001F3E2 6A00                       		bpl.s	loc_1B2E4
0001F3E4 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001F3EA 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001F3EE 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001F3F4                            
0001F3F4                            loc_1B2E4:
0001F3F4 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001F3F8 1340 0138                  		move.b	d0,$138(a1)
0001F3FC 1340 0160                  		move.b	d0,$160(a1)
0001F400 1340 0148                  		move.b	d0,$148(a1)
0001F404 1340 0150                  		move.b	d0,$150(a1)
0001F408 1340 01D8                  		move.b	d0,$1D8(a1)
0001F40C 1340 01E0                  		move.b	d0,$1E0(a1)
0001F410 1340 01E8                  		move.b	d0,$1E8(a1)
0001F414 1340 01F0                  		move.b	d0,$1F0(a1)
0001F418 1340 01F8                  		move.b	d0,$1F8(a1)
0001F41C 1340 0200                  		move.b	d0,$200(a1)
0001F420 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001F424 6A00                       		bpl.s	loc_1B326
0001F426 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001F42C 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001F430 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001F436                            
0001F436                            loc_1B326:
0001F436 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001F43A 1340 0168                  		move.b	d0,$168(a1)
0001F43E 1340 0170                  		move.b	d0,$170(a1)
0001F442 1340 0178                  		move.b	d0,$178(a1)
0001F446 1340 0180                  		move.b	d0,$180(a1)
0001F44A 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001F44E 6A00                       		bpl.s	loc_1B350
0001F450 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001F456 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001F45A 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001F460                            
0001F460                            loc_1B350:
0001F460 43F9 00FF 4016             		lea	($FF4016).l,a1
0001F466 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001F46C 7000                       		moveq	#0,d0
0001F46E 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001F472 D040                       		add.w	d0,d0
0001F474 41F0 0000                  		lea	(a0,d0.w),a0
0001F478 3290                       		move.w	(a0),(a1)
0001F47A 3368 0002 0008             		move.w	2(a0),8(a1)
0001F480 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F486 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F48C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F492 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F498 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F49E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F4A4 D0FC 0020                  		adda.w	#$20,a0
0001F4A8 D2FC 0048                  		adda.w	#$48,a1
0001F4AC 3290                       		move.w	(a0),(a1)
0001F4AE 3368 0002 0008             		move.w	2(a0),8(a1)
0001F4B4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F4BA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F4C0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F4C6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F4CC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F4D2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F4D8 D0FC 0020                  		adda.w	#$20,a0
0001F4DC D2FC 0048                  		adda.w	#$48,a1
0001F4E0 3290                       		move.w	(a0),(a1)
0001F4E2 3368 0002 0008             		move.w	2(a0),8(a1)
0001F4E8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F4EE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F4F4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F4FA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F500 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F506 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F50C D0FC 0020                  		adda.w	#$20,a0
0001F510 D2FC 0048                  		adda.w	#$48,a1
0001F514 3290                       		move.w	(a0),(a1)
0001F516 3368 0002 0008             		move.w	2(a0),8(a1)
0001F51C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F522 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F528 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F52E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F534 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F53A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F540 D0FC 0020                  		adda.w	#$20,a0
0001F544 D2FC 0048                  		adda.w	#$48,a1
0001F548 4E75                       		rts	
0001F54A                            ; End of function SS_AniWallsRings
0001F54A                            
0001F54A                            ; ===========================================================================
0001F54A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F55A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F56A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F57A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F58A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F59A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F5AA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F5BA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F5CA                            ; ---------------------------------------------------------------------------
0001F5CA                            ; Subroutine to	remove items when you collect them in the special stage
0001F5CA                            ; ---------------------------------------------------------------------------
0001F5CA                            
0001F5CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F5CA                            
0001F5CA                            
0001F5CA                            SS_RemoveCollectedItem:
0001F5CA 45F9 00FF 4400             		lea	($FF4400).l,a2
0001F5D0 303C 001F                  		move.w	#$1F,d0
0001F5D4                            
0001F5D4                            loc_1B4C4:
0001F5D4 4A12                       		tst.b	(a2)
0001F5D6 6700                       		beq.s	locret_1B4CE
0001F5D8 504A                       		addq.w	#8,a2
0001F5DA 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001F5DE                            
0001F5DE                            locret_1B4CE:
0001F5DE 4E75                       		rts	
0001F5E0                            ; End of function SS_RemoveCollectedItem
0001F5E0                            
0001F5E0                            ; ---------------------------------------------------------------------------
0001F5E0                            ; Subroutine to	animate	special	stage items when you touch them
0001F5E0                            ; ---------------------------------------------------------------------------
0001F5E0                            
0001F5E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F5E0                            
0001F5E0                            
0001F5E0                            SS_AniItems:
0001F5E0 41F9 00FF 4400             		lea	($FF4400).l,a0
0001F5E6 3E3C 001F                  		move.w	#$1F,d7
0001F5EA                            
0001F5EA                            loc_1B4DA:
0001F5EA 7000                       		moveq	#0,d0
0001F5EC 1010                       		move.b	(a0),d0
0001F5EE 6700                       		beq.s	loc_1B4E8
0001F5F0 E548                       		lsl.w	#2,d0
0001F5F2 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001F5F6 4E91                       		jsr	(a1)
0001F5F8                            
0001F5F8                            loc_1B4E8:
0001F5F8 5048                       		addq.w	#8,a0
0001F5FA                            
0001F5FA                            loc_1B4EA:
0001F5FA 51CF FFEE                  		dbf	d7,loc_1B4DA
0001F5FE                            
0001F5FE 4E75                       		rts	
0001F600                            ; End of function SS_AniItems
0001F600                            
0001F600                            ; ===========================================================================
0001F600 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001F604 0000 0000                  		dc.l SS_AniBumper
0001F608 0000 0000                  		dc.l SS_Ani1Up
0001F60C 0000 0000                  		dc.l SS_AniReverse
0001F610 0000 0000                  		dc.l SS_AniEmeraldSparks
0001F614 0000 0000                  		dc.l SS_AniGlassBlock
0001F618                            ; ===========================================================================
0001F618                            
0001F618                            SS_AniRingSparks:
0001F618 5328 0002                  		subq.b	#1,2(a0)
0001F61C 6A00                       		bpl.s	locret_1B530
0001F61E 117C 0005 0002             		move.b	#5,2(a0)
0001F624 7000                       		moveq	#0,d0
0001F626 1028 0003                  		move.b	3(a0),d0
0001F62A 5228 0003                  		addq.b	#1,3(a0)
0001F62E 2268 0004                  		movea.l	4(a0),a1
0001F632 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001F636 1280                       		move.b	d0,(a1)
0001F638 6600                       		bne.s	locret_1B530
0001F63A 4290                       		clr.l	(a0)
0001F63C 42A8 0004                  		clr.l	4(a0)
0001F640                            
0001F640                            locret_1B530:
0001F640 4E75                       		rts	
0001F642                            ; ===========================================================================
0001F642 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001F648                            ; ===========================================================================
0001F648                            
0001F648                            SS_AniBumper:
0001F648 5328 0002                  		subq.b	#1,2(a0)
0001F64C 6A00                       		bpl.s	locret_1B566
0001F64E 117C 0007 0002             		move.b	#7,2(a0)
0001F654 7000                       		moveq	#0,d0
0001F656 1028 0003                  		move.b	3(a0),d0
0001F65A 5228 0003                  		addq.b	#1,3(a0)
0001F65E 2268 0004                  		movea.l	4(a0),a1
0001F662 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001F666 6600                       		bne.s	loc_1B564
0001F668 4290                       		clr.l	(a0)
0001F66A 42A8 0004                  		clr.l	4(a0)
0001F66E 12BC 0025                  		move.b	#$25,(a1)
0001F672 4E75                       		rts	
0001F674                            ; ===========================================================================
0001F674                            
0001F674                            loc_1B564:
0001F674 1280                       		move.b	d0,(a1)
0001F676                            
0001F676                            locret_1B566:
0001F676 4E75                       		rts	
0001F678                            ; ===========================================================================
0001F678 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001F67E                            ; ===========================================================================
0001F67E                            
0001F67E                            SS_Ani1Up:
0001F67E 5328 0002                  		subq.b	#1,2(a0)
0001F682 6A00                       		bpl.s	locret_1B596
0001F684 117C 0005 0002             		move.b	#5,2(a0)
0001F68A 7000                       		moveq	#0,d0
0001F68C 1028 0003                  		move.b	3(a0),d0
0001F690 5228 0003                  		addq.b	#1,3(a0)
0001F694 2268 0004                  		movea.l	4(a0),a1
0001F698 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001F69C 1280                       		move.b	d0,(a1)
0001F69E 6600                       		bne.s	locret_1B596
0001F6A0 4290                       		clr.l	(a0)
0001F6A2 42A8 0004                  		clr.l	4(a0)
0001F6A6                            
0001F6A6                            locret_1B596:
0001F6A6 4E75                       		rts	
0001F6A8                            ; ===========================================================================
0001F6A8 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001F6AE                            ; ===========================================================================
0001F6AE                            
0001F6AE                            SS_AniReverse:
0001F6AE 5328 0002                  		subq.b	#1,2(a0)
0001F6B2 6A00                       		bpl.s	locret_1B5CC
0001F6B4 117C 0007 0002             		move.b	#7,2(a0)
0001F6BA 7000                       		moveq	#0,d0
0001F6BC 1028 0003                  		move.b	3(a0),d0
0001F6C0 5228 0003                  		addq.b	#1,3(a0)
0001F6C4 2268 0004                  		movea.l	4(a0),a1
0001F6C8 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001F6CC 6600                       		bne.s	loc_1B5CA
0001F6CE 4290                       		clr.l	(a0)
0001F6D0 42A8 0004                  		clr.l	4(a0)
0001F6D4 12BC 002B                  		move.b	#$2B,(a1)
0001F6D8 4E75                       		rts	
0001F6DA                            ; ===========================================================================
0001F6DA                            
0001F6DA                            loc_1B5CA:
0001F6DA 1280                       		move.b	d0,(a1)
0001F6DC                            
0001F6DC                            locret_1B5CC:
0001F6DC 4E75                       		rts	
0001F6DE                            ; ===========================================================================
0001F6DE 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001F6E4                            ; ===========================================================================
0001F6E4                            
0001F6E4                            SS_AniEmeraldSparks:
0001F6E4 5328 0002                  		subq.b	#1,2(a0)
0001F6E8 6A00                       		bpl.s	locret_1B60C
0001F6EA 117C 0005 0002             		move.b	#5,2(a0)
0001F6F0 7000                       		moveq	#0,d0
0001F6F2 1028 0003                  		move.b	3(a0),d0
0001F6F6 5228 0003                  		addq.b	#1,3(a0)
0001F6FA 2268 0004                  		movea.l	4(a0),a1
0001F6FE 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001F702 1280                       		move.b	d0,(a1)
0001F704 6600                       		bne.s	locret_1B60C
0001F706 4290                       		clr.l	(a0)
0001F708 42A8 0004                  		clr.l	4(a0)
0001F70C 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001F71C                            
0001F71C                            locret_1B60C:
0001F71C 4E75                       		rts	
0001F71E                            ; ===========================================================================
0001F71E 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001F724                            ; ===========================================================================
0001F724                            
0001F724                            SS_AniGlassBlock:
0001F724 5328 0002                  		subq.b	#1,2(a0)
0001F728 6A00                       		bpl.s	locret_1B640
0001F72A 117C 0001 0002             		move.b	#1,2(a0)
0001F730 7000                       		moveq	#0,d0
0001F732 1028 0003                  		move.b	3(a0),d0
0001F736 5228 0003                  		addq.b	#1,3(a0)
0001F73A 2268 0004                  		movea.l	4(a0),a1
0001F73E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001F742 1280                       		move.b	d0,(a1)
0001F744 6600                       		bne.s	locret_1B640
0001F746 12A8 0004                  		move.b	4(a0),(a1)
0001F74A 4290                       		clr.l	(a0)
0001F74C 42A8 0004                  		clr.l	4(a0)
0001F750                            
0001F750                            locret_1B640:
0001F750 4E75                       		rts	
0001F752                            ; ===========================================================================
0001F752 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001F75C                            
0001F75C                            ; ---------------------------------------------------------------------------
0001F75C                            ; Special stage	layout pointers
0001F75C                            ; ---------------------------------------------------------------------------
0001F75C                            SS_LayoutIndex:
0001F75C 0000 0000                  		dc.l SS_1
0001F760 0000 0000                  		dc.l SS_2
0001F764 0000 0000                  		dc.l SS_3
0001F768 0000 0000                  		dc.l SS_4
0001F76C 0000 0000                  		dc.l SS_5
0001F770 0000 0000                  		dc.l SS_6
0001F774                            		even
0001F774                            
0001F774                            ; ---------------------------------------------------------------------------
0001F774                            ; Special stage start locations
0001F774                            ; ---------------------------------------------------------------------------
0001F774                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001F774                            ; ---------------------------------------------------------------------------
0001F774                            ; Special stage start locations
0001F774                            ; ---------------------------------------------------------------------------
0001F774                            
0001F774                            		incbin	"startpos\ss1.bin"
0001F778                            		incbin	"startpos\ss2.bin"
0001F77C                            		incbin	"startpos\ss3.bin"
0001F780                            		incbin	"startpos\ss4.bin"
0001F784                            		incbin	"startpos\ss5.bin"
0001F788                            		incbin	"startpos\ss6.bin"
0001F78C                            		even
0001F78C                            		even
0001F78C                            
0001F78C                            ; ---------------------------------------------------------------------------
0001F78C                            ; Subroutine to	load special stage layout
0001F78C                            ; ---------------------------------------------------------------------------
0001F78C                            
0001F78C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F78C                            
0001F78C                            
0001F78C                            SS_Load:
0001F78C 7000                       		moveq	#0,d0
0001F78E 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001F792 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001F796 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001F79C 6500                       		blo.s	SS_ChkEmldNum
0001F79E 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001F7A4                            
0001F7A4                            SS_ChkEmldNum:
0001F7A4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001F7AA 6700                       		beq.s	SS_LoadData	; if yes, branch
0001F7AC 7200                       		moveq	#0,d1
0001F7AE 1238 FE57                  		move.b	(v_emeralds).w,d1
0001F7B2 5301                       		subq.b	#1,d1
0001F7B4 6500                       		blo.s	SS_LoadData
0001F7B6 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001F7BA                            
0001F7BA                            SS_ChkEmldLoop:	
0001F7BA B033 1000                  		cmp.b	(a3,d1.w),d0
0001F7BE 6600                       		bne.s	SS_ChkEmldRepeat
0001F7C0 60CA                       		bra.s	SS_Load
0001F7C2                            ; ===========================================================================
0001F7C2                            
0001F7C2                            SS_ChkEmldRepeat:
0001F7C2 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001F7C6                            
0001F7C6                            SS_LoadData:
0001F7C6 E548                       		lsl.w	#2,d0
0001F7C8 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001F7CC 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001F7D0 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001F7D4 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001F7D8 43F9 00FF 4000             		lea	($FF4000).l,a1
0001F7DE 303C 0000                  		move.w	#0,d0
0001F7E2 4EB9 0000 1936             		jsr	(EniDec).l
0001F7E8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F7EE 303C 0FFF                  		move.w	#$FFF,d0
0001F7F2                            
0001F7F2                            SS_ClrRAM3:
0001F7F2 4299                       		clr.l	(a1)+
0001F7F4 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001F7F8                            
0001F7F8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F7FE 41F9 00FF 4000             		lea	($FF4000).l,a0
0001F804 723F                       		moveq	#$3F,d1
0001F806                            
0001F806                            loc_1B6F6:
0001F806 743F                       		moveq	#$3F,d2
0001F808                            
0001F808                            loc_1B6F8:
0001F808 12D8                       		move.b	(a0)+,(a1)+
0001F80A 51CA FFFC                  		dbf	d2,loc_1B6F8
0001F80E                            
0001F80E 43E9 0040                  		lea	$40(a1),a1
0001F812 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001F816                            
0001F816 43F9 00FF 4008             		lea	($FF4008).l,a1
0001F81C 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001F822 724D                       		moveq	#$4D,d1
0001F824                            
0001F824                            loc_1B714:
0001F824 22D8                       		move.l	(a0)+,(a1)+
0001F826 32FC 0000                  		move.w	#0,(a1)+
0001F82A 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001F830 32D8                       		move.w	(a0)+,(a1)+
0001F832 51C9 FFF0                  		dbf	d1,loc_1B714
0001F836                            
0001F836 43F9 00FF 4400             		lea	($FF4400).l,a1
0001F83C 323C 003F                  		move.w	#$3F,d1
0001F840                            
0001F840                            loc_1B730:
0001F840                            
0001F840 4299                       		clr.l	(a1)+
0001F842 51C9 FFFC                  		dbf	d1,loc_1B730
0001F846                            
0001F846 4E75                       		rts	
0001F848                            ; End of function SS_Load
0001F848                            
0001F848                            ; ===========================================================================
0001F848                            
0001F848                            SS_MapIndex:
0001F848                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001F848                            ; ---------------------------------------------------------------------------
0001F848                            ; Special stage	mappings and VRAM pointers
0001F848                            ; ---------------------------------------------------------------------------
0001F848 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001F84C 0142                       	dc.w $142		; VRAM setting
0001F84E 0000 0000                  	dc.l Map_SSWalls
0001F852 0142                       	dc.w $142
0001F854 0000 0000                  	dc.l Map_SSWalls
0001F858 0142                       	dc.w $142
0001F85A 0000 0000                  	dc.l Map_SSWalls
0001F85E 0142                       	dc.w $142
0001F860 0000 0000                  	dc.l Map_SSWalls
0001F864 0142                       	dc.w $142
0001F866 0000 0000                  	dc.l Map_SSWalls
0001F86A 0142                       	dc.w $142
0001F86C 0000 0000                  	dc.l Map_SSWalls
0001F870 0142                       	dc.w $142
0001F872 0000 0000                  	dc.l Map_SSWalls
0001F876 0142                       	dc.w $142
0001F878 0000 0000                  	dc.l Map_SSWalls
0001F87C 0142                       	dc.w $142
0001F87E 0000 0000                  	dc.l Map_SSWalls
0001F882 2142                       	dc.w $2142
0001F884 0000 0000                  	dc.l Map_SSWalls
0001F888 2142                       	dc.w $2142
0001F88A 0000 0000                  	dc.l Map_SSWalls
0001F88E 2142                       	dc.w $2142
0001F890 0000 0000                  	dc.l Map_SSWalls
0001F894 2142                       	dc.w $2142
0001F896 0000 0000                  	dc.l Map_SSWalls
0001F89A 2142                       	dc.w $2142
0001F89C 0000 0000                  	dc.l Map_SSWalls
0001F8A0 2142                       	dc.w $2142
0001F8A2 0000 0000                  	dc.l Map_SSWalls
0001F8A6 2142                       	dc.w $2142
0001F8A8 0000 0000                  	dc.l Map_SSWalls
0001F8AC 2142                       	dc.w $2142
0001F8AE 0000 0000                  	dc.l Map_SSWalls
0001F8B2 2142                       	dc.w $2142
0001F8B4 0000 0000                  	dc.l Map_SSWalls
0001F8B8 4142                       	dc.w $4142
0001F8BA 0000 0000                  	dc.l Map_SSWalls
0001F8BE 4142                       	dc.w $4142
0001F8C0 0000 0000                  	dc.l Map_SSWalls
0001F8C4 4142                       	dc.w $4142
0001F8C6 0000 0000                  	dc.l Map_SSWalls
0001F8CA 4142                       	dc.w $4142
0001F8CC 0000 0000                  	dc.l Map_SSWalls
0001F8D0 4142                       	dc.w $4142
0001F8D2 0000 0000                  	dc.l Map_SSWalls
0001F8D6 4142                       	dc.w $4142
0001F8D8 0000 0000                  	dc.l Map_SSWalls
0001F8DC 4142                       	dc.w $4142
0001F8DE 0000 0000                  	dc.l Map_SSWalls
0001F8E2 4142                       	dc.w $4142
0001F8E4 0000 0000                  	dc.l Map_SSWalls
0001F8E8 4142                       	dc.w $4142
0001F8EA 0000 0000                  	dc.l Map_SSWalls
0001F8EE 6142                       	dc.w $6142
0001F8F0 0000 0000                  	dc.l Map_SSWalls
0001F8F4 6142                       	dc.w $6142
0001F8F6 0000 0000                  	dc.l Map_SSWalls
0001F8FA 6142                       	dc.w $6142
0001F8FC 0000 0000                  	dc.l Map_SSWalls
0001F900 6142                       	dc.w $6142
0001F902 0000 0000                  	dc.l Map_SSWalls
0001F906 6142                       	dc.w $6142
0001F908 0000 0000                  	dc.l Map_SSWalls
0001F90C 6142                       	dc.w $6142
0001F90E 0000 0000                  	dc.l Map_SSWalls
0001F912 6142                       	dc.w $6142
0001F914 0000 0000                  	dc.l Map_SSWalls
0001F918 6142                       	dc.w $6142
0001F91A 0000 0000                  	dc.l Map_SSWalls
0001F91E 6142                       	dc.w $6142
0001F920 0001 0E9C                  	dc.l Map_Bump
0001F924 023B                       	dc.w $23B
0001F926 0000 0000                  	dc.l Map_SS_R
0001F92A 0570                       	dc.w $570
0001F92C 0000 0000                  	dc.l Map_SS_R
0001F930 0251                       	dc.w $251
0001F932 0000 0000                  	dc.l Map_SS_R
0001F936 0370                       	dc.w $370
0001F938 0000 0000                  	dc.l Map_SS_Up
0001F93C 0263                       	dc.w $263
0001F93E 0000 0000                  	dc.l Map_SS_Down
0001F942 0263                       	dc.w $263
0001F944 0000 0000                  	dc.l Map_SS_R
0001F948 22F0                       	dc.w $22F0
0001F94A 0000 0000                  	dc.l Map_SS_Glass
0001F94E 0470                       	dc.w $470
0001F950 0000 0000                  	dc.l Map_SS_Glass
0001F954 05F0                       	dc.w $5F0
0001F956 0000 0000                  	dc.l Map_SS_Glass
0001F95A 65F0                       	dc.w $65F0
0001F95C 0000 0000                  	dc.l Map_SS_Glass
0001F960 25F0                       	dc.w $25F0
0001F962 0000 0000                  	dc.l Map_SS_Glass
0001F966 45F0                       	dc.w $45F0
0001F968 0000 0000                  	dc.l Map_SS_R
0001F96C 02F0                       	dc.w $2F0
0001F96E 0101 0E9C                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001F972 023B                       	dc.w $23B
0001F974 0201 0E9C                  	dc.l Map_Bump+$2000000
0001F978 023B                       	dc.w $23B
0001F97A 0000 0000                  	dc.l Map_SS_R
0001F97E 0797                       	dc.w $797
0001F980 0000 0000                  	dc.l Map_SS_R
0001F984 07A0                       	dc.w $7A0
0001F986 0000 0000                  	dc.l Map_SS_R
0001F98A 07A9                       	dc.w $7A9
0001F98C 0000 0000                  	dc.l Map_SS_R
0001F990 0797                       	dc.w $797
0001F992 0000 0000                  	dc.l Map_SS_R
0001F996 07A0                       	dc.w $7A0
0001F998 0000 0000                  	dc.l Map_SS_R
0001F99C 07A9                       	dc.w $7A9
0001F99E 0000 BE5A                  	dc.l Map_Ring
0001F9A2 2798                       	dc.w $2798
0001F9A4 0000 0000                  	dc.l Map_SS_Chaos3
0001F9A8 0770                       	dc.w $770
0001F9AA 0000 0000                  	dc.l Map_SS_Chaos3
0001F9AE 2770                       	dc.w $2770
0001F9B0 0000 0000                  	dc.l Map_SS_Chaos3
0001F9B4 4770                       	dc.w $4770
0001F9B6 0000 0000                  	dc.l Map_SS_Chaos3
0001F9BA 6770                       	dc.w $6770
0001F9BC 0000 0000                  	dc.l Map_SS_Chaos1
0001F9C0 0770                       	dc.w $770
0001F9C2 0000 0000                  	dc.l Map_SS_Chaos2
0001F9C6 0770                       	dc.w $770
0001F9C8 0000 0000                  	dc.l Map_SS_R
0001F9CC 04F0                       	dc.w $4F0
0001F9CE 0400 BE5A                  	dc.l Map_Ring+$4000000
0001F9D2 2798                       	dc.w $2798
0001F9D4 0500 BE5A                  	dc.l Map_Ring+$5000000
0001F9D8 2798                       	dc.w $2798
0001F9DA 0600 BE5A                  	dc.l Map_Ring+$6000000
0001F9DE 2798                       	dc.w $2798
0001F9E0 0700 BE5A                  	dc.l Map_Ring+$7000000
0001F9E4 2798                       	dc.w $2798
0001F9E6 0000 0000                  	dc.l Map_SS_Glass
0001F9EA 23F0                       	dc.w $23F0
0001F9EC 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001F9F0 23F0                       	dc.w $23F0
0001F9F2 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001F9F6 23F0                       	dc.w $23F0
0001F9F8 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001F9FC 23F0                       	dc.w $23F0
0001F9FE 0000 0000                  	dc.l Map_SS_R+$2000000
0001FA02 04F0                       	dc.w $4F0
0001FA04 0000 0000                  	dc.l Map_SS_Glass
0001FA08 05F0                       	dc.w $5F0
0001FA0A 0000 0000                  	dc.l Map_SS_Glass
0001FA0E 65F0                       	dc.w $65F0
0001FA10 0000 0000                  	dc.l Map_SS_Glass
0001FA14 25F0                       	dc.w $25F0
0001FA16 0000 0000                  	dc.l Map_SS_Glass
0001FA1A 45F0                       	dc.w $45F0
0001FA1A 45F0                       	dc.w $45F0
0001FA1C                            
0001FA1C                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001FA1C                            ; ---------------------------------------------------------------------------
0001FA1C                            ; Sprite mappings - special stage "R" block
0001FA1C                            ; ---------------------------------------------------------------------------
0001FA1C                            Map_SS_R_internal:
0001FA1C 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001FA1E 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001FA20 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001FA22 01                         byte_1B912:	dc.b 1
0001FA23 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001FA28 01                         byte_1B918:	dc.b 1
0001FA29 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001FA2E 00                         byte_1B91E:	dc.b 0
0001FA30 00                         		even
0001FA30 00                         		even
0001FA30                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001FA30                            ; ---------------------------------------------------------------------------
0001FA30                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001FA30                            ; ---------------------------------------------------------------------------
0001FA30                            Map_SS_Glass_internal:
0001FA30 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001FA32 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001FA34 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001FA36 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001FA38 01                         byte_1B928:	dc.b 1
0001FA39 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001FA3E 01                         byte_1B92E:	dc.b 1
0001FA3F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001FA44 01                         byte_1B934:	dc.b 1
0001FA45 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001FA4A 01                         byte_1B93A:	dc.b 1
0001FA4B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001FA50                            		even
0001FA50                            		even
0001FA50                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001FA50                            ; ---------------------------------------------------------------------------
0001FA50                            ; Sprite mappings - special stage "UP" block
0001FA50                            ; ---------------------------------------------------------------------------
0001FA50                            Map_SS_Up_internal:
0001FA50 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001FA52 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001FA54 01                         byte_1B944:	dc.b 1
0001FA55 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001FA5A 01                         byte_1B94A:	dc.b 1
0001FA5B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001FA60                            		even
0001FA60                            		even
0001FA60                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001FA60                            ; ---------------------------------------------------------------------------
0001FA60                            ; Sprite mappings - special stage "DOWN" block
0001FA60                            ; ---------------------------------------------------------------------------
0001FA60                            Map_SS_Down_internal:
0001FA60 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001FA62 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001FA64 01                         byte_1B954:	dc.b 1
0001FA65 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001FA6A 01                         byte_1B95A:	dc.b 1
0001FA6B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001FA70                            		even
0001FA70                            		even
0001FA70                            		include	"_maps\SS Chaos Emeralds.asm"
0001FA70                            ; ---------------------------------------------------------------------------
0001FA70                            ; Sprite mappings - special stage chaos	emeralds
0001FA70                            ; ---------------------------------------------------------------------------
0001FA70 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001FA72 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001FA74 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001FA76 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001FA78 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001FA7A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001FA7C 01                         byte_1B96C:	dc.b 1
0001FA7D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001FA82 01                         byte_1B972:	dc.b 1
0001FA83 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001FA88 01                         byte_1B978:	dc.b 1
0001FA89 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001FA8E 01                         byte_1B97E:	dc.b 1
0001FA8F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001FA94                            		even
0001FA94                            		even
0001FA94                            
0001FA94                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001FA94                            ; ---------------------------------------------------------------------------
0001FA94                            ; Object 09 - Sonic (special stage)
0001FA94                            ; ---------------------------------------------------------------------------
0001FA94                            
0001FA94                            SonicSpecial:
0001FA94 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001FA98 6700                       		beq.s	Obj09_Normal	; if not, branch
0001FA9A 6100 0000                  		bsr.w	SS_FixCamera
0001FA9E 6000 0000                  		bra.w	DebugMode
0001FAA2                            ; ===========================================================================
0001FAA2                            
0001FAA2                            Obj09_Normal:
0001FAA2 7000                       		moveq	#0,d0
0001FAA4 1028 0024                  		move.b	obRoutine(a0),d0
0001FAA8 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001FAAC 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001FAB0                            ; ===========================================================================
0001FAB0 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001FAB2 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001FAB4 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001FAB6 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001FAB8                            ; ===========================================================================
0001FAB8                            
0001FAB8                            Obj09_Main:	; Routine 0
0001FAB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FABC 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001FAC2 117C 0007 0017             		move.b	#7,obWidth(a0)
0001FAC8 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001FAD0 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001FAD6 117C 0004 0001             		move.b	#4,obRender(a0)
0001FADC 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FAE2 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001FAE8 08E8 0002 0022             		bset	#2,obStatus(a0)
0001FAEE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FAF4                            
0001FAF4                            Obj09_ChkDebug:	; Routine 2
0001FAF4 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001FAF8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FAFA 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001FB00 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FB02 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001FB08                            
0001FB08                            Obj09_NoDebug:
0001FB08 117C 0000 0030             		move.b	#0,$30(a0)
0001FB0E 7000                       		moveq	#0,d0
0001FB10 1028 0022                  		move.b	obStatus(a0),d0
0001FB14 0240 0002                  		andi.w	#2,d0
0001FB18 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001FB1C 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001FB20 4EB9 0001 6FC8             		jsr	(Sonic_LoadGfx).l
0001FB26 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001FB2C                            ; ===========================================================================
0001FB2C 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001FB2E 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001FB30                            ; ===========================================================================
0001FB30                            
0001FB30                            Obj09_OnWall:
0001FB30 6100 0000                  		bsr.w	Obj09_Jump
0001FB34 6100 0000                  		bsr.w	Obj09_Move
0001FB38 6100 0000                  		bsr.w	Obj09_Fall
0001FB3C 6000                       		bra.s	Obj09_Display
0001FB3E                            ; ===========================================================================
0001FB3E                            
0001FB3E                            Obj09_InAir:
0001FB3E 6100 0000                  		bsr.w	nullsub_2
0001FB42 6100 0000                  		bsr.w	Obj09_Move
0001FB46 6100 0000                  		bsr.w	Obj09_Fall
0001FB4A                            
0001FB4A                            Obj09_Display:
0001FB4A 6100 0000                  		bsr.w	Obj09_ChkItems
0001FB4E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001FB52 4EB9 0000 F844             		jsr	(SpeedToPos).l
0001FB58 6100 0000                  		bsr.w	SS_FixCamera
0001FB5C 3038 F780                  		move.w	(v_ssangle).w,d0
0001FB60 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FB64 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FB68 4EB9 0001 6A74             		jsr	(Sonic_Animate).l
0001FB6E 4E75                       		rts	
0001FB70                            
0001FB70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB70                            
0001FB70                            
0001FB70                            Obj09_Move:
0001FB70 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001FB76 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001FB78 6100 0000                  		bsr.w	Obj09_MoveLeft
0001FB7C                            
0001FB7C                            Obj09_ChkRight:
0001FB7C 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001FB82 6700                       		beq.s	loc_1BA78	; if not, branch
0001FB84 6100 0000                  		bsr.w	Obj09_MoveRight
0001FB88                            
0001FB88                            loc_1BA78:
0001FB88 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FB8C 0200 000C                  		andi.b	#btnL+btnR,d0
0001FB90 6600                       		bne.s	loc_1BAA8
0001FB92 3028 0020                  		move.w	obInertia(a0),d0
0001FB96 6700                       		beq.s	loc_1BAA8
0001FB98 6B00                       		bmi.s	loc_1BA9A
0001FB9A 0440 000C                  		subi.w	#$C,d0
0001FB9E 6400                       		bcc.s	loc_1BA94
0001FBA0 303C 0000                  		move.w	#0,d0
0001FBA4                            
0001FBA4                            loc_1BA94:
0001FBA4 3140 0020                  		move.w	d0,obInertia(a0)
0001FBA8 6000                       		bra.s	loc_1BAA8
0001FBAA                            ; ===========================================================================
0001FBAA                            
0001FBAA                            loc_1BA9A:
0001FBAA 0640 000C                  		addi.w	#$C,d0
0001FBAE 6400                       		bcc.s	loc_1BAA4
0001FBB0 303C 0000                  		move.w	#0,d0
0001FBB4                            
0001FBB4                            loc_1BAA4:
0001FBB4 3140 0020                  		move.w	d0,obInertia(a0)
0001FBB8                            
0001FBB8                            loc_1BAA8:
0001FBB8 1038 F780                  		move.b	(v_ssangle).w,d0
0001FBBC 0600 0020                  		addi.b	#$20,d0
0001FBC0 0200 00C0                  		andi.b	#$C0,d0
0001FBC4 4400                       		neg.b	d0
0001FBC6 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FBCC C3E8 0020                  		muls.w	obInertia(a0),d1
0001FBD0 D3A8 0008                  		add.l	d1,obX(a0)
0001FBD4 C1E8 0020                  		muls.w	obInertia(a0),d0
0001FBD8 D1A8 000C                  		add.l	d0,obY(a0)
0001FBDC 48E7 C000                  		movem.l	d0-d1,-(sp)
0001FBE0 2428 000C                  		move.l	obY(a0),d2
0001FBE4 2628 0008                  		move.l	obX(a0),d3
0001FBE8 6100 0000                  		bsr.w	sub_1BCE8
0001FBEC 6700                       		beq.s	loc_1BAF2
0001FBEE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FBF2 93A8 0008                  		sub.l	d1,obX(a0)
0001FBF6 91A8 000C                  		sub.l	d0,obY(a0)
0001FBFA 317C 0000 0020             		move.w	#0,obInertia(a0)
0001FC00 4E75                       		rts	
0001FC02                            ; ===========================================================================
0001FC02                            
0001FC02                            loc_1BAF2:
0001FC02 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FC06 4E75                       		rts	
0001FC08                            ; End of function Obj09_Move
0001FC08                            
0001FC08                            
0001FC08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC08                            
0001FC08                            
0001FC08                            Obj09_MoveLeft:
0001FC08 08E8 0000 0022             		bset	#0,obStatus(a0)
0001FC0E 3028 0020                  		move.w	obInertia(a0),d0
0001FC12 6700                       		beq.s	loc_1BB06
0001FC14 6A00                       		bpl.s	loc_1BB1A
0001FC16                            
0001FC16                            loc_1BB06:
0001FC16 0440 000C                  		subi.w	#$C,d0
0001FC1A 0C40 F800                  		cmpi.w	#-$800,d0
0001FC1E 6E00                       		bgt.s	loc_1BB14
0001FC20 303C F800                  		move.w	#-$800,d0
0001FC24                            
0001FC24                            loc_1BB14:
0001FC24 3140 0020                  		move.w	d0,obInertia(a0)
0001FC28 4E75                       		rts	
0001FC2A                            ; ===========================================================================
0001FC2A                            
0001FC2A                            loc_1BB1A:
0001FC2A 0440 0040                  		subi.w	#$40,d0
0001FC2E 6400                       		bcc.s	loc_1BB22
0001FC30 4E71                       		nop	
0001FC32                            
0001FC32                            loc_1BB22:
0001FC32 3140 0020                  		move.w	d0,obInertia(a0)
0001FC36 4E75                       		rts	
0001FC38                            ; End of function Obj09_MoveLeft
0001FC38                            
0001FC38                            
0001FC38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC38                            
0001FC38                            
0001FC38                            Obj09_MoveRight:
0001FC38 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001FC3E 3028 0020                  		move.w	obInertia(a0),d0
0001FC42 6B00                       		bmi.s	loc_1BB48
0001FC44 0640 000C                  		addi.w	#$C,d0
0001FC48 0C40 0800                  		cmpi.w	#$800,d0
0001FC4C 6D00                       		blt.s	loc_1BB42
0001FC4E 303C 0800                  		move.w	#$800,d0
0001FC52                            
0001FC52                            loc_1BB42:
0001FC52 3140 0020                  		move.w	d0,obInertia(a0)
0001FC56 6000                       		bra.s	locret_1BB54
0001FC58                            ; ===========================================================================
0001FC58                            
0001FC58                            loc_1BB48:
0001FC58 0640 0040                  		addi.w	#$40,d0
0001FC5C 6400                       		bcc.s	loc_1BB50
0001FC5E 4E71                       		nop	
0001FC60                            
0001FC60                            loc_1BB50:
0001FC60 3140 0020                  		move.w	d0,obInertia(a0)
0001FC64                            
0001FC64                            locret_1BB54:
0001FC64 4E75                       		rts	
0001FC66                            ; End of function Obj09_MoveRight
0001FC66                            
0001FC66                            
0001FC66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC66                            
0001FC66                            
0001FC66                            Obj09_Jump:
0001FC66 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001FC6A 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001FC6E 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001FC70 1038 F780                  		move.b	(v_ssangle).w,d0
0001FC74 0200 00FC                  		andi.b	#$FC,d0
0001FC78 4400                       		neg.b	d0
0001FC7A 0400 0040                  		subi.b	#$40,d0
0001FC7E 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FC84 C3FC 0680                  		muls.w	#$680,d1
0001FC88 E081                       		asr.l	#8,d1
0001FC8A 3141 0010                  		move.w	d1,obVelX(a0)
0001FC8E C1FC 0680                  		muls.w	#$680,d0
0001FC92 E080                       		asr.l	#8,d0
0001FC94 3140 0012                  		move.w	d0,obVelY(a0)
0001FC98 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FCA8                            
0001FCA8                            Obj09_NoJump:
0001FCA8 4E75                       		rts	
0001FCAA                            ; End of function Obj09_Jump
0001FCAA                            
0001FCAA                            
0001FCAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCAA                            
0001FCAA                            
0001FCAA                            nullsub_2:
0001FCAA 4E75                       		rts	
0001FCAC                            ; End of function nullsub_2
0001FCAC                            
0001FCAC                            ; ===========================================================================
0001FCAC                            ; ---------------------------------------------------------------------------
0001FCAC                            ; unused subroutine to limit Sonic's upward vertical speed
0001FCAC                            ; ---------------------------------------------------------------------------
0001FCAC 323C FC00                  		move.w	#-$400,d1
0001FCB0 B268 0012                  		cmp.w	obVelY(a0),d1
0001FCB4 6F00                       		ble.s	locret_1BBB4
0001FCB6 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FCBA 0200 0070                  		andi.b	#btnABC,d0
0001FCBE 6600                       		bne.s	locret_1BBB4
0001FCC0 3141 0012                  		move.w	d1,obVelY(a0)
0001FCC4                            
0001FCC4                            locret_1BBB4:
0001FCC4 4E75                       		rts	
0001FCC6                            ; ---------------------------------------------------------------------------
0001FCC6                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001FCC6                            ; ---------------------------------------------------------------------------
0001FCC6                            
0001FCC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCC6                            
0001FCC6                            
0001FCC6                            SS_FixCamera:
0001FCC6 3428 000C                  		move.w	obY(a0),d2
0001FCCA 3628 0008                  		move.w	obX(a0),d3
0001FCCE 3038 F700                  		move.w	(v_screenposx).w,d0
0001FCD2 0443 00A0                  		subi.w	#$A0,d3
0001FCD6 6500                       		bcs.s	loc_1BBCE
0001FCD8 9043                       		sub.w	d3,d0
0001FCDA 9178 F700                  		sub.w	d0,(v_screenposx).w
0001FCDE                            
0001FCDE                            loc_1BBCE:
0001FCDE 3038 F704                  		move.w	(v_screenposy).w,d0
0001FCE2 0442 0070                  		subi.w	#$70,d2
0001FCE6 6500                       		bcs.s	locret_1BBDE
0001FCE8 9042                       		sub.w	d2,d0
0001FCEA 9178 F704                  		sub.w	d0,(v_screenposy).w
0001FCEE                            
0001FCEE                            locret_1BBDE:
0001FCEE 4E75                       		rts	
0001FCF0                            ; End of function SS_FixCamera
0001FCF0                            
0001FCF0                            ; ===========================================================================
0001FCF0                            
0001FCF0                            Obj09_ExitStage:
0001FCF0 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001FCF6 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001FCFC 6600                       		bne.s	loc_1BBF4
0001FCFE 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FD04                            
0001FD04                            loc_1BBF4:
0001FD04 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001FD0A 6D00                       		blt.s	loc_1BC12
0001FD0C 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001FD12 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001FD18 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FD1C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001FD22                            
0001FD22                            loc_1BC12:
0001FD22 3038 F780                  		move.w	(v_ssangle).w,d0
0001FD26 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FD2A 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FD2E 4EB9 0001 6A74             		jsr	(Sonic_Animate).l
0001FD34 4EB9 0001 6FC8             		jsr	(Sonic_LoadGfx).l
0001FD3A 6100 FF8A                  		bsr.w	SS_FixCamera
0001FD3E 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001FD44                            ; ===========================================================================
0001FD44                            
0001FD44                            Obj09_Exit2:
0001FD44 5368 0038                  		subq.w	#1,$38(a0)
0001FD48 6600                       		bne.s	loc_1BC40
0001FD4A 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FD50                            
0001FD50                            loc_1BC40:
0001FD50 4EB9 0001 6A74             		jsr	(Sonic_Animate).l
0001FD56 4EB9 0001 6FC8             		jsr	(Sonic_LoadGfx).l
0001FD5C 6100 FF68                  		bsr.w	SS_FixCamera
0001FD60 4EF9 0000 F858             		jmp	(DisplaySprite).l
0001FD66                            
0001FD66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD66                            
0001FD66                            
0001FD66                            Obj09_Fall:
0001FD66 2428 000C                  		move.l	obY(a0),d2
0001FD6A 2628 0008                  		move.l	obX(a0),d3
0001FD6E 1038 F780                  		move.b	(v_ssangle).w,d0
0001FD72 0200 00FC                  		andi.b	#$FC,d0
0001FD76 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FD7C 3828 0010                  		move.w	obVelX(a0),d4
0001FD80 48C4                       		ext.l	d4
0001FD82 E184                       		asl.l	#8,d4
0001FD84 C1FC 002A                  		muls.w	#$2A,d0
0001FD88 D084                       		add.l	d4,d0
0001FD8A 3828 0012                  		move.w	obVelY(a0),d4
0001FD8E 48C4                       		ext.l	d4
0001FD90 E184                       		asl.l	#8,d4
0001FD92 C3FC 002A                  		muls.w	#$2A,d1
0001FD96 D284                       		add.l	d4,d1
0001FD98 D680                       		add.l	d0,d3
0001FD9A 6100 0000                  		bsr.w	sub_1BCE8
0001FD9E 6700                       		beq.s	loc_1BCB0
0001FDA0 9680                       		sub.l	d0,d3
0001FDA2 7000                       		moveq	#0,d0
0001FDA4 3140 0010                  		move.w	d0,obVelX(a0)
0001FDA8 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FDAE D481                       		add.l	d1,d2
0001FDB0 6100 0000                  		bsr.w	sub_1BCE8
0001FDB4 6700                       		beq.s	loc_1BCC6
0001FDB6 9481                       		sub.l	d1,d2
0001FDB8 7200                       		moveq	#0,d1
0001FDBA 3141 0012                  		move.w	d1,obVelY(a0)
0001FDBE 4E75                       		rts	
0001FDC0                            ; ===========================================================================
0001FDC0                            
0001FDC0                            loc_1BCB0:
0001FDC0 D481                       		add.l	d1,d2
0001FDC2 6100 0000                  		bsr.w	sub_1BCE8
0001FDC6 6700                       		beq.s	loc_1BCD4
0001FDC8 9481                       		sub.l	d1,d2
0001FDCA 7200                       		moveq	#0,d1
0001FDCC 3141 0012                  		move.w	d1,obVelY(a0)
0001FDD0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FDD6                            
0001FDD6                            loc_1BCC6:
0001FDD6 E080                       		asr.l	#8,d0
0001FDD8 E081                       		asr.l	#8,d1
0001FDDA 3140 0010                  		move.w	d0,obVelX(a0)
0001FDDE 3141 0012                  		move.w	d1,obVelY(a0)
0001FDE2 4E75                       		rts	
0001FDE4                            ; ===========================================================================
0001FDE4                            
0001FDE4                            loc_1BCD4:
0001FDE4 E080                       		asr.l	#8,d0
0001FDE6 E081                       		asr.l	#8,d1
0001FDE8 3140 0010                  		move.w	d0,obVelX(a0)
0001FDEC 3141 0012                  		move.w	d1,obVelY(a0)
0001FDF0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FDF6 4E75                       		rts	
0001FDF8                            ; End of function Obj09_Fall
0001FDF8                            
0001FDF8                            
0001FDF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDF8                            
0001FDF8                            
0001FDF8                            sub_1BCE8:
0001FDF8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FDFE 7800                       		moveq	#0,d4
0001FE00 4842                       		swap	d2
0001FE02 3802                       		move.w	d2,d4
0001FE04 4842                       		swap	d2
0001FE06 0644 0044                  		addi.w	#$44,d4
0001FE0A 88FC 0018                  		divu.w	#$18,d4
0001FE0E C8FC 0080                  		mulu.w	#$80,d4
0001FE12 D3C4                       		adda.l	d4,a1
0001FE14 7800                       		moveq	#0,d4
0001FE16 4843                       		swap	d3
0001FE18 3803                       		move.w	d3,d4
0001FE1A 4843                       		swap	d3
0001FE1C 0644 0014                  		addi.w	#$14,d4
0001FE20 88FC 0018                  		divu.w	#$18,d4
0001FE24 D2C4                       		adda.w	d4,a1
0001FE26 7A00                       		moveq	#0,d5
0001FE28 1819                       		move.b	(a1)+,d4
0001FE2A 6100                       		bsr.s	sub_1BD30
0001FE2C 1819                       		move.b	(a1)+,d4
0001FE2E 6100                       		bsr.s	sub_1BD30
0001FE30 D2FC 007E                  		adda.w	#$7E,a1
0001FE34 1819                       		move.b	(a1)+,d4
0001FE36 6100                       		bsr.s	sub_1BD30
0001FE38 1819                       		move.b	(a1)+,d4
0001FE3A 6100                       		bsr.s	sub_1BD30
0001FE3C 4A05                       		tst.b	d5
0001FE3E 4E75                       		rts	
0001FE40                            ; End of function sub_1BCE8
0001FE40                            
0001FE40                            
0001FE40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE40                            
0001FE40                            
0001FE40                            sub_1BD30:
0001FE40 6700                       		beq.s	locret_1BD44
0001FE42 0C04 0028                  		cmpi.b	#$28,d4
0001FE46 6700                       		beq.s	locret_1BD44
0001FE48 0C04 003A                  		cmpi.b	#$3A,d4
0001FE4C 6500                       		bcs.s	loc_1BD46
0001FE4E 0C04 004B                  		cmpi.b	#$4B,d4
0001FE52 6400                       		bcc.s	loc_1BD46
0001FE54                            
0001FE54                            locret_1BD44:
0001FE54 4E75                       		rts	
0001FE56                            ; ===========================================================================
0001FE56                            
0001FE56                            loc_1BD46:
0001FE56 1144 0030                  		move.b	d4,$30(a0)
0001FE5A 2149 0032                  		move.l	a1,$32(a0)
0001FE5E 7AFF                       		moveq	#-1,d5
0001FE60 4E75                       		rts	
0001FE62                            ; End of function sub_1BD30
0001FE62                            
0001FE62                            
0001FE62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE62                            
0001FE62                            
0001FE62                            Obj09_ChkItems:
0001FE62 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FE68 7800                       		moveq	#0,d4
0001FE6A 3828 000C                  		move.w	obY(a0),d4
0001FE6E 0644 0050                  		addi.w	#$50,d4
0001FE72 88FC 0018                  		divu.w	#$18,d4
0001FE76 C8FC 0080                  		mulu.w	#$80,d4
0001FE7A D3C4                       		adda.l	d4,a1
0001FE7C 7800                       		moveq	#0,d4
0001FE7E 3828 0008                  		move.w	obX(a0),d4
0001FE82 0644 0020                  		addi.w	#$20,d4
0001FE86 88FC 0018                  		divu.w	#$18,d4
0001FE8A D2C4                       		adda.w	d4,a1
0001FE8C 1811                       		move.b	(a1),d4
0001FE8E 6600                       		bne.s	Obj09_ChkCont
0001FE90 4A28 003A                  		tst.b	$3A(a0)
0001FE94 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001FE98 7800                       		moveq	#0,d4
0001FE9A 4E75                       		rts	
0001FE9C                            ; ===========================================================================
0001FE9C                            
0001FE9C                            Obj09_ChkCont:
0001FE9C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001FEA0 6600                       		bne.s	Obj09_Chk1Up
0001FEA2 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001FEA6 6600                       		bne.s	Obj09_GetCont
0001FEA8 14BC 0001                  		move.b	#1,(a2)
0001FEAC 2549 0004                  		move.l	a1,4(a2)
0001FEB0                            
0001FEB0                            Obj09_GetCont:
0001FEB0 4EB9 0000 B9C2             		jsr	(CollectRing).l
0001FEB6 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001FEBC 6500                       		bcs.s	Obj09_NoCont
0001FEBE 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001FEC4 6600                       		bne.s	Obj09_NoCont
0001FEC6 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001FED4                            
0001FED4                            Obj09_NoCont:
0001FED4 7800                       		moveq	#0,d4
0001FED6 4E75                       		rts	
0001FED8                            ; ===========================================================================
0001FED8                            
0001FED8                            Obj09_Chk1Up:
0001FED8 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001FEDC 6600                       		bne.s	Obj09_ChkEmer
0001FEDE 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001FEE2 6600                       		bne.s	Obj09_Get1Up
0001FEE4 14BC 0003                  		move.b	#3,(a2)
0001FEE8 2549 0004                  		move.l	a1,4(a2)
0001FEEC                            
0001FEEC                            Obj09_Get1Up:
0001FEEC 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001FEF0 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001FEFE 7800                       		moveq	#0,d4
0001FF00 4E75                       		rts	
0001FF02                            ; ===========================================================================
0001FF02                            
0001FF02                            Obj09_ChkEmer:
0001FF02 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001FF06 6500                       		bcs.s	Obj09_ChkGhost
0001FF08 0C04 0040                  		cmpi.b	#$40,d4
0001FF0C 6200                       		bhi.s	Obj09_ChkGhost
0001FF0E 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001FF12 6600                       		bne.s	Obj09_GetEmer
0001FF14 14BC 0005                  		move.b	#5,(a2)
0001FF18 2549 0004                  		move.l	a1,4(a2)
0001FF1C                            
0001FF1C                            Obj09_GetEmer:
0001FF1C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001FF22 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001FF24 0404 003B                  		subi.b	#$3B,d4
0001FF28 7000                       		moveq	#0,d0
0001FF2A 1038 FE57                  		move.b	(v_emeralds).w,d0
0001FF2E 45F8 FE58                  		lea	(v_emldlist).w,a2
0001FF32 1584 0000                  		move.b	d4,(a2,d0.w)
0001FF36 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001FF3A                            
0001FF3A                            Obj09_NoEmer:
0001FF44 7800                       		moveq	#0,d4
0001FF46 4E75                       		rts	
0001FF48                            ; ===========================================================================
0001FF48                            
0001FF48                            Obj09_ChkGhost:
0001FF48 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001FF4C 6600                       		bne.s	Obj09_ChkGhostTag
0001FF4E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001FF54                            
0001FF54                            Obj09_ChkGhostTag:
0001FF54 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001FF58 6600                       		bne.s	Obj09_NoGhost
0001FF5A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001FF60 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001FF62 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001FF68                            
0001FF68                            Obj09_NoGhost:
0001FF68 78FF                       		moveq	#-1,d4
0001FF6A 4E75                       		rts	
0001FF6C                            ; ===========================================================================
0001FF6C                            
0001FF6C                            Obj09_MakeGhostSolid:
0001FF6C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001FF72 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001FF74 43F9 00FF 1020             		lea	($FF1020).l,a1
0001FF7A 723F                       		moveq	#$3F,d1
0001FF7C                            
0001FF7C                            Obj09_GhostLoop2:
0001FF7C 743F                       		moveq	#$3F,d2
0001FF7E                            
0001FF7E                            Obj09_GhostLoop:
0001FF7E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001FF82 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001FF84 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001FF88                            
0001FF88                            Obj09_NoReplace:
0001FF88 5249                       		addq.w	#1,a1
0001FF8A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001FF8E 43E9 0040                  		lea	$40(a1),a1
0001FF92 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001FF96                            
0001FF96                            Obj09_GhostNotSolid:
0001FF96 4228 003A                  		clr.b	$3A(a0)
0001FF9A 7800                       		moveq	#0,d4
0001FF9C 4E75                       		rts	
0001FF9E                            ; End of function Obj09_ChkItems
0001FF9E                            
0001FF9E                            
0001FF9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF9E                            
0001FF9E                            
0001FF9E                            Obj09_ChkItems2:
0001FF9E 1028 0030                  		move.b	$30(a0),d0
0001FFA2 6600                       		bne.s	Obj09_ChkBumper
0001FFA4 5328 0036                  		subq.b	#1,$36(a0)
0001FFA8 6A00                       		bpl.s	loc_1BEA0
0001FFAA 117C 0000 0036             		move.b	#0,$36(a0)
0001FFB0                            
0001FFB0                            loc_1BEA0:
0001FFB0 5328 0037                  		subq.b	#1,$37(a0)
0001FFB4 6A00                       		bpl.s	locret_1BEAC
0001FFB6 117C 0000 0037             		move.b	#0,$37(a0)
0001FFBC                            
0001FFBC                            locret_1BEAC:
0001FFBC 4E75                       		rts	
0001FFBE                            ; ===========================================================================
0001FFBE                            
0001FFBE                            Obj09_ChkBumper:
0001FFBE 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001FFC2 6600                       		bne.s	Obj09_GOAL
0001FFC4 2228 0032                  		move.l	$32(a0),d1
0001FFC8 0481 00FF 0001             		subi.l	#$FF0001,d1
0001FFCE 3401                       		move.w	d1,d2
0001FFD0 0241 007F                  		andi.w	#$7F,d1
0001FFD4 C2FC 0018                  		mulu.w	#$18,d1
0001FFD8 0441 0014                  		subi.w	#$14,d1
0001FFDC EE4A                       		lsr.w	#7,d2
0001FFDE 0242 007F                  		andi.w	#$7F,d2
0001FFE2 C4FC 0018                  		mulu.w	#$18,d2
0001FFE6 0442 0044                  		subi.w	#$44,d2
0001FFEA 9268 0008                  		sub.w	obX(a0),d1
0001FFEE 9468 000C                  		sub.w	obY(a0),d2
0001FFF2 4EB9 0000 3FBA             		jsr	(CalcAngle).l
0001FFF8 4EB9 0000 3D28             		jsr	(CalcSine).l
0001FFFE C3FC F900                  		muls.w	#-$700,d1
00020002 E081                       		asr.l	#8,d1
00020004 3141 0010                  		move.w	d1,obVelX(a0)
00020008 C1FC F900                  		muls.w	#-$700,d0
0002000C E080                       		asr.l	#8,d0
0002000E 3140 0012                  		move.w	d0,obVelY(a0)
00020012 08E8 0001 0022             		bset	#1,obStatus(a0)
00020018 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0002001C 6600                       		bne.s	Obj09_BumpSnd
0002001E 14BC 0002                  		move.b	#2,(a2)
00020022 2028 0032                  		move.l	$32(a0),d0
00020026 5380                       		subq.l	#1,d0
00020028 2540 0004                  		move.l	d0,4(a2)
0002002C                            
0002002C                            Obj09_BumpSnd:
00020036                            ; ===========================================================================
00020036                            
00020036                            Obj09_GOAL:
00020036 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0002003A 6600                       		bne.s	Obj09_UPblock
0002003C 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0002004A 4E75                       		rts	
0002004C                            ; ===========================================================================
0002004C                            
0002004C                            Obj09_UPblock:
0002004C 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
00020050 6600                       		bne.s	Obj09_DOWNblock
00020052 4A28 0036                  		tst.b	$36(a0)
00020056 6600 0000                  		bne.w	Obj09_NoGlass
0002005A 117C 001E 0036             		move.b	#$1E,$36(a0)
00020060 0838 0006 F783             		btst	#6,($FFFFF783).w
00020066 6700                       		beq.s	Obj09_UPsnd
00020068 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0002006C 2268 0032                  		movea.l	$32(a0),a1
00020070 5389                       		subq.l	#1,a1
00020072 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
00020076                            
00020076                            Obj09_UPsnd:
00020080                            ; ===========================================================================
00020080                            
00020080                            Obj09_DOWNblock:
00020080 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
00020084 6600                       		bne.s	Obj09_Rblock
00020086 4A28 0036                  		tst.b	$36(a0)
0002008A 6600 0000                  		bne.w	Obj09_NoGlass
0002008E 117C 001E 0036             		move.b	#$1E,$36(a0)
00020094 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0002009A 6600                       		bne.s	Obj09_DOWNsnd
0002009C E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
000200A0 2268 0032                  		movea.l	$32(a0),a1
000200A4 5389                       		subq.l	#1,a1
000200A6 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
000200AA                            
000200AA                            Obj09_DOWNsnd:
000200B4                            ; ===========================================================================
000200B4                            
000200B4                            Obj09_Rblock:
000200B4 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
000200B8 6600                       		bne.s	Obj09_ChkGlass
000200BA 4A28 0037                  		tst.b	$37(a0)
000200BE 6600 0000                  		bne.w	Obj09_NoGlass
000200C2 117C 001E 0037             		move.b	#$1E,$37(a0)
000200C8 6100 F500                  		bsr.w	SS_RemoveCollectedItem
000200CC 6600                       		bne.s	Obj09_RevStage
000200CE 14BC 0004                  		move.b	#4,(a2)
000200D2 2028 0032                  		move.l	$32(a0),d0
000200D6 5380                       		subq.l	#1,d0
000200D8 2540 0004                  		move.l	d0,4(a2)
000200DC                            
000200DC                            Obj09_RevStage:
000200DC 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
000200EA                            ; ===========================================================================
000200EA                            
000200EA                            Obj09_ChkGlass:
000200EA 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
000200EE 6700                       		beq.s	Obj09_Glass	; if yes, branch
000200F0 0C00 002E                  		cmpi.b	#$2E,d0
000200F4 6700                       		beq.s	Obj09_Glass
000200F6 0C00 002F                  		cmpi.b	#$2F,d0
000200FA 6700                       		beq.s	Obj09_Glass
000200FC 0C00 0030                  		cmpi.b	#$30,d0
00020100 6600                       		bne.s	Obj09_NoGlass	; if not, branch
00020102                            
00020102                            Obj09_Glass:
00020102 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
00020106 6600                       		bne.s	Obj09_GlassSnd
00020108 14BC 0006                  		move.b	#6,(a2)
0002010C 2268 0032                  		movea.l	$32(a0),a1
00020110 5389                       		subq.l	#1,a1
00020112 2549 0004                  		move.l	a1,4(a2)
00020116 1011                       		move.b	(a1),d0
00020118 5200                       		addq.b	#1,d0		; change glass type when touched
0002011A 0C00 0030                  		cmpi.b	#$30,d0
0002011E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
00020120 4200                       		clr.b	d0		; remove the glass block when it's destroyed
00020122                            
00020122                            Obj09_GlassUpdate:
00020122 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
00020126                            
00020126                            Obj09_GlassSnd:
00020130                            ; ===========================================================================
00020130                            
00020130                            Obj09_NoGlass:
00020130 4E75                       		rts	
00020132                            ; End of function Obj09_ChkItems2
00020132                            ; End of function Obj09_ChkItems2
00020132                            
00020132                            		include	"_incObj\10.asm"
00020132                            ; ---------------------------------------------------------------------------
00020132                            ; Object 10 - After-Image
00020132                            ; ---------------------------------------------------------------------------
00020132                            
00020132                            Obj10:
00020132 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
00020138 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0002013C                            
0002013C 7000                             moveq   #0,d0
0002013E 1028 0024                        move.b   obRoutine(a0),d0
00020142 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
00020146 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0002014A                            
0002014A                            ; ===========================================================================
0002014A                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0002014A                            ; ===========================================================================
0002014A                            Afterimage_Index:
0002014A 0000                             dc.w NoAfterImage-Afterimage_Index
0002014C 0000                             dc.w NoAfterImage-Afterimage_Index
0002014E 0000                             dc.w NoAfterImage-Afterimage_Index
00020150 0000                             dc.w AfterimageStart-Afterimage_Index
00020152 0000                             dc.w NoAfterImage-Afterimage_Index
00020154 0000                             dc.w NoAfterImage-Afterimage_Index
00020156 0000                             dc.w NoAfterImage-Afterimage_Index
00020158 0000                             dc.w AfterimageLPrio-Afterimage_Index
0002015A 0000                             dc.w AfterimageEnd-Afterimage_Index
0002015C                            ; ===========================================================================
0002015C                            NoAfterImage:
0002015C 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
00020160 4E75                             rts
00020162                            ; ===========================================================================
00020162                            AfterimageStart:
00020162 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
00020168 6000                             bra.s   Afterimage_Show
0002016A                            ; ===========================================================================
0002016A                            AfterimageLPrio:
0002016A 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0002016E                            ; ===========================================================================
0002016E                            Afterimage_Show:
0002016E 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
00020172 4EB9 0000 3D02                   jsr   (RandomNumber).l         ; get a random number
00020178 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0002017C 6600                             bne.s   AfterimageException   ; if is not 0, branch
0002017E 4E75                             rts                        ; if it is 0, then don't show the after-image
00020180                            
00020180                            AfterimageException:
00020180 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
00020186 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0002018C 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
00020192 4EF9 0000 F858                   jmp   DisplaySprite
00020198                            ; ===========================================================================
00020198                            AfterimageEnd:
00020198 4EF9 0000 F898                   jmp   DeleteObject
00020198 4EF9 0000 F898                   jmp   DeleteObject
0002019E                            
0002019E                            		include	"_inc\AnimateLevelGfx.asm"
0002019E                            ; ---------------------------------------------------------------------------
0002019E                            ; Subroutine to	animate	level graphics
0002019E                            ; ---------------------------------------------------------------------------
0002019E                            
0002019E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002019E                            
0002019E                            
0002019E                            AnimateLevelGfx:
0002019E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000201A2 6600                       		bne.s	@ispaused	; if yes, branch
000201A4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000201AA 6100 0000                  		bsr.w	AniArt_GiantRing
000201AE 7000                       		moveq	#0,d0
000201B0 1038 FE10                  		move.b	(v_zone).w,d0
000201B4 D040                       		add.w	d0,d0
000201B6 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
000201BA 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
000201BE                            
000201BE                            	@ispaused:
000201BE 4E75                       		rts	
000201C0                            
000201C0                            ; ===========================================================================
000201C0 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
000201C4 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
000201C8 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
000201CC 0000                       		dc.w AniArt_Ending-AniArt_Index
000201CE                            ; ===========================================================================
000201CE                            ; ---------------------------------------------------------------------------
000201CE                            ; Animated pattern routine - Green Hill
000201CE                            ; ---------------------------------------------------------------------------
000201CE                            
000201CE                            AniArt_GHZ:
000201CE                            
000201CE                            AniArt_GHZ_Waterfall:
000201CE                            
000201CE =00000008                  @size:		equ 8	; number of tiles per frame
000201CE                            
000201CE 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
000201D2 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
000201D4                            
000201D4 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
000201DA 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
000201E0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000201E4 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
000201E8 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
000201EC 6700                       		beq.s	@isframe0	; branch if frame 0
000201EE 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
000201F2                            
000201F2                            	@isframe0:
000201FC 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
00020200 6000 0000                  		bra.w	LoadTiles
00020204                            ; ===========================================================================
00020204                            
00020204                            AniArt_GHZ_Bigflower:
00020204                            
00020204 =00000010                  @size:		equ 16	; number of tiles per frame
00020204                            
00020204 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
00020208 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0002020A                            
0002020A 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
00020210 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00020216 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002021A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0002021E 0240 0001                  		andi.w	#1,d0
00020222 6700                       		beq.s	@isframe0
00020224 43E9 0200                  		lea	@size*$20(a1),a1
00020228                            
00020228                            	@isframe0:
00020232 323C 000F                  		move.w	#@size-1,d1
00020236 6000 0000                  		bra.w	LoadTiles
0002023A                            ; ===========================================================================
0002023A                            
0002023A                            AniArt_GHZ_Smallflower:
0002023A                            
0002023A =0000000C                  @size:		equ 12	; number of tiles per frame
0002023A                            
0002023A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0002023E 6A00                       		bpl.s	@end
00020240                            
00020240 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
00020246 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0002024A 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0002024E 0240 0003                  		andi.w	#3,d0		; there are 4 frames
00020252 103B 0000                  		move.b	@sequence(pc,d0.w),d0
00020256 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0002025A 6600                       		bne.s	@isframe1	; if not, branch
0002025C 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
00020262                            
00020262                            	@isframe1:
00020262 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
00020264 3200                       		move.w	d0,d1
00020266 D040                       		add.w	d0,d0
00020268 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
00020274 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0002027A 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0002027E 323C 000B                  		move.w	#@size-1,d1
00020282 6100 0000                  		bsr.w	LoadTiles
00020286                            
00020286                            @end:
00020286 4E75                       		rts	
00020288                            
00020288 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0002028C                            ; ===========================================================================
0002028C                            ; ---------------------------------------------------------------------------
0002028C                            ; Animated pattern routine - Marble
0002028C                            ; ---------------------------------------------------------------------------
0002028C                            
0002028C                            AniArt_MZ:
0002028C                            
0002028C                            AniArt_MZ_Lava:
0002028C                            
0002028C =00000008                  @size:		equ 8	; number of tiles per frame
0002028C                            
0002028C 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
00020290 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
00020292                            
00020292 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
00020298 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0002029E 7000                       		moveq	#0,d0
000202A0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000202A4 5200                       		addq.b	#1,d0		; increment frame counter
000202A6 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
000202AA 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
000202AC 7000                       		moveq	#0,d0
000202AE                            
000202AE                            	@frame01or2:
000202AE 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
000202B2 C0FC 0100                  		mulu.w	#@size*$20,d0
000202B6 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
000202C2 323C 0007                  		move.w	#@size-1,d1
000202C6 6100 0000                  		bsr.w	LoadTiles
000202CA                            
000202CA                            AniArt_MZ_Magma:
000202CA 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000202CE 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
000202D0                            		
000202D0 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
000202D6 7000                       		moveq	#0,d0
000202D8 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
000202DC 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
000202E2 EE58                       		ror.w	#7,d0		; multiply frame num by $200
000202E4 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
000202F0 7600                       		moveq	#0,d3
000202F2 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
000202F6 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
000202FA 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
000202FE 343C 0003                  		move.w	#3,d2
00020302                            
00020302                            	@loop:
00020302 3003                       		move.w	d3,d0
00020304 D040                       		add.w	d0,d0
00020306 0240 001E                  		andi.w	#$1E,d0
0002030A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00020310 3033 0000                  		move.w	(a3,d0.w),d0
00020314 47F3 0000                  		lea	(a3,d0.w),a3
00020318 224C                       		movea.l	a4,a1
0002031A 323C 001F                  		move.w	#$1F,d1
0002031E 4E93                       		jsr	(a3)
00020320 5843                       		addq.w	#4,d3
00020322 51CA FFDE                  		dbf	d2,@loop
00020326 4E75                       		rts	
00020328                            ; ===========================================================================
00020328                            
00020328                            AniArt_MZ_Torch:
00020328                            
00020328 =00000006                  @size:		equ 6	; number of tiles per frame
00020328                            
00020328 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0002032C 6A00 0000                  		bpl.w	@end		; branch if not 0
00020330                            		
00020330 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
00020336 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0002033C 7000                       		moveq	#0,d0
0002033E 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
00020342 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
00020346 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0002034C C0FC 00C0                  		mulu.w	#@size*$20,d0
00020350 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0002035C 323C 0005                  		move.w	#@size-1,d1
00020360 6000 0000                  		bra.w	LoadTiles
00020364                            
00020364                            @end:
00020364 4E75                       		rts	
00020366                            ; ===========================================================================
00020366                            ; ---------------------------------------------------------------------------
00020366                            ; Animated pattern routine - Scrap Brain
00020366                            ; ---------------------------------------------------------------------------
00020366                            
00020366                            AniArt_SBZ:
00020366                            
00020366 =0000000C                  @size:		equ 12	; number of tiles per frame
00020366                            
00020366 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0002036A 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0002036C                            		
0002036C 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
00020370 6000                       		bra.s	@chk_smokepuff2
00020372                            ; ===========================================================================
00020372                            
00020372                            @smokepuff:
00020372 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
00020376 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
00020378                            		
00020378 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0002037E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0002038E 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
00020392 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
00020396 0240 0007                  		andi.w	#7,d0
0002039A 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0002039C 5340                       		subq.w	#1,d0
0002039E C0FC 0180                  		mulu.w	#@size*$20,d0
000203A2 43F1 0000                  		lea	(a1,d0.w),a1
000203A6 323C 000B                  		move.w	#@size-1,d1
000203AA 6000 0000                  		bra.w	LoadTiles
000203AE                            ; ===========================================================================
000203AE                            
000203AE                            @untilnextpuff:
000203AE 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
000203B4                            
000203B4                            @clearsky:
000203B4 323C 0005                  		move.w	#(@size/2)-1,d1
000203B8 6100 0000                  		bsr.w	LoadTiles
000203BC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000203C2 323C 0005                  		move.w	#(@size/2)-1,d1
000203C6 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
000203CA                            ; ===========================================================================
000203CA                            
000203CA                            @chk_smokepuff2:
000203CA 4A38 F7B5                  		tst.b	(v_lani2_time).w
000203CE 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
000203D0                            		
000203D0 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
000203D4 6000                       		bra.s	@end
000203D6                            ; ===========================================================================
000203D6                            
000203D6                            @smokepuff2:
000203D6 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000203DA 6A00                       		bpl.s	@end		; branch if not 0
000203DC                            		
000203DC 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
000203E2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
000203F2 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
000203F6 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
000203FA 0240 0007                  		andi.w	#7,d0
000203FE 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
00020400 5340                       		subq.w	#1,d0
00020402 C0FC 0180                  		mulu.w	#@size*$20,d0
00020406 43F1 0000                  		lea	(a1,d0.w),a1
0002040A 323C 000B                  		move.w	#@size-1,d1
0002040E 6000 0000                  		bra.w	LoadTiles
00020412                            ; ===========================================================================
00020412                            
00020412                            @untilnextpuff2:
00020412 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
00020418 609A                       		bra.s	@clearsky
0002041A                            ; ===========================================================================
0002041A                            
0002041A                            @end:
0002041A 4E75                       		rts	
0002041C                            ; ===========================================================================
0002041C                            ; ---------------------------------------------------------------------------
0002041C                            ; Animated pattern routine - ending sequence
0002041C                            ; ---------------------------------------------------------------------------
0002041C                            
0002041C                            AniArt_Ending:
0002041C                            
0002041C                            AniArt_Ending_BigFlower:
0002041C                            
0002041C =00000010                  @size:		equ 16	; number of tiles per frame
0002041C                            
0002041C 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
00020420 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
00020422                            		
00020422 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
00020428 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002042E 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
00020432 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
00020436 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0002043A 0240 0001                  		andi.w	#1,d0		; only 2 frames
0002043E 6700                       		beq.s	@isframe0	; branch if frame 0
00020440 43E9 0200                  		lea	@size*$20(a1),a1
00020444 45EA 0200                  		lea	@size*$20(a2),a2
00020448                            
00020448                            	@isframe0:
00020452 323C 000F                  		move.w	#@size-1,d1
00020456 6100 0000                  		bsr.w	LoadTiles
0002045A 224A                       		movea.l	a2,a1
00020466 323C 000F                  		move.w	#@size-1,d1
0002046A 6000 0000                  		bra.w	LoadTiles
0002046E                            ; ===========================================================================
0002046E                            
0002046E                            AniArt_Ending_SmallFlower:
0002046E                            
0002046E =0000000C                  @size:		equ 12	; number of tiles per frame
0002046E                            
0002046E 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020472 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
00020474                            		
00020474 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0002047A 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0002047E 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
00020482 0240 0007                  		andi.w	#7,d0		; max 8 frames
00020486 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0002048A EF48                       		lsl.w	#7,d0		; multiply by $80
0002048C 3200                       		move.w	d0,d1
0002048E D040                       		add.w	d0,d0
00020490 D041                       		add.w	d1,d0		; multiply by 3
0002049C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000204A2 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000204A6 323C 000B                  		move.w	#@size-1,d1
000204AA 6000 0000                  		bra.w	LoadTiles
000204AE                            ; ===========================================================================
000204AE 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
000204B6                            ; ===========================================================================
000204B6                            
000204B6                            AniArt_Ending_Flower3:
000204B6                            
000204B6 =00000010                  @size:		equ 16	; number of tiles per frame
000204B6                            
000204B6 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
000204BA 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
000204BC                            		
000204BC 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
000204C2 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
000204C6 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
000204CA 0240 0003                  		andi.w	#3,d0		; max 4 frames
000204CE 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000204D2 E148                       		lsl.w	#8,d0		; multiply by $100
000204D4 D040                       		add.w	d0,d0		; multiply by 2
000204E0 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
000204E4 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000204E8 323C 000F                  		move.w	#@size-1,d1
000204EC 6000 0000                  		bra.w	LoadTiles
000204F0                            ; ===========================================================================
000204F0 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
000204F4                            ; ===========================================================================
000204F4                            
000204F4                            AniArt_Ending_Flower4:
000204F4                            
000204F4 =00000010                  @size:		equ 16	; number of tiles per frame
000204F4                            
000204F4 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
000204F8 6A00                       		bpl.s	@end		; branch if not 0
000204FA                            		
000204FA 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
00020500 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
00020504 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
00020508 0240 0003                  		andi.w	#3,d0
0002050C 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
00020510 E148                       		lsl.w	#8,d0		; multiply by $100
00020512 D040                       		add.w	d0,d0		; multiply by 2
0002051E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
00020522 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
00020526 323C 000F                  		move.w	#@size-1,d1
0002052A 6000 0000                  		bra.w	LoadTiles
0002052E                            ; ===========================================================================
0002052E                            
0002052E                            @end:
0002052E 4E75                       		rts	
00020530                            ; ===========================================================================
00020530                            
00020530                            AniArt_none:
00020530 4E75                       		rts	
00020532                            
00020532                            ; ---------------------------------------------------------------------------
00020532                            ; Subroutine to	transfer graphics to VRAM
00020532                            
00020532                            ; input:
00020532                            ;	a1 = source address
00020532                            ;	a6 = vdp_data_port ($C00000)
00020532                            ;	d1 = number of tiles to load (minus one)
00020532                            ; ---------------------------------------------------------------------------
00020532                            
00020532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020532                            
00020532                            
00020532                            LoadTiles:
00020532 2C99                       		move.l	(a1)+,(a6)
00020534 2C99                       		move.l	(a1)+,(a6)
00020536 2C99                       		move.l	(a1)+,(a6)
00020538 2C99                       		move.l	(a1)+,(a6)
0002053A 2C99                       		move.l	(a1)+,(a6)
0002053C 2C99                       		move.l	(a1)+,(a6)
0002053E 2C99                       		move.l	(a1)+,(a6)
00020540 2C99                       		move.l	(a1)+,(a6)
00020542 51C9 FFEE                  		dbf	d1,LoadTiles
00020546 4E75                       		rts	
00020548                            ; End of function LoadTiles
00020548                            
00020548                            ; ===========================================================================
00020548                            ; ---------------------------------------------------------------------------
00020548                            ; Animated pattern routine - more Marble Zone
00020548                            ; ---------------------------------------------------------------------------
00020548 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0002054C 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
00020550 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
00020554 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
00020558 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0002055C 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
00020560 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
00020564 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
00020568                            ; ===========================================================================
00020568                            
00020568                            loc_1C3EE:
00020568 2C91                       		move.l	(a1),(a6)
0002056A 43E9 0010                  		lea	$10(a1),a1
0002056E 51C9 FFF8                  		dbf	d1,loc_1C3EE
00020572 4E75                       		rts	
00020574                            ; ===========================================================================
00020574                            
00020574                            loc_1C3FA:
00020574 2029 0002                  		move.l	2(a1),d0
00020578 1029 0001                  		move.b	1(a1),d0
0002057C E098                       		ror.l	#8,d0
0002057E 2C80                       		move.l	d0,(a6)
00020580 43E9 0010                  		lea	$10(a1),a1
00020584 51C9 FFEE                  		dbf	d1,loc_1C3FA
00020588 4E75                       		rts	
0002058A                            ; ===========================================================================
0002058A                            
0002058A                            loc_1C410:
0002058A 2CA9 0002                  		move.l	2(a1),(a6)
0002058E 43E9 0010                  		lea	$10(a1),a1
00020592 51C9 FFF6                  		dbf	d1,loc_1C410
00020596 4E75                       		rts	
00020598                            ; ===========================================================================
00020598                            
00020598                            loc_1C41E:
00020598 2029 0004                  		move.l	4(a1),d0
0002059C 1029 0003                  		move.b	3(a1),d0
000205A0 E098                       		ror.l	#8,d0
000205A2 2C80                       		move.l	d0,(a6)
000205A4 43E9 0010                  		lea	$10(a1),a1
000205A8 51C9 FFEE                  		dbf	d1,loc_1C41E
000205AC 4E75                       		rts	
000205AE                            ; ===========================================================================
000205AE                            
000205AE                            loc_1C434:
000205AE 2CA9 0004                  		move.l	4(a1),(a6)
000205B2 43E9 0010                  		lea	$10(a1),a1
000205B6 51C9 FFF6                  		dbf	d1,loc_1C434
000205BA 4E75                       		rts	
000205BC                            ; ===========================================================================
000205BC                            
000205BC                            loc_1C442:
000205BC 2029 0006                  		move.l	6(a1),d0
000205C0 1029 0005                  		move.b	5(a1),d0
000205C4 E098                       		ror.l	#8,d0
000205C6 2C80                       		move.l	d0,(a6)
000205C8 43E9 0010                  		lea	$10(a1),a1
000205CC 51C9 FFEE                  		dbf	d1,loc_1C442
000205D0 4E75                       		rts	
000205D2                            ; ===========================================================================
000205D2                            
000205D2                            loc_1C458:
000205D2 2CA9 0006                  		move.l	6(a1),(a6)
000205D6 43E9 0010                  		lea	$10(a1),a1
000205DA 51C9 FFF6                  		dbf	d1,loc_1C458
000205DE 4E75                       		rts	
000205E0                            ; ===========================================================================
000205E0                            
000205E0                            loc_1C466:
000205E0 2029 0008                  		move.l	8(a1),d0
000205E4 1029 0007                  		move.b	7(a1),d0
000205E8 E098                       		ror.l	#8,d0
000205EA 2C80                       		move.l	d0,(a6)
000205EC 43E9 0010                  		lea	$10(a1),a1
000205F0 51C9 FFEE                  		dbf	d1,loc_1C466
000205F4 4E75                       		rts	
000205F6                            ; ===========================================================================
000205F6                            
000205F6                            loc_1C47C:
000205F6 2CA9 0008                  		move.l	8(a1),(a6)
000205FA 43E9 0010                  		lea	$10(a1),a1
000205FE 51C9 FFF6                  		dbf	d1,loc_1C47C
00020602 4E75                       		rts	
00020604                            ; ===========================================================================
00020604                            
00020604                            loc_1C48A:
00020604 2029 000A                  		move.l	$A(a1),d0
00020608 1029 0009                  		move.b	9(a1),d0
0002060C E098                       		ror.l	#8,d0
0002060E 2C80                       		move.l	d0,(a6)
00020610 43E9 0010                  		lea	$10(a1),a1
00020614 51C9 FFEE                  		dbf	d1,loc_1C48A
00020618 4E75                       		rts	
0002061A                            ; ===========================================================================
0002061A                            
0002061A                            loc_1C4A0:
0002061A 2CA9 000A                  		move.l	$A(a1),(a6)
0002061E 43E9 0010                  		lea	$10(a1),a1
00020622 51C9 FFF6                  		dbf	d1,loc_1C4A0
00020626 4E75                       		rts	
00020628                            ; ===========================================================================
00020628                            
00020628                            loc_1C4AE:
00020628 2029 000C                  		move.l	$C(a1),d0
0002062C 1029 000B                  		move.b	$B(a1),d0
00020630 E098                       		ror.l	#8,d0
00020632 2C80                       		move.l	d0,(a6)
00020634 43E9 0010                  		lea	$10(a1),a1
00020638 51C9 FFEE                  		dbf	d1,loc_1C4AE
0002063C 4E75                       		rts	
0002063E                            ; ===========================================================================
0002063E                            
0002063E                            loc_1C4C4:
0002063E 2CA9 000C                  		move.l	$C(a1),(a6)
00020642 43E9 0010                  		lea	$10(a1),a1
00020646 51C9 FFF6                  		dbf	d1,loc_1C4C4
0002064A 4E75                       		rts	
0002064C                            ; ===========================================================================
0002064C                            
0002064C                            loc_1C4D2:
0002064C 2029 000C                  		move.l	$C(a1),d0
00020650 E198                       		rol.l	#8,d0
00020652 1011                       		move.b	0(a1),d0
00020654 2C80                       		move.l	d0,(a6)
00020656 43E9 0010                  		lea	$10(a1),a1
0002065A 51C9 FFF0                  		dbf	d1,loc_1C4D2
0002065E 4E75                       		rts	
00020660                            ; ===========================================================================
00020660                            
00020660                            loc_1C4E8:
00020660 3CA9 000E                  		move.w	$E(a1),(a6)
00020664 3C91                       		move.w	0(a1),(a6)
00020666 43E9 0010                  		lea	$10(a1),a1
0002066A 51C9 FFF4                  		dbf	d1,loc_1C4E8
0002066E 4E75                       		rts	
00020670                            ; ===========================================================================
00020670                            
00020670                            loc_1C4FA:
00020670 2011                       		move.l	0(a1),d0
00020672 1029 000F                  		move.b	$F(a1),d0
00020676 E098                       		ror.l	#8,d0
00020678 2C80                       		move.l	d0,(a6)
0002067A 43E9 0010                  		lea	$10(a1),a1
0002067E 51C9 FFF0                  		dbf	d1,loc_1C4FA
00020682 4E75                       		rts	
00020684                            
00020684                            ; ---------------------------------------------------------------------------
00020684                            ; Animated pattern routine - giant ring
00020684                            ; ---------------------------------------------------------------------------
00020684                            
00020684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020684                            
00020684                            
00020684                            AniArt_GiantRing:
00020684                            
00020684 =0000000E                  @size:		equ 14
00020684                            
00020684 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
00020688 6600                       		bne.s	@loadTiles		; If so, get to work
0002068A 4E75                       		rts	
0002068C                            ; ===========================================================================
0002068C                            ; loc_1C518:
0002068C                            @loadTiles:
0002068C 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
00020692 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
00020698 7000                       		moveq	#0,d0
0002069A 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0002069E 43F1 0000                  		lea	(a1,d0.w),a1
000206A2                            		; Turn VRAM address into VDP command
000206A2 0640 8000                  		addi.w	#$8000,d0
000206A6 E588                       		lsl.l	#2,d0
000206A8 E448                       		lsr.w	#2,d0
000206AA 0040 4000                  		ori.w	#$4000,d0
000206AE 4840                       		swap	d0
000206B0                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
000206B0 2D40 0004                  		move.l	d0,4(a6)
000206B4                            
000206B4 323C 000D                  		move.w	#@size-1,d1
000206B8 6000 FE78                  		bra.w	LoadTiles
000206BC                            
000206BC                            ; End of function AniArt_GiantRing
000206BC                            ; End of function AniArt_GiantRing
000206BC                            
000206BC                            		include	"_incObj\21 HUD.asm"
000206BC                            ; ---------------------------------------------------------------------------
000206BC                            ; Object 21 - SCORE, TIME, RINGS
000206BC                            ; ---------------------------------------------------------------------------
000206BC                            
000206BC                            HUD:
000206BC 7000                       		moveq	#0,d0
000206BE 1028 0024                  		move.b	obRoutine(a0),d0
000206C2 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
000206C6 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
000206CA                            ; ===========================================================================
000206CA 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
000206CC 0000                       		dc.w HUD_Flash-HUD_Index
000206CE                            ; ===========================================================================
000206CE                            
000206CE                            HUD_Main:	; Routine 0
000206CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000206D2 317C 0090 0008             		move.w	#$90,obX(a0)
000206D8 317C 0108 000A             		move.w	#$108,obScreenY(a0)
000206DE 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
000206E6 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
000206EC 117C 0000 0001             		move.b	#0,obRender(a0)
000206F2 317C 0000 0018             		move.w	#0,obPriority(a0)
000206F8                            
000206F8                            HUD_Flash:	; Routine 2
000206F8 7000                       		moveq	#0,d0
000206FA 0838 0003 FE05             		btst	#3,(v_framebyte).w
00020700 6600                       		bne.s	@display
00020702 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
00020706 6600                       		bne.s	@norings	; if so, branch
00020708 5240                       		addq.w	#1,d0		; make ring counter flash red
0002070A                            ; ===========================================================================
0002070A                            
0002070A                            @norings:
0002070A 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
00020710 6600                       		bne.s	@display	; if not, branch
00020712 5440                       		addq.w	#2,d0		; make time counter flash red
00020714                            
00020714                            	@display:
00020714 1140 001A                  		move.b	d0,obFrame(a0)
00020718 4EF9 0000 F858             		jmp	DisplaySprite
00020718 4EF9 0000 F858             		jmp	DisplaySprite
0002071E                            Map_HUD:	include	"_maps\HUD.asm"
0002071E                            ; ---------------------------------------------------------------------------
0002071E                            ; Sprite mappings - SCORE, TIME, RINGS
0002071E                            ; ---------------------------------------------------------------------------
0002071E                            Map_HUD_internal:
0002071E 0000                       		dc.w @allyellow-Map_HUD_internal
00020720 0000                       		dc.w @ringred-Map_HUD_internal
00020722 0000                       		dc.w @timered-Map_HUD_internal
00020724 0000                       		dc.w @allred-Map_HUD_internal
00020726 0A                         @allyellow:	dc.b $A
00020727 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0002072C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020731 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00020736 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0002073B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020740 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
00020745 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0002074A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0002074F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020754 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00020759 00                         		dc.b 0
0002075A 0A                         @ringred:	dc.b $A
0002075B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020760 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020765 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002076A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0002076F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020774 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00020779 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0002077E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020783 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020788 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002078D 00                         		dc.b 0
0002078E 0A                         @timered:	dc.b $A
0002078F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020794 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020799 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002079E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000207A3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000207A8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
000207AD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
000207B2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000207B7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000207BC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000207C1 00                         		dc.b 0
000207C2 0A                         @allred:	dc.b $A
000207C3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000207C8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000207CD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000207D2 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000207D7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000207DC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
000207E1 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
000207E6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000207EB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000207F0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000207F6 00                         		even
000207F6 00                         		even
000207F6                            
000207F6                            ; ---------------------------------------------------------------------------
000207F6                            ; Add points subroutine
000207F6                            ; ---------------------------------------------------------------------------
000207F6                            
000207F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000207F6                            
000207F6                            
000207F6                            AddPoints:
000207F6 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
000207FC                            
000207FC                            
000207FC 47F8 FE26                  			lea     (v_score).w,a3
00020800 D193                       			add.l   d0,(a3)
00020802 223C 000F 423F             			move.l  #999999,d1
00020808 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0002080A 6200                       			bhi.s   @belowmax ; if yes, branch
0002080C 2681                       			move.l  d1,(a3) ; reset score to 999999
0002080E                            		@belowmax:
0002080E 2013                       			move.l  (a3),d0
00020810 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
00020814 6500                       			blo.s   @noextralife ; if not, branch
00020816                            
00020816 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0002081E 4A38 FFF8                  			tst.b   (v_megadrive).w
00020822 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
00020824 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
00020828 5238 FE1C                  			addq.b  #1,(f_lifecount).w
00020836                            
00020836                            @locret_1C6B6:
00020836                            @noextralife:
00020836 4E75                       		rts	
00020838                            ; End of function AddPoints
00020838                            
00020838                            		include	"_inc\HUD_Update.asm"
00020838                            ; ---------------------------------------------------------------------------
00020838                            ; Subroutine to	update the HUD
00020838                            ; ---------------------------------------------------------------------------
00020838                            
00020838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020838                            
00020838                            hudVRAM:	macro loc
00020838                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
00020838                            		endm
00020838                            
00020838                            
00020838                            HUD_Update:
00020838 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0002083C 6600 0000                  		bne.w	HudDebug	; if yes, branch
00020840 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
00020844 6700                       		beq.s	@chkrings	; if not, branch
00020846                            
00020846 4238 FE1F                  		clr.b	(f_scorecount).w
0002084A 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
00020850 2238 FE26                  		move.l	(v_score).w,d1	; load score
00020854 6100 0000                  		bsr.w	Hud_Score
00020858                            
00020858                            	@chkrings:
00020858 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0002085C 6700                       		beq.s	@chktime	; if not, branch
0002085E 6A00                       		bpl.s	@notzero
00020860 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
00020864                            
00020864                            	@notzero:
00020864 4238 FE1D                  		clr.b	(f_ringcount).w
00020868 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0002086E 7200                       		moveq	#0,d1
00020870 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
00020874 6100 0000                  		bsr.w	Hud_Rings
00020878                            
00020878                            	@chktime:
00020878 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0002087C 6700                       		beq.s	@chklives	; if not, branch
0002087E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00020882 6600                       		bne.s	@chklives	; if yes, branch
00020884 43F8 FE22                  		lea	(v_time).w,a1
00020888 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0002088E 6700                       		beq.s	TimeOver	; if yes, branch
00020890                            
00020890 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
00020892 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
00020896 6500                       		bcs.s	@chklives
00020898 12BC 0000                  		move.b	#0,(a1)
0002089C 5221                       		addq.b	#1,-(a1)	; increment second counter
0002089E 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
000208A2 6500                       		bcs.s	@updatetime
000208A4 12BC 0000                  		move.b	#0,(a1)
000208A8 5221                       		addq.b	#1,-(a1)	; increment minute counter
000208AA 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
000208AE 6500                       		bcs.s	@updatetime
000208B0 12BC 0009                  		move.b	#9,(a1)		; keep as 9
000208B4                            
000208B4                            	@updatetime:
000208B4 203C 5E40 0003             		hudVRAM	$DE40
000208BA 7200                       		moveq	#0,d1
000208BC 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
000208C0 6100 0000                  		bsr.w	Hud_Mins
000208C4 203C 5EC0 0003             		hudVRAM	$DEC0
000208CA 7200                       		moveq	#0,d1
000208CC 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
000208D0 6100 0000                  		bsr.w	Hud_Secs
000208D4                            
000208D4                            	@chklives:
000208D4 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
000208D8 6700                       		beq.s	@chkbonus	; if not, branch
000208DA 4238 FE1C                  		clr.b	(f_lifecount).w
000208DE 6100 0000                  		bsr.w	Hud_Lives
000208E2                            
000208E2                            	@chkbonus:
000208E2 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
000208E6 6700                       		beq.s	@finish		; if not, branch
000208E8 4238 F7D6                  		clr.b	(f_endactbonus).w
000208F6 7200                       		moveq	#0,d1
000208F8 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
000208FC 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020900 7200                       		moveq	#0,d1
00020902 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
00020906 6100 0000                  		bsr.w	Hud_TimeRingBonus
0002090A                            
0002090A                            	@finish:
0002090A 4E75                       		rts	
0002090C                            ; ===========================================================================
0002090C                            
0002090C                            TimeOver:
0002090C 4238 FE1E                  		clr.b	(f_timecount).w
00020910 41F8 D000                  		lea	(v_player).w,a0
00020914 2448                       		movea.l	a0,a2
00020916 6100 E824                  		bsr.w	KillSonic
0002091A 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
00020920 4E75                       		rts	
00020922                            ; ===========================================================================
00020922                            
00020922                            HudDebug:
00020922 6100 0000                  		bsr.w	HudDb_XY
00020926 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0002092A 6700                       		beq.s	@objcounter	; if not, branch
0002092C 6A00                       		bpl.s	@notzero
0002092E 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
00020932                            
00020932                            	@notzero:
00020932 4238 FE1D                  		clr.b	(f_ringcount).w
00020936 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0002093C 7200                       		moveq	#0,d1
0002093E 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
00020942 6100 0000                  		bsr.w	Hud_Rings
00020946                            
00020946                            	@objcounter:
00020946 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0002094C 7200                       		moveq	#0,d1
0002094E 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
00020952 6100 0000                  		bsr.w	Hud_Secs
00020956 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0002095A 6700                       		beq.s	@chkbonus	; if not, branch
0002095C 4238 FE1C                  		clr.b	(f_lifecount).w
00020960 6100 0000                  		bsr.w	Hud_Lives
00020964                            
00020964                            	@chkbonus:
00020964 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
00020968 6700                       		beq.s	@finish		; if not, branch
0002096A 4238 F7D6                  		clr.b	(f_endactbonus).w
00020978 7200                       		moveq	#0,d1
0002097A 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0002097E 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020982 7200                       		moveq	#0,d1
00020984 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
00020988 6100 0000                  		bsr.w	Hud_TimeRingBonus
0002098C                            
0002098C                            	@finish:
0002098C 4E75                       		rts	
0002098E                            ; End of function HUD_Update
0002098E                            
0002098E                            ; ---------------------------------------------------------------------------
0002098E                            ; Subroutine to	load "0" on the	HUD
0002098E                            ; ---------------------------------------------------------------------------
0002098E                            
0002098E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002098E                            
0002098E                            
0002098E                            Hud_LoadZero:
00020998 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0002099C 343C 0002                  		move.w	#2,d2
000209A0 6000                       		bra.s	loc_1C83E
000209A2                            ; End of function Hud_LoadZero
000209A2                            
000209A2                            ; ---------------------------------------------------------------------------
000209A2                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
000209A2                            ; ---------------------------------------------------------------------------
000209A2                            
000209A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209A2                            
000209A2                            
000209A2                            Hud_Base:
000209A2 4DF9 00C0 0000             		lea	($C00000).l,a6
000209A8 6100 0000                  		bsr.w	Hud_Lives
000209B6 45FA 0000                  		lea	Hud_TilesBase(pc),a2
000209BA 343C 000E                  		move.w	#$E,d2
000209BE                            
000209BE                            loc_1C83E:
000209BE 43FA 0000                  		lea	Art_Hud(pc),a1
000209C2                            
000209C2                            loc_1C842:
000209C2 323C 000F                  		move.w	#$F,d1
000209C6 101A                       		move.b	(a2)+,d0
000209C8 6B00                       		bmi.s	loc_1C85E
000209CA 4880                       		ext.w	d0
000209CC EB48                       		lsl.w	#5,d0
000209CE 47F1 0000                  		lea	(a1,d0.w),a3
000209D2                            
000209D2                            loc_1C852:
000209D2 2C9B                       		move.l	(a3)+,(a6)
000209D4 51C9 FFFC                  		dbf	d1,loc_1C852
000209D8                            
000209D8                            loc_1C858:
000209D8 51CA FFE8                  		dbf	d2,loc_1C842
000209DC                            
000209DC 4E75                       		rts	
000209DE                            ; ===========================================================================
000209DE                            
000209DE                            loc_1C85E:
000209DE 2CBC 0000 0000             		move.l	#0,(a6)
000209E4 51C9 FFF8                  		dbf	d1,loc_1C85E
000209E8                            
000209E8 60EE                       		bra.s	loc_1C858
000209EA                            ; End of function Hud_Base
000209EA                            
000209EA                            ; ===========================================================================
000209EA 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
000209F6 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
000209FA                            ; ---------------------------------------------------------------------------
000209FA                            ; Subroutine to	load debug mode	numbers	patterns
000209FA                            ; ---------------------------------------------------------------------------
000209FA                            
000209FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209FA                            
000209FA                            
000209FA                            HudDb_XY:
00020A04 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
00020A08 4841                       		swap	d1
00020A0A 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
00020A0E 6100                       		bsr.s	HudDb_XY2
00020A10 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
00020A14 4841                       		swap	d1
00020A16 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
00020A1A                            ; End of function HudDb_XY
00020A1A                            
00020A1A                            
00020A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A1A                            
00020A1A                            
00020A1A                            HudDb_XY2:
00020A1A 7C07                       		moveq	#7,d6
00020A1C 43F9 0000 05FC             		lea	(Art_Text).l,a1
00020A22                            
00020A22                            HudDb_XYLoop:
00020A22 E959                       		rol.w	#4,d1
00020A24 3401                       		move.w	d1,d2
00020A26 0242 000F                  		andi.w	#$F,d2
00020A2A 0C42 000A                  		cmpi.w	#$A,d2
00020A2E 6500                       		bcs.s	loc_1C8B2
00020A30 5E42                       		addq.w	#7,d2
00020A32                            
00020A32                            loc_1C8B2:
00020A32 EB4A                       		lsl.w	#5,d2
00020A34 47F1 2000                  		lea	(a1,d2.w),a3
00020A38 2C9B                       		move.l	(a3)+,(a6)
00020A3A 2C9B                       		move.l	(a3)+,(a6)
00020A3C 2C9B                       		move.l	(a3)+,(a6)
00020A3E 2C9B                       		move.l	(a3)+,(a6)
00020A40 2C9B                       		move.l	(a3)+,(a6)
00020A42 2C9B                       		move.l	(a3)+,(a6)
00020A44 2C9B                       		move.l	(a3)+,(a6)
00020A46 2C9B                       		move.l	(a3)+,(a6)
00020A48 4841                       		swap	d1
00020A4A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00020A4E                            
00020A4E 4E75                       		rts	
00020A50                            ; End of function HudDb_XY2
00020A50                            
00020A50                            ; ---------------------------------------------------------------------------
00020A50                            ; Subroutine to	load rings numbers patterns
00020A50                            ; ---------------------------------------------------------------------------
00020A50                            
00020A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A50                            
00020A50                            
00020A50                            Hud_Rings:
00020A50 45F9 0000 0000             		lea	(Hud_100).l,a2
00020A56 7C02                       		moveq	#2,d6
00020A58 6000                       		bra.s	Hud_LoadArt
00020A5A                            ; End of function Hud_Rings
00020A5A                            
00020A5A                            ; ---------------------------------------------------------------------------
00020A5A                            ; Subroutine to	load score numbers patterns
00020A5A                            ; ---------------------------------------------------------------------------
00020A5A                            
00020A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A5A                            
00020A5A                            
00020A5A                            Hud_Score:
00020A5A 45F9 0000 0000             		lea	(Hud_100000).l,a2
00020A60 7C05                       		moveq	#5,d6
00020A62                            
00020A62                            Hud_LoadArt:
00020A62 7800                       		moveq	#0,d4
00020A64 43FA 0000                  		lea	Art_Hud(pc),a1
00020A68                            
00020A68                            Hud_ScoreLoop:
00020A68 7400                       		moveq	#0,d2
00020A6A 261A                       		move.l	(a2)+,d3
00020A6C                            
00020A6C                            loc_1C8EC:
00020A6C 9283                       		sub.l	d3,d1
00020A6E 6500                       		bcs.s	loc_1C8F4
00020A70 5242                       		addq.w	#1,d2
00020A72 60F8                       		bra.s	loc_1C8EC
00020A74                            ; ===========================================================================
00020A74                            
00020A74                            loc_1C8F4:
00020A74 D283                       		add.l	d3,d1
00020A76 4A42                       		tst.w	d2
00020A78 6700                       		beq.s	loc_1C8FE
00020A7A 383C 0001                  		move.w	#1,d4
00020A7E                            
00020A7E                            loc_1C8FE:
00020A7E 4A44                       		tst.w	d4
00020A80 6700                       		beq.s	loc_1C92C
00020A82 ED4A                       		lsl.w	#6,d2
00020A84 2D40 0004                  		move.l	d0,4(a6)
00020A88 47F1 2000                  		lea	(a1,d2.w),a3
00020A8C 2C9B                       		move.l	(a3)+,(a6)
00020A8E 2C9B                       		move.l	(a3)+,(a6)
00020A90 2C9B                       		move.l	(a3)+,(a6)
00020A92 2C9B                       		move.l	(a3)+,(a6)
00020A94 2C9B                       		move.l	(a3)+,(a6)
00020A96 2C9B                       		move.l	(a3)+,(a6)
00020A98 2C9B                       		move.l	(a3)+,(a6)
00020A9A 2C9B                       		move.l	(a3)+,(a6)
00020A9C 2C9B                       		move.l	(a3)+,(a6)
00020A9E 2C9B                       		move.l	(a3)+,(a6)
00020AA0 2C9B                       		move.l	(a3)+,(a6)
00020AA2 2C9B                       		move.l	(a3)+,(a6)
00020AA4 2C9B                       		move.l	(a3)+,(a6)
00020AA6 2C9B                       		move.l	(a3)+,(a6)
00020AA8 2C9B                       		move.l	(a3)+,(a6)
00020AAA 2C9B                       		move.l	(a3)+,(a6)
00020AAC                            
00020AAC                            loc_1C92C:
00020AAC 0680 0040 0000             		addi.l	#$400000,d0
00020AB2 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
00020AB6                            
00020AB6 4E75                       		rts	
00020AB8                            
00020AB8                            ; End of function Hud_Score
00020AB8                            ; End of function Hud_Score
00020AB8                            
00020AB8                            ; ---------------------------------------------------------------------------
00020AB8                            ; Subroutine to	load countdown numbers on the continue screen
00020AB8                            ; ---------------------------------------------------------------------------
00020AB8                            
00020AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AB8                            
00020AB8                            
00020AB8                            ContScrCounter:
00020AC2 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00020AC8 45F9 0000 0000             		lea	(Hud_10).l,a2
00020ACE 7C01                       		moveq	#1,d6
00020AD0 7800                       		moveq	#0,d4
00020AD2 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
00020AD6                            
00020AD6                            ContScr_Loop:
00020AD6 7400                       		moveq	#0,d2
00020AD8 261A                       		move.l	(a2)+,d3
00020ADA                            
00020ADA                            loc_1C95A:
00020ADA 9283                       		sub.l	d3,d1
00020ADC 6500                       		blo.s	loc_1C962
00020ADE 5242                       		addq.w	#1,d2
00020AE0 60F8                       		bra.s	loc_1C95A
00020AE2                            ; ===========================================================================
00020AE2                            
00020AE2                            loc_1C962:
00020AE2 D283                       		add.l	d3,d1
00020AE4 ED4A                       		lsl.w	#6,d2
00020AE6 47F1 2000                  		lea	(a1,d2.w),a3
00020AEA 2C9B                       		move.l	(a3)+,(a6)
00020AEC 2C9B                       		move.l	(a3)+,(a6)
00020AEE 2C9B                       		move.l	(a3)+,(a6)
00020AF0 2C9B                       		move.l	(a3)+,(a6)
00020AF2 2C9B                       		move.l	(a3)+,(a6)
00020AF4 2C9B                       		move.l	(a3)+,(a6)
00020AF6 2C9B                       		move.l	(a3)+,(a6)
00020AF8 2C9B                       		move.l	(a3)+,(a6)
00020AFA 2C9B                       		move.l	(a3)+,(a6)
00020AFC 2C9B                       		move.l	(a3)+,(a6)
00020AFE 2C9B                       		move.l	(a3)+,(a6)
00020B00 2C9B                       		move.l	(a3)+,(a6)
00020B02 2C9B                       		move.l	(a3)+,(a6)
00020B04 2C9B                       		move.l	(a3)+,(a6)
00020B06 2C9B                       		move.l	(a3)+,(a6)
00020B08 2C9B                       		move.l	(a3)+,(a6)
00020B0A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00020B0E                            
00020B0E 4E75                       		rts	
00020B10                            ; End of function ContScrCounter
00020B10                            
00020B10                            ; ===========================================================================
00020B10                            
00020B10                            		include	"_inc\HUD (part 2).asm"
00020B10                            ; ---------------------------------------------------------------------------
00020B10                            ; HUD counter sizes
00020B10                            ; ---------------------------------------------------------------------------
00020B10 0001 86A0                  Hud_100000:	dc.l 100000
00020B14 0000 2710                  Hud_10000:	dc.l 10000
00020B18 0000 03E8                  Hud_1000:	dc.l 1000
00020B1C 0000 0064                  Hud_100:	dc.l 100
00020B20 0000 000A                  Hud_10:		dc.l 10
00020B24 0000 0001                  Hud_1:		dc.l 1
00020B28                            
00020B28                            ; ---------------------------------------------------------------------------
00020B28                            ; Subroutine to	load time numbers patterns
00020B28                            ; ---------------------------------------------------------------------------
00020B28                            
00020B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B28                            
00020B28                            
00020B28                            Hud_Mins:
00020B28 45F9 0002 0B24             		lea	(Hud_1).l,a2
00020B2E 7C00                       		moveq	#0,d6
00020B30 6000                       		bra.s	loc_1C9BA
00020B32                            ; End of function Hud_Mins
00020B32                            
00020B32                            
00020B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B32                            
00020B32                            
00020B32                            Hud_Secs:
00020B32 45F9 0002 0B20             		lea	(Hud_10).l,a2
00020B38 7C01                       		moveq	#1,d6
00020B3A                            
00020B3A                            loc_1C9BA:
00020B3A 7800                       		moveq	#0,d4
00020B3C 43FA 0000                  		lea	Art_Hud(pc),a1
00020B40                            
00020B40                            Hud_TimeLoop:
00020B40 7400                       		moveq	#0,d2
00020B42 261A                       		move.l	(a2)+,d3
00020B44                            
00020B44                            loc_1C9C4:
00020B44 9283                       		sub.l	d3,d1
00020B46 6500                       		bcs.s	loc_1C9CC
00020B48 5242                       		addq.w	#1,d2
00020B4A 60F8                       		bra.s	loc_1C9C4
00020B4C                            ; ===========================================================================
00020B4C                            
00020B4C                            loc_1C9CC:
00020B4C D283                       		add.l	d3,d1
00020B4E 4A42                       		tst.w	d2
00020B50 6700                       		beq.s	loc_1C9D6
00020B52 383C 0001                  		move.w	#1,d4
00020B56                            
00020B56                            loc_1C9D6:
00020B56 ED4A                       		lsl.w	#6,d2
00020B58 2D40 0004                  		move.l	d0,4(a6)
00020B5C 47F1 2000                  		lea	(a1,d2.w),a3
00020B60 2C9B                       		move.l	(a3)+,(a6)
00020B62 2C9B                       		move.l	(a3)+,(a6)
00020B64 2C9B                       		move.l	(a3)+,(a6)
00020B66 2C9B                       		move.l	(a3)+,(a6)
00020B68 2C9B                       		move.l	(a3)+,(a6)
00020B6A 2C9B                       		move.l	(a3)+,(a6)
00020B6C 2C9B                       		move.l	(a3)+,(a6)
00020B6E 2C9B                       		move.l	(a3)+,(a6)
00020B70 2C9B                       		move.l	(a3)+,(a6)
00020B72 2C9B                       		move.l	(a3)+,(a6)
00020B74 2C9B                       		move.l	(a3)+,(a6)
00020B76 2C9B                       		move.l	(a3)+,(a6)
00020B78 2C9B                       		move.l	(a3)+,(a6)
00020B7A 2C9B                       		move.l	(a3)+,(a6)
00020B7C 2C9B                       		move.l	(a3)+,(a6)
00020B7E 2C9B                       		move.l	(a3)+,(a6)
00020B80 0680 0040 0000             		addi.l	#$400000,d0
00020B86 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00020B8A                            
00020B8A 4E75                       		rts	
00020B8C                            ; End of function Hud_Secs
00020B8C                            
00020B8C                            ; ---------------------------------------------------------------------------
00020B8C                            ; Subroutine to	load time/ring bonus numbers patterns
00020B8C                            ; ---------------------------------------------------------------------------
00020B8C                            
00020B8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B8C                            
00020B8C                            
00020B8C                            Hud_TimeRingBonus:
00020B8C 45F9 0002 0B18             		lea	(Hud_1000).l,a2
00020B92 7C03                       		moveq	#3,d6
00020B94 7800                       		moveq	#0,d4
00020B96 43FA 0000                  		lea	Art_Hud(pc),a1
00020B9A                            
00020B9A                            Hud_BonusLoop:
00020B9A 7400                       		moveq	#0,d2
00020B9C 261A                       		move.l	(a2)+,d3
00020B9E                            
00020B9E                            loc_1CA1E:
00020B9E 9283                       		sub.l	d3,d1
00020BA0 6500                       		bcs.s	loc_1CA26
00020BA2 5242                       		addq.w	#1,d2
00020BA4 60F8                       		bra.s	loc_1CA1E
00020BA6                            ; ===========================================================================
00020BA6                            
00020BA6                            loc_1CA26:
00020BA6 D283                       		add.l	d3,d1
00020BA8 4A42                       		tst.w	d2
00020BAA 6700                       		beq.s	loc_1CA30
00020BAC 383C 0001                  		move.w	#1,d4
00020BB0                            
00020BB0                            loc_1CA30:
00020BB0 4A44                       		tst.w	d4
00020BB2 6700                       		beq.s	Hud_ClrBonus
00020BB4 ED4A                       		lsl.w	#6,d2
00020BB6 47F1 2000                  		lea	(a1,d2.w),a3
00020BBA 2C9B                       		move.l	(a3)+,(a6)
00020BBC 2C9B                       		move.l	(a3)+,(a6)
00020BBE 2C9B                       		move.l	(a3)+,(a6)
00020BC0 2C9B                       		move.l	(a3)+,(a6)
00020BC2 2C9B                       		move.l	(a3)+,(a6)
00020BC4 2C9B                       		move.l	(a3)+,(a6)
00020BC6 2C9B                       		move.l	(a3)+,(a6)
00020BC8 2C9B                       		move.l	(a3)+,(a6)
00020BCA 2C9B                       		move.l	(a3)+,(a6)
00020BCC 2C9B                       		move.l	(a3)+,(a6)
00020BCE 2C9B                       		move.l	(a3)+,(a6)
00020BD0 2C9B                       		move.l	(a3)+,(a6)
00020BD2 2C9B                       		move.l	(a3)+,(a6)
00020BD4 2C9B                       		move.l	(a3)+,(a6)
00020BD6 2C9B                       		move.l	(a3)+,(a6)
00020BD8 2C9B                       		move.l	(a3)+,(a6)
00020BDA                            
00020BDA                            loc_1CA5A:
00020BDA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00020BDE                            
00020BDE 4E75                       		rts	
00020BE0                            ; ===========================================================================
00020BE0                            
00020BE0                            Hud_ClrBonus:
00020BE0 7A0F                       		moveq	#$F,d5
00020BE2                            
00020BE2                            Hud_ClrBonusLoop:
00020BE2 2CBC 0000 0000             		move.l	#0,(a6)
00020BE8 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00020BEC                            
00020BEC 60EC                       		bra.s	loc_1CA5A
00020BEE                            ; End of function Hud_TimeRingBonus
00020BEE                            
00020BEE                            ; ---------------------------------------------------------------------------
00020BEE                            ; Subroutine to	load uncompressed lives	counter	patterns
00020BEE                            ; ---------------------------------------------------------------------------
00020BEE                            
00020BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020BEE                            
00020BEE                            
00020BEE                            Hud_Lives:
00020BEE 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
00020BF4 7200                       		moveq	#0,d1
00020BF6 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
00020BFA 45F9 0002 0B20             		lea	(Hud_10).l,a2
00020C00 7C01                       		moveq	#1,d6
00020C02 7800                       		moveq	#0,d4
00020C04 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020C08                            		
00020C08                            
00020C08                            Hud_LivesLoop:
00020C08 2D40 0004                  		move.l	d0,4(a6)
00020C0C 7400                       		moveq	#0,d2
00020C0E 261A                       		move.l	(a2)+,d3
00020C10                            
00020C10                            loc_1CA90:
00020C10 9283                       		sub.l	d3,d1
00020C12 6500                       		bcs.s	loc_1CA98
00020C14 5242                       		addq.w	#1,d2
00020C16 60F8                       		bra.s	loc_1CA90
00020C18                            ; ===========================================================================
00020C18                            
00020C18                            loc_1CA98:
00020C18 D283                       		add.l	d3,d1
00020C1A 4A42                       		tst.w	d2
00020C1C 6700                       		beq.s	loc_1CAA2
00020C1E 383C 0001                  		move.w	#1,d4
00020C22                            
00020C22                            loc_1CAA2:
00020C22 4A44                       		tst.w	d4
00020C24 6700                       		beq.s	Hud_ClrLives
00020C26                            
00020C26                            loc_1CAA6:
00020C26 EB4A                       		lsl.w	#5,d2
00020C28 47F1 2000                  		lea	(a1,d2.w),a3
00020C2C 2C9B                       		move.l	(a3)+,(a6)
00020C2E 2C9B                       		move.l	(a3)+,(a6)
00020C30 2C9B                       		move.l	(a3)+,(a6)
00020C32 2C9B                       		move.l	(a3)+,(a6)
00020C34 2C9B                       		move.l	(a3)+,(a6)
00020C36 2C9B                       		move.l	(a3)+,(a6)
00020C38 2C9B                       		move.l	(a3)+,(a6)
00020C3A 2C9B                       		move.l	(a3)+,(a6)
00020C3C                            
00020C3C                            loc_1CABC:
00020C3C 0680 0040 0000             		addi.l	#$400000,d0
00020C42 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020C46                            
00020C46 4E75                       		rts	
00020C48                            ; ===========================================================================
00020C48                            
00020C48                            Hud_ClrLives:
00020C48 4A46                       		tst.w	d6
00020C4A 67DA                       		beq.s	loc_1CAA6
00020C4C 7A07                       		moveq	#7,d5
00020C4E                            
00020C4E                            Hud_ClrLivesLoop:
00020C4E 2CBC 0000 0000             		move.l	#0,(a6)
00020C54 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020C58 60E2                       		bra.s	loc_1CABC
00020C5A                            ; End of function Hud_Lives
00020C5A                            ; End of function Hud_Lives
00020C5A                            
00020C5A                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020F5A                            		even
00020F5A                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0002109A                            		even
0002109A                            
0002109A                            		include	"_incObj\DebugMode.asm"
0002109A                            ; ---------------------------------------------------------------------------
0002109A                            ; When debug mode is currently in use
0002109A                            ; ---------------------------------------------------------------------------
0002109A                            
0002109A                            DebugMode:
0002109A 7000                       		moveq	#0,d0
0002109C 1038 FE08                  		move.b	(v_debuguse).w,d0
000210A0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
000210A4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
000210A8                            ; ===========================================================================
000210A8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
000210AA 0000                       		dc.w Debug_Action-Debug_Index
000210AC                            ; ===========================================================================
000210AC                            
000210AC                            Debug_Main:	; Routine 0
000210AC 5438 FE08                  		addq.b	#2,(v_debuguse).w
000210B0 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
000210B6 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
000210BC 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
000210C2 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000210C8 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000210CE 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000210D4 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000210DA 117C 0000 001A             		move.b	#0,obFrame(a0)
000210E0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000210E6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000210EC 6600                       		bne.s	@islevel	; if not, branch
000210EE                            
000210EE 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000210F4 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000210FA 7006                       		moveq	#6,d0		; use 6th debug	item list
000210FC 6000                       		bra.s	@selectlist
000210FE                            ; ===========================================================================
000210FE                            
000210FE                            @islevel:
000210FE 7000                       		moveq	#0,d0
00021100 1038 FE10                  		move.b	(v_zone).w,d0
00021104                            
00021104                            @selectlist:
00021104 45F9 0000 0000             		lea	(DebugList).l,a2
0002110A D040                       		add.w	d0,d0
0002110C D4F2 0000                  		adda.w	(a2,d0.w),a2
00021110 3C1A                       		move.w	(a2)+,d6
00021112 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00021116 6200                       		bhi.s	@noreset	; if not, branch
00021118 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
0002111E                            
0002111E                            	@noreset:
0002111E 6100 0000                  		bsr.w	Debug_ShowItem
00021122 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00021128 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
0002112E                            
0002112E                            Debug_Action:	; Routine 2
0002112E 7006                       		moveq	#6,d0
00021130 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00021136 6700                       		beq.s	@isntlevel
00021138                            
00021138 7000                       		moveq	#0,d0
0002113A 1038 FE10                  		move.b	(v_zone).w,d0
0002113E                            
0002113E                            	@isntlevel:
0002113E 45F9 0000 0000             		lea	(DebugList).l,a2
00021144 D040                       		add.w	d0,d0
00021146 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002114A 3C1A                       		move.w	(a2)+,d6
0002114C 6100 0000                  		bsr.w	Debug_Control
00021150 4EF9 0000 F858             		jmp	(DisplaySprite).l
00021156                            
00021156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021156                            
00021156                            
00021156                            Debug_Control:
00021156 7800                       		moveq	#0,d4
00021158 323C 0001                  		move.w	#1,d1
0002115C 1838 F605                  		move.b	(v_jpadpress1).w,d4
00021160 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00021164 6600                       		bne.s	@dirpressed	; if yes, branch
00021166                            
00021166 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002116A 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0002116E 6600                       		bne.s	@dirheld	; if yes, branch
00021170                            
00021170 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00021176 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0002117C 6000 0000                  		bra.w	Debug_ChgItem
00021180                            ; ===========================================================================
00021180                            
00021180                            @dirheld:
00021180 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00021184 6600                       		bne.s	loc_1D01C
00021186 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0002118C 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00021190 6600                       		bne.s	@dirpressed
00021192 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00021198                            
00021198                            @dirpressed:
00021198 1838 F604                  		move.b	(v_jpadhold1).w,d4
0002119C                            
0002119C                            loc_1D01C:
0002119C 7200                       		moveq	#0,d1
0002119E 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000211A2 5241                       		addq.w	#1,d1
000211A4 4841                       		swap	d1
000211A6 E881                       		asr.l	#4,d1
000211A8 2428 000C                  		move.l	obY(a0),d2
000211AC 2628 0008                  		move.l	obX(a0),d3
000211B0 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000211B4 6700                       		beq.s	loc_1D03C	; if not, branch
000211B6 9481                       		sub.l	d1,d2
000211B8 6400                       		bcc.s	loc_1D03C
000211BA 7400                       		moveq	#0,d2
000211BC                            
000211BC                            loc_1D03C:
000211BC 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000211C0 6700                       		beq.s	loc_1D052	; if not, branch
000211C2 D481                       		add.l	d1,d2
000211C4 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000211CA 6500                       		bcs.s	loc_1D052
000211CC 243C 07FF 0000             		move.l	#$7FF0000,d2
000211D2                            
000211D2                            loc_1D052:
000211D2 0804 0002                  		btst	#bitL,d4
000211D6 6700                       		beq.s	loc_1D05E
000211D8 9681                       		sub.l	d1,d3
000211DA 6400                       		bcc.s	loc_1D05E
000211DC 7600                       		moveq	#0,d3
000211DE                            
000211DE                            loc_1D05E:
000211DE 0804 0003                  		btst	#bitR,d4
000211E2 6700                       		beq.s	loc_1D066
000211E4 D681                       		add.l	d1,d3
000211E6                            
000211E6                            loc_1D066:
000211E6 2142 000C                  		move.l	d2,obY(a0)
000211EA 2143 0008                  		move.l	d3,obX(a0)
000211EE                            
000211EE                            Debug_ChgItem:
000211EE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000211F4 6700                       		beq.s	@createitem	; if not, branch
000211F6 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000211FC 6700                       		beq.s	@nextitem	; if not, branch
000211FE 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00021202 6400                       		bcc.s	@display
00021204 DD38 FE06                  		add.b	d6,(v_debugitem).w
00021208 6000                       		bra.s	@display
0002120A                            ; ===========================================================================
0002120A                            
0002120A                            @nextitem:
0002120A 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00021210 6700                       		beq.s	@createitem	; if not, branch
00021212 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00021216 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
0002121A 6200                       		bhi.s	@display
0002121C 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00021222                            
00021222                            	@display:
00021222 6000 0000                  		bra.w	Debug_ShowItem
00021226                            ; ===========================================================================
00021226                            
00021226                            @createitem:
00021226 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002122C 6700                       		beq.s	@backtonormal	; if not, branch
0002122E 4EB9 0000 FDF2             		jsr	(FindFreeObj).l
00021234 6600                       		bne.s	@backtonormal
00021236 3368 0008 0008             		move.w	obX(a0),obX(a1)
0002123C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00021242 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00021246 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002124C 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00021252 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00021258 7000                       		moveq	#0,d0
0002125A 1038 FE06                  		move.b	(v_debugitem).w,d0
0002125E E748                       		lsl.w	#3,d0
00021260 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00021266 4E75                       		rts	
00021268                            ; ===========================================================================
00021268                            
00021268                            @backtonormal:
00021268 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0002126E 6700                       		beq.s	@stayindebug	; if not, branch
00021270 7000                       		moveq	#0,d0
00021272 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00021276 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002127E 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00021284 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00021288 3140 000A                  		move.w	d0,obX+2(a0)
0002128C 3140 000E                  		move.w	d0,obY+2(a0)
00021290 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00021296 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0002129C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000212A2 6600                       		bne.s	@stayindebug	; if not, branch
000212A4                            
000212A4 4278 F780                  		clr.w	(v_ssangle).w
000212A8 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000212AE 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000212B6 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000212BC 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000212C2 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000212C8 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000212CE                            
000212CE                            	@stayindebug:
000212CE 4E75                       		rts	
000212D0                            ; End of function Debug_Control
000212D0                            
000212D0                            
000212D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000212D0                            
000212D0                            
000212D0                            Debug_ShowItem:
000212D0 7000                       		moveq	#0,d0
000212D2 1038 FE06                  		move.b	(v_debugitem).w,d0
000212D6 E748                       		lsl.w	#3,d0
000212D8 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000212DE 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000212E4 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000212EA 4E75                       		rts	
000212EC                            ; End of function Debug_ShowItem
000212EC                            ; End of function Debug_ShowItem
000212EC                            		include	"_inc\DebugList.asm"
000212EC                            ; ---------------------------------------------------------------------------
000212EC                            ; Debug	mode item lists
000212EC                            ; ---------------------------------------------------------------------------
000212EC                            DebugList:
000212EC 0000                       	dc.w @GHZ-DebugList
000212EE 0000                       	dc.w @LZ-DebugList
000212F0 0000                       	dc.w @MZ-DebugList
000212F2 0000                       	dc.w @SLZ-DebugList
000212F4 0000                       	dc.w @SYZ-DebugList
000212F6 0000                       	dc.w @SBZ-DebugList
000212F8 0000                       	dc.w @Ending-DebugList
000212FA                            
000212FA                            dbug:	macro map,object,subtype,frame,vram
000212FA                            	dc.l map+(object<<24)
000212FA                            	dc.b subtype,frame
000212FA                            	dc.w vram
000212FA                            	endm
000212FA                            
000212FA                            @GHZ:
000212FA 0000                       	dc.w (@GHZend-@GHZ-2)/8
000212FC                            
000212FC                            ;		mappings	object		subtype	frame	VRAM setting
000212FC 2500 BE5A 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00021304 2600 C61E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002130C 1F00 B23A 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00021314 2200 B6C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002131C 2B00 CDC0 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00021324 3600 F1FE 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002132C 1800 9994 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00021334 3B00 F324 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0002133C 4001 19FE 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00021344 4101 0084 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002134C 4201 02AE 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00021354 4401 05C2 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0002135C 7901 AE06 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021364 4B00 BEAA 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0002136C 7D01 AFC8 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00021374                            	@GHZend:
00021374                            
00021374                            @LZ:
00021374 0000                       	dc.w (@LZend-@LZ-2)/8
00021376                            
00021376                            ;		mappings	object		subtype	frame	VRAM setting
00021376 2500 BE5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002137E 2600 C61E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021386 4101 0084 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002138E 2C00 CE66 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00021396 2D00 D052 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002139E 1601 43C0 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000213A6 1601 43C0 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000213AE 3300 E4D0 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000213B6 3200 E090 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000213BE 3600 F1FE 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000213C6 5201 2496 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000213CE 6101 45E8 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000213D6 6101 45E8 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000213DE 6101 45E8 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000213E6 6201 473C 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000213EE 6101 45E8 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000213F6 6101 45E8 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000213FE 6301 4A9E 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00021406 6001 430A 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0002140E 6401 4DEC 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00021416 6501 4F74 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0002141E 6501 4F74 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00021426 0B01 3756 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
0002142E 0C01 3826 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00021436 7901 AE06 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002143E                            	@LZend:
0002143E                            
0002143E                            @MZ:
0002143E 0000                       	dc.w (@MZend-@MZ-2)/8
00021440                            
00021440                            ;		mappings	object		subtype	frame	VRAM setting
00021440 2500 BE5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021448 2600 C61E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021450 2200 B6C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021458 3600 F1FE 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021460 4101 0084 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021468 1300 D560 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00021470 4601 0C7A 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00021478 6E01 9E86 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00021480 6A01 97F6 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00021488 3300 E4D0 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00021490 1E00 A934 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00021498 5101 21BC 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000214A0 5201 2440 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000214A8 5300 9FD6 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000214B0 5401 1564 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000214B8 5501 2634 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000214C0 7801 AA5A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000214C8 7901 AE06 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000214D0                            	@MZend:
000214D0                            
000214D0                            @SLZ:
000214D0 0000                       	dc.w (@SLZend-@SLZ-2)/8
000214D2                            
000214D2                            ;		mappings	object		subtype	frame	VRAM setting
000214D2 2500 BE5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000214DA 2600 C61E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000214E2 5901 317E 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000214EA 5300 9FD6 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000214F2 1800 99F2 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000214FA 5A01 32B8 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00021502 5B01 3470 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
0002150A 5D01 3A44 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00021512 5E01 3DD6 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
0002151A 4101 0084 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021522 1300 D560 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
0002152A 1C00 A108 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00021532 5F01 4054 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002153A 6001 430A 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00021542 7901 AE06 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002154A                            	@SLZend:
0002154A                            
0002154A                            @SYZ:
0002154A 0000                       	dc.w (@SYZend-@SYZ-2)/8
0002154C                            
0002154C                            ;		mappings	object		subtype	frame	VRAM setting
0002154C 2500 BE5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021554 2600 C61E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002155C 3600 F1FE 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021564 4101 0084 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002156C 4301 0514 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00021574 1201 0CF8 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
0002157C 4701 0E9C 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00021584 1F00 B23A 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002158C 2200 B6C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021594 5001 1C8E 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
0002159C 1800 99E0 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000215A4 5601 2B3E 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000215AC 3200 E090 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000215B4 7801 AA5A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000215BC 7901 AE06 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000215C4                            	@SYZend:
000215C4                            
000215C4                            @SBZ:
000215C4 0000                       	dc.w (@SBZend-@SBZ-2)/8
000215C6                            
000215C6                            ;		mappings	object		subtype	frame	VRAM setting
000215C6 2500 BE5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000215CE 2600 C61E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000215D6 5F01 4054 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000215DE 6001 430A 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000215E6 7801 AA5A 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000215EE 1501 2EDA 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000215F6 6701 92E4 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000215FE 5201 2440 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00021606 3200 E090 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002160E 6901 953E 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00021616 6901 9598 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
0002161E 6A01 97F6 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00021626 5300 9FD6 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
0002162E 5201 2440 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00021636 6B01 9BC6 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
0002163E 2A00 A4C6 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00021646 6B01 9BC6 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
0002164E 6A01 97F6 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00021656 6B01 9BC6 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
0002165E 6A01 97F6 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00021666 6B01 9BC6 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
0002166E 6C01 9DA2 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00021676 6D01 096C 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
0002167E 6D01 096C 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00021686 6E01 9E86 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002168E 7001 A2D0 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00021696 7101 38EA 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
0002169E 1E00 A934 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000216A6 7901 AE06 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000216AE                            	@SBZend:
000216AE                            
000216AE                            @Ending:
000216AE 0000                       	dc.w (@Endingend-@Ending-2)/8
000216B0                            
000216B0                            ;		mappings	object		subtype	frame	VRAM setting
000216B0 2500 BE5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000216B8 2500 BE5A 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000216C0                            	@Endingend:
000216C0                            
000216C0                            	even
000216C0                            	even
000216C0                            		include	"_inc\LevelHeaders.asm"
000216C0                            ; ---------------------------------------------------------------------------
000216C0                            ; Level Headers
000216C0                            ; ---------------------------------------------------------------------------
000216C0                            
000216C0                            LevelHeaders:
000216C0                            
000216C0                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000216C0                            	dc.l (plc1<<24)+lvlgfx
000216C0                            	dc.l (plc2<<24)+sixteen
000216C0                            	dc.l twofivesix
000216C0                            	dc.b 0, music, pal, pal
000216C0                            	endm
000216C0                            
000216C0                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000216C0                            ; music (unused), palette (unused), palette
000216C0                            
000216C0                            ;		1st PLC				2nd PLC				256x256 data			palette
000216C0                            ;				level gfx*			16x16 data			music*
000216C0                            
000216C0 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000216D0 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
000216E0 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
000216F0 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00021700 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00021710 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00021720 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00021730                            	even
00021730                            
00021730                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021730                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021730                            		include	"_inc\Pattern Load Cues.asm"
00021730                            ; ---------------------------------------------------------------------------
00021730                            ; Pattern load cues
00021730                            ; ---------------------------------------------------------------------------
00021730                            ArtLoadCues:
00021730                            
00021730 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00021732 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00021734 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00021736 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00021738                            PLC_Levels:
00021738 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0002173A 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
0002173C 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
0002173E 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00021740 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00021742 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00021744 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00021746 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00021748 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0002174A 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
0002174C 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
0002174E 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00021750 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00021752 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00021754 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00021756 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00021758 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
0002175A                            PLC_Animals:
0002175A 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
0002175C 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
0002175E 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00021760 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00021762 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00021764 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00021766 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00021768 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
0002176A 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
0002176C 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
0002176E 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00021770 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00021772 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
00021774 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
00021776                            
00021776                            plcm:	macro gfx,vram
00021776                            	dc.l gfx
00021776                            	dc.w vram
00021776                            	endm
00021776                            
00021776                            ; ---------------------------------------------------------------------------
00021776                            ; Pattern load cues - standard block 1
00021776                            ; ---------------------------------------------------------------------------
00021776 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00021778 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
0002177E 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00021784 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
0002178A 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
00021790                            	PLC_Mainend:
00021790                            ; ---------------------------------------------------------------------------
00021790                            ; Pattern load cues - standard block 2
00021790                            ; ---------------------------------------------------------------------------
00021790 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00021792 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00021798                            	PLC_Main2end:
00021798                            ; ---------------------------------------------------------------------------
00021798                            ; Pattern load cues - explosion
00021798                            ; ---------------------------------------------------------------------------
00021798 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
0002179A 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000217A0                            	PLC_Explodeend:
000217A0                            ; ---------------------------------------------------------------------------
000217A0                            ; Pattern load cues - game/time	over
000217A0                            ; ---------------------------------------------------------------------------
000217A0 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000217A2 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000217A8                            	PLC_GameOverend:
000217A8                            ; ---------------------------------------------------------------------------
000217A8                            ; Pattern load cues - Green Hill
000217A8                            ; ---------------------------------------------------------------------------
000217A8 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000217AA 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000217B0 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000217B6 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000217BC 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
000217C2 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
000217C8 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000217CE 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000217D4 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
000217DA 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
000217E0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000217E6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000217EC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000217F2                            
000217F2 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
000217F4 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000217FA 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00021800 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00021806 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
0002180C 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00021812 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00021818                            	PLC_GHZ2end:
00021818                            ; ---------------------------------------------------------------------------
00021818                            ; Pattern load cues - Labyrinth
00021818                            ; ---------------------------------------------------------------------------
00021818 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
0002181A 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00021820 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
00021826                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00021826 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
0002182C 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00021832 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00021838 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
0002183E 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00021844 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
0002184A 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00021850                            
00021850 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00021852 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00021858 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
0002185E                            		;plcm	Nem_LzWheel, $7EC0	; wheel
0002185E                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
0002185E 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00021864 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
0002186A 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00021870 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00021876 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
0002187C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021882 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021888 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002188E                            	PLC_LZ2end:
0002188E                            ; ---------------------------------------------------------------------------
0002188E                            ; Pattern load cues - Marble
0002188E                            ; ---------------------------------------------------------------------------
0002188E 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00021890 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00021896 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
0002189C 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
000218A2 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000218A8                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
000218A8 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000218AE 0000 0000 8000             		plcm	Nem_Bomb, $8000
000218B4 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
000218BA 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
000218C0 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
000218C6                            
000218C6 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
000218C8 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000218CE 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
000218D4                            		;plcm	Nem_MzSwitch, $A260	; switch
000218D4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000218DA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000218E0 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000218E6 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
000218EC 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
000218F2                            	PLC_MZ2end:
000218F2                            ; ---------------------------------------------------------------------------
000218F2                            ; Pattern load cues - Star Light
000218F2                            ; ---------------------------------------------------------------------------
000218F2 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
000218F4 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
000218FA 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00021900 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00021906 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
0002190C 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00021912 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00021918 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002191E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021924 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002192A                            
0002192A 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
0002192C 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00021932 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00021938 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
0002193E 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00021944 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
0002194A 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00021950                            	PLC_SLZ2end:
00021950                            ; ---------------------------------------------------------------------------
00021950                            ; Pattern load cues - Spring Yard
00021950                            ; ---------------------------------------------------------------------------
00021950 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00021952 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00021958                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00021958                            		;plcm	Nem_SbzDoor1, $5D40	; door
00021958 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
0002195E 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00021964                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00021964 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
0002196A 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00021970 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00021976 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
0002197C 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
00021982 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00021988                            
00021988 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
0002198A                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
0002198A 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00021990 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00021996 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
0002199C                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
0002199C 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
000219A2                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
000219A2 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000219A8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000219AE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000219B4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000219BA                            	PLC_SYZ2end:
000219BA                            ; ---------------------------------------------------------------------------
000219BA                            ; Pattern load cues - Scrap Brain
000219BA                            ; ---------------------------------------------------------------------------
000219BA 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
000219BC 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
000219C2                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
000219C2                            		;plcm	Nem_SbzDoor1, $5D00	; door
000219C2                            		;plcm	Nem_Girder, $5E00	; girder
000219C2 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
000219C8 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
000219CE                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
000219CE 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
000219D4 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
000219DA 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
000219E0 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
000219E6                            
000219E6 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
000219E8 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
000219EE 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
000219F4 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
000219FA                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
000219FA 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00021A00 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00021A06 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00021A0C 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00021A12 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00021A18 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021A1E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021A24 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021A2A                            	PLC_SBZ2end:
00021A2A                            ; ---------------------------------------------------------------------------
00021A2A                            ; Pattern load cues - title card
00021A2A                            ; ---------------------------------------------------------------------------
00021A2A 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00021A2C 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00021A32                            	PLC_TitleCardend:
00021A32                            ; ---------------------------------------------------------------------------
00021A32                            ; Pattern load cues - act 3 boss
00021A32                            ; ---------------------------------------------------------------------------
00021A32 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021A34 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021A3A 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021A40 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021A46                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00021A46                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00021A46 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021A4C 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00021A52                            	PLC_Bossend:
00021A52                            ; ---------------------------------------------------------------------------
00021A52                            ; Pattern load cues - act 1/2 signpost
00021A52                            ; ---------------------------------------------------------------------------
00021A52 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00021A54 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00021A5A 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00021A60 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00021A66                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00021A66                            	PLC_Signpostend:
00021A66                            ; ---------------------------------------------------------------------------
00021A66                            ; Pattern load cues - beta special stage warp effect
00021A66                            ; ---------------------------------------------------------------------------
00021A66                            PLC_Warp:
00021A66                            	PLC_Warpend:
00021A66                            ; ---------------------------------------------------------------------------
00021A66                            ; Pattern load cues - special stage
00021A66                            ; ---------------------------------------------------------------------------
00021A66 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00021A68 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00021A6E 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00021A74 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00021A7A 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00021A80 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00021A86 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00021A8C 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00021A92 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00021A98 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00021A9E 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00021AA4 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00021AAA 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00021AB0 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00021AB6 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00021ABC                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00021ABC                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00021ABC                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00021ABC                            	PLC_SpeStageend:
00021ABC                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00021ABC                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00021ABC                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00021ABC                            ; ---------------------------------------------------------------------------
00021ABC                            ; Pattern load cues - GHZ animals
00021ABC                            ; ---------------------------------------------------------------------------
00021ABC 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00021ABE 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00021AC4 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021ACA                            	PLC_GHZAnimalsend:
00021ACA                            ; ---------------------------------------------------------------------------
00021ACA                            ; Pattern load cues - LZ animals
00021ACA                            ; ---------------------------------------------------------------------------
00021ACA 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00021ACC 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00021AD2 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00021AD8                            	PLC_LZAnimalsend:
00021AD8                            ; ---------------------------------------------------------------------------
00021AD8                            ; Pattern load cues - MZ animals
00021AD8                            ; ---------------------------------------------------------------------------
00021AD8 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00021ADA 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00021AE0 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00021AE6                            	PLC_MZAnimalsend:
00021AE6                            ; ---------------------------------------------------------------------------
00021AE6                            ; Pattern load cues - SLZ animals
00021AE6                            ; ---------------------------------------------------------------------------
00021AE6 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00021AE8 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021AEE 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021AF4                            	PLC_SLZAnimalsend:
00021AF4                            ; ---------------------------------------------------------------------------
00021AF4                            ; Pattern load cues - SYZ animals
00021AF4                            ; ---------------------------------------------------------------------------
00021AF4 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00021AF6 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021AFC 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021B02                            	PLC_SYZAnimalsend:
00021B02                            ; ---------------------------------------------------------------------------
00021B02                            ; Pattern load cues - SBZ animals
00021B02                            ; ---------------------------------------------------------------------------
00021B02 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00021B04 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00021B0A 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021B10                            	PLC_SBZAnimalsend:
00021B10                            ; ---------------------------------------------------------------------------
00021B10                            ; Pattern load cues - special stage results screen
00021B10                            ; ---------------------------------------------------------------------------
00021B10 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021B12 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00021B18 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021B1E                            	PLC_SpeStResultend:
00021B1E                            ; ---------------------------------------------------------------------------
00021B1E                            ; Pattern load cues - ending sequence
00021B1E                            ; ---------------------------------------------------------------------------
00021B1E 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021B20 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021B26 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021B2C 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021B32                            		;plcm	Nem_EndFlower, $7400	; flowers
00021B32 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021B38 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021B3E 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021B44 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00021B4A 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021B50 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021B56 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00021B5C 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00021B62 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00021B68 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00021B6E                            	PLC_Endingend:
00021B6E                            ; ---------------------------------------------------------------------------
00021B6E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00021B6E                            ; ---------------------------------------------------------------------------
00021B6E 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00021B70 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021B76 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00021B7C 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021B82                            	PLC_TryAgainend:
00021B82                            ; ---------------------------------------------------------------------------
00021B82                            ; Pattern load cues - Eggman on SBZ 2
00021B82                            ; ---------------------------------------------------------------------------
00021B82 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021B84 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00021B8A 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021B90 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021B96                            	PLC_EggmanSBZ2end:
00021B96                            ; ---------------------------------------------------------------------------
00021B96                            ; Pattern load cues - final boss
00021B96                            ; ---------------------------------------------------------------------------
00021B96 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00021B98 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00021B9E 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00021BA4 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021BAA 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00021BB0 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021BB6                            	PLC_FZBossend:
00021BB6                            ; ---------------------------------------------------------------------------
00021BB6                            ; Pattern load cues - Eggman
00021BB6                            ; ---------------------------------------------------------------------------
00021BB6 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021BB8 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021BBE 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021BC4 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021BCA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021BD0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021BD6 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021BDC                            	PLC_Eggend:
00021BDC                            		even
00021BDC                            ; ---------------------------------------------------------------------------
00021BDC                            ; Pattern load cues - Life Icon
00021BDC                            ; ---------------------------------------------------------------------------	
00021BDC 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
00021BDE 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
00021BE4                            	PLC_LifeIcon_end: 
00021BE4                            		even	
00021BE4                            ; ---------------------------------------------------------------------------
00021BE4                            ; Pattern load cues - Life Icon (Future)
00021BE4                            ; ---------------------------------------------------------------------------	
00021BE4 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
00021BE6 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
00021BEC                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
00021BEC                            		even			
00021BEC                            ; ---------------------------------------------------------------------------
00021BEC                            ; Pattern load cue IDs
00021BEC                            ; ---------------------------------------------------------------------------
00021BEC =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00021BEC =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00021BEC =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00021BEC =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00021BEC =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00021BEC =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00021BEC =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00021BEC =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00021BEC =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00021BEC =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00021BEC =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00021BEC =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00021BEC =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00021BEC =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00021BEC =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00021BEC =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00021BEC =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00021BEC =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00021BEC =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00021BEC =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00021BEC =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00021BEC =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00021BEC =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00021BEC =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00021BEC =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00021BEC =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00021BEC =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00021BEC =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00021BEC =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00021BEC =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00021BEC =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00021BEC =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00021BEC =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
00021BEC =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
00021BEC =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021BEC =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021BEC                            
00021C00                            			dcb.b	$300,$FF
00021F00                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00022370                            			even
00022370                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002246C                            			even
0002246C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002254C                            		even
0002254C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
000239B8                            		even
000239B8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00025498                            		even
00025498                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
000254CC                            		even
000254CC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000256FE 00                         		even		
000256FE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
000257BC                            		even
000257BC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025C64                            		even
00025C64                            
00025C64                            Map_Sonic:	include	"_maps\Sonic.asm"
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            
00025C64                            SME_9IQLQ:	
00025C64 0000 0000                  		dc.w SME_9IQLQ_1EE-SME_9IQLQ, SME_9IQLQ_1EF-SME_9IQLQ	
00025C68 0000 0000                  		dc.w SME_9IQLQ_204-SME_9IQLQ, SME_9IQLQ_232-SME_9IQLQ	
00025C6C 0000 0000                  		dc.w SME_9IQLQ_265-SME_9IQLQ, SME_9IQLQ_27A-SME_9IQLQ	
00025C70 0000 0000                  		dc.w SME_9IQLQ_28A-SME_9IQLQ, SME_9IQLQ_29A-SME_9IQLQ	
00025C74 0000 0000                  		dc.w SME_9IQLQ_2AF-SME_9IQLQ, SME_9IQLQ_2BA-SME_9IQLQ	
00025C78 0000 0000                  		dc.w SME_9IQLQ_2CA-SME_9IQLQ, SME_9IQLQ_2DA-SME_9IQLQ	
00025C7C 0000 0000                  		dc.w SME_9IQLQ_2EA-SME_9IQLQ, SME_9IQLQ_2FF-SME_9IQLQ	
00025C80 0000 0000                  		dc.w SME_9IQLQ_30F-SME_9IQLQ, SME_9IQLQ_333-SME_9IQLQ	
00025C84 0000 0000                  		dc.w SME_9IQLQ_34D-SME_9IQLQ, SME_9IQLQ_358-SME_9IQLQ	
00025C88 0000 0000                  		dc.w SME_9IQLQ_368-SME_9IQLQ, SME_9IQLQ_37D-SME_9IQLQ	
00025C8C 0000 0000                  		dc.w SME_9IQLQ_388-SME_9IQLQ, SME_9IQLQ_398-SME_9IQLQ	
00025C90 0000 0000                  		dc.w SME_9IQLQ_3B2-SME_9IQLQ, SME_9IQLQ_3CC-SME_9IQLQ	
00025C94 0000 0000                  		dc.w SME_9IQLQ_3EB-SME_9IQLQ, SME_9IQLQ_400-SME_9IQLQ	
00025C98 0000 0000                  		dc.w SME_9IQLQ_410-SME_9IQLQ, SME_9IQLQ_42A-SME_9IQLQ	
00025C9C 0000 0000                  		dc.w SME_9IQLQ_43F-SME_9IQLQ, SME_9IQLQ_44F-SME_9IQLQ	
00025CA0 0000 0000                  		dc.w SME_9IQLQ_469-SME_9IQLQ, SME_9IQLQ_47E-SME_9IQLQ	
00025CA4 0000 0000                  		dc.w SME_9IQLQ_489-SME_9IQLQ, SME_9IQLQ_494-SME_9IQLQ	
00025CA8 0000 0000                  		dc.w SME_9IQLQ_4AE-SME_9IQLQ, SME_9IQLQ_4C3-SME_9IQLQ	
00025CAC 0000 0000                  		dc.w SME_9IQLQ_4CE-SME_9IQLQ, SME_9IQLQ_4DE-SME_9IQLQ	
00025CB0 0000 0000                  		dc.w SME_9IQLQ_4EE-SME_9IQLQ, SME_9IQLQ_50D-SME_9IQLQ	
00025CB4 0000 0000                  		dc.w SME_9IQLQ_52C-SME_9IQLQ, SME_9IQLQ_541-SME_9IQLQ	
00025CB8 0000 0000                  		dc.w SME_9IQLQ_551-SME_9IQLQ, SME_9IQLQ_56B-SME_9IQLQ	
00025CBC 0000 0000                  		dc.w SME_9IQLQ_580-SME_9IQLQ, SME_9IQLQ_590-SME_9IQLQ	
00025CC0 0000 0000                  		dc.w SME_9IQLQ_5AA-SME_9IQLQ, SME_9IQLQ_5B5-SME_9IQLQ	
00025CC4 0000 0000                  		dc.w SME_9IQLQ_5C0-SME_9IQLQ, SME_9IQLQ_5CB-SME_9IQLQ	
00025CC8 0000 0000                  		dc.w SME_9IQLQ_5D6-SME_9IQLQ, SME_9IQLQ_5E1-SME_9IQLQ	
00025CCC 0000 0000                  		dc.w SME_9IQLQ_5EC-SME_9IQLQ, SME_9IQLQ_5F7-SME_9IQLQ	
00025CD0 0000 0000                  		dc.w SME_9IQLQ_602-SME_9IQLQ, SME_9IQLQ_617-SME_9IQLQ	
00025CD4 0000 0000                  		dc.w SME_9IQLQ_627-SME_9IQLQ, SME_9IQLQ_637-SME_9IQLQ	
00025CD8 0000 0000                  		dc.w SME_9IQLQ_647-SME_9IQLQ, SME_9IQLQ_65C-SME_9IQLQ	
00025CDC 0000 0000                  		dc.w SME_9IQLQ_66C-SME_9IQLQ, SME_9IQLQ_67C-SME_9IQLQ	
00025CE0 0000 0000                  		dc.w SME_9IQLQ_68C-SME_9IQLQ, SME_9IQLQ_697-SME_9IQLQ	
00025CE4 0000 0000                  		dc.w SME_9IQLQ_6A2-SME_9IQLQ, SME_9IQLQ_6AD-SME_9IQLQ	
00025CE8 0000 0000                  		dc.w SME_9IQLQ_6B8-SME_9IQLQ, SME_9IQLQ_6C3-SME_9IQLQ	
00025CEC 0000 0000                  		dc.w SME_9IQLQ_6CE-SME_9IQLQ, SME_9IQLQ_6D9-SME_9IQLQ	
00025CF0 0000 0000                  		dc.w SME_9IQLQ_6E4-SME_9IQLQ, SME_9IQLQ_6F9-SME_9IQLQ	
00025CF4 0000 0000                  		dc.w SME_9IQLQ_709-SME_9IQLQ, SME_9IQLQ_714-SME_9IQLQ	
00025CF8 0000 0000                  		dc.w SME_9IQLQ_724-SME_9IQLQ, SME_9IQLQ_739-SME_9IQLQ	
00025CFC 0000 0000                  		dc.w SME_9IQLQ_749-SME_9IQLQ, SME_9IQLQ_754-SME_9IQLQ	
00025D00 0000 0000                  		dc.w SME_9IQLQ_764-SME_9IQLQ, SME_9IQLQ_774-SME_9IQLQ	
00025D04 0000 0000                  		dc.w SME_9IQLQ_784-SME_9IQLQ, SME_9IQLQ_7B2-SME_9IQLQ	
00025D08 0000 0000                  		dc.w SME_9IQLQ_7E0-SME_9IQLQ, SME_9IQLQ_7F0-SME_9IQLQ	
00025D0C 0000 0000                  		dc.w SME_9IQLQ_800-SME_9IQLQ, SME_9IQLQ_810-SME_9IQLQ	
00025D10 0000 0000                  		dc.w SME_9IQLQ_82A-SME_9IQLQ, SME_9IQLQ_83A-SME_9IQLQ	
00025D14 0000 0000                  		dc.w SME_9IQLQ_84A-SME_9IQLQ, SME_9IQLQ_864-SME_9IQLQ	
00025D18 0000 0000                  		dc.w SME_9IQLQ_87E-SME_9IQLQ, SME_9IQLQ_893-SME_9IQLQ	
00025D1C 0000 0000                  		dc.w SME_9IQLQ_8A8-SME_9IQLQ, SME_9IQLQ_8BD-SME_9IQLQ	
00025D20 0000 0000                  		dc.w SME_9IQLQ_8D2-SME_9IQLQ, SME_9IQLQ_8D8-SME_9IQLQ	
00025D24 0000 0000                  		dc.w SME_9IQLQ_8DE-SME_9IQLQ, SME_9IQLQ_8E4-SME_9IQLQ	
00025D28 0000 0000                  		dc.w SME_9IQLQ_8EA-SME_9IQLQ, SME_9IQLQ_8F0-SME_9IQLQ	
00025D2C 0000 0000                  		dc.w SME_9IQLQ_8F6-SME_9IQLQ, SME_9IQLQ_8FC-SME_9IQLQ	
00025D30 0000 0000                  		dc.w SME_9IQLQ_90C-SME_9IQLQ, SME_9IQLQ_912-SME_9IQLQ	
00025D34 0000 0000                  		dc.w SME_9IQLQ_91D-SME_9IQLQ, SME_9IQLQ_923-SME_9IQLQ	
00025D38 0000 0000                  		dc.w SME_9IQLQ_92E-SME_9IQLQ, SME_9IQLQ_934-SME_9IQLQ	
00025D3C 0000 0000                  		dc.w SME_9IQLQ_949-SME_9IQLQ, SME_9IQLQ_96D-SME_9IQLQ	
00025D40 0000 0000                  		dc.w SME_9IQLQ_987-SME_9IQLQ, SME_9IQLQ_997-SME_9IQLQ	
00025D44 0000 0000                  		dc.w SME_9IQLQ_9B1-SME_9IQLQ, SME_9IQLQ_9C6-SME_9IQLQ	
00025D48 0000 0000                  		dc.w SME_9IQLQ_9DB-SME_9IQLQ, SME_9IQLQ_9F0-SME_9IQLQ	
00025D4C 0000 0000                  		dc.w SME_9IQLQ_A1E-SME_9IQLQ, SME_9IQLQ_A2E-SME_9IQLQ	
00025D50 0000 0000                  		dc.w SME_9IQLQ_A3E-SME_9IQLQ, SME_9IQLQ_A4E-SME_9IQLQ	
00025D54 0000 0000                  		dc.w SME_9IQLQ_A5E-SME_9IQLQ, SME_9IQLQ_A82-SME_9IQLQ	
00025D58 0000 0000                  		dc.w SME_9IQLQ_A83-SME_9IQLQ, SME_9IQLQ_A84-SME_9IQLQ	
00025D5C 0000 0000                  		dc.w SME_9IQLQ_A94-SME_9IQLQ, SME_9IQLQ_AA4-SME_9IQLQ	
00025D60 0000 0000                  		dc.w SME_9IQLQ_AB4-SME_9IQLQ, SME_9IQLQ_ABF-SME_9IQLQ	
00025D64 0000 0000                  		dc.w SME_9IQLQ_ACF-SME_9IQLQ, SME_9IQLQ_ADF-SME_9IQLQ	
00025D68 0000 0000                  		dc.w SME_9IQLQ_AEF-SME_9IQLQ, SME_9IQLQ_AFF-SME_9IQLQ	
00025D6C 0000 0000                  		dc.w SME_9IQLQ_B14-SME_9IQLQ, SME_9IQLQ_B3D-SME_9IQLQ	
00025D70 0000 0000                  		dc.w SME_9IQLQ_B52-SME_9IQLQ, SME_9IQLQ_B67-SME_9IQLQ	
00025D74 0000 0000                  		dc.w SME_9IQLQ_B81-SME_9IQLQ, SME_9IQLQ_B9B-SME_9IQLQ	
00025D78 0000 0000                  		dc.w SME_9IQLQ_BA6-SME_9IQLQ, SME_9IQLQ_BC0-SME_9IQLQ	
00025D7C 0000 0000                  		dc.w SME_9IQLQ_BD0-SME_9IQLQ, SME_9IQLQ_BEA-SME_9IQLQ	
00025D80 0000 0000                  		dc.w SME_9IQLQ_BF5-SME_9IQLQ, SME_9IQLQ_C05-SME_9IQLQ	
00025D84 0000 0000                  		dc.w SME_9IQLQ_C15-SME_9IQLQ, SME_9IQLQ_C25-SME_9IQLQ	
00025D88 0000 0000                  		dc.w SME_9IQLQ_C30-SME_9IQLQ, SME_9IQLQ_C40-SME_9IQLQ	
00025D8C 0000 0000                  		dc.w SME_9IQLQ_C78-SME_9IQLQ, SME_9IQLQ_C97-SME_9IQLQ	
00025D90 0000 0000                  		dc.w SME_9IQLQ_CA7-SME_9IQLQ, SME_9IQLQ_CCB-SME_9IQLQ	
00025D94 0000 0000                  		dc.w SME_9IQLQ_CD6-SME_9IQLQ, SME_9IQLQ_CEB-SME_9IQLQ	
00025D98 0000 0000                  		dc.w SME_9IQLQ_CFB-SME_9IQLQ, SME_9IQLQ_D0B-SME_9IQLQ	
00025D9C 0000 0000                  		dc.w SME_9IQLQ_D20-SME_9IQLQ, SME_9IQLQ_D26-SME_9IQLQ	
00025DA0 0000 0000                  		dc.w SME_9IQLQ_D2C-SME_9IQLQ, SME_9IQLQ_D32-SME_9IQLQ	
00025DA4 0000 0000                  		dc.w SME_9IQLQ_D38-SME_9IQLQ, SME_9IQLQ_D43-SME_9IQLQ	
00025DA8 0000 0000                  		dc.w SME_9IQLQ_D49-SME_9IQLQ, SME_9IQLQ_D4F-SME_9IQLQ	
00025DAC 0000 0000                  		dc.w SME_9IQLQ_D55-SME_9IQLQ, SME_9IQLQ_D65-SME_9IQLQ	
00025DB0 0000 0000                  		dc.w SME_9IQLQ_D75-SME_9IQLQ, SME_9IQLQ_D85-SME_9IQLQ	
00025DB4 0000 0000                  		dc.w SME_9IQLQ_D95-SME_9IQLQ, SME_9IQLQ_DA5-SME_9IQLQ	
00025DB8 0000 0000                  		dc.w SME_9IQLQ_DCE-SME_9IQLQ, SME_9IQLQ_DDE-SME_9IQLQ	
00025DBC 0000 0000                  		dc.w SME_9IQLQ_DEE-SME_9IQLQ, SME_9IQLQ_E12-SME_9IQLQ	
00025DC0 0000 0000                  		dc.w SME_9IQLQ_E22-SME_9IQLQ, SME_9IQLQ_E28-SME_9IQLQ	
00025DC4 0000 0000                  		dc.w SME_9IQLQ_E2E-SME_9IQLQ, SME_9IQLQ_E52-SME_9IQLQ	
00025DC8 0000 0000                  		dc.w SME_9IQLQ_E62-SME_9IQLQ, SME_9IQLQ_E68-SME_9IQLQ	
00025DCC 0000 0000                  		dc.w SME_9IQLQ_E73-SME_9IQLQ, SME_9IQLQ_E7E-SME_9IQLQ	
00025DD0 0000 0000                  		dc.w SME_9IQLQ_E98-SME_9IQLQ, SME_9IQLQ_EB7-SME_9IQLQ	
00025DD4 0000 0000                  		dc.w SME_9IQLQ_ECC-SME_9IQLQ, SME_9IQLQ_EDC-SME_9IQLQ	
00025DD8 0000 0000                  		dc.w SME_9IQLQ_EF6-SME_9IQLQ, SME_9IQLQ_F0B-SME_9IQLQ	
00025DDC 0000 0000                  		dc.w SME_9IQLQ_F1B-SME_9IQLQ, SME_9IQLQ_F35-SME_9IQLQ	
00025DE0 0000 0000                  		dc.w SME_9IQLQ_F45-SME_9IQLQ, SME_9IQLQ_F4B-SME_9IQLQ	
00025DE4 0000 0000                  		dc.w SME_9IQLQ_F51-SME_9IQLQ, SME_9IQLQ_F61-SME_9IQLQ	
00025DE8 0000 0000                  		dc.w SME_9IQLQ_F71-SME_9IQLQ, SME_9IQLQ_F77-SME_9IQLQ	
00025DEC 0000 0000                  		dc.w SME_9IQLQ_F87-SME_9IQLQ, SME_9IQLQ_F92-SME_9IQLQ	
00025DF0 0000 0000                  		dc.w SME_9IQLQ_FB1-SME_9IQLQ, SME_9IQLQ_FD0-SME_9IQLQ	
00025DF4 0000 0000                  		dc.w SME_9IQLQ_FE5-SME_9IQLQ, SME_9IQLQ_FF5-SME_9IQLQ	
00025DF8 0000 0000                  		dc.w SME_9IQLQ_100F-SME_9IQLQ, SME_9IQLQ_1024-SME_9IQLQ	
00025DFC 0000 0000                  		dc.w SME_9IQLQ_1034-SME_9IQLQ, SME_9IQLQ_104E-SME_9IQLQ	
00025E00 0000 0000                  		dc.w SME_9IQLQ_105E-SME_9IQLQ, SME_9IQLQ_1078-SME_9IQLQ	
00025E04 0000 0000                  		dc.w SME_9IQLQ_108D-SME_9IQLQ, SME_9IQLQ_10A2-SME_9IQLQ	
00025E08 0000 0000                  		dc.w SME_9IQLQ_10AD-SME_9IQLQ, SME_9IQLQ_10B8-SME_9IQLQ	
00025E0C 0000 0000                  		dc.w SME_9IQLQ_10C3-SME_9IQLQ, SME_9IQLQ_10CE-SME_9IQLQ	
00025E10 0000 0000                  		dc.w SME_9IQLQ_10D9-SME_9IQLQ, SME_9IQLQ_10E9-SME_9IQLQ	
00025E14 0000 0000                  		dc.w SME_9IQLQ_10F9-SME_9IQLQ, SME_9IQLQ_111D-SME_9IQLQ	
00025E18 0000 0000                  		dc.w SME_9IQLQ_1128-SME_9IQLQ, SME_9IQLQ_1133-SME_9IQLQ	
00025E1C 0000 0000                  		dc.w SME_9IQLQ_113E-SME_9IQLQ, SME_9IQLQ_1149-SME_9IQLQ	
00025E20 0000 0000                  		dc.w SME_9IQLQ_1159-SME_9IQLQ, SME_9IQLQ_116E-SME_9IQLQ	
00025E24 0000 0000                  		dc.w SME_9IQLQ_116F-SME_9IQLQ, SME_9IQLQ_1170-SME_9IQLQ	
00025E28 0000 0000                  		dc.w SME_9IQLQ_1180-SME_9IQLQ, SME_9IQLQ_1190-SME_9IQLQ	
00025E2C 0000 0000                  		dc.w SME_9IQLQ_1191-SME_9IQLQ, SME_9IQLQ_1192-SME_9IQLQ	
00025E30 0000 0000                  		dc.w SME_9IQLQ_119D-SME_9IQLQ, SME_9IQLQ_11A3-SME_9IQLQ	
00025E34 0000 0000                  		dc.w SME_9IQLQ_11AE-SME_9IQLQ, SME_9IQLQ_11B9-SME_9IQLQ	
00025E38 0000 0000                  		dc.w SME_9IQLQ_11C4-SME_9IQLQ, SME_9IQLQ_11CF-SME_9IQLQ	
00025E3C 0000 0000                  		dc.w SME_9IQLQ_11E9-SME_9IQLQ, SME_9IQLQ_1203-SME_9IQLQ	
00025E40 0000 0000                  		dc.w SME_9IQLQ_120E-SME_9IQLQ, SME_9IQLQ_1219-SME_9IQLQ	
00025E44 0000 0000                  		dc.w SME_9IQLQ_1224-SME_9IQLQ, SME_9IQLQ_122F-SME_9IQLQ	
00025E48 0000 0000                  		dc.w SME_9IQLQ_123A-SME_9IQLQ, SME_9IQLQ_1245-SME_9IQLQ	
00025E4C 0000 0000                  		dc.w SME_9IQLQ_1250-SME_9IQLQ, SME_9IQLQ_125B-SME_9IQLQ	
00025E50 0000                       		dc.w SME_9IQLQ_1266-SME_9IQLQ	
00025E52 00                         SME_9IQLQ_1EE:	dc.b 0	
00025E53 04                         SME_9IQLQ_1EF:	dc.b 4	
00025E54 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E59 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00025E5E 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00025E63 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025E68 09                         SME_9IQLQ_204:	dc.b 9	
00025E69 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E6E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025E73 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025E78 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025E7D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025E82 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025E87 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025E8C FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025E91 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025E96 0A                         SME_9IQLQ_232:	dc.b $A	
00025E97 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E9C 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025EA1 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025EA6 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025EAB FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025EB0 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025EB5 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00025EBA F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025EBF F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00025EC4 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00025EC9 04                         SME_9IQLQ_265:	dc.b 4	
00025ECA EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025ECF F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025ED4 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025ED9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025EDE 03                         SME_9IQLQ_27A:	dc.b 3	
00025EDF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EE4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EE9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EEE 03                         SME_9IQLQ_28A:	dc.b 3	
00025EEF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EF4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EF9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EFE 04                         SME_9IQLQ_29A:	dc.b 4	
00025EFF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025F04 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025F09 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00025F0E 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025F13 02                         SME_9IQLQ_2AF:	dc.b 2	
00025F14 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F19 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00025F1E 03                         SME_9IQLQ_2BA:	dc.b 3	
00025F1F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F24 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F29 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F2E 03                         SME_9IQLQ_2CA:	dc.b 3	
00025F2F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F34 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F39 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F3E 03                         SME_9IQLQ_2DA:	dc.b 3	
00025F3F F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F44 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025F49 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00025F4E 04                         SME_9IQLQ_2EA:	dc.b 4	
00025F4F 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025F54 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025F59 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00025F5E F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00025F63 03                         SME_9IQLQ_2FF:	dc.b 3	
00025F64 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025F69 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00025F6E 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025F73 07                         SME_9IQLQ_30F:	dc.b 7	
00025F74 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025F79 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025F7E 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025F83 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025F88 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025F8D EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025F92 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025F97 05                         SME_9IQLQ_333:	dc.b 5	
00025F98 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025F9D F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025FA2 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025FA7 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025FAC F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025FB1 02                         SME_9IQLQ_34D:	dc.b 2	
00025FB2 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025FB7 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025FBC 03                         SME_9IQLQ_358:	dc.b 3	
00025FBD F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00025FC2 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025FC7 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00025FCC 04                         SME_9IQLQ_368:	dc.b 4	
00025FCD EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00025FD2 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025FD7 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025FDC 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00025FE1 02                         SME_9IQLQ_37D:	dc.b 2	
00025FE2 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025FE7 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025FEC 03                         SME_9IQLQ_388:	dc.b 3	
00025FED ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00025FF2 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025FF7 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025FFC 05                         SME_9IQLQ_398:	dc.b 5	
00025FFD FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026002 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026007 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
0002600C ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00026011 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00026016 05                         SME_9IQLQ_3B2:	dc.b 5	
00026017 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002601C EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026021 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026026 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
0002602B 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026030 06                         SME_9IQLQ_3CC:	dc.b 6	
00026031 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026036 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002603B FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026040 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026045 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
0002604A F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002604F 04                         SME_9IQLQ_3EB:	dc.b 4	
00026050 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026055 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002605A FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002605F 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026064 03                         SME_9IQLQ_400:	dc.b 3	
00026065 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
0002606A ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002606F 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026074 05                         SME_9IQLQ_410:	dc.b 5	
00026075 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002607A EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002607F FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026084 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026089 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002608E 04                         SME_9IQLQ_42A:	dc.b 4	
0002608F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026094 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026099 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002609E 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000260A3 03                         SME_9IQLQ_43F:	dc.b 3	
000260A4 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000260A9 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000260AE 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000260B3 05                         SME_9IQLQ_44F:	dc.b 5	
000260B4 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000260B9 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000260BE FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000260C3 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000260C8 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000260CD 04                         SME_9IQLQ_469:	dc.b 4	
000260CE F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000260D3 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000260D8 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000260DD 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000260E2 02                         SME_9IQLQ_47E:	dc.b 2	
000260E3 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000260E8 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000260ED 02                         SME_9IQLQ_489:	dc.b 2	
000260EE F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000260F3 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000260F8 05                         SME_9IQLQ_494:	dc.b 5	
000260F9 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000260FE F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00026103 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00026108 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
0002610D F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00026112 04                         SME_9IQLQ_4AE:	dc.b 4	
00026113 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00026118 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
0002611D FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00026122 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00026127 02                         SME_9IQLQ_4C3:	dc.b 2	
00026128 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
0002612D F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
00026132 03                         SME_9IQLQ_4CE:	dc.b 3	
00026133 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00026138 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
0002613D FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
00026142 03                         SME_9IQLQ_4DE:	dc.b 3	
00026143 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00026148 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
0002614D F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00026152 06                         SME_9IQLQ_4EE:	dc.b 6	
00026153 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026158 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002615D F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026162 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026167 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002616C FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026171 06                         SME_9IQLQ_50D:	dc.b 6	
00026172 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026177 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002617C EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026181 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026186 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002618B 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026190 04                         SME_9IQLQ_52C:	dc.b 4	
00026191 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026196 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002619B EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000261A0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000261A5 03                         SME_9IQLQ_541:	dc.b 3	
000261A6 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000261AB F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000261B0 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000261B5 05                         SME_9IQLQ_551:	dc.b 5	
000261B6 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000261BB EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000261C0 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000261C5 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000261CA 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000261CF 04                         SME_9IQLQ_56B:	dc.b 4	
000261D0 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000261D5 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000261DA EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000261DF 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000261E4 03                         SME_9IQLQ_580:	dc.b 3	
000261E5 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000261EA 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000261EF EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000261F4 05                         SME_9IQLQ_590:	dc.b 5	
000261F5 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000261FA EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000261FF F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026204 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026209 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002620E 02                         SME_9IQLQ_5AA:	dc.b 2	
0002620F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026214 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026219 02                         SME_9IQLQ_5B5:	dc.b 2	
0002621A FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002621F EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00026224 02                         SME_9IQLQ_5C0:	dc.b 2	
00026225 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002622A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002622F 02                         SME_9IQLQ_5CB:	dc.b 2	
00026230 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026235 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002623A 02                         SME_9IQLQ_5D6:	dc.b 2	
0002623B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026240 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026245 02                         SME_9IQLQ_5E1:	dc.b 2	
00026246 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002624B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026250 02                         SME_9IQLQ_5EC:	dc.b 2	
00026251 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026256 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002625B 02                         SME_9IQLQ_5F7:	dc.b 2	
0002625C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026261 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026266 04                         SME_9IQLQ_602:	dc.b 4	
00026267 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002626C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026271 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026276 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002627B 03                         SME_9IQLQ_617:	dc.b 3	
0002627C F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
00026281 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00026286 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
0002628B 03                         SME_9IQLQ_627:	dc.b 3	
0002628C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026291 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026296 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002629B 03                         SME_9IQLQ_637:	dc.b 3	
0002629C FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262A1 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262A6 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262AB 04                         SME_9IQLQ_647:	dc.b 4	
000262AC EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262B1 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262B6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262BB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262C0 03                         SME_9IQLQ_65C:	dc.b 3	
000262C1 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262C6 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262CB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262D0 03                         SME_9IQLQ_66C:	dc.b 3	
000262D1 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262D6 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262DB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262E0 03                         SME_9IQLQ_67C:	dc.b 3	
000262E1 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000262E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262EB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262F0 02                         SME_9IQLQ_68C:	dc.b 2	
000262F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000262F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000262FB 02                         SME_9IQLQ_697:	dc.b 2	
000262FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026301 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026306 02                         SME_9IQLQ_6A2:	dc.b 2	
00026307 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002630C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026311 02                         SME_9IQLQ_6AD:	dc.b 2	
00026312 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026317 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002631C 02                         SME_9IQLQ_6B8:	dc.b 2	
0002631D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026322 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026327 02                         SME_9IQLQ_6C3:	dc.b 2	
00026328 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002632D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026332 02                         SME_9IQLQ_6CE:	dc.b 2	
00026333 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026338 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002633D 02                         SME_9IQLQ_6D9:	dc.b 2	
0002633E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026343 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026348 04                         SME_9IQLQ_6E4:	dc.b 4	
00026349 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002634E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026353 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026358 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002635D 03                         SME_9IQLQ_6F9:	dc.b 3	
0002635E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00026363 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026368 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002636D 02                         SME_9IQLQ_709:	dc.b 2	
0002636E F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026373 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026378 03                         SME_9IQLQ_714:	dc.b 3	
00026379 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002637E 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026383 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00026388 04                         SME_9IQLQ_724:	dc.b 4	
00026389 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002638E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026393 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026398 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002639D 03                         SME_9IQLQ_739:	dc.b 3	
0002639E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263A3 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263A8 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263AD 02                         SME_9IQLQ_749:	dc.b 2	
000263AE F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000263B3 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000263B8 03                         SME_9IQLQ_754:	dc.b 3	
000263B9 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263BE 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263C3 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263C8 03                         SME_9IQLQ_764:	dc.b 3	
000263C9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263CE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263D3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263D8 03                         SME_9IQLQ_774:	dc.b 3	
000263D9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263DE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263E3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263E8 09                         SME_9IQLQ_784:	dc.b 9	
000263E9 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000263EE F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000263F3 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000263F8 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000263FD 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026402 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026407 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002640C F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00026411 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026416 09                         SME_9IQLQ_7B2:	dc.b 9	
00026417 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002641C F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00026421 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00026426 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002642B 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026430 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026435 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002643A F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002643F F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026444 03                         SME_9IQLQ_7E0:	dc.b 3	
00026445 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
0002644A 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002644F EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00026454 03                         SME_9IQLQ_7F0:	dc.b 3	
00026455 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
0002645A EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002645F EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00026464 03                         SME_9IQLQ_800:	dc.b 3	
00026465 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
0002646A EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002646F 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00026474 05                         SME_9IQLQ_810:	dc.b 5	
00026475 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
0002647A 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002647F F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00026484 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00026489 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002648E 03                         SME_9IQLQ_82A:	dc.b 3	
0002648F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00026494 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00026499 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002649E 03                         SME_9IQLQ_83A:	dc.b 3	
0002649F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000264A4 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000264A9 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000264AE 05                         SME_9IQLQ_84A:	dc.b 5	
000264AF 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000264B4 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000264B9 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000264BE ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264C3 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264C8 05                         SME_9IQLQ_864:	dc.b 5	
000264C9 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000264CE 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000264D3 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000264D8 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264DD ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264E2 04                         SME_9IQLQ_87E:	dc.b 4	
000264E3 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000264E8 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000264ED E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000264F2 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000264F7 04                         SME_9IQLQ_893:	dc.b 4	
000264F8 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000264FD 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00026502 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00026507 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
0002650C 04                         SME_9IQLQ_8A8:	dc.b 4	
0002650D EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00026512 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00026517 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
0002651C 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00026521 04                         SME_9IQLQ_8BD:	dc.b 4	
00026522 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00026527 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
0002652C F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00026531 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00026536 01                         SME_9IQLQ_8D2:	dc.b 1	
00026537 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002653C 01                         SME_9IQLQ_8D8:	dc.b 1	
0002653D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026542 01                         SME_9IQLQ_8DE:	dc.b 1	
00026543 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026548 01                         SME_9IQLQ_8E4:	dc.b 1	
00026549 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002654E 01                         SME_9IQLQ_8EA:	dc.b 1	
0002654F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026554 01                         SME_9IQLQ_8F0:	dc.b 1	
00026555 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002655A 01                         SME_9IQLQ_8F6:	dc.b 1	
0002655B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026560 03                         SME_9IQLQ_8FC:	dc.b 3	
00026561 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00026566 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
0002656B F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00026570 01                         SME_9IQLQ_90C:	dc.b 1	
00026571 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026576 02                         SME_9IQLQ_912:	dc.b 2	
00026577 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
0002657C F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00026581 01                         SME_9IQLQ_91D:	dc.b 1	
00026582 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026587 02                         SME_9IQLQ_923:	dc.b 2	
00026588 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0002658D 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00026592 01                         SME_9IQLQ_92E:	dc.b 1	
00026593 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026598 04                         SME_9IQLQ_934:	dc.b 4	
00026599 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002659E FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000265A3 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265A8 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000265AD 07                         SME_9IQLQ_949:	dc.b 7	
000265AE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000265B3 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000265B8 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000265BD F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000265C2 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000265C7 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000265CC FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000265D1 05                         SME_9IQLQ_96D:	dc.b 5	
000265D2 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000265D7 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000265DC ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000265E1 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265E6 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000265EB 03                         SME_9IQLQ_987:	dc.b 3	
000265EC F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000265F1 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000265F6 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000265FB 05                         SME_9IQLQ_997:	dc.b 5	
000265FC F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00026601 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00026606 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
0002660B 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00026610 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00026615 04                         SME_9IQLQ_9B1:	dc.b 4	
00026616 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
0002661B F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00026620 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00026625 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
0002662A 04                         SME_9IQLQ_9C6:	dc.b 4	
0002662B F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00026630 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00026635 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
0002663A 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002663F 04                         SME_9IQLQ_9DB:	dc.b 4	
00026640 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00026645 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002664A F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002664F EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00026654 09                         SME_9IQLQ_9F0:	dc.b 9	
00026655 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
0002665A EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002665F F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00026664 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00026669 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002666E F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00026673 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00026678 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002667D FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00026682 03                         SME_9IQLQ_A1E:	dc.b 3	
00026683 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00026688 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002668D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00026692 03                         SME_9IQLQ_A2E:	dc.b 3	
00026693 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00026698 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002669D EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
000266A2 03                         SME_9IQLQ_A3E:	dc.b 3	
000266A3 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
000266A8 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
000266AD F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
000266B2 03                         SME_9IQLQ_A4E:	dc.b 3	
000266B3 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
000266B8 0808 0010 08               		dc.b 8, 8, 0, $10, 8	
000266BD 0000 0013 18               		dc.b 0, 0, 0, $13, $18	
000266C2 07                         SME_9IQLQ_A5E:	dc.b 7	
000266C3 E802 0000 F8               		dc.b $E8, 2, 0, 0, $F8	
000266C8 E802 0003 00               		dc.b $E8, 2, 0, 3, 0	
000266CD E802 0006 08               		dc.b $E8, 2, 0, 6, 8	
000266D2 E802 0009 10               		dc.b $E8, 2, 0, 9, $10	
000266D7 000C 000C F8               		dc.b 0, $C, 0, $C, $F8	
000266DC 0001 0010 18               		dc.b 0, 1, 0, $10, $18	
000266E1 0804 0012 08               		dc.b 8, 4, 0, $12, 8	
000266E6 00                         SME_9IQLQ_A82:	dc.b 0	
000266E7 00                         SME_9IQLQ_A83:	dc.b 0	
000266E8 03                         SME_9IQLQ_A84:	dc.b 3	
000266E9 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000266EE FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000266F3 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000266F8 03                         SME_9IQLQ_A94:	dc.b 3	
000266F9 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000266FE FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026703 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026708 03                         SME_9IQLQ_AA4:	dc.b 3	
00026709 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002670E 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00026713 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00026718 02                         SME_9IQLQ_AB4:	dc.b 2	
00026719 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
0002671E F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00026723 03                         SME_9IQLQ_ABF:	dc.b 3	
00026724 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026729 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
0002672E FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00026733 03                         SME_9IQLQ_ACF:	dc.b 3	
00026734 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026739 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
0002673E 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00026743 03                         SME_9IQLQ_ADF:	dc.b 3	
00026744 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00026749 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
0002674E 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00026753 03                         SME_9IQLQ_AEF:	dc.b 3	
00026754 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026759 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002675E 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026763 04                         SME_9IQLQ_AFF:	dc.b 4	
00026764 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00026769 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
0002676E 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00026773 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00026778 08                         SME_9IQLQ_B14:	dc.b 8	
00026779 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
0002677E F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00026783 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00026788 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
0002678D F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00026792 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00026797 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
0002679C 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000267A1 04                         SME_9IQLQ_B3D:	dc.b 4	
000267A2 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267A7 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267AC F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267B1 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267B6 04                         SME_9IQLQ_B52:	dc.b 4	
000267B7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267BC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267C1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267C6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267CB 05                         SME_9IQLQ_B67:	dc.b 5	
000267CC E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267D1 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000267D6 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000267DB 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000267E0 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000267E5 05                         SME_9IQLQ_B81:	dc.b 5	
000267E6 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267EB E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000267F0 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000267F5 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000267FA 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000267FF 02                         SME_9IQLQ_B9B:	dc.b 2	
00026800 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026805 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002680A 05                         SME_9IQLQ_BA6:	dc.b 5	
0002680B 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00026810 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00026815 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002681A ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
0002681F ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00026824 03                         SME_9IQLQ_BC0:	dc.b 3	
00026825 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002682A 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002682F 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026834 05                         SME_9IQLQ_BD0:	dc.b 5	
00026835 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002683A F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
0002683F F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00026844 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00026849 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
0002684E 02                         SME_9IQLQ_BEA:	dc.b 2	
0002684F ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026854 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026859 03                         SME_9IQLQ_BF5:	dc.b 3	
0002685A F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002685F 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026864 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026869 03                         SME_9IQLQ_C05:	dc.b 3	
0002686A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002686F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00026874 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026879 03                         SME_9IQLQ_C15:	dc.b 3	
0002687A F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002687F 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026884 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026889 02                         SME_9IQLQ_C25:	dc.b 2	
0002688A EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002688F FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00026894 03                         SME_9IQLQ_C30:	dc.b 3	
00026895 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
0002689A E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
0002689F F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000268A4 0B                         SME_9IQLQ_C40:	dc.b $B	
000268A5 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268AA E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268AF 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000268B4 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000268B9 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000268BE F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000268C3 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000268C8 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000268CD 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000268D2 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000268D7 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
000268DC 06                         SME_9IQLQ_C78:	dc.b 6	
000268DD E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268E2 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268E7 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000268EC 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
000268F1 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000268F6 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
000268FB 03                         SME_9IQLQ_C97:	dc.b 3	
000268FC EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00026901 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00026906 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
0002690B 07                         SME_9IQLQ_CA7:	dc.b 7	
0002690C F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00026911 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00026916 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
0002691B F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00026920 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00026925 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
0002692A F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
0002692F 02                         SME_9IQLQ_CCB:	dc.b 2	
00026930 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00026935 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
0002693A 04                         SME_9IQLQ_CD6:	dc.b 4	
0002693B F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026940 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00026945 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002694A 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
0002694F 03                         SME_9IQLQ_CEB:	dc.b 3	
00026950 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026955 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
0002695A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002695F 03                         SME_9IQLQ_CFB:	dc.b 3	
00026960 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026965 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
0002696A F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
0002696F 04                         SME_9IQLQ_D0B:	dc.b 4	
00026970 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00026975 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
0002697A F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
0002697F F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00026984 01                         SME_9IQLQ_D20:	dc.b 1	
00026985 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002698A 01                         SME_9IQLQ_D26:	dc.b 1	
0002698B F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00026990 01                         SME_9IQLQ_D2C:	dc.b 1	
00026991 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00026996 01                         SME_9IQLQ_D32:	dc.b 1	
00026997 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002699C 02                         SME_9IQLQ_D38:	dc.b 2	
0002699D F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
000269A2 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
000269A7 01                         SME_9IQLQ_D43:	dc.b 1	
000269A8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269AD 01                         SME_9IQLQ_D49:	dc.b 1	
000269AE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269B3 01                         SME_9IQLQ_D4F:	dc.b 1	
000269B4 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000269B9 03                         SME_9IQLQ_D55:	dc.b 3	
000269BA E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
000269BF 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
000269C4 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
000269C9 03                         SME_9IQLQ_D65:	dc.b 3	
000269CA 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
000269CF E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
000269D4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269D9 03                         SME_9IQLQ_D75:	dc.b 3	
000269DA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269DF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
000269E4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269E9 03                         SME_9IQLQ_D85:	dc.b 3	
000269EA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269EF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
000269F4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269F9 03                         SME_9IQLQ_D95:	dc.b 3	
000269FA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269FF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A04 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A09 08                         SME_9IQLQ_DA5:	dc.b 8	
00026A0A 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00026A0F 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00026A14 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00026A19 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00026A1E 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00026A23 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00026A28 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00026A2D E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00026A32 03                         SME_9IQLQ_DCE:	dc.b 3	
00026A33 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A38 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A3D E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
00026A42 03                         SME_9IQLQ_DDE:	dc.b 3	
00026A43 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A48 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A4D E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
00026A52 07                         SME_9IQLQ_DEE:	dc.b 7	
00026A53 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A58 F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
00026A5D F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
00026A62 EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
00026A67 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026A6C E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
00026A71 E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
00026A76 03                         SME_9IQLQ_E12:	dc.b 3	
00026A77 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026A7C FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026A81 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026A86 01                         SME_9IQLQ_E22:	dc.b 1	
00026A87 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00026A8C 01                         SME_9IQLQ_E28:	dc.b 1	
00026A8D FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00026A92 07                         SME_9IQLQ_E2E:	dc.b 7	
00026A93 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
00026A98 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
00026A9D 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
00026AA2 FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
00026AA7 FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
00026AAC FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
00026AB1 FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
00026AB6 03                         SME_9IQLQ_E52:	dc.b 3	
00026AB7 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026ABC FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026AC1 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026AC6 01                         SME_9IQLQ_E62:	dc.b 1	
00026AC7 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00026ACC 02                         SME_9IQLQ_E68:	dc.b 2	
00026ACD FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
00026AD2 FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
00026AD7 02                         SME_9IQLQ_E73:	dc.b 2	
00026AD8 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026ADD 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026AE2 05                         SME_9IQLQ_E7E:	dc.b 5	
00026AE3 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026AE8 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026AED FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026AF2 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00026AF7 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026AFC 06                         SME_9IQLQ_E98:	dc.b 6	
00026AFD ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026B02 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026B07 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026B0C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026B11 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00026B16 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00026B1B 04                         SME_9IQLQ_EB7:	dc.b 4	
00026B1C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026B21 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026B26 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026B2B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026B30 03                         SME_9IQLQ_ECC:	dc.b 3	
00026B31 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00026B36 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00026B3B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026B40 05                         SME_9IQLQ_EDC:	dc.b 5	
00026B41 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026B46 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00026B4B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026B50 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026B55 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00026B5A 04                         SME_9IQLQ_EF6:	dc.b 4	
00026B5B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026B60 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026B65 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00026B6A 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00026B6F 03                         SME_9IQLQ_F0B:	dc.b 3	
00026B70 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00026B75 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00026B7A 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00026B7F 05                         SME_9IQLQ_F1B:	dc.b 5	
00026B80 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00026B85 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00026B8A FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00026B8F FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00026B94 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00026B99 03                         SME_9IQLQ_F35:	dc.b 3	
00026B9A EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
00026B9F FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
00026BA4 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
00026BA9 01                         SME_9IQLQ_F45:	dc.b 1	
00026BAA EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
00026BAF 01                         SME_9IQLQ_F4B:	dc.b 1	
00026BB0 F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00026BB5 03                         SME_9IQLQ_F51:	dc.b 3	
00026BB6 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00026BBB F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
00026BC0 F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
00026BC5 03                         SME_9IQLQ_F61:	dc.b 3	
00026BC6 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
00026BCB FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
00026BD0 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026BD5 01                         SME_9IQLQ_F71:	dc.b 1	
00026BD6 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026BDB 03                         SME_9IQLQ_F77:	dc.b 3	
00026BDC FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
00026BE1 F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026BE6 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026BEB 02                         SME_9IQLQ_F87:	dc.b 2	
00026BEC EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
00026BF1 F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026BF6 06                         SME_9IQLQ_F92:	dc.b 6	
00026BF7 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026BFC EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00026C01 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026C06 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026C0B 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00026C10 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026C15 06                         SME_9IQLQ_FB1:	dc.b 6	
00026C16 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C1B E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00026C20 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026C25 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026C2A F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00026C2F 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026C34 04                         SME_9IQLQ_FD0:	dc.b 4	
00026C35 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C3A F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00026C3F EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00026C44 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026C49 03                         SME_9IQLQ_FE5:	dc.b 3	
00026C4A E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00026C4F F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00026C54 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00026C59 05                         SME_9IQLQ_FF5:	dc.b 5	
00026C5A FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026C5F EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00026C64 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00026C69 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00026C6E 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00026C73 04                         SME_9IQLQ_100F:	dc.b 4	
00026C74 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C79 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00026C7E EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00026C83 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00026C88 03                         SME_9IQLQ_1024:	dc.b 3	
00026C89 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00026C8E 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00026C93 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00026C98 05                         SME_9IQLQ_1034:	dc.b 5	
00026C99 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C9E EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00026CA3 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026CA8 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026CAD 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00026CB2 03                         SME_9IQLQ_104E:	dc.b 3	
00026CB3 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CB8 0C08 000C F0               		dc.b $C, 8, 0, $C, $F0	
00026CBD 0400 000F F0               		dc.b 4, 0, 0, $F, $F0	
00026CC2 05                         SME_9IQLQ_105E:	dc.b 5	
00026CC3 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CC8 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CCD 0C04 000E F8               		dc.b $C, 4, 0, $E, $F8	
00026CD2 EC04 0010 F8               		dc.b $EC, 4, 0, $10, $F8	
00026CD7 0C00 0012 08               		dc.b $C, 0, 0, $12, 8	
00026CDC 04                         SME_9IQLQ_1078:	dc.b 4	
00026CDD F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CE2 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CE7 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00026CEC EC08 0011 F8               		dc.b $EC, 8, 0, $11, $F8	
00026CF1 04                         SME_9IQLQ_108D:	dc.b 4	
00026CF2 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CF7 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CFC 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00026D01 EC08 0011 F8               		dc.b $EC, 8, 0, $11, $F8	
00026D06 02                         SME_9IQLQ_10A2:	dc.b 2	
00026D07 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D0C E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D11 02                         SME_9IQLQ_10AD:	dc.b 2	
00026D12 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D17 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D1C 02                         SME_9IQLQ_10B8:	dc.b 2	
00026D1D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D22 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D27 02                         SME_9IQLQ_10C3:	dc.b 2	
00026D28 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D2D E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D32 02                         SME_9IQLQ_10CE:	dc.b 2	
00026D33 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00026D38 F80F 0004 F0               		dc.b $F8, $F, 0, 4, $F0	
00026D3D 03                         SME_9IQLQ_10D9:	dc.b 3	
00026D3E F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D43 F00C 0010 F0               		dc.b $F0, $C, 0, $10, $F0	
00026D48 F002 0014 E8               		dc.b $F0, 2, 0, $14, $E8	
00026D4D 03                         SME_9IQLQ_10E9:	dc.b 3	
00026D4E F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D53 F008 0010 F0               		dc.b $F0, 8, 0, $10, $F0	
00026D58 F002 0013 E8               		dc.b $F0, 2, 0, $13, $E8	
00026D5D 07                         SME_9IQLQ_10F9:	dc.b 7	
00026D5E F00A 0000 E8               		dc.b $F0, $A, 0, 0, $E8	
00026D63 F000 0009 00               		dc.b $F0, 0, 0, 9, 0	
00026D68 F803 000A 00               		dc.b $F8, 3, 0, $A, 0	
00026D6D 0800 000E 08               		dc.b 8, 0, 0, $E, 8	
00026D72 0000 000F 08               		dc.b 0, 0, 0, $F, 8	
00026D77 1000 0010 08               		dc.b $10, 0, 0, $10, 8	
00026D7C 0804 0011 F0               		dc.b 8, 4, 0, $11, $F0	
00026D81 02                         SME_9IQLQ_111D:	dc.b 2	
00026D82 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D87 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D8C 02                         SME_9IQLQ_1128:	dc.b 2	
00026D8D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D92 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D97 02                         SME_9IQLQ_1133:	dc.b 2	
00026D98 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D9D E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DA2 02                         SME_9IQLQ_113E:	dc.b 2	
00026DA3 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DA8 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DAD 03                         SME_9IQLQ_1149:	dc.b 3	
00026DAE F802 0000 10               		dc.b $F8, 2, 0, 0, $10	
00026DB3 F80F 0003 F0               		dc.b $F8, $F, 0, 3, $F0	
00026DB8 F008 0013 00               		dc.b $F0, 8, 0, $13, 0	
00026DBD 04                         SME_9IQLQ_1159:	dc.b 4	
00026DBE F00F 0000 F8               		dc.b $F0, $F, 0, 0, $F8	
00026DC3 100C 0010 F0               		dc.b $10, $C, 0, $10, $F0	
00026DC8 0001 0014 F0               		dc.b 0, 1, 0, $14, $F0	
00026DCD F800 0016 F0               		dc.b $F8, 0, 0, $16, $F0	
00026DD2 00                         SME_9IQLQ_116E:	dc.b 0	
00026DD3 00                         SME_9IQLQ_116F:	dc.b 0	
00026DD4 03                         SME_9IQLQ_1170:	dc.b 3	
00026DD5 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026DDA F803 000C 08               		dc.b $F8, 3, 0, $C, 8	
00026DDF 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00026DE4 03                         SME_9IQLQ_1180:	dc.b 3	
00026DE5 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026DEA 080D 000C F0               		dc.b 8, $D, 0, $C, $F0	
00026DEF F801 0014 08               		dc.b $F8, 1, 0, $14, 8	
00026DF4 00                         SME_9IQLQ_1190:	dc.b 0	
00026DF5 00                         SME_9IQLQ_1191:	dc.b 0	
00026DF6 02                         SME_9IQLQ_1192:	dc.b 2	
00026DF7 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0	
00026DFC F40F 0004 F0               		dc.b $F4, $F, 0, 4, $F0	
00026E01 01                         SME_9IQLQ_119D:	dc.b 1	
00026E02 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E07 02                         SME_9IQLQ_11A3:	dc.b 2	
00026E08 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E0D E40D 0010 F0               		dc.b $E4, $D, 0, $10, $F0	
00026E12 02                         SME_9IQLQ_11AE:	dc.b 2	
00026E13 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E18 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E1D 02                         SME_9IQLQ_11B9:	dc.b 2	
00026E1E E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E23 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E28 02                         SME_9IQLQ_11C4:	dc.b 2	
00026E29 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E2E 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E33 05                         SME_9IQLQ_11CF:	dc.b 5	
00026E34 0209 0000 00               		dc.b 2, 9, 0, 0, 0	
00026E39 E207 0006 F0               		dc.b $E2, 7, 0, 6, $F0	
00026E3E EA06 000E 00               		dc.b $EA, 6, 0, $E, 0	
00026E43 E200 0014 00               		dc.b $E2, 0, 0, $14, 0	
00026E48 0200 0015 F8               		dc.b 2, 0, 0, $15, $F8	
00026E4D 05                         SME_9IQLQ_11E9:	dc.b 5	
00026E4E E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E53 020C 000C F0               		dc.b 2, $C, 0, $C, $F0	
00026E58 0201 0010 10               		dc.b 2, 1, 0, $10, $10	
00026E5D 0A04 0012 00               		dc.b $A, 4, 0, $12, 0	
00026E62 EA02 0014 08               		dc.b $EA, 2, 0, $14, 8	
00026E67 02                         SME_9IQLQ_1203:	dc.b 2	
00026E68 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E6D 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E72 02                         SME_9IQLQ_120E:	dc.b 2	
00026E73 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E78 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E7D 02                         SME_9IQLQ_1219:	dc.b 2	
00026E7E E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E83 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E88 02                         SME_9IQLQ_1224:	dc.b 2	
00026E89 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E8E 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E93 02                         SME_9IQLQ_122F:	dc.b 2	
00026E94 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E99 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E9E 02                         SME_9IQLQ_123A:	dc.b 2	
00026E9F E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EA4 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EA9 02                         SME_9IQLQ_1245:	dc.b 2	
00026EAA E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EAF 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EB4 02                         SME_9IQLQ_1250:	dc.b 2	
00026EB5 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EBA 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EBF 02                         SME_9IQLQ_125B:	dc.b 2	
00026EC0 E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026EC5 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026ECA 02                         SME_9IQLQ_1266:	dc.b 2	
00026ECB E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026ED0 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026ED6 00                         		even
00026ED6 00                         		even
00026ED6                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026ED6                            ; --------------------------------------------------------------------------------
00026ED6                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026ED6                            
00026ED6                            SME_A1owa:	
00026ED6 0000 0000                  		dc.w SME_A1owa_1EE-SME_A1owa, SME_A1owa_1EF-SME_A1owa	
00026EDA 0000 0000                  		dc.w SME_A1owa_1F8-SME_A1owa, SME_A1owa_20B-SME_A1owa	
00026EDE 0000 0000                  		dc.w SME_A1owa_220-SME_A1owa, SME_A1owa_229-SME_A1owa	
00026EE2 0000 0000                  		dc.w SME_A1owa_230-SME_A1owa, SME_A1owa_237-SME_A1owa	
00026EE6 0000 0000                  		dc.w SME_A1owa_240-SME_A1owa, SME_A1owa_245-SME_A1owa	
00026EEA 0000 0000                  		dc.w SME_A1owa_24C-SME_A1owa, SME_A1owa_253-SME_A1owa	
00026EEE 0000 0000                  		dc.w SME_A1owa_25A-SME_A1owa, SME_A1owa_263-SME_A1owa	
00026EF2 0000 0000                  		dc.w SME_A1owa_26A-SME_A1owa, SME_A1owa_279-SME_A1owa	
00026EF6 0000 0000                  		dc.w SME_A1owa_284-SME_A1owa, SME_A1owa_28B-SME_A1owa	
00026EFA 0000 0000                  		dc.w SME_A1owa_292-SME_A1owa, SME_A1owa_29B-SME_A1owa	
00026EFE 0000 0000                  		dc.w SME_A1owa_2A0-SME_A1owa, SME_A1owa_2A7-SME_A1owa	
00026F02 0000 0000                  		dc.w SME_A1owa_2B2-SME_A1owa, SME_A1owa_2BD-SME_A1owa	
00026F06 0000 0000                  		dc.w SME_A1owa_2CA-SME_A1owa, SME_A1owa_2D3-SME_A1owa	
00026F0A 0000 0000                  		dc.w SME_A1owa_2DA-SME_A1owa, SME_A1owa_2E5-SME_A1owa	
00026F0E 0000 0000                  		dc.w SME_A1owa_2EE-SME_A1owa, SME_A1owa_2F5-SME_A1owa	
00026F12 0000 0000                  		dc.w SME_A1owa_300-SME_A1owa, SME_A1owa_309-SME_A1owa	
00026F16 0000 0000                  		dc.w SME_A1owa_30E-SME_A1owa, SME_A1owa_313-SME_A1owa	
00026F1A 0000 0000                  		dc.w SME_A1owa_31E-SME_A1owa, SME_A1owa_327-SME_A1owa	
00026F1E 0000 0000                  		dc.w SME_A1owa_32C-SME_A1owa, SME_A1owa_333-SME_A1owa	
00026F22 0000 0000                  		dc.w SME_A1owa_33A-SME_A1owa, SME_A1owa_347-SME_A1owa	
00026F26 0000 0000                  		dc.w SME_A1owa_354-SME_A1owa, SME_A1owa_35D-SME_A1owa	
00026F2A 0000 0000                  		dc.w SME_A1owa_364-SME_A1owa, SME_A1owa_36F-SME_A1owa	
00026F2E 0000 0000                  		dc.w SME_A1owa_378-SME_A1owa, SME_A1owa_37F-SME_A1owa	
00026F32 0000 0000                  		dc.w SME_A1owa_38A-SME_A1owa, SME_A1owa_38F-SME_A1owa	
00026F36 0000 0000                  		dc.w SME_A1owa_394-SME_A1owa, SME_A1owa_399-SME_A1owa	
00026F3A 0000 0000                  		dc.w SME_A1owa_39E-SME_A1owa, SME_A1owa_3A3-SME_A1owa	
00026F3E 0000 0000                  		dc.w SME_A1owa_3A8-SME_A1owa, SME_A1owa_3AD-SME_A1owa	
00026F42 0000 0000                  		dc.w SME_A1owa_3B2-SME_A1owa, SME_A1owa_3BB-SME_A1owa	
00026F46 0000 0000                  		dc.w SME_A1owa_3C2-SME_A1owa, SME_A1owa_3C9-SME_A1owa	
00026F4A 0000 0000                  		dc.w SME_A1owa_3D0-SME_A1owa, SME_A1owa_3D9-SME_A1owa	
00026F4E 0000 0000                  		dc.w SME_A1owa_3E0-SME_A1owa, SME_A1owa_3E7-SME_A1owa	
00026F52 0000 0000                  		dc.w SME_A1owa_3EE-SME_A1owa, SME_A1owa_3F3-SME_A1owa	
00026F56 0000 0000                  		dc.w SME_A1owa_3F8-SME_A1owa, SME_A1owa_3FD-SME_A1owa	
00026F5A 0000 0000                  		dc.w SME_A1owa_402-SME_A1owa, SME_A1owa_407-SME_A1owa	
00026F5E 0000 0000                  		dc.w SME_A1owa_40C-SME_A1owa, SME_A1owa_411-SME_A1owa	
00026F62 0000 0000                  		dc.w SME_A1owa_416-SME_A1owa, SME_A1owa_41F-SME_A1owa	
00026F66 0000 0000                  		dc.w SME_A1owa_426-SME_A1owa, SME_A1owa_42B-SME_A1owa	
00026F6A 0000 0000                  		dc.w SME_A1owa_432-SME_A1owa, SME_A1owa_43B-SME_A1owa	
00026F6E 0000 0000                  		dc.w SME_A1owa_442-SME_A1owa, SME_A1owa_447-SME_A1owa	
00026F72 0000 0000                  		dc.w SME_A1owa_44E-SME_A1owa, SME_A1owa_455-SME_A1owa	
00026F76 0000 0000                  		dc.w SME_A1owa_45C-SME_A1owa, SME_A1owa_46F-SME_A1owa	
00026F7A 0000 0000                  		dc.w SME_A1owa_482-SME_A1owa, SME_A1owa_489-SME_A1owa	
00026F7E 0000 0000                  		dc.w SME_A1owa_490-SME_A1owa, SME_A1owa_497-SME_A1owa	
00026F82 0000 0000                  		dc.w SME_A1owa_4A2-SME_A1owa, SME_A1owa_4A9-SME_A1owa	
00026F86 0000 0000                  		dc.w SME_A1owa_4B0-SME_A1owa, SME_A1owa_4BB-SME_A1owa	
00026F8A 0000 0000                  		dc.w SME_A1owa_4C6-SME_A1owa, SME_A1owa_4CF-SME_A1owa	
00026F8E 0000 0000                  		dc.w SME_A1owa_4D8-SME_A1owa, SME_A1owa_4E1-SME_A1owa	
00026F92 0000 0000                  		dc.w SME_A1owa_4EA-SME_A1owa, SME_A1owa_4ED-SME_A1owa	
00026F96 0000 0000                  		dc.w SME_A1owa_4F0-SME_A1owa, SME_A1owa_4F3-SME_A1owa	
00026F9A 0000 0000                  		dc.w SME_A1owa_4F6-SME_A1owa, SME_A1owa_4F9-SME_A1owa	
00026F9E 0000 0000                  		dc.w SME_A1owa_4FC-SME_A1owa, SME_A1owa_4FF-SME_A1owa	
00026FA2 0000 0000                  		dc.w SME_A1owa_506-SME_A1owa, SME_A1owa_509-SME_A1owa	
00026FA6 0000 0000                  		dc.w SME_A1owa_50E-SME_A1owa, SME_A1owa_511-SME_A1owa	
00026FAA 0000 0000                  		dc.w SME_A1owa_516-SME_A1owa, SME_A1owa_519-SME_A1owa	
00026FAE 0000 0000                  		dc.w SME_A1owa_522-SME_A1owa, SME_A1owa_531-SME_A1owa	
00026FB2 0000 0000                  		dc.w SME_A1owa_53C-SME_A1owa, SME_A1owa_543-SME_A1owa	
00026FB6 0000 0000                  		dc.w SME_A1owa_54E-SME_A1owa, SME_A1owa_557-SME_A1owa	
00026FBA 0000 0000                  		dc.w SME_A1owa_560-SME_A1owa, SME_A1owa_569-SME_A1owa	
00026FBE 0000 0000                  		dc.w SME_A1owa_57C-SME_A1owa, SME_A1owa_583-SME_A1owa	
00026FC2 0000 0000                  		dc.w SME_A1owa_58A-SME_A1owa, SME_A1owa_591-SME_A1owa	
00026FC6 0000 0000                  		dc.w SME_A1owa_598-SME_A1owa, SME_A1owa_5A7-SME_A1owa	
00026FCA 0000 0000                  		dc.w SME_A1owa_5A8-SME_A1owa, SME_A1owa_5A9-SME_A1owa	
00026FCE 0000 0000                  		dc.w SME_A1owa_5B0-SME_A1owa, SME_A1owa_5B7-SME_A1owa	
00026FD2 0000 0000                  		dc.w SME_A1owa_5BE-SME_A1owa, SME_A1owa_5C1-SME_A1owa	
00026FD6 0000 0000                  		dc.w SME_A1owa_5C8-SME_A1owa, SME_A1owa_5CF-SME_A1owa	
00026FDA 0000 0000                  		dc.w SME_A1owa_5D6-SME_A1owa, SME_A1owa_5DD-SME_A1owa	
00026FDE 0000 0000                  		dc.w SME_A1owa_5E6-SME_A1owa, SME_A1owa_5F7-SME_A1owa	
00026FE2 0000 0000                  		dc.w SME_A1owa_600-SME_A1owa, SME_A1owa_609-SME_A1owa	
00026FE6 0000 0000                  		dc.w SME_A1owa_614-SME_A1owa, SME_A1owa_61F-SME_A1owa	
00026FEA 0000 0000                  		dc.w SME_A1owa_624-SME_A1owa, SME_A1owa_62F-SME_A1owa	
00026FEE 0000 0000                  		dc.w SME_A1owa_636-SME_A1owa, SME_A1owa_641-SME_A1owa	
00026FF2 0000 0000                  		dc.w SME_A1owa_646-SME_A1owa, SME_A1owa_64D-SME_A1owa	
00026FF6 0000 0000                  		dc.w SME_A1owa_654-SME_A1owa, SME_A1owa_65B-SME_A1owa	
00026FFA 0000 0000                  		dc.w SME_A1owa_660-SME_A1owa, SME_A1owa_667-SME_A1owa	
00026FFE 0000 0000                  		dc.w SME_A1owa_67E-SME_A1owa, SME_A1owa_68B-SME_A1owa	
00027002 0000 0000                  		dc.w SME_A1owa_692-SME_A1owa, SME_A1owa_6A1-SME_A1owa	
00027006 0000 0000                  		dc.w SME_A1owa_6A6-SME_A1owa, SME_A1owa_6AF-SME_A1owa	
0002700A 0000 0000                  		dc.w SME_A1owa_6B6-SME_A1owa, SME_A1owa_6BD-SME_A1owa	
0002700E 0000 0000                  		dc.w SME_A1owa_6C6-SME_A1owa, SME_A1owa_6C9-SME_A1owa	
00027012 0000 0000                  		dc.w SME_A1owa_6CC-SME_A1owa, SME_A1owa_6CF-SME_A1owa	
00027016 0000 0000                  		dc.w SME_A1owa_6D2-SME_A1owa, SME_A1owa_6D5-SME_A1owa	
0002701A 0000 0000                  		dc.w SME_A1owa_6D8-SME_A1owa, SME_A1owa_6DB-SME_A1owa	
0002701E 0000 0000                  		dc.w SME_A1owa_6DE-SME_A1owa, SME_A1owa_6E5-SME_A1owa	
00027022 0000 0000                  		dc.w SME_A1owa_6EC-SME_A1owa, SME_A1owa_6F3-SME_A1owa	
00027026 0000 0000                  		dc.w SME_A1owa_6FA-SME_A1owa, SME_A1owa_701-SME_A1owa	
0002702A 0000 0000                  		dc.w SME_A1owa_712-SME_A1owa, SME_A1owa_719-SME_A1owa	
0002702E 0000 0000                  		dc.w SME_A1owa_720-SME_A1owa, SME_A1owa_72F-SME_A1owa	
00027032 0000 0000                  		dc.w SME_A1owa_736-SME_A1owa, SME_A1owa_739-SME_A1owa	
00027036 0000 0000                  		dc.w SME_A1owa_73E-SME_A1owa, SME_A1owa_74D-SME_A1owa	
0002703A 0000 0000                  		dc.w SME_A1owa_754-SME_A1owa, SME_A1owa_757-SME_A1owa	
0002703E 0000 0000                  		dc.w SME_A1owa_75C-SME_A1owa, SME_A1owa_761-SME_A1owa	
00027042 0000 0000                  		dc.w SME_A1owa_76C-SME_A1owa, SME_A1owa_779-SME_A1owa	
00027046 0000 0000                  		dc.w SME_A1owa_782-SME_A1owa, SME_A1owa_789-SME_A1owa	
0002704A 0000 0000                  		dc.w SME_A1owa_794-SME_A1owa, SME_A1owa_79D-SME_A1owa	
0002704E 0000 0000                  		dc.w SME_A1owa_7A4-SME_A1owa, SME_A1owa_7AF-SME_A1owa	
00027052 0000 0000                  		dc.w SME_A1owa_7B6-SME_A1owa, SME_A1owa_7B9-SME_A1owa	
00027056 0000 0000                  		dc.w SME_A1owa_7BC-SME_A1owa, SME_A1owa_7C3-SME_A1owa	
0002705A 0000 0000                  		dc.w SME_A1owa_7CA-SME_A1owa, SME_A1owa_7CD-SME_A1owa	
0002705E 0000 0000                  		dc.w SME_A1owa_7D4-SME_A1owa, SME_A1owa_7D9-SME_A1owa	
00027062 0000 0000                  		dc.w SME_A1owa_7E6-SME_A1owa, SME_A1owa_7F3-SME_A1owa	
00027066 0000 0000                  		dc.w SME_A1owa_7FC-SME_A1owa, SME_A1owa_803-SME_A1owa	
0002706A 0000 0000                  		dc.w SME_A1owa_80E-SME_A1owa, SME_A1owa_817-SME_A1owa	
0002706E 0000 0000                  		dc.w SME_A1owa_81E-SME_A1owa, SME_A1owa_829-SME_A1owa	
00027072 0000 0000                  		dc.w SME_A1owa_830-SME_A1owa, SME_A1owa_83B-SME_A1owa	
00027076 0000 0000                  		dc.w SME_A1owa_844-SME_A1owa, SME_A1owa_84D-SME_A1owa	
0002707A 0000 0000                  		dc.w SME_A1owa_852-SME_A1owa, SME_A1owa_857-SME_A1owa	
0002707E 0000 0000                  		dc.w SME_A1owa_85C-SME_A1owa, SME_A1owa_861-SME_A1owa	
00027082 0000 0000                  		dc.w SME_A1owa_866-SME_A1owa, SME_A1owa_86D-SME_A1owa	
00027086 0000 0000                  		dc.w SME_A1owa_874-SME_A1owa, SME_A1owa_883-SME_A1owa	
0002708A 0000 0000                  		dc.w SME_A1owa_888-SME_A1owa, SME_A1owa_88D-SME_A1owa	
0002708E 0000 0000                  		dc.w SME_A1owa_892-SME_A1owa, SME_A1owa_897-SME_A1owa	
00027092 0000 0000                  		dc.w SME_A1owa_89E-SME_A1owa, SME_A1owa_8A7-SME_A1owa	
00027096 0000 0000                  		dc.w SME_A1owa_8A8-SME_A1owa, SME_A1owa_8A9-SME_A1owa	
0002709A 0000 0000                  		dc.w SME_A1owa_8B0-SME_A1owa, SME_A1owa_8B7-SME_A1owa	
0002709E 0000 0000                  		dc.w SME_A1owa_8B8-SME_A1owa, SME_A1owa_8B9-SME_A1owa	
000270A2 0000 0000                  		dc.w SME_A1owa_8BE-SME_A1owa, SME_A1owa_8C1-SME_A1owa	
000270A6 0000 0000                  		dc.w SME_A1owa_8C6-SME_A1owa, SME_A1owa_8CB-SME_A1owa	
000270AA 0000 0000                  		dc.w SME_A1owa_8D0-SME_A1owa, SME_A1owa_8D5-SME_A1owa	
000270AE 0000 0000                  		dc.w SME_A1owa_8E0-SME_A1owa, SME_A1owa_8EB-SME_A1owa	
000270B2 0000 0000                  		dc.w SME_A1owa_8F0-SME_A1owa, SME_A1owa_8F5-SME_A1owa	
000270B6 0000 0000                  		dc.w SME_A1owa_8FA-SME_A1owa, SME_A1owa_8FF-SME_A1owa	
000270BA 0000 0000                  		dc.w SME_A1owa_904-SME_A1owa, SME_A1owa_909-SME_A1owa	
000270BE 0000 0000                  		dc.w SME_A1owa_90E-SME_A1owa, SME_A1owa_913-SME_A1owa	
000270C2 0000                       		dc.w SME_A1owa_918-SME_A1owa	
000270C4 00                         SME_A1owa_1EE:	dc.b 0	
000270C5 0420 0070 0320 0B20 0E     SME_A1owa_1EF:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000270CE 0920 0020 0B20 0E10 0300+  SME_A1owa_1F8:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
000270E1 0A20 0020 0B20 0E10 0300+  SME_A1owa_20B:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
000270F6 04B6 C606 D200 0920 0E     SME_A1owa_220:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
000270FF 0350 1150 1720 0E          SME_A1owa_229:	dc.b 3, $50, $11, $50, $17, $20, $E	
00027106 0350 2050 1720 0E          SME_A1owa_230:	dc.b 3, $50, $20, $50, $17, $20, $E	
0002710D 0450 2050 1710 2700 0E     SME_A1owa_237:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00027116 02B6 D316 DF               SME_A1owa_240:	dc.b 2, $B6, $D3, $16, $DF	
0002711B 0356 E126 E736 EA          SME_A1owa_245:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00027122 0356 E126 E736 EE          SME_A1owa_24C:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00027129 03B6 F226 FE27 01          SME_A1owa_253:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00027130 0420 0B20 0E87 0A07 13     SME_A1owa_25A:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00027139 0380 2920 0B20 0E          SME_A1owa_263:	dc.b 3, $80, $29, $20, $B, $20, $E	
00027140 0750 3A50 4010 4600 3530+  SME_A1owa_26A:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
0002714F 05B0 4800 3530 3600 3400+  SME_A1owa_279:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
0002715A 0380 5A57 0400 09          SME_A1owa_284:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00027161 03F7 1437 2407 28          SME_A1owa_28B:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00027168 0450 5450 6350 6910 6F     SME_A1owa_292:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00027171 0250 54B0 71               SME_A1owa_29B:	dc.b 2, $50, $54, $B0, $71	
00027176 0357 0457 2907 2F          SME_A1owa_2A0:	dc.b 3, $57, 4, $57, $29, 7, $2F	
0002717D 0530 7D50 8100 3310 3430+  SME_A1owa_2A7:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00027188 0550 8750 8D20 9350 9600+  SME_A1owa_2B2:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027193 0650 8710 9D30 9F50 A330+  SME_A1owa_2BD:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000271A0 0450 AE10 B470 B620 BE     SME_A1owa_2CA:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000271A9 03F9 7539 8539 89          SME_A1owa_2D3:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000271B0 0550 C130 C770 CB20 D310+  SME_A1owa_2DA:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000271BB 0450 C110 D870 DA20 E2     SME_A1owa_2E5:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000271C4 03F9 8D39 9D39 A1          SME_A1owa_2EE:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000271CB 0550 8710 9D00 9370 E520+  SME_A1owa_2F5:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000271D6 0470 F050 F810 FE51 00     SME_A1owa_300:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
000271DF 0270 F0B1 06               SME_A1owa_309:	dc.b 2, $70, $F0, $B1, 6	
000271E4 0281 1858 F9               SME_A1owa_30E:	dc.b 2, $81, $18, $58, $F9	
000271E9 0508 FF39 0009 04B9 0529+  SME_A1owa_313:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
000271F4 0451 1251 2111 2751 29     SME_A1owa_31E:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
000271FD 0251 12B1 2F               SME_A1owa_327:	dc.b 2, $51, $12, $B1, $2F	
00027202 0329 1479 1719 1F          SME_A1owa_32C:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00027209 0370 F001 0681 3B          SME_A1owa_333:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00027210 0651 4411 4A11 4C81 4E01+  SME_A1owa_33A:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
0002721D 0651 4421 5911 5C11 5E81+  SME_A1owa_347:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
0002722A 0451 6911 6F81 7111 7A     SME_A1owa_354:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00027233 03F9 A529 B529 B8          SME_A1owa_35D:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
0002723A 0551 7C21 8211 8571 8721+  SME_A1owa_364:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027245 0451 7C11 9281 9411 9D     SME_A1owa_36F:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002724E 03F9 BB29 CB19 CE          SME_A1owa_378:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027255 0551 4481 9F11 5E11 A801+  SME_A1owa_37F:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00027260 0251 AAB1 B0               SME_A1owa_38A:	dc.b 2, $51, $AA, $B1, $B0	
00027265 02B7 3057 3C               SME_A1owa_38F:	dc.b 2, $B7, $30, $57, $3C	
0002726A 0250 54B1 BC               SME_A1owa_394:	dc.b 2, $50, $54, $B1, $BC	
0002726F 0257 3CB7 42               SME_A1owa_399:	dc.b 2, $57, $3C, $B7, $42	
00027274 0251 AAB1 C8               SME_A1owa_39E:	dc.b 2, $51, $AA, $B1, $C8	
00027279 0257 3CB7 4E               SME_A1owa_3A3:	dc.b 2, $57, $3C, $B7, $4E	
0002727E 0250 54B1 D4               SME_A1owa_3A8:	dc.b 2, $50, $54, $B1, $D4	
00027283 0257 3CB7 5A               SME_A1owa_3AD:	dc.b 2, $57, $3C, $B7, $5A	
00027288 0451 E011 E6B1 E801 F4     SME_A1owa_3B2:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00027291 03F8 7128 8128 84          SME_A1owa_3BB:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00027298 0351 F511 FBB1 FD          SME_A1owa_3C2:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
0002729F 03B8 BD78 C901 F4          SME_A1owa_3C9:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000272A6 0451 E012 09B2 0B01 F4     SME_A1owa_3D0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000272AF 03B8 D178 DD01 F4          SME_A1owa_3D9:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000272B6 0351 F511 FBB2 17          SME_A1owa_3E0:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000272BD 0378 E5B8 ED01 F4          SME_A1owa_3E7:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000272C4 0252 23B2 29               SME_A1owa_3EE:	dc.b 2, $52, $23, $B2, $29	
000272C9 0258 87B8 8D               SME_A1owa_3F3:	dc.b 2, $58, $87, $B8, $8D	
000272CE 0251 12B2 35               SME_A1owa_3F8:	dc.b 2, $51, $12, $B2, $35	
000272D3 0258 87B8 99               SME_A1owa_3FD:	dc.b 2, $58, $87, $B8, $99	
000272D8 0252 23B2 41               SME_A1owa_402:	dc.b 2, $52, $23, $B2, $41	
000272DD 0258 87B8 A5               SME_A1owa_407:	dc.b 2, $58, $87, $B8, $A5	
000272E2 0251 12B2 4D               SME_A1owa_40C:	dc.b 2, $51, $12, $B2, $4D	
000272E7 0258 87B8 B1               SME_A1owa_411:	dc.b 2, $58, $87, $B8, $B1	
000272EC 0452 5912 5FB2 6102 6D     SME_A1owa_416:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
000272F5 03B9 2129 2D59 30          SME_A1owa_41F:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
000272FC 0272 6EB2 76               SME_A1owa_426:	dc.b 2, $72, $6E, $B2, $76	
00027301 03B9 3629 4259 45          SME_A1owa_42B:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00027308 0452 5912 82B2 8402 6D     SME_A1owa_432:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00027311 03B9 4B29 5759 5A          SME_A1owa_43B:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00027318 0272 6EB2 90               SME_A1owa_442:	dc.b 2, $72, $6E, $B2, $90	
0002731D 03B9 6029 6C59 6F          SME_A1owa_447:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00027324 03B4 EE24 FA54 FD          SME_A1owa_44E:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
0002732B 03B5 0325 0F55 12          SME_A1owa_455:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00027332 0925 1E55 2105 3715 1815+  SME_A1owa_45C:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00027345 0925 2D55 3005 3615 2715+  SME_A1owa_46F:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00027358 03F6 6416 7436 76          SME_A1owa_482:	dc.b 3, $F6, $64, $16, $74, $36, $76	
0002735F 03B6 8176 8D16 95          SME_A1owa_489:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00027366 03F5 3835 4805 4C          SME_A1owa_490:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
0002736D 05B5 4D35 5915 5D15 5F25+  SME_A1owa_497:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00027378 03B5 6425 7055 73          SME_A1owa_4A2:	dc.b 3, $B5, $64, $25, $70, $55, $73	
0002737F 03B5 7925 8555 88          SME_A1owa_4A9:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00027386 0555 9425 9A05 AD55 8E55+  SME_A1owa_4B0:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00027391 0525 A355 A605 AC55 9D55+  SME_A1owa_4BB:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
0002739C 04B5 BA25 C625 C925 CC     SME_A1owa_4C6:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000273A5 04B5 AE25 CF25 D225 D5     SME_A1owa_4CF:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000273AE 04F5 D825 E805 EB05 EC     SME_A1owa_4D8:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000273B7 04F5 ED25 FD16 0016 02     SME_A1owa_4E1:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000273C0 01F2 9C                    SME_A1owa_4EA:	dc.b 1, $F2, $9C	
000273C3 01F6 2B                    SME_A1owa_4ED:	dc.b 1, $F6, $2B	
000273C6 01F2 AC                    SME_A1owa_4F0:	dc.b 1, $F2, $AC	
000273C9 01F6 3B                    SME_A1owa_4F3:	dc.b 1, $F6, $3B	
000273CC 01F2 BC                    SME_A1owa_4F6:	dc.b 1, $F2, $BC	
000273CF 01F6 4B                    SME_A1owa_4F9:	dc.b 1, $F6, $4B	
000273D2 01F2 CC                    SME_A1owa_4FC:	dc.b 1, $F2, $CC	
000273D5 0386 5B36 7A26 7E          SME_A1owa_4FF:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
000273DC 01F2 DC                    SME_A1owa_506:	dc.b 1, $F2, $DC	
000273DF 02B2 EC22 F8               SME_A1owa_509:	dc.b 2, $B2, $EC, $22, $F8	
000273E4 01F2 FB                    SME_A1owa_50E:	dc.b 1, $F2, $FB	
000273E7 02B3 0B23 17               SME_A1owa_511:	dc.b 2, $B3, $B, $23, $17	
000273EC 01F3 1A                    SME_A1owa_516:	dc.b 1, $F3, $1A	
000273EF 0453 2AB3 3018 1508 17     SME_A1owa_519:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
000273F8 0753 3C73 4213 4A03 4C08+  SME_A1owa_522:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00027407 0528 1BB8 1E28 2A18 2D08+  SME_A1owa_531:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00027412 03B8 3038 3C18 40          SME_A1owa_53C:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00027419 05B4 8834 9413 FD03 FF0A+  SME_A1owa_543:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
00027424 0427 6627 6927 6C20 0E     SME_A1owa_54E:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
0002742D 0413 4D73 4F23 5703 5A     SME_A1owa_557:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00027436 0423 5B23 5EF3 6108 42     SME_A1owa_560:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
0002743F 0928 5338 5678 4303 6408+  SME_A1owa_569:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00027452 03B3 7173 7D00 71          SME_A1owa_57C:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00027459 03F8 5B18 6B38 6D          SME_A1owa_583:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00027460 03F8 0138 113A CE          SME_A1owa_58A:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00027467 03F9 E229 F209 F5          SME_A1owa_591:	dc.b 3, $F9, $E2, $29, $F2, 9, $F5	
0002746E 0729 E229 E629 EA29 EE39+  SME_A1owa_598:	dc.b 7, $29, $E2, $29, $E6, $29, $EA, $29, $EE, $39, $F6, $19, $FA, $19, $FC	
0002747D 00                         SME_A1owa_5A7:	dc.b 0	
0002747E 00                         SME_A1owa_5A8:	dc.b 0	
0002747F 0373 9D03 A533 A6          SME_A1owa_5A9:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00027486 0373 8533 8D23 91          SME_A1owa_5B0:	dc.b 3, $73, $85, $33, $8D, $23, $91	
0002748D 0376 9736 9F06 A3          SME_A1owa_5B7:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00027494 0183 94                    SME_A1owa_5BE:	dc.b 1, $83, $94	
00027497 0376 9736 9F06 A3          SME_A1owa_5C1:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
0002749E 0373 8533 8D23 91          SME_A1owa_5C8:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000274A5 0373 9D03 A533 A6          SME_A1owa_5CF:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000274AC 0373 AA33 B223 B6          SME_A1owa_5D6:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000274B3 04B3 B903 C603 C503 C7     SME_A1owa_5DD:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000274BC 0856 1113 C303 C503 C613+  SME_A1owa_5E6:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
000274CD 04B3 DA33 E603 EA03 EB     SME_A1owa_5F7:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
000274D6 04B3 C833 D403 D803 D9     SME_A1owa_600:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
000274DF 0583 EC13 F553 F713 FD03+  SME_A1owa_609:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
000274EA 0584 0014 0953 F713 FD03+  SME_A1owa_614:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
000274F5 0284 0B74 14               SME_A1owa_61F:	dc.b 2, $84, $B, $74, $14	
000274FA 0534 9824 9C34 9F34 A304+  SME_A1owa_624:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00027505 0384 1C24 2514 28          SME_A1owa_62F:	dc.b 3, $84, $1C, $24, $25, $14, $28	
0002750C 0504 A834 A934 AD34 B124+  SME_A1owa_636:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00027517 0284 2A74 33               SME_A1owa_641:	dc.b 2, $84, $2A, $74, $33	
0002751C 03B7 DF17 EB27 ED          SME_A1owa_646:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00027523 0384 1C24 3B14 3E          SME_A1owa_64D:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002752A 03B7 F017 FC27 FE          SME_A1owa_654:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00027531 0254 40B4 46               SME_A1owa_65B:	dc.b 2, $54, $40, $B4, $46	
00027536 0374 5214 5AB4 5C          SME_A1owa_660:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
0002753D 0B74 6814 7004 7924 7504+  SME_A1owa_667:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00027554 0674 7A14 7054 8204 7924+  SME_A1owa_67E:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00027561 0354 C9B4 CF10 6D          SME_A1owa_68B:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00027568 0714 C334 C514 BE04 BD14+  SME_A1owa_692:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00027577 02F4 DB24 EB               SME_A1owa_6A1:	dc.b 2, $F4, $DB, $24, $EB	
0002757C 04B6 A416 B026 B206 B1     SME_A1owa_6A6:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
00027585 03B6 B516 C126 C3          SME_A1owa_6AF:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
0002758C 03B9 D129 DD19 E0          SME_A1owa_6B6:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
00027593 0427 6F37 7237 7627 7A     SME_A1owa_6BD:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
0002759C 01F7 7E                    SME_A1owa_6C6:	dc.b 1, $F7, $7E	
0002759F 01F7 8E                    SME_A1owa_6C9:	dc.b 1, $F7, $8E	
000275A2 01F7 9E                    SME_A1owa_6CC:	dc.b 1, $F7, $9E	
000275A5 01F7 AE                    SME_A1owa_6CF:	dc.b 1, $F7, $AE	
000275A8 01F7 BE                    SME_A1owa_6D2:	dc.b 1, $F7, $BE	
000275AB 01FA 08                    SME_A1owa_6D5:	dc.b 1, $FA, 8	
000275AE 01FA BD                    SME_A1owa_6D8:	dc.b 1, $FA, $BD	
000275B1 01BA 18                    SME_A1owa_6DB:	dc.b 1, $BA, $18	
000275B4 03FA 243A 341A 38          SME_A1owa_6DE:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000275BB 035A 46BA 3A0A 4C          SME_A1owa_6E5:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
000275C2 03BA 4D5A 590A 5F          SME_A1owa_6EC:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
000275C9 03BA 605A 6C0A 72          SME_A1owa_6F3:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
000275D0 03BA 735A 7F0A 85          SME_A1owa_6FA:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
000275D7 085A 7F0A 852A 781A 7C0A+  SME_A1owa_701:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
000275E8 0320 0EFA 8C3A 9C          SME_A1owa_712:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
000275EF 0320 0EFA A02A B0          SME_A1owa_719:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
000275F6 0720 0E2A 912A 952A 980A+  SME_A1owa_720:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00027605 0350 3A50 4010 46          SME_A1owa_72F:	dc.b 3, $50, $3A, $50, $40, $10, $46	
0002760C 01B0 48                    SME_A1owa_736:	dc.b 1, $B0, $48	
0002760F 0280 5A00 09               SME_A1owa_739:	dc.b 2, $80, $5A, 0, 9	
00027614 0707 2817 1617 1A27 1D07+  SME_A1owa_73E:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
00027623 0350 6350 6910 6F          SME_A1owa_74D:	dc.b 3, $50, $63, $50, $69, $10, $6F	
0002762A 01B0 71                    SME_A1owa_754:	dc.b 1, $B0, $71	
0002762D 0257 2907 2F               SME_A1owa_757:	dc.b 2, $57, $29, 7, $2F	
00027632 0230 7D50 81               SME_A1owa_75C:	dc.b 2, $30, $7D, $50, $81	
00027637 0550 8750 8D20 9350 9600+  SME_A1owa_761:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027642 0650 8710 9D30 9F50 A330+  SME_A1owa_76C:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
0002764F 0450 AE10 B470 B620 BE     SME_A1owa_779:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00027658 03F9 7539 8539 89          SME_A1owa_782:	dc.b 3, $F9, $75, $39, $85, $39, $89	
0002765F 0550 C130 C770 CB20 D310+  SME_A1owa_789:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
0002766A 0450 C110 D870 DA20 E2     SME_A1owa_794:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00027673 03F9 8D39 9D39 A1          SME_A1owa_79D:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
0002767A 0550 8710 9D00 9370 E520+  SME_A1owa_7A4:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00027685 0350 F810 FE51 00          SME_A1owa_7AF:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
0002768C 01B1 06                    SME_A1owa_7B6:	dc.b 1, $B1, 6	
0002768F 0181 18                    SME_A1owa_7B9:	dc.b 1, $81, $18	
00027692 0308 FF89 0B29 01          SME_A1owa_7BC:	dc.b 3, 8, $FF, $89, $B, $29, 1	
00027699 0351 2111 2751 29          SME_A1owa_7C3:	dc.b 3, $51, $21, $11, $27, $51, $29	
000276A0 01B1 2F                    SME_A1owa_7CA:	dc.b 1, $B1, $2F	
000276A3 0319 1F09 1639 1B          SME_A1owa_7CD:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
000276AA 0201 0681 3B               SME_A1owa_7D4:	dc.b 2, 1, 6, $81, $3B	
000276AF 0651 4411 4A11 4C81 4E01+  SME_A1owa_7D9:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000276BC 0651 4421 5911 5C11 5E81+  SME_A1owa_7E6:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
000276C9 0451 6911 6F81 7111 7A     SME_A1owa_7F3:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
000276D2 03F9 A529 B529 B8          SME_A1owa_7FC:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
000276D9 0551 7C21 8211 8571 8721+  SME_A1owa_803:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
000276E4 0451 7C11 9281 9411 9D     SME_A1owa_80E:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
000276ED 03F9 BB29 CB19 CE          SME_A1owa_817:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
000276F4 0551 4481 9F11 5E11 A801+  SME_A1owa_81E:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
000276FF 03BA D32A DF0A E2          SME_A1owa_829:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
00027706 05BA E31A EF1A F11A F30A+  SME_A1owa_830:	dc.b 5, $BA, $E3, $1A, $EF, $1A, $F1, $1A, $F3, $A, $F5	
00027711 04BA F61B 022B 042B 07     SME_A1owa_83B:	dc.b 4, $BA, $F6, $1B, 2, $2B, 4, $2B, 7	
0002771A 04BB 0A1B 162B 182B 1B     SME_A1owa_844:	dc.b 4, $BB, $A, $1B, $16, $2B, $18, $2B, $1B	
00027723 02FB 1E7B 2E               SME_A1owa_84D:	dc.b 2, $FB, $1E, $7B, $2E	
00027728 02FB 367B 46               SME_A1owa_852:	dc.b 2, $FB, $36, $7B, $46	
0002772D 02FB 1E7B 2E               SME_A1owa_857:	dc.b 2, $FB, $1E, $7B, $2E	
00027732 02FB 367B 46               SME_A1owa_85C:	dc.b 2, $FB, $36, $7B, $46	
00027737 023B 4EFB 52               SME_A1owa_861:	dc.b 2, $3B, $4E, $FB, $52	
0002773C 03FB 623B 722B 76          SME_A1owa_866:	dc.b 3, $FB, $62, $3B, $72, $2B, $76	
00027743 03FB 792B 892B 8C          SME_A1owa_86D:	dc.b 3, $FB, $79, $2B, $89, $2B, $8C	
0002774A 078B 970B 8F3B 900B 960B+  SME_A1owa_874:	dc.b 7, $8B, $97, $B, $8F, $3B, $90, $B, $96, $B, $95, $B, $94, $1B, $A0	
00027759 02FB 1E7B 2E               SME_A1owa_883:	dc.b 2, $FB, $1E, $7B, $2E	
0002775E 02FB 367B 46               SME_A1owa_888:	dc.b 2, $FB, $36, $7B, $46	
00027763 02FB 1E7B 2E               SME_A1owa_88D:	dc.b 2, $FB, $1E, $7B, $2E	
00027768 02FB 367B 46               SME_A1owa_892:	dc.b 2, $FB, $36, $7B, $46	
0002776D 032D 23FD 132D 26          SME_A1owa_897:	dc.b 3, $2D, $23, $FD, $13, $2D, $26	
00027774 04FD 293D 391D 3D0D 3F     SME_A1owa_89E:	dc.b 4, $FD, $29, $3D, $39, $1D, $3D, $D, $3F	
0002777D 00                         SME_A1owa_8A7:	dc.b 0	
0002777E 00                         SME_A1owa_8A8:	dc.b 0	
0002777F 03BD 403D 4C5D 50          SME_A1owa_8A9:	dc.b 3, $BD, $40, $3D, $4C, $5D, $50	
00027786 03BD 567D 621D 6A          SME_A1owa_8B0:	dc.b 3, $BD, $56, $7D, $62, $1D, $6A	
0002778D 00                         SME_A1owa_8B7:	dc.b 0	
0002778E 00                         SME_A1owa_8B8:	dc.b 0	
0002778F 023B A2FB A6               SME_A1owa_8B9:	dc.b 2, $3B, $A2, $FB, $A6	
00027794 01FB B6                    SME_A1owa_8BE:	dc.b 1, $FB, $B6	
00027797 02FB C67B D6               SME_A1owa_8C1:	dc.b 2, $FB, $C6, $7B, $D6	
0002779C 02FB DE7B EE               SME_A1owa_8C6:	dc.b 2, $FB, $DE, $7B, $EE	
000277A1 02FB F67C 06               SME_A1owa_8CB:	dc.b 2, $FB, $F6, $7C, 6	
000277A6 02FC 0E7C 1E               SME_A1owa_8D0:	dc.b 2, $FC, $E, $7C, $1E	
000277AB 055C 267C 2C5C 340C 3A0C+  SME_A1owa_8D5:	dc.b 5, $5C, $26, $7C, $2C, $5C, $34, $C, $3A, $C, $3B	
000277B6 05BC 3C3C 481C 4C1C 4E2C+  SME_A1owa_8E0:	dc.b 5, $BC, $3C, $3C, $48, $1C, $4C, $1C, $4E, $2C, $50	
000277C1 02BC 535C 5F               SME_A1owa_8EB:	dc.b 2, $BC, $53, $5C, $5F	
000277C6 02BC 655C 71               SME_A1owa_8F0:	dc.b 2, $BC, $65, $5C, $71	
000277CB 02BC 775C 83               SME_A1owa_8F5:	dc.b 2, $BC, $77, $5C, $83	
000277D0 02BC 895C 95               SME_A1owa_8FA:	dc.b 2, $BC, $89, $5C, $95	
000277D5 02BC 9B5C A7               SME_A1owa_8FF:	dc.b 2, $BC, $9B, $5C, $A7	
000277DA 02BC AD5C B9               SME_A1owa_904:	dc.b 2, $BC, $AD, $5C, $B9	
000277DF 02BC BF5C CB               SME_A1owa_909:	dc.b 2, $BC, $BF, $5C, $CB	
000277E4 02BC D15C DD               SME_A1owa_90E:	dc.b 2, $BC, $D1, $5C, $DD	
000277E9 02FC E37C F3               SME_A1owa_913:	dc.b 2, $FC, $E3, $7C, $F3	
000277EE 02FC FB7D 0B               SME_A1owa_918:	dc.b 2, $FC, $FB, $7D, $B	
000277F4 00                         		even
000277F4 00                         		even
000277F4                            
000277F4                            ; ---------------------------------------------------------------------------
000277F4                            ; Uncompressed graphics	- Sonic
000277F4                            ; ---------------------------------------------------------------------------
000277F4                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004EF94                            		even
0004EF94                            ; ---------------------------------------------------------------------------
0004EF94                            ; Compressed graphics - various
0004EF94                            ; ---------------------------------------------------------------------------
0004EF94                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004FC54                            		even
0004FC54                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
00050914                            		even
00050914                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
000515D4                            		even
000515D4                            Art_Shield:	incbin	"artunc\Shield.bin"
00052294                            		even
00052294                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
00052694                            		even
00052694                            
00052694                            Map_SSWalls:	include	"_maps\SS Walls.asm"
00052694                            ; ---------------------------------------------------------------------------
00052694                            ; Sprite mappings - walls of the special stage
00052694                            ; ---------------------------------------------------------------------------
00052694                            Map_SSWalls_internal:
00052694 0000                       		dc.w byte_2C584-Map_SSWalls_internal
00052696 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
00052698 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0005269A 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0005269C 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0005269E 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000526A0 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000526A2 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000526A4 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000526A6 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000526A8 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000526AA 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000526AC 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000526AE 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000526B0 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000526B2 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000526B4 01                         byte_2C584:	dc.b 1
000526B5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000526BA 01                         byte_2C58A:	dc.b 1
000526BB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000526C0 01                         byte_2C590:	dc.b 1
000526C1 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000526C6 01                         byte_2C596:	dc.b 1
000526C7 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000526CC 01                         byte_2C59C:	dc.b 1
000526CD F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000526D2 01                         byte_2C5A2:	dc.b 1
000526D3 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000526D8 01                         byte_2C5A8:	dc.b 1
000526D9 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000526DE 01                         byte_2C5AE:	dc.b 1
000526DF F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000526E4 01                         byte_2C5B4:	dc.b 1
000526E5 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000526EA 01                         byte_2C5BA:	dc.b 1
000526EB F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000526F0 01                         byte_2C5C0:	dc.b 1
000526F1 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000526F6 01                         byte_2C5C6:	dc.b 1
000526F7 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000526FC 01                         byte_2C5CC:	dc.b 1
000526FD F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00052702 01                         byte_2C5D2:	dc.b 1
00052703 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00052708 01                         byte_2C5D8:	dc.b 1
00052709 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0005270E 01                         byte_2C5DE:	dc.b 1
0005270F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00052714                            		even
00052714                            		even
00052714                            
00052714                            ; ---------------------------------------------------------------------------
00052714                            ; Compressed graphics - special stage
00052714                            ; ---------------------------------------------------------------------------
00052714                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005304C                            		even
0005304C                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
00053180                            		even
00053180                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00053E10                            		even
00053E10                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
00054110                            		even
00054110                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00054604                            		even
00054604                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
000546F2                            		even
000546F2                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
000547C2                            		even
000547C2                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000548B8                            		even
000548B8                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00054916                            		even
00054916                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000549A8                            		even
000549A8                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
00054A6A                            		even
00054A6A                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00054B38                            		even
00054B38                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00054C04                            		even
00054C04                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00054CCC                            		even
00054CCC                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00054D96                            		even
00054D96                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00054E66                            		even
00054E66                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
0005505A                            		even
0005505A                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
000551C2                            		even
000551C2                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
00055272                            		even
00055272                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005534C                            		even
0005534C                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
000553D0                            		even
000553D0                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0005554E                            		even
0005554E                            ; ---------------------------------------------------------------------------
0005554E                            ; Compressed graphics - GHZ stuff
0005554E                            ; ---------------------------------------------------------------------------
0005554E                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000555B0                            		even
000555B0                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
000556CA                            		even
000556CA                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
000557E8                            		even
000557E8                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00055830                            		even
00055830                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
000559CE                            		even
000559CE                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00055A4A                            		even
00055A4A                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00055C5E                            		even
00055C5E                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00055D8A                            		even
00055D8A                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00055EDE                            		even
00055EDE                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00055F8E                            		even
00055F8E                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
00055FEE                            		even
00055FEE                            ; ---------------------------------------------------------------------------
00055FEE                            ; Compressed graphics - LZ stuff
00055FEE                            ; ---------------------------------------------------------------------------
00055FEE                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
000560C6                            		even
000560C6                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000568BA                            		even
000568BA                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00056A4C 00                         		even
00056A4C                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00056BB6                            		even
00056BB6                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
000571F6 00                         		even
000571F6                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00057298 00                         		even
00057298                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00057312 00                         		even
00057312                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00057478 00                         		even
00057478                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
000574FE 00                         		even
000574FE                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
0005766A                            		even
0005766A                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00057B4C                            		even
00057B4C                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00057CBC                            		even
00057CBC                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00057F74                            		even
00057F74                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000580BA                            		even
000580BA                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
000581E4                            		even
000581E4                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
00058364 00                         		even
00058364                            ; ---------------------------------------------------------------------------
00058364                            ; Compressed graphics - MZ stuff
00058364                            ; ---------------------------------------------------------------------------
00058364                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
000585F2                            		even
000585F2                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000586B0                            		even
000586B0                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00058788                            		even
00058788                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
000587DC                            		even
000587DC                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00058AFA 00                         		even
00058AFA                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00059410                            		even
00059410                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
0005957E                            		even
0005957E                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00059606                            		even
00059606                            ; ---------------------------------------------------------------------------
00059606                            ; Compressed graphics - SLZ stuff
00059606                            ; ---------------------------------------------------------------------------
00059606                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00059842                            		even
00059842                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00059988                            		even
00059988                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00059BCC                            		even
00059BCC                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00059C68 00                         		even
00059C68                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00059D4A                            		even
00059D4A                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00059F2C                            		even
00059F2C                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
0005A038                            		even
0005A038                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0005A0DC                            		even
0005A0DC                            ; ---------------------------------------------------------------------------
0005A0DC                            ; Compressed graphics - SYZ stuff
0005A0DC                            ; ---------------------------------------------------------------------------
0005A0DC                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
0005A26C                            		even
0005A26C                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0005A2CE                            		even
0005A2CE                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0005A3EA 00                         		even
0005A3EA                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005A678                            		even
0005A678                            ; ---------------------------------------------------------------------------
0005A678                            ; Compressed graphics - SBZ stuff
0005A678                            ; ---------------------------------------------------------------------------
0005A678                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0005A6CC                            		even
0005A6CC                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
0005A968                            		even
0005A968                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005AB58                            		even
0005AB58                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
0005ACF6                            		even
0005ACF6                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005B026                            		even
0005B026                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005B204                            		even
0005B204                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005B25C                            		even
0005B25C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005B40E 00                         		even
0005B40E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005B52A                            		even
0005B52A                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005B6B8                            		even
0005B6B8                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005B752                            		even
0005B752                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005B7AA                            		even
0005B7AA                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005B8A6                            		even
0005B8A6                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005B9BC                            		even
0005B9BC                            ; ---------------------------------------------------------------------------
0005B9BC                            ; Compressed graphics - enemies
0005B9BC                            ; ---------------------------------------------------------------------------
0005B9BC                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005BE04 00                         		even
0005BE04                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005C2F4 00                         		even
0005C2F4                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005C5D8 00                         		even
0005C5D8                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005C998                            		even
0005C998                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005CB80                            		even
0005CB80                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005D2AE 00                         		even
0005D2AE                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005D536 00                         		even
0005D536                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005D7D2 00                         		even
0005D7D2                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005DDA6                            		even
0005DDA6                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005E038                            		even
0005E038                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005E682 00                         		even
0005E682                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005EABE                            		even
0005EABE                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005EDCC 00                         		even
0005EDCC                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005F02C                            		even
0005F02C                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005F32A                            		even
0005F32A                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005F556 00                         		even
0005F556                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005F6E4                            		even
0005F6E4                            ; ---------------------------------------------------------------------------
0005F6E4                            ; Compressed graphics - various
0005F6E4                            ; ---------------------------------------------------------------------------
0005F6E4                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005FD44 00                         		even
0005FD44                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005FEBC 00                         		even
0005FEBC                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005FFDE 00                         		even
0005FFDE                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
000600E6 00                         		even
000600E6                            Nem_Ring:	incbin	"artnem\Rings.bin"
0006023A 00                         		even
0006023A                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
000606C8                            		even
000606C8                            Nem_Explode:	incbin	"artnem\Explosion.bin"
00060D3C                            		even
00060D3C                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
00060DA6                            		even
00060DA6                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060F38                            		even
00060F38                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
00061056 00                         		even
00061056                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
00061142                            		even
00061142                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
000616BA                            		even
000616BA                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
000617A4                            		even
000617A4                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00061918                            		even
00061918                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
00061CA0 00                         		even
00061CA0                            ; ---------------------------------------------------------------------------
00061CA0                            ; Compressed graphics - continue screen
00061CA0                            ; ---------------------------------------------------------------------------
00061CA0                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00061F74 00                         		even
00061F74                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006220E 00                         		even
0006220E                            ; ---------------------------------------------------------------------------
0006220E                            ; Compressed graphics - animals
0006220E                            ; ---------------------------------------------------------------------------
0006220E                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
00062366                            		even
00062366                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
000624C2                            		even
000624C2                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0006263E                            		even
0006263E                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0006275A                            		even
0006275A                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
000628D4                            		even
000628D4                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
00062A0E                            		even
00062A0E                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
00062B6A                            		even
00062B6A                            ; ---------------------------------------------------------------------------
00062B6A                            ; Compressed graphics - primary patterns and block mappings
00062B6A                            ; ---------------------------------------------------------------------------
00062B6A                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
00063546                            		even
00063546                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00064E96                            		even
00064E96                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00066418                            		even
00066418                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00068812                            		even
00068812                            Blk16_TS:	incbin	"map16\TS.bin"
00068A96                            		even
00068A96                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00069BC2                            		even
00069BC2                            Blk256_TS:	incbin	"map256\TS.bin"
0006A770                            		even
0006A770                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006B90E                            		even
0006B90E                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006EDB6                            		even
0006EDB6                            Blk256_LZ:	incbin	"map256\LZ.bin"
000722D8                            		even
000722D8                            Blk16_MZ:	incbin	"map16\MZ.bin"
00072AC6                            		even
00072AC6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00075556                            		even
00075556                            		incbin	"map256\MZ (JP1).bin"
00077690                            		even
00077690                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00077D12                            		even
00077D12                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007B77C                            		even
0007B77C                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007DB86                            		even
0007DB86                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007E286                            		even
0007E286                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
00080A2C                            		even
00080A2C                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
00080FBE                            		even
00080FBE                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
00081BB8                            		even
00081BB8                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000843FA                            		even
000843FA                            		incbin	"map256\SBZ (JP1).bin"
00084F86                            		even
00084F86                            ; ---------------------------------------------------------------------------
00084F86                            ; Compressed graphics - bosses and ending sequence
00084F86                            ; ---------------------------------------------------------------------------
00084F86                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000857EE                            		even
000857EE                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00085AD8                            		even
00085AD8                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0008635C                            		even
0008635C                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00086B9A 00                         		even
00086B9A                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00087368 00                         		even
00087368                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00087890                            		even
00087890                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000879B0                            		even
000879B0                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00087BB8 00                         		even
00087BB8                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00088EA2 00                         		even
00088EA2                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000897E6                            		even
000897E6                            		even
000897E6                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00089D76                            		even
00089D76                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00089FFE                            		even
00089FFE                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008A682                            		even
0008A682                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0008A9E6                            		even
0008A9E6                            
0008A9E6 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
0008AA26                            ; ---------------------------------------------------------------------------
0008AA26                            ; Collision data
0008AA26                            ; ---------------------------------------------------------------------------
0008AA26                            AngleMap:	incbin	"collide\Angle Map.bin"
0008AB26                            		even
0008AB26                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008BB26                            		even
0008BB26                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008CB26                            		even
0008CB26                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008CCD4 00                         		even
0008CCD4                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008CF78                            		even
0008CF78                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008D11C 00                         		even
0008D11C                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008D310                            		even
0008D310                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008D448                            		even
0008D448                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008D618                            		even
0008D618                            ; ---------------------------------------------------------------------------
0008D618                            ; Special Stage layouts
0008D618                            ; ---------------------------------------------------------------------------
0008D618                            SS_1:		incbin	"sslayout\1.bin"
0008D892                            		even
0008D892                            SS_2:		incbin	"sslayout\2.bin"
0008DCA4                            		even
0008DCA4                            SS_3:		incbin	"sslayout\3.bin"
0008E000                            		even
0008E000                            SS_4:		incbin	"sslayout\4.bin"
0008E4DA                            		even
0008E4DA                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008E98A                            			even
0008E98A                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008EC7C                            		even
0008EC7C                            ; ---------------------------------------------------------------------------
0008EC7C                            ; Animated uncompressed graphics
0008EC7C                            ; ---------------------------------------------------------------------------
0008EC7C                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008EE7C                            		even
0008EE7C                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008F27C                            		even
0008F27C                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008F6FC                            		even
0008F6FC                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008F9FC                            		even
0008F9FC                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008FFFC                            		even
0008FFFC                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
000902FC                            		even
000902FC                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
00090D7C                            		even
00090D7C                            
00090D7C                            ; ---------------------------------------------------------------------------
00090D7C                            ; Level	layout index
00090D7C                            ; ---------------------------------------------------------------------------
00090D7C                            Level_Index:
00090D7C                            		; GHZ
00090D7C 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00090D82 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00090D88 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00090D8E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00090D94                            		; LZ
00090D94 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00090D9A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00090DA0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00090DA6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00090DAC                            		; MZ
00090DAC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00090DB2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00090DB8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00090DBE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00090DC4                            		; SLZ
00090DC4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DCA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DD0 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DD6 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00090DDC                            		; SYZ
00090DDC 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00090DE2 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00090DE8 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00090DEE 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00090DF4                            		; SBZ
00090DF4 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00090DFA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00090E00 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00090E06 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00090E0C                            		; Ending
00090E0C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00090E12 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00090E18 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00090E1E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00090E24                            
00090E24                            Level_GHZ1:	incbin	"levels\ghz1.bin"
00091056                            		even
00091056 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009105A                            Level_GHZ2:	incbin	"levels\ghz2.bin"
00091194                            		even
00091194 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00091198                            Level_GHZ3:	incbin	"levels\ghz3.bin"
000912BA                            		even
000912BA                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
000912F8                            		even
000912F8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000912FC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00091300                            
00091300                            Level_LZ1:	incbin	"levels\lz1.bin"
000913C2                            		even
000913C2                            Level_LZbg:	incbin	"levels\lzbg.bin"
000914C4                            		even
000914C4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000914C8                            Level_LZ2:	incbin	"levels\lz2.bin"
00091562                            		even
00091562 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00091566                            Level_LZ3:	incbin	"levels\lz3.bin"
00091680                            		even
00091680 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00091684                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0009173E                            		even
0009173E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00091742                            
00091742                            Level_MZ1:	incbin	"levels\mz1.bin"
00091834                            		even
00091834                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
00091956                            		even
00091956                            Level_MZ2:	incbin	"levels\mz2.bin"
00091A78                            		even
00091A78                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
00091B9A                            		even
00091B9A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00091B9E                            Level_MZ3:	incbin	"levels\mz3.bin"
00091C38                            		even
00091C38                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
00091D5A                            		even
00091D5A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00091D5E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00091D62                            
00091D62                            Level_SLZ1:	incbin	"levels\slz1.bin"
00091E74                            		even
00091E74                            Level_SLZbg:	incbin	"levels\slzbg.bin"
00091EEE                            		even
00091EEE                            Level_SLZ2:	incbin	"levels\slz2.bin"
00091FDE                            		even
00091FDE                            Level_SLZ3:	incbin	"levels\slz3.bin"
000920F8                            		even
000920F8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000920FC                            
000920FC                            Level_SYZ1:	incbin	"levels\syz1.bin"
00092200                            		even
00092200                            		incbin	"levels\syzbg (JP1).bin"
0009223A                            		even
0009223A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009223E                            Level_SYZ2:	incbin	"levels\syz2.bin"
00092342                            		even
00092342 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00092346                            Level_SYZ3:	incbin	"levels\syz3.bin"
000924A0 00                         		even
000924A0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000924A4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000924A8                            
000924A8                            Level_SBZ1:	incbin	"levels\sbz1.bin"
000925CA                            		even
000925CA                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
00092608                            		even
00092608                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0009274A                            		even
0009274A                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
000928B4                            		even
000928B4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000928B8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000928BC                            Level_End:	incbin	"levels\ending.bin"
000928EC 00                         		even
000928EC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000928F0                            
000928F0                            
000928F0                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
00093530                            		even
00093530                            
00093600                            
00093600                            ; ---------------------------------------------------------------------------
00093600                            ; Sprite locations index
00093600                            ; ---------------------------------------------------------------------------
00093600                            ObjPos_Index:
00093600                            		; GHZ
00093600 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093604 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093608 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009360C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093610                            		; LZ
00093610 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093614 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093618 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009361C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093620                            		; MZ
00093620 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093624 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093628 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009362C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093630                            		; SLZ
00093630 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093634 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093638 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009363C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093640                            		; SYZ
00093640 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093644 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093648 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009364C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093650                            		; SBZ
00093650 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093654 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093658 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009365C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093660                            		; Ending
00093660 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093664 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093668 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009366C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093670                            		; --- Put extra object data here. ---
00093670                            ObjPosLZPlatform_Index:
00093670 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00093674 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00093678 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009367C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00093680                            ObjPosSBZPlatform_Index:
00093680 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00093684 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00093688 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009368C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00093690 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00093696                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00093D1A                            		even
00093D1A                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00094338                            		even
00094338                            		incbin	"objpos\ghz3 (JP1).bin"
0009494A                            		even
0009494A                            		incbin	"objpos\lz1 (JP1).bin"
00094980                            		even
00094980                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
00094CC2                            		even
00094CC2                            		incbin	"objpos\lz3 (JP1).bin"
00095286                            		even
00095286                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
000957F0                            		even
000957F0                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00095822                            		even
00095822                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00095854                            		even
00095854                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
00095886                            		even
00095886                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000958B8                            		even
000958B8                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00095902                            		even
00095902                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00095940                            		even
00095940                            		incbin	"objpos\mz1 (JP1).bin"
00095F0A                            		even
00095F0A                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00096522                            		even
00096522                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00096810                            		even
00096810                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00096D44                            		even
00096D44                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
000971AC                            		even
000971AC                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
0009778E                            		even
0009778E                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
000977E2                            		even
000977E2                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
0009781E                            		even
0009781E                            		incbin	"objpos\syz3 (JP1).bin"
00097884                            		even
00097884                            		incbin	"objpos\sbz1 (JP1).bin"
000978CC                            		even
000978CC                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
000978F6                            		even
000978F6                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00097932                            		even
00097932                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00097964                            		even
00097964                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00097996                            		even
00097996                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
000979C8                            		even
000979C8                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
000979FA                            		even
000979FA                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00097A2C                            		even
00097A2C                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00097A64                            		even
00097A64                            ObjPos_End:	incbin	"objpos\ending.bin"
00097BC0                            		even
00097BC0 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00097BC6                            
00097BC6                            		dcb.b $63C,$FF
00098202                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00098202                            
00098202                            SoundDriver:	include "s1.sounddriver.asm"
00098202                            ; ---------------------------------------------------------------------------
00098202                            ; Modified (early?) SMPS 68k Type 1b
00098202                            ; ---------------------------------------------------------------------------
00098202                            ; Go_SoundTypes:
00098202 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00098206                            ; Go_SoundD0:
00098206 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
0009820A 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0009820E 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00098212                            ; off_719A0:
00098212 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00098216 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
0009821A                            ; ---------------------------------------------------------------------------
0009821A                            ; PSG instruments used in music
0009821A                            ; ---------------------------------------------------------------------------
0009821A                            PSG_Index:
0009821A 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00098226 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00098232 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0009823E                            PSG1:		incbin	"sound/psg/psg1.bin"
00098255                            PSG2:		incbin	"sound/psg/psg2.bin"
0009825C                            PSG3:		incbin	"sound/psg/psg3.bin"
0009826D                            PSG4:		incbin	"sound/psg/psg4.bin"
00098278                            PSG6:		incbin	"sound/psg/psg6.bin"
00098287                            PSG5:		incbin	"sound/psg/psg5.bin"
000982B1                            PSG7:		incbin	"sound/psg/psg7.bin"
000982CD                            PSG8:		incbin	"sound/psg/psg8.bin"
000982F5                            PSG9:		incbin	"sound/psg/psg9.bin"
00098306                            ; ---------------------------------------------------------------------------
00098306                            ; New tempos for songs during speed shoes
00098306                            ; ---------------------------------------------------------------------------
00098306                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00098306                            ; tempos while speed shoes are active. If you don't want that, you should add
00098306                            ; their "correct" sped-up main tempos to the list.
00098306                            ; byte_71A94:
00098306                            SpeedUpIndex:
00098306 07                         		dc.b 7		; GHZ
00098307 72                         		dc.b $72	; LZ
00098308 73                         		dc.b $73	; MZ
00098309 26                         		dc.b $26	; SLZ
0009830A 15                         		dc.b $15	; SYZ
0009830B 08                         		dc.b 8		; SBZ
0009830C FF                         		dc.b $FF	; Invincibility
0009830D 05                         		dc.b 5		; Extra Life
0009830E                            		;dc.b ?		; Special Stage
0009830E                            		;dc.b ?		; Title Screen
0009830E                            		;dc.b ?		; Ending
0009830E                            		;dc.b ?		; Boss
0009830E                            		;dc.b ?		; FZ
0009830E                            		;dc.b ?		; Sonic Got Through
0009830E                            		;dc.b ?		; Game Over
0009830E                            		;dc.b ?		; Continue Screen
0009830E                            		;dc.b ?		; Credits
0009830E                            		;dc.b ?		; Drowning
0009830E                            		;dc.b ?		; Get Emerald
0009830E                            
0009830E                            ; ---------------------------------------------------------------------------
0009830E                            ; Music	Pointers
0009830E                            ; ---------------------------------------------------------------------------
0009830E                            MusicIndex:
0009830E 0000 0000                  ptr_mus81:	dc.l Music81
00098312 0000 0000                  ptr_mus82:	dc.l Music82
00098316 0000 0000                  ptr_mus83:	dc.l Music83
0009831A 0000 0000                  ptr_mus84:	dc.l Music84
0009831E 0000 0000                  ptr_mus85:	dc.l Music85
00098322 0000 0000                  ptr_mus86:	dc.l Music86
00098326 0000 0000                  ptr_mus87:	dc.l Music87
0009832A 0000 0000                  ptr_mus88:	dc.l Music88
0009832E 0000 0000                  ptr_mus89:	dc.l Music89
00098332 0000 0000                  ptr_mus8A:	dc.l Music8A
00098336 0000 0000                  ptr_mus8B:	dc.l Music8B
0009833A 0000 0000                  ptr_mus8C:	dc.l Music8C
0009833E 0000 0000                  ptr_mus8D:	dc.l Music8D
00098342 0000 0000                  ptr_mus8E:	dc.l Music8E
00098346 0000 0000                  ptr_mus8F:	dc.l Music8F
0009834A 0000 0000                  ptr_mus90:	dc.l Music90
0009834E 0000 0000                  ptr_mus91:	dc.l Music91
00098352 0000 0000                  ptr_mus92:	dc.l Music92
00098356 0000 0000                  ptr_mus93:	dc.l Music93
0009835A 0000 0000                  ptr_mus94:	dc.l Music94
0009835E 0000 0000                  ptr_mus95:	dc.l Music95
00098362 0000 0000                  ptr_mus96:	dc.l Music96
00098366 0000 0000                  ptr_mus97:	dc.l Music97
0009836A 0000 0000                  ptr_mus98:	dc.l Music98
0009836E 0000 0000                  ptr_mus99:	dc.l Music99
00098372 0000 0000                  ptr_mus9A:	dc.l Music9A
00098376 0000 0000                  ptr_mus9B:	dc.l Music9B
0009837A 0000 0000                  ptr_mus9C:	dc.l Music9C
0009837E                            ptr_musend
0009837E                            ; ---------------------------------------------------------------------------
0009837E                            ; Priority of sound. New music or SFX must have a priority higher than or equal
0009837E                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
0009837E                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
0009837E                            ; any music or SFX can override it (as long as it can override whatever was
0009837E                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
0009837E                            ; will only override special SFX and music will only override music.
0009837E                            ; ---------------------------------------------------------------------------
0009837E                            ; SoundTypes:
0009837E                            SoundPriorities:
0009837E 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
0009838D 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0009839D 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000983AD 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000983BD 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000983CD 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000983DD 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000983E2                            
000983E2                            ; ---------------------------------------------------------------------------
000983E2                            ; Subroutine to update music more than once per frame
000983E2                            ; (Called by horizontal & vert. interrupts)
000983E2                            ; ---------------------------------------------------------------------------
000983E2                            
000983E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000983E2                            
000983E2                            ; sub_71B4C:
000983E2                            UpdateMusic:
000983E2 33FC 0100 00A1 1100        		stopZ80
000983EA 4E71                       		nop	
000983EC 4E71                       		nop	
000983EE 4E71                       		nop	
000983F0                            ; loc_71B5A:
000983F0                            @updateloop:
000983F0 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
000983F8 66F6                       		bne.s	@updateloop			; If so, wait
000983FA                            
000983FA 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00098402 6700                       		beq.s	@driverinput			; Branch if yes
00098404 33FC 0000 00A1 1100        		startZ80
0009840C 4E71                       		nop	
0009840E 4E71                       		nop	
00098410 4E71                       		nop	
00098412 4E71                       		nop	
00098414 4E71                       		nop	
00098416 60CA                       		bra.s	UpdateMusic
00098418                            ; ===========================================================================
00098418                            ; loc_71B82:
00098418                            @driverinput:
00098418 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
0009841E 422E 000E                  		clr.b	f_voice_selector(a6)
00098422 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00098426 6600 0000                  		bne.w	PauseMusic			; if yes, branch
0009842A 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
0009842E 6600                       		bne.s	@skipdelay
00098430 4EBA 0000                  		jsr	TempoWait(pc)
00098434                            ; loc_71B9E:
00098434                            @skipdelay:
00098434 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00098438 6700                       		beq.s	@skipfadeout
0009843A 4EBA 0000                  		jsr	DoFadeOut(pc)
0009843E                            ; loc_71BA8:
0009843E                            @skipfadeout:
0009843E 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00098442 6700                       		beq.s	@skipfadein
00098444 4EBA 0000                  		jsr	DoFadeIn(pc)
00098448                            ; loc_71BB2:
00098448                            @skipfadein:
00098448                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00098448 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
0009844C 6700                       		beq.s	@nosndinput		; if not, branch
0009844E 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00098452                            ; loc_71BBC:
00098452                            @nosndinput:
00098452 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00098458 6700                       		beq.s	@nonewsound		; If yes, branch
0009845A 4EBA 0000                  		jsr	PlaySoundID(pc)
0009845E                            ; loc_71BC8:
0009845E                            @nonewsound:
0009845E 4A38 C901                  		tst.b	($FFFFC901).w
00098462 6700                       		beq.s	@cont
00098464 5338 C901                  		subq.b	#1,($FFFFC901).w
00098468                            		
00098468                            @cont:
00098468 4BEE 0040                  		lea	v_music_dac_track(a6),a5
0009846C 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
0009846E 6A00                       		bpl.s	@dacdone		; Branch if not
00098470 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00098474                            ; loc_71BD4:
00098474                            @dacdone:
00098474 422E 0008                  		clr.b	f_updating_dac(a6)
00098478 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009847A                            ; loc_71BDA:
0009847A                            @bgmfmloop:
0009847A DAFC 0030                  		adda.w	#TrackSz,a5
0009847E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098480 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00098482 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00098486                            ; loc_71BE6:
00098486                            @bgmfmnext:
00098486 51CF FFF2                  		dbf	d7,@bgmfmloop
0009848A                            
0009848A 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
0009848C                            ; loc_71BEC:
0009848C                            @bgmpsgloop:
0009848C DAFC 0030                  		adda.w	#TrackSz,a5
00098490 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098492 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00098494 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00098498                            ; loc_71BF8:
00098498                            @bgmpsgnext:
00098498 51CF FFF2                  		dbf	d7,@bgmpsgloop
0009849C                            
0009849C 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
000984A2 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
000984A4                            ; loc_71C04:
000984A4                            @sfxfmloop:
000984A4 DAFC 0030                  		adda.w	#TrackSz,a5
000984A8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984AA 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000984AC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000984B0                            ; loc_71C10:
000984B0                            @sfxfmnext:
000984B0 51CF FFF2                  		dbf	d7,@sfxfmloop
000984B4                            
000984B4 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
000984B6                            ; loc_71C16:
000984B6                            @sfxpsgloop:
000984B6 DAFC 0030                  		adda.w	#TrackSz,a5
000984BA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984BC 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
000984BE 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000984C2                            ; loc_71C22:
000984C2                            @sfxpsgnext:
000984C2 51CF FFF2                  		dbf	d7,@sfxpsgloop
000984C6                            		
000984C6 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
000984CC DAFC 0030                  		adda.w	#TrackSz,a5
000984D0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984D2 6A00                       		bpl.s	@specfmdone		; Branch if not
000984D4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000984D8                            ; loc_71C38:
000984D8                            @specfmdone:
000984D8 DAFC 0030                  		adda.w	#TrackSz,a5
000984DC 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000984DE 6A00                       		bpl.s	DoStartZ80		; Branch if not
000984E0 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000984E4                            ; loc_71C44:
000984E4                            DoStartZ80:
000984E4 33FC 0000 00A1 1100        		startZ80
000984EC 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
000984F2 6700                       		beq.s @end ; if not, branch
000984F4 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
000984FA 6600                       		bne.s @end ; if not, branch
000984FC 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00098502 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00098506                            
00098506                            	@end:
00098506 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
0009850A 4E75                       		rts
0009850C                            ; End of function UpdateMusic
0009850C                            
0009850C                            
0009850C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009850C                            
0009850C                            ; sub_71C4E: UpdateDAC:
0009850C                            DACUpdateTrack:
0009850C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00098510 6600                       		bne.s	@locret				; Return if not
00098512 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00098518                            ;DACDoNext:
00098518 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
0009851C                            ; loc_71C5E:
0009851C                            @sampleloop:
0009851C 7A00                       		moveq	#0,d5
0009851E 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00098520 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00098524 6500                       		blo.s	@notcoord	; Branch if not
00098526 4EBA 0000                  		jsr	CoordFlag(pc)
0009852A 60F0                       		bra.s	@sampleloop
0009852C                            ; ===========================================================================
0009852C                            ; loc_71C6E:
0009852C                            @notcoord:
0009852C 4A05                       		tst.b	d5			; Is it a sample?
0009852E 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00098530 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00098534 1A1C                       		move.b	(a4)+,d5		; Get another byte
00098536 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00098538 534C                       		subq.w	#1,a4			; Put byte back
0009853A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00098540 6000                       		bra.s	@gotsampleduration
00098542                            ; ===========================================================================
00098542                            ; loc_71C84:
00098542                            @gotduration:
00098542 4EBA 0000                  		jsr	SetDuration(pc)
00098546                            ; loc_71C88:
00098546                            @gotsampleduration:
00098546 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
0009854A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009854E 6600                       		bne.s	@locret			; Return if yes
00098550 7000                       		moveq	#0,d0
00098552 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00098556 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
0009855A 6700                       		beq.s	@locret			; Return if yes
0009855C 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00098560 6600                       		bne.s	@timpani		; Various timpani
00098562 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00098568                            ; locret_71CAA:
00098568                            @locret:
00098568 4E75                       		rts	
0009856A                            ; ===========================================================================
0009856A                            ; loc_71CAC:
0009856A                            @timpani:
0009856A 0400 0088                  		subi.b	#$88,d0		; Convert into an index
0009856E 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00098572                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00098572                            		; use this value from then on.
00098572 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00098578 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00098580 4E75                       		rts	
00098582                            ; End of function DACUpdateTrack
00098582                            
00098582                            ; ===========================================================================
00098582                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00098582                            ; Also, $8C-$8D are so slow you may want to skip them.
00098582                            ; byte_71CC4:
00098582 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00098588                            
00098588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098588                            
00098588                            ; sub_71CCA:
00098588                            FMUpdateTrack:
00098588 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
0009858C 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
0009858E 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00098592 4EBA 0000                  		jsr	FMDoNext(pc)
00098596 4EBA 0000                  		jsr	FMPrepareNote(pc)
0009859A 6000 0000                  		bra.w	FMNoteOn
0009859E                            ; ===========================================================================
0009859E                            ; loc_71CE0:
0009859E                            @notegoing:
0009859E 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
000985A2 4EBA 0000                  		jsr	DoModulation(pc)
000985A6 6000 0000                  		bra.w	FMUpdateFreq
000985AA                            ; End of function FMUpdateTrack
000985AA                            
000985AA                            
000985AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985AA                            
000985AA                            ; sub_71CEC:
000985AA                            FMDoNext:
000985AA 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
000985AE 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
000985B2                            ; loc_71CF4:
000985B2                            @noteloop:
000985B2 7A00                       		moveq	#0,d5
000985B4 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000985B6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
000985BA 6500                       		blo.s	@gotnote	; Branch if not
000985BC 4EBA 0000                  		jsr	CoordFlag(pc)
000985C0 60F0                       		bra.s	@noteloop
000985C2                            ; ===========================================================================
000985C2                            ; loc_71D04:
000985C2                            @gotnote:
000985C2 4EBA 0000                  		jsr	FMNoteOff(pc)
000985C6 4A05                       		tst.b	d5		; Is this a note?
000985C8 6A00                       		bpl.s	@gotduration	; Branch if not
000985CA 4EBA 0000                  		jsr	FMSetFreq(pc)
000985CE 1A1C                       		move.b	(a4)+,d5	; Get another byte
000985D0 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
000985D2 534C                       		subq.w	#1,a4		; Otherwise, put it back
000985D4 6000 0000                  		bra.w	FinishTrackUpdate
000985D8                            ; ===========================================================================
000985D8                            ; loc_71D1A:
000985D8                            @gotduration:
000985D8 4EBA 0000                  		jsr	SetDuration(pc)
000985DC 6000 0000                  		bra.w	FinishTrackUpdate
000985E0                            ; End of function FMDoNext
000985E0                            
000985E0                            
000985E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985E0                            
000985E0                            ; sub_71D22:
000985E0                            FMSetFreq:
000985E0 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
000985E4 6700                       		beq.s	TrackSetRest
000985E6 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
000985EA 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
000985EE E34D                       		lsl.w	#1,d5
000985F0 41FA 0000                  		lea	FMFrequencies(pc),a0
000985F4 3C30 5000                  		move.w	(a0,d5.w),d6
000985F8 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
000985FC 4E75                       		rts	
000985FE                            ; End of function FMSetFreq
000985FE                            
000985FE                            
000985FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985FE                            
000985FE                            ; sub_71D40:
000985FE                            SetDuration:
000985FE 1005                       		move.b	d5,d0
00098600 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00098604                            ; loc_71D46:
00098604                            @multloop:
00098604 5301                       		subq.b	#1,d1
00098606 6700                       		beq.s	@donemult
00098608 D005                       		add.b	d5,d0
0009860A 60F8                       		bra.s	@multloop
0009860C                            ; ===========================================================================
0009860C                            ; loc_71D4E:
0009860C                            @donemult:
0009860C 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00098610 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00098614 4E75                       		rts	
00098616                            ; End of function SetDuration
00098616                            
00098616                            ; ===========================================================================
00098616                            ; loc_71D58:
00098616                            TrackSetRest:
00098616 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009861A 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
0009861E                            
0009861E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009861E                            
0009861E                            ; sub_71D60:
0009861E                            FinishTrackUpdate:
0009861E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00098622 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00098628 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
0009862C 6600                       		bne.s	@locret				; If so, branch
0009862E 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00098634 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00098638 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
0009863C 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
0009863E 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00098642 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00098646 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
0009864A 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
0009864E 1018                       		move.b	(a0)+,d0			; Get steps
00098650 E208                       		lsr.b	#1,d0				; Halve them
00098652 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00098656 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
0009865A                            ; locret_71D9C:
0009865A                            @locret:
0009865A 4E75                       		rts	
0009865C                            ; End of function FinishTrackUpdate
0009865C                            
0009865C                            
0009865C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009865C                            
0009865C                            ; sub_71D9E: NoteFillUpdate
0009865C                            NoteTimeoutUpdate:
0009865C 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00098660 6700                       		beq.s	@locret
00098662 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00098666 6600                       		bne.s	@locret				; Return if it hasn't expired
00098668 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
0009866C 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00098670 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00098674 4EBA 0000                  		jsr	FMNoteOff(pc)
00098678 584F                       		addq.w	#4,sp				; Do not return to caller
0009867A 4E75                       		rts	
0009867C                            ; ===========================================================================
0009867C                            ; loc_71DBE:
0009867C                            @psgnoteoff:
0009867C 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098680 584F                       		addq.w	#4,sp		; Do not return to caller
00098682                            ; locret_71DC4:
00098682                            @locret:
00098682 4E75                       		rts	
00098684                            ; End of function NoteTimeoutUpdate
00098684                            
00098684                            
00098684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098684                            
00098684                            ; sub_71DC6:
00098684                            DoModulation:
00098684 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00098686 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
0009868A 6700                       		beq.s	@locret				; Return if not
0009868C 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00098690 6700                       		beq.s	@waitdone			; If yes, branch
00098692 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00098696 4E75                       		rts	
00098698                            ; ===========================================================================
00098698                            ; loc_71DDA:
00098698                            @waitdone:
00098698 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
0009869C 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
0009869E 4E75                       		rts	
000986A0                            ; ===========================================================================
000986A0                            ; loc_71DE2:
000986A0                            @updatemodulation:
000986A0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
000986A4 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
000986AA 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
000986AE 6600                       		bne.s	@calcfreq			; If nonzero, branch
000986B0 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
000986B6 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
000986BA 4E75                       		rts	
000986BC                            ; ===========================================================================
000986BC                            ; loc_71DFE:
000986BC                            @calcfreq:
000986BC 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
000986C0 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
000986C4 4886                       		ext.w	d6
000986C6 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
000986CA 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
000986CE DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
000986D2 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
000986D4                            ; locret_71E16:
000986D4                            @locret:
000986D4 4E75                       		rts	
000986D6                            ; End of function DoModulation
000986D6                            
000986D6                            
000986D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000986D6                            
000986D6                            ; sub_71E18:
000986D6                            FMPrepareNote:
000986D6 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
000986DA 6600                       		bne.s	locret_71E48		; Return if so
000986DC 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
000986E0 6700                       		beq.s	FMSetRest		; Branch if zero
000986E2                            ; loc_71E24:
000986E2                            FMUpdateFreq:
000986E2 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
000986E6 4880                       		ext.w	d0
000986E8 DC40                       		add.w	d0,d6			; Add note frequency
000986EA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000986EE 6600                       		bne.s	locret_71E48		; Return if so
000986F0 3206                       		move.w	d6,d1
000986F2 E049                       		lsr.w	#8,d1
000986F4 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
000986F8 4EBA 0000                  		jsr	WriteFMIorII(pc)
000986FC 1206                       		move.b	d6,d1
000986FE 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00098702 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00098706                            ; locret_71E48:
00098706                            locret_71E48:
00098706 4E75                       		rts	
00098708                            ; ===========================================================================
00098708                            ; loc_71E4A:
00098708                            FMSetRest:
00098708 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009870C 4E75                       		rts	
0009870E                            ; End of function FMPrepareNote
0009870E                            
0009870E                            ; ===========================================================================
0009870E                            ; loc_71E50:
0009870E                            PauseMusic:
0009870E 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00098710 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00098716 6700 0000                  		beq.w	@unpausedallfm
0009871A 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00098720 7602                       		moveq	#2,d3
00098722 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00098726 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00098728                            ; loc_71E6A:
00098728                            @killpanloop:
00098728 4EBA 0000                  		jsr	WriteFMI(pc)
0009872C 4EBA 0000                  		jsr	WriteFMII(pc)
00098730 5200                       		addq.b	#1,d0
00098732 51CB FFF4                  		dbf	d3,@killpanloop
00098736                            
00098736 7602                       		moveq	#2,d3
00098738 7028                       		moveq	#$28,d0		; Key on/off register
0009873A                            ; loc_71E7C:
0009873A                            @noteoffloop:
0009873A 1203                       		move.b	d3,d1		; FM1, FM2, FM3
0009873C 4EBA 0000                  		jsr	WriteFMI(pc)
00098740 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00098742 4EBA 0000                  		jsr	WriteFMI(pc)
00098746 51CB FFF2                  		dbf	d3,@noteoffloop
0009874A                            
0009874A 4EBA 0000                  		jsr	PSGSilenceAll(pc)
0009874E 6000 FD94                  		bra.w	DoStartZ80
00098752                            ; ===========================================================================
00098752                            ; loc_71E94:
00098752                            @unpausemusic:
00098752 422E 0003                  		clr.b	f_pausemusic(a6)
00098756 7630                       		moveq	#TrackSz,d3
00098758 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
0009875C 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
0009875E                            ; loc_71EA0:
0009875E                            @bgmfmloop:
0009875E 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00098762 6700                       		beq.s	@bgmfmnext		; Branch if not
00098764 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00098768 6600                       		bne.s	@bgmfmnext		; Branch if yes
0009876A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009876E 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00098772 4EBA 0000                  		jsr	WriteFMIorII(pc)
00098776                            ; loc_71EB8:
00098776                            @bgmfmnext:
00098776 DAC3                       		adda.w	d3,a5
00098778 51CC FFE4                  		dbf	d4,@bgmfmloop
0009877C                            
0009877C 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00098780 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00098782                            ; loc_71EC4:
00098782                            @sfxfmloop:
00098782 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00098786 6700                       		beq.s	@sfxfmnext		; Branch if not
00098788 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009878C 6600                       		bne.s	@sfxfmnext		; Branch if yes
0009878E 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00098792 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00098796 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009879A                            ; loc_71EDC:
0009879A                            @sfxfmnext:
0009879A DAC3                       		adda.w	d3,a5
0009879C 51CC FFE4                  		dbf	d4,@sfxfmloop
000987A0                            
000987A0 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
000987A4 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000987A8 6700                       		beq.s	@unpausedallfm		; Branch if not
000987AA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000987AE 6600                       		bne.s	@unpausedallfm		; Branch if yes
000987B0 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000987B4 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000987B8 4EBA 0000                  		jsr	WriteFMIorII(pc)
000987BC                            ; loc_71EFE:
000987BC                            @unpausedallfm:
000987BC 6000 FD26                  		bra.w	DoStartZ80
000987C0                            
000987C0                            ; ---------------------------------------------------------------------------
000987C0                            ; Subroutine to	play a sound or	music track
000987C0                            ; ---------------------------------------------------------------------------
000987C0                            
000987C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000987C0                            
000987C0                            ; Sound_Play:
000987C0                            CycleSoundQueue:
000987C0 2079 0009 8202             		movea.l	(Go_SoundPriorities).l,a0
000987C6 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
000987CA 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
000987CC 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
000987CE                            ; loc_71F12:
000987CE                            @inputloop:
000987CE 1011                       		move.b	(a1),d0			; move track number to d0
000987D0 1200                       		move.b	d0,d1
000987D2 4219                       		clr.b	(a1)+			; Clear entry
000987D4 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
000987D8 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
000987DA 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
000987E0 6700                       		beq.s	@havesound		; If yes, branch
000987E2 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
000987E6 6000                       		bra.s	@nextinput
000987E8                            ; ===========================================================================
000987E8                            ; loc_71F2C:
000987E8                            @havesound:
000987E8 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
000987EC 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
000987F0 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
000987F2 6500                       		blo.s	@nextinput		; Branch if yes
000987F4 1602                       		move.b	d2,d3			; Store new priority
000987F6 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
000987FA                            ; loc_71F3E:
000987FA                            @nextinput:
000987FA 51CC FFD2                  		dbf	d4,@inputloop
000987FE                            
000987FE 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00098800 6B00                       		bmi.s	@locret
00098802 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00098804                            ; locret_71F4A:
00098804                            @locret:
00098804 4E75                       		rts	
00098806                            ; End of function CycleSoundQueue
00098806                            
00098806                            
00098806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098806                            
00098806                            ; Sound_ChkValue:
00098806                            PlaySoundID:
00098806 7E00                       		moveq	#0,d7
00098808 1E2E 0009                  		move.b	v_sound_id(a6),d7
0009880C 6700 0000                  		beq.w	StopAllSound
00098810 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00098812 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00098818                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00098818                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00098818                            		; See LevSel_NoCheat for more.
00098818 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
0009881C 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00098820 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00098824 6500 0000                  		blo.w	@locret			; Return if yes
00098828 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
0009882C 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00098830 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00098834 6500 0000                  		blo.w	@locret			; Return if yes
00098838 0C07 00D1                  		cmpi.b	#$D1,d7
0009883C 6500 0000                  		bcs.w	Sound_PlaySpecial
00098840 0C07 00DF                  		cmp.b	#$DF,d7
00098844 6F00 0000                  		ble.w	Sound_D1toDF
00098848 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
0009884C 6500 0000                  		blo.w	@locret			; Return if yes
00098850 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00098854 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00098856                            ; locret_71F8C:
00098856                            @locret:
00098856 4E75                       		rts	
00098858                            ; ===========================================================================
00098858                            
00098858                            Sound_E0toE4:
00098858 0407 00E0                  		subi.b	#flg__First,d7
0009885C E54F                       		lsl.w	#2,d7
0009885E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00098862                            ; ===========================================================================
00098862                            
00098862                            Sound_ExIndex:
00098862 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00098866 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
0009886A 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
0009886E 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00098872 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00098876                            ptr_flgend
00098876                            ; ===========================================================================
00098876                            ; ---------------------------------------------------------------------------
00098876                            ; Play "Say-gaa" PCM sound
00098876                            ; ---------------------------------------------------------------------------
00098876                            ; Sound_E1: PlaySega:
00098876                            PlaySegaSound:
00098876 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
0009887E 33FC 0000 00A1 1100        		startZ80
00098886 323C 0011                  		move.w	#$11,d1
0009888A                            ; loc_71FC0:
0009888A                            @busyloop_outer:
0009888A 303C FFFF                  		move.w	#-1,d0
0009888E                            ; loc_71FC4:
0009888E                            @busyloop:
0009888E 4E71                       		nop	
00098890 51C8 FFFC                  		dbf	d0,@busyloop
00098894                            
00098894 51C9 FFF4                  		dbf	d1,@busyloop_outer
00098898                            
00098898 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
0009889A 4E75                       		rts	
0009889C                            ; ===========================================================================
0009889C                            ; ---------------------------------------------------------------------------
0009889C                            ; Play music track $81-$9F
0009889C                            ; ---------------------------------------------------------------------------
0009889C                            ; Sound_81to9F:
0009889C                            Sound_PlayBGM:
0009889C 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
000988A0 6600                       		bne.s	@bgmnot1up		; if not, branch
000988A2 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
000988A6 6600 0000                  		bne.w	@locdblret		; if yes, branch
000988AA 4BEE 0040                  		lea	v_music_track_ram(a6),a5
000988AE 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
000988B0                            ; loc_71FE6:
000988B0                            @clearsfxloop:
000988B0 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000988B4 DAFC 0030                  		adda.w	#TrackSz,a5
000988B8 51C8 FFF6                  		dbf	d0,@clearsfxloop
000988BC                            
000988BC 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000988C0 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
000988C2                            ; loc_71FF8:
000988C2                            @cleartrackplayloop:
000988C2 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
000988C6 DAFC 0030                  		adda.w	#TrackSz,a5
000988CA 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
000988CE                            
000988CE 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000988D0 204E                       		movea.l	a6,a0
000988D2 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000988D6 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
000988DA                            ; loc_72012:
000988DA                            @backupramloop:
000988DA 22D8                       		move.l	(a0)+,(a1)+
000988DC 51C8 FFFC                  		dbf	d0,@backupramloop
000988E0                            
000988E0 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
000988E6 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
000988E8 6000                       		bra.s	@bgm_loadMusic
000988EA                            ; ===========================================================================
000988EA                            ; loc_72024:
000988EA                            @bgmnot1up:
000988EA 422E 0027                  		clr.b	f_1up_playing(a6)
000988EE 422E 0026                  		clr.b	v_fadein_counter(a6)
000988F2                            ; loc_7202C:
000988F2                            @bgm_loadMusic:
000988F2 4EBA 0000                  		jsr	InitMusicPlayback(pc)
000988F6 2879 0009 8212             		movea.l	(Go_SpeedUpIndex).l,a4
000988FC 0407 0081                  		subi.b	#bgm__First,d7
00098900 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00098906 2879 0009 820A             		movea.l	(Go_MusicIndex).l,a4
0009890C E54F                       		lsl.w	#2,d7
0009890E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00098912 7000                       		moveq	#0,d0
00098914 3014                       		move.w	(a4),d0			; load voice pointer
00098916 D08C                       		add.l	a4,d0			; It is a relative pointer
00098918 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
0009891C 102C 0005                  		move.b	5(a4),d0		; load tempo
00098920 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00098924                            		;tst.b	f_speedup(a6)
00098924                            		;beq.s	@nospeedshoes
00098924                            		;move.b	v_speeduptempo(a6),d0
00098924                            ; loc_72068:
00098924                            ;@nospeedshoes:
00098924 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00098928 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
0009892C 7200                       		moveq	#0,d1
0009892E 264C                       		movea.l	a4,a3
00098930 5C4C                       		addq.w	#6,a4			; Point past header
00098932 7E00                       		moveq	#0,d7
00098934 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00098938 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
0009893C 5307                       		subq.b	#1,d7
0009893E 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00098942 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00098946 7C30                       		moveq	#TrackSz,d6
00098948 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
0009894C 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00098950 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00098954                            ; loc_72098:
00098954                            @bmg_fmloadloop:
00098954 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00098958 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0009895C 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00098960 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00098964 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00098968 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
0009896C 7000                       		moveq	#0,d0
0009896E 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00098970 D08B                       		add.l	a3,d0				; Relative pointer
00098972 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00098976 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
0009897A D2C6                       		adda.w	d6,a1
0009897C 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00098980                            		
00098980 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00098986 6600                       		bne.s	@silencefm6
00098988 702B                       		moveq	#$2B,d0		; DAC enable/disable register
0009898A 7200                       		moveq	#0,d1		; Disable DAC
0009898C 4EBA 0000                  		jsr	WriteFMI(pc)
00098990 6000 0000                  		bra.w	@bgm_fmdone
00098994                            ; ===========================================================================
00098994                            ; loc_720D8:
00098994                            @silencefm6:
00098994 7028                       		moveq	#$28,d0		; Key on/off register
00098996 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00098998 4EBA 0000                  		jsr	WriteFMI(pc)
0009899C 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000989A0 727F                       		moveq	#$7F,d1		; Total silence
000989A2 4EBA 0000                  		jsr	WriteFMII(pc)
000989A6 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000989AA 727F                       		moveq	#$7F,d1		; Total silence
000989AC 4EBA 0000                  		jsr	WriteFMII(pc)
000989B0 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000989B4 727F                       		moveq	#$7F,d1		; Total silence
000989B6 4EBA 0000                  		jsr	WriteFMII(pc)
000989BA 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000989BE 727F                       		moveq	#$7F,d1		; Total silence
000989C0 4EBA 0000                  		jsr	WriteFMII(pc)
000989C4 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000989C8 123C 00C0                  		move.b	#$C0,d1		; Stereo
000989CC 4EBA 0000                  		jsr	WriteFMII(pc)
000989D0                            ; loc_72114:
000989D0                            @bgm_fmdone:
000989D0 7E00                       		moveq	#0,d7
000989D2 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000989D6 6700                       		beq.s	@bgm_psgdone	; branch if zero
000989D8 5307                       		subq.b	#1,d7
000989DA 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
000989DE 45FA 0000                  		lea	PSGInitBytes(pc),a2
000989E2                            ; loc_72126:
000989E2                            @bgm_psgloadloop:
000989E2 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000989E6 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000989EA 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000989EE 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000989F2 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000989F6 7000                       		moveq	#0,d0
000989F8 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
000989FA D08B                       		add.l	a3,d0				; Relative pointer
000989FC 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00098A00 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00098A04 101C                       		move.b	(a4)+,d0			; load redundant byte
00098A06 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00098A0A D2C6                       		adda.w	d6,a1
00098A0C 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00098A10                            ; loc_72154:
00098A10                            @bgm_psgdone:
00098A10 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00098A14 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00098A16                            ; loc_7215A:
00098A16                            @sfxstoploop:
00098A16 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00098A18 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00098A1C 7000                       		moveq	#0,d0
00098A1E 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00098A22 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00098A24 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00098A26 E508                       		lsl.b	#2,d0			; Convert to index
00098A28 6000                       		bra.s	@gotchannelindex
00098A2A                            ; ===========================================================================
00098A2A                            ; loc_7216E:
00098A2A                            @sfxpsgchannel:
00098A2A E608                       		lsr.b	#3,d0		; Convert to index
00098A2C                            ; loc_72170:
00098A2C                            @gotchannelindex:
00098A2C 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00098A30 2070 0000                  		movea.l	(a0,d0.w),a0
00098A34 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00098A38                            ; loc_7217C:
00098A38                            @sfxnext:
00098A38 D2C6                       		adda.w	d6,a1
00098A3A 51CF FFDA                  		dbf	d7,@sfxstoploop
00098A3E                            
00098A3E 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098A42 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00098A44 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098A4A                            ; loc_7218E:
00098A4A                            @checkspecialpsg:
00098A4A 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098A4E 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00098A50 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098A56                            ; loc_7219A:
00098A56                            @sendfmnoteoff:
00098A56 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098A5A 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00098A5C                            ; loc_721A0:
00098A5C                            @fmnoteoffloop:
00098A5C 4EBA 0000                  		jsr	FMNoteOff(pc)
00098A60 DAC6                       		adda.w	d6,a5
00098A62 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00098A66 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00098A68                            ; loc_721AC:
00098A68                            @psgnoteoffloop:
00098A68 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098A6C DAC6                       		adda.w	d6,a5
00098A6E 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00098A72                            ; loc_721B6:
00098A72                            @locdblret:
00098A72 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00098A74 4E75                       		rts	
00098A76                            ; ===========================================================================
00098A76                            ; byte_721BA:
00098A76 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00098A7E 00                         		even
00098A7E                            ; byte_721C2:
00098A7E 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00098A82 00                         		even
00098A82                            ; ===========================================================================
00098A82                            ; ---------------------------------------------------------------------------
00098A82                            ; Play Spin Dash sound effect
00098A82                            ; ---------------------------------------------------------------------------
00098A82                            Sound_D1toDF:
00098A82 4A2E 0027                  		tst.b	$27(a6)
00098A86 6600 0000                  		bne.w	loc_722C6
00098A8A 4A2E 0004                  		tst.b	4(a6)
00098A8E 6600 0000                  		bne.w	loc_722C6
00098A92 4A2E 0024                  		tst.b	$24(a6)
00098A96 6600 0000                  		bne.w	loc_722C6
00098A9A 4238 C900                  		clr.b	($FFFFC900).w
00098A9E 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00098AA2 6600                       		bne.s	@cont3	; if not, branch
00098AA4 3F00                       		move.w	d0,-(sp)
00098AA6 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00098AAA 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00098AAE 6600                       		bne.s	@cont1		; if it is, branch
00098AB0 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00098AB4                            		
00098AB4                            @cont1:
00098AB4 5200                       		addq.b	#1,d0
00098AB6 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00098ABA 6400                       		bcc.s	@cont2		; if it has, branch
00098ABC 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00098AC0                            		
00098AC0                            @cont2:
00098AC0 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00098AC6 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00098ACC 301F                       		move.w	(sp)+,d0
00098ACE                            		
00098ACE                            @cont3:	
00098ACE 2079 0009 820E             		movea.l	(Go_SoundIndex).l,a0
00098AD4 0407 00A0                  		sub.b	#$A0,d7
00098AD8 6000                       		bra.s	SoundEffects_Common
00098ADA                            ; ---------------------------------------------------------------------------
00098ADA                            ; Play normal sound effect
00098ADA                            ; ---------------------------------------------------------------------------
00098ADA                            ; Sound_A0toCF:
00098ADA                            Sound_PlaySFX:
00098ADA 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00098ADE 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00098AE2 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00098AE6 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00098AEA 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00098AEE 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00098AF2 4238 C900                  		clr.b	($FFFFC900).w
00098AF6 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00098AFA 6600                       		bne.s	Sound_notB5		; if not, branch
00098AFC 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00098B00 6600                       		bne.s	loc_721EE		; Branch if not
00098B02 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00098B06                            
00098B06                            loc_721EE:
00098B06 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00098B0C                            
00098B0C                            Sound_notB5:
00098B0C 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00098B10 6600                       		bne.s	Sound_notA7		; if not, branch
00098B12 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00098B16 6600 0000                  		bne.w	locret_722C4			; Return if not
00098B1A 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00098B20                            		
00098B20                            Sound_notA7:
00098B20 2079 0009 820E             		movea.l	(Go_SoundIndex).l,a0
00098B26 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00098B2A                            
00098B2A                            SoundEffects_Common:		
00098B2A E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00098B2C 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00098B30 224B                       		movea.l	a3,a1
00098B32 7200                       		moveq	#0,d1
00098B34 3219                       		move.w	(a1)+,d1		; Voice pointer
00098B36 D28B                       		add.l	a3,d1			; Relative pointer
00098B38 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00098B3A                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00098B3A                            		; index entry is above $3F will cause a crash. This is actually the same way that
00098B3A                            		; this bug is fixed in Ristar's driver.
00098B3A 7E00                       		moveq	#0,d7	
00098B3C 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00098B3E 5307                       		subq.b	#1,d7
00098B40 7C30                       		moveq	#TrackSz,d6
00098B42                            
00098B42                            loc_72228:
00098B42 7600                       		moveq	#0,d3
00098B44 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00098B48 1803                       		move.b	d3,d4
00098B4A 6B00                       		bmi.s	loc_72244	; Branch if PSG
00098B4C 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00098B4E E54B                       		lsl.w	#2,d3
00098B50 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00098B54 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B58 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00098B5C 6000                       		bra.s	loc_7226E
00098B5E                            ; ===========================================================================
00098B5E                            
00098B5E                            loc_72244:
00098B5E E64B                       		lsr.w	#3,d3
00098B60 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00098B64 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B68 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00098B6C 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00098B70 6600                       		bne.s	loc_7226E	; Branch if not
00098B72 1004                       		move.b	d4,d0
00098B74 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00098B78 13C0 00C0 0011             		move.b	d0,(psg_input).l
00098B7E 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00098B82 13C0 00C0 0011             		move.b	d0,(psg_input).l
00098B88                            
00098B88                            loc_7226E:
00098B88 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00098B8C 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B90 244D                       		movea.l	a5,a2
00098B92 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00098B94                            
00098B94                            loc_72276:
00098B94 429A                       		clr.l	(a2)+
00098B96 51C8 FFFC                  		dbf	d0,loc_72276
00098B9A                            
00098B9A 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00098B9C 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00098BA0 7000                       		moveq	#0,d0
00098BA2 3019                       		move.w	(a1)+,d0			; Track data pointer
00098BA4 D08B                       		add.l	a3,d0				; Relative pointer
00098BA6 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00098BAA 3B59 0008                  		move.w	(a1)+,8(a5)
00098BAE 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00098BB2 6700                       		beq.s	@cont		; if not, branch
00098BB4 3F00                       		move.w	d0,-(sp)
00098BB6 1038 C902                  		move.b	($FFFFC902).w,d0
00098BBA D12D 0008                  		add.b	d0,8(a5)
00098BBE 301F                       		move.w	(sp)+,d0
00098BC0                            		
00098BC0                            @cont:
00098BC0 1B7C 0001 000E             		move.b	#1,$E(a5)
00098BC6 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00098BCA 4A04                       		tst.b	d4				; Is this a PSG channel?
00098BCC 6B00                       		bmi.s	loc_722A8		; Branch if yes
00098BCE 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00098BD4 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00098BD8                            
00098BD8                            loc_722A8:
00098BD8 51CF FF68                  		dbf	d7,loc_72228
00098BDC                            
00098BDC 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098BE0 6A00                       		bpl.s	loc_722B8				; Branch if not
00098BE2 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098BE8                            
00098BE8                            loc_722B8:
00098BE8 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00098BEC 6A00                       		bpl.s	locret_722C4						; Branch if not
00098BEE 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098BF4                            
00098BF4                            locret_722C4:
00098BF4 4E75                       		rts	
00098BF6                            ; ===========================================================================
00098BF6                            
00098BF6                            loc_722C6:
00098BF6 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00098BF8 4E75                       		rts	
00098BFA                            ; ===========================================================================
00098BFA                            ; ---------------------------------------------------------------------------
00098BFA                            ; RAM addresses for FM and PSG channel variables used by the SFX
00098BFA                            ; ---------------------------------------------------------------------------
00098BFA                            ; dword_722CC: BGMChannelRAM:
00098BFA                            SFX_BGMChannelRAM:
00098BFA 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00098BFE 0000 0000                  		dc.l 0
00098C02 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00098C06 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00098C0A 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00098C0E 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00098C12 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00098C16 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00098C1A                            ; dword_722EC: SFXChannelRAM:
00098C1A                            SFX_SFXChannelRAM:
00098C1A 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00098C1E 0000 0000                  		dc.l 0
00098C22 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00098C26 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00098C2A 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00098C2E 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00098C32 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00098C36 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00098C3A                            ; ===========================================================================
00098C3A                            ; ---------------------------------------------------------------------------
00098C3A                            ; Play GHZ waterfall sound
00098C3A                            ; ---------------------------------------------------------------------------
00098C3A                            ; Sound_D0toDF:
00098C3A                            Sound_PlaySpecial:
00098C3A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00098C3E 6600 0000                  		bne.w	@locret			; Return if so
00098C42 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00098C46 6600 0000                  		bne.w	@locret			; Exit if it is
00098C4A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00098C4E 6600 0000                  		bne.w	@locret			; Exit if it is
00098C52 2079 0009 8206             		movea.l	(Go_SpecSoundIndex).l,a0
00098C58 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00098C5C E54F                       		lsl.w	#2,d7
00098C5E 2670 7000                  		movea.l	(a0,d7.w),a3
00098C62 224B                       		movea.l	a3,a1
00098C64 7000                       		moveq	#0,d0
00098C66 3019                       		move.w	(a1)+,d0			; Voice pointer
00098C68 D08B                       		add.l	a3,d0				; Relative pointer
00098C6A 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00098C6E 1A19                       		move.b	(a1)+,d5			; Dividing timing
00098C70                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00098C70                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00098C70 7E00                       		moveq	#0,d7	
00098C72 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00098C74 5307                       		subq.b	#1,d7
00098C76 7C30                       		moveq	#TrackSz,d6
00098C78                            ; loc_72348:
00098C78                            @sfxloadloop:
00098C78 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00098C7C 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00098C7E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098C84 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098C88 6000                       		bra.s	@sfxinitpsg
00098C8A                            ; ===========================================================================
00098C8A                            ; loc_7235A:
00098C8A                            @sfxoverridepsg:
00098C8A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098C90 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00098C94                            ; loc_72364:
00098C94                            @sfxinitpsg:
00098C94 244D                       		movea.l	a5,a2
00098C96 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00098C98                            ; loc_72368:
00098C98                            @clearsfxtrackram:
00098C98 429A                       		clr.l	(a2)+
00098C9A 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00098C9E                            
00098C9E 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00098CA0 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00098CA4 7000                       		moveq	#0,d0
00098CA6 3019                       		move.w	(a1)+,d0			; Track data pointer
00098CA8 D08B                       		add.l	a3,d0				; Relative pointer
00098CAA 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00098CAE 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00098CB2 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00098CB8 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00098CBC 4A04                       		tst.b	d4				; Is this a PSG channel?
00098CBE 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00098CC0 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00098CC6                            ; loc_72396:
00098CC6                            @sfxpsginitdone:
00098CC6 51CF FFB0                  		dbf	d7,@sfxloadloop
00098CCA                            
00098CCA 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00098CCE 6A00                       		bpl.s	@doneoverride					; Branch if not
00098CD0 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098CD6                            ; loc_723A6:
00098CD6                            @doneoverride:
00098CD6 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00098CDA 6A00                       		bpl.s	@locret						; Branch if not
00098CDC 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098CE2 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00098CE6 13C4 00C0 0011             		move.b	d4,(psg_input).l
00098CEC 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00098CF0 13C4 00C0 0011             		move.b	d4,(psg_input).l
00098CF6                            ; locret_723C6:
00098CF6                            @locret:
00098CF6 4E75                       		rts	
00098CF8                            ; End of function PlaySoundID
00098CF8                            
00098CF8                            ; ===========================================================================
00098CF8                            ; ---------------------------------------------------------------------------
00098CF8                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00098CF8                            ; ---------------------------------------------------------------------------
00098CF8                            ; The first block would have been used for overriding the music tracks
00098CF8                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00098CF8                            ; The third block would be used to set up the Special SFX
00098CF8                            ; The second block, however, is for the SFX tracks, which have a higher priority
00098CF8                            ; and would be checked for if they're currently playing
00098CF8                            ; If they are, then the third block would be used again, this time to mark
00098CF8                            ; the new tracks as 'currently playing'
00098CF8                            
00098CF8                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00098CF8                            
00098CF8                            ; BGMFM4PSG3RAM:
00098CF8                            ;SpecSFX_BGMChannelRAM:
00098CF8 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00098CFC 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00098D00                            ; SFXFM4PSG3RAM:
00098D00                            ;SpecSFX_SFXChannelRAM:
00098D00 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00098D04 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00098D08                            ; SpecialSFXFM4PSG3RAM:
00098D08                            ;SpecSFX_SpecSFXChannelRAM:
00098D08 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00098D0C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00098D10                            
00098D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098D10                            
00098D10                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00098D10                            StopSFX:
00098D10 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00098D12 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00098D16 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00098D18                            ; loc_723EA:
00098D18                            @trackloop:
00098D18 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00098D1A 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00098D1E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00098D22 7600                       		moveq	#0,d3
00098D24 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00098D28 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00098D2A 4EBA 0000                  		jsr	FMNoteOff(pc)
00098D2E 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00098D32 6600                       		bne.s	@getfmpointer					; Branch if not
00098D34 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00098D38 6A00                       		bpl.s	@getfmpointer					; Branch if not
00098D3A                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00098D3A                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00098D3A                            		; is playing its sound!
00098D3A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098D3E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00098D42 6000                       		bra.s	@gotfmpointer
00098D44                            ; ===========================================================================
00098D44                            ; loc_72416:
00098D44                            @getfmpointer:
00098D44 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00098D46 E50B                       		lsl.b	#2,d3
00098D48 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00098D4C 264D                       		movea.l	a5,a3
00098D4E 2A70 3000                  		movea.l	(a0,d3.w),a5
00098D52 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00098D56                            ; loc_72428:
00098D56                            @gotfmpointer:
00098D56 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098D5A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098D5E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098D62 4EBA 0000                  		jsr	SetVoice(pc)
00098D66 2A4B                       		movea.l	a3,a5
00098D68 6000                       		bra.s	@nexttrack
00098D6A                            ; ===========================================================================
00098D6A                            ; loc_7243C:
00098D6A                            @trackpsg:
00098D6A 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098D6E 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00098D72 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00098D76 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00098D78 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00098D7C 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00098D7E E60B                       		lsr.b	#3,d3
00098D80 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00098D84 2070 3000                  		movea.l	(a0,d3.w),a0
00098D88                            ; loc_7245A:
00098D88                            @gotpsgpointer:
00098D88 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098D8C 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00098D90 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00098D96 6600                       		bne.s	@nexttrack			; Branch if not
00098D98 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00098DA0                            ; loc_72472:
00098DA0                            @nexttrack:
00098DA0 DAFC 0030                  		adda.w	#TrackSz,a5
00098DA4 51CF FF72                  		dbf	d7,@trackloop
00098DA8                            
00098DA8 4E75                       		rts	
00098DAA                            ; End of function StopSFX
00098DAA                            
00098DAA                            
00098DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098DAA                            
00098DAA                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00098DAA                            StopSpecialSFX:
00098DAA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098DAE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DB0 6A00                       		bpl.s	@fadedfm		; Branch if not
00098DB2 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098DB6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00098DBA 6600                       		bne.s	@fadedfm		; Branch if not
00098DBC 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00098DC0 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00098DC4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098DC8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098DCC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DCE 6A00                       		bpl.s	@fadedfm		; Branch if not
00098DD0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00098DD4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098DD8 4EBA 0000                  		jsr	SetVoice(pc)
00098DDC                            ; loc_724AE:
00098DDC                            @fadedfm:
00098DDC 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00098DE0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DE2 6A00                       		bpl.s	@fadedpsg		; Branch if not
00098DE4 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098DE8 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00098DEC 6600                       		bne.s	@fadedpsg		; Return if not
00098DEE 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00098DF2 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00098DF6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098DFA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098DFE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E00 6A00                       		bpl.s	@fadedpsg		; Return if not
00098E02 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00098E08 6600                       		bne.s	@fadedpsg			; Return if not
00098E0A 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00098E12                            ; locret_724E4:
00098E12                            @fadedpsg:
00098E12 4E75                       		rts	
00098E14                            ; End of function StopSpecialSFX
00098E14                            
00098E14                            ; ===========================================================================
00098E14                            ; ---------------------------------------------------------------------------
00098E14                            ; Fade out music
00098E14                            ; ---------------------------------------------------------------------------
00098E14                            ; Sound_E0:
00098E14                            FadeOutMusic:
00098E14 4EBA FEFA                  		jsr	StopSFX(pc)
00098E18 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00098E1C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00098E22 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00098E28 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00098E2C 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00098E30 4E75                       		rts	
00098E32                            
00098E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098E32                            
00098E32                            ; sub_72504:
00098E32                            DoFadeOut:
00098E32 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00098E36 6700                       		beq.s	@continuefade		; Branch if yes
00098E38 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00098E3C 4E75                       		rts	
00098E3E                            ; ===========================================================================
00098E3E                            ; loc_72510:
00098E3E                            @continuefade:
00098E3E 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00098E42 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00098E46 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00098E4C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098E50 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00098E52                            ; loc_72524:
00098E52                            @fmloop:
00098E52 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E54 6A00                       		bpl.s	@nextfm			; Branch if not
00098E56 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00098E5A 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00098E5C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098E60 6000                       		bra.s	@nextfm
00098E62                            ; ===========================================================================
00098E62                            ; loc_72534:
00098E62                            @sendfmtl:
00098E62 4EBA 0000                  		jsr	SendVoiceTL(pc)
00098E66                            ; loc_72538:
00098E66                            @nextfm:
00098E66 DAFC 0030                  		adda.w	#TrackSz,a5
00098E6A 51CF FFE6                  		dbf	d7,@fmloop
00098E6E                            
00098E6E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00098E70                            ; loc_72542:
00098E70                            @psgloop:
00098E70 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E72 6A00                       		bpl.s	@nextpsg		; branch if not
00098E74 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00098E78 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00098E7E 6500                       		blo.s	@sendpsgvol		; Branch if not
00098E80 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098E84 6000                       		bra.s	@nextpsg
00098E86                            ; ===========================================================================
00098E86                            ; loc_72558:
00098E86                            @sendpsgvol:
00098E86 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00098E8A 4EBA 0000                  		jsr	SetPSGVolume(pc)
00098E8E                            ; loc_72560:
00098E8E                            @nextpsg:
00098E8E DAFC 0030                  		adda.w	#TrackSz,a5
00098E92 51CF FFDC                  		dbf	d7,@psgloop
00098E96                            
00098E96 4E75                       		rts	
00098E98                            ; End of function DoFadeOut
00098E98                            
00098E98                            
00098E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098E98                            
00098E98                            ; sub_7256A:
00098E98                            FMSilenceAll:
00098E98 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00098E9A 7028                       		moveq	#$28,d0		; FM key on/off register
00098E9C                            ; loc_7256E:
00098E9C                            @noteoffloop:
00098E9C 1203                       		move.b	d3,d1
00098E9E 4EBA 0000                  		jsr	WriteFMI(pc)
00098EA2 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00098EA4 4EBA 0000                  		jsr	WriteFMI(pc)
00098EA8 51CB FFF2                  		dbf	d3,@noteoffloop
00098EAC                            
00098EAC 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00098EAE 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00098EB0 7802                       		moveq	#2,d4		; ... for all 3 channels...
00098EB2                            ; loc_72584:
00098EB2                            @channelloop:
00098EB2 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00098EB4                            ; loc_72586:
00098EB4                            @channeltlloop:
00098EB4 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00098EB8 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00098EBC 5840                       		addq.w	#4,d0		; Next TL operator
00098EBE 51CB FFF4                  		dbf	d3,@channeltlloop
00098EC2                            
00098EC2 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00098EC6 51CC FFEA                  		dbf	d4,@channelloop
00098ECA                            
00098ECA 4E75                       		rts	
00098ECC                            ; End of function FMSilenceAll
00098ECC                            
00098ECC                            ; ===========================================================================
00098ECC                            ; ---------------------------------------------------------------------------
00098ECC                            ; Stop music
00098ECC                            ; ---------------------------------------------------------------------------
00098ECC                            ; Sound_E4: StopSoundAndMusic:
00098ECC                            StopAllSound:
00098ECC 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00098ECE 123C 0080                  		move.b	#$80,d1		; Enable DAC
00098ED2 4EBA 0000                  		jsr	WriteFMI(pc)
00098ED6 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00098ED8 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00098EDA 4EBA 0000                  		jsr	WriteFMI(pc)
00098EDE 204E                       		movea.l	a6,a0
00098EE0                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00098EE0                            		; Remove the '-$10' to fix this.
00098EE0 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00098EE4                            ; loc_725B6:
00098EE4                            @clearramloop:
00098EE4 4298                       		clr.l	(a0)+
00098EE6 51C8 FFFC                  		dbf	d0,@clearramloop
00098EEA                            
00098EEA 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00098EF0 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00098EF4 6000 0000                  		bra.w	PSGSilenceAll
00098EF8                            
00098EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098EF8                            
00098EF8                            ; sub_725CA:
00098EF8                            InitMusicPlayback:
00098EF8 204E                       		movea.l	a6,a0
00098EFA                            		; Save several values
00098EFA 1216                       		move.b	v_sndprio(a6),d1
00098EFC 142E 0027                  		move.b	f_1up_playing(a6),d2
00098F00 162E 002A                  		move.b	f_speedup(a6),d3
00098F04 182E 0026                  		move.b	v_fadein_counter(a6),d4
00098F08                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00098F08 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00098F0C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00098F10                            ; loc_725E4:
00098F10                            @clearramloop:
00098F10 4298                       		clr.l	(a0)+
00098F12 51C8 FFFC                  		dbf	d0,@clearramloop
00098F16                            
00098F16                            		; Restore the values saved above
00098F16 1C81                       		move.b	d1,v_sndprio(a6)
00098F18 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00098F1C 1D43 002A                  		move.b	d3,f_speedup(a6)
00098F20 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00098F24 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00098F28 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00098F2E                            		; DANGER! This silences ALL channels, even the ones being used
00098F2E                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00098F2E                            		; doesn't affect SFX channels, either.
00098F2E                            		; This should be replaced with an 'rts'.
00098F2E 4EBA FF68                  		jsr	FMSilenceAll(pc)
00098F32 6000 0000                  		bra.w	PSGSilenceAll
00098F36                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00098F36                            		; don't do a very good job of setting up the music tracks.
00098F36                            		; Tracks that aren't defined in a music file's header don't have
00098F36                            		; their channels defined, meaning @sendfmnoteoff won't silence
00098F36                            		; hardware properly. In combination with removing the above
00098F36                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00098F36                            		; notes.
00098F36                            		; To fix this, I suggest using this code, instead of an 'rts':
00098F36                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00098F36                            		;lea	FMDACInitBytes(pc),a2
00098F36                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00098F36                            		;bsr.s	@writeloop
00098F36                            		;lea	PSGInitBytes(pc),a2
00098F36                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00098F36                            
00098F36                            ;@writeloop:
00098F36                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00098F36                            		;lea	TrackSz(a1),a1		; Next track
00098F36                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00098F36                            
00098F36                            		;rts
00098F36                            	
00098F36                            ; End of function InitMusicPlayback
00098F36                            
00098F36                            
00098F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098F36                            
00098F36                            ; sub_7260C:
00098F36                            TempoWait:
00098F36 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00098F3C 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00098F40 7030                       		moveq	#TrackSz,d0
00098F42 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00098F44                            ; loc_7261A:
00098F44                            @tempoloop:
00098F44 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00098F46 D0C0                       		adda.w	d0,a0	; Advance to next track
00098F48 51C9 FFFA                  		dbf	d1,@tempoloop
00098F4C                            
00098F4C 4E75                       		rts	
00098F4E                            ; End of function TempoWait
00098F4E                            
00098F4E                            ; ===========================================================================
00098F4E                            ; ---------------------------------------------------------------------------
00098F4E                            ; Speed	up music
00098F4E                            ; ---------------------------------------------------------------------------
00098F4E                            ; Sound_E2:
00098F4E                            SpeedUpMusic:
00098F4E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00098F52 6600                       		bne.s	@speedup_1up
00098F54 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00098F5A 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00098F60 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00098F66 4E75                       		rts	
00098F68                            ; ===========================================================================
00098F68                            ; loc_7263E:
00098F68                            @speedup_1up:
00098F68 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00098F6E 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00098F74 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00098F7A 4E75                       		rts	
00098F7C                            ; ===========================================================================
00098F7C                            ; ---------------------------------------------------------------------------
00098F7C                            ; Change music back to normal speed
00098F7C                            ; ---------------------------------------------------------------------------
00098F7C                            ; Sound_E3:
00098F7C                            SlowDownMusic:
00098F7C 4A2E 0027                  		tst.b	f_1up_playing(a6)
00098F80 6600                       		bne.s	@slowdown_1up
00098F82 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00098F88 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00098F8E 422E 002A                  		clr.b	f_speedup(a6)
00098F92 4E75                       		rts	
00098F94                            ; ===========================================================================
00098F94                            ; loc_7266A:
00098F94                            @slowdown_1up:
00098F94 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00098F9A 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00098FA0 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00098FA4 4E75                       		rts	
00098FA6                            
00098FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098FA6                            
00098FA6                            ; sub_7267C:
00098FA6                            DoFadeIn:
00098FA6 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00098FAA 6700                       		beq.s	@continuefade		; Branch if yes
00098FAC 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00098FB0 4E75                       		rts	
00098FB2                            ; ===========================================================================
00098FB2                            ; loc_72688:
00098FB2                            @continuefade:
00098FB2 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00098FB6 6700                       		beq.s	@fadedone		; Branch if yes
00098FB8 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00098FBC 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00098FC2 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098FC6 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00098FC8                            ; loc_7269E:
00098FC8                            @fmloop:
00098FC8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098FCA 6A00                       		bpl.s	@nextfm			; Branch if not
00098FCC 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00098FD0 4EBA 0000                  		jsr	SendVoiceTL(pc)
00098FD4                            ; loc_726AA:
00098FD4                            @nextfm:
00098FD4 DAFC 0030                  		adda.w	#TrackSz,a5
00098FD8 51CF FFEE                  		dbf	d7,@fmloop
00098FDC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00098FDE                            ; loc_726B4:
00098FDE                            @psgloop:
00098FDE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098FE0 6A00                       		bpl.s	@nextpsg		; Branch if not
00098FE2 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00098FE6 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00098FEA 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00098FEE 6500                       		blo.s	@sendpsgvol		; Branch if yes
00098FF0 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00098FF2                            ; loc_726C8:
00098FF2                            @sendpsgvol:
00098FF2 4EBA 0000                  		jsr	SetPSGVolume(pc)
00098FF6                            ; loc_726CC:
00098FF6                            @nextpsg:
00098FF6 DAFC 0030                  		adda.w	#TrackSz,a5
00098FFA 51CF FFE2                  		dbf	d7,@psgloop
00098FFE 4E75                       		rts	
00099000                            ; ===========================================================================
00099000                            ; loc_726D6:
00099000                            @fadedone:
00099000 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00099006 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0009900A 4E75                       		rts	
0009900C                            ; End of function DoFadeIn
0009900C                            
0009900C                            ; ===========================================================================
0009900C                            ; loc_726E2:
0009900C                            FMNoteOn:
0009900C 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00099010 6600                       		bne.s	@locret		; Return if so
00099012 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00099016 6600                       		bne.s	@locret		; Return if so
00099018 7028                       		moveq	#$28,d0		; Note on/off register
0009901A 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0009901E 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00099022 6000 0000                  		bra.w	WriteFMI
00099026                            ; ===========================================================================
00099026                            ; locret_726FC:
00099026                            @locret:
00099026 4E75                       		rts	
00099028                            
00099028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099028                            
00099028                            ; sub_726FE:
00099028                            FMNoteOff:
00099028 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
0009902C 6600                       		bne.s	locret_72714	; Return if yes
0009902E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00099032 6600                       		bne.s	locret_72714	; Return if yes
00099034                            ; loc_7270A:
00099034                            SendFMNoteOff:
00099034 7028                       		moveq	#$28,d0		; Note on/off register
00099036 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
0009903A 6000 0000                  		bra.w	WriteFMI
0009903E                            ; ===========================================================================
0009903E                            
0009903E                            locret_72714:
0009903E 4E75                       		rts	
00099040                            ; End of function FMNoteOff
00099040                            
00099040                            ; ===========================================================================
00099040                            ; loc_72716:
00099040                            WriteFMIorIIMain:
00099040 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00099044 6600                       		bne.s	@locret		; Return if yes
00099046 6000 0000                  		bra.w	WriteFMIorII
0009904A                            ; ===========================================================================
0009904A                            ; locret_72720:
0009904A                            @locret:
0009904A 4E75                       		rts	
0009904C                            
0009904C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009904C                            
0009904C                            ; sub_72722:
0009904C                            WriteFMIorII:
0009904C 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00099052 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00099054 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00099058                            ; End of function WriteFMIorII
00099058                            
00099058                            
00099058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099058                            
00099058                            ; The reason I think this is an *early* SMPS 68k Type 1b
00099058                            ; is because this subroutine is the one from Type 1a:
00099058                            ; other Type 1b drivers have a newer, optimised version.
00099058                            ; The driver itself is Type 1b, with this odd exception.
00099058                            
00099058                            ; sub_7272E:
00099058                            WriteFMI:
00099058 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009905E 0802 0007                  		btst	#7,d2		; Is FM busy?
00099062 66F4                       		bne.s	WriteFMI	; Loop if so
00099064 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
0009906A 4E71                       		nop	
0009906C 4E71                       		nop	
0009906E 4E71                       		nop	
00099070                            ; loc_72746:
00099070                            @waitloop:
00099070 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00099076 0802 0007                  		btst	#7,d2		; Is FM busy?
0009907A 66F4                       		bne.s	@waitloop	; Loop if so
0009907C                            
0009907C 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00099082 4E75                       		rts	
00099084                            ; End of function WriteFMI
00099084                            
00099084                            ; ===========================================================================
00099084                            ; loc_7275A:
00099084                            WriteFMIIPart:
00099084 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00099088 0882 0002                  		bclr	#2,d2			; Clear chip toggle
0009908C D002                       		add.b	d2,d0			; Add in to destination register
0009908E                            
0009908E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009908E                            
0009908E                            ; sub_72764:
0009908E                            WriteFMII:
0009908E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00099094 0802 0007                  		btst	#7,d2		; Is FM busy?
00099098 66F4                       		bne.s	WriteFMII	; Loop if so
0009909A 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000990A0 4E71                       		nop	
000990A2 4E71                       		nop	
000990A4 4E71                       		nop	
000990A6                            ; loc_7277C:
000990A6                            @waitloop:
000990A6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000990AC 0802 0007                  		btst	#7,d2		; Is FM busy?
000990B0 66F4                       		bne.s	@waitloop	; Loop if so
000990B2                            
000990B2 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000990B8 4E75                       		rts	
000990BA                            ; End of function WriteFMII
000990BA                            
000990BA                            ; ===========================================================================
000990BA                            ; ---------------------------------------------------------------------------
000990BA                            ; FM Note Values: b-0 to a#8
000990BA                            ; ---------------------------------------------------------------------------
000990BA                            ; word_72790: FM_Notes:
000990BA                            FMFrequencies:
000990BA 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000990D2 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
000990EA 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00099102 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
0009911A 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00099132 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
0009914A 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00099162 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
0009917A                            
0009917A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009917A                            
0009917A                            ; sub_72850:
0009917A                            PSGUpdateTrack:
0009917A 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
0009917E 6600                       		bne.s	@notegoing
00099180 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00099184 4EBA 0000                  		jsr	PSGDoNext(pc)
00099188 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
0009918C 6000 0000                  		bra.w	PSGDoVolFX
00099190                            ; ===========================================================================
00099190                            ; loc_72866:
00099190                            @notegoing:
00099190 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00099194 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00099198 4EBA F4EA                  		jsr	DoModulation(pc)
0009919C 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000991A0 4E75                       		rts
000991A2                            ; End of function PSGUpdateTrack
000991A2                            
000991A2                            
000991A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000991A2                            
000991A2                            ; sub_72878:
000991A2                            PSGDoNext:
000991A2 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000991A6 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000991AA                            ; loc_72880:
000991AA                            @noteloop:
000991AA 7A00                       		moveq	#0,d5
000991AC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000991AE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000991B2 6500                       		blo.s	@gotnote	; Branch if not
000991B4 4EBA 0000                  		jsr	CoordFlag(pc)
000991B8 60F0                       		bra.s	@noteloop
000991BA                            ; ===========================================================================
000991BA                            ; loc_72890:
000991BA                            @gotnote:
000991BA 4A05                       		tst.b	d5		; Is it a note?
000991BC 6A00                       		bpl.s	@gotduration	; Branch if not
000991BE 4EBA 0000                  		jsr	PSGSetFreq(pc)
000991C2 1A1C                       		move.b	(a4)+,d5	; Get another byte
000991C4 4A05                       		tst.b	d5		; Is it a duration?
000991C6 6A00                       		bpl.s	@gotduration	; Branch if yes
000991C8 534C                       		subq.w	#1,a4		; Put byte back
000991CA 6000 F452                  		bra.w	FinishTrackUpdate
000991CE                            ; ===========================================================================
000991CE                            ; loc_728A4:
000991CE                            @gotduration:
000991CE 4EBA F42E                  		jsr	SetDuration(pc)
000991D2 6000 F44A                  		bra.w	FinishTrackUpdate
000991D6                            ; End of function PSGDoNext
000991D6                            
000991D6                            
000991D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000991D6                            
000991D6                            ; sub_728AC:
000991D6                            PSGSetFreq:
000991D6 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
000991DA 6500                       		bcs.s	@restpsg	; If $80, put track at rest
000991DC DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
000991E0 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
000991E4 E34D                       		lsl.w	#1,d5
000991E6 41FA 0000                  		lea	PSGFrequencies(pc),a0
000991EA 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
000991F0 6000 F42C                  		bra.w	FinishTrackUpdate
000991F4                            ; ===========================================================================
000991F4                            ; loc_728CA:
000991F4                            @restpsg:
000991F4 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000991F8 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
000991FE 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00099202 6000 0000                  		bra.w	PSGNoteOff
00099206                            ; End of function PSGSetFreq
00099206                            
00099206                            
00099206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099206                            
00099206                            ; sub_728DC:
00099206                            PSGDoNoteOn:
00099206 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
0009920A 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
0009920C                            ; End of function PSGDoNoteOn
0009920C                            
0009920C                            
0009920C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009920C                            
0009920C                            ; sub_728E2:
0009920C                            PSGUpdateFreq:
0009920C 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00099210 4880                       		ext.w	d0
00099212 DC40                       		add.w	d0,d6		; Add to frequency
00099214 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00099218 6600                       		bne.s	@locret		; Return if yes
0009921A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0009921E 6600                       		bne.s	@locret		; Return if yes
00099220 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00099224 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00099228 6600                       		bne.s	@notnoise	; Branch if not
0009922A 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
0009922E                            ; loc_72904:
0009922E                            @notnoise:
0009922E 3206                       		move.w	d6,d1
00099230 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00099234 8001                       		or.b	d1,d0		; Latch tone data to channel
00099236 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00099238 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0009923C 13C0 00C0 0011             		move.b	d0,(psg_input).l
00099242 13C6 00C0 0011             		move.b	d6,(psg_input).l
00099248                            ; locret_7291E:
00099248                            @locret:
00099248 4E75                       		rts	
0009924A                            ; End of function PSGUpdateFreq
0009924A                            
0009924A                            ; ===========================================================================
0009924A                            ; loc_72920:
0009924A                            PSGSetRest:
0009924A 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
0009924E 4E75                       		rts	
00099250                            
00099250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099250                            
00099250                            ; sub_72926:
00099250                            PSGUpdateVolFX:
00099250 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00099254 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00099258                            ; loc_7292E:
00099258                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00099258 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
0009925C 7000                       		moveq	#0,d0
0009925E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00099262 6700                       		beq.s	SetPSGVolume
00099264 2079 0009 8216             		movea.l	(Go_PSGIndex).l,a0
0009926A 5340                       		subq.w	#1,d0
0009926C E548                       		lsl.w	#2,d0
0009926E 2070 0000                  		movea.l	(a0,d0.w),a0
00099272 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00099276 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
0009927A 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
0009927E 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00099282 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00099284 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00099288 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
0009928A                            ; loc_72960:
0009928A                            @gotflutter:
0009928A DC40                       		add.w	d0,d6		; Add volume envelope value to volume
0009928C 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00099290 6500                       		blo.s	SetPSGVolume	; Branch if not
00099292 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00099294                            ; End of function PSGUpdateVolFX
00099294                            
00099294                            
00099294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099294                            
00099294                            ; sub_7296A:
00099294                            SetPSGVolume:
00099294 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00099298 6600                       		bne.s	locret_7298A	; Return if so
0009929A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009929E 6600                       		bne.s	locret_7298A	; Return if so
000992A0 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000992A4 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000992A6                            ; loc_7297C:
000992A6                            PSGSendVolume:
000992A6 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000992AA 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000992AE 13C6 00C0 0011             		move.b	d6,(psg_input).l
000992B4                            
000992B4                            locret_7298A:
000992B4 4E75                       		rts	
000992B6                            ; ===========================================================================
000992B6                            ; loc_7298C: PSGCheckNoteFill:
000992B6                            PSGCheckNoteTimeout:
000992B6 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000992BA 67EA                       		beq.s	PSGSendVolume			; Branch if not
000992BC 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000992C0 66E4                       		bne.s	PSGSendVolume			; Branch if not
000992C2 4E75                       		rts	
000992C4                            ; End of function SetPSGVolume
000992C4                            
000992C4                            ; ===========================================================================
000992C4                            ; loc_7299A: FlutterDone:
000992C4                            VolEnvHold:
000992C4 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000992C8 4E75                       		rts	
000992CA                            
000992CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000992CA                            
000992CA                            ; sub_729A0:
000992CA                            PSGNoteOff:
000992CA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000992CE 6600                       		bne.s	locret_729B4	; Return if so
000992D0                            ; loc_729A6:
000992D0                            SendPSGNoteOff:
000992D0 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000992D4 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
000992D8 13C0 00C0 0011             		move.b	d0,(psg_input).l
000992DE                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
000992DE                            		; risk of music accidentally playing noise because it can't detect if
000992DE                            		; the PSG4/noise channel needs muting on track initialisation.
000992DE                            		; S&K's driver fixes it by doing this:
000992DE 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
000992E2 6600                       		bne.s	locret_729B4
000992E4 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
000992EC                            
000992EC                            locret_729B4:
000992EC 4E75                       		rts	
000992EE                            ; End of function PSGNoteOff
000992EE                            
000992EE                            
000992EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000992EE                            
000992EE                            ; sub_729B6:
000992EE                            PSGSilenceAll:
000992EE 41F9 00C0 0011             		lea	(psg_input).l,a0
000992F4 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
000992F8 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
000992FC 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00099300 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00099304 4E75                       		rts	
00099306                            ; End of function PSGSilenceAll
00099306                            
00099306                            ; ===========================================================================
00099306                            ; word_729CE:
00099306                            PSGFrequencies:
00099306 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00099316 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00099326 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00099336 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00099346 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00099356 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00099366 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00099376 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00099386 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00099392                            
00099392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099392                            
00099392                            ; sub_72A5A:
00099392                            CoordFlag:
00099392 0445 00E0                  		subi.w	#$E0,d5
00099396 E54D                       		lsl.w	#2,d5
00099398 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
0009939C                            ; End of function CoordFlag
0009939C                            
0009939C                            ; ===========================================================================
0009939C                            ; loc_72A64:
0009939C                            coordflagLookup:
0009939C 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000993A0                            ; ===========================================================================
000993A0 6000 0000                  		bra.w	cfDetune		; $E1
000993A4                            ; ===========================================================================
000993A4 6000 0000                  		bra.w	cfSetCommunication	; $E2
000993A8                            ; ===========================================================================
000993A8 6000 0000                  		bra.w	cfJumpReturn		; $E3
000993AC                            ; ===========================================================================
000993AC 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
000993B0                            ; ===========================================================================
000993B0 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
000993B4                            ; ===========================================================================
000993B4 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
000993B8                            ; ===========================================================================
000993B8 6000 0000                  		bra.w	cfHoldNote		; $E7
000993BC                            ; ===========================================================================
000993BC 6000 0000                  		bra.w	cfNoteTimeout		; $E8
000993C0                            ; ===========================================================================
000993C0 6000 0000                  		bra.w	cfChangeTransposition	; $E9
000993C4                            ; ===========================================================================
000993C4 6000 0000                  		bra.w	cfSetTempo		; $EA
000993C8                            ; ===========================================================================
000993C8 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
000993CC                            ; ===========================================================================
000993CC 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
000993D0                            ; ===========================================================================
000993D0 6000 0000                  		bra.w	cfClearPush		; $ED
000993D4                            ; ===========================================================================
000993D4 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
000993D8                            ; ===========================================================================
000993D8 6000 0000                  		bra.w	cfSetVoice		; $EF
000993DC                            ; ===========================================================================
000993DC 6000 0000                  		bra.w	cfModulation		; $F0
000993E0                            ; ===========================================================================
000993E0 6000 0000                  		bra.w	cfEnableModulation	; $F1
000993E4                            ; ===========================================================================
000993E4 6000 0000                  		bra.w	cfStopTrack		; $F2
000993E8                            ; ===========================================================================
000993E8 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
000993EC                            ; ===========================================================================
000993EC 6000 0000                  		bra.w	cfDisableModulation	; $F4
000993F0                            ; ===========================================================================
000993F0 6000 0000                  		bra.w	cfSetPSGTone		; $F5
000993F4                            ; ===========================================================================
000993F4 6000 0000                  		bra.w	cfJumpTo		; $F6
000993F8                            ; ===========================================================================
000993F8 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
000993FC                            ; ===========================================================================
000993FC 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00099400                            ; ===========================================================================
00099400 6000 0000                  		bra.w	cfOpF9			; $F9
00099404                            ; ===========================================================================
00099404                            ; loc_72ACC:
00099404                            cfPanningAMSFMS:
00099404 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00099406 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009940A 6B00                       		bmi.s	locret_72AEA		; Return if yes
0009940C 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00099410 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00099414 8200                       		or.b	d0,d1			; Mask in new value
00099416 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0009941A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009941E 6000 FC20                  		bra.w	WriteFMIorIIMain
00099422                            ; ===========================================================================
00099422                            
00099422                            locret_72AEA:
00099422 4E75                       		rts	
00099424                            ; ===========================================================================
00099424                            ; loc_72AEC: cfAlterNotes:
00099424                            cfDetune:
00099424 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00099428 4E75                       		rts	
0009942A                            ; ===========================================================================
0009942A                            ; loc_72AF2: cfUnknown1:
0009942A                            cfSetCommunication:
0009942A 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0009942E 4E75                       		rts	
00099430                            ; ===========================================================================
00099430                            ; loc_72AF8:
00099430                            cfJumpReturn:
00099430 7000                       		moveq	#0,d0
00099432 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00099436 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0009943A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00099442 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00099444 5800                       		addq.b	#4,d0			; Actually 'pop' value
00099446 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0009944A 4E75                       		rts	
0009944C                            ; ===========================================================================
0009944C                            ; loc_72B14:
0009944C                            cfFadeInToPrevious:
0009944C 204E                       		movea.l	a6,a0
0009944E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00099452 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00099456                            ; loc_72B1E:
00099456                            @restoreramloop:
00099456 20D9                       		move.l	(a1)+,(a0)+
00099458 51C8 FFFC                  		dbf	d0,@restoreramloop
0009945C                            
0009945C 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00099462 264D                       		movea.l	a5,a3
00099464 1C3C 0028                  		move.b	#$28,d6
00099468 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
0009946C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009946E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00099472                            ; loc_72B3A:
00099472                            @fmloop:
00099472 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00099476 6700                       		beq.s	@nextfm		; Branch if not
00099478 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009947C DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00099480 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00099484 6600                       		bne.s	@nextfm		; Branch if yes
00099486 7000                       		moveq	#0,d0
00099488 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
0009948C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00099490 4EBA 0000                  		jsr	SetVoice(pc)
00099494                            ; loc_72B5C:
00099494                            @nextfm:
00099494 DAFC 0030                  		adda.w	#TrackSz,a5
00099498 51CF FFD8                  		dbf	d7,@fmloop
0009949C                            
0009949C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
0009949E                            ; loc_72B66:
0009949E                            @psgloop:
0009949E 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000994A2 6700                       		beq.s	@nextpsg	; Branch if not
000994A4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000994A8 4EBA FE20                  		jsr	PSGNoteOff(pc)
000994AC DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000994B0                            ; loc_72B78:
000994B0                            @nextpsg:
000994B0 DAFC 0030                  		adda.w	#TrackSz,a5
000994B4 51CF FFE8                  		dbf	d7,@psgloop
000994B8                            		
000994B8 2A4B                       		movea.l	a3,a5
000994BA 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000994C0 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000994C6 422E 0027                  		clr.b	f_1up_playing(a6)
000994CA 33FC 0000 00A1 1100        		startZ80
000994D2 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000994D4 4E75                       		rts	
000994D6                            ; ===========================================================================
000994D6                            ; loc_72B9E:
000994D6                            cfSetTempoDivider:
000994D6 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
000994DA 4E75                       		rts	
000994DC                            ; ===========================================================================
000994DC                            ; loc_72BA4: cfSetVolume:
000994DC                            cfChangeFMVolume:
000994DC 101C                       		move.b	(a4)+,d0		; Get parameter
000994DE D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
000994E2 6000 0000                  		bra.w	SendVoiceTL
000994E6                            ; ===========================================================================
000994E6                            ; loc_72BAE: cfPreventAttack:
000994E6                            cfHoldNote:
000994E6 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
000994EA 4E75                       		rts	
000994EC                            ; ===========================================================================
000994EC                            ; loc_72BB4: cfNoteFill
000994EC                            cfNoteTimeout:
000994EC 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
000994F0 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
000994F4 4E75                       		rts	
000994F6                            ; ===========================================================================
000994F6                            ; loc_72BBE: cfAddKey:
000994F6                            cfChangeTransposition:
000994F6 101C                       		move.b	(a4)+,d0		; Get parameter
000994F8 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
000994FC 4E75                       		rts	
000994FE                            ; ===========================================================================
000994FE                            ; loc_72BC6:
000994FE                            cfSetTempo:
000994FE 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00099502 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00099506 4E75                       		rts	
00099508                            ; ===========================================================================
00099508                            ; loc_72BD0: cfSetTempoMod:
00099508                            cfSetTempoDividerAll:
00099508 41EE 0040                  		lea	v_music_track_ram(a6),a0
0009950C 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0009950E 7230                       		moveq	#TrackSz,d1
00099510 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00099512                            ; loc_72BDA:
00099512                            @trackloop:
00099512 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00099516 D0C1                       		adda.w	d1,a0
00099518 51CA FFF8                  		dbf	d2,@trackloop
0009951C                            
0009951C 4E75                       		rts	
0009951E                            ; ===========================================================================
0009951E                            ; loc_72BE6: cfChangeVolume:
0009951E                            cfChangePSGVolume:
0009951E 101C                       		move.b	(a4)+,d0		; Get volume change
00099520 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00099524 4E75                       		rts	
00099526                            ; ===========================================================================
00099526                            ; loc_72BEE:
00099526                            cfClearPush:
00099526 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
0009952A 4E75                       		rts	
0009952C                            ; ===========================================================================
0009952C                            ; loc_72BF4:
0009952C                            cfStopSpecialFM4:
0009952C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00099530 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00099534 4EBA FAF2                  		jsr	FMNoteOff(pc)
00099538 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0009953C 6B00                       		bmi.s	@locexit					; Branch if yes
0009953E 264D                       		movea.l	a5,a3
00099540 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00099544 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00099548 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009954C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00099550 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00099554 4EBA 0000                  		jsr	SetVoice(pc)
00099558 2A4B                       		movea.l	a3,a5
0009955A                            ; loc_72C22:
0009955A                            @locexit:
0009955A 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
0009955C 4E75                       		rts	
0009955E                            ; ===========================================================================
0009955E                            ; loc_72C26:
0009955E                            cfSetVoice:
0009955E 7000                       		moveq	#0,d0
00099560 101C                       		move.b	(a4)+,d0		; Get new voice
00099562 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00099566 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
0009956A 6600 0000                  		bne.w	locret_72CAA		; Return if yes
0009956E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00099572 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00099576 6700                       		beq.s	SetVoice		; If yes, branch
00099578 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
0009957C 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00099580 6B00                       		bmi.s	SetVoice		; If yes, branch
00099582 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00099586                            
00099586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099586                            
00099586                            ; sub_72C4E:
00099586                            SetVoice:
00099586 5340                       		subq.w	#1,d0
00099588 6B00                       		bmi.s	@havevoiceptr
0009958A 323C 0019                  		move.w	#25,d1
0009958E                            ; loc_72C56:
0009958E                            @voicemultiply:
0009958E D2C1                       		adda.w	d1,a1
00099590 51C8 FFFC                  		dbf	d0,@voicemultiply
00099594                            ; loc_72C5C:
00099594                            @havevoiceptr:
00099594 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00099596 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
0009959A 1801                       		move.b	d1,d4
0009959C 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
000995A0 4EBA FAAA                  		jsr	WriteFMIorII(pc)
000995A4 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000995A8 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000995AA                            ; loc_72C72:
000995AA                            @sendvoiceloop:
000995AA 101A                       		move.b	(a2)+,d0
000995AC 1219                       		move.b	(a1)+,d1
000995AE 4EBA FA9C                  		jsr	WriteFMIorII(pc)
000995B2 51CB FFF6                  		dbf	d3,@sendvoiceloop
000995B6                            
000995B6 7A03                       		moveq	#3,d5
000995B8 0244 0007                  		andi.w	#7,d4			; Get algorithm
000995BC 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
000995C0 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
000995C4                            ; loc_72C8C:
000995C4                            @sendtlloop:
000995C4 101A                       		move.b	(a2)+,d0
000995C6 1219                       		move.b	(a1)+,d1
000995C8 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000995CA 6400                       		bcc.s	@sendtl		; Branch if not
000995CC D203                       		add.b	d3,d1		; Include additional attenuation
000995CE                            ; loc_72C96:
000995CE                            @sendtl:
000995CE 4EBA FA7C                  		jsr	WriteFMIorII(pc)
000995D2 51CD FFF0                  		dbf	d5,@sendtlloop
000995D6                            		
000995D6 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
000995DA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
000995DE 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
000995E2                            
000995E2                            locret_72CAA:
000995E2 4E75                       		rts	
000995E4                            ; End of function SetVoice
000995E4                            
000995E4                            ; ===========================================================================
000995E4                            ; byte_72CAC:
000995E4 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000995EC                            
000995EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000995EC                            
000995EC                            ; sub_72CB4:
000995EC                            SendVoiceTL:
000995EC 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000995F0 6600                       		bne.s	@locret		; Return if so
000995F2 7000                       		moveq	#0,d0
000995F4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000995F8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000995FC 4A2E 000E                  		tst.b	f_voice_selector(a6)
00099600 6700                       		beq.s	@gotvoiceptr
00099602                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00099602                            		; of a6!
00099602 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00099606 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009960A 6B00                       		bmi.s	@gotvoiceptr
0009960C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00099610                            ; loc_72CD8:
00099610                            @gotvoiceptr:
00099610 5340                       		subq.w	#1,d0
00099612 6B00                       		bmi.s	@gotvoice
00099614 323C 0019                  		move.w	#25,d1
00099618                            ; loc_72CE0:
00099618                            @voicemultiply:
00099618 D2C1                       		adda.w	d1,a1
0009961A 51C8 FFFC                  		dbf	d0,@voicemultiply
0009961E                            ; loc_72CE6:
0009961E                            @gotvoice:
0009961E D2FC 0015                  		adda.w	#21,a1				; Want TL
00099622 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00099626 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
0009962A 0240 0007                  		andi.w	#7,d0				; Want only algorithm
0009962E 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00099632 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00099636 6B00                       		bmi.s	@locret				; If negative, stop
00099638 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
0009963A                            ; loc_72D02:
0009963A                            @sendtlloop:
0009963A 101A                       		move.b	(a2)+,d0
0009963C 1219                       		move.b	(a1)+,d1
0009963E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00099640 6400                       		bcc.s	@senttl		; Branch if not
00099642 D203                       		add.b	d3,d1		; Include additional attenuation
00099644 6500                       		bcs.s	@senttl		; Branch on overflow
00099646 4EBA FA04                  		jsr	WriteFMIorII(pc)
0009964A                            ; loc_72D12:
0009964A                            @senttl:
0009964A 51CD FFEE                  		dbf	d5,@sendtlloop
0009964E                            ; locret_72D16:
0009964E                            @locret:
0009964E 4E75                       		rts	
00099650                            ; End of function SendVoiceTL
00099650                            
00099650                            ; ===========================================================================
00099650                            ; byte_72D18:
00099650                            FMInstrumentOperatorTable:
00099650 30                         		dc.b  $30		; Detune/multiple operator 1
00099651 38                         		dc.b  $38		; Detune/multiple operator 3
00099652 34                         		dc.b  $34		; Detune/multiple operator 2
00099653 3C                         		dc.b  $3C		; Detune/multiple operator 4
00099654 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00099655 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00099656 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00099657 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00099658 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00099659 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
0009965A 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
0009965B 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
0009965C 70                         		dc.b  $70		; Secondary decay rate operator 1
0009965D 78                         		dc.b  $78		; Secondary decay rate operator 3
0009965E 74                         		dc.b  $74		; Secondary decay rate operator 2
0009965F 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00099660 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00099661 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00099662 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00099663 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00099664                            FMInstrumentOperatorTable_End
00099664                            ; byte_72D2C:
00099664                            FMInstrumentTLTable:
00099664 40                         		dc.b  $40		; Total level operator 1
00099665 48                         		dc.b  $48		; Total level operator 3
00099666 44                         		dc.b  $44		; Total level operator 2
00099667 4C                         		dc.b  $4C		; Total level operator 4
00099668                            FMInstrumentTLTable_End
00099668                            ; ===========================================================================
00099668                            ; loc_72D30:
00099668                            cfModulation:
00099668 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
0009966C 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00099670 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00099674 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00099678 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
0009967C 101C                       		move.b	(a4)+,d0			; Modulation steps...
0009967E E208                       		lsr.b	#1,d0				; ... divided by 2...
00099680 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00099684 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00099688 4E75                       		rts	
0009968A                            ; ===========================================================================
0009968A                            ; loc_72D52:
0009968A                            cfEnableModulation:
0009968A 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
0009968E 4E75                       		rts	
00099690                            ; ===========================================================================
00099690                            ; loc_72D58:
00099690                            cfStopTrack:
00099690 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00099694 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00099698 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009969C 6B00                       		bmi.s	@stoppsg		; Branch if yes
0009969E 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
000996A2 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000996A6 4EBA F980                  		jsr	FMNoteOff(pc)
000996AA 6000                       		bra.s	@stoppedchannel
000996AC                            ; ===========================================================================
000996AC                            ; loc_72D74:
000996AC                            @stoppsg:
000996AC 4EBA FC1C                  		jsr	PSGNoteOff(pc)
000996B0                            ; loc_72D78:
000996B0                            @stoppedchannel:
000996B0 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
000996B4 6A00 0000                  		bpl.w	@locexit		; Exit if not
000996B8 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000996BA 7000                       		moveq	#0,d0
000996BC 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
000996C0 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
000996C2 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
000996C6 264D                       		movea.l	a5,a3
000996C8 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
000996CC 6600                       		bne.s	@getpointer		; Branch if not
000996CE 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000996D2 6A00                       		bpl.s	@getpointer		; Branch if not
000996D4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000996D8 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
000996DC 6000                       		bra.s	@gotpointer
000996DE                            ; ===========================================================================
000996DE                            ; loc_72DA8:
000996DE                            @getpointer:
000996DE 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
000996E0 E508                       		lsl.b	#2,d0
000996E2 2A70 0000                  		movea.l	(a0,d0.w),a5
000996E6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000996E8 6A00                       		bpl.s	@novoiceupd		; Branch if not
000996EA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
000996EE                            ; loc_72DB8:
000996EE                            @gotpointer:
000996EE 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
000996F2 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000996F6 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000996FA 4EBA FE8A                  		jsr	SetVoice(pc)
000996FE                            ; loc_72DC8:
000996FE                            @novoiceupd:
000996FE 2A4B                       		movea.l	a3,a5
00099700 6000                       		bra.s	@locexit
00099702                            ; ===========================================================================
00099702                            ; loc_72DCC:
00099702                            @getpsgptr:
00099702 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00099706 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00099708 6A00                       		bpl.s	@getchannelptr	; Branch if not
0009970A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0009970E 6700                       		beq.s	@gotchannelptr	; Branch if yes
00099710 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00099714 6700                       		beq.s	@gotchannelptr	; Branch if yes
00099716                            ; loc_72DE0:
00099716                            @getchannelptr:
00099716 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
0009971A E608                       		lsr.b	#3,d0
0009971C 2070 0000                  		movea.l	(a0,d0.w),a0
00099720                            ; loc_72DEA:
00099720                            @gotchannelptr:
00099720 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00099724 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00099728 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
0009972E 6600                       		bne.s	@locexit			; Branch if not
00099730 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00099738                            ; loc_72E02:
00099738                            @locexit:
00099738 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
0009973A 4E75                       		rts	
0009973C                            ; ===========================================================================
0009973C                            ; loc_72E06:
0009973C                            cfSetPSGNoise:
0009973C 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00099742 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00099746 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
0009974A 6600                       		bne.s	@locret				; Return if yes
0009974C 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00099754                            ; locret_72E1E:
00099754                            @locret:
00099754 4E75                       		rts	
00099756                            ; ===========================================================================
00099756                            ; loc_72E20:
00099756                            cfDisableModulation:
00099756 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
0009975A 4E75                       		rts	
0009975C                            ; ===========================================================================
0009975C                            ; loc_72E26:
0009975C                            cfSetPSGTone:
0009975C 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00099760 4E75                       		rts	
00099762                            ; ===========================================================================
00099762                            ; loc_72E2C:
00099762                            cfJumpTo:
00099762 101C                       		move.b	(a4)+,d0	; High byte of offset
00099764 E148                       		lsl.w	#8,d0		; Shift it into place
00099766 101C                       		move.b	(a4)+,d0	; Low byte of offset
00099768 D8C0                       		adda.w	d0,a4		; Add to current position
0009976A 534C                       		subq.w	#1,a4		; Put back one byte
0009976C 4E75                       		rts	
0009976E                            ; ===========================================================================
0009976E                            ; loc_72E38:
0009976E                            cfRepeatAtPos:
0009976E 7000                       		moveq	#0,d0
00099770 101C                       		move.b	(a4)+,d0			; Loop index
00099772 121C                       		move.b	(a4)+,d1			; Repeat count
00099774 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00099778 6600                       		bne.s	@loopexists			; Branch if yes
0009977A 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
0009977E                            ; loc_72E48:
0009977E                            @loopexists:
0009977E 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00099782 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00099784 544C                       		addq.w	#2,a4				; Skip target address
00099786 4E75                       		rts	
00099788                            ; ===========================================================================
00099788                            ; loc_72E52:
00099788                            cfJumpToGosub:
00099788 7000                       		moveq	#0,d0
0009978A 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
0009978E 5900                       		subq.b	#4,d0				; Add space for another target
00099790 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00099794 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00099798 60C8                       		bra.s	cfJumpTo
0009979A                            ; ===========================================================================
0009979A                            ; loc_72E64:
0009979A                            cfOpF9:
0009979A 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
0009979E 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000997A2 4EBA F8B4                  		jsr	WriteFMI(pc)
000997A6 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000997AA 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000997AE 6000 F8A8                  		bra.w	WriteFMI
000997B2                            ; ===========================================================================
000997B2                            
000997B2                            Kos_Z80:
000997B2                            		incbin	"sound\z80.bin", 0, $15
000997C7 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
000997C8                            		incbin	"sound\z80.bin", $16, 6
000997CE 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
000997CF                            		incbin	"sound\z80.bin", $1D, $93
00099862 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00099864                            		incbin	"sound\z80.bin", $B2, 1
00099865 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00099867                            		incbin	"sound\z80.bin", $B5, $16AB
0009AF08                            		even
0009AF08                            
0009AF08                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009C22C 00                         		even
0009C22C                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009DAB4                            		even
0009DAB4                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A5434 00                         		even
000A5434                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A6C48 00                         		even
000A6C48                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A79EE                            		even
000A79EE                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A8DA6                            		even
000A8DA6                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A969E 00                         		even
000A969E                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A969E                            extralifejingle_Header:
000A969E                            	smpsHeaderStartSong 1
000A96A0 0703                       	smpsHeaderChan      $07, $03
000A96A2 0100                       	smpsHeaderTempo     $01, $00
000A96A4                            
000A96A8 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A96AC 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A96B0 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A96B4 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A96B8 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A96BC 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A96D2                            
000A96D2                            ; DAC Data
000A96D2                            extralifejingle_DAC:
000A96D2 807F 55                    	dc.b	nRst, $7F, $55
000A96D5 E4                         	smpsFade
000A96D6                            ; PSG1 Data
000A96D6                            extralifejingle_PSG1:
000A96D6                            ; PSG2 Data
000A96D6                            extralifejingle_PSG2:
000A96D6                            ; PSG3 Data
000A96D6                            extralifejingle_PSG3:
000A96D6 F2                         	smpsStop
000A96D7                            
000A96D7                            ; FM1 Data
000A96D7                            extralifejingle_FM1:
000A96D7 EF00                       	smpsSetvoice        $00
000A96D9 E616                       	smpsAlterVol        $16
000A96DB E0C0                       	smpsPan             panCenter, $00
000A96DD A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A96E9 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A96ED F2                         	smpsStop
000A96EE                            
000A96EE                            ; FM2 Data
000A96EE                            extralifejingle_FM2:
000A96EE EF01                       	smpsSetvoice        $01
000A96F0 E616                       	smpsAlterVol        $16
000A96F2 E0C0                       	smpsPan             panCenter, $00
000A96F4 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A9700 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A9704 F2                         	smpsStop
000A9705                            
000A9705                            ; FM3 Data
000A9705                            extralifejingle_FM3:
000A9705 EF01                       	smpsSetvoice        $01
000A9707 E616                       	smpsAlterVol        $16
000A9709 E0C0                       	smpsPan             panCenter, $00
000A970B AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A9717 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A971B F2                         	smpsStop
000A971C                            
000A971C                            ; FM4 Data
000A971C                            extralifejingle_FM4:
000A971C EF02                       	smpsSetvoice        $02
000A971E E0C0                       	smpsPan             panCenter, $00
000A9720 8001                       	dc.b	nRst, $01
000A9722 E616                       	smpsAlterVol        $16
000A9724 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A9730 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A9734 F2                         	smpsStop
000A9735                            
000A9735                            ; FM5 Data
000A9735                            extralifejingle_FM5:
000A9735 EF03                       	smpsSetvoice        $03
000A9737 E602                       	smpsAlterVol        $02
000A9739 E0C0                       	smpsPan             panCenter, $00
000A973B 8001                       	dc.b	nRst, $01
000A973D EF05                       	smpsSetvoice        $05
000A973F E60A                       	smpsAlterVol        $0A
000A9741 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A974D B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A9759 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A9765 C1C4 80                    	dc.b	nE5, nG5, nRst
000A9768 F2                         	smpsStop
000A9769                            
000A9769                            ; FM6 Data
000A9769                            extralifejingle_FM6:
000A9769 EF04                       	smpsSetvoice        $04
000A976B E607                       	smpsAlterVol        $07
000A976D E0C0                       	smpsPan             panCenter, $00
000A976F 8001                       	dc.b	nRst, $01
000A9771 EF06                       	smpsSetvoice        $06
000A9773 E6F9                       	smpsAlterVol        $F9
000A9775 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A977C F2                         	smpsStop
000A977D                            
000A977D                            extralifejingle_Voices:
000A977D                            ;	Voice $00
000A977D                            ;	$3A
000A977D                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A977D                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A977D                            	smpsVcAlgorithm     $02
000A977D                            	smpsVcFeedback      $07
000A977D                            	smpsVcUnusedBits    $00
000A977D                            	smpsVcDetune        $03, $07, $07, $03
000A977D                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A977D                            	smpsVcRateScale     $00, $00, $00, $00
000A977D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A977D                            	smpsVcAmpMod        $00, $00, $00, $00
000A977D                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A977D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A977D                            	smpsVcDecayLevel    $00, $00, $00, $00
000A977D                            	smpsVcReleaseRate   $05, $03, $03, $03
000A9796                            
000A9796                            ;	Voice $01
000A9796                            ;	$3A
000A9796                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A9796                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A9796                            	smpsVcAlgorithm     $02
000A9796                            	smpsVcFeedback      $07
000A9796                            	smpsVcUnusedBits    $00
000A9796                            	smpsVcDetune        $03, $07, $07, $03
000A9796                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A9796                            	smpsVcRateScale     $00, $00, $00, $00
000A9796                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9796                            	smpsVcAmpMod        $00, $00, $00, $00
000A9796                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A9796                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9796                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9796                            	smpsVcReleaseRate   $05, $03, $03, $03
000A97AF                            
000A97AF                            ;	Voice $02
000A97AF                            ;	$3A
000A97AF                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A97AF                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A97AF                            	smpsVcAlgorithm     $02
000A97AF                            	smpsVcFeedback      $07
000A97AF                            	smpsVcUnusedBits    $00
000A97AF                            	smpsVcDetune        $03, $07, $07, $03
000A97AF                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A97AF                            	smpsVcRateScale     $00, $00, $00, $00
000A97AF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A97AF                            	smpsVcAmpMod        $00, $00, $00, $00
000A97AF                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A97AF                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97AF                            	smpsVcDecayLevel    $00, $00, $00, $00
000A97AF                            	smpsVcReleaseRate   $05, $03, $03, $03
000A97C8                            
000A97C8                            ;	Voice $03
000A97C8                            ;	$00
000A97C8                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A97C8                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A97C8                            	smpsVcAlgorithm     $00
000A97C8                            	smpsVcFeedback      $00
000A97C8                            	smpsVcUnusedBits    $00
000A97C8                            	smpsVcDetune        $00, $00, $00, $00
000A97C8                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A97C8                            	smpsVcRateScale     $00, $00, $00, $00
000A97C8                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A97C8                            	smpsVcAmpMod        $00, $00, $00, $00
000A97C8                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A97C8                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97C8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A97C8                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A97E1                            
000A97E1                            ;	Voice $04
000A97E1                            ;	$03
000A97E1                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A97E1                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A97E1                            	smpsVcAlgorithm     $03
000A97E1                            	smpsVcFeedback      $00
000A97E1                            	smpsVcUnusedBits    $00
000A97E1                            	smpsVcDetune        $03, $04, $04, $06
000A97E1                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A97E1                            	smpsVcRateScale     $00, $00, $00, $00
000A97E1                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A97E1                            	smpsVcAmpMod        $00, $00, $00, $00
000A97E1                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A97E1                            	smpsVcDecayRate2    $06, $04, $00, $01
000A97E1                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A97E1                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A97FA                            
000A97FA                            ;	Voice $05
000A97FA                            ;	$34
000A97FA                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A97FA                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A97FA                            	smpsVcAlgorithm     $04
000A97FA                            	smpsVcFeedback      $06
000A97FA                            	smpsVcUnusedBits    $00
000A97FA                            	smpsVcDetune        $07, $00, $07, $03
000A97FA                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A97FA                            	smpsVcRateScale     $00, $01, $00, $02
000A97FA                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A97FA                            	smpsVcAmpMod        $00, $00, $00, $00
000A97FA                            	smpsVcDecayRate1    $08, $07, $07, $14
000A97FA                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97FA                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A97FA                            	smpsVcReleaseRate   $07, $07, $04, $06
000A9813                            
000A9813                            ;	Voice $06
000A9813                            ;	$30
000A9813                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A9813                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A9813                            	smpsVcAlgorithm     $00
000A9813                            	smpsVcFeedback      $06
000A9813                            	smpsVcUnusedBits    $00
000A9813                            	smpsVcDetune        $00, $00, $00, $00
000A9813                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A9813                            	smpsVcRateScale     $01, $00, $00, $02
000A9813                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A9813                            	smpsVcAmpMod        $00, $00, $00, $00
000A9813                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A9813                            	smpsVcDecayRate2    $08, $05, $18, $08
000A9813                            	smpsVcDecayLevel    $01, $00, $00, $06
000A9813                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A982C                            
000A982C                            
000A982C                            		even
000A982C                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000AA084 00                         		even
000AA084                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000AA5A4                            		even
000AA5A4                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000AA866 00                         		even
000AA866                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000AB6BE                            		even
000AB6BE                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000AB90A 00                         		even
000AB90A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000ABC40 00                         		even
000ABC40                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000ABDEC 00                         		even
000ABDEC                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000ABFFA 00                         		even
000ABFFA                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AC2DE 00                         		even
000AC2DE                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000ACA0E 00                         		even
000ACA0E                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000ACADC                            		even
000ACADC                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000ACF4A 00                         		even
000ACF4A                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000ADA40                            		even
000ADA40                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AE596                            		even
000AE596                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000AF89C 00                         		even
000AF89C                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000AF89C                            PasswordEntry_Header:
000AF89C                            	smpsHeaderStartSong 3
000AF89E 0603                       	smpsHeaderChan      $06, $03
000AF8A0 0105                       	smpsHeaderTempo     $01, $05
000AF8A2                            
000AF8A6 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000AF8AA 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000AF8AE 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000AF8B2 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000AF8B6 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000AF8CC                            
000AF8CC                            ; FM1 Data
000AF8CC                            PasswordEntry_FM1:
000AF8CC EF00                       	smpsSetvoice        $00
000AF8D3                            
000AF8D3                            PasswordEntry_Jump00:
000AF8D3 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000AF8DF C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000AF8EB C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000AF8F7 C918 CB                    	dc.b	nC6, $18, nD6
000AF8FA F6FF D7                    	smpsJump            PasswordEntry_Jump00
000AF8FD                            
000AF8FD                            ; FM2 Data
000AF8FD                            PasswordEntry_FM2:
000AF8FD EF01                       	smpsSetvoice        $01
000AF8FF                            
000AF8FF                            PasswordEntry_Jump03:
000AF8FF B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000AF90B AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000AF917 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000AF923 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000AF92D F6FF D0                    	smpsJump            PasswordEntry_Jump03
000AF930                            
000AF930                            ; FM3 Data
000AF930                            PasswordEntry_FM3:
000AF930 E080                       	smpsPan             panLeft, $00
000AF932 EF02                       	smpsSetvoice        $02
000AF934                            
000AF934                            PasswordEntry_Jump02:
000AF934 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000AF940 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000AF94C C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000AF958 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000AF964 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000AF970 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000AF97C BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000AF988 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000AF994 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000AF9A0 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AF9AC BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AF9B4 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000AF9B7                            
000AF9B7                            ; FM4 Data
000AF9B7                            PasswordEntry_FM4:
000AF9B7 E040                       	smpsPan             panRight, $00
000AF9B9 EF02                       	smpsSetvoice        $02
000AF9BB                            
000AF9BB                            PasswordEntry_Jump01:
000AF9BB C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000AF9C7 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000AF9D3 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000AF9DF C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000AF9EB BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000AF9F7 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000AFA03 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AFA0F BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000AFA1B BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000AFA27 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AFA33 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AFA3B F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000AFA3E                            
000AFA3E                            ; FM5 Data
000AFA3E                            PasswordEntry_FM5:
000AFA3E EF00                       	smpsSetvoice        $00
000AFA40 E1FB                       	smpsAlterNote       $FB
000AFA42 800C                       	dc.b	nRst, $0C
000AFA44 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000AFA47                            
000AFA47                            ; PSG1 Data
000AFA47                            PasswordEntry_PSG1:
000AFA47 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AFA53 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000AFA5F C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AFA6B CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000AFA77 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000AFA83 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000AFA8F C810 C408                  	dc.b	nB5, $10, nG5, $08
000AFA93 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000AFA96                            
000AFA96                            ; PSG2 Data
000AFA96                            PasswordEntry_PSG2:
000AFA96 E1FF                       	smpsAlterNote       $FF
000AFA98 800C                       	dc.b	nRst, $0C
000AFA9A F6FF AB                    	smpsJump            PasswordEntry_PSG1
000AFA9D                            
000AFA9D                            ; PSG3 Data
000AFA9D                            PasswordEntry_PSG3:
000AFA9D F502                       	smpsPSGvoice        fTone_02
000AFA9F F3E7                       	smpsPSGform         $E7
000AFAA1 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AFAAD C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AFAB9 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000AFAC0 F503                       	smpsPSGvoice        fTone_03
000AFAC2 C5                         	dc.b	nAb5
000AFAC3 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000AFAC6                            
000AFAC6                            ; DAC Data
000AFAC6                            PasswordEntry_DAC:
000AFAC6 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAD2 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AFADA F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000AFADF 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAEB 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000AFAF3                            
000AFAF3                            PasswordEntry_Loop00:
000AFAF3 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAFF 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AFB07 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000AFB0C 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000AFB18 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000AFB22 F6FF A2                    	smpsJump            PasswordEntry_DAC
000AFB25                            
000AFB25                            PasswordEntry_Voices:
000AFB25                            ;	Voice $00
000AFB25                            ;	$04
000AFB25                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000AFB25                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000AFB25                            	smpsVcAlgorithm     $04
000AFB25                            	smpsVcFeedback      $00
000AFB25                            	smpsVcUnusedBits    $00
000AFB25                            	smpsVcDetune        $00, $00, $00, $00
000AFB25                            	smpsVcCoarseFreq    $00, $01, $01, $02
000AFB25                            	smpsVcRateScale     $00, $00, $00, $00
000AFB25                            	smpsVcAttackRate    $12, $1F, $10, $1F
000AFB25                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB25                            	smpsVcDecayRate1    $04, $0B, $03, $09
000AFB25                            	smpsVcDecayRate2    $05, $00, $00, $03
000AFB25                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000AFB25                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AFB3E                            
000AFB3E                            ;	Voice $01
000AFB3E                            ;	$39
000AFB3E                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000AFB3E                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000AFB3E                            	smpsVcAlgorithm     $01
000AFB3E                            	smpsVcFeedback      $07
000AFB3E                            	smpsVcUnusedBits    $00
000AFB3E                            	smpsVcDetune        $00, $04, $06, $00
000AFB3E                            	smpsVcCoarseFreq    $00, $00, $01, $03
000AFB3E                            	smpsVcRateScale     $01, $01, $01, $00
000AFB3E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AFB3E                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB3E                            	smpsVcDecayRate1    $09, $09, $11, $10
000AFB3E                            	smpsVcDecayRate2    $00, $00, $00, $06
000AFB3E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000AFB3E                            	smpsVcReleaseRate   $08, $08, $08, $08
000AFB57                            
000AFB57                            ;	Voice $02
000AFB57                            ;	$2C
000AFB57                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000AFB57                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000AFB57                            	smpsVcAlgorithm     $04
000AFB57                            	smpsVcFeedback      $05
000AFB57                            	smpsVcUnusedBits    $00
000AFB57                            	smpsVcDetune        $00, $02, $00, $04
000AFB57                            	smpsVcCoarseFreq    $00, $03, $00, $01
000AFB57                            	smpsVcRateScale     $00, $00, $00, $00
000AFB57                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AFB57                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB57                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000AFB57                            	smpsVcDecayRate2    $05, $00, $05, $04
000AFB57                            	smpsVcDecayLevel    $08, $08, $05, $04
000AFB57                            	smpsVcReleaseRate   $06, $05, $06, $05
000AFB70                            
000AFB70                            
000AFB70                            		even	
000AFB70                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000AFB70                            ToxicLandfill_Header:
000AFB70                            	smpsHeaderStartSong 1
000AFB72 0603                       	smpsHeaderChan      $06, $03
000AFB74 0208                       	smpsHeaderTempo     $02, $08
000AFB76                            
000AFB7A 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000AFB7E 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000AFB82 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000AFB86 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000AFB8A 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000AFBA0                            
000AFBA0                            ; DAC Data
000AFBA0                            ToxicLandfill_DAC:
000AFBA0 E0C0                       	smpsPan             panCenter, $00
000AFBA2 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000AFBAE 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000AFBB9                            
000AFBB9                            ToxicLandfill_Loop00:
000AFBB9 82                         	dc.b	dSnare
000AFBBA                            
000AFBBA                            ToxicLandfill_Loop01:
000AFBBA 82                         	dc.b	dSnare
000AFBBB                            
000AFBBB                            ToxicLandfill_Jump00:
000AFBBB 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AFBC7 0381 0603                  	dc.b	$03, dKick, $06, $03
000AFBCB F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000AFBD0 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000AFBDC 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000AFBE4 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000AFBE9                            
000AFBE9                            ToxicLandfill_Loop06:
000AFBE9 82                         	dc.b	dSnare
000AFBEA                            
000AFBEA                            ToxicLandfill_Loop02:
000AFBEA 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AFBEE F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000AFBF3                            
000AFBF3                            ToxicLandfill_Loop03:
000AFBF3 8281 81                    	dc.b	dSnare, dKick, dKick
000AFBF6 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000AFBFB                            
000AFBFB                            ToxicLandfill_Loop04:
000AFBFB 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AFBFF F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000AFC04 8182 81                    	dc.b	dKick, dSnare, dKick
000AFC07                            
000AFC07                            ToxicLandfill_Loop05:
000AFC07 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AFC0C F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000AFC11 0303 03                    	dc.b	$03, $03, $03
000AFC14 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000AFC19                            
000AFC19                            ToxicLandfill_Loop08:
000AFC19 03                         	dc.b	$03
000AFC1A                            
000AFC1A                            ToxicLandfill_Loop07:
000AFC1A 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AFC23 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000AFC28 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000AFC2F F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000AFC34                            
000AFC34                            ToxicLandfill_Loop0D:
000AFC34 82                         	dc.b	dSnare
000AFC35                            
000AFC35                            ToxicLandfill_Loop09:
000AFC35 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AFC39 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000AFC3E                            
000AFC3E                            ToxicLandfill_Loop0A:
000AFC3E 8281 81                    	dc.b	dSnare, dKick, dKick
000AFC41 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000AFC46                            
000AFC46                            ToxicLandfill_Loop0B:
000AFC46 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AFC4A F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000AFC4F 8182 81                    	dc.b	dKick, dSnare, dKick
000AFC52                            
000AFC52                            ToxicLandfill_Loop0C:
000AFC52 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AFC57 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000AFC5C 0303 03                    	dc.b	$03, $03, $03
000AFC5F F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000AFC64                            
000AFC64                            ToxicLandfill_Loop0E:
000AFC64 03                         	dc.b	$03
000AFC65                            
000AFC65                            ToxicLandfill_Loop0F:
000AFC65 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AFC71 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000AFC76 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000AFC7B 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000AFC87 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000AFC8F F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000AFC94                            
000AFC94                            ToxicLandfill_Loop10:
000AFC94 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AFC9D F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000AFCA2 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000AFCAA F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000AFCAF F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000AFCB2                            
000AFCB2                            ; FM1 Data
000AFCB2                            ToxicLandfill_FM1:
000AFCB2 E0C0                       	smpsPan             panCenter, $00
000AFCB4 EF00                       	smpsSetvoice        $00
000AFCB6 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AFCC2 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AFCCA                            
000AFCCA                            ToxicLandfill_Loop44:
000AFCCA AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AFCD6 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AFCE2 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AFCEE A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AFCF2 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000AFCF7                            
000AFCF7                            ToxicLandfill_Loop46:
000AFCF7 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AFD03 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AFD0F 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AFD1B AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AFD23                            
000AFD23                            ToxicLandfill_Loop45:
000AFD23 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AFD27 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000AFD2C AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AFD33 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000AFD38                            
000AFD38                            ToxicLandfill_Loop47:
000AFD38 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AFD44 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000AFD49                            
000AFD49                            ToxicLandfill_Loop48:
000AFD49 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AFD54 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000AFD59 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000AFD5E                            
000AFD5E                            ToxicLandfill_Loop4A:
000AFD5E B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AFD6A B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AFD76 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AFD82 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AFD8A                            
000AFD8A                            ToxicLandfill_Loop49:
000AFD8A B602 B501                  	dc.b	nF4, $02, nE4, $01
000AFD8E F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000AFD93 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AFD9A F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000AFD9F                            
000AFD9F                            ToxicLandfill_Loop4B:
000AFD9F B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AFDAB 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AFDB7 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AFDC3 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AFDC7 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000AFDCC                            
000AFDCC                            ToxicLandfill_Loop4C:
000AFDCC BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AFDD7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000AFDDC                            
000AFDDC                            ToxicLandfill_Loop4D:
000AFDDC BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AFDE7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000AFDEC F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000AFDF1 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000AFDF4                            
000AFDF4                            ; FM2 Data
000AFDF4                            ToxicLandfill_FM2:
000AFDF4 E0C0                       	smpsPan             panCenter, $00
000AFDF6 EF00                       	smpsSetvoice        $00
000AFDF8 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AFE04 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AFE0C                            
000AFE0C                            ToxicLandfill_Loop3A:
000AFE0C B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000AFE18 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000AFE24 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000AFE30 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000AFE34 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000AFE39                            
000AFE39                            ToxicLandfill_Loop3C:
000AFE39 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AFE45 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000AFE51 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000AFE5D B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000AFE65                            
000AFE65                            ToxicLandfill_Loop3B:
000AFE65 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000AFE69 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000AFE6E AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000AFE75 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000AFE7A                            
000AFE7A                            ToxicLandfill_Loop3D:
000AFE7A AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000AFE86 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000AFE8B                            
000AFE8B                            ToxicLandfill_Loop3E:
000AFE8B ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000AFE96 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000AFE9B F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000AFEA0                            
000AFEA0                            ToxicLandfill_Loop40:
000AFEA0 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000AFEAC B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000AFEB8 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AFEC4 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000AFECC                            
000AFECC                            ToxicLandfill_Loop3F:
000AFECC BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000AFED0 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000AFED5 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AFEDC F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AFEE1                            
000AFEE1                            ToxicLandfill_Loop41:
000AFEE1 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AFEED 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AFEF9 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AFF05 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AFF09 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AFF0E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AFF1A B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AFF26 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AFF32 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AFF3E 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AFF4A 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AFF50                            
000AFF50                            ToxicLandfill_Loop42:
000AFF50 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AFF5B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AFF60                            
000AFF60                            ToxicLandfill_Loop43:
000AFF60 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AFF6B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AFF70 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AFF75 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AFF81 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AFF8B F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AFF8E                            
000AFF8E                            ; FM3 Data
000AFF8E                            ToxicLandfill_FM3:
000AFF8E E0C0                       	smpsPan             panCenter, $00
000AFF90 EF01                       	smpsSetvoice        $01
000AFF92                            
000AFF92                            ToxicLandfill_Loop2D:
000AFF92 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AFF9E 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AFFAA 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AFFB3 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AFFB8 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AFFC4 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AFFD0 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AFFDC A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AFFE4                            
000AFFE4                            ToxicLandfill_Loop2E:
000AFFE4 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AFFF0 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AFFF5 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B0001 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B0007 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000B000C                            
000B000C                            ToxicLandfill_Loop31:
000B000C A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B0011                            
000B0011                            ToxicLandfill_Loop2F:
000B0011 9999 A3                    	dc.b	nC2, nC2, nBb2
000B0014 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000B0019 99A3                       	dc.b	nC2, nBb2
000B001B                            
000B001B                            ToxicLandfill_Loop30:
000B001B 99A3 99                    	dc.b	nC2, nBb2, nC2
000B001E F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000B0023 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B0028 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000B002D                            
000B002D                            ToxicLandfill_Loop32:
000B002D A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B0039 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000B003E                            
000B003E                            ToxicLandfill_Loop33:
000B003E A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B0048 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000B004D F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000B0052                            
000B0052                            ToxicLandfill_Loop36:
000B0052 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B0057                            
000B0057                            ToxicLandfill_Loop34:
000B0057 9999 A3                    	dc.b	nC2, nC2, nBb2
000B005A F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000B005F 99A3                       	dc.b	nC2, nBb2
000B0061                            
000B0061                            ToxicLandfill_Loop35:
000B0061 99A3 99                    	dc.b	nC2, nBb2, nC2
000B0064 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000B0069 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B006E F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000B0073                            
000B0073                            ToxicLandfill_Loop37:
000B0073 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B007F F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000B0084 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B0090 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B0096 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000B009B                            
000B009B                            ToxicLandfill_Loop38:
000B009B A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B00A6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000B00AB                            
000B00AB                            ToxicLandfill_Loop39:
000B00AB A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B00B5 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000B00BA F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000B00BF F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000B00C2                            
000B00C2                            ; FM4 Data
000B00C2                            ToxicLandfill_FM4:
000B00C2 E0C0                       	smpsPan             panCenter, $00
000B00C4 EF01                       	smpsSetvoice        $01
000B00C6                            
000B00C6                            ToxicLandfill_Loop20:
000B00C6 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000B00D2 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000B00DE 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000B00E7 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000B00EC 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000B00F8 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000B0104 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000B0110 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000B0115                            
000B0115                            ToxicLandfill_Loop21:
000B0115 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B0121 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000B0126 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B0132 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B0138 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000B013D                            
000B013D                            ToxicLandfill_Loop24:
000B013D 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B0142                            
000B0142                            ToxicLandfill_Loop22:
000B0142 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B0145 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000B014A 8D97                       	dc.b	nC1, nBb1
000B014C                            
000B014C                            ToxicLandfill_Loop23:
000B014C 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B014F F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000B0154 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B0159 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000B015E                            
000B015E                            ToxicLandfill_Loop25:
000B015E 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B016A F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000B016F                            
000B016F                            ToxicLandfill_Loop26:
000B016F 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B0179 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000B017E F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000B0183                            
000B0183                            ToxicLandfill_Loop29:
000B0183 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B0188                            
000B0188                            ToxicLandfill_Loop27:
000B0188 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B018B F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000B0190 8D97                       	dc.b	nC1, nBb1
000B0192                            
000B0192                            ToxicLandfill_Loop28:
000B0192 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B0195 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000B019A 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B019F F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000B01A4                            
000B01A4                            ToxicLandfill_Loop2A:
000B01A4 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B01B0 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000B01B5 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B01C1 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B01C7 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000B01CC                            
000B01CC                            ToxicLandfill_Loop2B:
000B01CC 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B01D7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000B01DC                            
000B01DC                            ToxicLandfill_Loop2C:
000B01DC 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B01E6 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000B01EB F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000B01F0 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000B01F3                            
000B01F3                            ; FM5 Data
000B01F3                            ToxicLandfill_FM5:
000B01F3 E0C0                       	smpsPan             panCenter, $00
000B01F5 E6FA                       	smpsAlterVol			-$06		
000B01F7 E102                       	smpsDetune			$02	
000B01F9 EF00                       	smpsSetvoice        $00
000B01FB 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B0207 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000B020C                            
000B020C                            ToxicLandfill_Jump01:
000B020C E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000B020F                            
000B020F                            ToxicLandfill_Loop11:
000B020F AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000B021B 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000B0227 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000B0233 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000B0237 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000B023C                            
000B023C                            ToxicLandfill_Loop13:
000B023C AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B0248 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000B0254 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000B0260 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000B0268                            
000B0268                            ToxicLandfill_Loop12:
000B0268 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000B026C F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000B0271 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000B0278 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000B027D                            
000B027D                            ToxicLandfill_Loop14:
000B027D B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000B0289 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000B028E                            
000B028E                            ToxicLandfill_Loop15:
000B028E B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B0299 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000B029E F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000B02A3                            
000B02A3                            ToxicLandfill_Loop17:
000B02A3 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000B02AF B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000B02BB AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B02C7 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000B02CF                            
000B02CF                            ToxicLandfill_Loop16:
000B02CF B602 B501                  	dc.b	nF4, $02, nE4, $01
000B02D3 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000B02D8 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000B02DF F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000B02E4                            
000B02E4                            ToxicLandfill_Loop18:
000B02E4 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000B02F0 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000B02FC B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000B0308 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000B030C F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000B0311                            
000B0311                            ToxicLandfill_Loop19:
000B0311 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B031C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000B0321                            
000B0321                            ToxicLandfill_Loop1A:
000B0321 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B032C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000B0331                            
000B0331                            ToxicLandfill_Loop1B:
000B0331 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B033C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000B0341 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000B034D B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000B0359 EF02                       	smpsSetvoice        $02
000B035B E1FE                       	smpsDetune			-$02
000B035D E606                       	smpsAlterVol		$06
000B035F                            	
000B035F                            ToxicLandfill_Loop1C:
000B035F B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000B036B F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000B0370                            
000B0370                            ToxicLandfill_Loop1D:
000B0370 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B037B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000B0380                            
000B0380                            ToxicLandfill_Loop1E:
000B0380 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B038B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000B0390                            
000B0390                            ToxicLandfill_Loop1F:
000B0390 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B039B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000B03A0 EF00                       	smpsSetvoice        $00
000B03A2 E102                       	smpsDetune			$02
000B03A4 E6FA                       	smpsAlterVol		-$06	
000B03A6 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000B03A9                            
000B03A9                            ; PSG1 Data
000B03A9                            ToxicLandfill_PSG1:
000B03A9 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B03AE                            
000B03AE                            ToxicLandfill_Jump04:
000B03AE 80                         	dc.b	nRst
000B03AF                            
000B03AF                            ToxicLandfill_Loop57:
000B03AF 60                         	dc.b	$60
000B03B0 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000B03B5                            
000B03B5                            ToxicLandfill_Loop58:
000B03B5 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B03C1 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000B03C6                            
000B03C6                            ToxicLandfill_Loop59:
000B03C6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B03D1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000B03D6                            
000B03D6                            ToxicLandfill_Loop5A:
000B03D6 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B03E1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000B03E6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B03F2 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000B03FE                            
000B03FE                            ToxicLandfill_Loop5B:
000B03FE 6E                         	dc.b	$6E
000B03FF F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000B0404                            
000B0404                            ToxicLandfill_Loop5C:
000B0404 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B0410 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000B0415                            
000B0415                            ToxicLandfill_Loop5D:
000B0415 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B0420 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000B0425 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000B042A                            
000B042A                            ToxicLandfill_Loop5E:
000B042A A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B0435 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000B043A A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B0446 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000B0452 01                         	dc.b	$01
000B0453 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000B0456                            
000B0456                            ; PSG2 Data
000B0456                            ToxicLandfill_PSG2:
000B0456 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B045B                            
000B045B                            ToxicLandfill_Jump03:
000B045B 80                         	dc.b	nRst
000B045C                            
000B045C                            ToxicLandfill_Loop50:
000B045C 60                         	dc.b	$60
000B045D F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000B0462 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B046E A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B047A 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B0486 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B0492 9E                         	dc.b	nF2
000B0493                            
000B0493                            ToxicLandfill_Loop51:
000B0493 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B049E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000B04A3 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B04AF 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000B04BB 0580                       	dc.b	$05, nRst
000B04BD                            
000B04BD                            ToxicLandfill_Loop52:
000B04BD 60                         	dc.b	$60
000B04BE F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000B04C3 01                         	dc.b	$01
000B04C4                            
000B04C4                            ToxicLandfill_Loop53:
000B04C4 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B04D0 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B04DC 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B04E8 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B04F4 9E                         	dc.b	nF2
000B04F5 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000B04FA                            
000B04FA                            ToxicLandfill_Loop54:
000B04FA A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B0505 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000B050A                            
000B050A                            ToxicLandfill_Loop55:
000B050A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B0515 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000B051A                            
000B051A                            ToxicLandfill_Loop56:
000B051A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B0525 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000B052A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B0536 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000B0542 01                         	dc.b	$01
000B0543 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000B0546                            
000B0546                            ; PSG3 Data
000B0546                            ToxicLandfill_PSG3:
000B0546 F3E7                       	smpsPSGform         $E7
000B0548 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000B0550                            
000B0550                            ToxicLandfill_Loop4E:
000B0550 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000B0555 F501                       	smpsPSGvoice        fTone_01
000B0557 0C                         	dc.b	$0C
000B0558 F502                       	smpsPSGvoice        fTone_02
000B055A F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000B055F 0603 03                    	dc.b	$06, $03, $03
000B0562 F501                       	smpsPSGvoice        fTone_01
000B0564 06                         	dc.b	$06
000B0565 F502                       	smpsPSGvoice        fTone_02
000B0567 03                         	dc.b	$03
000B0568 F501                       	smpsPSGvoice        fTone_01
000B056A 0906 0606                  	dc.b	$09, $06, $06, $06
000B056E                            
000B056E                            ToxicLandfill_Jump02:
000B056E E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000B0576 F502                       	smpsPSGvoice        fTone_02
000B0578 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000B057C F501                       	smpsPSGvoice        fTone_01
000B057E 18                         	dc.b	$18
000B057F F502                       	smpsPSGvoice        fTone_02
000B0581 1806                       	dc.b	$18, $06
000B0583 F501                       	smpsPSGvoice        fTone_01
000B0585 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B058B F502                       	smpsPSGvoice        fTone_02
000B058D 1818 18                    	dc.b	$18, $18, $18
000B0590 F501                       	smpsPSGvoice        fTone_01
000B0592 18                         	dc.b	$18
000B0593 F502                       	smpsPSGvoice        fTone_02
000B0595 1806                       	dc.b	$18, $06
000B0597 F501                       	smpsPSGvoice        fTone_01
000B0599 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000B05A5 F502                       	smpsPSGvoice        fTone_02
000B05A7 1818 18                    	dc.b	$18, $18, $18
000B05AA F501                       	smpsPSGvoice        fTone_01
000B05AC 18                         	dc.b	$18
000B05AD F502                       	smpsPSGvoice        fTone_02
000B05AF 1806                       	dc.b	$18, $06
000B05B1 F501                       	smpsPSGvoice        fTone_01
000B05B3 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B05B9 F502                       	smpsPSGvoice        fTone_02
000B05BB 1818 18                    	dc.b	$18, $18, $18
000B05BE F501                       	smpsPSGvoice        fTone_01
000B05C0 18                         	dc.b	$18
000B05C1 F502                       	smpsPSGvoice        fTone_02
000B05C3 1806                       	dc.b	$18, $06
000B05C5 F501                       	smpsPSGvoice        fTone_01
000B05C7 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000B05CC                            
000B05CC                            ToxicLandfill_Loop4F:
000B05CC 59E7                       	dc.b	$59, smpsNoAttack
000B05CE F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000B05D3 5A                         	dc.b	$5A
000B05D4 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000B05D7                            
000B05D7                            
000B05D7                            ToxicLandfill_Voices:
000B05D7                            ;	Voice $00
000B05D7                            ;	$29
000B05D7                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000B05D7                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000B05D7                            	smpsVcAlgorithm     $01
000B05D7                            	smpsVcFeedback      $05
000B05D7                            	smpsVcUnusedBits    $00
000B05D7                            	smpsVcDetune        $00, $00, $00, $03
000B05D7                            	smpsVcCoarseFreq    $01, $02, $02, $03
000B05D7                            	smpsVcRateScale     $00, $00, $00, $00
000B05D7                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000B05D7                            	smpsVcAmpMod        $00, $00, $00, $00
000B05D7                            	smpsVcDecayRate1    $0B, $00, $02, $00
000B05D7                            	smpsVcDecayRate2    $03, $00, $02, $03
000B05D7                            	smpsVcDecayLevel    $01, $00, $01, $00
000B05D7                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000B05F0                            	
000B05F0                            ;	Voice $01
000B05F0                            ;	$18
000B05F0                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B05F0                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000B05F0                            	smpsVcAlgorithm     $00
000B05F0                            	smpsVcFeedback      $03
000B05F0                            	smpsVcUnusedBits    $00
000B05F0                            	smpsVcDetune        $03, $03, $03, $03
000B05F0                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B05F0                            	smpsVcRateScale     $02, $00, $03, $02
000B05F0                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B05F0                            	smpsVcAmpMod        $00, $00, $00, $00
000B05F0                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B05F0                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B05F0                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B05F0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0609                            
000B0609                            ;	Voice $02
000B0609                            ;	$2C
000B0609                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B0609                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000B0609                            	smpsVcAlgorithm     $04
000B0609                            	smpsVcFeedback      $05
000B0609                            	smpsVcUnusedBits    $00
000B0609                            	smpsVcDetune        $03, $03, $07, $07
000B0609                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B0609                            	smpsVcRateScale     $00, $00, $00, $00
000B0609                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B0609                            	smpsVcAmpMod        $00, $00, $00, $00
000B0609                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B0609                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0609                            	smpsVcDecayLevel    $01, $00, $01, $00
000B0609                            	smpsVcReleaseRate   $06, $00, $06, $00
000B0622                            		even			
000B0622                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000B0622                            RRZ2_Header:
000B0622                            	smpsHeaderStartSong 1
000B0624 0603                       	smpsHeaderChan      $06, $03
000B0626 0104                       	smpsHeaderTempo     $01, $04
000B0628                            
000B062C 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000B0630 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000B0634 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000B0638 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000B063C 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000B0652                            
000B0652                            ; FM1 Data
000B0652                            RRZ2_FM1:
000B0652 E0C0                       	smpsPan             panCenter, $00
000B0659 EF03                       	smpsSetvoice        $03
000B065B B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000B0667 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000B0673 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000B067F B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000B068B 8080                       	dc.b	nRst, nRst
000B068D EF00                       	smpsSetvoice        $00
000B068F B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000B069B B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000B06A7 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000B06B3 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000B06BF 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000B06CB B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000B06D7 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000B06E3 3280 60                    	dc.b	$32, nRst, $60
000B06E6 EF05                       	smpsSetvoice        $05
000B06E8 E9F4                       	smpsAlterPitch      $F4
000B06EA B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000B06F6 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000B06FE E90C                       	smpsAlterPitch      $0C
000B0700 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000B070C 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000B0718 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000B071E F6FF 32                    	smpsJump            RRZ2_FM1
000B0721                            
000B0721                            ; FM2 Data
000B0721                            RRZ2_FM2:
000B0721 E0C0                       	smpsPan             panCenter, $00
000B0728 EF01                       	smpsSetvoice        $01
000B072A                            
000B072A                            RRZ2_Jump02:
000B072A 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000B0736 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000B0742 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000B074E 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000B075A 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000B0766 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000B0772 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000B077E 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000B0786                            
000B0786                            RRZ2_Loop07:
000B0786 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B0792 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B079E 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B07A6 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000B07AB                            
000B07AB                            RRZ2_Loop08:
000B07AB 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B07B7 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B07C3 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B07CB F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000B07D0 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000B07DC 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000B07E8 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000B07F4 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000B0800 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000B080C 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000B0818 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000B0824 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000B0830 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000B083C A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000B0848 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000B0854 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000B0860 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000B086C 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000B0878 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B0884 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B0890 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B089C 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B08A8 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B08B4 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B08C0 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B08CC 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B08D8 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B08E4 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B08F0 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000B08FC 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B0908 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B0914 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B0920 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B092C 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B0938 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B0944 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B0950 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B095C 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B0968 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B0974 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000B097B F6FD AD                    	smpsJump            RRZ2_Jump02
000B097E                            
000B097E                            ; FM3 Data
000B097E                            RRZ2_FM3:
000B097E E080                       	smpsPan             panLeft, $00
000B0985                            
000B0985                            RRZ2_Jump01:
000B0985 EF02                       	smpsSetvoice        $02
000B0987                            
000B0987                            RRZ2_Loop05:
000B0987 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0993 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B099F 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B09AB 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B09B7 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B09BD F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000B09C2 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B09CE 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B09DA 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B09E6 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B09F2 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B09FA                            
000B09FA                            RRZ2_Loop06:
000B09FA AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B0A06 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B0A12 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B0A1E 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B0A2A 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B0A36 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B0A42 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B0A4E B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B0A59 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000B0A5E AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B0A6A 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B0A76 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B0A82 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B0A8E 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B0A9A B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B0AA6 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B0AB2 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B0ABD EF05                       	smpsSetvoice        $05
000B0ABF 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000B0ACB B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000B0AD7 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000B0AE3 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000B0AEF B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000B0AFB B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000B0B07 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000B0B0D E6FA                       	smpsAlterVol        $FA
000B0B0F A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000B0B1B 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000B0B27 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B0B33 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000B0B3F 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000B0B4B 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000B0B57 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000B0B63 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000B0B6D E606                       	smpsAlterVol        $06
000B0B6F F6FE 14                    	smpsJump            RRZ2_Jump01
000B0B72                            
000B0B72                            ; FM4 Data
000B0B72                            RRZ2_FM4:
000B0B72 E040                       	smpsPan             panRight, $00
000B0B79                            
000B0B79                            RRZ2_Jump00:
000B0B79 EF02                       	smpsSetvoice        $02
000B0B7B                            
000B0B7B                            RRZ2_Loop03:
000B0B7B AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0B87 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0B93 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0B9F AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B0BAB ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B0BB0 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000B0BB5 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0BC1 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0BCD 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0BD9 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B0BE5 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B0BEB                            
000B0BEB                            RRZ2_Loop04:
000B0BEB A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B0BF7 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B0C03 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B0C0F 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B0C1B 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B0C27 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B0C33 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B0C3F A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000B0C4A F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000B0C4F A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B0C5B 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B0C67 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B0C73 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B0C7F 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B0C8B A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B0C97 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B0CA3 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000B0CAF EF05                       	smpsSetvoice        $05
000B0CB1 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000B0CBD B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000B0CC9 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000B0CD5 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000B0CE1 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000B0CED ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000B0CF9 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000B0D05 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000B0D09 E6FA                       	smpsAlterVol        $FA
000B0D0B A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000B0D17 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000B0D23 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B0D2F A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000B0D3B 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000B0D47 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000B0D53 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000B0D5F B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000B0D67 E606                       	smpsAlterVol        $06
000B0D69 F6FE 0E                    	smpsJump            RRZ2_Jump00
000B0D6C                            
000B0D6C                            ; FM5 Data
000B0D6C                            RRZ2_FM5:
000B0D71 8010                       	dc.b	nRst, $10
000B0D73 E101                       	smpsAlterNote       $01
000B0D75 F6F8 DB                    	smpsJump            RRZ2_FM1
000B0D78                            
000B0D78                            ; PSG1 Data
000B0D78                            RRZ2_PSG1:
000B0D7D F507                       	smpsPSGvoice        stone_1D
000B0D7F B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0D8B 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B0D97 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B0DA3 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B0DAF ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B0DB5 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000B0DBA B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0DC6 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B0DD2 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B0DDE 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B0DEA B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B0DF2 F507                       	smpsPSGvoice        stone_26
000B0DF4 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B0E00 804A                       	dc.b	nRst, $4A
000B0E02                            
000B0E02                            RRZ2_Loop0D:
000B0E02 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000B0E0E 804A                       	dc.b	nRst, $4A
000B0E10 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000B0E15 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B0E21 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000B0E2D BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000B0E31                            
000B0E31                            RRZ2_Loop0E:
000B0E31 F507                       	smpsPSGvoice        stone_23
000B0E33 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000B0E3F 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000B0E4B 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000B0E57 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000B0E5E F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000B0E63                            
000B0E63                            RRZ2_Loop0F:
000B0E63 F507                       	smpsPSGvoice        stone_1D
000B0E65 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000B0E71 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000B0E7D 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000B0E89 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000B0E8E 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B0E9A B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B0EA6 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B0EB2 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B0EBE B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B0ECA B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B0ED6 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000B0EDD F6FE 99                    	smpsJump            RRZ2_PSG1
000B0EE0                            
000B0EE0                            ; PSG2 Data
000B0EE0                            RRZ2_PSG2:
000B0EE5 F507                       	smpsPSGvoice        stone_1D
000B0EE7                            
000B0EE7                            RRZ2_Loop09:
000B0EE7 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0EF3 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0EFF 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0F0B AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B0F17 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B0F1C F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000B0F21 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0F2D 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0F39 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0F45 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B0F51 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B0F57 F507                       	smpsPSGvoice        stone_26
000B0F59 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000B0F65 804A                       	dc.b	nRst, $4A
000B0F67                            
000B0F67                            RRZ2_Loop0A:
000B0F67 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B0F73 804A                       	dc.b	nRst, $4A
000B0F75 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000B0F7A B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B0F86 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000B0F92 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000B0F96                            
000B0F96                            RRZ2_Loop0B:
000B0F96 F507                       	smpsPSGvoice        stone_23
000B0F98 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000B0FA4 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000B0FB0 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000B0FBC 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000B0FC3 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000B0FC8                            
000B0FC8                            RRZ2_Loop0C:
000B0FC8 F507                       	smpsPSGvoice        stone_1D
000B0FCA B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000B0FD6 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000B0FE2 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000B0FEE E760                       	dc.b	smpsNoAttack, $60
000B0FF0 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000B0FF5 800D                       	dc.b	nRst, $0D
000B0FF7 EC02                       	smpsPSGAlterVol     $02
000B0FF9 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B1005 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B1011 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B101D 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B1029 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B1035 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B1041 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000B1049 ECFE                       	smpsPSGAlterVol     $FE
000B104B F6FE 93                    	smpsJump            RRZ2_PSG2
000B104E                            
000B104E                            ; PSG3 Data
000B104E                            RRZ2_PSG3:
000B104E F3E7                       	smpsPSGform         $E7
000B1050 8060 80                    	dc.b	nRst, $60, nRst
000B1053 F800 00                    	smpsCall            RRZ2_Call00
000B1056 F800 00                    	smpsCall            RRZ2_Call00
000B1059 F800 00                    	smpsCall            RRZ2_Call01
000B105C                            
000B105C                            RRZ2_Jump03:
000B105C F800 00                    	smpsCall            RRZ2_Call00
000B105F F6FF FB                    	smpsJump            RRZ2_Jump03
000B1062                            
000B1062                            RRZ2_Call00:
000B1062 F502                       	smpsPSGvoice        stone_0F
000B1064 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B106B F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000B1070 E3                         	smpsReturn
000B1071                            
000B1071                            RRZ2_Call01:
000B1071 F502                       	smpsPSGvoice        stone_0F
000B1073 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B107A F502                       	smpsPSGvoice        stone_0F
000B107C B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B1083 F502                       	smpsPSGvoice        stone_0F
000B1085 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000B108C F503                       	smpsPSGvoice        stone_04
000B108E B10C                       	dc.b	nC4, $0C
000B1090 F502                       	smpsPSGvoice        stone_0F
000B1092 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000B1096 E3                         	smpsReturn
000B1097                            
000B1097                            ; DAC Data
000B1097                            RRZ2_DAC:
000B1097 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000B10A3 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000B10AF 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000B10BB 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000B10C7 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000B10D3 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B10DF 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000B10EB 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B10F7 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B1103 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B110F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B111B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B1127 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000B112D                            
000B112D                            RRZ2_Loop00:
000B112D 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1139 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B1145 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1151 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B115D 80                         	dc.b	nRst
000B115E F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000B1163 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B116F 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B117B 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1187 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000B1193 82                         	dc.b	dSnare
000B1194                            
000B1194                            RRZ2_Loop01:
000B1194 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B11A0 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B11AC 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B11B8 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B11C4 80                         	dc.b	nRst
000B11C5 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000B11CA 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000B11D6 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000B11E2 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000B11EE 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000B11FA 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000B1206 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000B1212 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000B121E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B122A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1236 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B1242 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B124E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B125A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1266 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B1272 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000B127E 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B128A 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000B1296 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000B12A2 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000B12AE 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B12BA 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B12C6                            
000B12C6                            RRZ2_Loop02:
000B12C6 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12D2 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12DE 80                         	dc.b	nRst
000B12DF F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B12E4 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12F0 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B12FC 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B1308 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B130D F6FD 88                    	smpsJump            RRZ2_DAC
000B1310                            
000B1310                            RRZ2_Voices:
000B1310                            ;	Voice $00
000B1310                            ;	$3A
000B1310                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B1310                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B1310                            	smpsVcAlgorithm     $02
000B1310                            	smpsVcFeedback      $07
000B1310                            	smpsVcUnusedBits    $00
000B1310                            	smpsVcDetune        $03, $07, $07, $03
000B1310                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B1310                            	smpsVcRateScale     $00, $01, $01, $02
000B1310                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B1310                            	smpsVcAmpMod        $00, $00, $00, $00
000B1310                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B1310                            	smpsVcDecayRate2    $01, $01, $05, $01
000B1310                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B1310                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1329                            
000B1329                            ;	Voice $01
000B1329                            ;	$3C
000B1329                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B1329                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B1329                            	smpsVcAlgorithm     $04
000B1329                            	smpsVcFeedback      $07
000B1329                            	smpsVcUnusedBits    $00
000B1329                            	smpsVcDetune        $00, $00, $00, $00
000B1329                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B1329                            	smpsVcRateScale     $00, $00, $00, $00
000B1329                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B1329                            	smpsVcAmpMod        $00, $00, $00, $00
000B1329                            	smpsVcDecayRate1    $05, $12, $03, $11
000B1329                            	smpsVcDecayRate2    $02, $09, $04, $07
000B1329                            	smpsVcDecayLevel    $01, $02, $03, $05
000B1329                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B1342                            
000B1342                            ;	Voice $02
000B1342                            ;	$3A
000B1342                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B1342                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B1342                            	smpsVcAlgorithm     $02
000B1342                            	smpsVcFeedback      $07
000B1342                            	smpsVcUnusedBits    $00
000B1342                            	smpsVcDetune        $03, $01, $00, $07
000B1342                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B1342                            	smpsVcRateScale     $02, $02, $03, $02
000B1342                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1342                            	smpsVcAmpMod        $00, $00, $00, $00
000B1342                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B1342                            	smpsVcDecayRate2    $02, $03, $02, $03
000B1342                            	smpsVcDecayLevel    $07, $05, $06, $06
000B1342                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B135B                            
000B135B                            ;	Voice $03
000B135B                            ;	$3E
000B135B                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B135B                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B135B                            	smpsVcAlgorithm     $06
000B135B                            	smpsVcFeedback      $07
000B135B                            	smpsVcUnusedBits    $00
000B135B                            	smpsVcDetune        $00, $00, $00, $00
000B135B                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B135B                            	smpsVcRateScale     $00, $00, $00, $00
000B135B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B135B                            	smpsVcAmpMod        $00, $00, $00, $00
000B135B                            	smpsVcDecayRate1    $00, $00, $06, $03
000B135B                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B135B                            	smpsVcDecayLevel    $00, $00, $00, $01
000B135B                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B1374                            
000B1374                            ;	Voice $04
000B1374                            ;	$3C
000B1374                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B1374                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B1374                            	smpsVcAlgorithm     $04
000B1374                            	smpsVcFeedback      $07
000B1374                            	smpsVcUnusedBits    $00
000B1374                            	smpsVcDetune        $01, $01, $07, $07
000B1374                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1374                            	smpsVcRateScale     $00, $00, $00, $00
000B1374                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B1374                            	smpsVcAmpMod        $00, $00, $00, $00
000B1374                            	smpsVcDecayRate1    $01, $07, $01, $04
000B1374                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1374                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1374                            	smpsVcReleaseRate   $08, $07, $08, $07
000B138D                            
000B138D                            ;	Voice $05
000B138D                            ;	$16
000B138D                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B138D                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B138D                            	smpsVcAlgorithm     $06
000B138D                            	smpsVcFeedback      $02
000B138D                            	smpsVcUnusedBits    $00
000B138D                            	smpsVcDetune        $03, $03, $07, $07
000B138D                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B138D                            	smpsVcRateScale     $00, $00, $00, $00
000B138D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B138D                            	smpsVcAmpMod        $00, $00, $00, $00
000B138D                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B138D                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B138D                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B138D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13A6                            
000B13A6                            
000B13A6                            		even				
000B13A6                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B1F88                            		even
000B1F88                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B1F88                            Tribute_Header:
000B1F88                            	smpsHeaderStartSong 3
000B1F8A 0603                       	smpsHeaderChan      $06, $03
000B1F8C 0106                       	smpsHeaderTempo     $01, $06
000B1F8E                            
000B1F92 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B1F96 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B1F9A 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B1F9E 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B1FA2 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B1FA6                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B1FB8                            
000B1FB8                            ; FM1 Data
000B1FB8                            Tribute_FM1:
000B1FB8 EF00                       	smpsSetvoice        $00
000B1FBA F800 00                    	smpsCall            Tribute_Call05
000B1FBD E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B1FC9 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B1FD5 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B1FDC F800 00                    	smpsCall            Tribute_Call05
000B1FDF E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B1FEB 94                         	dc.b	nG1
000B1FEC EA09                       	smpsSetTempoMod     $09
000B1FEE E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B1FF4                            
000B1FF4                            Tribute_Loop05:
000B1FF4 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B2000 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B200C 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B2018 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B2024 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B2030 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B203C 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B2043 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B2048 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B2054 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B205C F800 00                    	smpsCall            Tribute_Call00
000B205F F2                         	smpsStop
000B2060                            
000B2060                            Tribute_Call05:
000B2060 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B206C E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B2078 809B                       	dc.b	nRst, nD2
000B207A E3                         	smpsReturn
000B207B                            
000B207B                            Tribute_Call00:
000B207B 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B2087 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B2093 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B2098 E3                         	smpsReturn
000B2099                            
000B2099                            ; FM2 Data
000B2099                            Tribute_FM2:
000B2099 EF01                       	smpsSetvoice        $01
000B209B B512 B306                  	dc.b	nE4, $12, nD4, $06
000B209F E60A                       	smpsFMAlterVol      $0A
000B20A1 0680                       	dc.b	$06, nRst
000B20A3 E6F6                       	smpsFMAlterVol      $F6
000B20A5 B8                         	dc.b	nG4
000B20A6 E60A                       	smpsFMAlterVol      $0A
000B20A8 0680                       	dc.b	$06, nRst
000B20AA E6F6                       	smpsFMAlterVol      $F6
000B20AC B6B5                       	dc.b	nF4, nE4
000B20AE E60A                       	smpsFMAlterVol      $0A
000B20B0 06                         	dc.b	$06
000B20B1 E6F6                       	smpsFMAlterVol      $F6
000B20B3 B1                         	dc.b	nC4
000B20B4 E60A                       	smpsFMAlterVol      $0A
000B20B6 06                         	dc.b	$06
000B20B7 E6F6                       	smpsFMAlterVol      $F6
000B20B9 B3                         	dc.b	nD4
000B20BA EF02                       	smpsSetvoice        $02
000B20BC E918                       	smpsAlterPitch      $18
000B20BE F800 00                    	smpsCall            Tribute_Call04
000B20C1 EF01                       	smpsSetvoice        $01
000B20C3 E9E8                       	smpsAlterPitch      $E8
000B20C5 F800 00                    	smpsCall            Tribute_Call04
000B20C8 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B20D0 E60A                       	smpsFMAlterVol      $0A
000B20D2 06                         	dc.b	$06
000B20D3 E6F6                       	smpsFMAlterVol      $F6
000B20D5 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B20D9 E60A                       	smpsFMAlterVol      $0A
000B20DB 0680                       	dc.b	$06, nRst
000B20DD E6F6                       	smpsFMAlterVol      $F6
000B20DF B8                         	dc.b	nG4
000B20E0 E60A                       	smpsFMAlterVol      $0A
000B20E2 0680                       	dc.b	$06, nRst
000B20E4 E6F6                       	smpsFMAlterVol      $F6
000B20E6 B6B5                       	dc.b	nF4, nE4
000B20E8 E60A                       	smpsFMAlterVol      $0A
000B20EA 06                         	dc.b	$06
000B20EB E6F6                       	smpsFMAlterVol      $F6
000B20ED B1                         	dc.b	nC4
000B20EE E60A                       	smpsFMAlterVol      $0A
000B20F0 06                         	dc.b	$06
000B20F1 E6F6                       	smpsFMAlterVol      $F6
000B20F3 B3                         	dc.b	nD4
000B20F4 EF02                       	smpsSetvoice        $02
000B20F6 E918                       	smpsAlterPitch      $18
000B20F8 F800 00                    	smpsCall            Tribute_Call04
000B20FB EF01                       	smpsSetvoice        $01
000B20FD E9E8                       	smpsAlterPitch      $E8
000B20FF F800 00                    	smpsCall            Tribute_Call04
000B2102 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B210A                            
000B210A                            Tribute_Loop04:
000B210A 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B210E E60A                       	smpsFMAlterVol      $0A
000B2110 06                         	dc.b	$06
000B2111 E6F6                       	smpsFMAlterVol      $F6
000B2113 B50C                       	dc.b	nE4, $0C
000B2115 E60A                       	smpsFMAlterVol      $0A
000B2117 06                         	dc.b	$06
000B2118 E6F6                       	smpsFMAlterVol      $F6
000B211A 06                         	dc.b	$06
000B211B E60A                       	smpsFMAlterVol      $0A
000B211D 06                         	dc.b	$06
000B211E E6F6                       	smpsFMAlterVol      $F6
000B2120 06                         	dc.b	$06
000B2121 E60A                       	smpsFMAlterVol      $0A
000B2123 06                         	dc.b	$06
000B2124 E6F6                       	smpsFMAlterVol      $F6
000B2126 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B2129 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B212E 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B2132 E60A                       	smpsFMAlterVol      $0A
000B2134 06                         	dc.b	$06
000B2135 E6F6                       	smpsFMAlterVol      $F6
000B2137 B50C                       	dc.b	nE4, $0C
000B2139 E60A                       	smpsFMAlterVol      $0A
000B213B 06                         	dc.b	$06
000B213C E6F6                       	smpsFMAlterVol      $F6
000B213E 06                         	dc.b	$06
000B213F E60A                       	smpsFMAlterVol      $0A
000B2141 06                         	dc.b	$06
000B2142 E6F6                       	smpsFMAlterVol      $F6
000B2144 06                         	dc.b	$06
000B2145 E60A                       	smpsFMAlterVol      $0A
000B2147 06                         	dc.b	$06
000B2148 E6F6                       	smpsFMAlterVol      $F6
000B214A B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B2150 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B2155 B51E                       	dc.b	nE4, $1E
000B2157 E60A                       	smpsFMAlterVol      $0A
000B2159 06                         	dc.b	$06
000B215A E6F6                       	smpsFMAlterVol      $F6
000B215C B62A                       	dc.b	nF4, $2A
000B215E E60A                       	smpsFMAlterVol      $0A
000B2160 06                         	dc.b	$06
000B2161 E6F6                       	smpsFMAlterVol      $F6
000B2163 B52A                       	dc.b	nE4, $2A
000B2165 E60A                       	smpsFMAlterVol      $0A
000B2167 06                         	dc.b	$06
000B2168 E6F6                       	smpsFMAlterVol      $F6
000B216A B52A                       	dc.b	nE4, $2A
000B216C E60A                       	smpsFMAlterVol      $0A
000B216E 06                         	dc.b	$06
000B216F E6F6                       	smpsFMAlterVol      $F6
000B2171 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B2175 E60A                       	smpsFMAlterVol      $0A
000B2177 06                         	dc.b	$06
000B2178 E6F6                       	smpsFMAlterVol      $F6
000B217A B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B217E F800 00                    	smpsCall            Tribute_Call03
000B2181 F2                         	smpsStop
000B2182                            
000B2182                            Tribute_Call04:
000B2182 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B2188 E60A                       	smpsFMAlterVol      $0A
000B218A 0680                       	dc.b	$06, nRst
000B218C E6F6                       	smpsFMAlterVol      $F6
000B218E B8                         	dc.b	nG4
000B218F E60A                       	smpsFMAlterVol      $0A
000B2191 0680                       	dc.b	$06, nRst
000B2193 E6F6                       	smpsFMAlterVol      $F6
000B2195 B6B5                       	dc.b	nF4, nE4
000B2197 E60A                       	smpsFMAlterVol      $0A
000B2199 06                         	dc.b	$06
000B219A E6F6                       	smpsFMAlterVol      $F6
000B219C B1                         	dc.b	nC4
000B219D E60A                       	smpsFMAlterVol      $0A
000B219F 06                         	dc.b	$06
000B21A0 E6F6                       	smpsFMAlterVol      $F6
000B21A2 B3                         	dc.b	nD4
000B21A3 E3                         	smpsReturn
000B21A4                            
000B21A4                            Tribute_Call03:
000B21A4 E918                       	smpsAlterPitch      $18
000B21A6 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B21AF E60A                       	smpsFMAlterVol      $0A
000B21B1 06                         	dc.b	$06
000B21B2 E6F6                       	smpsFMAlterVol      $F6
000B21B4 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B21BB E60A                       	smpsFMAlterVol      $0A
000B21BD 06                         	dc.b	$06
000B21BE E6F6                       	smpsFMAlterVol      $F6
000B21C0 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B21C7 E60A                       	smpsFMAlterVol      $0A
000B21C9 06                         	dc.b	$06
000B21CA E6F6                       	smpsFMAlterVol      $F6
000B21CC E9E8                       	smpsAlterPitch      $E8
000B21CE E3                         	smpsReturn
000B21CF                            
000B21CF                            ; FM3 Data
000B21CF                            Tribute_FM3:
000B21CF EF01                       	smpsSetvoice        $01
000B21D1 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B21D5 E60A                       	smpsFMAlterVol      $0A
000B21D7 0680                       	dc.b	$06, nRst
000B21D9 E6F6                       	smpsFMAlterVol      $F6
000B21DB B3                         	dc.b	nD4
000B21DC E60A                       	smpsFMAlterVol      $0A
000B21DE 0680                       	dc.b	$06, nRst
000B21E0 E6F6                       	smpsFMAlterVol      $F6
000B21E2 B1B1                       	dc.b	nC4, nC4
000B21E4 E60A                       	smpsFMAlterVol      $0A
000B21E6 06                         	dc.b	$06
000B21E7 E6F6                       	smpsFMAlterVol      $F6
000B21E9 AE                         	dc.b	nA3
000B21EA E60A                       	smpsFMAlterVol      $0A
000B21EC 06                         	dc.b	$06
000B21ED E6F6                       	smpsFMAlterVol      $F6
000B21EF B0                         	dc.b	nB3
000B21F0 EF02                       	smpsSetvoice        $02
000B21F2 E918                       	smpsAlterPitch      $18
000B21F4 E080                       	smpsPan             panLeft, $00
000B21F6 F800 00                    	smpsCall            Tribute_Call02
000B21F9 EF01                       	smpsSetvoice        $01
000B21FB E9E8                       	smpsAlterPitch      $E8
000B21FD E0C0                       	smpsPan             panCenter, $00
000B21FF F800 00                    	smpsCall            Tribute_Call02
000B2202 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B220A E60A                       	smpsFMAlterVol      $0A
000B220C 06                         	dc.b	$06
000B220D E6F6                       	smpsFMAlterVol      $F6
000B220F B112 B006                  	dc.b	nC4, $12, nB3, $06
000B2213 E60A                       	smpsFMAlterVol      $0A
000B2215 0680                       	dc.b	$06, nRst
000B2217 E6F6                       	smpsFMAlterVol      $F6
000B2219 B3                         	dc.b	nD4
000B221A E60A                       	smpsFMAlterVol      $0A
000B221C 0680                       	dc.b	$06, nRst
000B221E E6F6                       	smpsFMAlterVol      $F6
000B2220 B1B1                       	dc.b	nC4, nC4
000B2222 E60A                       	smpsFMAlterVol      $0A
000B2224 06                         	dc.b	$06
000B2225 E6F6                       	smpsFMAlterVol      $F6
000B2227 AE                         	dc.b	nA3
000B2228 E60A                       	smpsFMAlterVol      $0A
000B222A 06                         	dc.b	$06
000B222B E6F6                       	smpsFMAlterVol      $F6
000B222D B0                         	dc.b	nB3
000B222E EF02                       	smpsSetvoice        $02
000B2230 E918                       	smpsAlterPitch      $18
000B2232 E080                       	smpsPan             panLeft, $00
000B2234 F800 00                    	smpsCall            Tribute_Call02
000B2237 EF01                       	smpsSetvoice        $01
000B2239 E9E8                       	smpsAlterPitch      $E8
000B223B E0C0                       	smpsPan             panCenter, $00
000B223D F800 00                    	smpsCall            Tribute_Call02
000B2240 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2248                            
000B2248                            Tribute_Loop03:
000B2248 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B224C E60A                       	smpsFMAlterVol      $0A
000B224E 06                         	dc.b	$06
000B224F E6F6                       	smpsFMAlterVol      $F6
000B2251 0C                         	dc.b	$0C
000B2252 E60A                       	smpsFMAlterVol      $0A
000B2254 06                         	dc.b	$06
000B2255 E6F6                       	smpsFMAlterVol      $F6
000B2257 06                         	dc.b	$06
000B2258 E60A                       	smpsFMAlterVol      $0A
000B225A 06                         	dc.b	$06
000B225B E6F6                       	smpsFMAlterVol      $F6
000B225D 06                         	dc.b	$06
000B225E E60A                       	smpsFMAlterVol      $0A
000B2260 06                         	dc.b	$06
000B2261 E6F6                       	smpsFMAlterVol      $F6
000B2263 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B2266 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B226B 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B226F E60A                       	smpsFMAlterVol      $0A
000B2271 06                         	dc.b	$06
000B2272 E6F6                       	smpsFMAlterVol      $F6
000B2274 0C                         	dc.b	$0C
000B2275 E60A                       	smpsFMAlterVol      $0A
000B2277 06                         	dc.b	$06
000B2278 E6F6                       	smpsFMAlterVol      $F6
000B227A 06                         	dc.b	$06
000B227B E60A                       	smpsFMAlterVol      $0A
000B227D 06                         	dc.b	$06
000B227E E6F6                       	smpsFMAlterVol      $F6
000B2280 06                         	dc.b	$06
000B2281 E60A                       	smpsFMAlterVol      $0A
000B2283 06                         	dc.b	$06
000B2284 E6F6                       	smpsFMAlterVol      $F6
000B2286 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B228D E60A                       	smpsFMAlterVol      $0A
000B228F 06                         	dc.b	$06
000B2290 E6F6                       	smpsFMAlterVol      $F6
000B2292 0C                         	dc.b	$0C
000B2293 E60A                       	smpsFMAlterVol      $0A
000B2295 06                         	dc.b	$06
000B2296 E6F6                       	smpsFMAlterVol      $F6
000B2298 06                         	dc.b	$06
000B2299 E60A                       	smpsFMAlterVol      $0A
000B229B 06                         	dc.b	$06
000B229C E6F6                       	smpsFMAlterVol      $F6
000B229E 06                         	dc.b	$06
000B229F E60A                       	smpsFMAlterVol      $0A
000B22A1 06                         	dc.b	$06
000B22A2 E6F6                       	smpsFMAlterVol      $F6
000B22A4 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B22AA F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B22AF B11E                       	dc.b	nC4, $1E
000B22B1 E60A                       	smpsFMAlterVol      $0A
000B22B3 06                         	dc.b	$06
000B22B4 E6F6                       	smpsFMAlterVol      $F6
000B22B6 B12A                       	dc.b	nC4, $2A
000B22B8 E60A                       	smpsFMAlterVol      $0A
000B22BA 06                         	dc.b	$06
000B22BB E6F6                       	smpsFMAlterVol      $F6
000B22BD B12A                       	dc.b	nC4, $2A
000B22BF E60A                       	smpsFMAlterVol      $0A
000B22C1 06                         	dc.b	$06
000B22C2 E6F6                       	smpsFMAlterVol      $F6
000B22C4 B12A                       	dc.b	nC4, $2A
000B22C6 E60A                       	smpsFMAlterVol      $0A
000B22C8 06                         	dc.b	$06
000B22C9 E6F6                       	smpsFMAlterVol      $F6
000B22CB B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B22CF E60A                       	smpsFMAlterVol      $0A
000B22D1 06                         	dc.b	$06
000B22D2 E6F6                       	smpsFMAlterVol      $F6
000B22D4 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B22D8 E9F4                       	smpsAlterPitch      $F4
000B22DA F8FE C8                    	smpsCall            Tribute_Call03
000B22DD E90C                       	smpsAlterPitch      $0C
000B22DF F2                         	smpsStop
000B22E0                            
000B22E0                            Tribute_Call02:
000B22E0 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B22E6 E60A                       	smpsFMAlterVol      $0A
000B22E8 0680                       	dc.b	$06, nRst
000B22EA E6F6                       	smpsFMAlterVol      $F6
000B22EC B3                         	dc.b	nD4
000B22ED E60A                       	smpsFMAlterVol      $0A
000B22EF 0680                       	dc.b	$06, nRst
000B22F1 E6F6                       	smpsFMAlterVol      $F6
000B22F3 B1B1                       	dc.b	nC4, nC4
000B22F5 E60A                       	smpsFMAlterVol      $0A
000B22F7 06                         	dc.b	$06
000B22F8 E6F6                       	smpsFMAlterVol      $F6
000B22FA AE                         	dc.b	nA3
000B22FB E60A                       	smpsFMAlterVol      $0A
000B22FD 06                         	dc.b	$06
000B22FE E6F6                       	smpsFMAlterVol      $F6
000B2300 B0                         	dc.b	nB3
000B2301 E3                         	smpsReturn
000B2302                            
000B2302                            ; FM4 Data
000B2302                            Tribute_FM4:
000B2302 EF01                       	smpsSetvoice        $01
000B2304 AC12 06                    	dc.b	nG3, $12, $06
000B2307 E60A                       	smpsFMAlterVol      $0A
000B2309 0680                       	dc.b	$06, nRst
000B230B E6F6                       	smpsFMAlterVol      $F6
000B230D AF                         	dc.b	nBb3
000B230E E60A                       	smpsFMAlterVol      $0A
000B2310 0680                       	dc.b	$06, nRst
000B2312 E6F6                       	smpsFMAlterVol      $F6
000B2314 ACAC                       	dc.b	nG3, nG3
000B2316 E60A                       	smpsFMAlterVol      $0A
000B2318 06                         	dc.b	$06
000B2319 E6F6                       	smpsFMAlterVol      $F6
000B231B AA                         	dc.b	nF3
000B231C E60A                       	smpsFMAlterVol      $0A
000B231E 06                         	dc.b	$06
000B231F E6F6                       	smpsFMAlterVol      $F6
000B2321 AC                         	dc.b	nG3
000B2322 EF02                       	smpsSetvoice        $02
000B2324 E918                       	smpsAlterPitch      $18
000B2326 E040                       	smpsPan             panRight, $00
000B2328 F800 00                    	smpsCall            Tribute_Call01
000B232B EF01                       	smpsSetvoice        $01
000B232D E9E8                       	smpsAlterPitch      $E8
000B232F E0C0                       	smpsPan             panCenter, $00
000B2331 F800 00                    	smpsCall            Tribute_Call01
000B2334 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B233C E60A                       	smpsFMAlterVol      $0A
000B233E 06                         	dc.b	$06
000B233F E6F6                       	smpsFMAlterVol      $F6
000B2341 AC12 06                    	dc.b	nG3, $12, $06
000B2344 E60A                       	smpsFMAlterVol      $0A
000B2346 0680                       	dc.b	$06, nRst
000B2348 E6F6                       	smpsFMAlterVol      $F6
000B234A AF                         	dc.b	nBb3
000B234B E60A                       	smpsFMAlterVol      $0A
000B234D 0680                       	dc.b	$06, nRst
000B234F E6F6                       	smpsFMAlterVol      $F6
000B2351 ACAC                       	dc.b	nG3, nG3
000B2353 E60A                       	smpsFMAlterVol      $0A
000B2355 06                         	dc.b	$06
000B2356 E6F6                       	smpsFMAlterVol      $F6
000B2358 AA                         	dc.b	nF3
000B2359 E60A                       	smpsFMAlterVol      $0A
000B235B 06                         	dc.b	$06
000B235C E6F6                       	smpsFMAlterVol      $F6
000B235E AC                         	dc.b	nG3
000B235F EF02                       	smpsSetvoice        $02
000B2361 E918                       	smpsAlterPitch      $18
000B2363 E040                       	smpsPan             panRight, $00
000B2365 F800 00                    	smpsCall            Tribute_Call01
000B2368 EF01                       	smpsSetvoice        $01
000B236A E9E8                       	smpsAlterPitch      $E8
000B236C E0C0                       	smpsPan             panCenter, $00
000B236E F800 00                    	smpsCall            Tribute_Call01
000B2371 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2379                            
000B2379                            Tribute_Loop02:
000B2379 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B237D E60A                       	smpsFMAlterVol      $0A
000B237F 06                         	dc.b	$06
000B2380 E6F6                       	smpsFMAlterVol      $F6
000B2382 0C                         	dc.b	$0C
000B2383 E60A                       	smpsFMAlterVol      $0A
000B2385 06                         	dc.b	$06
000B2386 E6F6                       	smpsFMAlterVol      $F6
000B2388 06                         	dc.b	$06
000B2389 E60A                       	smpsFMAlterVol      $0A
000B238B 06                         	dc.b	$06
000B238C E6F6                       	smpsFMAlterVol      $F6
000B238E 06                         	dc.b	$06
000B238F E60A                       	smpsFMAlterVol      $0A
000B2391 06                         	dc.b	$06
000B2392 E6F6                       	smpsFMAlterVol      $F6
000B2394 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B2397 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B239C 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B23A0 E60A                       	smpsFMAlterVol      $0A
000B23A2 06                         	dc.b	$06
000B23A3 E6F6                       	smpsFMAlterVol      $F6
000B23A5 0C                         	dc.b	$0C
000B23A6 E60A                       	smpsFMAlterVol      $0A
000B23A8 06                         	dc.b	$06
000B23A9 E6F6                       	smpsFMAlterVol      $F6
000B23AB 06                         	dc.b	$06
000B23AC E60A                       	smpsFMAlterVol      $0A
000B23AE 06                         	dc.b	$06
000B23AF E6F6                       	smpsFMAlterVol      $F6
000B23B1 06                         	dc.b	$06
000B23B2 E60A                       	smpsFMAlterVol      $0A
000B23B4 06                         	dc.b	$06
000B23B5 E6F6                       	smpsFMAlterVol      $F6
000B23B7 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B23BE E60A                       	smpsFMAlterVol      $0A
000B23C0 06                         	dc.b	$06
000B23C1 E6F6                       	smpsFMAlterVol      $F6
000B23C3 0C                         	dc.b	$0C
000B23C4 E60A                       	smpsFMAlterVol      $0A
000B23C6 06                         	dc.b	$06
000B23C7 E6F6                       	smpsFMAlterVol      $F6
000B23C9 06                         	dc.b	$06
000B23CA E60A                       	smpsFMAlterVol      $0A
000B23CC 06                         	dc.b	$06
000B23CD E6F6                       	smpsFMAlterVol      $F6
000B23CF 06                         	dc.b	$06
000B23D0 E60A                       	smpsFMAlterVol      $0A
000B23D2 06                         	dc.b	$06
000B23D3 E6F6                       	smpsFMAlterVol      $F6
000B23D5 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B23DB F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B23E0 AC1E                       	dc.b	nG3, $1E
000B23E2 E60A                       	smpsFMAlterVol      $0A
000B23E4 06                         	dc.b	$06
000B23E5 E6F6                       	smpsFMAlterVol      $F6
000B23E7 AD2A                       	dc.b	nAb3, $2A
000B23E9 E60A                       	smpsFMAlterVol      $0A
000B23EB 06                         	dc.b	$06
000B23EC E6F6                       	smpsFMAlterVol      $F6
000B23EE AC2A                       	dc.b	nG3, $2A
000B23F0 E60A                       	smpsFMAlterVol      $0A
000B23F2 06                         	dc.b	$06
000B23F3 E6F6                       	smpsFMAlterVol      $F6
000B23F5 AE2A                       	dc.b	nA3, $2A
000B23F7 E60A                       	smpsFMAlterVol      $0A
000B23F9 06                         	dc.b	$06
000B23FA E6F6                       	smpsFMAlterVol      $F6
000B23FC AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B2400 E60A                       	smpsFMAlterVol      $0A
000B2402 06                         	dc.b	$06
000B2403 E6F6                       	smpsFMAlterVol      $F6
000B2405 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B240B F2                         	smpsStop
000B240C                            
000B240C                            Tribute_Call01:
000B240C AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B2412 E60A                       	smpsFMAlterVol      $0A
000B2414 0680                       	dc.b	$06, nRst
000B2416 E6F6                       	smpsFMAlterVol      $F6
000B2418 AF                         	dc.b	nBb3
000B2419 E60A                       	smpsFMAlterVol      $0A
000B241B 0680                       	dc.b	$06, nRst
000B241D E6F6                       	smpsFMAlterVol      $F6
000B241F ACAC                       	dc.b	nG3, nG3
000B2421 E60A                       	smpsFMAlterVol      $0A
000B2423 06                         	dc.b	$06
000B2424 E6F6                       	smpsFMAlterVol      $F6
000B2426 AA                         	dc.b	nF3
000B2427 E60A                       	smpsFMAlterVol      $0A
000B2429 06                         	dc.b	$06
000B242A E6F6                       	smpsFMAlterVol      $F6
000B242C AC                         	dc.b	nG3
000B242D E3                         	smpsReturn
000B242E                            
000B242E                            ; FM5 Data
000B242E                            Tribute_FM5:
000B242E EF02                       	smpsSetvoice        $02
000B2430                            
000B2430                            Tribute_Jump00:
000B2430 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B243C 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B2448 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B2454 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B2460                            
000B2460                            Tribute_Loop01:
000B2460 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B246C BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B2478 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B2484 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B2490 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B249C 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B24A8 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B24AC F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B24B1 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B24BD 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B24C9 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B24D5 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B24DF E918                       	smpsAlterPitch      $18
000B24E1 F8FB 98                    	smpsCall            Tribute_Call00
000B24E4 E9E8                       	smpsAlterPitch      $E8
000B24E6 F2                         	smpsStop
000B24E7                            
000B24E7                            ; FM6 Data
000B24E7                            Tribute_FM6:
000B24E7 EF02                       	smpsSetvoice        $02
000B24E9 E040                       	smpsPan             panRight, $00
000B24F0 E104                       	smpsAlterNote       $04
000B24F2 8006                       	dc.b	nRst, $06
000B24F4 F6FF 3A                    	smpsJump            Tribute_Jump00
000B24F7                            
000B24F7                            ; PSG1 Data
000B24F7                            Tribute_PSG1:
000B24F7 F505                       	smpsPSGvoice        sTone_09
000B24FE A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B250A E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2519 ECFD                       	smpsPSGAlterVol     $FD
000B251B                            
000B251B                            Tribute_Jump01:
000B251B F505                       	smpsPSGvoice        sTone_09
000B251D F800 00                    	smpsCall            Tribute_Call07
000B2520 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B252C B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B2535 F800 00                    	smpsCall            Tribute_Call07
000B2538 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B2544 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B2550 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B255C B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B2568 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B2574 E918                       	smpsAlterPitch      $18
000B2576 F8FB 03                    	smpsCall            Tribute_Call00
000B2579 E9E8                       	smpsAlterPitch      $E8
000B257B F2                         	smpsStop
000B257C                            
000B257C                            Tribute_Call07:
000B257C B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B2588 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B2594 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B25A0 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B25AC 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B25B8 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B25C4 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B25CD E3                         	smpsReturn
000B25CE                            
000B25CE                            ; PSG2 Data
000B25CE                            Tribute_PSG2:
000B25CE F505                       	smpsPSGvoice        sTone_09
000B25D5 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B25E1 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B25EB ECFF                       	smpsPSGAlterVol     $FF
000B25F2 8006                       	dc.b	nRst, $06
000B25F4 F6FF 25                    	smpsJump            Tribute_Jump01
000B25F7                            
000B25F7                            ; PSG3 Data
000B25F7                            Tribute_PSG3:
000B25F7 F3E7                       	smpsPSGform         $E7
000B25F9 F502                       	smpsPSGvoice        sTone_02
000B25FB AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B2602 F501                       	smpsPSGvoice        sTone_05
000B2604 0680 18                    	dc.b	$06, nRst, $18
000B2607 F502                       	smpsPSGvoice        sTone_02
000B2609 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B260D F501                       	smpsPSGvoice        sTone_05
000B260F 06                         	dc.b	$06
000B2610 F502                       	smpsPSGvoice        sTone_02
000B2612 06                         	dc.b	$06
000B2613 F501                       	smpsPSGvoice        sTone_05
000B2615 06                         	dc.b	$06
000B2616 F502                       	smpsPSGvoice        sTone_02
000B2618 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B2620 F501                       	smpsPSGvoice        sTone_05
000B2622 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B2627 F502                       	smpsPSGvoice        sTone_02
000B2629 06                         	dc.b	$06
000B262A F501                       	smpsPSGvoice        sTone_05
000B262C 06                         	dc.b	$06
000B262D F502                       	smpsPSGvoice        sTone_02
000B262F 06                         	dc.b	$06
000B2630 F501                       	smpsPSGvoice        sTone_05
000B2632 06                         	dc.b	$06
000B2633 F502                       	smpsPSGvoice        sTone_02
000B2635 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B2639 F501                       	smpsPSGvoice        sTone_05
000B263B 06                         	dc.b	$06
000B263C F502                       	smpsPSGvoice        sTone_02
000B263E 06                         	dc.b	$06
000B263F F501                       	smpsPSGvoice        sTone_05
000B2641 06                         	dc.b	$06
000B2642 F502                       	smpsPSGvoice        sTone_02
000B2644 0C                         	dc.b	$0C
000B2645 F502                       	smpsPSGvoice        sTone_02
000B2647 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B264E F501                       	smpsPSGvoice        sTone_05
000B2650 06                         	dc.b	$06
000B2651 F502                       	smpsPSGvoice        sTone_02
000B2653 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B2659 F501                       	smpsPSGvoice        sTone_05
000B265B 06                         	dc.b	$06
000B265C F502                       	smpsPSGvoice        sTone_02
000B265E 06                         	dc.b	$06
000B265F F501                       	smpsPSGvoice        sTone_05
000B2661 06                         	dc.b	$06
000B2662 F502                       	smpsPSGvoice        sTone_02
000B2664 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B266C F501                       	smpsPSGvoice        sTone_05
000B266E 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B2672                            
000B2672                            Tribute_Loop06:
000B2672 F800 00                    	smpsCall            Tribute_Call06
000B2675 800C                       	dc.b	nRst, $0C
000B2677 F502                       	smpsPSGvoice        sTone_02
000B2679 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B2681 F800 00                    	smpsCall            Tribute_Call06
000B2684 800C                       	dc.b	nRst, $0C
000B2686 F502                       	smpsPSGvoice        sTone_02
000B2688 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B268E F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B2693 E718                       	dc.b	smpsNoAttack, $18
000B2695 F502                       	smpsPSGvoice        sTone_02
000B2697 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B26A3 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B26A4 F2                         	smpsStop
000B26A5                            
000B26A5                            Tribute_Call06:
000B26A5 F502                       	smpsPSGvoice        sTone_02
000B26A7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B26AF F501                       	smpsPSGvoice        sTone_05
000B26B1 06                         	dc.b	$06
000B26B2 F502                       	smpsPSGvoice        sTone_02
000B26B4 06                         	dc.b	$06
000B26B5 F501                       	smpsPSGvoice        sTone_05
000B26B7 0680 0C                    	dc.b	$06, nRst, $0C
000B26BA F502                       	smpsPSGvoice        sTone_02
000B26BC AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B26C5 F502                       	smpsPSGvoice        sTone_02
000B26C7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B26CF F501                       	smpsPSGvoice        sTone_05
000B26D1 06                         	dc.b	$06
000B26D2 F502                       	smpsPSGvoice        sTone_02
000B26D4 06                         	dc.b	$06
000B26D5 F501                       	smpsPSGvoice        sTone_05
000B26D7 06                         	dc.b	$06
000B26D8 E3                         	smpsReturn
000B26D9                            
000B26D9                            ; DAC Data
000B26D9                            Tribute_DAC:
000B26D9 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B26E3 E690                       	smpsFMAlterVol      $90
000B26E5 8A0C                       	dc.b	dLowTimpani, $0C
000B26E7 E670                       	smpsFMAlterVol      $70
000B26E9 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B26F1 E6F9                       	smpsFMAlterVol      $F9
000B26F3 88                         	dc.b	dHiTimpani
000B26F4 E607                       	smpsFMAlterVol      $07
000B26F6 8982                       	dc.b	dMidTimpani, dSnare
000B26F8 E690                       	smpsFMAlterVol      $90
000B26FA 8A                         	dc.b	dLowTimpani
000B26FB E670                       	smpsFMAlterVol      $70
000B26FD 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B2709 06                         	dc.b	$06
000B270A E690                       	smpsFMAlterVol      $90
000B270C 8A0C                       	dc.b	dLowTimpani, $0C
000B270E E670                       	smpsFMAlterVol      $70
000B2710 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B271A                            
000B271A                            Tribute_Loop00:
000B271A 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B2726 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B272C E6F9                       	smpsFMAlterVol      $F9
000B272E 88                         	dc.b	dHiTimpani
000B272F E607                       	smpsFMAlterVol      $07
000B2731 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B273D 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B2744 E607                       	smpsFMAlterVol      $07
000B2746 88                         	dc.b	dHiTimpani
000B2747 E6F9                       	smpsFMAlterVol      $F9
000B2749 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B274F F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B2754 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B2758 E6F9                       	smpsFMAlterVol      $F9
000B275A 8804                       	dc.b	dHiTimpani, $04
000B275C E607                       	smpsFMAlterVol      $07
000B275E 89                         	dc.b	dMidTimpani
000B275F E690                       	smpsFMAlterVol      $90
000B2761 8A                         	dc.b	dLowTimpani
000B2762 E670                       	smpsFMAlterVol      $70
000B2764 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B2770 6081 36                    	dc.b	$60, dKick, $36
000B2773 E6F9                       	smpsFMAlterVol      $F9
000B2775 8806                       	dc.b	dHiTimpani, $06
000B2777 E607                       	smpsFMAlterVol      $07
000B2779 89                         	dc.b	dMidTimpani
000B277A E690                       	smpsFMAlterVol      $90
000B277C 8A                         	dc.b	dLowTimpani
000B277D E670                       	smpsFMAlterVol      $70
000B277F 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B278B 8182                       	dc.b	dKick, dSnare
000B278D E6F9                       	smpsFMAlterVol      $F9
000B278F 88                         	dc.b	dHiTimpani
000B2790 E607                       	smpsFMAlterVol      $07
000B2792 8982                       	dc.b	dMidTimpani, dSnare
000B2794 E690                       	smpsFMAlterVol      $90
000B2796 8A                         	dc.b	dLowTimpani
000B2797 E670                       	smpsFMAlterVol      $70
000B2799 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B27A0 E690                       	smpsFMAlterVol      $90
000B27A2 8A                         	dc.b	dLowTimpani
000B27A3 E670                       	smpsFMAlterVol      $70
000B27A5 8281                       	dc.b	dSnare, dKick
000B27A7 F2                         	smpsStop
000B27A8                            
000B27A8                            Tribute_Voices:
000B27A8                            ;	Voice $00
000B27A8                            ;	$3B
000B27A8                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B27A8                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B27A8                            	smpsVcAlgorithm     $03
000B27A8                            	smpsVcFeedback      $07
000B27A8                            	smpsVcUnusedBits    $00
000B27A8                            	smpsVcDetune        $00, $00, $03, $05
000B27A8                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B27A8                            	smpsVcRateScale     $02, $01, $02, $03
000B27A8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B27A8                            	smpsVcAmpMod        $00, $00, $00, $00
000B27A8                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B27A8                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B27A8                            	smpsVcDecayLevel    $05, $03, $07, $05
000B27A8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B27C1                            
000B27C1                            ;	Voice $01
000B27C1                            ;	$3D
000B27C1                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B27C1                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B27C1                            	smpsVcAlgorithm     $05
000B27C1                            	smpsVcFeedback      $07
000B27C1                            	smpsVcUnusedBits    $00
000B27C1                            	smpsVcDetune        $00, $00, $00, $05
000B27C1                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B27C1                            	smpsVcRateScale     $00, $00, $00, $02
000B27C1                            	smpsVcAttackRate    $19, $19, $19, $14
000B27C1                            	smpsVcAmpMod        $00, $00, $00, $00
000B27C1                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B27C1                            	smpsVcDecayRate2    $04, $04, $04, $07
000B27C1                            	smpsVcDecayLevel    $01, $01, $01, $03
000B27C1                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B27DA                            
000B27DA                            ;	Voice $02
000B27DA                            ;	$1F
000B27DA                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B27DA                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B27DA                            	smpsVcAlgorithm     $07
000B27DA                            	smpsVcFeedback      $03
000B27DA                            	smpsVcUnusedBits    $00
000B27DA                            	smpsVcDetune        $01, $00, $03, $02
000B27DA                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B27DA                            	smpsVcRateScale     $02, $02, $02, $02
000B27DA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B27DA                            	smpsVcAmpMod        $00, $00, $00, $00
000B27DA                            	smpsVcDecayRate1    $07, $09, $07, $06
000B27DA                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B27DA                            	smpsVcDecayLevel    $09, $09, $09, $09
000B27DA                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B27F3                            
000B27F3                            
000B27F4 00                         		even		
000B27F4                            ; ---------------------------------------------------------------------------
000B27F4                            ; Sound	effect pointers
000B27F4                            ; ---------------------------------------------------------------------------
000B27F4                            SoundIndex:
000B27F4 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B27F8 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B27FC 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B2800 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B2804 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B2808 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B280C 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B2810 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B2814 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B2818 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B281C 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B2820 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B2824 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B2828 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B282C 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B2830 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B2834 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B2838 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B283C 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B2840 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B2844 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B2848 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B284C 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B2850 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B2854 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B2858 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B285C 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B2860 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B2864 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B2868 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B286C 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B2870 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B2874 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B2878 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B287C 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B2880 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B2884 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B2888 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B288C 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B2890 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B2894 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B2898 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B289C 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B28A0 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B28A4 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B28A8 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B28AC 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B28B0 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B28B4                            ptr_sndend
000B28B4                            ; ---------------------------------------------------------------------------
000B28B4                            ; Special sound effect pointers
000B28B4                            ; ---------------------------------------------------------------------------
000B28B4                            SpecSoundIndex:
000B28B4 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B28B8 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B28BC 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B28C0 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B28C4 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B28C8 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B28CC 0000 0000                  ptr_sndD6:	dc.l SoundD6
000B28D0                            ptr_specend
000B28D0                            SoundA0:	include	"sound/sfx/Jump.asm"
000B28D0                            SndA0_Jump_Header:
000B28D0                            	smpsHeaderStartSong 1
000B28D2 01                         	smpsHeaderTempoSFX  $01
000B28D3 01                         	smpsHeaderChanSFX   $01
000B28D4                            
000B28DA                            
000B28DA                            ; PSG2 Data
000B28DA                            SndA0_Jump_PSG2:
000B28DA F500                       	smpsPSGvoice        $00
000B28DC 9E05                       	dc.b	nF2, $05
000B28E3 A315                       	dc.b	nBb2, $15
000B28E5 F2                         	smpsStop
000B28E6                            
000B28E6                            ; Song seems to not use any FM voices
000B28E6                            SndA0_Jump_Voices:
000B28E6                            SndA0_Jump_Voices:
000B28E6                            		even
000B28E6                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B2910                            		even
000B2910                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B2910                            SndDF_Header:
000B2910                            	smpsHeaderStartSong 3
000B2912 01                         	smpsHeaderTempoSFX  $01
000B2913 01                         	smpsHeaderChanSFX   $01
000B2914                            
000B291A                            
000B291A                            ; FM5 Data
000B291A                            SndDF_FM5:
000B291A EF00                       	smpsSetvoice        $00
000B291C                            
000B291C                            SndDF_Loop00:
000B291C F800 00                    	smpsCall            SndDF_Call00
000B291F E905                       	smpsAlterPitch $05
000B2921 E608                       	smpsFMAlterVol      $08
000B2923 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B2928 E9EC                       	smpsAlterPitch $EC
000B292A E6E0                       	smpsFMAlterVol      $E0
000B292C F2                         	smpsStop
000B292D                            
000B292D                            SndDF_Call00:
000B292D 9902                       	dc.b	nC2, $02
000B292F E901                       	smpsAlterPitch $01
000B2931 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B2936 E9F6                       	smpsAlterPitch $F6
000B2938 E3                         	smpsReturn
000B2939                            
000B2939                            SndDF_Voices:
000B2939                            ;	Voice $00
000B2939                            ;	$07
000B2939                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B2939                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B2939                            	smpsVcAlgorithm     $07
000B2939                            	smpsVcFeedback      $00
000B2939                            	smpsVcUnusedBits    $00
000B2939                            	smpsVcDetune        $00, $00, $00, $00
000B2939                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B2939                            	smpsVcRateScale     $00, $00, $00, $00
000B2939                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B2939                            	smpsVcAmpMod        $00, $00, $00, $00
000B2939                            	smpsVcDecayRate1    $00, $00, $00, $00
000B2939                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2939                            	smpsVcDecayLevel    $01, $01, $01, $01
000B2939                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2952                            		even
000B2952                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B2984                            		even
000B2984                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B29C8 00                         		even
000B29C8                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B29C8                            SndD2_Header:
000B29C8                            	smpsHeaderStartSong 3
000B29CA 01                         	smpsHeaderTempoSFX  $01
000B29CB 01                         	smpsHeaderChanSFX   $01
000B29CC                            
000B29D2                            
000B29D2                            ; FM4 Data
000B29D2                            SndD2_FM4:
000B29D2 EF00                       	smpsSetvoice        $00
000B29D9 C645                       	dc.b	nA5, $45
000B29DB F2                         	smpsStop
000B29DC                            
000B29DC                            SndD2_Voices:
000B29DC                            ;	Voice $00
000B29DC                            ;	$04
000B29DC                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B29DC                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B29DC                            	smpsVcAlgorithm     $04
000B29DC                            	smpsVcFeedback      $00
000B29DC                            	smpsVcUnusedBits    $00
000B29DC                            	smpsVcDetune        $04, $00, $00, $02
000B29DC                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B29DC                            	smpsVcRateScale     $00, $00, $00, $00
000B29DC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B29DC                            	smpsVcAmpMod        $00, $00, $00, $00
000B29DC                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B29DC                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B29DC                            	smpsVcDecayLevel    $00, $01, $00, $01
000B29DC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B29F6 00                         		even
000B29F6                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B2A26                            		even
000B2A26                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B2A56                            		even
000B2A56                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B2A8A                            		even
000B2A8A                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B2A9C                            		even
000B2A9C                            SoundAA:	include	"sound/sfx/Splash.asm"
000B2A9C                            SndA2_Header:
000B2A9C                            	smpsHeaderStartSong 3
000B2A9E 01                         	smpsHeaderTempoSFX  $01
000B2A9F 02                         	smpsHeaderChanSFX   $02
000B2AA0                            
000B2AAC                            
000B2AAC                            ; FM3 Data
000B2AAC                            SndA2_FM3:
000B2AAC EF00                       	smpsSetvoice        $00
000B2AB3 8106                       	dc.b	nC0, $06
000B2AB5                            
000B2AB5                            SndA2_Loop00:
000B2AB5 810E                       	dc.b	nC0, $0E
000B2AB7 E60E                       	smpsAlterVol      $0E
000B2AB9 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B2ABE F2                         	smpsStop
000B2ABF                            
000B2ABF                            ; FM4 Data
000B2ABF                            SndA2_FM4:
000B2ABF EF01                       	smpsSetvoice        $01
000B2AC1 A606 14                    	dc.b	nCs3, $06, $14
000B2AC4 F2                         	smpsStop
000B2AC5                            
000B2AC5                            SndA2_Voices:
000B2AC5                            ;	Voice $00
000B2AC5                            ;	$F9
000B2AC5                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B2AC5                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B2AC5                            	smpsVcAlgorithm     $01
000B2AC5                            	smpsVcFeedback      $07
000B2AC5                            	smpsVcUnusedBits    $03
000B2AC5                            	smpsVcDetune        $03, $01, $03, $02
000B2AC5                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B2AC5                            	smpsVcRateScale     $00, $00, $00, $00
000B2AC5                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B2AC5                            	smpsVcAmpMod        $00, $00, $00, $00
000B2AC5                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2AC5                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2AC5                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2AC5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2ADE                            
000B2ADE                            ;	Voice $01
000B2ADE                            ;	$00
000B2ADE                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B2ADE                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B2ADE                            	smpsVcAlgorithm     $00
000B2ADE                            	smpsVcFeedback      $00
000B2ADE                            	smpsVcUnusedBits    $00
000B2ADE                            	smpsVcDetune        $00, $00, $00, $00
000B2ADE                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B2ADE                            	smpsVcRateScale     $00, $00, $03, $03
000B2ADE                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B2ADE                            	smpsVcAmpMod        $00, $00, $00, $00
000B2ADE                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B2ADE                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B2ADE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2ADE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2AF8 00                         		even
000B2AF8                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B2AF8                            Sound_3E_Header:
000B2AF8                            	smpsHeaderStartSong 3
000B2AFA 01                         	smpsHeaderTempoSFX  $01
000B2AFB 01                         	smpsHeaderChanSFX   $01
000B2AFC                            
000B2B02                            
000B2B02                            ; FM5 Data
000B2B02                            Sound_3E_3F_40_41_FM5:
000B2B02 EF00                       	smpsSetvoice        $00
000B2B04 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B2B09 F2                         	smpsStop
000B2B0A                            
000B2B0A                            Sound_3E_Voices:
000B2B0A                            ;	Voice $00
000B2B0A                            ;	$0C
000B2B0A                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B2B0A                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B2B0A                            	smpsVcAlgorithm     $04
000B2B0A                            	smpsVcFeedback      $01
000B2B0A                            	smpsVcUnusedBits    $00
000B2B0A                            	smpsVcDetune        $03, $03, $02, $00
000B2B0A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B2B0A                            	smpsVcRateScale     $00, $00, $00, $00
000B2B0A                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B2B0A                            	smpsVcAmpMod        $00, $00, $00, $00
000B2B0A                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B2B0A                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B2B0A                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B2B0A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2B23                            
000B2B23                            
000B2B24 00                         		even
000B2B24                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B2B58                            		even
000B2B58                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B2B8E                            		even
000B2B8E                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B2B8E                            Sound_70_Header:
000B2B8E                            	smpsHeaderStartSong 3
000B2B90 01                         	smpsHeaderTempoSFX  $01
000B2B91 02                         	smpsHeaderChanSFX   $02
000B2B92                            
000B2B9E                            
000B2B9E                            ; FM5 Data
000B2B9E                            Sound_70_FM5:
000B2B9E EF00                       	smpsSetvoice        $00
000B2BA0 8001                       	dc.b	nRst, $01
000B2BA7 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B2BAB F2                         	smpsStop
000B2BAC                            
000B2BAC                            ; PSG3 Data
000B2BAC                            Sound_70_PSG3:
000B2BAC F500                       	smpsPSGvoice        sTone_0D
000B2BAE 800B                       	dc.b	nRst, $0B
000B2BB0 F3E7                       	smpsPSGform         $E7
000B2BB2 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B2BB5                            
000B2BB5                            Sound_70_Loop00:
000B2BB5 02                         	dc.b	$02
000B2BB6 EC01                       	smpsPSGAlterVol     $01
000B2BB8 E7                         	dc.b	smpsNoAttack
000B2BB9 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B2BBE F2                         	smpsStop
000B2BBF                            
000B2BBF                            Sound_70_Voices:
000B2BBF                            ;	Voice $00
000B2BBF                            ;	$FA
000B2BBF                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B2BBF                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B2BBF                            	smpsVcAlgorithm     $02
000B2BBF                            	smpsVcFeedback      $07
000B2BBF                            	smpsVcUnusedBits    $03
000B2BBF                            	smpsVcDetune        $00, $00, $00, $00
000B2BBF                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B2BBF                            	smpsVcRateScale     $00, $00, $00, $00
000B2BBF                            	smpsVcAttackRate    $13, $0F, $11, $12
000B2BBF                            	smpsVcAmpMod        $00, $00, $00, $00
000B2BBF                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2BBF                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B2BBF                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2BBF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2BD8                            
000B2BD8                            
000B2BD8                            		even
000B2BD8                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B2C06                            		even
000B2C06                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B2C38                            		even
000B2C38                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B2C64                            		even
000B2C64                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B2CB4                            		even
000B2CB4                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B2CFE                            		even
000B2CFE                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B2D5A                            		even
000B2D5A                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B2D88                            		even
000B2D88                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B2D88                            SpikesSFX_Header:
000B2D88                            	smpsHeaderStartSong 3
000B2D8A 01                         	smpsHeaderTempoSFX  $01
000B2D8B 02                         	smpsHeaderChanSFX   $02
000B2D8C                            
000B2D98                            
000B2D98                            ; FM6 Data
000B2D98                            SndB7_FM3:
000B2D98 EF01                       	smpsSetvoice        $01
000B2D9F B105                       	dc.b	nC4, $05
000B2DA1 F1                         	smpsModOn
000B2DA2 E10A                       	smpsAlterNote       $0A
000B2DA4 E601                       	smpsAlterVol        $01
000B2DA6 F2                         	smpsStop
000B2DA7                            
000B2DA7                            ; FM5 Data
000B2DA7                            SndB7_FM5:
000B2DA7 8005                       	dc.b	nRst, $05			 
000B2DA9 EF00                       	smpsSetvoice        $00
000B2DAB DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B2DB1 F2                         	smpsStop
000B2DB2                            
000B2DB2                            SndB7_Voices:
000B2DB2                            ;	Voice $00
000B2DB2                            ;	$34
000B2DB2                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B2DB2                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B2DB2                            	smpsVcAlgorithm     $04
000B2DB2                            	smpsVcFeedback      $06
000B2DB2                            	smpsVcUnusedBits    $00
000B2DB2                            	smpsVcDetune        $0D, $00, $00, $00
000B2DB2                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B2DB2                            	smpsVcRateScale     $00, $00, $00, $00
000B2DB2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2DB2                            	smpsVcAmpMod        $00, $00, $00, $00
000B2DB2                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B2DB2                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B2DB2                            	smpsVcDecayLevel    $03, $05, $01, $03
000B2DB2                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B2DCB                            
000B2DCB                            ;	Voice $01
000B2DCB                            ;	$FA
000B2DCB                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B2DCB                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B2DCB                            	smpsVcAlgorithm     $02
000B2DCB                            	smpsVcFeedback      $07
000B2DCB                            	smpsVcUnusedBits    $03
000B2DCB                            	smpsVcDetune        $03, $01, $03, $02
000B2DCB                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B2DCB                            	smpsVcRateScale     $00, $00, $00, $00
000B2DCB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2DCB                            	smpsVcAmpMod        $00, $00, $00, $00
000B2DCB                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2DCB                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2DCB                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2DCB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2DE4                            		even
000B2DE4                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B2E20                            		even
000B2E20                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B2E20                            SndBD_Header:
000B2E20                            	smpsHeaderStartSong 3
000B2E22 01                         	smpsHeaderTempoSFX  $01
000B2E23 01                         	smpsHeaderChanSFX   $01
000B2E24                            
000B2E2A                            
000B2E2A                            ; FM6 Data
000B2E2A                            SndBD_FM3:
000B2E2A EF00                       	smpsSetvoice        $00
000B2E2C                            
000B2E2C                            SndBD_Loop00:
000B2E2C C009                       	dc.b	nEb5, $09
000B2E2E F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B2E33 F2                         	smpsStop
000B2E34                            
000B2E34                            SndBD_Voices:
000B2E34                            ;	Voice $00
000B2E34                            ;	$02
000B2E34                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B2E34                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B2E34                            	smpsVcAlgorithm     $02
000B2E34                            	smpsVcFeedback      $00
000B2E34                            	smpsVcUnusedBits    $00
000B2E34                            	smpsVcDetune        $00, $02, $05, $00
000B2E34                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B2E34                            	smpsVcRateScale     $00, $00, $00, $00
000B2E34                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B2E34                            	smpsVcAmpMod        $00, $00, $00, $00
000B2E34                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B2E34                            	smpsVcDecayRate2    $00, $00, $00, $01
000B2E34                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2E34                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2E4E 00                         		even
000B2E4E                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B2E4E                            Sound_59_Header:
000B2E4E                            	smpsHeaderStartSong 3
000B2E50 01                         	smpsHeaderTempoSFX  $01
000B2E51 04                         	smpsHeaderChanSFX   $04
000B2E52                            
000B2E6A                            
000B2E6A                            ; FM3 Data
000B2E6A                            Sound_59_FM3:
000B2E6A E040                       	smpsPan             panRight, $00
000B2E6C 8002                       	dc.b	nRst, $02
000B2E6E F600 00                    	smpsJump            Sound_59_FM4
000B2E71                            
000B2E71                            ; FM5 Data
000B2E71                            Sound_59_FM5:
000B2E71 E080                       	smpsPan             panLeft, $00
000B2E73 8001                       	dc.b	nRst, $01
000B2E75                            
000B2E75                            ; FM4 Data
000B2E75                            Sound_59_FM4:
000B2E75 EF00                       	smpsSetvoice        $00
000B2E7C 8110                       	dc.b	nC0, $10
000B2E7E F2                         	smpsStop
000B2E7F                            
000B2E7F                            ; PSG3 Data
000B2E7F                            Sound_59_PSG3:
000B2E84 F3E7                       	smpsPSGform         $E7
000B2E86                            
000B2E86                            Sound_59_Loop00:
000B2E86 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B2E89 EC03                       	smpsPSGAlterVol     $03
000B2E8B F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B2E90 F2                         	smpsStop
000B2E91                            
000B2E91                            Sound_59_Voices:
000B2E91                            ;	Voice $00
000B2E91                            ;	$F9
000B2E91                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B2E91                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B2E91                            	smpsVcAlgorithm     $01
000B2E91                            	smpsVcFeedback      $07
000B2E91                            	smpsVcUnusedBits    $03
000B2E91                            	smpsVcDetune        $03, $01, $03, $02
000B2E91                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B2E91                            	smpsVcRateScale     $00, $00, $00, $00
000B2E91                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2E91                            	smpsVcAmpMod        $00, $00, $00, $00
000B2E91                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2E91                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2E91                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2E91                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2EAA                            
000B2EAA                            
000B2EAA                            		even
000B2EAA                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B2ED2                            		even
000B2ED2                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B2EFE                            		even
000B2EFE                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B2EFE                            Sound_B6_Header:
000B2EFE                            	smpsHeaderStartSong 3
000B2F00 01                         	smpsHeaderTempoSFX  $01
000B2F01 02                         	smpsHeaderChanSFX   $02
000B2F02                            
000B2F0E                            
000B2F0E                            ; FM5 Data
000B2F0E                            Sound_B6_FM5:
000B2F0E EF00                       	smpsSetvoice        $00
000B2F15 CD0F                       	dc.b	nE6, $0F
000B2F17 F2                         	smpsStop
000B2F18                            
000B2F18                            ; PSG3 Data
000B2F18                            Sound_B6_PSG3:
000B2F18 F507                       	smpsPSGvoice        sTone_1D
000B2F1A 8006                       	dc.b	nRst, $06
000B2F21 F3E7                       	smpsPSGform         $E7
000B2F23 CD4F                       	dc.b	nE6, $4F
000B2F25 F2                         	smpsStop
000B2F26                            
000B2F26                            Sound_B6_Voices:
000B2F26                            ;	Voice $00
000B2F26                            ;	$3D
000B2F26                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B2F26                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B2F26                            	smpsVcAlgorithm     $05
000B2F26                            	smpsVcFeedback      $07
000B2F26                            	smpsVcUnusedBits    $00
000B2F26                            	smpsVcDetune        $00, $00, $00, $00
000B2F26                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B2F26                            	smpsVcRateScale     $00, $00, $00, $00
000B2F26                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2F26                            	smpsVcAmpMod        $00, $00, $00, $00
000B2F26                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B2F26                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2F26                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2F26                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2F3F                            
000B2F3F                            
000B2F40 00                         		even
000B2F40                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B2F94                            		even
000B2F94                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B2FCE                            		even
000B2FCE                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B3040                            		even
000B3040                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B306E                            		even
000B306E                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B30A8                            		even
000B30A8                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B30A8                            SndC1_Header:
000B30A8                            	smpsHeaderStartSong 3
000B30AA 01                         	smpsHeaderTempoSFX  $01
000B30AB 01                         	smpsHeaderChanSFX   $01
000B30AC                            
000B30B2                            
000B30B2                            ; FM4 Data
000B30B2                            SndC1_FM4:
000B30B2 EF00                       	smpsSetvoice        $00
000B30B4 D506 40                    	dc.b	nC7, $06, $40
000B30B7 F2                         	smpsStop
000B30B8                            
000B30B8                            SndC1_Voices:
000B30B8                            ;	Voice $00
000B30B8                            ;	$38
000B30B8                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B30B8                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B30B8                            	smpsVcAlgorithm     $00
000B30B8                            	smpsVcFeedback      $07
000B30B8                            	smpsVcUnusedBits    $00
000B30B8                            	smpsVcDetune        $00, $00, $00, $00
000B30B8                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B30B8                            	smpsVcRateScale     $00, $00, $00, $00
000B30B8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B30B8                            	smpsVcAmpMod        $00, $00, $00, $00
000B30B8                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B30B8                            	smpsVcDecayRate2    $00, $00, $00, $00
000B30B8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B30B8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B30D2 00                         		even
000B30D2                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B314C                            		even
000B314C                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B3174                            		even
000B3174                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B3174                            Sound_B0_Header:
000B3174                            	smpsHeaderStartSong 3
000B3176 01                         	smpsHeaderTempoSFX  $01
000B3177 03                         	smpsHeaderChanSFX   $03
000B3178                            
000B318A                            
000B318A                            ; FM5 Data
000B318A                            Sound_B0_FM5:
000B318A EF00                       	smpsSetvoice        $00
000B318C 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B3192 F2                         	smpsStop
000B3193                            
000B3193                            ; FM4 Data
000B3193                            Sound_B0_FM4:
000B3193 EF01                       	smpsSetvoice        $01
000B3195 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B3199 F2                         	smpsStop
000B319A                            
000B319A                            ; FM3 Data
000B319A                            Sound_B0_FM3:
000B319A EF02                       	smpsSetvoice        $02
000B319C 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B31A3 F2                         	smpsStop
000B31A4                            
000B31A4                            Sound_B0_Voices:
000B31A4                            ;	Voice $00
000B31A4                            ;	$3B
000B31A4                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B31A4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B31A4                            	smpsVcAlgorithm     $03
000B31A4                            	smpsVcFeedback      $07
000B31A4                            	smpsVcUnusedBits    $00
000B31A4                            	smpsVcDetune        $00, $00, $00, $00
000B31A4                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B31A4                            	smpsVcRateScale     $02, $00, $00, $00
000B31A4                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B31A4                            	smpsVcAmpMod        $00, $00, $00, $00
000B31A4                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B31A4                            	smpsVcDecayRate2    $00, $00, $00, $00
000B31A4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B31A4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31BD                            
000B31BD                            ;	Voice $01
000B31BD                            ;	$04
000B31BD                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B31BD                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B31BD                            	smpsVcAlgorithm     $04
000B31BD                            	smpsVcFeedback      $00
000B31BD                            	smpsVcUnusedBits    $00
000B31BD                            	smpsVcDetune        $04, $07, $07, $03
000B31BD                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B31BD                            	smpsVcRateScale     $00, $00, $00, $00
000B31BD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B31BD                            	smpsVcAmpMod        $00, $00, $00, $00
000B31BD                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B31BD                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B31BD                            	smpsVcDecayLevel    $00, $01, $00, $01
000B31BD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31D6                            
000B31D6                            ;	Voice $02
000B31D6                            ;	$3C
000B31D6                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B31D6                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B31D6                            	smpsVcAlgorithm     $04
000B31D6                            	smpsVcFeedback      $07
000B31D6                            	smpsVcUnusedBits    $00
000B31D6                            	smpsVcDetune        $00, $00, $00, $00
000B31D6                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B31D6                            	smpsVcRateScale     $00, $00, $00, $00
000B31D6                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B31D6                            	smpsVcAmpMod        $00, $00, $00, $00
000B31D6                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B31D6                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B31D6                            	smpsVcDecayLevel    $02, $09, $09, $01
000B31D6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31EF                            
000B31EF                            
000B31F0 00                         		even
000B31F0                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B3232                            		even
000B3232                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B3260                            		even
000B3260                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B3272                            		even
000B3272                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B32A0                            		even
000B32A0                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B32CE                            		even
000B32CE                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B331A                            		even
000B331A                            SoundCC:	include	"sound/sfx/Spring.asm"
000B331A                            Spring_Header:
000B331A                            	smpsHeaderStartSong 1
000B331C 01                         	smpsHeaderTempoSFX  $01
000B331D 01                         	smpsHeaderChanSFX   $01
000B331E                            
000B3324                            
000B3324                            ; FM6 Data
000B3324                            Spring_FM6:
000B3324 EF00                       	smpsSetvoice        $00
000B3326 8001                       	dc.b	nRst, $01
000B332D B006                       	dc.b	nB3, $06
000B332F F4                         	smpsModOff
000B3330 EF01                       	smpsSetvoice        $01
000B3332                            
000B3332                            Spring_Loop00:
000B3332 BD02                       	dc.b	nC5, $02
000B3334 E601                       	smpsAlterVol      $01
000B3336 E7                         	dc.b	smpsNoAttack
000B3337 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B333C F2                         	smpsStop
000B333D                            
000B333D                            Spring_Voices:
000B333D                            ;	Voice $00
000B333D                            ;	$20
000B333D                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B333D                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B333D                            	smpsVcAlgorithm     $00
000B333D                            	smpsVcFeedback      $04
000B333D                            	smpsVcUnusedBits    $00
000B333D                            	smpsVcDetune        $03, $03, $03, $03
000B333D                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B333D                            	smpsVcRateScale     $02, $02, $03, $03
000B333D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B333D                            	smpsVcAmpMod        $00, $00, $00, $00
000B333D                            	smpsVcDecayRate1    $06, $09, $06, $07
000B333D                            	smpsVcDecayRate2    $08, $06, $06, $07
000B333D                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B333D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3356                            
000B3356                            ;	Voice $01
000B3356                            ;	$20
000B3356                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B3356                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B3356                            	smpsVcAlgorithm     $00
000B3356                            	smpsVcFeedback      $04
000B3356                            	smpsVcUnusedBits    $00
000B3356                            	smpsVcDetune        $03, $03, $03, $03
000B3356                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B3356                            	smpsVcRateScale     $02, $02, $02, $02
000B3356                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3356                            	smpsVcAmpMod        $00, $00, $00, $00
000B3356                            	smpsVcDecayRate1    $06, $09, $06, $07
000B3356                            	smpsVcDecayRate2    $08, $06, $06, $07
000B3356                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B3356                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3370 00                         		even
000B3370                            SoundCD:	include	"sound/sfx/Beep.asm"
000B3370                            Snd99_Header:
000B3370                            	smpsHeaderStartSong 3
000B3372 01                         	smpsHeaderTempoSFX  $01
000B3373 01                         	smpsHeaderChanSFX   $01
000B3374                            
000B337A                            
000B337A                            ; FM4 Data
000B337A                            Snd99_FM4:
000B337A EF00                       	smpsSetvoice        $00
000B337C B502                       	dc.b	nE4, $02
000B337E F2                         	smpsStop
000B337F                            
000B337F                            Snd99_Voices:
000B337F                            ;	Voice $00
000B337F                            ;	$07
000B337F                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B337F                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B337F                            	smpsVcAlgorithm     $07
000B337F                            	smpsVcFeedback      $00
000B337F                            	smpsVcUnusedBits    $00
000B337F                            	smpsVcDetune        $00, $00, $00, $00
000B337F                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B337F                            	smpsVcRateScale     $00, $00, $00, $00
000B337F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B337F                            	smpsVcAmpMod        $00, $00, $00, $00
000B337F                            	smpsVcDecayRate1    $00, $00, $00, $00
000B337F                            	smpsVcDecayRate2    $00, $00, $00, $00
000B337F                            	smpsVcDecayLevel    $00, $00, $00, $00
000B337F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3398                            		even
000B3398                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B33C6                            		even
000B33C6                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B33C6                            SignpostCD_Header:
000B33C6                            	smpsHeaderStartSong 3
000B33C8 01                         	smpsHeaderTempoSFX  $01
000B33C9 02                         	smpsHeaderChanSFX   $02
000B33CA                            
000B33D6                            
000B33D6                            ; FM5 Data
000B33D6                            Snd9D_FM5:
000B33D6 8004                       	dc.b	nRst, $04
000B33D8                            
000B33D8                            ; FM4 Data
000B33D8                            Snd9D_FM4:
000B33D8 EF00                       	smpsSetvoice        $00
000B33DA                            
000B33DA                            Snd9D_Loop00:
000B33DA B405                       	dc.b	nEb4, $05
000B33DC E604                       	smpsFMAlterVol      $04
000B33DE F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B33E3 F2                         	smpsStop
000B33E4                            
000B33E4                            Snd9D_Voices:
000B33E4                            ;	Voice $00
000B33E4                            ;	$F4
000B33E4                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B33E4                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B33E4                            	smpsVcAlgorithm     $04
000B33E4                            	smpsVcFeedback      $06
000B33E4                            	smpsVcUnusedBits    $03
000B33E4                            	smpsVcDetune        $00, $00, $00, $00
000B33E4                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B33E4                            	smpsVcRateScale     $00, $00, $00, $00
000B33E4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B33E4                            	smpsVcAmpMod        $00, $00, $00, $00
000B33E4                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B33E4                            	smpsVcDecayRate2    $08, $05, $00, $00
000B33E4                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B33E4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B33FE 00                         		even
000B33FE                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B3438                            		even
000B3438                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B3438                            Sound_41_Header:
000B3438                            	smpsHeaderStartSong 3
000B343A 01                         	smpsHeaderTempoSFX  $01
000B343B 01                         	smpsHeaderChanSFX   $01
000B343C                            
000B3442                            	
000B3442                            Sound41_FM5:
000B3442 EF00                       	smpsSetvoice        $00
000B3444 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B3449 F2                         	smpsStop
000B344A                            
000B344A                            Sound_41_Voices:
000B344A                            ;	Voice $00
000B344A                            ;	$36
000B344A                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B344A                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B344A                            	smpsVcAlgorithm     $06
000B344A                            	smpsVcFeedback      $06
000B344A                            	smpsVcUnusedBits    $00
000B344A                            	smpsVcDetune        $00, $00, $01, $00
000B344A                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B344A                            	smpsVcRateScale     $00, $00, $00, $00
000B344A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B344A                            	smpsVcAmpMod        $00, $00, $00, $00
000B344A                            	smpsVcDecayRate1    $00, $00, $00, $00
000B344A                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B344A                            	smpsVcDecayLevel    $00, $00, $00, $00
000B344A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3463                            
000B3463                            
000B3464 00                         		even
000B3464                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B3464                            Snd9B_Header:
000B3464                            	smpsHeaderStartSong 3
000B3466 01                         	smpsHeaderTempoSFX  $01
000B3467 01                         	smpsHeaderChanSFX   $01
000B3468                            
000B346E                            
000B346E                            ; FM5 Data
000B346E                            Snd9B_FM5:
000B346E EF00                       	smpsSetvoice        $00
000B3470 8001                       	dc.b	nRst, $01
000B3477 CA25                       	dc.b	nCs6, $25
000B3479 F4                         	smpsModOff
000B347A                            
000B347A                            Snd9B_Loop00:
000B347A E7                         	dc.b	smpsNoAttack
000B347B E601                       	smpsFMAlterVol      $01
000B347D D102                       	dc.b	nAb6, $02
000B347F F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B3484 F2                         	smpsStop
000B3485                            
000B3485                            Snd9B_Voices:
000B3485                            ;	Voice $00
000B3485                            ;	$3C
000B3485                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B3485                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B3485                            	smpsVcAlgorithm     $04
000B3485                            	smpsVcFeedback      $07
000B3485                            	smpsVcUnusedBits    $00
000B3485                            	smpsVcDetune        $00, $00, $04, $00
000B3485                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B3485                            	smpsVcRateScale     $00, $00, $00, $00
000B3485                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B3485                            	smpsVcAmpMod        $00, $00, $00, $00
000B3485                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B3485                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3485                            	smpsVcDecayLevel    $00, $00, $00, $00
000B3485                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B349E                            
000B349E                            
000B349E                            		even		
000B349E                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B3536                            		even
000B3536                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B3542                            		even				
000B3542                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B357E                            		even		
000B357E                            SoundD6:	include	"sound/sfx/Transform.asm"
000B357E                            Sound_9F_Header:
000B357E                            	smpsHeaderStartSong 3
000B3580 01                         	smpsHeaderTempoSFX  $01
000B3581 02                         	smpsHeaderChanSFX   $02
000B3582                            
000B358E                            
000B358E                            ; FM4 Data
000B358E                            Sound_9F_FM4:
000B358E 8003                       	dc.b	nRst, $03
000B3590                            
000B3590                            ; FM5 Data
000B3590                            Sound_9F_FM5:
000B3590 EF00                       	smpsSetvoice        $00
000B3597 AE13                       	dc.b	nA3, $13
000B3599 E614                       	smpsFMAlterVol      $14
000B359B F700 05FF F1               	smpsLoop            $00, $05, Sound_9F_FM5
000B35A0 F2                         	smpsStop
000B35A1                            
000B35A1                            Sound_9F_Voices:
000B35A1                            ;	Voice $00
000B35A1                            ;	$7A
000B35A1                            ;	$1F, $1F, $04, $1F, 	$10, $1F, $18, $10, 	$10, $16, $0C, $00
000B35A1                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$42, $16, $11, $80
000B35A1                            	smpsVcAlgorithm     $02
000B35A1                            	smpsVcFeedback      $07
000B35A1                            	smpsVcUnusedBits    $01
000B35A1                            	smpsVcDetune        $01, $00, $01, $01
000B35A1                            	smpsVcCoarseFreq    $0F, $04, $0F, $0F
000B35A1                            	smpsVcRateScale     $00, $00, $00, $00
000B35A1                            	smpsVcAttackRate    $10, $18, $1F, $10
000B35A1                            	smpsVcAmpMod        $00, $00, $00, $00
000B35A1                            	smpsVcDecayRate1    $00, $0C, $16, $10
000B35A1                            	smpsVcDecayRate2    $02, $02, $02, $02
000B35A1                            	smpsVcDecayLevel    $03, $0F, $02, $02
000B35A1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B35BA                            
000B35BA                            
000B35BA                            		even			
000B35BA                            		; Don't let Sega sample cross $8000-byte boundary
000B35BA                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12FE                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 23B8                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 122E                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 13AC                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 13AC                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 1936                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 4EB9 0001 53AA             		jsr 	LoadSRAMConfig
000BEA28 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA2C                            
000BEA2C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA2C                            
000BEA2C                            ; sub_8FBE:
000BEA2C                            MenuScreenTextToRAM:
000BEA2C 7200                       		moveq	#0,d1
000BEA2E 1219                       		move.b	(a1)+,d1
000BEA30                            
000BEA30                            MenuScreenTextToRAM_Cont:
000BEA30 1019                       		move.b	(a1)+,d0
000BEA32 34C0                       		move.w	d0,(a2)+
000BEA34 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA38 4E75                       		rts
000BEA3A                            ; End of function MenuScreenTextToRAM
000BEA3A                            
000BEA3A                            ; ===========================================================================
000BEA3A                            ; loc_8FCC:
000BEA3A                            MenuScreen_Options:
000BEA3A 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA40 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA46 303C 0070                  		move.w	#$70,d0
000BEA4A 4EB8 1936                  		jsr	EniDec
000BEA4E 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA54 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA5A 303C 2070                  		move.w	#$2070,d0
000BEA5E 4EB8 1936                  		jsr	EniDec
000BEA62 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA66 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA6A 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA6E 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA72 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA76 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA7A 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA7E 4238 F711                  		clr.b	($FFFFF711).w		
000BEA82 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA86                            ;-------------------------------------------------------------------------------
000BEA86 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA8A 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA90 6100 0000                  		bsr.w	Dynamic_Menu
000BEA94                            ;-------------------------------------------------------------------------------
000BEA94 7013                       		moveq	#palid_Options,d0
000BEA96 4EB8 2662                  		jsr		PalLoad1
000BEA9A 103C 0091                  		move.b	#$91,d0
000BEA9E 4EB8 12FE                  		jsr	PlaySound_Special ; play options music
000BEAA2 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA6 42B8 F704                  		clr.l	(v_screenposy).w
000BEAAA 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAB0 4EB8 3CF6                  		jsr	WaitForVBla
000BEAB4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB8 0000 0040                  		ori.b	#$40,d0
000BEABC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEAC2 4EB8 2312                  		jsr	PaletteFadeIn
000BEAC6                            ; loc_9060:
000BEAC6                            OptionScreen_Main:
000BEAC6 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEACC 4EB8 3CF6                  		jsr	WaitForVBla				
000BEAD0 46FC 2700                  		move	#$2700,sr
000BEAD4 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD8 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEADC 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEAE0 46FC 2300                  		move	#$2300,sr
000BEAE4 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAEA 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAEE 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAF4                            
000BEAF4 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF6 60CE                       		bra.s	OptionScreen_Main
000BEAF8                            ; ===========================================================================
000BEAF8                            ; loc_909A:
000BEAF8                            OptionScreen_Select:
000BEAF8 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAFC 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAFE                            		
000BEAFE 13FC 0001 00A1 30F1        		move.b	#1,($A130F1).l			; enable SRAM
000BEB06 43F9 0020 0001             		lea		($200001).l,a1			; base of SRAM
000BEB0C                            		
000BEB0C 1378 FFBF 0001             		move.b	($FFFFFFBF).w, $1(a1)	; save sonic palette
000BEB12 1378 FF8B 0003             		move.b	($FFFFFF8B).w, $3(a1)	; save camera type
000BEB18 13FC 0000 00A1 30F1        		move.b	#0, ($A130F1).l			; disable SRAM
000BEB20                            
000BEB20 7000                       		moveq	#0,d0
000BEB22 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB28 4E75                       		rts
000BEB2A                            ; ===========================================================================
000BEB2A                            ; loc_90B6:
000BEB2A                            OptionScreen_Select_Not1P:
000BEB2A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB30 4E75                       		rts
000BEB32                            ; ===========================================================================
000BEB32                            
000BEB32                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB32                            
000BEB32                            ;sub_90E0:
000BEB32                            OptionScreen_Controls:
000BEB32 7400                       		moveq	#0,d2
000BEB34 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB38 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB3C 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB40 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB42 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB44 6400                       		bcc.s	Option_Controls_Down
000BEB46 143C 0001                  		move.b	#1,d2
000BEB4A                            
000BEB4A                            Option_Controls_Down:
000BEB4A 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB4E 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB50 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB52 0C02 0002                  		cmpi.b	#2,d2
000BEB56 6500                       		blo.s	Option_Controls_Refresh
000BEB58 7400                       		moveq	#0,d2
000BEB5A                            
000BEB5A                            Option_Controls_Refresh:
000BEB5A 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB5E E54A                       		lsl.w	#2,d2
000BEB60 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB64 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB68 3411                       		move.w	(a1),d2
000BEB6A 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB6E 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB70 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB72 6400                       		bcc.s	Option_Controls_Right
000BEB74 1403                       		move.b	d3,d2
000BEB76                            
000BEB76                            Option_Controls_Right:
000BEB76 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB7A 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB7C 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB7E B403                       		cmp.b	d3,d2
000BEB80 6300                       		bls.s	Option_Controls_Button_A
000BEB82 7400                       		moveq	#0,d2
000BEB84                            
000BEB84                            Option_Controls_Button_A:
000BEB84 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB88 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB8A 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB8E B403                       		cmp.b	d3,d2
000BEB90 6300                       		bls.s	Option_Controls_Refresh2
000BEB92 7400                       		moveq	#0,d2
000BEB94                            
000BEB94                            Option_Controls_Refresh2:
000BEB94 3282                       		move.w	d2,(a1)
000BEB96                            
000BEB96                            Option_Controls_NoMove:
000BEB96 4E75                       		rts
000BEB98                            ; End of function OptionScreen_Controls
000BEB98                            
000BEB98                            ; ===========================================================================
000BEB98                            ; word_917A:
000BEB98                            OptionScreen_Choices:
000BEB98 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB9C 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEBA0                            		even
000BEBA0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEBA0                            
000BEBA0                            
000BEBA0                            OptionScreen_DrawSelected:
000BEBA0 6100 0000                  		bsr.w	loc_9268
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E749                       		lsl.w	#3,d1
000BEBAC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBB2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBB6 303C 6000                  		move.w	#$6000,d0
000BEBBA 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEBC0 225B                       		movea.l	(a3)+,a1
000BEBC2 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC6 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBCC 7200                       		moveq	#0,d1
000BEBCE 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBD2 E549                       		lsl.w	#2,d1
000BEBD4 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBD8 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBDC 3211                       		move.w	(a1),d1
000BEBDE E549                       		lsl.w	#2,d1
000BEBE0                            
000BEBE0                            loc_9186:		
000BEBE0 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBE4 6100 FE46                  		bsr.w	MenuScreenTextToRAM
000BEBE8                            		;cmpi.b	#2,(Options_menu_box).w
000BEBE8                            		;bne.s	loc2_9186
000BEBE8                            		;lea	($FFFF00C2).l,a2
000BEBE8                            		;bsr.w	loc_9296
000BEBE8                            
000BEBE8                            loc2_9186:		
000BEBE8 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBEE 201B                       		move.l	(a3)+,d0
000BEBF0 7215                       		moveq	#$15,d1
000BEBF2 7407                       		moveq	#7,d2
000BEBF4 4EF8 1382                  		jmp	TilemapToVRAM
000BEBF8                            ; ===========================================================================
000BEBF8                            
000BEBF8                            OptionScreen_DrawUnselected:
000BEBF8 6100 0000                  		bsr.w	loc_9268
000BEBFC 7200                       		moveq	#0,d1
000BEBFE 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC02 E749                       		lsl.w	#3,d1
000BEC04 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEC0A 47F3 1000                  		lea	(a3,d1.w),a3
000BEC0E 7000                       		moveq	#0,d0
000BEC10 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEC16 225B                       		movea.l	(a3)+,a1
000BEC18 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC1C 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEC22 7200                       		moveq	#0,d1
000BEC24                            		;cmpi.b	#2,(Options_menu_box).w
000BEC24                            		;beq.s	loc2_91F8
000BEC24 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC28 E549                       		lsl.w	#2,d1
000BEC2A 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC2E 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC32 3211                       		move.w	(a1),d1
000BEC34 E549                       		lsl.w	#2,d1
000BEC36                            
000BEC36                            loc2_91F8		
000BEC36 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC3A 6100 FDF0                  		bsr.w	MenuScreenTextToRAM
000BEC3E                            		;cmpi.b	#2,(Options_menu_box).w
000BEC3E                            		;bne.s	loc3_91F8
000BEC3E                            		;lea	($FFFF0222).l,a2
000BEC3E                            		;bsr.w	loc_9296
000BEC3E                            
000BEC3E                            loc3_91F8		
000BEC3E 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC44 201B                       		move.l	(a3)+,d0
000BEC46 7215                       		moveq	#$15,d1
000BEC48 7407                       		moveq	#7,d2
000BEC4A 4EF8 1382                  		jmp	TilemapToVRAM
000BEC4E                            ; ===========================================================================
000BEC4E                            
000BEC4E                            loc_9268:
000BEC4E 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC54 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC58 6A00                       		bpl.s	loc2_9268
000BEC5A 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC60                            
000BEC60                            loc2_9268:
000BEC60 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC64 6700                       		beq.s	loc4_9268
000BEC66 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC6C                            
000BEC6C                            loc4_9268:
000BEC6C 4E75                       		rts
000BEC6E                            ; ===========================================================================
000BEC6E                            
000BEC6E                            loc_9296:
000BEC6E 4E75                       		rts
000BEC70                            
000BEC70                            Dynamic_Menu:
000BEC70 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC74 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC76 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC7C 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC80 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC84 0240 001F                                  andi.w  #$001F, D0
000BEC88 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC8C                                          ; muls.w  #$0140, D0                   ; as above
000BEC8C ED48                                       lsl.w   #$06, D0
000BEC8E 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC94 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC9C 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BECA2 43F1 0000                                  lea     $00(A1, D0), A1
000BECA6 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BECAA                                            
000BECAA                            Menu_Loop_Load_Tiles:
000BECAA 2C99                                       move.l  (A1)+, (A6)
000BECAC 2C99                                       move.l  (A1)+, (A6)     
000BECAE 2C99                                       move.l  (A1)+, (A6)     
000BECB0 2C99                                       move.l  (A1)+, (A6)     
000BECB2 2C99                                       move.l  (A1)+, (A6)     
000BECB4 2C99                                       move.l  (A1)+, (A6)
000BECB6 2C99                                       move.l  (A1)+, (A6)
000BECB8 2C99                                       move.l  (A1)+, (A6)
000BECBA 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BECBE                            Exit_Dinamic_Menu:                
000BECBE                                           
000BECBE 4E75                                       rts      
000BECC0                                                    
000BECC0                            Sonic_Miles_Frame_Select:     
000BECC0 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECCE 050A                                       dc.b    $05, $0A
000BECD0 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECDE 0A05                                       dc.b    $0A, $05   
000BECE0                            ; ===========================================================================
000BECE0                            ; off_92BA:
000BECE0                            OptScrBoxData:
000BECE0                            
000BECE0 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECE4 4192                       		dc.w $4192
000BECE6 0003                       		dc.w 3
000BECE8 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECEC 4592                       		dc.w $4592
000BECEE 0003                       		dc.w 3
000BECF0                            
000BECF0                            off_92D2:
000BECF0 0000 0000                  		dc.l TextOptScr_Default
000BECF4 0000 0000                  		dc.l TextOptScr_Original
000BECF8 0000 0000                  		dc.l TextOptScr_Beta
000BECFC 0000 0000                  		dc.l TextOptScr_Midnight
000BED00 0000 0000                  		dc.l TextOptScr_C2
000BED04 0000 0000                  		dc.l TextOptScr_Clackers
000BED08 0000 0000                  		dc.l TextOptScr_RHS
000BED0C 0000 0000                  		dc.l TextOptScr_Socket
000BED10 0000 0000                  		dc.l TextOptScr_Cringe
000BED14 0000 0000                  		dc.l TextOptScr_Dark	
000BED18 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BED1C                            off_92DE:
000BED1C 0000 0000                  		dc.l TextOptScr_Default
000BED20 0000 0000                  		dc.l TextOptScr_Original
000BED24 0000 0000                  		dc.l TextOptScr_Beta
000BED28 0000 0000                  		dc.l TextOptScr_Midnight
000BED2C 0000 0000                  		dc.l TextOptScr_C2
000BED30 0000 0000                  		dc.l TextOptScr_Clackers
000BED34 0000 0000                  		dc.l TextOptScr_RHS
000BED38 0000 0000                  		dc.l TextOptScr_Socket
000BED3C 0000 0000                  		dc.l TextOptScr_Cringe
000BED40 0000 0000                  		dc.l TextOptScr_Dark
000BED44 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED48                            off_92EA:
000BED48 0000 0000                  		dc.l TextOptScr_On
000BED4C 0000 0000                  		dc.l TextOptScr_Off
000BED50                            ; ===========================================================================
000BED50                            
000BEE48                            ; ============================================================================
000BEE48                            		even
000BEE48                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF348                            		even
000BF348                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4F8                            		even
000BF4F8                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA62                            		even
000BFA62                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFAE2                            		even
000BFAE2                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFB0E                            		even
000BFB0E                            		even
000BFB0E                            
000BFB0E                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D392                                        even
0013D392                            
0013D392                            Art_Dust:	incbin	artunc\spindust.bin
0013ECD2                            
0013ECD2                            ; ===============================================================
0013ECD2                            ; ==============================================================
0013ECD2                            ; --------------------------------------------------------------
0013ECD2                            ; Debugging modules
0013ECD2                            ; --------------------------------------------------------------
0013ECD2                            
0013ECD2                               include   "ErrorHandler.asm"
0013ECD2                            
0013ECD2                            ; ===============================================================
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Error handling and debugging modules
0013ECD2                            ; 2016-2017, Vladikcomper
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Error handler functions and calls
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Error handler control flags
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            ; Screen appearence flags
0013ECD2 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECD2 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECD2 =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECD2                            
0013ECD2                            ; Advanced execution flags
0013ECD2                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECD2 =00000020                  _eh_return		equ	$20
0013ECD2 =00000040                  _eh_enter_console	equ	$40
0013ECD2 =00000080                  _eh_align_offset	equ	$80
0013ECD2                            
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            ; Errors vector table
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            ; Default screen configuration
0013ECD2 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECD2                            
0013ECD2                            ; ---------------------------------------------------------------
0013ECD2                            
0013ECD2                            BusError:
0013ECD2 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECE4                            
0013ECE4                            AddressError:
0013ECE4 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECFA                            
0013ECFA                            IllegalInstr:
0013ECFA 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ED16                            
0013ED16                            ZeroDivide:
0013ED16 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED2A                            
0013ED2A                            ChkInstr:
0013ED2A 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED42                            
0013ED42                            TrapvInstr:
0013ED42 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED5C                            
0013ED5C                            PrivilegeViol:
0013ED5C 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED78                            
0013ED78                            Trace:
0013ED78 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED86                            
0013ED86                            Line1010Emu:
0013ED86 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED9E                            
0013ED9E                            Line1111Emu:
0013ED9E 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013EDB6                            
0013EDB6                            ErrorExcept:
0013EDB6 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDCE                            
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            ; Import error handler global functions
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            
0013EDCE                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDCE                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDCE                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDCE                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDCE                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDCE                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDCE                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDCE                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDCE                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDCE                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDCE                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDCE                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDCE                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDCE                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDCE                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDCE                            
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            ; Error handler external functions (compiled only when used)
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            
0013EDCE                            
0013EDCE                            
0013EDCE                            
0013EDCE                            
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            ; Include error handler binary module
0013EDCE                            ; ---------------------------------------------------------------
0013EDCE                            
0013EDCE                            ErrorHandler:
0013EDCE                            	incbin	ErrorHandler.bin
001407E2                            
001407E2                            ; ---------------------------------------------------------------
001407E2                            ; WARNING!
001407E2                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407E2                            ;	Symbol data should be appended here after ROM is compiled
001407E2                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407E2                            ;	to resolve symbol names.
001407E2                            ; ---------------------------------------------------------------
001407E2                            ; ---------------------------------------------------------------
001407E2                            
001407E2                            ; end of 'ROM'
001407E2                            		even
001407E2                            EndOfRom:
001407E2                            
001407E2                            
